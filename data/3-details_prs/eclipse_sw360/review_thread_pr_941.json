{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NDMxNTgx", "number": 941, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowMjoyMFrOEZcSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozNDo1NFrOEZdAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTEzMzg5OnYy", "diffSide": "RIGHT", "path": "backend/src/src-health/src/main/java/org/eclipse/sw360/health/db/HealthDatabaseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowMjoyMFrOHCQPjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowMjoyMFrOHCQPjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNTMyNw==", "bodyText": "Since here it is creating a child class of HashSet, adding DB ,finally creating unmodifiable set.\nIt can be achieved by ImmutableSet\n    public static final Set<String> DATABASES_TO_CHECK = ImmutableSet.of(DatabaseSettings.COUCH_DB_ATTACHMENTS,\n    \t\tDatabaseSettings.COUCH_DB_DATABASE,\n    \t\tDatabaseSettings.COUCH_DB_USERS);", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472125327", "createdAt": "2020-08-18T12:02:20Z", "author": {"login": "JaideepPalit"}, "path": "backend/src/src-health/src/main/java/org/eclipse/sw360/health/db/HealthDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Bosch.IO 2020.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.health.db;\n+\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.health.Health;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.ektorp.http.HttpClient;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+public class HealthDatabaseHandler {\n+\n+    private final DatabaseInstance db;\n+\n+    public static final Set<String> DATABASES_TO_CHECK = Collections.unmodifiableSet(new HashSet<String>() {\n+        {\n+            add(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+            add(DatabaseSettings.COUCH_DB_DATABASE);\n+            add(DatabaseSettings.COUCH_DB_USERS);\n+        }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTE0Njc5OnYy", "diffSide": "RIGHT", "path": "backend/src/src-health/src/main/java/org/eclipse/sw360/health/db/HealthDatabaseHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowNjowN1rOHCQXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowNjowN1rOHCQXLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNzI3OQ==", "bodyText": "Would it be possible to have narrower level of Exception.\nBecause Exception is very broad and include NullPointerException ... as well.", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472127279", "createdAt": "2020-08-18T12:06:07Z", "author": {"login": "JaideepPalit"}, "path": "backend/src/src-health/src/main/java/org/eclipse/sw360/health/db/HealthDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Bosch.IO 2020.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.sw360.health.db;\n+\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.health.Health;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.ektorp.http.HttpClient;\n+\n+import java.net.MalformedURLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+public class HealthDatabaseHandler {\n+\n+    private final DatabaseInstance db;\n+\n+    public static final Set<String> DATABASES_TO_CHECK = Collections.unmodifiableSet(new HashSet<String>() {\n+        {\n+            add(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+            add(DatabaseSettings.COUCH_DB_DATABASE);\n+            add(DatabaseSettings.COUCH_DB_USERS);\n+        }\n+    });\n+\n+    public HealthDatabaseHandler(Supplier<HttpClient> httpClient) throws MalformedURLException {\n+        db = new DatabaseInstance(httpClient.get());\n+    }\n+\n+    public Health getHealth() {\n+        final Health health = new Health().setDetails(new HashMap<>());\n+\n+        for (String database : DATABASES_TO_CHECK) {\n+            try {\n+                if (!db.checkIfDbExists(database)) {\n+                    health.getDetails().put(database, String.format(\"The database '%s' does not exist.\", database));\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTE1NjM1OnYy", "diffSide": "RIGHT", "path": "backend/svc/svc-health/src/main/webapp/index.jsp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowOToxM1rOHCQdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowOToxM1rOHCQdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyODc5Ng==", "bodyText": "Kindly add indentation here and in thrift file", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472128796", "createdAt": "2020-08-18T12:09:13Z", "author": {"login": "JaideepPalit"}, "path": "backend/svc/svc-health/src/main/webapp/index.jsp", "diffHunk": "@@ -0,0 +1,21 @@\n+<!--\n+Copyright Siemens AG, 2013-2014. Part of the SW360 Portal Project.\n+With modifications by Bosch.IO GmbH, 2020.\n+\n+This program and the accompanying materials are made\n+available under the terms of the Eclipse Public License 2.0\n+which is available at https://www.eclipse.org/legal/epl-2.0/\n+\n+SPDX-License-Identifier: EPL-2.0\n+\n+Description: Welcome file for Health Service\n+-->\n+<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n+<html>\n+<head>\n+  <title>Welcome to the SW360 Health Service</title>\n+</head>\n+<body>\n+<h2>Welcome to the SW360 Health Service!</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTE4MDU5OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoxNjoxM1rOHCQrlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTo0NDo0MVrOHFgvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMjUwMA==", "bodyText": "scope can be removed since compile is default scope", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472132500", "createdAt": "2020-08-18T12:16:13Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/pom.xml", "diffHunk": "@@ -28,6 +29,12 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+            <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0MTI3Mg==", "bodyText": "I was thinking the same, but got thrown of by the rest of the pom file and thought I'd try to adjust to the style of the document. I will adjust it.\nIs there a reason that some other components in the same pom file have the compile scope?", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r475541272", "createdAt": "2020-08-24T11:44:41Z", "author": {"login": "neubs-bsi"}, "path": "rest/resource-server/pom.xml", "diffHunk": "@@ -28,6 +29,12 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+            <scope>compile</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMjUwMA=="}, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTE5MjAxOnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoxOTozMVrOHCQylA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxODoyNFrOHHBFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNDI5Mg==", "bodyText": "It would be good to have aSingleton here.\nSame for other places like in testcases.", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472134292", "createdAt": "2020-08-18T12:19:31Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMTczNQ==", "bodyText": "I am doing it the way it is done in the rest of the code, except that I extracted the call new ThriftClients().makeHealthClient() into a separate function.\nWould you like me to not do it in a separate method?", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r475601735", "createdAt": "2020-08-24T13:32:32Z", "author": {"login": "neubs-bsi"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNDI5Mg=="}, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyNDg3MQ==", "bodyText": "The code is fine.\nI was trying to say, since thrift client wont change, maybe we can create a single HealthService.Iface object and reuse it.\nInstead of creating a new one with every request.\n    private static HealthService.Iface healthService;\n    protected HealthService.Iface makeHealthClient() {\n        if(healthService==null) {\n            healthService = new ThriftClients().makeHealthClient();\n        }\n        return healthService;\n    }", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r476224871", "createdAt": "2020-08-25T07:09:41Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNDI5Mg=="}, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExOTkxMg==", "bodyText": "I was under the impression that this is not possible due to Thrift not being threadsafe.\nSince the calls are made via Spring we can't control the threads. Hence the client could be corrupted.\nSince I am not sure what exactly thrift does under the hood to its client in a thread I would opt for the safest option, which is to declare a new one for each thread.", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r477119912", "createdAt": "2020-08-26T08:18:24Z", "author": {"login": "neubs-bsi"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNDI5Mg=="}, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIzNjE5OnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/resources/application.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMToxMVrOHCRMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMToxMVrOHCRMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MDkzNA==", "bodyText": "There are some commented code left", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472140934", "createdAt": "2020-08-18T12:31:11Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/resources/application.yml", "diffHunk": "@@ -11,6 +12,20 @@\n server:\n   port: 8091\n \n+#management:\n+#  security:\n+#    enabled: false\n+  # context-path: /<alternative-path-actuator-endpoints-get-mapped-to>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI1MDkwOnYy", "diffSide": "RIGHT", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozNDo1NFrOHCRV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDozMjo0N1rOHHPDcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MzMxOQ==", "bodyText": "It would be good to use CustomException class like Sw360Exception", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r472143319", "createdAt": "2020-08-18T12:34:54Z", "author": {"login": "JaideepPalit"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();\n+        try {\n+            final org.eclipse.sw360.datahandler.thrift.health.Health health = healthClient.getHealth();\n+            if (health.getStatus().equals(Status.UP)) {\n+                return true;\n+            } else {\n+                exception.add(\n+                        new Exception(health.getStatus().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0ODcyMA==", "bodyText": "The Exception here is a formality that is needed because in this version of the spring boot actuator it does not take throwables in its exception status. The actual exception will unfortunately be wrapped within this exception already.\nI don't think making this a custom exception adds information to the exception, which should be the goal of custom exceptions.", "url": "https://github.com/eclipse/sw360/pull/941#discussion_r477348720", "createdAt": "2020-08-26T14:32:47Z", "author": {"login": "neubs-bsi"}, "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/SW360RestHealthIndicator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Bosch.IO GmbH 2020\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.sw360.rest.resourceserver;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.common.DatabaseSettings;\n+import org.eclipse.sw360.datahandler.couchdb.DatabaseInstance;\n+import org.eclipse.sw360.datahandler.thrift.ThriftClients;\n+import org.eclipse.sw360.datahandler.thrift.health.HealthService;\n+import org.eclipse.sw360.datahandler.thrift.health.Status;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SW360RestHealthIndicator implements HealthIndicator {\n+    @Override\n+    public Health health() {\n+        List<Exception> exceptions = new ArrayList<>();\n+        RestState restState = check(exceptions);\n+        final String rest_state_detail = \"Rest State\";\n+        if (!restState.isUp()) {\n+            Health.Builder builderWithDetails = Health.down()\n+                    .withDetail(rest_state_detail, restState);\n+            for (Exception exception : exceptions) {\n+                builderWithDetails = builderWithDetails.withException(exception);\n+            }\n+            return builderWithDetails\n+                    .build();\n+        }\n+        return Health.up()\n+                .withDetail(rest_state_detail, restState)\n+                .build();\n+    }\n+\n+    private RestState check(List<Exception> exception) {\n+        RestState restState = new RestState();\n+        try {\n+            restState.isDbReachable = isDbReachable(exception);\n+        } catch (MalformedURLException e) {\n+            restState.isDbReachable = false;\n+            exception.add(e);\n+        }\n+        restState.isThriftReachable = isThriftReachable(exception);\n+        return restState;\n+    }\n+\n+    private boolean isDbReachable(List<Exception> exception) throws MalformedURLException {\n+        DatabaseInstance databaseInstance = makeDatabaseInstance();\n+        try {\n+            return databaseInstance.checkIfDbExists(DatabaseSettings.COUCH_DB_ATTACHMENTS);\n+        } catch (Exception e) {\n+            exception.add(e);\n+            return false;\n+        }\n+    }\n+\n+    private boolean isThriftReachable(List<Exception> exception) {\n+        HealthService.Iface healthClient = makeHealthClient();\n+        try {\n+            final org.eclipse.sw360.datahandler.thrift.health.Health health = healthClient.getHealth();\n+            if (health.getStatus().equals(Status.UP)) {\n+                return true;\n+            } else {\n+                exception.add(\n+                        new Exception(health.getStatus().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MzMxOQ=="}, "originalCommit": {"oid": "0e33f6c47bdd41c968b04e0cf24206b5e07c5126"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1162, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}