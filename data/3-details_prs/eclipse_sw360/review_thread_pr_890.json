{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODUxNDQ1", "number": 890, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNDozN1rOEMWOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyMzozOFrOEQGOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgyNDc0OnYy", "diffSide": "RIGHT", "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/PortletUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNDozN1rOGuZwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTo0NzoxOVrOGvJ3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTcyOA==", "bodyText": "Creating an object mapper is a rather expensive operation; so this should not be done for each element in the map. The object creation should at least be moved to the beginning of the method.\nAs the ObjectMapper class is thread-safe, in this case it would also be an option to have a static ObjectMapper field in PortletUtils that is always reused.", "url": "https://github.com/eclipse/sw360/pull/890#discussion_r451309728", "createdAt": "2020-07-08T06:24:37Z", "author": {"login": "oheger-bosch"}, "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/PortletUtils.java", "diffHunk": "@@ -369,6 +371,27 @@ public static VerificationState getVerificationState(VulnerabilityDTO vul){\n         return customMap;\n     }\n \n+    public static Map<String,String> getMapWithJoinedValueFromRequest(PortletRequest request, String key, String value) {\n+        Map<String, Set<String>> customMap = getCustomMapFromRequest(request, key, value);\n+        return customMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                        e -> {\n+                            try {\n+                                if(!isNotEmpty(e.getValue()) && e.getValue().size() == 1) {\n+                                    return e.getValue().stream()\n+                                            .findFirst()\n+                                            .orElse(\"\");\n+                                }\n+                                ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aefcf6d40a7e69238da5dcdc76e33e0a095ed7a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3Njk2Mw==", "bodyText": "Thanks a lot, @oheger-bosch\nI have refactored the code.", "url": "https://github.com/eclipse/sw360/pull/890#discussion_r451376963", "createdAt": "2020-07-08T08:35:51Z", "author": {"login": "AlbertHjy"}, "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/PortletUtils.java", "diffHunk": "@@ -369,6 +371,27 @@ public static VerificationState getVerificationState(VulnerabilityDTO vul){\n         return customMap;\n     }\n \n+    public static Map<String,String> getMapWithJoinedValueFromRequest(PortletRequest request, String key, String value) {\n+        Map<String, Set<String>> customMap = getCustomMapFromRequest(request, key, value);\n+        return customMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                        e -> {\n+                            try {\n+                                if(!isNotEmpty(e.getValue()) && e.getValue().size() == 1) {\n+                                    return e.getValue().stream()\n+                                            .findFirst()\n+                                            .orElse(\"\");\n+                                }\n+                                ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTcyOA=="}, "originalCommit": {"oid": "0aefcf6d40a7e69238da5dcdc76e33e0a095ed7a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2MDg2Mw==", "bodyText": "@albert-hjy, thanks for the update. This looks better now performance-wise. I am, however, a bit worried that the lazy initialization approach is not thread-safe. As the utils class is called during request execution, there will be multiple threads involved, and we should take care that this is safe.\nThe easiest solution is certainly to get rid off the lazy initialization, make the ObjectMapper field final, and create the mapper directly.\nIf you prefer lazy initialization, then I would suggest using the Lazy initialization holder class idiom for static fields.\nPlease also refer to J. Bloch, \"Effective Java\", 3rd edition, item 83 \"Use lazy initialization judiciously\"", "url": "https://github.com/eclipse/sw360/pull/890#discussion_r451960863", "createdAt": "2020-07-09T04:45:24Z", "author": {"login": "oheger-bosch"}, "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/PortletUtils.java", "diffHunk": "@@ -369,6 +371,27 @@ public static VerificationState getVerificationState(VulnerabilityDTO vul){\n         return customMap;\n     }\n \n+    public static Map<String,String> getMapWithJoinedValueFromRequest(PortletRequest request, String key, String value) {\n+        Map<String, Set<String>> customMap = getCustomMapFromRequest(request, key, value);\n+        return customMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                        e -> {\n+                            try {\n+                                if(!isNotEmpty(e.getValue()) && e.getValue().size() == 1) {\n+                                    return e.getValue().stream()\n+                                            .findFirst()\n+                                            .orElse(\"\");\n+                                }\n+                                ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTcyOA=="}, "originalCommit": {"oid": "0aefcf6d40a7e69238da5dcdc76e33e0a095ed7a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5NzkwMQ==", "bodyText": "@oheger-bosch , thanks a lot. Agree that it's unnecessary to use lazy initialization here. I have changed ObjectMapper field final.", "url": "https://github.com/eclipse/sw360/pull/890#discussion_r452097901", "createdAt": "2020-07-09T09:47:19Z", "author": {"login": "AlbertHjy"}, "path": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/PortletUtils.java", "diffHunk": "@@ -369,6 +371,27 @@ public static VerificationState getVerificationState(VulnerabilityDTO vul){\n         return customMap;\n     }\n \n+    public static Map<String,String> getMapWithJoinedValueFromRequest(PortletRequest request, String key, String value) {\n+        Map<String, Set<String>> customMap = getCustomMapFromRequest(request, key, value);\n+        return customMap.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                        e -> {\n+                            try {\n+                                if(!isNotEmpty(e.getValue()) && e.getValue().size() == 1) {\n+                                    return e.getValue().stream()\n+                                            .findFirst()\n+                                            .orElse(\"\");\n+                                }\n+                                ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTcyOA=="}, "originalCommit": {"oid": "0aefcf6d40a7e69238da5dcdc76e33e0a095ed7a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzE0NjQ0OnYy", "diffSide": "RIGHT", "path": "scripts/migrations/020_update_byExternalIds_release_view.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyMzozOFrOG0ExNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyMzozOFrOG0ExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1NzI2OQ==", "bodyText": "Getting error while executing this script\nFile \"020_update_byExternalIds_release_view.py\", line 21\nSyntaxError: Non-ASCII character '\\xc3' in file 020_update_byExternalIds_release_view.py on line 21, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details", "url": "https://github.com/eclipse/sw360/pull/890#discussion_r457257269", "createdAt": "2020-07-20T10:23:38Z", "author": {"login": "JaideepPalit"}, "path": "scripts/migrations/020_update_byExternalIds_release_view.py", "diffHunk": "@@ -0,0 +1,97 @@\n+#!/usr/bin/python\n+# -----------------------------------------------------------------------------\n+# Copyright Siemens AG, 2019. Part of the SW360 Portal Project.\n+#\n+# This program and the accompanying materials are made\n+# available under the terms of the Eclipse Public License 2.0\n+# which is available at https://www.eclipse.org/legal/epl-2.0/\n+#\n+# SPDX-License-Identifier: EPL-2.0\n+#\n+# This is a manual database migration script. It is assumed that a\n+# dedicated framework for automatic migration will be written in the\n+# future. When that happens, this script should be refactored to conform\n+# to the framework's prerequisites to be run by the framework. For\n+# example, server address and db name should be parameterized, the code\n+# reorganized into a single class or function, etc.\n+# -----------------------------------------------------------------------------\n+\n+import time\n+import couchdb\n+import json\u00df", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753d3889a24e0d9e0e2f6dc92853d0ec3673f1c2"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1281, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}