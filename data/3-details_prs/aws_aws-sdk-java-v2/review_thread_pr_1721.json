{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDg0Mzgw", "number": 1721, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxODowMFrODo6DZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzowOVrODo6IdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIwNzczOnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxODowMFrOF3wAsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo0MToxNlrOF3wnKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjYwOQ==", "bodyText": "Log4j2 docs suggest we could use logger.isTraceEnabled() here? Might be slightly better than passing a string", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394002609", "createdAt": "2020-03-17T22:18:00Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -160,6 +161,13 @@ public ByteBuffer apply(ByteBuffer byteBuffer) {\n                  * Encode signed event to byte\n                  */\n                 Message signedMessage = new Message(sortHeaders(headers), payload);\n+\n+                if (LOG.isLoggingLevelEnabled(\"trace\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzA1Mg==", "bodyText": "another approach is to use LOG.printf(.... which allows you to dynamically set the log level which means that theoretically you could do all this in a single line without having an if statement.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394003052", "createdAt": "2020-03-17T22:19:09Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -160,6 +161,13 @@ public ByteBuffer apply(ByteBuffer byteBuffer) {\n                  * Encode signed event to byte\n                  */\n                 Message signedMessage = new Message(sortHeaders(headers), payload);\n+\n+                if (LOG.isLoggingLevelEnabled(\"trace\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjYwOQ=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNTY0MQ==", "bodyText": "This is our software.amazon.awssdk.utils.Logger not Log4j's", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394005641", "createdAt": "2020-03-17T22:25:40Z", "author": {"login": "dagnir"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -160,6 +161,13 @@ public ByteBuffer apply(ByteBuffer byteBuffer) {\n                  * Encode signed event to byte\n                  */\n                 Message signedMessage = new Message(sortHeaders(headers), payload);\n+\n+                if (LOG.isLoggingLevelEnabled(\"trace\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjYwOQ=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNzEzMQ==", "bodyText": "Ahh ok nevermind then. I assume we don't have a similar method then?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394007131", "createdAt": "2020-03-17T22:29:00Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -160,6 +161,13 @@ public ByteBuffer apply(ByteBuffer byteBuffer) {\n                  * Encode signed event to byte\n                  */\n                 Message signedMessage = new Message(sortHeaders(headers), payload);\n+\n+                if (LOG.isLoggingLevelEnabled(\"trace\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjYwOQ=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxMjQ1OA==", "bodyText": "Not currently", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394012458", "createdAt": "2020-03-17T22:41:16Z", "author": {"login": "dagnir"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -160,6 +161,13 @@ public ByteBuffer apply(ByteBuffer byteBuffer) {\n                  * Encode signed event to byte\n                  */\n                 Message signedMessage = new Message(sortHeaders(headers), payload);\n+\n+                if (LOG.isLoggingLevelEnabled(\"trace\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjYwOQ=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIxNDU1OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMDo0NlrOF3wE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyOToxOVrOF3wTGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzY5Ng==", "bodyText": "why not do this with some kind of stream thing?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394003696", "createdAt": "2020-03-17T22:20:46Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {\n+        StringBuilder sb = new StringBuilder(\"Message = {headers={\");\n+        Map<String, HeaderValue> headers = m.getHeaders();\n+\n+        Iterator<Map.Entry<String, HeaderValue>> headersIter = headers.entrySet().iterator();\n+\n+        while (headersIter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNTkxMA==", "bodyText": "I found it easier to use this while working with the string builder. I can change it if it's a blocker for you", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394005910", "createdAt": "2020-03-17T22:26:17Z", "author": {"login": "dagnir"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {\n+        StringBuilder sb = new StringBuilder(\"Message = {headers={\");\n+        Map<String, HeaderValue> headers = m.getHeaders();\n+\n+        Iterator<Map.Entry<String, HeaderValue>> headersIter = headers.entrySet().iterator();\n+\n+        while (headersIter.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzY5Ng=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNzMyMA==", "bodyText": "No not a blocker, just a nit. You can ignore.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394007320", "createdAt": "2020-03-17T22:29:19Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {\n+        StringBuilder sb = new StringBuilder(\"Message = {headers={\");\n+        Map<String, HeaderValue> headers = m.getHeaders();\n+\n+        Iterator<Map.Entry<String, HeaderValue>> headersIter = headers.entrySet().iterator();\n+\n+        while (headersIter.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzY5Ng=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIxNzI1OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMTo0M1rOF3wGfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjozMjowNlrOF3wZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDA5Mg==", "bodyText": "Could payload.length be 0? what happens then?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394004092", "createdAt": "2020-03-17T22:21:43Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {\n+        StringBuilder sb = new StringBuilder(\"Message = {headers={\");\n+        Map<String, HeaderValue> headers = m.getHeaders();\n+\n+        Iterator<Map.Entry<String, HeaderValue>> headersIter = headers.entrySet().iterator();\n+\n+        while (headersIter.hasNext()) {\n+            Map.Entry<String, HeaderValue> h = headersIter.next();\n+\n+            sb.append(h.getKey()).append(\"={\").append(h.getValue().toString()).append(\"}\");\n+\n+            if (headersIter.hasNext()) {\n+                sb.append(\", \");\n+            }\n+        }\n+\n+        sb.append(\"}, payload=\");\n+\n+        byte[] payload = m.getPayload();\n+\n+        byte[] payloadToLog;\n+        if (truncatePayload) {\n+            // Would be nice if BinaryUtils.toHex() could take an array index range instead so we don't need to copy\n+            payloadToLog = Arrays.copyOf(payload, Math.min(32, payload.length));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwODg4Nw==", "bodyText": "This should be fine, it will generate an empty string", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394008887", "createdAt": "2020-03-17T22:32:06Z", "author": {"login": "dagnir"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {\n+        StringBuilder sb = new StringBuilder(\"Message = {headers={\");\n+        Map<String, HeaderValue> headers = m.getHeaders();\n+\n+        Iterator<Map.Entry<String, HeaderValue>> headersIter = headers.entrySet().iterator();\n+\n+        while (headersIter.hasNext()) {\n+            Map.Entry<String, HeaderValue> h = headersIter.next();\n+\n+            sb.append(h.getKey()).append(\"={\").append(h.getValue().toString()).append(\"}\");\n+\n+            if (headersIter.hasNext()) {\n+                sb.append(\", \");\n+            }\n+        }\n+\n+        sb.append(\"}, payload=\");\n+\n+        byte[] payload = m.getPayload();\n+\n+        byte[] payloadToLog;\n+        if (truncatePayload) {\n+            // Would be nice if BinaryUtils.toHex() could take an array index range instead so we don't need to copy\n+            payloadToLog = Arrays.copyOf(payload, Math.min(32, payload.length));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDA5Mg=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIyMDY5OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzowOVrOF3wItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyNjo0MFrOF3wONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDY2MA==", "bodyText": "I know we don't usually write unit tests for logs but maybe this method is complex enough to justify one?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394004660", "createdAt": "2020-03-17T22:23:09Z", "author": {"login": "bmaizels"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjA3MQ==", "bodyText": "Sure will add one", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1721#discussion_r394006071", "createdAt": "2020-03-17T22:26:40Z", "author": {"login": "dagnir"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/BaseEventStreamAsyncAws4Signer.java", "diffHunk": "@@ -259,4 +267,35 @@ public void subscribe(Subscriber<? super ByteBuffer> s) {\n             return transformedRequestBody.contentLength();\n         }\n     }\n+\n+    private static String toDebugString(Message m, boolean truncatePayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDY2MA=="}, "originalCommit": {"oid": "cb34fc80876e356ac6a9796751c4df2f9b8eb6ce"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}