{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTY1NzQ1", "number": 1733, "title": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "bodyText": "Description\nAdds an additional builder field to DefaultS3Presigner to allow overriding the default S3Configuration being used.\nMotivation and Context\nCurrently it is impossible to leverage S3 accelerated endpoints with the S3Presigner. This is due to the fact that there is no way to override the S3Configuration being used by the DefaultS3Presigner.\nNormally this would be accomplished by setting .accelerateModeEnabled(true) on an S3Configuration object and in turn using that configuration when building S3 endpoints.\nIn order to accomplish this today one must completely duplicate the DefaultS3Presigner themselves in their own project and customize their copy like I've done in this pull request.\nThis change allows the developer to easily provide a custom S3Configuration using the provided Builder already in place.\nTesting\n\nI added a unit test to ensure the intended usage works as desired.\nScreenshots (if appropriate)\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-03-23T18:36:11Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733", "merged": true, "mergeCommit": {"oid": "c2830437298526c7356112b0820f09e98abd1b2d"}, "closed": true, "closedAt": "2020-04-08T17:59:20Z", "author": {"login": "scheerer"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQjAVngFqTM3OTcyNjg4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTw0mCAH2gAyMzkyNTY1NzQ1OjZhZDJkMzIxMTQyOTBiYjBkNjk2MTcwYjA1MjM0NjgwMzM2Nzk3ZDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzI2ODgw", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#pullrequestreview-379726880", "createdAt": "2020-03-23T18:53:57Z", "commit": {"oid": "c5a546aa64670ef8ac115d6f49885ebc953e21bd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo1Mzo1N1rOF6ToIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo1NTo0NFrOF6TsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzI5OA==", "bodyText": "Can we call this serviceConfiguration to match S3BaseClientBuilder#serviceConfiguration?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396683298", "createdAt": "2020-03-23T18:53:57Z", "author": {"login": "millems"}, "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/presigner/S3Presigner.java", "diffHunk": "@@ -512,6 +513,8 @@ default PresignedAbortMultipartUploadRequest presignAbortMultipartUpload(\n     @SdkPublicApi\n     @NotThreadSafe\n     interface Builder extends SdkPresigner.Builder {\n+        Builder s3Configuration(S3Configuration s3Configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a546aa64670ef8ac115d6f49885ebc953e21bd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzgxNQ==", "bodyText": "Why is disabling checksum validation required?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396683815", "createdAt": "2020-03-23T18:54:50Z", "author": {"login": "millems"}, "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/internal/presigner/DefaultS3Presigner.java", "diffHunk": "@@ -98,9 +98,13 @@\n @SdkInternalApi\n public final class DefaultS3Presigner extends DefaultSdkPresigner implements S3Presigner {\n     private static final AwsS3V4Signer DEFAULT_SIGNER = AwsS3V4Signer.create();\n+    private static final S3Configuration DEFAULT_S3_CONFIGURATION = S3Configuration.builder()\n+            .checksumValidationEnabled(false)\n+            .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a546aa64670ef8ac115d6f49885ebc953e21bd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDM2OA==", "bodyText": "Can we test all possible flags of S3Configuration?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396684368", "createdAt": "2020-03-23T18:55:44Z", "author": {"login": "millems"}, "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +328,23 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().s3Configuration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .checksumValidationEnabled(false)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a546aa64670ef8ac115d6f49885ebc953e21bd"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5a546aa64670ef8ac115d6f49885ebc953e21bd", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c5a546aa64670ef8ac115d6f49885ebc953e21bd", "committedDate": "2020-03-23T18:35:00Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}, "afterCommit": {"oid": "c7280445eed9aa94a7e13f89c8b28ca545be339e", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c7280445eed9aa94a7e13f89c8b28ca545be339e", "committedDate": "2020-03-24T21:19:33Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDQ5MDQx", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#pullrequestreview-381449041", "createdAt": "2020-03-25T18:59:37Z", "commit": {"oid": "5e30d986a096b36d46e76923fc1cc73789d30906"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1OTozN1rOF7p-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1OTozN1rOF7p-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5Nzk0MQ==", "bodyText": "Nice! Thanks for testing this.\nFor the other features:\n\npathStyleAccessEnabled, useArnRegionEnabled both affect the endpoint. If they're working, can we add a test for them? If they're not working, maybe we should throw an exception if they're configured.\nchunkedEncodingEnabled and checksumValidationEnabled don't make sense for presigned requests right now. Can we add some javadoc to mention that they currently aren't used for presigning?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r398097941", "createdAt": "2020-03-25T18:59:37Z", "author": {"login": "millems"}, "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +330,94 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }\n+\n+\n+    @Test\n+    public void accelerateEnabled_UsesVirtualAddressingWithAccelerateEndpoint() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack uses regional endpoints that support virtual addressing.\n+     */\n+    @Test\n+    public void dualstackEnabled_UsesVirtualAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(String.format(\"%s.s3.dualstack.us-west-2.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack also supports path style endpoints just like the normal endpoints.\n+     */\n+    @Test\n+    public void dualstackAndPathStyleEnabled_UsesPathStyleAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .pathStyleAccessEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(\"s3.dualstack.us-west-2.amazonaws.com\");\n+    }\n+\n+    /**\n+     * When dualstack and accelerate are both enabled there is a special, global dualstack endpoint we must use.\n+     */\n+    @Test\n+    public void dualstackAndAccelerateEnabled_UsesDualstackAccelerateEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.dualstack.amazonaws.com\", BUCKET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e30d986a096b36d46e76923fc1cc73789d30906"}, "originalPosition": 129}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bad9ba9bcc94fba8313667ddf6602b17f1779bb", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/4bad9ba9bcc94fba8313667ddf6602b17f1779bb", "committedDate": "2020-04-02T16:48:47Z", "message": "Add S3Presigner tests to address useArnRegionEnabled; javadoc additions to note S3Configuration items that do not apply to presigning"}, "afterCommit": {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/087fe2739083169531a4992b5cc2f9453bb1a538", "committedDate": "2020-04-02T17:21:05Z", "message": "Add S3Presigner tests to address useArnRegionEnabled; javadoc additions to note S3Configuration items that do not apply to presigning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjczMDgy", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#pullrequestreview-386673082", "createdAt": "2020-04-02T18:06:03Z", "commit": {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowNjowM1rOF_3W0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowNzoyNlrOF_3ZxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTU3MQ==", "bodyText": "Can we include the javadoc here as well? I see you added it to the concrete implementation already.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402511571", "createdAt": "2020-04-02T18:06:03Z", "author": {"login": "millems"}, "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/presigner/S3Presigner.java", "diffHunk": "@@ -512,6 +513,8 @@ default PresignedAbortMultipartUploadRequest presignAbortMultipartUpload(\n     @SdkPublicApi\n     @NotThreadSafe\n     interface Builder extends SdkPresigner.Builder {\n+        Builder serviceConfiguration(S3Configuration serviceConfiguration);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMjMyNQ==", "bodyText": "Comment not needed.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402512325", "createdAt": "2020-04-02T18:07:26Z", "author": {"login": "millems"}, "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +329,128 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }\n+\n+\n+    @Test\n+    public void accelerateEnabled_UsesVirtualAddressingWithAccelerateEndpoint() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack uses regional endpoints that support virtual addressing.\n+     */\n+    @Test\n+    public void dualstackEnabled_UsesVirtualAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(String.format(\"%s.s3.dualstack.us-west-2.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack also supports path style endpoints just like the normal endpoints.\n+     */\n+    @Test\n+    public void dualstackAndPathStyleEnabled_UsesPathStyleAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .pathStyleAccessEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(\"s3.dualstack.us-west-2.amazonaws.com\");\n+        assertThat(presignedRequest.url().toString()).startsWith(String.format(\"https://s3.dualstack.us-west-2.amazonaws.com/%s/%s?\", BUCKET, \"bar\"));\n+    }\n+\n+    /**\n+     * When dualstack and accelerate are both enabled there is a special, global dualstack endpoint we must use.\n+     */\n+    @Test\n+    public void dualstackAndAccelerateEnabled_UsesDualstackAccelerateEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.dualstack.amazonaws.com\", BUCKET));\n+    }\n+\n+    @Test\n+    public void accessPointArn_differentRegion_useArnRegionTrue() throws Exception {\n+        String customEndpoint = \"https://foobar-12345678910.s3-accesspoint.us-west-2.amazonaws.com\";\n+        String accessPointArn = \"arn:aws:s3:us-west-2:12345678910:accesspoint:foobar\";\n+\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .useArnRegionEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(accessPointArn)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.url().toString()).startsWith(customEndpoint);\n+    }\n+\n+    @Test //(expected = IllegalArgumentException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538"}, "originalPosition": 143}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/087fe2739083169531a4992b5cc2f9453bb1a538", "committedDate": "2020-04-02T17:21:05Z", "message": "Add S3Presigner tests to address useArnRegionEnabled; javadoc additions to note S3Configuration items that do not apply to presigning"}, "afterCommit": {"oid": "edcbb4f5a550a1cf3c4a865602273094f7097cdc", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/edcbb4f5a550a1cf3c4a865602273094f7097cdc", "committedDate": "2020-04-02T18:38:32Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51e58f1618e75c032e17a85d49a6051796df41e", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c51e58f1618e75c032e17a85d49a6051796df41e", "committedDate": "2020-04-02T18:41:48Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edcbb4f5a550a1cf3c4a865602273094f7097cdc", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/edcbb4f5a550a1cf3c4a865602273094f7097cdc", "committedDate": "2020-04-02T18:38:32Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}, "afterCommit": {"oid": "c51e58f1618e75c032e17a85d49a6051796df41e", "author": {"user": {"login": "scheerer", "name": "Russell Scheerer"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c51e58f1618e75c032e17a85d49a6051796df41e", "committedDate": "2020-04-02T18:41:48Z", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Njk5ODM0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#pullrequestreview-386699834", "createdAt": "2020-04-02T18:43:25Z", "commit": {"oid": "c51e58f1618e75c032e17a85d49a6051796df41e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad2d32114290bb0d696170b05234680336797d4", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/6ad2d32114290bb0d696170b05234680336797d4", "committedDate": "2020-04-02T18:43:32Z", "message": "Merge branch 'master' into feature/AllowCustomS3ConfigurationForS3Presigner"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2765, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}