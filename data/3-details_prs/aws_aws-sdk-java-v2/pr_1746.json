{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODAxNDU3", "number": 1746, "title": "DDB Enhanced adding ChainConverterProvider", "bodyText": "Description\n\nAdds a 'chained' AttributeConverterProvider that can hold any number of user-supplied AttributeConverterProviders and will match converters using strict precedence, first-come-first-served.\nIt's also possible to supply an empty list to completely override the default AttributeConverterProvider provided by the library, in which case the user must add an AttributeConverter for each attribute in the schema\nBoth features available for StaticTableSchema and for DynamoDbBeans (BeanTableSchema).\n\nFor reference: Issue 35\nNote: README updated separately in PR 1731.\nMotivation and Context\n\nConsistent behavior over both bean and static table schema\nUser-friendly syntax for bean\n\nTesting\nUnit tested\nScreenshots (if appropriate)\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog", "createdAt": "2020-03-30T17:46:38Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746", "merged": true, "mergeCommit": {"oid": "d4ea84ff7f601f489b6bfb396157bc3149138c88"}, "closed": true, "closedAt": "2020-04-01T23:20:34Z", "author": {"login": "cenedhryn"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTGJqvAFqTM4NDkxNTQ4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTerCMABqjMxODk3NjQwNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTE1NDgw", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#pullrequestreview-384915480", "createdAt": "2020-03-31T16:42:22Z", "commit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjo0MjoyMlrOF-esYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowMDoyNlrOF-fbCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODkxMw==", "bodyText": "I think an [immutable] List would be the most appropriate collection to return here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401058913", "createdAt": "2020-03-31T16:42:22Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ChainConverterProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.converter;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import java.util.Queue;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverterProvider;\n+import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;\n+\n+/**\n+ * A {@link AttributeConverterProvider} that allows multiple providers to be chained in a specified order\n+ * to act as a single composite provider. When searching for an attribute converter for a type,\n+ * the providers will be called in forward/ascending order, attempting to find a converter from the\n+ * first provider, then the second, and so on, until a match is found or the operation fails.\n+ */\n+@SdkInternalApi\n+public final class ChainConverterProvider implements AttributeConverterProvider {\n+    private final Deque<AttributeConverterProvider> providerChain;\n+\n+    private ChainConverterProvider(List<AttributeConverterProvider> providers) {\n+        this.providerChain = new ArrayDeque<>(providers);\n+    }\n+\n+    /**\n+     * Construct a new instance of {@link ChainConverterProvider}.\n+     * @param providers A list of {@link AttributeConverterProvider} to chain together.\n+     * @return A constructed {@link ChainConverterProvider} object.\n+     */\n+    public static ChainConverterProvider create(AttributeConverterProvider... providers) {\n+        return new ChainConverterProvider(Arrays.asList(providers));\n+    }\n+\n+    /**\n+     * Construct a new instance of {@link ChainConverterProvider}.\n+     * @param providers A list of {@link AttributeConverterProvider} to chain together.\n+     * @return A constructed {@link ChainConverterProvider} object.\n+     */\n+    public static ChainConverterProvider create(List<AttributeConverterProvider> providers) {\n+        return new ChainConverterProvider(providers);\n+    }\n+\n+    public Queue<AttributeConverterProvider> chainedProviders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1OTg4Mw==", "bodyText": "nit: linebreak before second dot [.]", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401059883", "createdAt": "2020-03-31T16:43:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ChainConverterProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.converter;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import java.util.Queue;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverterProvider;\n+import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;\n+\n+/**\n+ * A {@link AttributeConverterProvider} that allows multiple providers to be chained in a specified order\n+ * to act as a single composite provider. When searching for an attribute converter for a type,\n+ * the providers will be called in forward/ascending order, attempting to find a converter from the\n+ * first provider, then the second, and so on, until a match is found or the operation fails.\n+ */\n+@SdkInternalApi\n+public final class ChainConverterProvider implements AttributeConverterProvider {\n+    private final Deque<AttributeConverterProvider> providerChain;\n+\n+    private ChainConverterProvider(List<AttributeConverterProvider> providers) {\n+        this.providerChain = new ArrayDeque<>(providers);\n+    }\n+\n+    /**\n+     * Construct a new instance of {@link ChainConverterProvider}.\n+     * @param providers A list of {@link AttributeConverterProvider} to chain together.\n+     * @return A constructed {@link ChainConverterProvider} object.\n+     */\n+    public static ChainConverterProvider create(AttributeConverterProvider... providers) {\n+        return new ChainConverterProvider(Arrays.asList(providers));\n+    }\n+\n+    /**\n+     * Construct a new instance of {@link ChainConverterProvider}.\n+     * @param providers A list of {@link AttributeConverterProvider} to chain together.\n+     * @return A constructed {@link ChainConverterProvider} object.\n+     */\n+    public static ChainConverterProvider create(List<AttributeConverterProvider> providers) {\n+        return new ChainConverterProvider(providers);\n+    }\n+\n+    public Queue<AttributeConverterProvider> chainedProviders() {\n+        return this.providerChain;\n+    }\n+\n+    @Override\n+    public <T> AttributeConverter<T> converterFor(EnhancedType<T> enhancedType) {\n+        return this.providerChain.stream()\n+                                 .filter(provider -> provider.converterFor(enhancedType) != null)\n+                                 .map(p -> p.converterFor(enhancedType))\n+                                 .findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MDU1Ng==", "bodyText": "I'd have chosen ArrayList here as it's simpler and perfectly well suited to the only way we use it which is to iterate through its items in order.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401060556", "createdAt": "2020-03-31T16:44:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ChainConverterProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.converter;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.List;\n+import java.util.Queue;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverterProvider;\n+import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;\n+\n+/**\n+ * A {@link AttributeConverterProvider} that allows multiple providers to be chained in a specified order\n+ * to act as a single composite provider. When searching for an attribute converter for a type,\n+ * the providers will be called in forward/ascending order, attempting to find a converter from the\n+ * first provider, then the second, and so on, until a match is found or the operation fails.\n+ */\n+@SdkInternalApi\n+public final class ChainConverterProvider implements AttributeConverterProvider {\n+    private final Deque<AttributeConverterProvider> providerChain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MzA4Mw==", "bodyText": "The name of this method confuses me a bit. When I read it, I think that it's going to return the annotation object itself. Maybe call it 'createConverterProvidersFromAnnotation' ? or something like that.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401063083", "createdAt": "2020-03-31T16:48:39Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/BeanTableSchema.java", "diffHunk": "@@ -222,12 +224,23 @@ public TableMetadata tableMetadata() {\n         return builder.build();\n     }\n \n-    private static Optional<AttributeConverterProvider> converterProviderAnnotation(DynamoDbBean dynamoDbBean) {\n-        Class<?>[] converterClasses = dynamoDbBean.converterProviders();\n-        //TODO: temporary solution to pick one AttributeConverterProvider.\n-        return converterClasses.length > 0 ?\n-               Optional.of((AttributeConverterProvider) newObjectSupplierForClass(converterClasses[0]).get()) :\n-               Optional.empty();\n+    private static List<AttributeConverterProvider> converterProviderAnnotation(DynamoDbBean dynamoDbBean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NjczMw==", "bodyText": "As a general pattern I avoid having the Builder own the defaults to things, I prefer to see that in the constructor of the object. It can be tested and is more reliable there. Ideally the builder should do absolutely nothing just collect information and pass it to the constructor.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401066733", "createdAt": "2020-03-31T16:54:06Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableSchema.java", "diffHunk": "@@ -143,7 +141,9 @@ private StaticTableSchema(Builder<T> builder) {\n         private List<StaticAttribute<T, ?>> attributes;\n         private Supplier<T> newItemSupplier;\n         private List<StaticTableTag> tags;\n-        private AttributeConverterProvider attributeConverterProvider;\n+        private List<AttributeConverterProvider> attributeConverterProviders =\n+            Collections.singletonList(ConverterProviderResolver.defaultConverterProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NzY2NQ==", "bodyText": "I think this would be a good place to insert a code example of how to 'best' use the default one (since there are a number of different valid ways to instantiate it). I think we should encourage people to use the most friendly one.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401067665", "createdAt": "2020-03-31T16:55:33Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableSchema.java", "diffHunk": "@@ -282,18 +282,40 @@ private Builder(Class<T> itemClass) {\n         }\n \n         /**\n-         * A higher-precedence {@link AttributeConverterProvider} than the default one provided by the table schema.\n-         * The {@link AttributeConverterProvider} must provide {@link AttributeConverter}s for all types used in the schema.\n+         * Specifies the {@link AttributeConverterProvider}s to use with the table schema.\n+         * The list of attribute converter providers must provide {@link AttributeConverter}s for all types used\n+         * in the schema. The attribute converter providers will be loaded in the strict order they are supplied here.\n          * <p>\n-         * The table schema has a default, internal, AttributeConverterProvider which provides standard converters\n-         * for most primitive and common Java types. Use custom AttributeConverterProvider when you have specific\n-         * needs for type conversion that the defaults do not cover.\n+         * Calling this method will override the default attribute converter provider\n+         * {@link DefaultAttributeConverterProvider}, which provides standard converters\n+         * for most primitive and common Java types, so that provider must included in the supplied list if it is to be\n+         * used. Providing an empty list here will cause no providers to get loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2ODUxMg==", "bodyText": "Maybe we should mention in the javadoc that passing an empty list as converterProviders results in no converters at all.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401068512", "createdAt": "2020-03-31T16:56:51Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/annotations/DynamoDbBean.java", "diffHunk": "@@ -39,5 +40,13 @@\n @Retention(RetentionPolicy.RUNTIME)\n @SdkPublicApi\n public @interface DynamoDbBean {\n-    Class<? extends AttributeConverterProvider>[] converterProviders() default {};\n+    Class<? extends AttributeConverterProvider>[] converterProviders()\n+            default { NoAttributeConverterProviderOverride.class };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MDE2NA==", "bodyText": "I think 'throw UnsupportedOperationException(\"This is not a real converter [or something to that effect]\") ' would be more appropriate", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401070164", "createdAt": "2020-03-31T16:59:22Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/annotations/DynamoDbBean.java", "diffHunk": "@@ -39,5 +40,13 @@\n @Retention(RetentionPolicy.RUNTIME)\n @SdkPublicApi\n public @interface DynamoDbBean {\n-    Class<? extends AttributeConverterProvider>[] converterProviders() default {};\n+    Class<? extends AttributeConverterProvider>[] converterProviders()\n+            default { NoAttributeConverterProviderOverride.class };\n+\n+    final class NoAttributeConverterProviderOverride implements AttributeConverterProvider {\n+        @Override\n+        public <T> AttributeConverter<T> converterFor(EnhancedType<T> enhancedType) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MDg1Ng==", "bodyText": "By inheritance, this class is effectively public (which is why you're able to use it elsewhere in the code). That means we should either javadoc it or move it out of here and into internal namespace. I think I favor the latter but open to discussion.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401070856", "createdAt": "2020-03-31T17:00:26Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/annotations/DynamoDbBean.java", "diffHunk": "@@ -39,5 +40,13 @@\n @Retention(RetentionPolicy.RUNTIME)\n @SdkPublicApi\n public @interface DynamoDbBean {\n-    Class<? extends AttributeConverterProvider>[] converterProviders() default {};\n+    Class<? extends AttributeConverterProvider>[] converterProviders()\n+            default { NoAttributeConverterProviderOverride.class };\n+\n+    final class NoAttributeConverterProviderOverride implements AttributeConverterProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03632ccca229de1993881769cfbe7a32d6f0b251"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzQ4MDA1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#pullrequestreview-385748005", "createdAt": "2020-04-01T16:23:28Z", "commit": {"oid": "22cc5230cccc52db0bad422cd3bcf16b03ee3b03"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMzoyOFrOF_IhaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMDozOFrOF_I0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDIzMg==", "bodyText": "I think we should spruce up the javadoc a bit to celebrate this class' new status as 'public'. At a minimum mention (preferably with examples) how to use it in a StaticTableSchema builder and a BeanTableSchema annotation.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401744232", "createdAt": "2020-04-01T16:23:28Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DefaultAttributeConverterProvider.java", "diffHunk": "@@ -80,7 +77,7 @@\n  * Given an input, this will identify a converter that can convert the specific Java type and invoke it. If a converter cannot\n  * be found, it will invoke a \"parent\" converter, which would be expected to be able to convert the value (or throw an exception).\n  */\n-@SdkInternalApi\n+@SdkPublicApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22cc5230cccc52db0bad422cd3bcf16b03ee3b03"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0OTE2MQ==", "bodyText": "I think it'd be nice to give an example here of using a single custom converter provider with default as fallback (as we did in the StaticTableSchema example).", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#discussion_r401749161", "createdAt": "2020-04-01T16:30:38Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/annotations/DynamoDbBean.java", "diffHunk": "@@ -31,22 +31,21 @@\n  * it will also require this annotation.\n  * <p>\n  * Using {@link AttributeConverterProvider}s is optional and, if used, the supplied provider supersedes the default\n- * converter provided by the table schema. The converter must provide {@link AttributeConverter}s for all types used\n- * in the schema. The table schema default AttributeConverterProvider provides standard converters for most primitive\n- * and common Java types. Use custom AttributeConverterProviders when you have specific needs for type conversion\n- * that the defaults do not cover.\n+ * converter provided by the table schema.\n+ * <p>\n+ * Note:\n+ * <ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22cc5230cccc52db0bad422cd3bcf16b03ee3b03"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTM5MzIx", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1746#pullrequestreview-385939321", "createdAt": "2020-04-01T20:50:48Z", "commit": {"oid": "e2e5624421e31c566a1bd01afee841d4c0ce9584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "077b0a31a950cc45620c8998b6bf39f4e0c3c12d", "author": {"user": null}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/077b0a31a950cc45620c8998b6bf39f4e0c3c12d", "committedDate": "2020-04-01T21:34:24Z", "message": "DDB Enhanced adding ChainConverterProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e5624421e31c566a1bd01afee841d4c0ce9584", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/e2e5624421e31c566a1bd01afee841d4c0ce9584", "committedDate": "2020-04-01T20:42:12Z", "message": "DDB Enhanced adding javadocs to default attribute converter provider"}, "afterCommit": {"oid": "077b0a31a950cc45620c8998b6bf39f4e0c3c12d", "author": {"user": null}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/077b0a31a950cc45620c8998b6bf39f4e0c3c12d", "committedDate": "2020-04-01T21:34:24Z", "message": "DDB Enhanced adding ChainConverterProvider"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2770, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}