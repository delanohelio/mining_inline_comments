{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzczNjcz", "number": 1629, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTo1MjowMFrODdG23Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo1MDo0M1rODdH5pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODQ3NjQ1OnYy", "diffSide": "RIGHT", "path": ".changes/next-release/bugfix-AmazonTranscribeStreaming-6508ef9.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTo1MjowMFrOFlhV4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMDowNlrOFlkIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4NzkwNw==", "bodyText": "nit: Should it be Netty NIO HTTP Client?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374887907", "createdAt": "2020-02-04T19:52:00Z", "author": {"login": "zoewangg"}, "path": ".changes/next-release/bugfix-AmazonTranscribeStreaming-6508ef9.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"type\": \"bugfix\",\n+    \"category\": \"Amazon Transcribe Streaming\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMzYxNA==", "bodyText": "This bug fix only affects Transcribe customers, so I want to avoid spooking other Netty customers.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374933614", "createdAt": "2020-02-04T21:30:06Z", "author": {"login": "millems"}, "path": ".changes/next-release/bugfix-AmazonTranscribeStreaming-6508ef9.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"type\": \"bugfix\",\n+    \"category\": \"Amazon Transcribe Streaming\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4NzkwNw=="}, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODQ4MjcxOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTo1NDowOVrOFlhZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1Mzo0OVrOFlky5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4ODkyMQ==", "bodyText": "Should we add sdk namespace to the key?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374888921", "createdAt": "2020-02-04T19:54:09Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMzk2MA==", "bodyText": "I had it, but it was soooo long. This seemed specific enough. What do we do elsewhere? Do we always do the class name?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374933960", "createdAt": "2020-02-04T21:30:48Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4ODkyMQ=="}, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNTIwMg==", "bodyText": "We prefix it with aws.http.nio.netty.async.\n\n  \n    \n      aws-sdk-java-v2/http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/ChannelAttributeKey.java\n    \n    \n         Line 39\n      in\n      58c5daa\n    \n    \n    \n    \n\n        \n          \n           \"aws.http.nio.netty.async.protocolFuture\");", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374935202", "createdAt": "2020-02-04T21:33:31Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4ODkyMQ=="}, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDQ4NA==", "bodyText": "Done.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374944484", "createdAt": "2020-02-04T21:53:49Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4ODkyMQ=="}, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY0NzQxOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo1MDo0M1rOFljAMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMDo1OVrOFlkKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTEyMw==", "bodyText": "Can we add a test to verify that if the channel already has ORDER attribute, it does not wrap it again?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374915123", "createdAt": "2020-02-04T20:50:43Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");\n+\n+    public static ChannelHandlerContext wrap(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNDA1OA==", "bodyText": "+1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1629#discussion_r374934058", "createdAt": "2020-02-04T21:30:59Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/utils/OrderedWriteChannelHandlerContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.http.nio.netty.internal.utils;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.util.AttributeKey;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.utils.Logger;\n+\n+/**\n+ * An implementation of {@link ChannelHandlerContext} that ensures all writes are performed in the order they are invoked.\n+ *\n+ * This works around https://github.com/netty/netty/issues/7783 where writes by an event loop 'skip ahead' of writes off of the\n+ * event loop.\n+ */\n+public class OrderedWriteChannelHandlerContext extends DelegatingChannelHandlerContext {\n+    private static final AttributeKey<Void> ORDERED = AttributeKey.newInstance(\"OrderedWriteChannelHandlerContext.ORDERED\");\n+\n+    public static ChannelHandlerContext wrap(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTEyMw=="}, "originalCommit": {"oid": "88e8287d46fef350e27bc27f8e1a585afb5b3a8f"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4195, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}