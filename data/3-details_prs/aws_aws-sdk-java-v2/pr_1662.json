{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTkxNzA4", "number": 1662, "title": "Dynamodb-enhanced [preview]: Updates all operations with consumer sty\u2026", "bodyText": "#1654 was rolled back due to a bug in a single test (AsyncBatchWriteItemTest.mixedCommands).\nThis is the PR that puts that change back in with the fix to that single test.", "createdAt": "2020-02-24T19:51:13Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662", "merged": true, "mergeCommit": {"oid": "226e676d7fad63cecf0f50b147be0c7ece702210"}, "closed": true, "closedAt": "2020-02-24T23:16:47Z", "author": {"login": "bmaizels"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHjB8QgFqTM2MzY1NzI2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHlSC6gBqjMwNjcyNDgxNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjU3MjYx", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662#pullrequestreview-363657261", "createdAt": "2020-02-24T19:52:21Z", "commit": {"oid": "2d969b518ea71b3eb8ebbff55b1b8a2506483afe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrOFttucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrOFttucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTQxMQ==", "bodyText": "This is the line that was changed from the original PR.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662#discussion_r383479411", "createdAt": "2020-02-24T19:52:21Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java", "diffHunk": "@@ -192,58 +189,78 @@ public void multiplePut() {\n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_1.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_1.get(0)))\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_2.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_2.get(0)))\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(RECORDS_1.get(0)));\n         assertThat(record2, is(RECORDS_2.get(0)));\n     }\n \n     @Test\n     public void singleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             singletonList(WriteBatch.builder(Record1.class)\n                                     .mappedTableResource(mappedTable1)\n-                                    .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                                    .addDeleteItem(r -> r.key(Key.create(numberValue(0))))\n                                     .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record, is(nullValue()));\n     }\n \n     @Test\n     public void multipleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n-        mappedTable2.putItem(PutItemEnhancedRequest.create(RECORDS_2.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(nullValue()));\n         assertThat(record2, is(nullValue()));\n     }\n \n+    @Test\n+    public void mixedCommands() {\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0)));\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0)));\n+\n+        enhancedAsyncClient.batchWriteItem(r -> r.writeBatches(\n+            WriteBatch.builder(Record1.class)\n+                      .mappedTableResource(mappedTable1)\n+                      .addPutItem(i -> i.item(RECORDS_1.get(1)))\n+                      .build(),\n+            WriteBatch.builder(Record2.class)\n+                      .mappedTableResource(mappedTable2)\n+                      .addDeleteItem(i -> i.key(Key.create(numberValue(0))))\n+                      .build())).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d969b518ea71b3eb8ebbff55b1b8a2506483afe"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjU4Njg0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662#pullrequestreview-363658684", "createdAt": "2020-02-24T19:54:34Z", "commit": {"oid": "2d969b518ea71b3eb8ebbff55b1b8a2506483afe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29f192b2bd812f0d23898996eaa8d718be6e85ef", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/29f192b2bd812f0d23898996eaa8d718be6e85ef", "committedDate": "2020-02-24T19:55:31Z", "message": "Merge branch 'master' into bmaizels/ddbmapper-consumer-operations-fixed"}, "afterCommit": {"oid": "1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "committedDate": "2020-02-24T20:35:08Z", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "committedDate": "2020-02-24T20:35:08Z", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations"}, "afterCommit": {"oid": "c66371185fbbba55827e45c6332a0f0f3081b9c4", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c66371185fbbba55827e45c6332a0f0f3081b9c4", "committedDate": "2020-02-24T22:05:37Z", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "committedDate": "2020-02-24T22:29:32Z", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0e02bdf8c7db2d3457f994132f8a0c7004b4957", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/d0e02bdf8c7db2d3457f994132f8a0c7004b4957", "committedDate": "2020-02-24T22:26:39Z", "message": "Merge branch 'master' into bmaizels/ddbmapper-consumer-operations-fixed"}, "afterCommit": {"oid": "da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "committedDate": "2020-02-24T22:29:32Z", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2683, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}