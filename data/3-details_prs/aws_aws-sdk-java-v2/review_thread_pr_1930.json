{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTM0MTQ3", "number": 1930, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyODo1M1rOEJwk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMzoxOVrOEJwrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY4NTMxOnYy", "diffSide": "RIGHT", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-async-client-class.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyODo1M1rOGqa-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzoyODo1M1rOGqa-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTI5NA==", "bodyText": "metricPublishers?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447135294", "createdAt": "2020-06-29T17:28:53Z", "author": {"login": "zoewangg"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-async-client-class.java", "diffHunk": "@@ -403,15 +402,14 @@ public final String serviceName() {\n             AwsRequestOverrideConfiguration requestOverrideConfig = eventStreamOperationWithOnlyInputRequest\n                     .overrideConfiguration().orElse(null);\n             executeFuture.whenComplete((r, e) -> {\n-                Optional<MetricPublisher> metricPublisher = MetricUtils.resolvePublisher(clientConfiguration,\n-                        requestOverrideConfig);\n-                metricPublisher.ifPresent(p -> p.publish(apiCallMetricCollector.collect()));\n+                List<MetricPublisher> metricPublishers = resolveMetricPublishers(clientConfiguration, requestOverrideConfig);\n+                metricPublishers.forEach(p -> p.publish(apiCallMetricCollector.collect()));\n             });\n             return executeFuture;\n         } catch (Throwable t) {\n-            Optional<MetricPublisher> metricPublisher = MetricUtils.resolvePublisher(clientConfiguration,\n+            List<MetricPublisher> metricPublisher = resolveMetricPublishers(clientConfiguration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjY5NTA2OnYy", "diffSide": "RIGHT", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-async-client-class.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMToyMVrOGqbETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozNzozMVrOGqbRzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjg0NQ==", "bodyText": "Out of curiosity, why do we move this method out of  MetricUtils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447136845", "createdAt": "2020-06-29T17:31:21Z", "author": {"login": "zoewangg"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-async-client-class.java", "diffHunk": "@@ -1070,6 +1061,21 @@ public void close() {\n                                 .exceptionBuilderSupplier(InvalidInputException::builder).httpStatusCode(400).build());\n     }\n \n+    private static List<MetricPublisher> resolveMetricPublishers(SdkClientConfiguration clientConfiguration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MDMwMQ==", "bodyText": "Discussed this with @millems. MetricUtils is @SdkInternal, and we'd rather keep it that way than expose it as a protected API.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447140301", "createdAt": "2020-06-29T17:37:31Z", "author": {"login": "dagnir"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-async-client-class.java", "diffHunk": "@@ -1070,6 +1061,21 @@ public void close() {\n                                 .exceptionBuilderSupplier(InvalidInputException::builder).httpStatusCode(400).build());\n     }\n \n+    private static List<MetricPublisher> resolveMetricPublishers(SdkClientConfiguration clientConfiguration,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjg0NQ=="}, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjcwMTg5OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/AsyncClientMetricPublisherResolutionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzozMzoxOVrOGqbIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0Mjo0MVrOGqbc7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzkzNw==", "bodyText": "minor: missing fail(\"no exception thrown\"), same as other tests.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447137937", "createdAt": "2020-06-29T17:33:19Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/AsyncClientMetricPublisherResolutionTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.metrics.async;\n+\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClientBuilder;\n+import software.amazon.awssdk.services.protocolrestjson.model.ProtocolRestJsonException;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AsyncClientMetricPublisherResolutionTest {\n+    @Mock\n+    private AwsCredentialsProvider mockCredentialsProvider;\n+\n+    @Rule\n+    public WireMockRule wireMock = new WireMockRule(0);\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    private ProtocolRestJsonAsyncClient client;\n+\n+\n+    @Before\n+    public void setup() {\n+        when(mockCredentialsProvider.resolveCredentials()).thenAnswer(invocation -> {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+            return AwsBasicCredentials.create(\"foo\", \"bar\");\n+        });\n+    }\n+\n+    @After\n+    public void teardown() {\n+        wireMock.resetAll();\n+        if (client != null) {\n+            client.close();\n+        }\n+        client = null;\n+    }\n+\n+    @Test\n+    public void testApiCall_noPublishersSet_noNpe() {\n+        client = clientWithPublishers();\n+        // This is thrown because all the requests to our wiremock are\n+        // nonsense, it's just important that we don't get NPE because we\n+        // don't have publishers set\n+        thrown.expectCause(instanceOf(ProtocolRestJsonException.class));\n+        client.allTypes().join();\n+    }\n+\n+    @Test\n+    public void testApiCall_publishersSetOnClient_clientPublishersInvoked() throws IOException {\n+        MetricPublisher publisher1 = mock(MetricPublisher.class);\n+        MetricPublisher publisher2 = mock(MetricPublisher.class);\n+\n+        client = clientWithPublishers(publisher1, publisher2);\n+\n+        try {\n+            client.allTypes().join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MTEwMQ==", "bodyText": "Is this necessary? It doesn't really matter if an exception is thrown or not; the test is just just checking that the right publishers are being used based on configuration. It just happens to throw here because the mock isn't fully set up", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447141101", "createdAt": "2020-06-29T17:38:56Z", "author": {"login": "dagnir"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/AsyncClientMetricPublisherResolutionTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.metrics.async;\n+\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClientBuilder;\n+import software.amazon.awssdk.services.protocolrestjson.model.ProtocolRestJsonException;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AsyncClientMetricPublisherResolutionTest {\n+    @Mock\n+    private AwsCredentialsProvider mockCredentialsProvider;\n+\n+    @Rule\n+    public WireMockRule wireMock = new WireMockRule(0);\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    private ProtocolRestJsonAsyncClient client;\n+\n+\n+    @Before\n+    public void setup() {\n+        when(mockCredentialsProvider.resolveCredentials()).thenAnswer(invocation -> {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+            return AwsBasicCredentials.create(\"foo\", \"bar\");\n+        });\n+    }\n+\n+    @After\n+    public void teardown() {\n+        wireMock.resetAll();\n+        if (client != null) {\n+            client.close();\n+        }\n+        client = null;\n+    }\n+\n+    @Test\n+    public void testApiCall_noPublishersSet_noNpe() {\n+        client = clientWithPublishers();\n+        // This is thrown because all the requests to our wiremock are\n+        // nonsense, it's just important that we don't get NPE because we\n+        // don't have publishers set\n+        thrown.expectCause(instanceOf(ProtocolRestJsonException.class));\n+        client.allTypes().join();\n+    }\n+\n+    @Test\n+    public void testApiCall_publishersSetOnClient_clientPublishersInvoked() throws IOException {\n+        MetricPublisher publisher1 = mock(MetricPublisher.class);\n+        MetricPublisher publisher2 = mock(MetricPublisher.class);\n+\n+        client = clientWithPublishers(publisher1, publisher2);\n+\n+        try {\n+            client.allTypes().join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzkzNw=="}, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MzE1MQ==", "bodyText": "oh okay, I misread the test. We don't need it in this case", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1930#discussion_r447143151", "createdAt": "2020-06-29T17:42:41Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/AsyncClientMetricPublisherResolutionTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.metrics.async;\n+\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClientBuilder;\n+import software.amazon.awssdk.services.protocolrestjson.model.ProtocolRestJsonException;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AsyncClientMetricPublisherResolutionTest {\n+    @Mock\n+    private AwsCredentialsProvider mockCredentialsProvider;\n+\n+    @Rule\n+    public WireMockRule wireMock = new WireMockRule(0);\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    private ProtocolRestJsonAsyncClient client;\n+\n+\n+    @Before\n+    public void setup() {\n+        when(mockCredentialsProvider.resolveCredentials()).thenAnswer(invocation -> {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+            return AwsBasicCredentials.create(\"foo\", \"bar\");\n+        });\n+    }\n+\n+    @After\n+    public void teardown() {\n+        wireMock.resetAll();\n+        if (client != null) {\n+            client.close();\n+        }\n+        client = null;\n+    }\n+\n+    @Test\n+    public void testApiCall_noPublishersSet_noNpe() {\n+        client = clientWithPublishers();\n+        // This is thrown because all the requests to our wiremock are\n+        // nonsense, it's just important that we don't get NPE because we\n+        // don't have publishers set\n+        thrown.expectCause(instanceOf(ProtocolRestJsonException.class));\n+        client.allTypes().join();\n+    }\n+\n+    @Test\n+    public void testApiCall_publishersSetOnClient_clientPublishersInvoked() throws IOException {\n+        MetricPublisher publisher1 = mock(MetricPublisher.class);\n+        MetricPublisher publisher2 = mock(MetricPublisher.class);\n+\n+        client = clientWithPublishers(publisher1, publisher2);\n+\n+        try {\n+            client.allTypes().join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNzkzNw=="}, "originalCommit": {"oid": "90dbadd66240df79856724b57ca6c5c1dff9404d"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3964, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}