{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjEyNjM5", "number": 1689, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo0NjoyMlrODmf-8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMDowN1rODmwBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjk2NDk2OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo0NjoyMlrOFz9AlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNTozM1rOF0Y44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTI2OQ==", "bodyText": "Line 48 below in javadoc below (not selectable in PR) has the old attribute definition as an example.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390021269", "createdAt": "2020-03-09T23:46:22Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java", "diffHunk": "@@ -21,15 +21,16 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.enhanced.dynamodb.internal.operations.OperationContext;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeTag;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeValueType;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTag;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableMetadata;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODA0OQ==", "bodyText": "Will fix.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478049", "createdAt": "2020-03-10T17:15:33Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java", "diffHunk": "@@ -21,15 +21,16 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.enhanced.dynamodb.internal.operations.OperationContext;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeTag;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeValueType;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTag;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableMetadata;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTI2OQ=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzAyMDU0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/OptionalAttributeConvertersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoxNjo1OVrOFz9hqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNjoyMlrOF0Y7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTczNg==", "bodyText": "I'm assuming all the moving around of static imports is a consistency move, pls confirm.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390029736", "createdAt": "2020-03-10T00:16:59Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/OptionalAttributeConvertersTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n package software.amazon.awssdk.enhanced.dynamodb.converters.attribute;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.nullValue;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformFrom;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformTo;\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODYyNA==", "bodyText": "Yes, I applied a consistent set of import rules across the whole project as I was already touching >50% of the files in this PR.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478624", "createdAt": "2020-03-10T17:16:22Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/OptionalAttributeConvertersTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n package software.amazon.awssdk.enhanced.dynamodb.converters.attribute;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.nullValue;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformFrom;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformTo;\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTczNg=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTQ3MDA1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo0Mzo0MlrOF0U6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowMDoyOVrOF0c49g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ==", "bodyText": "This line ends unexpectedly.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390412891", "createdAt": "2020-03-10T15:43:42Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.mapper;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n+\n+/**\n+ * Interface for a tag that can be applied to any {@link StaticAttribute}. When a tagged attribute is added to a\n+ * {@link software.amazon.awssdk.enhanced.dynamodb.TableSchema}, the table metadata stored on the schema will be updated\n+ * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n+ * attribute.\n+ * <p>\n+ * Core implementations of these tags that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODc1NQ==", "bodyText": "Will fix.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478755", "createdAt": "2020-03-10T17:16:33Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.mapper;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n+\n+/**\n+ * Interface for a tag that can be applied to any {@link StaticAttribute}. When a tagged attribute is added to a\n+ * {@link software.amazon.awssdk.enhanced.dynamodb.TableSchema}, the table metadata stored on the schema will be updated\n+ * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n+ * attribute.\n+ * <p>\n+ * Core implementations of these tags that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzOTMzMw==", "bodyText": "Oddly enough I can't find it, I wonder if it got crunched in a merge. We'll see what happens when I push.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390539333", "createdAt": "2020-03-10T18:53:21Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.mapper;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n+\n+/**\n+ * Interface for a tag that can be applied to any {@link StaticAttribute}. When a tagged attribute is added to a\n+ * {@link software.amazon.awssdk.enhanced.dynamodb.TableSchema}, the table metadata stored on the schema will be updated\n+ * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n+ * attribute.\n+ * <p>\n+ * Core implementations of these tags that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MzYwNg==", "bodyText": "Oh never mind I was looking at table tags, not attribute tags. Fixed.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390543606", "createdAt": "2020-03-10T19:00:29Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.mapper;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n+\n+/**\n+ * Interface for a tag that can be applied to any {@link StaticAttribute}. When a tagged attribute is added to a\n+ * {@link software.amazon.awssdk.enhanced.dynamodb.TableSchema}, the table metadata stored on the schema will be updated\n+ * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n+ * attribute.\n+ * <p>\n+ * Core implementations of these tags that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU0OTY2OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMDo0NlrOF0Vswg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxODozMVrOF0ZAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA==", "bodyText": "Why did you change to HashMap?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390425794", "createdAt": "2020-03-10T16:00:46Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableMetadata.java", "diffHunk": "@@ -166,37 +171,31 @@ public int hashCode() {\n         return result;\n     }\n \n-    @ThreadSafe\n+    /**\n+     * Builder for {@link StaticTableMetadata}\n+     */\n     public static class Builder {\n-        private final Map<String, Object> customMetadata = new ConcurrentHashMap<>();\n-        private final Map<String, Index> indexByNameMap = new ConcurrentHashMap<>();\n-        private final Map<String, AttributeValueType> keyAttributes = new ConcurrentHashMap<>();\n+        private final Map<String, Object> customMetadata = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3OTIyOA==", "bodyText": "I realized there was no value in maintaining this class as threadsafe as it was an immutable class and we can just follow our standard patterns.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390479228", "createdAt": "2020-03-10T17:17:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableMetadata.java", "diffHunk": "@@ -166,37 +171,31 @@ public int hashCode() {\n         return result;\n     }\n \n-    @ThreadSafe\n+    /**\n+     * Builder for {@link StaticTableMetadata}\n+     */\n     public static class Builder {\n-        private final Map<String, Object> customMetadata = new ConcurrentHashMap<>();\n-        private final Map<String, Index> indexByNameMap = new ConcurrentHashMap<>();\n-        private final Map<String, AttributeValueType> keyAttributes = new ConcurrentHashMap<>();\n+        private final Map<String, Object> customMetadata = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDA3MA==", "bodyText": "Well to be more specific we don't require any of our builders to be threadsafe. It's generally well understood they are not.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390480070", "createdAt": "2020-03-10T17:18:31Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableMetadata.java", "diffHunk": "@@ -166,37 +171,31 @@ public int hashCode() {\n         return result;\n     }\n \n-    @ThreadSafe\n+    /**\n+     * Builder for {@link StaticTableMetadata}\n+     */\n     public static class Builder {\n-        private final Map<String, Object> customMetadata = new ConcurrentHashMap<>();\n-        private final Map<String, Index> indexByNameMap = new ConcurrentHashMap<>();\n-        private final Map<String, AttributeValueType> keyAttributes = new ConcurrentHashMap<>();\n+        private final Map<String, Object> customMetadata = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA=="}, "originalCommit": {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU5MjQwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncBasicCrudTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMDowN1rOF0WHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo0MTozMFrOF0Z6_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw==", "bodyText": "I have noticed that in many test files, we're defining but not using the secondary index. Should we consider adding more tests to target that and cover more behavior?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390432613", "createdAt": "2020-03-10T16:10:07Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -170,27 +168,43 @@ public int hashCode() {\n \n     private static final TableSchema<Record> TABLE_SCHEMA =\n         StaticTableSchema.builder(Record.class)\n-                   .newItemSupplier(Record::new)\n-                   .attributes(\n-                       attribute(\"id\", TypeToken.of(String.class), Record::getId, Record::setId).as(primaryPartitionKey()),\n-                       attribute(\"sort\", TypeToken.of(String.class), Record::getSort, Record::setSort).as(primarySortKey()),\n-                       // This is a DynamoDb reserved word, forces testing of AttributeNames\n-                       attribute(\"attribute\", TypeToken.of(String.class), Record::getAttribute, Record::setAttribute),\n-                       // Using tricky characters to force scrubbing of attributeName tokens\n-                       attribute(\"*attribute2*\", TypeToken.of(String.class), Record::getAttribute2, Record::setAttribute2)\n-                           .as(secondaryPartitionKey(\"gsi_1\")),\n-                       attribute(\"attribute3\", TypeToken.of(String.class), Record::getAttribute3, Record::setAttribute3)\n-                           .as(secondarySortKey(\"gsi_1\")))\n-                   .build();\n+                         .newItemSupplier(Record::new)\n+                         .addAttribute(String.class, a -> a.name(\"id\")\n+                                                           .getter(Record::getId)\n+                                                           .setter(Record::setId)\n+                                                           .tags(primaryPartitionKey()))\n+                         .addAttribute(String.class, a -> a.name(\"sort\")\n+                                                           .getter(Record::getSort)\n+                                                           .setter(Record::setSort)\n+                                                           .tags(primarySortKey()))\n+                         .addAttribute(String.class, a -> a.name(\"attribute\")\n+                                                           .getter(Record::getAttribute)\n+                                                           .setter(Record::setAttribute))\n+                         .addAttribute(String.class, a -> a.name(\"attribute2*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b526010485a88c4aa29a16f38580f53c516842"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MjAzNA==", "bodyText": "Query and scan are the only two operations currently supported by secondary indices and we have good test coverage on those. These tests share a lot of the POJOs so in a way what is being tested here is that non-index operations work fine when indexes are present.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390482034", "createdAt": "2020-03-10T17:21:31Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -170,27 +168,43 @@ public int hashCode() {\n \n     private static final TableSchema<Record> TABLE_SCHEMA =\n         StaticTableSchema.builder(Record.class)\n-                   .newItemSupplier(Record::new)\n-                   .attributes(\n-                       attribute(\"id\", TypeToken.of(String.class), Record::getId, Record::setId).as(primaryPartitionKey()),\n-                       attribute(\"sort\", TypeToken.of(String.class), Record::getSort, Record::setSort).as(primarySortKey()),\n-                       // This is a DynamoDb reserved word, forces testing of AttributeNames\n-                       attribute(\"attribute\", TypeToken.of(String.class), Record::getAttribute, Record::setAttribute),\n-                       // Using tricky characters to force scrubbing of attributeName tokens\n-                       attribute(\"*attribute2*\", TypeToken.of(String.class), Record::getAttribute2, Record::setAttribute2)\n-                           .as(secondaryPartitionKey(\"gsi_1\")),\n-                       attribute(\"attribute3\", TypeToken.of(String.class), Record::getAttribute3, Record::setAttribute3)\n-                           .as(secondarySortKey(\"gsi_1\")))\n-                   .build();\n+                         .newItemSupplier(Record::new)\n+                         .addAttribute(String.class, a -> a.name(\"id\")\n+                                                           .getter(Record::getId)\n+                                                           .setter(Record::setId)\n+                                                           .tags(primaryPartitionKey()))\n+                         .addAttribute(String.class, a -> a.name(\"sort\")\n+                                                           .getter(Record::getSort)\n+                                                           .setter(Record::setSort)\n+                                                           .tags(primarySortKey()))\n+                         .addAttribute(String.class, a -> a.name(\"attribute\")\n+                                                           .getter(Record::getAttribute)\n+                                                           .setter(Record::setAttribute))\n+                         .addAttribute(String.class, a -> a.name(\"attribute2*\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw=="}, "originalCommit": {"oid": "f1b526010485a88c4aa29a16f38580f53c516842"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5NDk3Mg==", "bodyText": "ok", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390494972", "createdAt": "2020-03-10T17:41:30Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -170,27 +168,43 @@ public int hashCode() {\n \n     private static final TableSchema<Record> TABLE_SCHEMA =\n         StaticTableSchema.builder(Record.class)\n-                   .newItemSupplier(Record::new)\n-                   .attributes(\n-                       attribute(\"id\", TypeToken.of(String.class), Record::getId, Record::setId).as(primaryPartitionKey()),\n-                       attribute(\"sort\", TypeToken.of(String.class), Record::getSort, Record::setSort).as(primarySortKey()),\n-                       // This is a DynamoDb reserved word, forces testing of AttributeNames\n-                       attribute(\"attribute\", TypeToken.of(String.class), Record::getAttribute, Record::setAttribute),\n-                       // Using tricky characters to force scrubbing of attributeName tokens\n-                       attribute(\"*attribute2*\", TypeToken.of(String.class), Record::getAttribute2, Record::setAttribute2)\n-                           .as(secondaryPartitionKey(\"gsi_1\")),\n-                       attribute(\"attribute3\", TypeToken.of(String.class), Record::getAttribute3, Record::setAttribute3)\n-                           .as(secondarySortKey(\"gsi_1\")))\n-                   .build();\n+                         .newItemSupplier(Record::new)\n+                         .addAttribute(String.class, a -> a.name(\"id\")\n+                                                           .getter(Record::getId)\n+                                                           .setter(Record::setId)\n+                                                           .tags(primaryPartitionKey()))\n+                         .addAttribute(String.class, a -> a.name(\"sort\")\n+                                                           .getter(Record::getSort)\n+                                                           .setter(Record::setSort)\n+                                                           .tags(primarySortKey()))\n+                         .addAttribute(String.class, a -> a.name(\"attribute\")\n+                                                           .getter(Record::getAttribute)\n+                                                           .setter(Record::setAttribute))\n+                         .addAttribute(String.class, a -> a.name(\"attribute2*\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw=="}, "originalCommit": {"oid": "f1b526010485a88c4aa29a16f38580f53c516842"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4253, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}