{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODgyOTE3", "number": 1768, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo1ODowNFrODvWQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1Nzo1OFrODvt_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTc0MzIwOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo1ODowNFrOGBuKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDowOTowMFrOGBuXbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1ODEwMw==", "bodyText": "Should we log the stream ID?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404458103", "createdAt": "2020-04-06T23:58:04Z", "author": {"login": "dagnir"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"An 5xx server error occurred on an Http2 stream, notifying the connection channel \" + parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e75cff60c870a15213cc6edceef602000c3de76"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MTQyMw==", "bodyText": "yup, updated", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404461423", "createdAt": "2020-04-07T00:09:00Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"An 5xx server error occurred on an Http2 stream, notifying the connection channel \" + parent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1ODEwMw=="}, "originalCommit": {"oid": "8e75cff60c870a15213cc6edceef602000c3de76"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzA1NTUxOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyMTo1MVrOGCOIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDowMVrOGCTMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA==", "bodyText": "Do we not support modeled 5xx exceptions for HTTP2 connections? It feels like this would break them, if we did.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404981840", "createdAt": "2020-04-07T17:21:51Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4Mjc1Mg==", "bodyText": "Actually, looks like this may not close the connection immediately, just closes it to new requests. I'm not sure if I like the instanceof checks to disambiguate this IOException from other IOExceptions. Should we have a different root exception type?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404982752", "createdAt": "2020-04-07T17:23:15Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA=="}, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4OTU4OA==", "bodyText": "We support modeled 5xx exceptions in core, and http client modules do not have knowledge of it.\nYeah, it doesn't close the connection immediately; the RecordState will be changed to CLOSE_TO_NEW\nI can change it to RuntimeException. WDUT?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404989588", "createdAt": "2020-04-07T17:33:44Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA=="}, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MzM2OA==", "bodyText": "So, all RuntimeExceptions on the channel will put it into no-new-connections state? I don't think that's a bad thing, but wanted to make sure my proposal was clear.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404993368", "createdAt": "2020-04-07T17:39:45Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA=="}, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NTY5NA==", "bodyText": "So,  Http2StreamServerErrorException (extends RuntimeException) or Http2StreamIoException(extends IOException) on the stream channel will put the connection channel into close_to_new state.\nAll other exceptions on the stream channels will not have any effect on connection channel.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r404995694", "createdAt": "2020-04-07T17:43:29Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA=="}, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDg4Nw==", "bodyText": "Discussed offline. We decided to have a single exception class for both server errors and io error on streams so that we don't need to update the exception handling logic if there are more cases in the future", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r405064887", "createdAt": "2020-04-07T19:40:01Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ToHttpInboundAdapter.java", "diffHunk": "@@ -54,7 +59,21 @@ protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws\n     }\n \n     private void onHeadersRead(Http2HeadersFrame headersFrame, ChannelHandlerContext ctx) throws Http2Exception {\n-        ctx.fireChannelRead(HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true));\n+\n+        HttpResponse httpResponse = HttpConversionUtil.toHttpResponse(headersFrame.stream().id(), headersFrame.headers(), true);\n+        ctx.fireChannelRead(httpResponse);\n+\n+        if (HttpStatusFamily.of(httpResponse.status().code()) == HttpStatusFamily.SERVER_ERROR) {\n+            fireConnectionExceptionForServerError(ctx);\n+        }\n+    }\n+\n+    private void fireConnectionExceptionForServerError(ChannelHandlerContext ctx) {\n+        if (ctx.channel().parent() != null) {\n+            Channel parent = ctx.channel().parent();\n+            log.debug(() -> \"A 5xx server error occurred on an Http2 stream, notifying the connection channel \" + ctx.channel());\n+            parent.pipeline().fireExceptionCaught(Http2StreamServerErrorException.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTg0MA=="}, "originalCommit": {"oid": "d62ea23b55d4f16c0f0552771b6d1cd94d5833d0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYzMTg5OnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ConnectionTerminatingException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1Nzo1OFrOGCTz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxMTo0N1rOGCURfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDkyMA==", "bodyText": "Just a sanity check: we aren't relying on the existing exceptions we're replacing with this being an IOException (e.g. for retries) are we?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r405074920", "createdAt": "2020-04-07T19:57:58Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ConnectionTerminatingException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.http.nio.netty.internal.http2;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * Exception indicating a connection is terminating\n+ */\n+@SdkInternalApi\n+final class Http2ConnectionTerminatingException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30270f7fd2337bb46a4b365459c82231562cc5c4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MjQ5NA==", "bodyText": "Nope, this exception is only used internally to change the connection state to CLOSE_TO_NEW and is not returned to upstream.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1768#discussion_r405082494", "createdAt": "2020-04-07T20:11:47Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2ConnectionTerminatingException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.http.nio.netty.internal.http2;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * Exception indicating a connection is terminating\n+ */\n+@SdkInternalApi\n+final class Http2ConnectionTerminatingException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDkyMA=="}, "originalCommit": {"oid": "30270f7fd2337bb46a4b365459c82231562cc5c4"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4070, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}