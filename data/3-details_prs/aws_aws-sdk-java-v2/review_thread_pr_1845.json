{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODMxMzYw", "number": 1845, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNzowNlrOD9fBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNzowNlrOD9fPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk4MDQ1OnYy", "diffSide": "RIGHT", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNzowNlrOGXAgdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoyMzoxN1rOGXCqsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODc0Mg==", "bodyText": "We just use the last endpoint operation? Is that the right behavior?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426778742", "createdAt": "2020-05-18T17:17:06Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NjMwNA==", "bodyText": "I'll admit this is not how I would have written it if I had done it myself, but it is actually a copy/paste from the v1 SDK. The logic is correct because it only needs to know there is at least one endpoint operation (and the last one suffices for that purpose), and the flag as to whether an endpoint is required is cumulative (once it gets set it doesn't get unset) so ends up effectively meaning 'at least one endpoint is required'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426796304", "createdAt": "2020-05-18T17:49:29Z", "author": {"login": "bmaizels"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODc0Mg=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NjU3Nw==", "bodyText": "I added a couple of tests to assert this logic was working correctly as well.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426796577", "createdAt": "2020-05-18T17:49:54Z", "author": {"login": "bmaizels"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODc0Mg=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNTEwMA==", "bodyText": "Can we clarify it a bit and make it a boolean or something?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426805100", "createdAt": "2020-05-18T18:05:49Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODc0Mg=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNDEzMQ==", "bodyText": "Changing it will require more refactoring than the change is worth in my opinion. At least it's in sync with v1 in this state. I'll add comments to explain what it's doing.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426814131", "createdAt": "2020-05-18T18:23:17Z", "author": {"login": "bmaizels"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODc0Mg=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk4NDg1OnYy", "diffSide": "RIGHT", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxODoxM1rOGXAjNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0ODowN1rOGXBiWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3OTQ0Ng==", "bodyText": "So the \"new\" behavior is: if any operation requires endpoint discovery, enable it by default?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426779446", "createdAt": "2020-05-18T17:18:13Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }\n+\n+            if (o.getEndpointDiscovery() != null && o.getEndpointDiscovery().isRequired()) {\n+                endpointCacheRequired = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NTYxMA==", "bodyText": "Yes, exactly. I also stated that in the PR description.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426795610", "createdAt": "2020-05-18T17:48:07Z", "author": {"login": "bmaizels"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/IntermediateModelBuilder.java", "diffHunk": "@@ -107,12 +107,20 @@ public IntermediateModel build() {\n             new HashMap<>(new AddCustomAuthorizers(this.service, getNamingStrategy()).constructAuthorizers());\n \n         OperationModel endpointOperation = null;\n+        boolean endpointCacheRequired = false;\n \n         for (OperationModel o : operations.values()) {\n             if (o.isEndpointOperation()) {\n                 endpointOperation = o;\n-                break;\n             }\n+\n+            if (o.getEndpointDiscovery() != null && o.getEndpointDiscovery().isRequired()) {\n+                endpointCacheRequired = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3OTQ0Ng=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAxNTA0OnYy", "diffSide": "RIGHT", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/builder/AsyncClientBuilderClass.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNzowNlrOGXA2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowNjo0NVrOGXCJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDQwMA==", "bodyText": "Deprecate here as well? Can we also remove it for new services?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426784400", "createdAt": "2020-05-18T17:27:06Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/builder/AsyncClientBuilderClass.java", "diffHunk": "@@ -54,12 +54,24 @@ public TypeSpec poetSpec() {\n                          .addJavadoc(\"Internal implementation of {@link $T}.\", builderInterfaceName);\n \n         if (model.getEndpointOperation().isPresent()) {\n-            builder.addMethod(enableEndpointDiscovery());\n+            builder.addMethod(endpointDiscoveryEnabled())\n+                   .addMethod(enableEndpointDiscovery());\n         }\n \n         return builder.addMethod(buildClientMethod()).build();\n     }\n \n+    private MethodSpec endpointDiscoveryEnabled() {\n+        return MethodSpec.methodBuilder(\"endpointDiscoveryEnabled\")\n+                         .addAnnotation(Override.class)\n+                         .addModifiers(Modifier.PUBLIC)\n+                         .returns(builderClassName)\n+                         .addParameter(boolean.class, \"endpointDiscoveryEnabled\")\n+                         .addStatement(\"this.endpointDiscoveryEnabled = endpointDiscoveryEnabled\")\n+                         .addStatement(\"return this\")\n+                         .build();\n+    }\n+\n     private MethodSpec enableEndpointDiscovery() {\n         return MethodSpec.methodBuilder(\"enableEndpointDiscovery\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5OTQ1NA==", "bodyText": "I will deprecate here as well. Do you have a strategy for removing it for new services? How do we identify 'new services'? One strategy is just to say 'service != DDB' which seems yuck.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426799454", "createdAt": "2020-05-18T17:55:11Z", "author": {"login": "bmaizels"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/builder/AsyncClientBuilderClass.java", "diffHunk": "@@ -54,12 +54,24 @@ public TypeSpec poetSpec() {\n                          .addJavadoc(\"Internal implementation of {@link $T}.\", builderInterfaceName);\n \n         if (model.getEndpointOperation().isPresent()) {\n-            builder.addMethod(enableEndpointDiscovery());\n+            builder.addMethod(endpointDiscoveryEnabled())\n+                   .addMethod(enableEndpointDiscovery());\n         }\n \n         return builder.addMethod(buildClientMethod()).build();\n     }\n \n+    private MethodSpec endpointDiscoveryEnabled() {\n+        return MethodSpec.methodBuilder(\"endpointDiscoveryEnabled\")\n+                         .addAnnotation(Override.class)\n+                         .addModifiers(Modifier.PUBLIC)\n+                         .returns(builderClassName)\n+                         .addParameter(boolean.class, \"endpointDiscoveryEnabled\")\n+                         .addStatement(\"this.endpointDiscoveryEnabled = endpointDiscoveryEnabled\")\n+                         .addStatement(\"return this\")\n+                         .build();\n+    }\n+\n     private MethodSpec enableEndpointDiscovery() {\n         return MethodSpec.methodBuilder(\"enableEndpointDiscovery\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDQwMA=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNTUyNA==", "bodyText": "We could also add a customization: \"enableEndpointDiscoveryMethodRequired\" and just enable it for DynamoDB.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1845#discussion_r426805524", "createdAt": "2020-05-18T18:06:45Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/builder/AsyncClientBuilderClass.java", "diffHunk": "@@ -54,12 +54,24 @@ public TypeSpec poetSpec() {\n                          .addJavadoc(\"Internal implementation of {@link $T}.\", builderInterfaceName);\n \n         if (model.getEndpointOperation().isPresent()) {\n-            builder.addMethod(enableEndpointDiscovery());\n+            builder.addMethod(endpointDiscoveryEnabled())\n+                   .addMethod(enableEndpointDiscovery());\n         }\n \n         return builder.addMethod(buildClientMethod()).build();\n     }\n \n+    private MethodSpec endpointDiscoveryEnabled() {\n+        return MethodSpec.methodBuilder(\"endpointDiscoveryEnabled\")\n+                         .addAnnotation(Override.class)\n+                         .addModifiers(Modifier.PUBLIC)\n+                         .returns(builderClassName)\n+                         .addParameter(boolean.class, \"endpointDiscoveryEnabled\")\n+                         .addStatement(\"this.endpointDiscoveryEnabled = endpointDiscoveryEnabled\")\n+                         .addStatement(\"return this\")\n+                         .build();\n+    }\n+\n     private MethodSpec enableEndpointDiscovery() {\n         return MethodSpec.methodBuilder(\"enableEndpointDiscovery\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDQwMA=="}, "originalCommit": {"oid": "71f07e16f7b4802c19ed089503113f1e647d0994"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4119, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}