{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjE5OTk1", "number": 1889, "title": "Support core metrics for async non-streaming and streaming operations", "bodyText": "Description\nSupport core metrics for async non-streaming and streaming operations\nThis might or might not be the last part depending on my findings in even streaming signing\nEventstreaming core metrics support will be in another PR\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-06-11T17:09:08Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889", "merged": true, "mergeCommit": {"oid": "1f53f9c0b09ef4849dff42a2fe255e02340dbd09"}, "closed": true, "closedAt": "2020-06-12T03:34:38Z", "author": {"login": "zoewangg"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqR1OAgBqjM0MzUyNDAxMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqXeEvAFqTQyOTM4MjAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0d1023ac494329c515a86ae5af4282e99158a69", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/d0d1023ac494329c515a86ae5af4282e99158a69", "committedDate": "2020-06-11T17:07:22Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/9b29c03f43607fd5b2108b635ef5a954ff601103", "committedDate": "2020-06-11T17:37:16Z", "message": "Support core metrics for async clients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/9b29c03f43607fd5b2108b635ef5a954ff601103", "committedDate": "2020-06-11T17:37:16Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/661077aa0ad3b7a412441c6597d118304fa0774d", "committedDate": "2020-06-11T18:22:54Z", "message": "Support core metrics for async clients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTczMjYy", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#pullrequestreview-429173262", "createdAt": "2020-06-11T18:18:27Z", "commit": {"oid": "d0d1023ac494329c515a86ae5af4282e99158a69"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxODo0NlrOGipbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozODoyOVrOGiqDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzQ3Mw==", "bodyText": "What is the motivation for logging the NoOpMetricCollector? What kind of data would it write?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438983473", "createdAt": "2020-06-11T18:18:46Z", "author": {"login": "cenedhryn"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -34,6 +36,7 @@ public String name() {\n \n     @Override\n     public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        log.trace(() -> \"Metrics reported: \" + data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTI1OQ==", "bodyText": "What is jetty logging used for?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438985259", "createdAt": "2020-06-11T18:22:13Z", "author": {"login": "cenedhryn"}, "path": "test/codegen-generated-classes-test/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+#  http://aws.amazon.com/apache2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+#\n+\n+# Set up logging implementation\n+org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ2MA==", "bodyText": "Can you move this private method down to the other private methods?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438990460", "createdAt": "2020-06-11T18:32:05Z", "author": {"login": "cenedhryn"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java", "diffHunk": "@@ -113,46 +119,172 @@ public void apiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence\n     @Test\n     public void apiCall_operationSuccessful_addsMetrics() {\n         stubSuccessfulResponse();\n+\n         client.allTypes().join();\n \n         ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n         verify(mockPublisher).publish(collectionCaptor.capture());\n-\n         MetricCollection capturedCollection = collectionCaptor.getValue();\n \n-        assertThat(capturedCollection.name()).isEqualTo(\"ApiCall\");\n-        assertThat(capturedCollection.metricValues(CoreMetric.SERVICE_ID))\n-            .containsExactly(SERVICE_ID);\n-        assertThat(capturedCollection.metricValues(CoreMetric.OPERATION_NAME))\n-            .containsExactly(\"AllTypes\");\n+        verifyApiCallCollection(capturedCollection);\n+\n+        assertThat(capturedCollection.children()).hasSize(1);\n+        MetricCollection attemptCollection = capturedCollection.children().get(0);\n+\n+        assertThat(attemptCollection.name()).isEqualTo(\"ApiCallAttempt\");\n+        assertThat(attemptCollection.children()).isEmpty();\n+\n+        verifySuccessfulApiCallAttemptCollection(attemptCollection);\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME).get(0))\n+            .isGreaterThanOrEqualTo(FIXED_DELAY);\n     }\n \n     @Test\n-    public void apiCall_operationFailed_addsMetrics() {\n+    public void apiCall_allRetryAttemptsFailedOf500() {\n         stubErrorResponse();\n-        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(ProtocolRestJsonException.class);\n+        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(EmptyModeledException.class);\n+\n+        ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+        verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+        MetricCollection capturedCollection = collectionCaptor.getValue();\n+        verifyApiCallCollection(capturedCollection);\n+        assertThat(capturedCollection.children()).hasSize(MAX_RETRIES + 1);\n+\n+        capturedCollection.children().forEach(this::verifyFailedApiCallAttemptCollection);\n+    }\n+\n+    private void verifyFailedApiCallAttemptCollection(MetricCollection requestMetrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzYyMA==", "bodyText": "If we had a second metricPublisher mock and added that to the request override instead of the first one, it'd be a better test IMO.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993620", "createdAt": "2020-06-11T18:38:15Z", "author": {"login": "cenedhryn"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {\n+        SdkClientConfiguration config = SdkClientConfiguration.builder().option(METRIC_PUBLISHER, metricPublisher).build();\n+        RequestOverrideConfiguration requestOverrideConfiguration = null;\n+        Optional<MetricPublisher> result = MetricUtils.resolvePublisher(config, requestOverrideConfiguration);\n+        assertThat(result).isEqualTo(Optional.of(metricPublisher));\n+    }\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNotNull_shouldTakePrecendance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzczNQ==", "bodyText": "Thanks for adding these tests!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993735", "createdAt": "2020-06-11T18:38:29Z", "author": {"login": "cenedhryn"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/661077aa0ad3b7a412441c6597d118304fa0774d", "committedDate": "2020-06-11T18:22:54Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "04ea3a09350807b805569ec33d252bcda05b762d", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/04ea3a09350807b805569ec33d252bcda05b762d", "committedDate": "2020-06-11T19:52:33Z", "message": "Support core metrics for async clients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04ea3a09350807b805569ec33d252bcda05b762d", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/04ea3a09350807b805569ec33d252bcda05b762d", "committedDate": "2020-06-11T19:52:33Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "committedDate": "2020-06-11T19:54:36Z", "message": "Support core metrics for async clients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mjc1NTE1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#pullrequestreview-429275515", "createdAt": "2020-06-11T20:43:55Z", "commit": {"oid": "a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "committedDate": "2020-06-11T19:54:36Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "bfbea7697467a616777c859ac090f72d82e8c0e4", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/bfbea7697467a616777c859ac090f72d82e8c0e4", "committedDate": "2020-06-11T21:24:18Z", "message": "Support core metrics for async clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/df636f13fba017b47f2d43c7afa28afbd7f519a4", "committedDate": "2020-06-11T23:50:13Z", "message": "Support core metrics for async clients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfbea7697467a616777c859ac090f72d82e8c0e4", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/bfbea7697467a616777c859ac090f72d82e8c0e4", "committedDate": "2020-06-11T21:24:18Z", "message": "Support core metrics for async clients"}, "afterCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/df636f13fba017b47f2d43c7afa28afbd7f519a4", "committedDate": "2020-06-11T23:50:13Z", "message": "Support core metrics for async clients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzgyMDAw", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#pullrequestreview-429382000", "createdAt": "2020-06-12T00:08:23Z", "commit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowODoyM1rOGiyuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMTowOFrOGiy0Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNTc4MQ==", "bodyText": "nit: remove print", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439135781", "createdAt": "2020-06-12T00:08:23Z", "author": {"login": "dagnir"}, "path": "services/transcribestreaming/src/it/java/software/amazon/awssdk/services/transcribestreaming/TranscribeStreamingIntegrationTest.java", "diffHunk": "@@ -58,7 +60,19 @@\n     public static void setup() throws URISyntaxException {\n         client = TranscribeStreamingAsyncClient.builder()\n                                                .region(Region.US_EAST_1)\n-                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor()))\n+                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor())\n+                                               .metricPublisher(new MetricPublisher() {\n+                                                   @Override\n+                                                   public void publish(MetricCollection metricCollection) {\n+                                                       System.out.println(metricCollection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA==", "bodyText": "does this account for errors that result in no HTTP request being sent?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439137314", "createdAt": "2020-06-12T00:11:08Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -173,6 +175,19 @@ public void onError(Throwable error) {\n         return responseFuture;\n     }\n \n+    private CompletableFuture<Void> doExecuteHttpRequest(RequestExecutionContext context, AsyncExecuteRequest executeRequest) {\n+        MetricCollector metricCollector = context.metricCollector();\n+        long callStart = System.nanoTime();\n+        CompletableFuture<Void> httpClientFuture = sdkAsyncHttpClient.execute(executeRequest);\n+\n+        // Offload the metrics reporting from this stage onto the future completion executor\n+        httpClientFuture.whenCompleteAsync((r, t) -> {\n+            long duration = System.nanoTime() - callStart;\n+            metricCollector.reportMetric(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME, Duration.ofNanos(duration));\n+        }, futureCompletionExecutor);\n+        return httpClientFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2600, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}