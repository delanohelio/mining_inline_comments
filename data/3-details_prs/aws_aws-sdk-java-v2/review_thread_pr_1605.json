{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTE1MzQx", "number": 1605, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyNTozNVrODZ5NKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxNjoyMlrODZ6UPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc4MjUxOnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyNTozNVrOFgiejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoxMjozNFrOFgl9XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MzYzMA==", "bodyText": "Friendly is cute, but is perhaps 'Helpful.. Interceptor' a more descriptive name and slightly less jarring?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369663630", "createdAt": "2020-01-22T16:25:35Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMDY2OA==", "bodyText": "All class names should be cute! I'll change to Helpful.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369720668", "createdAt": "2020-01-22T18:12:34Z", "author": {"login": "millems"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MzYzMA=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDc4OTU4OnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyNzoxOVrOFgiizQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoxMTo1NlrOFgl8PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NDcxNw==", "bodyText": "I don't think this comment is necessary, the context should make it clear", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369664717", "createdAt": "2020-01-22T16:27:19Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMDM4MQ==", "bodyText": "+1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369720381", "createdAt": "2020-01-22T18:11:56Z", "author": {"login": "millems"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NDcxNw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDgwNzE5OnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozMjoxMFrOFgit2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1MjoyMVrOFgnJ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NzU0Nw==", "bodyText": "I generally prefer to stack the calls on top of each other for readability\n  SdkClientException.builder()\n                                   .message(error.toString())\n                                   .cause(context.exception())\n                                   .build();\n\nIn this case the code isn't very complex so I am not insisting though. There is a benefit of a one-liner too; the method reads shorter.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369667547", "createdAt": "2020-01-22T16:32:10Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }\n+\n+        return SdkClientException.builder().message(error.toString()).cause(context.exception()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMTk5Mg==", "bodyText": "Personally, I stack it when it hits the line limit or when I want to draw more attention to it. I don't stack it when I feel like it's straight-forward and want to draw attention away from it so that the reader's eyes focus more on the interesting stuff.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369721992", "createdAt": "2020-01-22T18:15:27Z", "author": {"login": "millems"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }\n+\n+        return SdkClientException.builder().message(error.toString()).cause(context.exception()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NzU0Nw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MDI3Ng==", "bodyText": "That makes sense to me", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369740276", "createdAt": "2020-01-22T18:52:21Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }\n+\n+        return SdkClientException.builder().message(error.toString()).cause(context.exception()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NzU0Nw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg2MjU5OnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0NzowM1rOFgjQxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDowODo0MlrOFgpadw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NjQ4Ng==", "bodyText": "Another variant to consider: error.append(globalRegionErrorDetails.orElseGet(someSupplierOfErrorString));", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369676486", "createdAt": "2020-01-22T16:47:03Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMjY1MA==", "bodyText": "That would definitely work. Do you think it's more readable? I'm worried that the long orElse condition might be distracting, but it would definitely be shorter. I'll try it out!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369722650", "createdAt": "2020-01-22T18:16:50Z", "author": {"login": "millems"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NjQ4Ng=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzExNg==", "bodyText": "I tried it out, and the long orElseGet parameter makes the globalRegionErrorDetails.orElseGet part disappear, so it is hard for me to tell what the code is trying to do, personally.\nMoving the orElseGet parameter to a method is about as readable as the current iteration, because you have to jump to a separate function to see what the default message is.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369727116", "createdAt": "2020-01-22T18:26:11Z", "author": {"login": "millems"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NjQ4Ng=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3NzI3MQ==", "bodyText": "Yes, I can agree with that. Perhaps text messages isn't the right place to use orElse/orElseGet.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369777271", "createdAt": "2020-01-22T20:08:42Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NjQ4Ng=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg3MDEwOnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0OToxMVrOFgjVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0OToxMVrOFgjVaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NzY3Mw==", "bodyText": "I like this hiding of the ugly getAttribute", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369677673", "createdAt": "2020-01-22T16:49:11Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.regions.PartitionMetadata;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.regions.RegionMetadata;\n+import software.amazon.awssdk.regions.ServiceMetadata;\n+import software.amazon.awssdk.regions.ServicePartitionMetadata;\n+\n+/**\n+ * This interceptor will monitor for {@link UnknownHostException}s and provide the customer with additional information they can\n+ * use to debug or fix the problem.\n+ */\n+@SdkInternalApi\n+public final class FriendlyUnknownHostExceptionInterceptor implements ExecutionInterceptor {\n+    @Override\n+    public Throwable modifyException(Context.FailedExecution context, ExecutionAttributes executionAttributes) {\n+        // Skip non-UnknownHostExceptions\n+        if (!hasCause(context.exception(), UnknownHostException.class)) {\n+            return context.exception();\n+        }\n+\n+        StringBuilder error = new StringBuilder();\n+        error.append(\"Received an UnknownHostException when attempting to interact with a service. See cause for the \"\n+                     + \"exact endpoint that is failing to resolve. \");\n+\n+        Optional<String> globalRegionErrorDetails = getGlobalRegionErrorDetails(executionAttributes);\n+\n+        if (globalRegionErrorDetails.isPresent()) {\n+            error.append(globalRegionErrorDetails.get());\n+        } else {\n+            error.append(\"If this is happening on an endpoint that previously worked, there may be a network connectivity \"\n+                         + \"issue or your DNS cache could be storing endpoints for too long.\");\n+        }\n+\n+        return SdkClientException.builder().message(error.toString()).cause(context.exception()).build();\n+    }\n+\n+    /**\n+     * If the customer is interacting with a global service (one with a single endpoint/region for an entire partition), this\n+     * will return error details that can instruct the customer on how to configure their client for success.\n+     */\n+    private Optional<String> getGlobalRegionErrorDetails(ExecutionAttributes executionAttributes) {\n+        Region clientRegion = clientRegion(executionAttributes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkzNzY2OnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowODowN1rOFgkAGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoxODowNFrOFgmHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4ODYwMw==", "bodyText": "Should you also test that the message does NOT contain \"aws-global\"?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369688603", "createdAt": "2020-01-22T17:08:07Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMzI0MA==", "bodyText": "Sure! I thought the same thing, but it was more code since there isn't a messageDoesNotContain, so I was worried it would just distract. I can throw it in a function, though, since I agree it's something I shouldn't have been lazy about.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369723240", "createdAt": "2020-01-22T18:18:04Z", "author": {"login": "millems"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4ODYwMw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDk2MTc4OnYy", "diffSide": "RIGHT", "path": "codegen-lite/src/test/resources/software/amazon/awssdk/codegen/lite/regions/s3-service-metadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxNTo0MFrOFgkPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMDo0MFrOFgmMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjUxMw==", "bodyText": "Please make these lines shorter.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369692513", "createdAt": "2020-01-22T17:15:40Z", "author": {"login": "cenedhryn"}, "path": "codegen-lite/src/test/resources/software/amazon/awssdk/codegen/lite/regions/s3-service-metadata.java", "diffHunk": "@@ -19,22 +21,26 @@\n     private static final Map<String, String> PARTITION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder().build();\n \n     private static final Map<String, String> REGION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder()\n-            .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n-            .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n-            .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n-            .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n-            .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n-            .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n+        .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n+        .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n+        .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n+        .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n+        .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n+        .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n \n     private static final List<Region> REGIONS = Collections.unmodifiableList(Arrays.asList(Region.of(\"ap-northeast-1\"),\n-            Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n-            Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n-            Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n-            Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n-            Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));\n+                                                                                           Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n+                                                                                           Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n+                                                                                           Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n+                                                                                           Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n+                                                                                           Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMzkzMQ==", "bodyText": "Wouldn't that cause the test to fail? I'll see if it does...", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369723931", "createdAt": "2020-01-22T18:19:34Z", "author": {"login": "millems"}, "path": "codegen-lite/src/test/resources/software/amazon/awssdk/codegen/lite/regions/s3-service-metadata.java", "diffHunk": "@@ -19,22 +21,26 @@\n     private static final Map<String, String> PARTITION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder().build();\n \n     private static final Map<String, String> REGION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder()\n-            .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n-            .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n-            .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n-            .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n-            .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n-            .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n+        .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n+        .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n+        .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n+        .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n+        .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n+        .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n \n     private static final List<Region> REGIONS = Collections.unmodifiableList(Arrays.asList(Region.of(\"ap-northeast-1\"),\n-            Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n-            Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n-            Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n-            Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n-            Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));\n+                                                                                           Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n+                                                                                           Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n+                                                                                           Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n+                                                                                           Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n+                                                                                           Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjUxMw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDQ3MQ==", "bodyText": "Nice! Our assertions ignore whitespace.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369724471", "createdAt": "2020-01-22T18:20:40Z", "author": {"login": "millems"}, "path": "codegen-lite/src/test/resources/software/amazon/awssdk/codegen/lite/regions/s3-service-metadata.java", "diffHunk": "@@ -19,22 +21,26 @@\n     private static final Map<String, String> PARTITION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder().build();\n \n     private static final Map<String, String> REGION_OVERRIDDEN_ENDPOINTS = ImmutableMap.<String, String> builder()\n-            .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n-            .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n-            .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n-            .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n-            .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n-            .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n+        .put(\"ap-northeast-1\", \"s3.ap-northeast-1.amazonaws.com\").put(\"ap-southeast-1\", \"s3.ap-southeast-1.amazonaws.com\")\n+        .put(\"ap-southeast-2\", \"s3.ap-southeast-2.amazonaws.com\").put(\"eu-west-1\", \"s3.eu-west-1.amazonaws.com\")\n+        .put(\"sa-east-1\", \"s3.sa-east-1.amazonaws.com\").put(\"us-east-1\", \"s3.amazonaws.com\")\n+        .put(\"us-west-1\", \"s3.us-west-1.amazonaws.com\").put(\"us-west-2\", \"s3.us-west-2.amazonaws.com\")\n+        .put(\"fips-us-gov-west-1\", \"s3-fips-us-gov-west-1.amazonaws.com\")\n+        .put(\"us-gov-west-1\", \"s3.us-gov-west-1.amazonaws.com\").build();\n \n     private static final List<Region> REGIONS = Collections.unmodifiableList(Arrays.asList(Region.of(\"ap-northeast-1\"),\n-            Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n-            Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n-            Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n-            Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n-            Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));\n+                                                                                           Region.of(\"ap-northeast-2\"), Region.of(\"ap-northeast-3\"), Region.of(\"ap-south-1\"), Region.of(\"ap-southeast-1\"),\n+                                                                                           Region.of(\"ap-southeast-2\"), Region.of(\"ca-central-1\"), Region.of(\"eu-central-1\"), Region.of(\"eu-west-1\"),\n+                                                                                           Region.of(\"eu-west-2\"), Region.of(\"eu-west-3\"), Region.of(\"sa-east-1\"), Region.of(\"us-east-1\"),\n+                                                                                           Region.of(\"us-east-2\"), Region.of(\"us-west-1\"), Region.of(\"us-west-2\"), Region.of(\"cn-north-1\"),\n+                                                                                           Region.of(\"cn-northwest-1\"), Region.of(\"fips-us-gov-west-1\"), Region.of(\"us-gov-west-1\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjUxMw=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDk2NDQ0OnYy", "diffSide": "RIGHT", "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxNjoyMlrOFgkRAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NDo0NVrOFgnOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjkyOA==", "bodyText": "Can you indent these lines in a more readable way?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369692928", "createdAt": "2020-01-22T17:16:22Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-1\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    private Throwable modifyException(Throwable throwable) {\n+        return modifyException(throwable, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion) {\n+        return modifyException(throwable, clientRegion, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion, String serviceEndpointPrefix) {\n+        SdkRequest sdkRequest = Mockito.mock(SdkRequest.class);\n+        return INTERCEPTOR.modifyException(DefaultFailedExecutionContext.builder()\n+                                                                        .interceptorContext(InterceptorContext.builder()\n+                                                                                                              .request(sdkRequest)\n+                                                                                                              .build())\n+                                                                        .exception(throwable)\n+                                                                        .build(),\n+                                           new ExecutionAttributes().putAttribute(AwsExecutionAttribute.AWS_REGION,\n+                                                                                  clientRegion)\n+                                                                    .putAttribute(AwsExecutionAttribute.ENDPOINT_PREFIX,\n+                                                                                  serviceEndpointPrefix));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDgxNw==", "bodyText": "I thought this was the most readable way :(", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369724817", "createdAt": "2020-01-22T18:21:18Z", "author": {"login": "millems"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-1\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    private Throwable modifyException(Throwable throwable) {\n+        return modifyException(throwable, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion) {\n+        return modifyException(throwable, clientRegion, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion, String serviceEndpointPrefix) {\n+        SdkRequest sdkRequest = Mockito.mock(SdkRequest.class);\n+        return INTERCEPTOR.modifyException(DefaultFailedExecutionContext.builder()\n+                                                                        .interceptorContext(InterceptorContext.builder()\n+                                                                                                              .request(sdkRequest)\n+                                                                                                              .build())\n+                                                                        .exception(throwable)\n+                                                                        .build(),\n+                                           new ExecutionAttributes().putAttribute(AwsExecutionAttribute.AWS_REGION,\n+                                                                                  clientRegion)\n+                                                                    .putAttribute(AwsExecutionAttribute.ENDPOINT_PREFIX,\n+                                                                                  serviceEndpointPrefix));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjkyOA=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDk5Nw==", "bodyText": "I'll break up the call.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369724997", "createdAt": "2020-01-22T18:21:42Z", "author": {"login": "millems"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-1\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    private Throwable modifyException(Throwable throwable) {\n+        return modifyException(throwable, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion) {\n+        return modifyException(throwable, clientRegion, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion, String serviceEndpointPrefix) {\n+        SdkRequest sdkRequest = Mockito.mock(SdkRequest.class);\n+        return INTERCEPTOR.modifyException(DefaultFailedExecutionContext.builder()\n+                                                                        .interceptorContext(InterceptorContext.builder()\n+                                                                                                              .request(sdkRequest)\n+                                                                                                              .build())\n+                                                                        .exception(throwable)\n+                                                                        .build(),\n+                                           new ExecutionAttributes().putAttribute(AwsExecutionAttribute.AWS_REGION,\n+                                                                                  clientRegion)\n+                                                                    .putAttribute(AwsExecutionAttribute.ENDPOINT_PREFIX,\n+                                                                                  serviceEndpointPrefix));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjkyOA=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTQ0Ng==", "bodyText": ":-). Usually the indentation rules are good but in this case it just ended up like a jumble to me", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1605#discussion_r369741446", "createdAt": "2020-01-22T18:54:45Z", "author": {"login": "cenedhryn"}, "path": "core/aws-core/src/test/java/software/amazon/awssdk/awscore/interceptor/FriendlyUnknownHostExceptionInterceptorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package software.amazon.awssdk.awscore.interceptor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.awscore.AwsExecutionAttribute;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.core.interceptor.InterceptorContext;\n+import software.amazon.awssdk.core.internal.interceptor.DefaultFailedExecutionContext;\n+import software.amazon.awssdk.regions.Region;\n+\n+public class FriendlyUnknownHostExceptionInterceptorTest {\n+    private static final ExecutionInterceptor INTERCEPTOR = new FriendlyUnknownHostExceptionInterceptor();\n+\n+    @Test\n+    public void modifyException_skipsNonUnknownHostExceptions() {\n+        IOException exception = new IOException();\n+        assertThat(modifyException(exception)).isEqualTo(exception);\n+    }\n+\n+    @Test\n+    public void modifyException_supportsNestedUnknownHostExceptions() {\n+        Exception exception = new UnknownHostException();\n+        exception.initCause(new IOException());\n+        exception = new IllegalArgumentException(exception);\n+        exception = new UnsupportedOperationException(exception);\n+\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL)).isInstanceOf(SdkClientException.class);\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forGlobalRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.AWS_GLOBAL))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServices() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forUnknownServicesInUnknownRegions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"millems-hotdog-stand\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericHelp_forServicesRegionalizedInAllPartitions() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.US_EAST_1, \"dynamodb\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"network\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsGenericGlobalRegionHelp_forServicesGlobalInSomePartitionOtherThanTheClientPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-99\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-global\")\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    @Test\n+    public void modifyException_returnsSpecificGlobalRegionHelp_forServicesGlobalInTheClientRegionPartition() {\n+        UnknownHostException exception = new UnknownHostException();\n+        assertThat(modifyException(exception, Region.of(\"cn-north-1\"), \"iam\"))\n+            .isInstanceOf(SdkClientException.class)\n+            .hasMessageContaining(\"aws-cn-global\");\n+    }\n+\n+    private Throwable modifyException(Throwable throwable) {\n+        return modifyException(throwable, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion) {\n+        return modifyException(throwable, clientRegion, null);\n+    }\n+\n+    private Throwable modifyException(Throwable throwable, Region clientRegion, String serviceEndpointPrefix) {\n+        SdkRequest sdkRequest = Mockito.mock(SdkRequest.class);\n+        return INTERCEPTOR.modifyException(DefaultFailedExecutionContext.builder()\n+                                                                        .interceptorContext(InterceptorContext.builder()\n+                                                                                                              .request(sdkRequest)\n+                                                                                                              .build())\n+                                                                        .exception(throwable)\n+                                                                        .build(),\n+                                           new ExecutionAttributes().putAttribute(AwsExecutionAttribute.AWS_REGION,\n+                                                                                  clientRegion)\n+                                                                    .putAttribute(AwsExecutionAttribute.ENDPOINT_PREFIX,\n+                                                                                  serviceEndpointPrefix));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjkyOA=="}, "originalCommit": {"oid": "b69e76bcc4d38b74029fbd4a0ed2c5c864e90e82"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4323, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}