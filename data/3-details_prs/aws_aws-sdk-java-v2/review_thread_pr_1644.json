{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDMxMTgw", "number": 1644, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozNDozM1rODeqj6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozNDozM1rODeqj6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDgxMTkzOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozNDozM1rOFn7bcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTo0MDo0M1rOFn7gSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMjQ2NA==", "bodyText": "As discussed, let's look into simplifying this either with a single threaded test or using .getAndIncrement() to cache the value instead of get() that then requires a compareAndSet()", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1644#discussion_r377412464", "createdAt": "2020-02-11T01:34:33Z", "author": {"login": "bmaizels"}, "path": "http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java", "diffHunk": "@@ -58,10 +58,18 @@ public void read(final ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline().channel().eventLoop().parent().execute(new Runnable() {\n             @Override\n             public void run() {\n-                for (int i = 0; i < batchSize && sequence.get() != eofOn; i++) {\n-                    ctx.fireChannelRead(sequence.getAndIncrement());\n+                long valueToProduce = sequence.get();\n+                for (int i = 0; i < batchSize && valueToProduce != eofOn;) {\n+                    if (!sequence.compareAndSet(valueToProduce, valueToProduce + 1)) {\n+                        // Another thread already produced this value, try again with the next value.\n+                        valueToProduce = sequence.get();\n+                        continue;\n+                    }\n+\n+                    ctx.fireChannelRead(valueToProduce);\n+                    ++i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749ebdb65fe6b2353276a5300e5e7f7dc09c3aa4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMzcwNg==", "bodyText": "Re-wrote it to use a single-threaded executor, which is what I think the original author was trying to do by scheduling it on the parent event-loop executor. That way there's no concurrency concerns at all.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1644#discussion_r377413706", "createdAt": "2020-02-11T01:40:43Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java", "diffHunk": "@@ -58,10 +58,18 @@ public void read(final ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline().channel().eventLoop().parent().execute(new Runnable() {\n             @Override\n             public void run() {\n-                for (int i = 0; i < batchSize && sequence.get() != eofOn; i++) {\n-                    ctx.fireChannelRead(sequence.getAndIncrement());\n+                long valueToProduce = sequence.get();\n+                for (int i = 0; i < batchSize && valueToProduce != eofOn;) {\n+                    if (!sequence.compareAndSet(valueToProduce, valueToProduce + 1)) {\n+                        // Another thread already produced this value, try again with the next value.\n+                        valueToProduce = sequence.get();\n+                        continue;\n+                    }\n+\n+                    ctx.fireChannelRead(valueToProduce);\n+                    ++i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMjQ2NA=="}, "originalCommit": {"oid": "749ebdb65fe6b2353276a5300e5e7f7dc09c3aa4"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4206, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}