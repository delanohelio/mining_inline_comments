{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5Nzk4MTUy", "number": 2116, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0MDoxN1rOEyDv-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToyMDoyOVrOEzcmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTI1Njg4OnYy", "diffSide": "RIGHT", "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/utils/SDKPublisherSubjectsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0MDoxN1rOHofgMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0MDoxN1rOHofgMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMTIzMw==", "bodyText": "Seems like we should move the tests to core module since it's testing FilteringSubscriber, LimitingSubscriber  and not s3 client.  Can we rename the test class to something like SdkSubscriberTest?\nnit: the naming convention used in our unit test are something like methodToTest_when_should", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r512221233", "createdAt": "2020-10-26T19:40:17Z", "author": {"login": "zoewangg"}, "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/utils/SDKPublisherSubjectsTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package software.amazon.awssdk.services.s3.utils;\n+\n+import org.junit.Test;\n+import software.amazon.awssdk.core.pagination.async.AsyncPageFetcher;\n+import software.amazon.awssdk.core.pagination.async.PaginatedItemsPublisher;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Function;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+\n+public class SDKPublisherSubjectsTest {\n+\n+\n+    @Test\n+    public void testLimitingSubscriber() throws InterruptedException, ExecutionException, TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTI2OTI5OnYy", "diffSide": "RIGHT", "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/utils/SDKPublisherSubjectsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0MzoyMFrOHofnlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0MzoyMFrOHofnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMzEyNw==", "bodyText": "Missing copyright header", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r512223127", "createdAt": "2020-10-26T19:43:20Z", "author": {"login": "zoewangg"}, "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/utils/SDKPublisherSubjectsTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package software.amazon.awssdk.services.s3.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTMwNDAwOnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MzoxN1rOHof8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjozOTo1N1rOHqAG7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODUxNA==", "bodyText": "Good catch on this issue, but I'm not sure if this is the right fix though because it seems at this point, the subscriber might not receive the last item yet.\nIt'd probably be better if we just focus on the original bug in this PR and address this in another PR.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r512228514", "createdAt": "2020-10-26T19:53:17Z", "author": {"login": "zoewangg"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -47,6 +47,7 @@ public void onNext(T t) {\n         }\n         // If we've met the limit then we can cancel the subscription\n         if (delivered.incrementAndGet() >= limit) {\n+            subscriber.onComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1OTY3NQ==", "bodyText": "This is part of the fix, else limit wont work even after the fix provided in original PR.\nI  crossed checked the behavior with ReactiveX/RxJava for limit/take function behavior when iteration crosses given Limit\nhttps://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTake.java#L62-L68", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513059675", "createdAt": "2020-10-27T22:02:12Z", "author": {"login": "joviegas"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -47,6 +47,7 @@ public void onNext(T t) {\n         }\n         // If we've met the limit then we can cancel the subscription\n         if (delivered.incrementAndGet() >= limit) {\n+            subscriber.onComplete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODUxNA=="}, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2MzY4NQ==", "bodyText": "else limit wont work even after the fix provided in original PR.\n\nYeah, I'm aware of it. But it's not getting worse than it already is. My concern is that subscribe#onComplete gets called before theonNext on the last item with the current implementation. We should make sure onComplete gets called right after the last item gets dispatched. Something like the following:\n       if (delivered.incrementAndGet() <= limit) {\n            subscriber.onNext(t);\n\n            if (delivered.get() == limit) {\n                subscription.cancel();\n                subscriber.onComplete();\n            }\n        }\n\nWe should probably just mirror how flowable does it to get it right. I've seen too many race conditions", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513063685", "createdAt": "2020-10-27T22:11:40Z", "author": {"login": "zoewangg"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -47,6 +47,7 @@ public void onNext(T t) {\n         }\n         // If we've met the limit then we can cancel the subscription\n         if (delivered.incrementAndGet() >= limit) {\n+            subscriber.onComplete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODUxNA=="}, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwNDAxNA==", "bodyText": "Thanks.\nAddressed the comment taking https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTake.java#L57-L80 as reference", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513804014", "createdAt": "2020-10-28T22:39:57Z", "author": {"login": "joviegas"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -47,6 +47,7 @@ public void onNext(T t) {\n         }\n         // If we've met the limit then we can cancel the subscription\n         if (delivered.incrementAndGet() >= limit) {\n+            subscriber.onComplete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODUxNA=="}, "originalCommit": {"oid": "08f53f29e3368debb3356b117e03c531669a464a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTQ1MzIyOnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo1MToyOFrOHqAXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjowOToxNFrOHqEq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1Nw==", "bodyText": "Should we add validation in SdkPublisher#limit to require it to be positive?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513808257", "createdAt": "2020-10-28T22:51:28Z", "author": {"login": "zoewangg"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -35,19 +35,25 @@ public LimitingSubscriber(Subscriber<? super T> subscriber, int limit) {\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n-        super.onSubscribe(subscription);\n         this.subscription = subscription;\n+        if (limit == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c621f80a917cf6054bdf913a5641baae8189c57"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3ODc1NQ==", "bodyText": "Since Flowable and Observable also support limit = 0 we will also need to support this.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513878755", "createdAt": "2020-10-29T02:09:14Z", "author": {"login": "joviegas"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -35,19 +35,25 @@ public LimitingSubscriber(Subscriber<? super T> subscriber, int limit) {\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n-        super.onSubscribe(subscription);\n         this.subscription = subscription;\n+        if (limit == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1Nw=="}, "originalCommit": {"oid": "3c621f80a917cf6054bdf913a5641baae8189c57"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTQ4OTk5OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzowNjo1OVrOHqAtiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjowODowNFrOHqEo4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxMzg5OQ==", "bodyText": "We already have EmptySubscription  :)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513813899", "createdAt": "2020-10-28T23:06:59Z", "author": {"login": "zoewangg"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -35,19 +35,25 @@ public LimitingSubscriber(Subscriber<? super T> subscriber, int limit) {\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n-        super.onSubscribe(subscription);\n         this.subscription = subscription;\n+        if (limit == 0) {\n+            subscription.cancel();\n+            EmptySubscriptionEnum.complete(this.subscriber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c621f80a917cf6054bdf913a5641baae8189c57"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3ODI0MQ==", "bodyText": "The existing EmptySubscription is in sdk-core module, and util is already a dependency of sdk-core module, so instead of using this class create a new EmptySubscription exactly same as the one in sdk-core.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r513878241", "createdAt": "2020-10-29T02:08:04Z", "author": {"login": "joviegas"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/LimitingSubscriber.java", "diffHunk": "@@ -35,19 +35,25 @@ public LimitingSubscriber(Subscriber<? super T> subscriber, int limit) {\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n-        super.onSubscribe(subscription);\n         this.subscription = subscription;\n+        if (limit == 0) {\n+            subscription.cancel();\n+            EmptySubscriptionEnum.complete(this.subscriber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxMzg5OQ=="}, "originalCommit": {"oid": "3c621f80a917cf6054bdf913a5641baae8189c57"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzgxNDg2OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/software/amazon/awssdk/utils/async/EmptySubscription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToyMDoyOVrOHqrElg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToyNjo0M1rOHqrRcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNzkyNg==", "bodyText": "SdkInternalApi ? We put all internal apis in the internal package", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r514507926", "createdAt": "2020-10-29T19:20:29Z", "author": {"login": "zoewangg"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/EmptySubscription.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.utils.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * A NoOp implementation of {@link Subscription} interface.\n+ *\n+ * This subscription calls {@link Subscriber#onComplete()} on first request for data and then terminates the subscription.\n+ */\n+@SdkProtectedApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41226db0ec1c318130b530e6e3ffb5310195a4fd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxMTIxNw==", "bodyText": "Done", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2116#discussion_r514511217", "createdAt": "2020-10-29T19:26:43Z", "author": {"login": "joviegas"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/async/EmptySubscription.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.utils.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * A NoOp implementation of {@link Subscription} interface.\n+ *\n+ * This subscription calls {@link Subscriber#onComplete()} on first request for data and then terminates the subscription.\n+ */\n+@SdkProtectedApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNzkyNg=="}, "originalCommit": {"oid": "41226db0ec1c318130b530e6e3ffb5310195a4fd"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3919, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}