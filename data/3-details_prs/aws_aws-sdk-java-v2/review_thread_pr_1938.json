{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzM5MjY5", "number": 1938, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxNDozNFrOELEVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjozMTo1MlrOELEiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQwNzcwOnYy", "diffSide": "RIGHT", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-endpoint-discovery-async.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxNDozNFrOGsea0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxOToxNFrOGwF7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODkxNQ==", "bodyText": "Should we return whenComplete's result, so that it's easier to say that \"when the execute future completes, metrics have been published\"?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449288915", "createdAt": "2020-07-02T22:14:34Z", "author": {"login": "millems"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-endpoint-discovery-async.java", "diffHunk": "@@ -255,9 +302,19 @@ public final String serviceName() {\n                             .withOperationName(\"TestDiscoveryRequired\")\n                             .withMarshaller(new TestDiscoveryRequiredRequestMarshaller(protocolFactory))\n                             .withResponseHandler(responseHandler).withErrorResponseHandler(errorResponseHandler)\n-                            .discoveredEndpoint(cachedEndpoint).withInput(testDiscoveryRequiredRequest));\n+                            .withMetricCollector(apiCallMetricCollector).discoveredEndpoint(cachedEndpoint)\n+                            .withInput(testDiscoveryRequiredRequest));\n+            AwsRequestOverrideConfiguration requestOverrideConfig = testDiscoveryRequiredRequest.overrideConfiguration().orElse(\n+                    null);\n+            executeFuture.whenComplete((r, e) -> {\n+                List<MetricPublisher> metricPublishers = resolveMetricPublishers(clientConfiguration, requestOverrideConfig);\n+                metricPublishers.forEach(p -> p.publish(apiCallMetricCollector.collect()));\n+            });\n             return executeFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTg5Ng==", "bodyText": "+1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r453081896", "createdAt": "2020-07-10T21:19:14Z", "author": {"login": "dagnir"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-endpoint-discovery-async.java", "diffHunk": "@@ -255,9 +302,19 @@ public final String serviceName() {\n                             .withOperationName(\"TestDiscoveryRequired\")\n                             .withMarshaller(new TestDiscoveryRequiredRequestMarshaller(protocolFactory))\n                             .withResponseHandler(responseHandler).withErrorResponseHandler(errorResponseHandler)\n-                            .discoveredEndpoint(cachedEndpoint).withInput(testDiscoveryRequiredRequest));\n+                            .withMetricCollector(apiCallMetricCollector).discoveredEndpoint(cachedEndpoint)\n+                            .withInput(testDiscoveryRequiredRequest));\n+            AwsRequestOverrideConfiguration requestOverrideConfig = testDiscoveryRequiredRequest.overrideConfiguration().orElse(\n+                    null);\n+            executeFuture.whenComplete((r, e) -> {\n+                List<MetricPublisher> metricPublishers = resolveMetricPublishers(clientConfiguration, requestOverrideConfig);\n+                metricPublishers.forEach(p -> p.publish(apiCallMetricCollector.collect()));\n+            });\n             return executeFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODkxNQ=="}, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQxNTE3OnYy", "diffSide": "RIGHT", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxNzo0MlrOGsee8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxNzo0MlrOGsee8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4OTk3MQ==", "bodyText": "We might want to consider supporting these, so that enabling the \"NoOpMetricCollector\" won't cause all of the SDK calls to fail with UnsupportedOperationException.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449289971", "createdAt": "2020-07-02T22:17:42Z", "author": {"login": "millems"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics;\n+\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * A metric collector that doesn't do anything.\n+ *\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public final class NoOpMetricCollector implements MetricCollector {\n+    private static final NoOpMetricCollector INSTANCE = new NoOpMetricCollector();\n+\n+    private NoOpMetricCollector() {\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"NoOp\";\n+    }\n+\n+    @Override\n+    public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+    }\n+\n+    @Override\n+    public MetricCollector createChild(String name) {\n+        throw new UnsupportedOperationException(\"No op collector does not support createChild\");\n+    }\n+\n+    @Override\n+    public MetricCollection collect() {\n+        throw new UnsupportedOperationException(\"No op collector does not support collect\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQxODQyOnYy", "diffSide": "RIGHT", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/SdkMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoxOTozMVrOGseg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToxOTo1NFrOGwF8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDQ1MQ==", "bodyText": "Do we use this? Why not just let the caller use valueClass().cast(o)?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449290451", "createdAt": "2020-07-02T22:19:31Z", "author": {"login": "millems"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/SdkMetric.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics;\n+\n+import java.util.Set;\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.metrics.internal.DefaultSdkMetric;\n+\n+/**\n+ * A specific SDK metric.\n+ *\n+ * @param <T> The type for values of this metric.\n+ *\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public interface SdkMetric<T> {\n+\n+    /**\n+     * @return The name of this metric.\n+     */\n+    String name();\n+\n+    /**\n+     * @return The categories of this metric.\n+     */\n+    Set<MetricCategory> categories();\n+\n+    /**\n+     * @return The level of this metric.\n+     */\n+    MetricLevel level();\n+\n+    /**\n+     * @return The class of the value associated with this metric.\n+     */\n+    Class<T> valueClass();\n+\n+    /**\n+     * Cast the given object to the value class associated with this event.\n+     *\n+     * @param o The object.\n+     * @return The cast object.\n+     * @throws ClassCastException If {@code o} is not an instance of type {@code\n+     * T}.\n+     */\n+    T convertValue(Object o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MjEyNQ==", "bodyText": "Sure this can be removed, don't think it's used at the moment", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r453082125", "createdAt": "2020-07-10T21:19:54Z", "author": {"login": "dagnir"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/SdkMetric.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics;\n+\n+import java.util.Set;\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.metrics.internal.DefaultSdkMetric;\n+\n+/**\n+ * A specific SDK metric.\n+ *\n+ * @param <T> The type for values of this metric.\n+ *\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public interface SdkMetric<T> {\n+\n+    /**\n+     * @return The name of this metric.\n+     */\n+    String name();\n+\n+    /**\n+     * @return The categories of this metric.\n+     */\n+    Set<MetricCategory> categories();\n+\n+    /**\n+     * @return The level of this metric.\n+     */\n+    MetricLevel level();\n+\n+    /**\n+     * @return The class of the value associated with this metric.\n+     */\n+    Class<T> valueClass();\n+\n+    /**\n+     * Cast the given object to the value class associated with this event.\n+     *\n+     * @param o The object.\n+     * @return The cast object.\n+     * @throws ClassCastException If {@code o} is not an instance of type {@code\n+     * T}.\n+     */\n+    T convertValue(Object o);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDQ1MQ=="}, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQxOTE2OnYy", "diffSide": "RIGHT", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyMDowM1rOGsehTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyMDowM1rOGsehTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDU3NA==", "bodyText": "weird formatting", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449290574", "createdAt": "2020-07-02T22:20:03Z", "author": {"login": "millems"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollection.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.internal;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.utils.ToString;\n+\n+@SdkInternalApi\n+public final class DefaultMetricCollection implements MetricCollection {\n+    private final String name;\n+    private final Map<SdkMetric<?>, List<MetricRecord<?>>> metrics;\n+    private final List<MetricCollection> children;\n+    private final Instant creationTime;\n+\n+    public DefaultMetricCollection(String name, Map<SdkMetric<?>,\n+        List<MetricRecord<?>>> metrics,\n+                                   List<MetricCollection> children) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQyMjIyOnYy", "diffSide": "RIGHT", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyMTo0N1rOGsejMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyMTo0N1rOGsejMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MTA1Ng==", "bodyText": "Nit: Capital C?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449291056", "createdAt": "2020-07-02T22:21:47Z", "author": {"login": "millems"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollector.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.internal;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.utils.Logger;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * TODO: Before launch, we should iterate on the performance of this collector, because it's currently very naive.\n+ */\n+@SdkInternalApi\n+public final class DefaultMetricCollector implements MetricCollector {\n+    private static final Logger log = Logger.loggerFor(DefaultMetricCollector.class);\n+    private final String name;\n+    private final Map<SdkMetric<?>, List<MetricRecord<?>>> metrics = new LinkedHashMap<>();\n+    private final List<MetricCollector> children = new ArrayList<>();\n+\n+    public DefaultMetricCollector(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Override\n+    public synchronized <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        metrics.computeIfAbsent(metric, (m) -> new ArrayList<>())\n+               .add(new DefaultMetricRecord<>(metric, data));\n+    }\n+\n+    @Override\n+    public synchronized MetricCollector createChild(String name) {\n+        MetricCollector child = new DefaultMetricCollector(name);\n+        children.add(child);\n+        return child;\n+    }\n+\n+    @Override\n+    public synchronized MetricCollection collect() {\n+        List<MetricCollection> collectedChildren = children.stream()\n+                .map(MetricCollector::collect)\n+                .collect(Collectors.toList());\n+\n+        DefaultMetricCollection metricRecords = new DefaultMetricCollection(name, metrics, collectedChildren);\n+\n+        log.debug(() -> \"collected metrics records: \" + metricRecords);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQzNDA3OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/util/MetricUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyODowN1rOGseqLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyODowN1rOGseqLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5Mjg0Nw==", "bodyText": "Worried about this being used when collect() and newChild() throw exceptions.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449292847", "createdAt": "2020-07-02T22:28:07Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/util/MetricUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static software.amazon.awssdk.core.http.HttpResponseHandler.X_AMZN_REQUEST_ID_HEADERS;\n+import static software.amazon.awssdk.core.http.HttpResponseHandler.X_AMZ_ID_2_HEADER;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.HttpMetric;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.NoOpMetricCollector;\n+import software.amazon.awssdk.utils.Pair;\n+import software.amazon.awssdk.utils.http.SdkHttpUtils;\n+\n+/**\n+ * Utility methods for working with metrics.\n+ */\n+@SdkInternalApi\n+public final class MetricUtils {\n+\n+    private MetricUtils() {\n+    }\n+\n+    /**\n+     * Measure the duration of the given callable.\n+     *\n+     * @param c The callable to measure.\n+     * @return A {@code Pair} containing the result of {@code c} and the duration.\n+     */\n+    public static <T> Pair<T, Duration> measureDuration(Supplier<T> c) {\n+        long start = System.nanoTime();\n+        T result = c.get();\n+        Duration d = Duration.ofNanos(System.nanoTime() - start);\n+        return Pair.of(result, d);\n+    }\n+\n+    /**\n+     * Measure the duration of the given callable.\n+     *\n+     * @param c The callable to measure.\n+     * @return A {@code Pair} containing the result of {@code c} and the duration.\n+     */\n+    public static <T> Pair<T, Duration> measureDurationUnsafe(Callable<T> c) throws Exception {\n+        long start = System.nanoTime();\n+        T result = c.call();\n+        Duration d = Duration.ofNanos(System.nanoTime() - start);\n+        return Pair.of(result, d);\n+    }\n+\n+    public static void collectHttpMetrics(MetricCollector metricCollector, SdkHttpFullResponse httpResponse) {\n+        metricCollector.reportMetric(HttpMetric.HTTP_STATUS_CODE, httpResponse.statusCode());\n+        SdkHttpUtils.allMatchingHeadersFromCollection(httpResponse.headers(), X_AMZN_REQUEST_ID_HEADERS)\n+                    .forEach(v -> metricCollector.reportMetric(CoreMetric.AWS_REQUEST_ID, v));\n+        httpResponse.firstMatchingHeader(X_AMZ_ID_2_HEADER)\n+                    .ifPresent(v -> metricCollector.reportMetric(CoreMetric.AWS_EXTENDED_REQUEST_ID, v));\n+    }\n+\n+    public static MetricCollector createAttemptMetricsCollector(RequestExecutionContext context) {\n+        MetricCollector parentCollector = context.executionContext().metricCollector();\n+        if (parentCollector != null) {\n+            return parentCollector.createChild(\"ApiCallAttempt\");\n+        }\n+        return NoOpMetricCollector.create();\n+    }\n+\n+    public static MetricCollector createHttpMetricsCollector(RequestExecutionContext context) {\n+        MetricCollector parentCollector = context.attemptMetricCollector();\n+        if (parentCollector != null) {\n+            return parentCollector.createChild(\"HttpClient\");\n+        }\n+        return NoOpMetricCollector.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQzNjQwOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/metrics/CoreMetric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyOToyNFrOGserjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjoyOToyNFrOGserjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MzE5OQ==", "bodyText": "Maybe we should do ~= since this function disregards small, constant time factors.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449293199", "createdAt": "2020-07-02T22:29:24Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/metrics/CoreMetric.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.metrics;\n+\n+import java.time.Duration;\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.MetricLevel;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+\n+/**\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public final class CoreMetric {\n+    /**\n+     * The unique ID for the service. This is present for all API call metrics.\n+     */\n+    public static final SdkMetric<String> SERVICE_ID =\n+        metric(\"ServiceId\", String.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The name of the service operation being invoked. This is present for all\n+     * API call metrics.\n+     */\n+    public static final SdkMetric<String> OPERATION_NAME =\n+        metric(\"OperationName\", String.class, MetricLevel.ERROR);\n+\n+    /**\n+     * True if the API call succeeded, false otherwise.\n+     */\n+    public static final SdkMetric<Boolean> API_CALL_SUCCESSFUL =\n+        metric(\"ApiCallSuccessful\", Boolean.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The number of retries that the SDK performed in the execution of the request. 0 implies that the request worked the first\n+     * time, and no retries were attempted.\n+     */\n+    public static final SdkMetric<Integer> RETRY_COUNT =\n+        metric(\"RetryCount\", Integer.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The duration of the API call. This includes all call attempts made.\n+     *\n+     * <p>{@code API_CALL_DURATION = CREDENTIALS_FETCH_DURATION + MARSHALLING_DURATION + SUM_ALL(BACKOFF_DELAY_DURATION) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQ0MDg0OnYy", "diffSide": "RIGHT", "path": "metric-publishers/cloudwatch-metric-publisher/src/main/java/software/amazon/awssdk/metrics/publishers/cloudwatch/internal/transform/TimeBucketedMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjozMTo1MlrOGseuUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjozMTo1MlrOGseuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MzkwNg==", "bodyText": "I noticed we updated V1 from milliseconds to nanoseconds. Should we just do nanos instead from the beginning for V2?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449293906", "createdAt": "2020-07-02T22:31:52Z", "author": {"login": "millems"}, "path": "metric-publishers/cloudwatch-metric-publisher/src/main/java/software/amazon/awssdk/metrics/publishers/cloudwatch/internal/transform/TimeBucketedMetrics.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.publishers.cloudwatch.internal.transform;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricLevel;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.services.cloudwatch.model.Dimension;\n+import software.amazon.awssdk.services.cloudwatch.model.StandardUnit;\n+\n+/**\n+ * \"Buckets\" metrics by the minute in which they were collected. This allows all metric data for a given 1-minute period to be\n+ * aggregated under a specific {@link MetricAggregator}.\n+ */\n+@SdkInternalApi\n+class TimeBucketedMetrics {\n+    /**\n+     * A map from \"the minute during which a metric value happened\" to \"the dimension and metric associated with the metric\n+     * values\" to \"the aggregator for the metric values that occurred within that minute and for that dimension/metric\".\n+     */\n+    private final Map<Instant, Map<MetricAggregatorKey, MetricAggregator>> timeBucketedMetrics = new HashMap<>();\n+\n+    /**\n+     * The dimensions that should be used for aggregating metrics that occur within a given minute. These are optional values.\n+     * The dimensions will be used if a {@link MetricCollection} includes them, but if it does not, it will be aggregated with\n+     * whatever dimensions (if any) are available.\n+     */\n+    private final Set<SdkMetric<String>> dimensions;\n+\n+    /**\n+     * The set of metrics for which {@link DetailedMetricAggregator}s should be used for aggregation. All other metrics will use\n+     * a {@link SummaryMetricAggregator}.\n+     */\n+    private final Set<SdkMetric<?>> detailedMetrics;\n+\n+    /**\n+     * The metric categories for which we should aggregate values. Any categories outside of this set will have their values\n+     * ignored/dropped.\n+     */\n+    private final Set<MetricCategory> metricCategories;\n+\n+    /**\n+     * The metric levels for which we should aggregate values. Any categories at a more \"verbose\" level than this one will have\n+     * their values ignored/dropped.\n+     */\n+    private final MetricLevel metricLevel;\n+\n+    /**\n+     * True, when the {@link #metricCategories} contains {@link MetricCategory#ALL}.\n+     */\n+    private final boolean metricCategoriesContainsAll;\n+\n+\n+\n+    TimeBucketedMetrics(Set<SdkMetric<String>> dimensions,\n+                        Set<MetricCategory> metricCategories,\n+                        MetricLevel metricLevel,\n+                        Set<SdkMetric<?>> detailedMetrics) {\n+        this.dimensions = dimensions;\n+        this.detailedMetrics = detailedMetrics;\n+        this.metricCategories = metricCategories;\n+        this.metricLevel = metricLevel;\n+        this.metricCategoriesContainsAll = metricCategories.contains(MetricCategory.ALL);\n+    }\n+\n+    /**\n+     * Add the provided collection to the proper bucket, based on the metric collection's time.\n+     */\n+    public void addMetrics(MetricCollection metrics) {\n+        Instant bucket = getBucket(metrics);\n+        addMetricsToBucket(metrics, bucket);\n+    }\n+\n+    /**\n+     * Reset this bucket, clearing all stored values.\n+     */\n+    public void reset() {\n+        timeBucketedMetrics.clear();\n+    }\n+\n+    /**\n+     * Retrieve all values in this collection. The map key is the minute in which the metric values were collected, and the\n+     * map value are all of the metrics that were aggregated during that minute.\n+     */\n+    public Map<Instant, Collection<MetricAggregator>> timeBucketedMetrics() {\n+        return timeBucketedMetrics.entrySet()\n+                                  .stream()\n+                                  .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().values()));\n+    }\n+\n+    private Instant getBucket(MetricCollection metrics) {\n+        return metrics.creationTime().truncatedTo(MINUTES);\n+    }\n+\n+    private void addMetricsToBucket(MetricCollection metrics, Instant bucketId) {\n+        aggregateMetrics(metrics, timeBucketedMetrics.computeIfAbsent(bucketId, i -> new HashMap<>()));\n+    }\n+\n+    private void aggregateMetrics(MetricCollection metrics, Map<MetricAggregatorKey, MetricAggregator> bucket) {\n+        List<Dimension> dimensions = dimensions(metrics);\n+        extractAllMetrics(metrics).forEach(metricRecord -> {\n+            MetricAggregatorKey aggregatorKey = new MetricAggregatorKey(metricRecord.metric(), dimensions);\n+            valueFor(metricRecord).ifPresent(metricValue -> {\n+                bucket.computeIfAbsent(aggregatorKey, m -> newAggregator(aggregatorKey))\n+                      .addMetricValue(MetricValueNormalizer.normalize(metricValue));\n+            });\n+        });\n+    }\n+\n+    private List<Dimension> dimensions(MetricCollection metricCollection) {\n+        List<Dimension> result = new ArrayList<>();\n+        for (MetricRecord<?> metricRecord : metricCollection) {\n+            if (dimensions.contains(metricRecord.metric())) {\n+                result.add(Dimension.builder()\n+                                    .name(metricRecord.metric().name())\n+                                    .value((String) metricRecord.value())\n+                                    .build());\n+            }\n+        }\n+\n+        // Sort the dimensions to make sure that the order in the input metric collection doesn't affect the result.\n+        // We use descending order just so that \"ServiceName\" is before \"OperationName\" when we use the default dimensions.\n+        result.sort(Comparator.comparing(Dimension::name).reversed());\n+        return result;\n+    }\n+\n+    private List<MetricRecord<?>> extractAllMetrics(MetricCollection metrics) {\n+        List<MetricRecord<?>> result = new ArrayList<>();\n+        extractAllMetrics(metrics, result);\n+        return result;\n+    }\n+\n+    private void extractAllMetrics(MetricCollection metrics, List<MetricRecord<?>> extractedMetrics) {\n+        for (MetricRecord<?> metric : metrics) {\n+            extractedMetrics.add(metric);\n+        }\n+        metrics.children().forEach(child -> extractAllMetrics(child, extractedMetrics));\n+    }\n+\n+    private MetricAggregator newAggregator(MetricAggregatorKey aggregatorKey) {\n+        SdkMetric<?> metric = aggregatorKey.metric();\n+        StandardUnit metricUnit = unitFor(metric);\n+        if (detailedMetrics.contains(metric)) {\n+            return new DetailedMetricAggregator(aggregatorKey, metricUnit);\n+        } else {\n+            return new SummaryMetricAggregator(aggregatorKey, metricUnit);\n+        }\n+    }\n+\n+    private StandardUnit unitFor(SdkMetric<?> metric) {\n+        Class<?> metricType = metric.valueClass();\n+\n+        if (Duration.class.isAssignableFrom(metricType)) {\n+            return StandardUnit.MILLISECONDS;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0"}, "originalPosition": 184}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3971, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}