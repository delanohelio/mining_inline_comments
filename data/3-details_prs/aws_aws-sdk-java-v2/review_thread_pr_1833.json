{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTUwMTcy", "number": 1833, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNzo0NFrOD8PYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNzo0NFrOD8PYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkzMDg1OnYy", "diffSide": "RIGHT", "path": "services/rds/src/test/java/software/amazon/awssdk/services/rds/internal/PresignRequestWireMockTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNzo0NFrOGVD3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNzo0NFrOGVD3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjY0NA==", "bodyText": "Nit: can we do assertThat(requests).isNotEmpty(); ?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1833#discussion_r424736644", "createdAt": "2020-05-13T21:17:44Z", "author": {"login": "bmaizels"}, "path": "services/rds/src/test/java/software/amazon/awssdk/services/rds/internal/PresignRequestWireMockTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.internal;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.any;\n+import static com.github.tomakehurst.wiremock.client.WireMock.anyRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.anyUrl;\n+import static com.github.tomakehurst.wiremock.client.WireMock.findAll;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.github.tomakehurst.wiremock.verification.LoggedRequest;\n+import java.net.URI;\n+import java.util.List;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsClient;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PresignRequestWireMockTest {\n+    @ClassRule\n+    public static final WireMockRule WIRE_MOCK = new WireMockRule(0);\n+\n+    public static RdsClient client;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        client = RdsClient.builder()\n+                          .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\"akid\", \"skid\")))\n+                          .region(Region.US_EAST_1)\n+                          .endpointOverride(URI.create(\"http://localhost:\" + WIRE_MOCK.port()))\n+                          .build();\n+    }\n+\n+    @Before\n+    public void reset() {\n+        WIRE_MOCK.resetAll();\n+    }\n+\n+    @Test\n+    public void copyDbClusterSnapshotWithSourceRegionSendsPresignedUrl() {\n+        verifyMethodCallSendsPresignedUrl(() -> client.copyDBClusterSnapshot(r -> r.sourceRegion(\"us-west-2\")),\n+                                          \"CopyDBClusterSnapshot\");\n+    }\n+\n+    @Test\n+    public void copyDBSnapshotWithSourceRegionSendsPresignedUrl() {\n+        verifyMethodCallSendsPresignedUrl(() -> client.copyDBSnapshot(r -> r.sourceRegion(\"us-west-2\")),\n+                                          \"CopyDBSnapshot\");\n+    }\n+\n+    @Test\n+    public void createDbClusterWithSourceRegionSendsPresignedUrl() {\n+        verifyMethodCallSendsPresignedUrl(() -> client.createDBCluster(r -> r.sourceRegion(\"us-west-2\")),\n+                                          \"CreateDBCluster\");\n+    }\n+\n+    @Test\n+    public void createDBInstanceReadReplicaWithSourceRegionSendsPresignedUrl() {\n+        verifyMethodCallSendsPresignedUrl(() -> client.createDBInstanceReadReplica(r -> r.sourceRegion(\"us-west-2\")),\n+                                          \"CreateDBInstanceReadReplica\");\n+    }\n+\n+    public void verifyMethodCallSendsPresignedUrl(Runnable methodCall, String actionName) {\n+        stubFor(any(anyUrl()).willReturn(aResponse().withStatus(200).withBody(\"<body/>\")));\n+\n+        methodCall.run();\n+\n+        List<LoggedRequest> requests = findAll(anyRequestedFor(anyUrl()));\n+\n+        assertThat(requests.isEmpty()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03462b5b736d38e3acfda2850332581d343b1f3e"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}