{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTYwNDkz", "number": 1720, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozN1rODpNOTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMDowM1rODpNegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM0ODYyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/PaginatedIndexOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozN1rOF4POfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxOTozN1rOF4POfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNDA0Nw==", "bodyText": "Nit, indent", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394514047", "createdAt": "2020-03-18T17:19:37Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/PaginatedIndexOperation.java", "diffHunk": "@@ -76,11 +77,11 @@\n      *                  operation. A null value here will result in no modifications.\n      * @return A high level result object as specified by the implementation of this operation.\n      */\n-    default SdkPublisher<ResultT> executeOnSecondaryIndexAsync(TableSchema<ItemT> tableSchema,\n-                                                               String tableName,\n-                                                               String indexName,\n-                                                               DynamoDbEnhancedClientExtension extension,\n-                                                               DynamoDbAsyncClient dynamoDbAsyncClient) {\n+    default SdkPublisher<Page<ItemT>> executeOnSecondaryIndexAsync(TableSchema<ItemT> tableSchema,\n+                                                            String tableName,\n+                                                            String indexName,\n+                                                            DynamoDbEnhancedClientExtension extension,\n+                                                            DynamoDbAsyncClient dynamoDbAsyncClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM2ODY4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNDo0OVrOF4Pb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NTowOVrOF4SuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNzQ1OA==", "bodyText": "I think there's a .items() missing?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394517458", "createdAt": "2020-03-18T17:24:49Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "diffHunk": "@@ -345,56 +345,61 @@\n      * further details and constraints.\n      * <p>\n      * Example:\n+     * <p>\n+     * 1) Subscribing to {@link Page}s\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n+     * PagePublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     *                                                                              .queryConditional(queryConditional)\n+     *                                                                              .build());\n+     * publisher.subscribe(page -> page.items().forEach(item -> System.out.println(item)));\n+     * }\n+     * <p>\n+     * 2) Subscribing to items across all pages\n      * <pre>\n      * {@code\n      *\n      * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n-     * SdkPublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     * PagePublisher<MyItem> publisher = mappedTable.query(QueryEnhancedRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTMwOA==", "bodyText": "Good catch. I wish there was a better way to automatically check the compiler errors in the code snippets from javadocs. I'll go over all code snippets.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394571308", "createdAt": "2020-03-18T18:55:09Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "diffHunk": "@@ -345,56 +345,61 @@\n      * further details and constraints.\n      * <p>\n      * Example:\n+     * <p>\n+     * 1) Subscribing to {@link Page}s\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n+     * PagePublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     *                                                                              .queryConditional(queryConditional)\n+     *                                                                              .build());\n+     * publisher.subscribe(page -> page.items().forEach(item -> System.out.println(item)));\n+     * }\n+     * <p>\n+     * 2) Subscribing to items across all pages\n      * <pre>\n      * {@code\n      *\n      * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n-     * SdkPublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     * PagePublisher<MyItem> publisher = mappedTable.query(QueryEnhancedRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNzQ1OA=="}, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM3NjU1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNjo1MFrOF4Pg_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo0OTozM1rOF4Ud3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODc4MA==", "bodyText": "Should we hint that there are more examples or ways to use this API documented here? This comment applies to all other instances where you've done the same.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394518780", "createdAt": "2020-03-18T17:26:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "diffHunk": "@@ -345,56 +345,61 @@\n      * further details and constraints.\n      * <p>\n      * Example:\n+     * <p>\n+     * 1) Subscribing to {@link Page}s\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n+     * PagePublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     *                                                                              .queryConditional(queryConditional)\n+     *                                                                              .build());\n+     * publisher.subscribe(page -> page.items().forEach(item -> System.out.println(item)));\n+     * }\n+     * <p>\n+     * 2) Subscribing to items across all pages\n      * <pre>\n      * {@code\n      *\n      * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n-     * SdkPublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     * PagePublisher<MyItem> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n      *                                                                              .queryConditional(queryConditional)\n      *                                                                              .build());\n+     * publisher.subscribe(item -> System.out.println(item));\n      * }\n      * </pre>\n      *\n+     * @see DynamoDbAsyncClient#query\n      * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n      * to handle the results.\n-     * @return a publisher {@link SdkPublisher} with paginated results (see {@link Page}).\n+     * @return a publisher {@link PagePublisher} with paginated results (see {@link Page}).\n      */\n-    default SdkPublisher<Page<T>> query(QueryEnhancedRequest request) {\n+    default PagePublisher<T> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Executes a query against the primary index of the table using a {@link QueryConditional} expression to retrieve a list of\n      * items matching the given conditions.\n      * <p>\n-     * The result is accessed through iterable pages (see {@link Page}) in an interactive way; each time a\n-     * result page is retrieved, a query call is made to DynamoDb to get those entries. If no matches are found,\n-     * the resulting iterator will contain an empty page. Results are sorted by sort key value in\n-     * ascending order by default; this behavior can be overridden in the {@link QueryEnhancedRequest}.\n-     * <p>\n-     * The additional configuration parameters that the enhanced client supports are defined\n-     * in the {@link QueryEnhancedRequest}.\n-     * <p>\n-     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n-     * further details and constraints.\n-     * <p>\n      * <b>Note:</b> This is a convenience method that creates an instance of the request builder avoiding the need to create one\n      * manually via {@link QueryEnhancedRequest#builder()}.\n      * <p>\n      * Example:\n      * <pre>\n      * {@code\n      *\n-     * SdkPublisher<Page<MyItem>> publisher =\n+     * PagePublisher<MyItem> publisher =\n      *     mappedTable.query(r -> r.queryConditional(QueryConditional.keyEqualTo(k -> k.partitionValue(\"id-value\"))));\n      * }\n      * </pre>\n      *\n+     * @see #query(QueryEnhancedRequest)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5OTkwMA==", "bodyText": "@see tag doesn't really render well with additional info - everything after it will show as a reference link.\nI can cross link all overloaded methods", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394599900", "createdAt": "2020-03-18T19:49:33Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "diffHunk": "@@ -345,56 +345,61 @@\n      * further details and constraints.\n      * <p>\n      * Example:\n+     * <p>\n+     * 1) Subscribing to {@link Page}s\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n+     * PagePublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     *                                                                              .queryConditional(queryConditional)\n+     *                                                                              .build());\n+     * publisher.subscribe(page -> page.items().forEach(item -> System.out.println(item)));\n+     * }\n+     * <p>\n+     * 2) Subscribing to items across all pages\n      * <pre>\n      * {@code\n      *\n      * QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder().partitionValue(\"id-value\").build());\n-     * SdkPublisher<Page<MyItem>> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n+     * PagePublisher<MyItem> publisher = mappedTable.query(QueryEnhancedRequest.builder()\n      *                                                                              .queryConditional(queryConditional)\n      *                                                                              .build());\n+     * publisher.subscribe(item -> System.out.println(item));\n      * }\n      * </pre>\n      *\n+     * @see DynamoDbAsyncClient#query\n      * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n      * to handle the results.\n-     * @return a publisher {@link SdkPublisher} with paginated results (see {@link Page}).\n+     * @return a publisher {@link PagePublisher} with paginated results (see {@link Page}).\n      */\n-    default SdkPublisher<Page<T>> query(QueryEnhancedRequest request) {\n+    default PagePublisher<T> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Executes a query against the primary index of the table using a {@link QueryConditional} expression to retrieve a list of\n      * items matching the given conditions.\n      * <p>\n-     * The result is accessed through iterable pages (see {@link Page}) in an interactive way; each time a\n-     * result page is retrieved, a query call is made to DynamoDb to get those entries. If no matches are found,\n-     * the resulting iterator will contain an empty page. Results are sorted by sort key value in\n-     * ascending order by default; this behavior can be overridden in the {@link QueryEnhancedRequest}.\n-     * <p>\n-     * The additional configuration parameters that the enhanced client supports are defined\n-     * in the {@link QueryEnhancedRequest}.\n-     * <p>\n-     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n-     * further details and constraints.\n-     * <p>\n      * <b>Note:</b> This is a convenience method that creates an instance of the request builder avoiding the need to create one\n      * manually via {@link QueryEnhancedRequest#builder()}.\n      * <p>\n      * Example:\n      * <pre>\n      * {@code\n      *\n-     * SdkPublisher<Page<MyItem>> publisher =\n+     * PagePublisher<MyItem> publisher =\n      *     mappedTable.query(r -> r.queryConditional(QueryConditional.keyEqualTo(k -> k.partitionValue(\"id-value\"))));\n      * }\n      * </pre>\n      *\n+     * @see #query(QueryEnhancedRequest)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODc4MA=="}, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTM5MDExOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMDowM1rOF4PpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMDowM1rOF4PpsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMTAwOA==", "bodyText": "Bad copy/paste, should be 2) Iterating through items", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1720#discussion_r394521008", "createdAt": "2020-03-18T17:30:03Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -499,72 +493,83 @@ default void putItem(T item) {\n     /**\n      * Scans the table and retrieves all items.\n      * <p>\n-     * The result is accessed through iterable pages (see {@link Page}) in an interactive way; each time a\n-     * result page is retrieved, a scan call is made to DynamoDb to get those entries. If no matches are found,\n+     * The result can be accessed either through iterable {@link Page}s or items across all pages directly. Each time a\n+     * result page is retrieved, a query call is made to DynamoDb to get those entries. If no matches are found,\n      * the resulting iterator will contain an empty page.\n      * <p>\n      * The additional configuration parameters that the enhanced client supports are defined\n      * in the {@link ScanEnhancedRequest}.\n      * <p>\n      * Example:\n+     * <p>\n+     * 1) Iterating through pages\n      * <pre>\n      * {@code\n      *\n-     * Iterator<Page<MyItem>> results = mappedTable.scan(ScanEnhancedRequest.builder().consistentRead(true).build());\n+     * PageIterable<MyItem> results = mappedTable.scan(ScanEnhancedRequest.builder().consistentRead(true).build());\n+     * results.stream().forEach(p -> p.items().forEach(item -> System.out.println(item)))\n      * }\n      * </pre>\n      *\n+     * <p>\n+     * 1) Iterating through pages\n+     * <pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766224b628bf10fab445b3b6695a0ebe7120a4e1"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4272, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}