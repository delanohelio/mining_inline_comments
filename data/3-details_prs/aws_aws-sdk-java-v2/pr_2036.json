{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODA4Mzg3", "number": 2036, "title": "Add support for generating waiter acceptors.", "bodyText": "This required the following changes:\n\nAdded a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\nAdded the code generator logic for specifying the acceptors.\nAdded a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\nAdded a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\nAdded tests for the two most complex waiter classes: AutoScaling and ECS\nAdded support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n\nThere's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\nWaiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters.", "createdAt": "2020-09-14T18:39:39Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036", "merged": true, "mergeCommit": {"oid": "e371de4e88671c3d2d52b7a9bbe2165a1386c041"}, "closed": true, "closedAt": "2020-09-15T23:17:42Z", "author": {"login": "millems"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH93c-gH2gAyNDg2ODA4Mzg3OjliOWE1OWE2MWVhZTVhMWEwMjEyMGJjNWMxYzJkODQwZDM4YzNlY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJQBuRgFqTQ4OTE2NDc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b9a59a61eae5a1a02120bc5c1c2d840d38c3ecc", "author": {"user": {"login": "zoewangg", "name": "Zoe Wang"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/9b9a59a61eae5a1a02120bc5c1c2d840d38c3ecc", "committedDate": "2020-09-11T23:19:29Z", "message": "Add waiter generator task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjIxMjcz", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#pullrequestreview-488221273", "createdAt": "2020-09-14T23:25:37Z", "commit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoyNTozN1rOHRq_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NToyNVrOHRrifA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MjI0OQ==", "bodyText": "Can this be move out of the switch? Looks like we always add except for status which doesn't use the result that's being built", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488292249", "createdAt": "2020-09-14T23:25:37Z", "author": {"login": "dagnir"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/waiters/BaseWaiterClassSpec.java", "diffHunk": "@@ -294,4 +328,143 @@ private OperationModel operationModel(WaiterDefinition waiterDefinition) {\n     private String getWaiterMethodName(String waiterMethodName) {\n         return \"waitUntil\" + waiterMethodName;\n     }\n+\n+    private TypeName waiterAcceptorTypeName(WaiterDefinition waiterDefinition) {\n+        WildcardTypeName wildcardTypeName = WildcardTypeName.supertypeOf(fullyQualifiedResponseType(waiterDefinition));\n+\n+        return ParameterizedTypeName.get(ClassName.get(List.class),\n+                                         ParameterizedTypeName.get(ClassName.get(WaiterAcceptor.class), wildcardTypeName));\n+    }\n+\n+    private TypeName fullyQualifiedResponseType(WaiterDefinition waiterDefinition) {\n+        String modelPackage = model.getMetadata().getFullModelPackageName();\n+        String operationResponseType = model.getOperation(waiterDefinition.getOperation()).getReturnType().getReturnType();\n+        return ClassName.get(modelPackage, operationResponseType);\n+    }\n+\n+    private CodeBlock acceptor(Acceptor acceptor) {\n+        CodeBlock.Builder result = CodeBlock.builder();\n+\n+        switch (acceptor.getState()) {\n+            case \"success\":\n+                result.add(\"$T.success\", WaiterAcceptor.class);\n+                break;\n+            case \"failure\":\n+                result.add(\"$T.error\", WaiterAcceptor.class);\n+                break;\n+            case \"retry\":\n+                result.add(\"$T.retry\", WaiterAcceptor.class);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor state: \" + acceptor.getState());\n+        }\n+\n+        switch (acceptor.getMatcher()) {\n+            case \"path\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAll\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAllAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAny\":\n+                result.add(\"OnResponseAcceptor(\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5Mjc0Mw==", "bodyText": "minor: use addStatement instead of adding ; manually", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488292743", "createdAt": "2020-09-14T23:27:11Z", "author": {"login": "dagnir"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/waiters/BaseWaiterClassSpec.java", "diffHunk": "@@ -294,4 +328,143 @@ private OperationModel operationModel(WaiterDefinition waiterDefinition) {\n     private String getWaiterMethodName(String waiterMethodName) {\n         return \"waitUntil\" + waiterMethodName;\n     }\n+\n+    private TypeName waiterAcceptorTypeName(WaiterDefinition waiterDefinition) {\n+        WildcardTypeName wildcardTypeName = WildcardTypeName.supertypeOf(fullyQualifiedResponseType(waiterDefinition));\n+\n+        return ParameterizedTypeName.get(ClassName.get(List.class),\n+                                         ParameterizedTypeName.get(ClassName.get(WaiterAcceptor.class), wildcardTypeName));\n+    }\n+\n+    private TypeName fullyQualifiedResponseType(WaiterDefinition waiterDefinition) {\n+        String modelPackage = model.getMetadata().getFullModelPackageName();\n+        String operationResponseType = model.getOperation(waiterDefinition.getOperation()).getReturnType().getReturnType();\n+        return ClassName.get(modelPackage, operationResponseType);\n+    }\n+\n+    private CodeBlock acceptor(Acceptor acceptor) {\n+        CodeBlock.Builder result = CodeBlock.builder();\n+\n+        switch (acceptor.getState()) {\n+            case \"success\":\n+                result.add(\"$T.success\", WaiterAcceptor.class);\n+                break;\n+            case \"failure\":\n+                result.add(\"$T.error\", WaiterAcceptor.class);\n+                break;\n+            case \"retry\":\n+                result.add(\"$T.retry\", WaiterAcceptor.class);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor state: \" + acceptor.getState());\n+        }\n+\n+        switch (acceptor.getMatcher()) {\n+            case \"path\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAll\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAllAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAny\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAnyAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"status\":\n+                // Note: Ignores the result we've built so far because this uses a special acceptor implementation.\n+                int expected = Integer.parseInt(acceptor.getExpected().asText());\n+                return CodeBlock.of(\"new $T($L, $T.$L)\", WaitersRuntime.ResponseStatusAcceptor.class, expected,\n+                                    WaiterState.class, waiterState(acceptor));\n+            case \"error\":\n+                result.add(\"OnExceptionAcceptor(\")\n+                      .add(errorAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor matcher: \" + acceptor.getMatcher());\n+        }\n+\n+        return result.build();\n+    }\n+\n+    private String waiterState(Acceptor acceptor) {\n+        switch (acceptor.getState()) {\n+            case \"success\":\n+                return WaiterState.SUCCESS.name();\n+            case \"failure\":\n+                return WaiterState.FAILURE.name();\n+            case \"retry\":\n+                return WaiterState.RETRY.name();\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor state: \" + acceptor.getState());\n+        }\n+    }\n+\n+    private CodeBlock pathAcceptorBody(Acceptor acceptor) {\n+        String expected = acceptor.getExpected().asText();\n+        String expectedType = acceptor.getExpected() instanceof JrsString ? \"$S\" : \"$L\";\n+        return CodeBlock.builder()\n+                        .add(\"response -> {\")\n+                        .add(\"$1T input = new $1T(response);\", WaitersRuntime.Value.class)\n+                        .add(\"return $T.equals(\", Objects.class)\n+                        .add(JmesPathInterpreter.interpret(acceptor.getArgument(), \"input\"))\n+                        .add(\".value(), \" + expectedType + \");\", expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MzY3Ng==", "bodyText": "minor: extract to helper method?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488293676", "createdAt": "2020-09-14T23:30:07Z", "author": {"login": "dagnir"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/waiters/BaseWaiterClassSpec.java", "diffHunk": "@@ -294,4 +328,143 @@ private OperationModel operationModel(WaiterDefinition waiterDefinition) {\n     private String getWaiterMethodName(String waiterMethodName) {\n         return \"waitUntil\" + waiterMethodName;\n     }\n+\n+    private TypeName waiterAcceptorTypeName(WaiterDefinition waiterDefinition) {\n+        WildcardTypeName wildcardTypeName = WildcardTypeName.supertypeOf(fullyQualifiedResponseType(waiterDefinition));\n+\n+        return ParameterizedTypeName.get(ClassName.get(List.class),\n+                                         ParameterizedTypeName.get(ClassName.get(WaiterAcceptor.class), wildcardTypeName));\n+    }\n+\n+    private TypeName fullyQualifiedResponseType(WaiterDefinition waiterDefinition) {\n+        String modelPackage = model.getMetadata().getFullModelPackageName();\n+        String operationResponseType = model.getOperation(waiterDefinition.getOperation()).getReturnType().getReturnType();\n+        return ClassName.get(modelPackage, operationResponseType);\n+    }\n+\n+    private CodeBlock acceptor(Acceptor acceptor) {\n+        CodeBlock.Builder result = CodeBlock.builder();\n+\n+        switch (acceptor.getState()) {\n+            case \"success\":\n+                result.add(\"$T.success\", WaiterAcceptor.class);\n+                break;\n+            case \"failure\":\n+                result.add(\"$T.error\", WaiterAcceptor.class);\n+                break;\n+            case \"retry\":\n+                result.add(\"$T.retry\", WaiterAcceptor.class);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor state: \" + acceptor.getState());\n+        }\n+\n+        switch (acceptor.getMatcher()) {\n+            case \"path\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAll\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAllAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"pathAny\":\n+                result.add(\"OnResponseAcceptor(\")\n+                      .add(pathAnyAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            case \"status\":\n+                // Note: Ignores the result we've built so far because this uses a special acceptor implementation.\n+                int expected = Integer.parseInt(acceptor.getExpected().asText());\n+                return CodeBlock.of(\"new $T($L, $T.$L)\", WaitersRuntime.ResponseStatusAcceptor.class, expected,\n+                                    WaiterState.class, waiterState(acceptor));\n+            case \"error\":\n+                result.add(\"OnExceptionAcceptor(\")\n+                      .add(errorAcceptorBody(acceptor))\n+                      .add(\")\");\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor matcher: \" + acceptor.getMatcher());\n+        }\n+\n+        return result.build();\n+    }\n+\n+    private String waiterState(Acceptor acceptor) {\n+        switch (acceptor.getState()) {\n+            case \"success\":\n+                return WaiterState.SUCCESS.name();\n+            case \"failure\":\n+                return WaiterState.FAILURE.name();\n+            case \"retry\":\n+                return WaiterState.RETRY.name();\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported acceptor state: \" + acceptor.getState());\n+        }\n+    }\n+\n+    private CodeBlock pathAcceptorBody(Acceptor acceptor) {\n+        String expected = acceptor.getExpected().asText();\n+        String expectedType = acceptor.getExpected() instanceof JrsString ? \"$S\" : \"$L\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5OTg4NA==", "bodyText": "Can we add more detail in this javadoc? I was confused at first thinking the statements are jut basic Java expressions, but looks like the output is an intermediate representation that is further interpreted by the Waiters Runtime.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488299884", "createdAt": "2020-09-14T23:50:58Z", "author": {"login": "dagnir"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/waiters/JmesPathInterpreter.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.codegen.poet.waiters;\n+\n+import com.fasterxml.jackson.jr.stree.JrsBoolean;\n+import com.fasterxml.jackson.jr.stree.JrsValue;\n+import com.squareup.javapoet.CodeBlock;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import software.amazon.awssdk.codegen.jmespath.component.AndExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.BracketSpecifier;\n+import software.amazon.awssdk.codegen.jmespath.component.BracketSpecifierWithContents;\n+import software.amazon.awssdk.codegen.jmespath.component.BracketSpecifierWithQuestionMark;\n+import software.amazon.awssdk.codegen.jmespath.component.BracketSpecifierWithoutContents;\n+import software.amazon.awssdk.codegen.jmespath.component.ComparatorExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.CurrentNode;\n+import software.amazon.awssdk.codegen.jmespath.component.Expression;\n+import software.amazon.awssdk.codegen.jmespath.component.ExpressionType;\n+import software.amazon.awssdk.codegen.jmespath.component.FunctionArg;\n+import software.amazon.awssdk.codegen.jmespath.component.FunctionExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.IndexExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.Literal;\n+import software.amazon.awssdk.codegen.jmespath.component.MultiSelectHash;\n+import software.amazon.awssdk.codegen.jmespath.component.MultiSelectList;\n+import software.amazon.awssdk.codegen.jmespath.component.NotExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.OrExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.ParenExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.PipeExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.SliceExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.SubExpression;\n+import software.amazon.awssdk.codegen.jmespath.component.SubExpressionRight;\n+import software.amazon.awssdk.codegen.jmespath.component.WildcardExpression;\n+import software.amazon.awssdk.codegen.jmespath.parser.JmesPathParser;\n+import software.amazon.awssdk.codegen.jmespath.parser.JmesPathVisitor;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.waiters.WaitersRuntime;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A code interpreter for JMESPath expressions.\n+ *\n+ * This can convert a JMESPath expression into a statement that executes against an {@link SdkPojo}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMDM2NQ==", "bodyText": "Not a block but these are quite hard to read in line. Would be nice to move them to text files that are easier to read, especially if we end up writing more test cases (like when we support more JMESPath features).", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488300365", "createdAt": "2020-09-14T23:52:39Z", "author": {"login": "dagnir"}, "path": "codegen/src/test/java/software/amazon/awssdk/codegen/poet/waiters/JmesPathInterpreterTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.codegen.poet.waiters;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+public class JmesPathInterpreterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTE4MA==", "bodyText": "Can we add tests for the runtime?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#discussion_r488301180", "createdAt": "2020-09-14T23:55:25Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/waiters/WaitersRuntime.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.waiters;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.SdkResponse;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.exception.SdkServiceException;\n+import software.amazon.awssdk.utils.ToString;\n+\n+/**\n+ * Contains classes used at runtime by the code generator classes for waiter acceptors generated from JMESPath expressions.\n+ */\n+@SdkProtectedApi\n+public final class WaitersRuntime {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjMyNDc2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#pullrequestreview-488232476", "createdAt": "2020-09-14T23:58:48Z", "commit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTE0Mjg2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#pullrequestreview-488914286", "createdAt": "2020-09-15T17:34:24Z", "commit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0041c0b054c35ed23eb8bbf16e58097325e809f9", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/0041c0b054c35ed23eb8bbf16e58097325e809f9", "committedDate": "2020-09-14T18:38:58Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}, "afterCommit": {"oid": "16b7fb7ffb72d99afab6785d15dc97a736432f00", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/16b7fb7ffb72d99afab6785d15dc97a736432f00", "committedDate": "2020-09-15T18:34:16Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16b7fb7ffb72d99afab6785d15dc97a736432f00", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/16b7fb7ffb72d99afab6785d15dc97a736432f00", "committedDate": "2020-09-15T18:34:16Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}, "afterCommit": {"oid": "89a19520415e84da948731258da59e4b52b935a4", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/89a19520415e84da948731258da59e4b52b935a4", "committedDate": "2020-09-15T21:57:50Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c607cb6925dbb51f1ff44b790cba24eb11c9d52", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/5c607cb6925dbb51f1ff44b790cba24eb11c9d52", "committedDate": "2020-09-15T22:50:01Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89a19520415e84da948731258da59e4b52b935a4", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/89a19520415e84da948731258da59e4b52b935a4", "committedDate": "2020-09-15T21:57:50Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}, "afterCommit": {"oid": "5c607cb6925dbb51f1ff44b790cba24eb11c9d52", "author": {"user": {"login": "millems", "name": "Matthew Miller"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/5c607cb6925dbb51f1ff44b790cba24eb11c9d52", "committedDate": "2020-09-15T22:50:01Z", "message": "Add support for generating waiter acceptors.\n\nThis required the following changes:\n1. Added a JMES Path interpreter based on the JMES Path parser from a previous commit. This interpreter is in the code generator and creates the Java instructions for executing the acceptor logic.\n2. Added the code generator logic for specifying the acceptors.\n3. Added a Waiters runtime that is currently shared between all service clients, used by the acceptors of all services.\n4. Added a \"MemberName\" field to the SDK field metadata, so that it can be referenced by the waiter code (waiters refer to the member names from the C2J).\n5. Added tests for the two most complex waiter classes: AutoScaling and ECS\n6. Added support for acceptors matching supertypes of the response type.\n\nWaiters should mostly be working now, but there are a few remaining tasks:\n1. There's a WaitersRuntime component in sdk-core that should be copied to each of the service to remove them as a protected API.\n2. Waiters currently only support the JMESPath syntax currently used by services. We should add support for some of the other 'easier' JMESPath syntax so that we're future-compatible with more waiters."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTY0Nzgy", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2036#pullrequestreview-489164782", "createdAt": "2020-09-15T23:02:55Z", "commit": {"oid": "5c607cb6925dbb51f1ff44b790cba24eb11c9d52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2460, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}