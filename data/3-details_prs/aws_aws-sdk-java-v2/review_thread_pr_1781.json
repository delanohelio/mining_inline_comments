{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDQ1Njg4", "number": 1781, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMDowNVrODylPWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozOTowOFrODy_P_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY1NTI5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DefaultAttributeConverterProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMDowNVrOGGtkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMDowNVrOGGtkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MTE1Nw==", "bodyText": "Nit: Any reason we broke the alphabetical ordering here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409691157", "createdAt": "2020-04-16T16:30:05Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DefaultAttributeConverterProvider.java", "diffHunk": "@@ -211,8 +211,8 @@ private static Builder getDefaultBuilder() {\n                                                 .addConverter(DoubleAttributeConverter.create())\n                                                 .addConverter(DurationAttributeConverter.create())\n                                                 .addConverter(FloatAttributeConverter.create())\n-                                                .addConverter(InstantAsIntegerAttributeConverter.create())\n                                                 .addConverter(IntegerAttributeConverter.create())\n+                                                .addConverter(InstantAsStringAttributeConverter.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY2NzE3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMzoxM1rOGGtryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMzoxM1rOGGtryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MzEzMA==", "bodyText": "Does this not break the data-loss rule?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409693130", "createdAt": "2020-04-16T16:33:13Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "diffHunk": "@@ -53,9 +52,9 @@\n  * </ul>\n  *\n  * <p>\n- * This converter can read any values written by itself, {@link InstantAsIntegerAttributeConverter},\n- * {@link OffsetDateTimeAsStringAttributeConverter} or {@link ZonedDateTimeAsStringAttributeConverter}. Offset and zoned times\n- * will be automatically converted to the equivalent {@code Instant} based on the time zone information in the record (e.g.\n+ * This converter can read any values written by itself, {@link OffsetDateTimeAsStringAttributeConverter}\n+ * or {@link ZonedDateTimeAsStringAttributeConverter}. Offset and zoned times will be automatically converted to\n+ * the equivalent {@code Instant} based on the time zone information in the record (e.g.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY3NDY3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozNToxNFrOGGtwtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozNToxNFrOGGtwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5NDM4OA==", "bodyText": "LocalDate should not store timezone information. Writing a valid ISO8601 output here risks it being read as an Instant and breaking the data-loss rule. I would propose having it write \"YYYY-MM-DD\" and allowing LocalDateTime to parse that format.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409694388", "createdAt": "2020-04-16T16:35:14Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateAttributeConverter.java", "diffHunk": "@@ -24,16 +24,17 @@\n import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter;\n import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.converter.ConverterUtils;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n \n /**\n  * A converter between {@link LocalDate} and {@link AttributeValue}.\n  *\n  * <p>\n- * This stores and reads values in DynamoDB as a number, so that they can be sorted numerically as part of a sort key.\n+ * This stores and reads values in DynamoDB as a String.\n  *\n  * <p>\n- * LocalDateTimes are stored in the format \"[-]YYYYMMDD000000\", where:\n+ * LocalDateTimes are stored in the format \"[-]YYYY-MM-DDT00:00:00Z\", where:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY4ODkxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozODo0NlrOGGt5zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozODo0NlrOGGt5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5NjcxNg==", "bodyText": "We should not store timezone information for LocalDateTime. The actual string format being proposed omits it, but this description implies it will be there (the 'Z')", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409696716", "createdAt": "2020-04-16T16:38:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "diffHunk": "@@ -35,10 +35,13 @@\n  * A converter between {@link LocalDateTime} and {@link AttributeValue}.\n  *\n  * <p>\n- * This stores and reads values in DynamoDB as a number, so that they can be sorted numerically as part of a sort key.\n+ * This stores and reads values in DynamoDB as a string.\n  *\n  * <p>\n- * LocalDateTimes are stored in the format \"[-]YYYYMMDDHHIISS[.NNNNNNNNN]\", where:\n+ * Values are stored in ISO-8601 format, with nanosecond precision and a time zone of UTC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY5NzA1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/MonthDayAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0MDo1MFrOGGt_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0MDo1MFrOGGt_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5ODA3OQ==", "bodyText": "MonthDay?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409698079", "createdAt": "2020-04-16T16:40:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/MonthDayAttributeConverter.java", "diffHunk": "@@ -28,16 +28,15 @@\n import software.amazon.awssdk.enhanced.dynamodb.internal.converter.ConverterUtils;\n import software.amazon.awssdk.enhanced.dynamodb.internal.converter.TypeConvertingVisitor;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n-import software.amazon.awssdk.utils.Validate;\n \n /**\n  * A converter between {@link MonthDay} and {@link AttributeValue}.\n  *\n  * <p>\n- * This stores and reads values in DynamoDB as a number, so that they can be sorted numerically as part of a sort key.\n+ * This stores and reads values in DynamoDB as a String.\n  *\n  * <p>\n- * LocalTimes are stored in the format \"MMDD\", where:\n+ * LocalTimes are stored in the format \"MM-DD\", where:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzcwMjQ5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/OffsetDateTimeAsStringAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0MjoxMFrOGGuChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0MjoxMFrOGGuChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5ODk0OA==", "bodyText": "What about if the ZonedDateTime uses a named Zone, does this not break the data-loss principle?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409698948", "createdAt": "2020-04-16T16:42:10Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/OffsetDateTimeAsStringAttributeConverter.java", "diffHunk": "@@ -58,9 +58,9 @@\n  * </ul>\n  *\n  * <p>\n- * This converter can read any values written by itself, {@link InstantAsIntegerAttributeConverter},\n- * {@link InstantAsStringAttributeConverter}, or {@link ZonedDateTimeAsStringAttributeConverter}. Values written by\n- * {@code Instant} converters are treated as if they are in the UTC time zone (and an offset of 0 seconds will be returned).\n+ * This converter can read any values written by itself, {@link InstantAsStringAttributeConverter},\n+ * or {@link ZonedDateTimeAsStringAttributeConverter}. Values written by {@code Instant} converters\n+ * are treated as if they are in the UTC time zone (and an offset of 0 seconds will be returned).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b891359df3186f93baeb27722d92f16456502fb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA0MDIwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/GlobalDateTimeAttributeConvertersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0NDowOFrOGG6_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0OTozM1rOGG7GDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMTE5OA==", "bodyText": "Please can we split these into individual tests.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409911198", "createdAt": "2020-04-16T23:44:08Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/GlobalDateTimeAttributeConvertersTest.java", "diffHunk": "@@ -84,8 +48,18 @@ public void instantAsStringAttributeConverterBehaves() {\n         assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"X\")));\n         assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"+1000000001-01-01T00:00:00Z\")));\n \n-        // InstantAsIntegerAttributeConverter format\n-        assertThat(transformTo(converter, EnhancedAttributeValue.fromNumber(\"0\"))).isEqualTo(Instant.EPOCH);\n+        // Not accepted types tests\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00.000000001\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"00:12:00.000000001\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00[Europe/Paris]\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"05-21\").toAttributeValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMjg0Ng==", "bodyText": "Please apply this comment everywhere as we discussed offline.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409912846", "createdAt": "2020-04-16T23:49:33Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/GlobalDateTimeAttributeConvertersTest.java", "diffHunk": "@@ -84,8 +48,18 @@ public void instantAsStringAttributeConverterBehaves() {\n         assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"X\")));\n         assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"+1000000001-01-01T00:00:00Z\")));\n \n-        // InstantAsIntegerAttributeConverter format\n-        assertThat(transformTo(converter, EnhancedAttributeValue.fromNumber(\"0\"))).isEqualTo(Instant.EPOCH);\n+        // Not accepted types tests\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00.000000001\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"00:12:00.000000001\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00[Europe/Paris]\")\n+                                                                       .toAttributeValue()));\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"05-21\").toAttributeValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMTE5OA=="}, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA3NDE1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowMToxN1rOGG7UEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowMToxN1rOGG7UEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNjQzMw==", "bodyText": "Can we have little javadocs on these so it's easier for me to assert they are doing what they are supposed to be doing.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409916433", "createdAt": "2020-04-17T00:01:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA3NjIzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowMjozNFrOGG7VVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowMjozNFrOGG7VVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNjc1OA==", "bodyText": "This requires three iterations through the string, can we do it in a single pass?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409916758", "createdAt": "2020-04-17T00:02:34Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4MDA1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNDozMFrOGG7Xgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNDozMFrOGG7Xgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzMxNQ==", "bodyText": "This code is difficult to read, can we split it up into more logical and readable statements.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409917315", "createdAt": "2020-04-17T00:04:30Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4MTYwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNToyMVrOGG7Ycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNToyMVrOGG7Ycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzU1NQ==", "bodyText": "Can we have a javadoc so I can assert it's doing what it's supposed to do", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409917555", "createdAt": "2020-04-17T00:05:21Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        return chunkedDateTime;\n     }\n \n-    public static String[] chunkWithRightOverflow(String valueToChunk, int... splitSizesFromLeft) {\n-        String[] result = new String[splitSizesFromLeft.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizesFromLeft);\n-\n-        result[splitSizesFromLeft.length] = valueToChunk.substring(splitStartInclusive);\n-\n-        return result;\n+    public static String[] chunkTime(String valueToChunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4MjYzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNTo1N1rOGG7ZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNTo1N1rOGG7ZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzcwNQ==", "bodyText": "This code is difficult to read, can we split it up into more logical and readable statements.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409917705", "createdAt": "2020-04-17T00:05:57Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        return chunkedDateTime;\n     }\n \n-    public static String[] chunkWithRightOverflow(String valueToChunk, int... splitSizesFromLeft) {\n-        String[] result = new String[splitSizesFromLeft.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizesFromLeft);\n-\n-        result[splitSizesFromLeft.length] = valueToChunk.substring(splitStartInclusive);\n-\n-        return result;\n+    public static String[] chunkTime(String valueToChunk) {\n+        String[] chunkedTime = valueToChunk.split(\":\");\n+        Validate.isTrue((valueToChunk.length() - valueToChunk.replace(\":\", \"\").length()) == 2\n+                         && chunkedTime.length == 3,\n+                        \"Invalid time format, expected HH:MM:SS.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4MzczOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNjozMVrOGG7Zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNjozMVrOGG7Zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzg2Mw==", "bodyText": "Can we have a javadoc so I can assert this is doing what it's supposed to do.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409917863", "createdAt": "2020-04-17T00:06:31Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        return chunkedDateTime;\n     }\n \n-    public static String[] chunkWithRightOverflow(String valueToChunk, int... splitSizesFromLeft) {\n-        String[] result = new String[splitSizesFromLeft.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizesFromLeft);\n-\n-        result[splitSizesFromLeft.length] = valueToChunk.substring(splitStartInclusive);\n-\n-        return result;\n+    public static String[] chunkTime(String valueToChunk) {\n+        String[] chunkedTime = valueToChunk.split(\":\");\n+        Validate.isTrue((valueToChunk.length() - valueToChunk.replace(\":\", \"\").length()) == 2\n+                         && chunkedTime.length == 3,\n+                        \"Invalid time format, expected HH:MM:SS.\");\n+        return chunkedTime;\n     }\n \n-    public static String[] chunkWithLeftOverflow(String valueToChunk, int... splitSizesFromRight) {\n-        try {\n-            String[] result = new String[splitSizesFromRight.length + 1];\n-            int splitEndExclusive = valueToChunk.length();\n-\n-            for (int i = splitSizesFromRight.length - 1; i >= 0; i--) {\n-                int splitStartInclusive = splitEndExclusive - splitSizesFromRight[i];\n-                result[i + 1] = valueToChunk.substring(splitStartInclusive, splitEndExclusive);\n-                splitEndExclusive = splitStartInclusive;\n-            }\n-\n-            result[0] = valueToChunk.substring(0, splitEndExclusive);\n-\n-            return result;\n-        } catch (StringIndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\"Invalid format for value.\", e);\n+    public static String[] chunkDate(String valueToChunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4NDY3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNjo1NlrOGG7aKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNjo1NlrOGG7aKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzk5Mg==", "bodyText": "This code is difficult to read, can we split it up into more logical and readable statements.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409917992", "createdAt": "2020-04-17T00:06:56Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        return chunkedDateTime;\n     }\n \n-    public static String[] chunkWithRightOverflow(String valueToChunk, int... splitSizesFromLeft) {\n-        String[] result = new String[splitSizesFromLeft.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizesFromLeft);\n-\n-        result[splitSizesFromLeft.length] = valueToChunk.substring(splitStartInclusive);\n-\n-        return result;\n+    public static String[] chunkTime(String valueToChunk) {\n+        String[] chunkedTime = valueToChunk.split(\":\");\n+        Validate.isTrue((valueToChunk.length() - valueToChunk.replace(\":\", \"\").length()) == 2\n+                         && chunkedTime.length == 3,\n+                        \"Invalid time format, expected HH:MM:SS.\");\n+        return chunkedTime;\n     }\n \n-    public static String[] chunkWithLeftOverflow(String valueToChunk, int... splitSizesFromRight) {\n-        try {\n-            String[] result = new String[splitSizesFromRight.length + 1];\n-            int splitEndExclusive = valueToChunk.length();\n-\n-            for (int i = splitSizesFromRight.length - 1; i >= 0; i--) {\n-                int splitStartInclusive = splitEndExclusive - splitSizesFromRight[i];\n-                result[i + 1] = valueToChunk.substring(splitStartInclusive, splitEndExclusive);\n-                splitEndExclusive = splitStartInclusive;\n-            }\n-\n-            result[0] = valueToChunk.substring(0, splitEndExclusive);\n-\n-            return result;\n-        } catch (StringIndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\"Invalid format for value.\", e);\n+    public static String[] chunkDate(String valueToChunk) {\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n         }\n+        String[] chunkedDate = valueToChunk.split(\"-\");\n+        chunkedDate[0] = negativeSig + chunkedDate[0];\n+        Validate.isTrue(valueToChunk.length() - valueToChunk.replace(\"-\", \"\").length() == 2\n+                         && chunkedDate.length == 3,\n+                        \"Invalid date format, expected [-]YYYY-MM-DD.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA4NTIzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNzoxM1rOGG7afA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNzoxM1rOGG7afA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODA3Ng==", "bodyText": "Can we have a javadoc so I can assert this is doing what it's supposed to do.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409918076", "createdAt": "2020-04-17T00:07:13Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +128,52 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(valueToChunk.contains(\"T\") && !valueToChunk.contains(\"+\") && !valueToChunk.contains(\"Z\"),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");\n+        chunkedDateTime[0] =  negativeSig + chunkedDateTime[0];\n \n-        return result;\n+        Validate.isTrue(3 * valueToChunk.length() - valueToChunk.replace(\"T\", \"\").length()\n+                        - valueToChunk.replace(\":\", \"\").length() - valueToChunk.replace(\"-\", \"\").length() == 5\n+                        && chunkedDateTime.length == 6,\n+                        \"Invalid DateTime (without nanoseconds) format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        return chunkedDateTime;\n     }\n \n-    public static String[] chunkWithRightOverflow(String valueToChunk, int... splitSizesFromLeft) {\n-        String[] result = new String[splitSizesFromLeft.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizesFromLeft);\n-\n-        result[splitSizesFromLeft.length] = valueToChunk.substring(splitStartInclusive);\n-\n-        return result;\n+    public static String[] chunkTime(String valueToChunk) {\n+        String[] chunkedTime = valueToChunk.split(\":\");\n+        Validate.isTrue((valueToChunk.length() - valueToChunk.replace(\":\", \"\").length()) == 2\n+                         && chunkedTime.length == 3,\n+                        \"Invalid time format, expected HH:MM:SS.\");\n+        return chunkedTime;\n     }\n \n-    public static String[] chunkWithLeftOverflow(String valueToChunk, int... splitSizesFromRight) {\n-        try {\n-            String[] result = new String[splitSizesFromRight.length + 1];\n-            int splitEndExclusive = valueToChunk.length();\n-\n-            for (int i = splitSizesFromRight.length - 1; i >= 0; i--) {\n-                int splitStartInclusive = splitEndExclusive - splitSizesFromRight[i];\n-                result[i + 1] = valueToChunk.substring(splitStartInclusive, splitEndExclusive);\n-                splitEndExclusive = splitStartInclusive;\n-            }\n-\n-            result[0] = valueToChunk.substring(0, splitEndExclusive);\n-\n-            return result;\n-        } catch (StringIndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\"Invalid format for value.\", e);\n+    public static String[] chunkDate(String valueToChunk) {\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n         }\n+        String[] chunkedDate = valueToChunk.split(\"-\");\n+        chunkedDate[0] = negativeSig + chunkedDate[0];\n+        Validate.isTrue(valueToChunk.length() - valueToChunk.replace(\"-\", \"\").length() == 2\n+                         && chunkedDate.length == 3,\n+                        \"Invalid date format, expected [-]YYYY-MM-DD.\");\n+        return chunkedDate;\n     }\n \n-    private static int chunkLeft(String valueToChunk, String[] result, int[] splitSizes) {\n-        try {\n-            int splitStartInclusive = 0;\n-\n-            for (int i = 0; i < splitSizes.length; i++) {\n-                int splitEndExclusive = splitStartInclusive + splitSizes[i];\n-                result[i] = valueToChunk.substring(splitStartInclusive, splitEndExclusive);\n-                splitStartInclusive = splitEndExclusive;\n-            }\n-            return splitStartInclusive;\n-        } catch (StringIndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\"Invalid format for value.\", e);\n-        }\n+    public static String[] chunkMonthDay(String valueToChunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA5MTEzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMDoxOVrOGG7d-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMDoxOVrOGG7d-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODk3MA==", "bodyText": "Checking 'ends with' would be faster, and also more accurate.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409918970", "createdAt": "2020-04-17T00:10:19Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "diffHunk": "@@ -90,6 +86,7 @@ public AttributeValue transformFrom(Instant input) {\n \n     @Override\n     public Instant transformTo(AttributeValue input) {\n+        Validate.isTrue(input.s().contains(\"Z\"), \"Invalid Instant format, should contain 'Z' in it.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA5MzEyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMToxN1rOGG7fHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMToxN1rOGG7fHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxOTI2MQ==", "bodyText": "Or OffsetDateTime/ZonedDateTime if offset is 0 (UTC), presumably?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409919261", "createdAt": "2020-04-17T00:11:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/InstantAsStringAttributeConverter.java", "diffHunk": "@@ -53,11 +53,7 @@\n  * </ul>\n  *\n  * <p>\n- * This converter can read any values written by itself, {@link InstantAsIntegerAttributeConverter},\n- * {@link OffsetDateTimeAsStringAttributeConverter} or {@link ZonedDateTimeAsStringAttributeConverter}. Offset and zoned times\n- * will be automatically converted to the equivalent {@code Instant} based on the time zone information in the record (e.g.\n- * {@code ItemAttributeValueMapper.fromString(\"1970-01-01T00:00:00+01:00\")} will be converted to\n- * {@code Instant.EPOCH.minus(1, ChronoUnit.HOURS)}).\n+ * This converter can only read any values written by itself.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTEwMDY2OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxNDo0OFrOGG7jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxNDo0OFrOGG7jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDM2Mw==", "bodyText": "We probably shouldn't mention 'ISO-8601' format since we're omitting the timezone.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409920363", "createdAt": "2020-04-17T00:14:48Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "diffHunk": "@@ -35,10 +35,13 @@\n  * A converter between {@link LocalDateTime} and {@link AttributeValue}.\n  *\n  * <p>\n- * This stores and reads values in DynamoDB as a number, so that they can be sorted numerically as part of a sort key.\n+ * This stores and reads values in DynamoDB as a string.\n  *\n  * <p>\n- * LocalDateTimes are stored in the format \"[-]YYYYMMDDHHIISS[.NNNNNNNNN]\", where:\n+ * Values are stored in ISO-8601 format, with nanosecond precision.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTEwMzkzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalTimeAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxNjoyM1rOGG7lVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDowOTowNlrOGG_Smg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDg1Mg==", "bodyText": "What's this?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409920852", "createdAt": "2020-04-17T00:16:23Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalTimeAttributeConverter.java", "diffHunk": "@@ -49,8 +49,9 @@\n  * <p>\n  * Examples:\n  * <ul>\n- *     <li>{@code LocalTime.of(5, 30, 0)} is stored as {@code ItemAttributeValueMapper.fromNumber(\"053000\")}</li>\n- *     <li>{@code LocalDateTime.of(5, 30, 0, 1)} is stored as {@code ItemAttributeValueMapper.fromNumber(\"053000.000000001\")}</li>\n+ *     <li>{@code LocalTime.of(5, 30, 0)} is stored as {@code ItemAttributeValueMapper.fromString(\"05:30:00\")}</li>\n+ *     <li>{@code LocalDateTime.of(5, 30, 0, 1)} is stored as </li>\n+ *     <li>{@code ItemAttributeValueMapper.fromString(\"05:30:00.000000001\")}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTU5NA==", "bodyText": "I was trying to let that line not exceed the length restriction. Fixed now", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r409981594", "createdAt": "2020-04-17T04:09:06Z", "author": {"login": "Quanzzzz"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalTimeAttributeConverter.java", "diffHunk": "@@ -49,8 +49,9 @@\n  * <p>\n  * Examples:\n  * <ul>\n- *     <li>{@code LocalTime.of(5, 30, 0)} is stored as {@code ItemAttributeValueMapper.fromNumber(\"053000\")}</li>\n- *     <li>{@code LocalDateTime.of(5, 30, 0, 1)} is stored as {@code ItemAttributeValueMapper.fromNumber(\"053000.000000001\")}</li>\n+ *     <li>{@code LocalTime.of(5, 30, 0)} is stored as {@code ItemAttributeValueMapper.fromString(\"05:30:00\")}</li>\n+ *     <li>{@code LocalDateTime.of(5, 30, 0, 1)} is stored as </li>\n+ *     <li>{@code ItemAttributeValueMapper.fromString(\"05:30:00.000000001\")}</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDg1Mg=="}, "originalCommit": {"oid": "19ff01fc8b80925357267958330b451b551a786b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzgzMDEzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/LocalTimeAttributeConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMTo0M1rOGHWQ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMTo0M1rOGHWQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODAxNQ==", "bodyText": "This doesn't need to be parameterized since you're not passing in the attribute converter thus it's strongly typed to the class under test. Either drop the parameter  or move this into a shared place where all the tests can use it and pass in the converter to make it fully generic.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r410358015", "createdAt": "2020-04-17T17:11:43Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/LocalTimeAttributeConverterTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package software.amazon.awssdk.enhanced.dynamodb.converters.attribute;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.assertFails;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformFrom;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformTo;\n+\n+import java.time.LocalTime;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.LocalTimeAttributeConverter;\n+\n+public class LocalTimeAttributeConverterTest {\n+\n+    private static AttributeConverter converter = LocalTimeAttributeConverter.create();\n+\n+    @Test\n+    public void LocalTimeAttributeConverterMinTest() {\n+        verifyTransform(LocalTime.MIN, \"00:00:00\");\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNormalTest() {\n+        verifyTransform(LocalTime.of(1, 2, 3, 4), \"01:02:03.000000004\");\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterMaxTest() {\n+        verifyTransform(LocalTime.MAX, \"23:59:59.999999999\");\n+    }\n+\n+\n+    @Test\n+    public void LocalTimeAttributeConverterInvalidFormatTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"-1\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterExceedHigherBoundTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"24:00:00\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterInvalidNanoSecondsTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"00:00:00.9999999999\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptLocalDateTimeTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00.000000001\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptInstantTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00.000000001Z\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptOffsetTimeTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptZonedTimeTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21T00:12:00+01:00[Europe/Paris]\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptLocalDateTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"1988-05-21\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    @Test\n+    public void LocalTimeAttributeConverterNotAcceptMonthDayTest() {\n+        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(\"05-21\")\n+                                                                       .toAttributeValue()));\n+    }\n+\n+    private <T> void verifyTransform(T objectToTransform, String attributeValueString) {\n+        assertThat(transformFrom(converter, objectToTransform))\n+            .isEqualTo(EnhancedAttributeValue.fromString(attributeValueString).toAttributeValue());\n+        assertThat(transformTo(converter, EnhancedAttributeValue.fromString(attributeValueString).toAttributeValue()))\n+            .isEqualTo(objectToTransform);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b9d10a4e38ff81c80e990b58cd40961b7727d4"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzgzMzg0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMzowMVrOGHWTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMzowMVrOGHWTZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODYyOQ==", "bodyText": "As discussed let's start with using parse and work from there. Let's do this for all the transformTo implementations", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r410358629", "createdAt": "2020-04-17T17:13:01Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/attribute/LocalDateTimeAttributeConverter.java", "diffHunk": "@@ -92,49 +95,59 @@ public static LocalDateTimeAttributeConverter create() {\n \n     @Override\n     public AttributeValueType attributeValueType() {\n-        return AttributeValueType.N;\n+        return AttributeValueType.S;\n     }\n \n     @Override\n     public AttributeValue transformFrom(LocalDateTime input) {\n         String value = \"\" +\n-                       input.getYear() +\n-                       padLeft2(input.getMonthValue()) +\n-                       padLeft2(input.getDayOfMonth()) +\n-                       padLeft2(input.getHour()) +\n-                       padLeft2(input.getMinute()) +\n+                       input.getYear() + \"-\" +\n+                       padLeft2(input.getMonthValue()) + \"-\" +\n+                       padLeft2(input.getDayOfMonth()) + \"T\" +\n+                       padLeft2(input.getHour()) + \":\" +\n+                       padLeft2(input.getMinute()) + \":\" +\n                        padLeft2(input.getSecond()) +\n                        (input.getNano() == 0 ? \"\" : \".\" + padLeft(9, input.getNano()));\n-        return AttributeValue.builder().n(value).build();\n+\n+        return AttributeValue.builder().s(value).build();\n     }\n \n     @Override\n     public LocalDateTime transformTo(AttributeValue input) {\n-        if (input.n() != null) {\n-            return EnhancedAttributeValue.fromNumber(input.n()).convert(VISITOR);\n+        if (input.s() != null) {\n+            return EnhancedAttributeValue.fromString(input.s()).convert(VISITOR);\n         }\n \n         return EnhancedAttributeValue.fromAttributeValue(input).convert(VISITOR);\n     }\n \n     private static final class Visitor extends TypeConvertingVisitor<LocalDateTime> {\n         private Visitor() {\n-            super(LocalDateTime.class, InstantAsIntegerAttributeConverter.class);\n+            super(LocalDateTime.class, InstantAsStringAttributeConverter.class);\n         }\n \n         @Override\n-        public LocalDateTime convertNumber(String value) {\n-            String[] splitOnDecimal = ConverterUtils.splitNumberOnDecimal(value);\n-            String[] chunkedDateTime = ConverterUtils.chunkWithLeftOverflow(splitOnDecimal[0], 2, 2, 2, 2, 2);\n+        public LocalDateTime convertString(String value) {\n+            // AttributeValue.S in LocalDateTime format\n+            if (value.contains(\"T\")) {\n+                String[] splitOnDecimal = ConverterUtils.splitNumberOnDecimal(value);\n+                String[] chunkedDateTime = ConverterUtils.chunkDateTime(splitOnDecimal[0]);\n+\n+                return LocalDateTime.of(Integer.parseInt(chunkedDateTime[0]),\n+                                        Integer.parseInt(chunkedDateTime[1]),\n+                                        Integer.parseInt(chunkedDateTime[2]),\n+                                        Integer.parseInt(chunkedDateTime[3]),\n+                                        Integer.parseInt(chunkedDateTime[4]),\n+                                        Integer.parseInt(chunkedDateTime[5]),\n+                                        Integer.parseInt(splitOnDecimal[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b9d10a4e38ff81c80e990b58cd40961b7727d4"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkxMDQxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjo1OVrOGHXFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjo1OVrOGHXFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTQ3OA==", "bodyText": "These uses of regular expressions in this function are very expensive.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r410371478", "createdAt": "2020-04-17T17:36:59Z", "author": {"login": "millems"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +129,67 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    /**\n+     * Chunk the String without nanoseconds into a String array, and validates the format of input string and output result.\n+     * The negative sign is stored in the first element with 'year', if applicable.\n+     * @param valueToChunk\n+     * @return String array storing chunked pieces of Date and Time\n+     */\n+    public static String[] chunkDateTime(String valueToChunk) {\n+        Validate.isTrue(Pattern.matches(\"(?im)^(?=.*?(T))(?!.*?([+Z])).*\", valueToChunk),\n+                        \"Invalid sign in this format, expected [-]YYYY-MM-DDTHH:MM:SS.\");\n+        String negativeSig = \"\";\n+        if (valueToChunk.substring(0, 1).equals(\"-\")) {\n+            negativeSig = \"-\";\n+            valueToChunk = valueToChunk.substring(1);\n+        }\n \n-        Validate.isTrue(splitStartInclusive == valueToChunk.length(), \"Value size does not match expected chunking scheme.\");\n+        String[] chunkedDateTime = valueToChunk.split(\"[-T:]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b9d10a4e38ff81c80e990b58cd40961b7727d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkxNjc4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozOTowOFrOGHXJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozOTowOFrOGHXJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MjU4Mw==", "bodyText": "Can we not write our own date time parsing? Can we not use DateTimeFormatter for this?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1781#discussion_r410372583", "createdAt": "2020-04-17T17:39:08Z", "author": {"login": "millems"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/converter/ConverterUtils.java", "diffHunk": "@@ -128,55 +129,67 @@ private static int findTrimExclusiveEnd(String string, char characterToTrim, int\n         }\n     }\n \n-    public static String[] chunk(String valueToChunk, int... splitSizes) {\n-        String[] result = new String[splitSizes.length + 1];\n-        int splitStartInclusive = chunkLeft(valueToChunk, result, splitSizes);\n+    /**\n+     * Chunk the String without nanoseconds into a String array, and validates the format of input string and output result.\n+     * The negative sign is stored in the first element with 'year', if applicable.\n+     * @param valueToChunk\n+     * @return String array storing chunked pieces of Date and Time\n+     */\n+    public static String[] chunkDateTime(String valueToChunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b9d10a4e38ff81c80e990b58cd40961b7727d4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4084, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}