{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODA3NDYx", "number": 1569, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzoyMjo0MVrODVkTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzozMjowMVrODVkXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQxMzkyOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/sync/RequestBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzoyMjo0MVrOFZ3aJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzozNDoyMFrOFZ3jcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NjUzMg==", "bodyText": "Can we update the javadoc in the original fromByteBuffer(...) to make it clear that this one does -not- respect the current read position.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362666532", "createdAt": "2020-01-02T23:22:41Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/sync/RequestBody.java", "diffHunk": "@@ -169,6 +169,18 @@ public static RequestBody fromByteBuffer(ByteBuffer byteBuffer) {\n         return fromBytesDirect(BinaryUtils.copyAllBytesFrom(byteBuffer));\n     }\n \n+    /**\n+     * Creates a {@link RequestBody} from the remaining readable bytes from a {@link ByteBuffer}. Unlike\n+     * {@link #fromByteBuffer(ByteBuffer)}, this method respects the current read position of the buffer and reads only\n+     * the remaining bytes. The buffer is copied before reading so no changes are made to original buffer.\n+     *\n+     * @param byteBuffer ByteBuffer to send to the service.\n+     * @return RequestBody instance.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODkxNQ==", "bodyText": "+1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362668915", "createdAt": "2020-01-02T23:34:20Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/sync/RequestBody.java", "diffHunk": "@@ -169,6 +169,18 @@ public static RequestBody fromByteBuffer(ByteBuffer byteBuffer) {\n         return fromBytesDirect(BinaryUtils.copyAllBytesFrom(byteBuffer));\n     }\n \n+    /**\n+     * Creates a {@link RequestBody} from the remaining readable bytes from a {@link ByteBuffer}. Unlike\n+     * {@link #fromByteBuffer(ByteBuffer)}, this method respects the current read position of the buffer and reads only\n+     * the remaining bytes. The buffer is copied before reading so no changes are made to original buffer.\n+     *\n+     * @param byteBuffer ByteBuffer to send to the service.\n+     * @return RequestBody instance.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NjUzMg=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQxNTYwOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzoyNDowNFrOFZ3bWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzozNDozMVrOFZ3jig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2Njg0Mw==", "bodyText": "Capture bb.remaining() before calling fromRemainingByteBuffer just to ensure that it's not being mutated.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362666843", "createdAt": "2020-01-02T23:24:04Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "diffHunk": "@@ -104,4 +103,19 @@ public void emptyBytesConstructorHasCorrectContentType() {\n         RequestBody requestBody = RequestBody.empty();\n         assertThat(requestBody.contentType()).isEqualTo(Mimetype.MIMETYPE_OCTET_STREAM);\n     }\n+\n+    @Test\n+    public void remainingByteBufferConstructorOnlyRemainingBytesCopied() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(4);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.get();\n+\n+        RequestBody requestBody = RequestBody.fromRemainingByteBuffer(bb);\n+        assertThat(requestBody.contentLength()).isEqualTo(bb.remaining());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2Njg5Mg==", "bodyText": "Or have a separate test to assert such...", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362666892", "createdAt": "2020-01-02T23:24:19Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "diffHunk": "@@ -104,4 +103,19 @@ public void emptyBytesConstructorHasCorrectContentType() {\n         RequestBody requestBody = RequestBody.empty();\n         assertThat(requestBody.contentType()).isEqualTo(Mimetype.MIMETYPE_OCTET_STREAM);\n     }\n+\n+    @Test\n+    public void remainingByteBufferConstructorOnlyRemainingBytesCopied() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(4);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.get();\n+\n+        RequestBody requestBody = RequestBody.fromRemainingByteBuffer(bb);\n+        assertThat(requestBody.contentLength()).isEqualTo(bb.remaining());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2Njg0Mw=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODkzOA==", "bodyText": "Will do", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362668938", "createdAt": "2020-01-02T23:34:31Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "diffHunk": "@@ -104,4 +103,19 @@ public void emptyBytesConstructorHasCorrectContentType() {\n         RequestBody requestBody = RequestBody.empty();\n         assertThat(requestBody.contentType()).isEqualTo(Mimetype.MIMETYPE_OCTET_STREAM);\n     }\n+\n+    @Test\n+    public void remainingByteBufferConstructorOnlyRemainingBytesCopied() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(4);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.get();\n+\n+        RequestBody requestBody = RequestBody.fromRemainingByteBuffer(bb);\n+        assertThat(requestBody.contentLength()).isEqualTo(bb.remaining());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2Njg0Mw=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQxNzg2OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzoyNTo1NlrOFZ3cww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzo0MDo1OFrOFZ3oaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NzIwMw==", "bodyText": "Not keen on the way this test is written, it's vulnerable to bb being mutated, also the assertion reads kinda back to front usually we assert the thing that's under test rather than the thing being under test as the thing we compare to.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362667203", "createdAt": "2020-01-02T23:25:56Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "diffHunk": "@@ -104,4 +103,19 @@ public void emptyBytesConstructorHasCorrectContentType() {\n         RequestBody requestBody = RequestBody.empty();\n         assertThat(requestBody.contentType()).isEqualTo(Mimetype.MIMETYPE_OCTET_STREAM);\n     }\n+\n+    @Test\n+    public void remainingByteBufferConstructorOnlyRemainingBytesCopied() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(4);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.get();\n+\n+        RequestBody requestBody = RequestBody.fromRemainingByteBuffer(bb);\n+        assertThat(requestBody.contentLength()).isEqualTo(bb.remaining());\n+\n+        byte[] requestBodyBytes = IoUtils.toByteArray(requestBody.contentStreamProvider().newStream());\n+        assertThat(bb).isEqualTo(ByteBuffer.wrap(requestBodyBytes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3MDE4NA==", "bodyText": "Gotcha, I'll flip it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362670184", "createdAt": "2020-01-02T23:40:58Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/sync/RequestBodyTest.java", "diffHunk": "@@ -104,4 +103,19 @@ public void emptyBytesConstructorHasCorrectContentType() {\n         RequestBody requestBody = RequestBody.empty();\n         assertThat(requestBody.contentType()).isEqualTo(Mimetype.MIMETYPE_OCTET_STREAM);\n     }\n+\n+    @Test\n+    public void remainingByteBufferConstructorOnlyRemainingBytesCopied() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(4);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.get();\n+\n+        RequestBody requestBody = RequestBody.fromRemainingByteBuffer(bb);\n+        assertThat(requestBody.contentLength()).isEqualTo(bb.remaining());\n+\n+        byte[] requestBodyBytes = IoUtils.toByteArray(requestBody.contentStreamProvider().newStream());\n+        assertThat(bb).isEqualTo(ByteBuffer.wrap(requestBodyBytes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NzIwMw=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQyMTAwOnYy", "diffSide": "RIGHT", "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzoyODoyOVrOFZ3ezA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzozODo1NVrOFZ3mvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NzcyNA==", "bodyText": "Can we use assertJ for all our new tests? I get that you don't want to refactor all the existing tests, but at least for new tests.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362667724", "createdAt": "2020-01-02T23:28:29Z", "author": {"login": "bmaizels"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2OTc1Nw==", "bodyText": "Yeah, I didn't want to start mixing them within the same test class, but I'm fine either way.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362669757", "createdAt": "2020-01-02T23:38:55Z", "author": {"login": "dagnir"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2NzcyNA=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQyNTI0OnYy", "diffSide": "RIGHT", "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzozMjowMVrOFZ3hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNDoxMlrOFZ3-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODQxOA==", "bodyText": "These tests might be clearer if we work with bytes instead of ints. Also, we should assert that the sequence is read correctly, eg: given a sequence of [ 1, 2, 3, 4 ] of which we read two bytes we can assert that we are left with a buffer that is equivalent to [ 3, 4 ] rather than just checking length.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362668418", "createdAt": "2020-01-02T23:32:01Z", "author": {"login": "bmaizels"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_noRemainingBytes() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        assertEquals(0, BinaryUtils.copyRemainingBytesFrom(bb).length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_fullBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(8, copy.length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_partiallyReadBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(4, copy.length);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2OTYwMQ==", "bodyText": "+1 bytes instead of ints. The assertEquals() should take care of the ordering check since ByteBuffer#equals() enforces that.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362669601", "createdAt": "2020-01-02T23:38:06Z", "author": {"login": "dagnir"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_noRemainingBytes() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        assertEquals(0, BinaryUtils.copyRemainingBytesFrom(bb).length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_fullBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(8, copy.length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_partiallyReadBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(4, copy.length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODQxOA=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3MDA2MA==", "bodyText": "Yes, sorry my comment wasn't clear. My concern about that was you were writing the same int (42) twice, therefore you don't know if what you are left with is the start or the end of the original buffer.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362670060", "createdAt": "2020-01-02T23:40:21Z", "author": {"login": "bmaizels"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_noRemainingBytes() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        assertEquals(0, BinaryUtils.copyRemainingBytesFrom(bb).length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_fullBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(8, copy.length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_partiallyReadBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(4, copy.length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODQxOA=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NTg2NA==", "bodyText": "Ah gotcha, yep that makes sense.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1569#discussion_r362675864", "createdAt": "2020-01-03T00:14:12Z", "author": {"login": "dagnir"}, "path": "utils/src/test/java/software/amazon/awssdk/utils/BinaryUtilsTest.java", "diffHunk": "@@ -159,4 +159,46 @@ public void testCopyBytesFrom_DirectByteBuffer_Idempotent() {\n         assertTrue(partial1.length == 3);\n         assertTrue(Arrays.equals(new byte[] {2, 3, 4}, partial1));\n     }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_nullBuffer() {\n+        assertNull(BinaryUtils.copyRemainingBytesFrom(null));\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_noRemainingBytes() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        assertEquals(0, BinaryUtils.copyRemainingBytesFrom(bb).length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_fullBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(8, copy.length);\n+    }\n+\n+    @Test\n+    public void testCopyRemainingBytesFrom_partiallyReadBuffer() {\n+        ByteBuffer bb = ByteBuffer.allocate(8);\n+        bb.putInt(42);\n+        bb.putInt(42);\n+        bb.flip();\n+\n+        bb.getInt();\n+\n+        byte[] copy = BinaryUtils.copyRemainingBytesFrom(bb);\n+        assertEquals(bb, ByteBuffer.wrap(copy));\n+        assertEquals(4, copy.length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY2ODQxOA=="}, "originalCommit": {"oid": "088b5fdb4811bc12b53800d34f8f3eef3ec79647"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}