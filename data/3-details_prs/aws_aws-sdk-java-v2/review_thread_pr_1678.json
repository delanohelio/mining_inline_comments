{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTc2NDU1", "number": 1678, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMToxODowNVrODj9F2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTozMzoxMVrODr16QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDI3Njc0OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMToxODowNVrOFwDFSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoxNjozMFrOFwEYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyNjQ3NA==", "bodyText": "How do we pin this to the most recent version?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385926474", "createdAt": "2020-02-28T21:18:05Z", "author": {"login": "bmaizels"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/pom.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\").\n+  ~ You may not use this file except in compliance with the License.\n+  ~ A copy of the License is located at\n+  ~\n+  ~  http://aws.amazon.com/apache2.0\n+  ~\n+  ~ or in the \"license\" file accompanying this file. This file is distributed\n+  ~ on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+  ~ express or implied. See the License for the specific language governing\n+  ~ permissions and limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${artifactId}</artifactId>\n+    <version>${version}</version>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+        <maven.shade.plugin.version>3.1.1</maven.shade.plugin.version>\n+        <maven.compiler.plugin.version>3.6.1</maven.compiler.plugin.version>\n+        <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>\n+        <aws.java.sdk.version>2.10.66</aws.java.sdk.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0NzcwOQ==", "bodyText": "Yeah, I should use ${awsjavasdk.version}. I hardcoded the version for testing and forgot to change it back.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385947709", "createdAt": "2020-02-28T22:16:30Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/pom.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\").\n+  ~ You may not use this file except in compliance with the License.\n+  ~ A copy of the License is located at\n+  ~\n+  ~  http://aws.amazon.com/apache2.0\n+  ~\n+  ~ or in the \"license\" file accompanying this file. This file is distributed\n+  ~ on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+  ~ express or implied. See the License for the specific language governing\n+  ~ permissions and limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${artifactId}</artifactId>\n+    <version>${version}</version>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+        <maven.shade.plugin.version>3.1.1</maven.shade.plugin.version>\n+        <maven.compiler.plugin.version>3.6.1</maven.compiler.plugin.version>\n+        <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>\n+        <aws.java.sdk.version>2.10.66</aws.java.sdk.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyNjQ3NA=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDMwNzMzOnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/template.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTozMDoxOFrOFwDYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoxNjozN1rOFwEYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMTI3OQ==", "bodyText": "Maybe we want comments here so people know that they could/should tweak based on their needs (assuming we never make this parameters of the archtype)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385931279", "createdAt": "2020-02-28T21:30:18Z", "author": {"login": "bmaizels"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/template.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Transform: AWS::Serverless-2016-10-31\n+Resources:\n+  ${handlerClassName}Function:\n+    Type: AWS::Serverless::Function\n+    Properties:\n+      Runtime: java8\n+      Handler: ${package}.${handlerClassName}::handleRequest\n+      Timeout: 60\n+      MemorySize: 512", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0Nzc2NQ==", "bodyText": "+1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385947765", "createdAt": "2020-02-28T22:16:37Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/template.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Transform: AWS::Serverless-2016-10-31\n+Resources:\n+  ${handlerClassName}Function:\n+    Type: AWS::Serverless::Function\n+    Properties:\n+      Runtime: java8\n+      Handler: ${package}.${handlerClassName}::handleRequest\n+      Timeout: 60\n+      MemorySize: 512", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMTI3OQ=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDMwODY4OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTozMDo1MVrOFwDY1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNjowN1rOF7FqpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMTQ3Nw==", "bodyText": "Ouch. Is this the only one?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385931477", "createdAt": "2020-02-28T21:30:51Z", "author": {"login": "bmaizels"}, "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "diffHunk": "@@ -0,0 +1,26 @@\n+## global variables used by the project\n+#set( $symbol_pound = '#' )\n+#set( $symbol_dollar = '$' )\n+#set( $symbol_escape = '\\' )\n+## TODO: find a better way to handle this\n+#if( $service == 'dynamodb')\n+    #set ( $service = 'dynamoDb')\n+#end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0Nzk4Nw==", "bodyText": "No, this would not be the only one. I'll think about a better way to map serviceId -> serviceClientName", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385947987", "createdAt": "2020-02-28T22:17:15Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "diffHunk": "@@ -0,0 +1,26 @@\n+## global variables used by the project\n+#set( $symbol_pound = '#' )\n+#set( $symbol_dollar = '$' )\n+#set( $symbol_escape = '\\' )\n+## TODO: find a better way to handle this\n+#if( $service == 'dynamodb')\n+    #set ( $service = 'dynamoDb')\n+#end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMTQ3Nw=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMzE0MQ==", "bodyText": "Can't think of an easy way to do it. Currently, the service module name is lower case derived from serviceId, and the client class name is camel case derived from service name.\nWe can probably write some scripts to search service-2.json files to map serviceId to serviceName, but that seems a bit overkill. I'm leaning towards just fixing the popular services here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r397503141", "createdAt": "2020-03-24T22:36:07Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "diffHunk": "@@ -0,0 +1,26 @@\n+## global variables used by the project\n+#set( $symbol_pound = '#' )\n+#set( $symbol_dollar = '$' )\n+#set( $symbol_escape = '\\' )\n+## TODO: find a better way to handle this\n+#if( $service == 'dynamodb')\n+    #set ( $service = 'dynamoDb')\n+#end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMTQ3Nw=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDMxNDA2OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/META-INF/maven/archetype-metadata.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTozMzowNlrOFwDcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoxODoxNVrOFwEa0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMjMxNg==", "bodyText": "Ideally we'd have validation here, what if they typo the service?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385932316", "createdAt": "2020-02-28T21:33:06Z", "author": {"login": "bmaizels"}, "path": "archetypes/archetype-lambda/src/main/resources/META-INF/maven/archetype-metadata.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<archetype-descriptor xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0 http://maven.apache.org/xsd/archetype-descriptor-1.0.0.xsd\" name=\"zoewanglambdatesting\"\n+    xmlns=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <fileSets>\n+    <fileSet filtered=\"true\" packaged=\"true\" encoding=\"UTF-8\">\n+      <directory>src/main/java</directory>\n+      <includes>\n+        <include>**/*.java</include>\n+      </includes>\n+    </fileSet>\n+    <fileSet filtered=\"true\" packaged=\"true\" encoding=\"UTF-8\">\n+      <directory>src/test/java</directory>\n+      <includes>\n+        <include>**/*.java</include>\n+      </includes>\n+    </fileSet>\n+    <fileSet filtered=\"true\" encoding=\"UTF-8\">\n+      <directory/>\n+      <includes>\n+        <include>.gitignore</include>\n+        <include>template.yaml</include>\n+      </includes>\n+    </fileSet>\n+  </fileSets>\n+  <requiredProperties>\n+    <requiredProperty key=\"handlerClassName\">\n+      <defaultValue>App</defaultValue>\n+    </requiredProperty>\n+    <requiredProperty key=\"service\">\n+    </requiredProperty>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0ODM2OQ==", "bodyText": "That's a limitation for archetype; they only have regex validation, which is not sufficient. We can probably make it more clear on the documentation that this should be the serviceId.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385948369", "createdAt": "2020-02-28T22:18:15Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/META-INF/maven/archetype-metadata.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<archetype-descriptor xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0 http://maven.apache.org/xsd/archetype-descriptor-1.0.0.xsd\" name=\"zoewanglambdatesting\"\n+    xmlns=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <fileSets>\n+    <fileSet filtered=\"true\" packaged=\"true\" encoding=\"UTF-8\">\n+      <directory>src/main/java</directory>\n+      <includes>\n+        <include>**/*.java</include>\n+      </includes>\n+    </fileSet>\n+    <fileSet filtered=\"true\" packaged=\"true\" encoding=\"UTF-8\">\n+      <directory>src/test/java</directory>\n+      <includes>\n+        <include>**/*.java</include>\n+      </includes>\n+    </fileSet>\n+    <fileSet filtered=\"true\" encoding=\"UTF-8\">\n+      <directory/>\n+      <includes>\n+        <include>.gitignore</include>\n+        <include>template.yaml</include>\n+      </includes>\n+    </fileSet>\n+  </fileSets>\n+  <requiredProperties>\n+    <requiredProperty key=\"handlerClassName\">\n+      <defaultValue>App</defaultValue>\n+    </requiredProperty>\n+    <requiredProperty key=\"service\">\n+    </requiredProperty>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMjMxNg=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDMxNjU0OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTozNDowOVrOFwDdlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoxODo0MVrOFwEbiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMjY5NA==", "bodyText": "Might be worth mentioning sync vs async here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385932694", "createdAt": "2020-02-28T21:34:09Z", "author": {"login": "bmaizels"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use the following command to generate a project:\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=lambda-archetypes \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+To deploy the function, you can use [SAM CLI][sam-cli].\n+\n+```\n+sam deploy --guided\n+```\n+Please refer to [deploying lambda apps][deploying-lambda-apps] for more info.\n+\n+## Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies service client to be used in the lambda function. You can find the  eg: s3, dynamodb\n+`region` (required) | n/a | Specifies region to be set for the SDK client in the application\n+`groupId`(required) | n/a | Specifies the group ID of the project\n+`artifactId`(required) | n/a | Specifies the artifact ID of the project\n+`httpClient` | url-connection-client | Specifies which http client to be used by the SDK client, available options are `url-connection-client`, `apache-client`, `netty-nio-client`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0ODU1NQ==", "bodyText": "Sure", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r385948555", "createdAt": "2020-02-28T22:18:41Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use the following command to generate a project:\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=lambda-archetypes \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+To deploy the function, you can use [SAM CLI][sam-cli].\n+\n+```\n+sam deploy --guided\n+```\n+Please refer to [deploying lambda apps][deploying-lambda-apps] for more info.\n+\n+## Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies service client to be used in the lambda function. You can find the  eg: s3, dynamodb\n+`region` (required) | n/a | Specifies region to be set for the SDK client in the application\n+`groupId`(required) | n/a | Specifies the group ID of the project\n+`artifactId`(required) | n/a | Specifies the artifact ID of the project\n+`httpClient` | url-connection-client | Specifies which http client to be used by the SDK client, available options are `url-connection-client`, `apache-client`, `netty-nio-client`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMjY5NA=="}, "originalCommit": {"oid": "f922a397b7d9ef87f689bd0de4a4361c7051312c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzcyOTUwOnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/README.md", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoxOTowNVrOF7oakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1MDoxOVrOF8Vm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng==", "bodyText": "Can they just specify the module name (s3) and client name (S3Client) or something, so that we don't need to maintain a mapping?\nCan we also generate instructions for adding more services? Maybe in a comment or something?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398072466", "createdAt": "2020-03-25T18:19:05Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MzY3NA==", "bodyText": "They'd need to know the exact sync/async client names and I feel like that's kind of against the purpose of quickly bootstrapping a project from a template.\nYeah, I can add some comments to explain how to add more services in the code.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398093674", "createdAt": "2020-03-25T18:52:35Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMDExMw==", "bodyText": "Sure, we can always write a build-tool to generate them pretty easily in the future.\nCould we do a quick bash script to generate them for the currently-launched services? That shouldn't be too hard, if we're just hunting for things that extend SdkClient in each service module.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398100113", "createdAt": "2020-03-25T19:03:24Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2Mzg5Ng==", "bodyText": "Yeah, generated serviceMapping.vm   file that contains currently-launched services. I'll add the script in another PR to make it update the file automatically after every release.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398763896", "createdAt": "2020-03-26T17:37:49Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NzI5OA==", "bodyText": "What if we added a build script to do it during the release, instead of having to do it after the release?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398767298", "createdAt": "2020-03-26T17:42:42Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NjY1OQ==", "bodyText": "Yeah, I misspoke. We can update it during the release like how we update the changelog.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398796659", "createdAt": "2020-03-26T18:24:50Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODk2MA==", "bodyText": "I misspoke too, I meant: can we write a build script, that as part of a mvn clean install generates the serviceMapping.vm used in this archetype?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398798960", "createdAt": "2020-03-26T18:28:17Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5OTU3Mw==", "bodyText": "Like, a maven plugin or build tool that does it as part of the build.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398799573", "createdAt": "2020-03-26T18:29:09Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMzQxNw==", "bodyText": "Yeah, I thought about it, but it'll take a really long time to build this specific module because it technically depends on all services. Release is probably fine because it builds all modules anyway but for development, if you are making changes in this module,  you'll have to wait for a long time for it to build.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398803417", "createdAt": "2020-03-26T18:35:07Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjkyNQ==", "bodyText": "On second thought, it'll probably be easier to maintain if we keep the script within this module and build the file during build time.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398812925", "createdAt": "2020-03-26T18:50:19Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# Maven Archetype for lambda function using AWS SDK for Java 2.x\n+\n+## Description\n+This is an Apache Maven Archetype to create a lambda function template using [AWS Java SDK 2.x][aws-java-sdk-v2]. The generated template\n+has the optimized configurations and follows the best practices to reduce start up time.\n+\n+## Usage\n+\n+You can use `mvn archetype:generate` to generate a project using this archetype. See [maven archetype usage guidance][maven-archetype-usage] for more information.\n+\n+- Interactive mode\n+\n+```\n+mvn archetype:generate \\\n+  -DarchetypeGroupId=software.amazon.awssdk \\\n+  -DarchetypeArtifactId=archetype-lambda \\\n+  -DarchetypeVersion=2.x\\\n+```\n+\n+- Batch mode\n+\n+```\n+mvn archetype:generate \\\n+    -DarchetypeGroupId=software.amazon.awssdk \\\n+    -DarchetypeArtifactId=archetype-lambda \\\n+    -DarchetypeVersion=2.x\\\n+    -DgroupId=com.test \\\n+    -DartifactId=sample-project \\\n+    -Dservice=s3  \\\n+    -Dregion=us-west-2 \\\n+    -DinteractiveMode=false \\\n+```\n+\n+### Parameters\n+      \n+Parameter Name | Default Value | Description\n+---|---|---\n+`service` (required) | n/a | Specifies the service client to be used in the lambda function, eg: s3, dynamodb. You can find available services [here][java-sdk-v2-services].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MjQ2Ng=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzc0NzMyOnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/src/main/java/DependencyFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyMzozNFrOF7ol8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo0MDozMFrOF7pPvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTM3OA==", "bodyText": "In the future, we should consider showing them how to do true DI with dagger.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398075378", "createdAt": "2020-03-25T18:23:34Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/src/main/java/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+#parse ( \"global.vm\")\n+\n+package ${package};\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.${httpClientPackageName};\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.${servicePackage}.${serviceClientClassName};\n+\n+/**\n+ * The module containing all dependencies required by the {@link ${handlerClassName}}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of ${serviceClientClassName}\n+     */\n+    public static ${serviceClientClassName} ${service}Client() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4NjA3Ng==", "bodyText": "Yup. I thought about adding another parameter, something like di, which allows customers to switch between relatively lightweight DI such as dagger or guice or no DI at all.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398086076", "createdAt": "2020-03-25T18:40:30Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/archetype-resources/src/main/java/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+#parse ( \"global.vm\")\n+\n+package ${package};\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.${httpClientPackageName};\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.${servicePackage}.${serviceClientClassName};\n+\n+/**\n+ * The module containing all dependencies required by the {@link ${handlerClassName}}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of ${serviceClientClassName}\n+     */\n+    public static ${serviceClientClassName} ${service}Client() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTM3OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzc3MzQ2OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODozMDoxMVrOF7o2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODozMDoxMVrOF7o2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3OTY2Mw==", "bodyText": "If we want to invest time, we could generate these mappings and upload them to maven for the archetype to use.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398079663", "createdAt": "2020-03-25T18:30:11Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/main/resources/global.vm", "diffHunk": "@@ -0,0 +1,29 @@\n+## global variables used by the project\n+#set( $symbol_pound = '#' )\n+#set( $symbol_dollar = '$' )\n+#set( $symbol_escape = '\\' )\n+## TODO: there is no easy way to map service module artifactId to the client name derived the service name\n+## As a workaround: mapping the common service here\n+#if( $service == 'dynamodb')\n+    #set ( $service = 'dynamoDb')\n+#end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzc3OTg2OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODozMTo1MFrOF7o6iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1NTozMlrOF8aDiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA==", "bodyText": "Do we include open SSL or other tweaks for netty?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398080648", "createdAt": "2020-03-25T18:31:50Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4ODU0Mw==", "bodyText": "That would require another openssl dependency netty-tcnative though, and not all platforms support it. We can probably add a comment here to recommend using openssl if possible.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398088543", "createdAt": "2020-03-25T18:44:30Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MDg2NA==", "bodyText": "But since it's on Lambda, we know the platform, right?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398090864", "createdAt": "2020-03-25T18:48:23Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NDAzMQ==", "bodyText": "lol, good point. I'll give it a try", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398094031", "createdAt": "2020-03-25T18:53:08Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDAxNA==", "bodyText": "Wow, the netty-tcnative-boringssl-static binding jar itself is 3MB...Certainly wouldn't help with cold start issue, but I guess it would improve overall latency a bit.\n5 concurrent s3Async#listBuckets calls with 1024MB mem:\n\nOpenssl Duration: 3767.44 ms, Init Duration: 1092.19 ms\nJDK: Duration: 3995.94 ms Init Duration: 1108.46 ms", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398140014", "createdAt": "2020-03-25T20:14:29Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NTc3MQ==", "bodyText": "Ended up just adding netty-tcnative-boringssl-static dependency so that it'd use openssl if supported and fallback to jdk ssl provider otherwise.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398885771", "createdAt": "2020-03-26T20:55:32Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/test/resources/projects/nettyclient/reference/src/main/java/software/amazonaws/test/DependencyFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+\n+package software.amazonaws.test;\n+\n+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\n+import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.kinesis.KinesisAsyncClient;\n+\n+/**\n+ * The module containing all dependencies required by the {@link MyNettyFunction}.\n+ */\n+public class DependencyFactory {\n+\n+    private DependencyFactory() {}\n+\n+    /**\n+     * @return an instance of KinesisAsyncClient\n+     */\n+    public static KinesisAsyncClient kinesisClient() {\n+        return KinesisAsyncClient.builder()\n+                       .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n+                       .region(Region.US_EAST_1)\n+                       .httpClientBuilder(NettyNioAsyncHttpClient.builder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDY0OA=="}, "originalCommit": {"oid": "31a5b3a88a1ddc84e0031f48f326edaadda1fb1f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjk4NjI1OnYy", "diffSide": "RIGHT", "path": "archetypes/archetype-lambda/src/main/resources/map-service-to-client-prefix", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTozMzoxMVrOF8bSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo0MDoyMFrOF8dDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNjA0OA==", "bodyText": "How does this work for modules with multiple clients, e.g. dynamodb?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398906048", "createdAt": "2020-03-26T21:33:11Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/main/resources/map-service-to-client-prefix", "diffHunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+import json\n+import os\n+import string\n+\n+MAPPING_FILE_NAME = 'serviceMapping.vm'\n+RESOURCES_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))\n+ARCHETYPE_LAMBDA_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(RESOURCES_ROOT_DIR, \"../\"))))\n+SERVICE_DIR = os.path.join(\n+    os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(__file__, \"../../../../\")))),\n+    'services'\n+)\n+\n+def load_all_service_modules():\n+    service_mapping = {}\n+    for f in [f for f in os.listdir(SERVICE_DIR) if os.path.isdir(os.path.join(SERVICE_DIR, f)) & os.path.exists(os.path.join(SERVICE_DIR, f, 'target'))]:\n+        for s in [s for s in os.listdir(os.path.join(SERVICE_DIR, f, 'target', 'generated-sources/sdk/software/amazon/awssdk/services', f)) if s.endswith('AsyncClient.java') & s.startswith('Default')]:\n+            service_mapping[f] = find_client_prefix(s)\n+    return service_mapping\n+\n+def find_client_prefix(d):\n+    index = d.find('AsyncClient.java')\n+    return d[7:index]\n+\n+def write_to_vm_file(service_mapping):\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target', 'classes')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    filename = os.path.join(target, MAPPING_FILE_NAME)\n+\n+    with open(filename, 'w') as f:\n+        f.write('#set ( $serviceMapping =')\n+        f.write(json.dumps(service_mapping))\n+        f.write(')')\n+    return filename", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1067b6ecf28826f5ba944d2aa72e260663b6eb4d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMjYzOQ==", "bodyText": "It only works with the top level client in those kind of modules, i.e., dynamodb and waf. :(\nI think it should be fine since there are only two broken clients dynamodbstream and wafregional and we can easily customize it.\nWe did specify in the README that the available service option can be found in https://github.com/aws/aws-sdk-java-v2/tree/master/services, so technically, wafregional and dynamodbstream are just not supported.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398912639", "createdAt": "2020-03-26T21:46:55Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/map-service-to-client-prefix", "diffHunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+import json\n+import os\n+import string\n+\n+MAPPING_FILE_NAME = 'serviceMapping.vm'\n+RESOURCES_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))\n+ARCHETYPE_LAMBDA_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(RESOURCES_ROOT_DIR, \"../\"))))\n+SERVICE_DIR = os.path.join(\n+    os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(__file__, \"../../../../\")))),\n+    'services'\n+)\n+\n+def load_all_service_modules():\n+    service_mapping = {}\n+    for f in [f for f in os.listdir(SERVICE_DIR) if os.path.isdir(os.path.join(SERVICE_DIR, f)) & os.path.exists(os.path.join(SERVICE_DIR, f, 'target'))]:\n+        for s in [s for s in os.listdir(os.path.join(SERVICE_DIR, f, 'target', 'generated-sources/sdk/software/amazon/awssdk/services', f)) if s.endswith('AsyncClient.java') & s.startswith('Default')]:\n+            service_mapping[f] = find_client_prefix(s)\n+    return service_mapping\n+\n+def find_client_prefix(d):\n+    index = d.find('AsyncClient.java')\n+    return d[7:index]\n+\n+def write_to_vm_file(service_mapping):\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target', 'classes')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    filename = os.path.join(target, MAPPING_FILE_NAME)\n+\n+    with open(filename, 'w') as f:\n+        f.write('#set ( $serviceMapping =')\n+        f.write(json.dumps(service_mapping))\n+        f.write(')')\n+    return filename", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNjA0OA=="}, "originalCommit": {"oid": "1067b6ecf28826f5ba944d2aa72e260663b6eb4d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxOTIxMA==", "bodyText": "Sounds fine, as long as dynamodb doesn't generate a client for dynamodbstreams.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398919210", "createdAt": "2020-03-26T22:01:29Z", "author": {"login": "millems"}, "path": "archetypes/archetype-lambda/src/main/resources/map-service-to-client-prefix", "diffHunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+import json\n+import os\n+import string\n+\n+MAPPING_FILE_NAME = 'serviceMapping.vm'\n+RESOURCES_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))\n+ARCHETYPE_LAMBDA_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(RESOURCES_ROOT_DIR, \"../\"))))\n+SERVICE_DIR = os.path.join(\n+    os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(__file__, \"../../../../\")))),\n+    'services'\n+)\n+\n+def load_all_service_modules():\n+    service_mapping = {}\n+    for f in [f for f in os.listdir(SERVICE_DIR) if os.path.isdir(os.path.join(SERVICE_DIR, f)) & os.path.exists(os.path.join(SERVICE_DIR, f, 'target'))]:\n+        for s in [s for s in os.listdir(os.path.join(SERVICE_DIR, f, 'target', 'generated-sources/sdk/software/amazon/awssdk/services', f)) if s.endswith('AsyncClient.java') & s.startswith('Default')]:\n+            service_mapping[f] = find_client_prefix(s)\n+    return service_mapping\n+\n+def find_client_prefix(d):\n+    index = d.find('AsyncClient.java')\n+    return d[7:index]\n+\n+def write_to_vm_file(service_mapping):\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target', 'classes')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    filename = os.path.join(target, MAPPING_FILE_NAME)\n+\n+    with open(filename, 'w') as f:\n+        f.write('#set ( $serviceMapping =')\n+        f.write(json.dumps(service_mapping))\n+        f.write(')')\n+    return filename", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNjA0OA=="}, "originalCommit": {"oid": "1067b6ecf28826f5ba944d2aa72e260663b6eb4d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNDkyMA==", "bodyText": "Added customization for dynamodbstreams and wafregional and they should work now.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1678#discussion_r398934920", "createdAt": "2020-03-26T22:40:20Z", "author": {"login": "zoewangg"}, "path": "archetypes/archetype-lambda/src/main/resources/map-service-to-client-prefix", "diffHunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+import json\n+import os\n+import string\n+\n+MAPPING_FILE_NAME = 'serviceMapping.vm'\n+RESOURCES_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))\n+ARCHETYPE_LAMBDA_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(RESOURCES_ROOT_DIR, \"../\"))))\n+SERVICE_DIR = os.path.join(\n+    os.path.dirname(os.path.dirname(os.path.abspath(os.path.join(__file__, \"../../../../\")))),\n+    'services'\n+)\n+\n+def load_all_service_modules():\n+    service_mapping = {}\n+    for f in [f for f in os.listdir(SERVICE_DIR) if os.path.isdir(os.path.join(SERVICE_DIR, f)) & os.path.exists(os.path.join(SERVICE_DIR, f, 'target'))]:\n+        for s in [s for s in os.listdir(os.path.join(SERVICE_DIR, f, 'target', 'generated-sources/sdk/software/amazon/awssdk/services', f)) if s.endswith('AsyncClient.java') & s.startswith('Default')]:\n+            service_mapping[f] = find_client_prefix(s)\n+    return service_mapping\n+\n+def find_client_prefix(d):\n+    index = d.find('AsyncClient.java')\n+    return d[7:index]\n+\n+def write_to_vm_file(service_mapping):\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    target = os.path.join(ARCHETYPE_LAMBDA_ROOT_DIR, 'target', 'classes')\n+\n+    if not os.path.exists(target):\n+        os.mkdir(target)\n+\n+    filename = os.path.join(target, MAPPING_FILE_NAME)\n+\n+    with open(filename, 'w') as f:\n+        f.write('#set ( $serviceMapping =')\n+        f.write(json.dumps(service_mapping))\n+        f.write(')')\n+    return filename", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNjA0OA=="}, "originalCommit": {"oid": "1067b6ecf28826f5ba944d2aa72e260663b6eb4d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4236, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}