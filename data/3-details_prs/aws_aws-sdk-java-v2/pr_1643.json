{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzkzMjA3", "number": 1643, "title": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic ope\u2026", "bodyText": "\u2026rations\nDescription\n\nAdds the atomic getItem(), putItem(), deleteItem() and updateItem() operations to the table interfaces\nRefactors composite operations Transact/Batch for updated atomic operations\nRemoves ReadTransaction/WriteTransaction since they're no longer needed.\nRemoves execute() method on table interfaces\nUpdates all tests\n\nMotivation and Context\nImproves discoverability by adding operation methods for atomic operations\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-02-10T22:48:52Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643", "merged": true, "mergeCommit": {"oid": "d6014e3581b9aaba9e38cd58ac2b7cc976230c71"}, "closed": true, "closedAt": "2020-02-12T23:47:24Z", "author": {"login": "cenedhryn"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDYdr0AFqTM1Njk0NzU4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDtzlyAH2gAyMzczMzkzMjA3OmVkZGRlNzZlMGZjYzRlNjczZjY4YjRjN2Y2MTZjZDliNDRlY2YwOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTQ3NTg1", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#pullrequestreview-356947585", "createdAt": "2020-02-11T19:51:09Z", "commit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTo1NDoxMVrOFoW9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxMTozNlrOFoZOjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzYxMA==", "bodyText": "Is there any reason we have create method?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377863610", "createdAt": "2020-02-11T19:54:11Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+\n+@SdkPublicApi\n+public class DeleteItemEnhancedRequest<T> {\n+\n+    private final Key key;\n+    private final Expression conditionExpression;\n+\n+    private DeleteItemEnhancedRequest(Builder builder) {\n+        this.key = builder.key;\n+        this.conditionExpression = builder.conditionExpression;\n+    }\n+\n+    public static <T> DeleteItemEnhancedRequest<T> create(Key key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2Mzg3MQ==", "bodyText": "final", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377863871", "createdAt": "2020-02-11T19:54:37Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+\n+@SdkPublicApi\n+public class GetItemEnhancedRequest<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTQyOQ==", "bodyText": "Should we pass a Builder so that we don't need to add another parameter when adding a new field in the future.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377875429", "createdAt": "2020-02-11T20:19:38Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -16,109 +16,37 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableReadOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableMetadata;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.GetItem;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n-/**\n- * Encapsulates a single write transaction that can form a list of transactions that go into a\n- * {@link BatchGetItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * ReadBatch.create(myTable, putItem(myItem));\n- * ReadBatch.createf(myTable, deleteItem(Key.create(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this transaction applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class ReadBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableReadOperation> readOperations;\n-\n-    private ReadBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.readOperations = Collections.unmodifiableList(builder.readOperations);\n-    }\n-\n-    public static <T> ReadBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                      Collection<BatchableReadOperation> readOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).readOperations(readOperations).build();\n-    }\n+public class ReadBatch {\n+    private final String tableName;\n+    private final KeysAndAttributes keysAndAttributes;\n \n-    public static <T> ReadBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                      BatchableReadOperation... readOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).readOperations(readOperations).build();\n+    private ReadBatch(String tableName, KeysAndAttributes keysAndAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NjI2OQ==", "bodyText": "I believe the style we follow in dynamodb mapper is to move the validation and logic to the ctor, correct? @bmaizels", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377876269", "createdAt": "2020-02-11T20:21:22Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -171,26 +89,53 @@ private Builder() {\n             return this;\n         }\n \n-        public Builder<T> readOperations(Collection<BatchableReadOperation> readOperations) {\n-            this.readOperations = new ArrayList<>(readOperations);\n+        public Builder<T> addGetItem(GetItemEnhancedRequest request) {\n+            requests.add(request);\n             return this;\n         }\n \n-        public Builder<T> readOperations(BatchableReadOperation ...readOperations) {\n-            this.readOperations = Arrays.asList(readOperations);\n-            return this;\n+        public ReadBatch build() {\n+            return new ReadBatch(mappedTableResource.tableName(), generateKeysAndAttributes(requests));\n         }\n \n-        public Builder addReadOperation(BatchableReadOperation readOperation) {\n-            if (readOperations == null) {\n-                readOperations = new ArrayList<>();\n-            }\n-            readOperations.add(readOperation);\n-            return this;\n+        private KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4NjQ3Ng==", "bodyText": "Is there any reason we use AtomicReference and AtomicBoolean?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377886476", "createdAt": "2020-02-11T20:42:40Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -171,26 +89,53 @@ private Builder() {\n             return this;\n         }\n \n-        public Builder<T> readOperations(Collection<BatchableReadOperation> readOperations) {\n-            this.readOperations = new ArrayList<>(readOperations);\n+        public Builder<T> addGetItem(GetItemEnhancedRequest request) {\n+            requests.add(request);\n             return this;\n         }\n \n-        public Builder<T> readOperations(BatchableReadOperation ...readOperations) {\n-            this.readOperations = Arrays.asList(readOperations);\n-            return this;\n+        public ReadBatch build() {\n+            return new ReadBatch(mappedTableResource.tableName(), generateKeysAndAttributes(requests));\n         }\n \n-        public Builder addReadOperation(BatchableReadOperation readOperation) {\n-            if (readOperations == null) {\n-                readOperations = new ArrayList<>();\n-            }\n-            readOperations.add(readOperation);\n-            return this;\n+        private KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests) {\n+            AtomicReference<Boolean> consistentRead = new AtomicReference<>();\n+            AtomicBoolean firstRecord = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODMzMw==", "bodyText": "Can we use immutable list?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377888333", "createdAt": "2020-02-11T20:46:37Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -16,35 +16,33 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TransactableReadOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.GetItemOperation;\n+import software.amazon.awssdk.services.dynamodb.model.TransactGetItem;\n \n @SdkPublicApi\n public class TransactGetItemsEnhancedRequest {\n \n-    private final List<ReadTransaction> readTransactions;\n+    private final List<TransactGetItem> transactGetItems;\n \n     private TransactGetItemsEnhancedRequest(Builder builder) {\n-        this.readTransactions = Collections.unmodifiableList(builder.readTransactions);\n-    }\n-\n-    public static TransactGetItemsEnhancedRequest create(Collection<ReadTransaction> transactGetRequests) {\n-        return builder().readTransactions(transactGetRequests).build();\n+        this.transactGetItems = builder.itemSupplierList.stream()\n+                                                        .map(Supplier::get)\n+                                                        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODU4NA==", "bodyText": "Same as above, let's use immutable list", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377888584", "createdAt": "2020-02-11T20:47:08Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -16,35 +16,35 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TransactableWriteOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.UpdateItemOperation;\n+import software.amazon.awssdk.services.dynamodb.model.TransactWriteItem;\n \n @SdkPublicApi\n public class TransactWriteItemsEnhancedRequest {\n \n-    private final List<WriteTransaction> writeTransactions;\n+    private final List<TransactWriteItem> transactWriteItems;\n \n     private TransactWriteItemsEnhancedRequest(Builder builder) {\n-        this.writeTransactions = Collections.unmodifiableList(builder.writeTransactions);\n-    }\n-\n-    public static TransactWriteItemsEnhancedRequest create(Collection<WriteTransaction> writeTransactions) {\n-        return builder().writeTransactions(writeTransactions).build();\n+        this.transactWriteItems = builder.itemSupplierList.stream()\n+                                                          .map(Supplier::get)\n+                                                          .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MzgxOA==", "bodyText": "Let's deep copy the map before wrapping it with unmodifiableMap.\nCollectionUtils.deepCopyMap", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377893818", "createdAt": "2020-02-11T20:57:41Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java", "diffHunk": "@@ -48,11 +49,17 @@ public static BatchWriteItemOperation create(BatchWriteItemEnhancedRequest reque\n \n     @Override\n     public BatchWriteItemRequest generateRequest(MapperExtension mapperExtension) {\n-        Map<String, Collection<WriteRequest>> requestItems = new HashMap<>();\n-        request.writeBatches().forEach(writeBatch -> writeBatch.addWriteRequestsToMap(requestItems));\n+        Map<String, Collection<WriteRequest>> allRequestItems = new HashMap<>();\n+\n+        request.writeBatches().forEach(writeBatch -> {\n+            Collection<WriteRequest> writeRequestsForTable = allRequestItems.computeIfAbsent(\n+                writeBatch.tableName(),\n+                ignored -> new ArrayList<>());\n+            writeRequestsForTable.addAll(writeBatch.writeRequests());\n+        });\n \n         return BatchWriteItemRequest.builder()\n-                                    .requestItems(Collections.unmodifiableMap(requestItems))\n+                                    .requestItems(Collections.unmodifiableMap(allRequestItems))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5ODQxNQ==", "bodyText": "Could you explain it more?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377898415", "createdAt": "2020-02-11T21:06:49Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java", "diffHunk": "@@ -282,31 +200,50 @@ private static Expression generateUpdateExpression(Map<String, AttributeValue> a\n                          .build();\n     }\n \n-    public static final class Builder<T> {\n-        private T item;\n-        private Boolean ignoreNulls;\n-        private Expression conditionExpression;\n+    private UpdateItemRequest.Builder addExpressionsIfExist(WriteModification transformation,\n+                                                            Map<String, AttributeValue> filteredAttributeValues,\n+                                                            UpdateItemRequest.Builder requestBuilder) {\n+        Map<String, String> expressionNames = null;\n+        Map<String, AttributeValue> expressionValues = null;\n+        String conditionExpressionString = null;\n \n-        private Builder() {\n+        /* Add update expression for transformed non-key attributes if applicable */\n+        if (!filteredAttributeValues.isEmpty()) {\n+            Expression fullUpdateExpression = generateUpdateExpression(filteredAttributeValues);\n+            expressionNames = fullUpdateExpression.expressionNames();\n+            expressionValues = fullUpdateExpression.expressionValues();\n+            requestBuilder = requestBuilder.updateExpression(fullUpdateExpression.expression());\n         }\n \n-        public Builder<T> ignoreNulls(Boolean ignoreNulls) {\n-            this.ignoreNulls = ignoreNulls;\n-            return this;\n+        /* Merge in conditional expression from extension WriteModification if applicable */\n+        if (transformation != null && transformation.additionalConditionalExpression() != null) {\n+            expressionNames =\n+                Expression.coalesceNames(expressionNames,\n+                                         transformation.additionalConditionalExpression().expressionNames());\n+            expressionValues =\n+                Expression.coalesceValues(expressionValues,\n+                                          transformation.additionalConditionalExpression().expressionValues());\n+            conditionExpressionString = transformation.additionalConditionalExpression().expression();\n         }\n \n-        public Builder<T> conditionExpression(Expression conditionExpression) {\n-            this.conditionExpression = conditionExpression;\n-            return this;\n+        /* Merge in conditional expression from specified 'conditionExpression' if applicable */\n+        if (this.request.conditionExpression() != null) {\n+            expressionNames = Expression.coalesceNames(expressionNames, this.request.conditionExpression().expressionNames());\n+            expressionValues = Expression.coalesceValues(expressionValues, this.request.conditionExpression().expressionValues());\n+            conditionExpressionString = Expression.coalesceExpressions(conditionExpressionString,\n+                                                                       this.request.conditionExpression().expression(), \" AND \");\n         }\n \n-        public Builder<T> item(T item) {\n-            this.item = item;\n-            return this;\n+        // The SDK handles collections a little weirdly. Avoiding adding empty collections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDUyMQ==", "bodyText": "passing builder?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377900521", "createdAt": "2020-02-11T21:11:13Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -16,88 +16,40 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableWriteOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n import software.amazon.awssdk.services.dynamodb.model.WriteRequest;\n \n-/**\n- * Encapsulates a single write batch that can form a list of write batches that go into a {@link BatchWriteItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * WriteBatch.create(myTable, putItem.create(myItem));\n- * WriteBatch.create(myTable, deleteItem(Key.of(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this batch applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class WriteBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableWriteOperation<T>> writeOperations;\n-\n-    private WriteBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.writeOperations = Collections.unmodifiableList(builder.writeOperations);\n-    }\n-\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       Collection<BatchableWriteOperation<T>> writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n-    }\n-\n-    @SafeVarargs\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       BatchableWriteOperation<T>... writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n+public class WriteBatch {\n+    private final String tableName;\n+    private final List<WriteRequest> writeRequests;\n+\n+    private WriteBatch(String tableName, List<Supplier<WriteRequest>> suppliers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDY4Ng==", "bodyText": "Immutable list?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377900686", "createdAt": "2020-02-11T21:11:36Z", "author": {"login": "zoewangg"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -16,88 +16,40 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableWriteOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n import software.amazon.awssdk.services.dynamodb.model.WriteRequest;\n \n-/**\n- * Encapsulates a single write batch that can form a list of write batches that go into a {@link BatchWriteItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * WriteBatch.create(myTable, putItem.create(myItem));\n- * WriteBatch.create(myTable, deleteItem(Key.of(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this batch applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class WriteBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableWriteOperation<T>> writeOperations;\n-\n-    private WriteBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.writeOperations = Collections.unmodifiableList(builder.writeOperations);\n-    }\n-\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       Collection<BatchableWriteOperation<T>> writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n-    }\n-\n-    @SafeVarargs\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       BatchableWriteOperation<T>... writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n+public class WriteBatch {\n+    private final String tableName;\n+    private final List<WriteRequest> writeRequests;\n+\n+    private WriteBatch(String tableName, List<Supplier<WriteRequest>> suppliers) {\n+        this.tableName = tableName;\n+        this.writeRequests = suppliers.stream()\n+                                      .map(Supplier::get)\n+                                      .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b4f497f1686485b299d07bfbf48dca3c01ee13"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzkwMTA3", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#pullrequestreview-357790107", "createdAt": "2020-02-12T21:11:49Z", "commit": {"oid": "5cb33e117ec1730dd7dc36a537a1bff8399b0ce1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "committedDate": "2020-02-12T21:48:11Z", "message": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cb33e117ec1730dd7dc36a537a1bff8399b0ce1", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/5cb33e117ec1730dd7dc36a537a1bff8399b0ce1", "committedDate": "2020-02-12T19:58:05Z", "message": "Dynamodb-enhanced [preview]: Removed create from enhanced requests and made builder pattern consistent."}, "afterCommit": {"oid": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "committedDate": "2020-02-12T21:48:11Z", "message": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eddde76e0fcc4e673f68b4c7f616cd9b44ecf08e", "author": {"user": {"login": "cenedhryn", "name": "Anna-Karin Salander"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/eddde76e0fcc4e673f68b4c7f616cd9b44ecf08e", "committedDate": "2020-02-12T22:09:56Z", "message": "Merge branch 'master' into salande/ddbmapper-table-op-split-atomic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}