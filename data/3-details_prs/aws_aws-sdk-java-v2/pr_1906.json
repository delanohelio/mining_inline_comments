{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTMxNzIz", "number": 1906, "title": "Metric utils test", "bodyText": "Description\nFollow-up on review comment on #1882\nMotivation and Context\n\n\nTesting\n\n\n\nScreenshots (if appropriate)\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-06-17T22:39:10Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906", "merged": true, "mergeCommit": {"oid": "27fbcfd88a4f5170a9a982563ca6263a8b890ffc"}, "closed": true, "closedAt": "2020-06-18T16:39:45Z", "author": {"login": "dagnir"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsR_v7ABqjM0NTU3MDE1MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsgzcRAFqTQzMzQzODkwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92949125178739b98088cc315a4bc7e3548ee40e", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/92949125178739b98088cc315a4bc7e3548ee40e", "committedDate": "2020-06-17T22:56:04Z", "message": "fixup! Add tests for MetricUtils"}, "afterCommit": {"oid": "1ce3eec2d1790091856bdb9c4196077692497b92", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/1ce3eec2d1790091856bdb9c4196077692497b92", "committedDate": "2020-06-17T22:56:38Z", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "committedDate": "2020-06-18T15:19:38Z", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ce3eec2d1790091856bdb9c4196077692497b92", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/1ce3eec2d1790091856bdb9c4196077692497b92", "committedDate": "2020-06-17T22:56:38Z", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882"}, "afterCommit": {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "committedDate": "2020-06-18T15:19:38Z", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDMxMjUx", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#pullrequestreview-433431251", "createdAt": "2020-06-18T16:02:40Z", "commit": {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowMjo0MFrOGl2GFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowMjo0MFrOGl2GFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjc4OA==", "bodyText": "Why do we report the same metric with two different values?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#discussion_r442336788", "createdAt": "2020-06-18T16:02:40Z", "author": {"login": "cenedhryn"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/internal/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Optional;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientOption;\n+import software.amazon.awssdk.core.http.HttpResponseHandler;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.utils.Pair;\n+\n+public class MetricUtilsTest {\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testMeasureDuration_returnsAccurateDurationInformation() {\n+        long testDurationNanos = Duration.ofMillis(1).toNanos();\n+\n+        Pair<Object, Duration> measuredExecute = MetricUtils.measureDuration(() -> {\n+            long start = System.nanoTime();\n+            // spin thread instead of Thread.sleep() for a bit more accuracy...\n+            while (System.nanoTime() - start < testDurationNanos) {\n+            }\n+            return \"foo\";\n+        });\n+\n+        assertThat(measuredExecute.right()).isGreaterThanOrEqualTo(Duration.ofNanos(testDurationNanos));\n+    }\n+\n+    @Test\n+    public void testMeasureDuration_returnsCallableReturnValue() {\n+        String result = \"foo\";\n+\n+        Pair<String, Duration> measuredExecute = MetricUtils.measureDuration(() -> result);\n+\n+        assertThat(measuredExecute.left()).isEqualTo(result);\n+    }\n+\n+    @Test\n+    public void testMeasureDurationUnsafe_doesNotWrapException() throws Exception {\n+        IOException ioe = new IOException(\"boom\");\n+\n+        thrown.expect(IOException.class);\n+        try {\n+            MetricUtils.measureDurationUnsafe(() -> {\n+                throw ioe;\n+            });\n+        } catch (IOException caught) {\n+            assertThat(caught).isSameAs(ioe);\n+            throw caught;\n+        }\n+    }\n+\n+    @Test\n+    public void testMeasureDuration_doesNotWrapException() {\n+        RuntimeException e = new RuntimeException(\"boom\");\n+\n+        thrown.expect(RuntimeException.class);\n+\n+        try {\n+            MetricUtils.measureDuration(() -> {\n+                throw e;\n+            });\n+        } catch (RuntimeException caught) {\n+            assertThat(caught).isSameAs(e);\n+            throw caught;\n+        }\n+    }\n+\n+    @Test\n+    public void testCollectHttpMetrics_collectsAllExpectedMetrics() {\n+        MetricCollector mockCollector = mock(MetricCollector.class);\n+\n+        int statusCode = 200;\n+        String requestId = \"request-id\";\n+        String amznRequestId = \"amzn-request-id\";\n+        String requestId2 = \"request-id-2\";\n+\n+        SdkHttpFullResponse response = SdkHttpFullResponse.builder()\n+                .statusCode(statusCode)\n+                .putHeader(\"x-amz-request-id\", requestId)\n+                .putHeader(HttpResponseHandler.X_AMZN_REQUEST_ID_HEADER, amznRequestId)\n+                .putHeader(HttpResponseHandler.X_AMZ_ID_2_HEADER, requestId2)\n+                .build();\n+\n+        MetricUtils.collectHttpMetrics(mockCollector, response);\n+\n+        verify(mockCollector).reportMetric(CoreMetric.HTTP_STATUS_CODE, statusCode);\n+        verify(mockCollector).reportMetric(CoreMetric.AWS_REQUEST_ID, requestId);\n+        verify(mockCollector).reportMetric(CoreMetric.AWS_REQUEST_ID, amznRequestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDM4OTA0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#pullrequestreview-433438904", "createdAt": "2020-06-18T16:11:54Z", "commit": {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2615, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}