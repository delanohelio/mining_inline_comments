{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDU5OTc5", "number": 1926, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjozMzo0NVrOEKTKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjozMzo0NVrOEKTKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM1MTkxOnYy", "diffSide": "RIGHT", "path": "docs/design/core/metrics/Design.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjozMzo0NVrOGrQwRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNToxOFrOGrR9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjQ1Mg==", "bodyText": "Should we make it case insensitive?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1926#discussion_r448016452", "createdAt": "2020-06-30T22:33:45Z", "author": {"login": "zoewangg"}, "path": "docs/design/core/metrics/Design.md", "diffHunk": "@@ -60,107 +60,174 @@ standard metrics collected by the SDK.\n \n ## Enabling Metrics\n \n-Metrics feature is disabled by default. Metrics can be enabled at client level in the following ways.\n-\n-### Feature Flags (Metrics Provider)\n-\n-* SDK exposes an [interface](prototype/MetricConfigurationProvider.java) to enable the metrics feature and specify\n-  options to configure the metrics behavior.\n-* SDK provides an implementation of this interface based on system properties.\n-* Here are the system properties SDK supports:\n-  - **aws.javasdk2x.metrics.enabled** - Metrics feature is enabled if this system property is set\n-  - **aws.javasdk2x.metrics.category** - Comma separated set of MetricCategory that are enabled for collection\n-* SDK calls the methods in this interface for each request ie, enabled() method is called for every request to determine\n-  if the metrics feature is enabled or not (similarly for other configuration options).\n-  -  This allows customers to control metrics behavior in a more flexible manner; for example using an external database\n-     like DynamoDB to dynamically control metrics collection. This is useful to enable/disable metrics feature and\n-     control metrics options at runtime without the need to make code changes or re-deploy the application.\n-* As the interface methods are called for each request, it is recommended for the implementations to run expensive tasks\n-  asynchronously in the background, cache the results and periodically refresh the results.\n+The metrics feature is disabled by default. Metrics can be enabled and configured in the following ways:\n+\n+### Option 1: Configuring MetricPublishers on a request\n+\n+A publisher can be configured directly on the `RequestOverrideConfiguration`:\n+\n+```java\n+MetricPublisher metricPublisher = CloudWatchMetricPublisher.create();\n+DynamoDbClient dynamoDb = DynamoDbClient.create();\n+dynamoDb.listTables(ListTablesRequest.builder()\n+                                     .overrideConfiguration(c -> c.addMetricPublisher(metricPublisher))\n+                                     .build());\n+```\n+\n+The methods exposed for setting metric publishers follow the pattern established by `ExecutionInterceptor`s:\n+\n+```java\n+class RequestOverrideConfiguration {\n+    // ...\n+    class Builder {\n+        // ...\n+        Builder metricPublishers(List<MetricPublisher> metricsPublishers);\n+        Builder addMetricPublisher(MetricPublisher metricsPublisher);\n+    }\n+}\n+```\n+\n+### Option 2: Configuring MetricPublishers on a client\n+\n+A publisher can be configured directly on the `ClientOverrideConfiguration`. A publisher specified in this way is used\n+with lower priority than **Option 1** above.\n \n ```java\n-ClientOverrideConfiguration config = ClientOverrideConfiguration\n-    .builder()\n-    // If this is not set, SDK uses the default chain with system property\n-    .metricConfigurationProvider(new SystemSettingsMetricConfigurationProvider())\n-    .build();\n-\n-// Set the ClientOverrideConfiguration instance on the client builder\n-CodePipelineAsyncClient asyncClient =\n-    CodePipelineAsyncClient\n-        .builder()\n-        .overrideConfiguration(config)\n-        .build();\n+MetricPublisher metricPublisher = CloudWatchMetricPublisher.create();\n+DynamoDbClient dynamoDb = DynamoDbClient.builder()\n+                                        .overrideConfiguration(c -> c.addMetricPublisher(metricPublisher))\n+                                        .build();\n ```\n \n-### Metrics Provider Chain\n+The methods exposed for setting metric publishers follow the pattern established by `ExecutionInterceptor`s:\n+\n+```java\n+class ClientOverrideConfiguration {\n+    // ...\n+    class Builder {\n+        // ...\n+        Builder metricPublishers(List<MetricPublisher> metricsPublishers);\n+        Builder addMetricPublisher(MetricPublisher metricsPublisher);\n+    }\n+}\n+```\n+\n+**Note:** As with the `httpClient` setting, calling `close()` on the `DynamoDbClient` *will not* close the configured\n+`metricPublishers`. You must close the `metricPublishers` yourself when you're done using them.\n+\n+### Option 3: Configuring MetricPublishers using System Properties or Environment Variables\n+\n+This option allows the customer to enable metric publishing by default, without needing to enable it via **Option 1** \n+or **Option 2** above. This means that a customer can enable metrics without needing to make a change to their runtime \n+code.\n+\n+This option is enabled using an environment variable or system property. If both are specified, the system property \n+will be used. If metrics are enabled at the client level using **Option 2** above, this option is ignored. Overriding \n+the metric publisher at request time using **Option 1** overrides any publishers that have been enabled globally.\n+\n+**System Property:** `aws.metricPublishingEnabled=true` \n+\n+**Environment Variable:** `AWS_METRIC_PUBLISHING_ENABLED=true`\n+\n+The value specified must be one of `\"true\"` or `\"false\"`. Specifying any other string values will result in ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8c0319401ad18d3b040bd27863b126b2592f73"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjIzNg==", "bodyText": "+1, as we talked about, though, we should use what other booleans do, first and foremost.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1926#discussion_r448036236", "createdAt": "2020-06-30T23:35:18Z", "author": {"login": "millems"}, "path": "docs/design/core/metrics/Design.md", "diffHunk": "@@ -60,107 +60,174 @@ standard metrics collected by the SDK.\n \n ## Enabling Metrics\n \n-Metrics feature is disabled by default. Metrics can be enabled at client level in the following ways.\n-\n-### Feature Flags (Metrics Provider)\n-\n-* SDK exposes an [interface](prototype/MetricConfigurationProvider.java) to enable the metrics feature and specify\n-  options to configure the metrics behavior.\n-* SDK provides an implementation of this interface based on system properties.\n-* Here are the system properties SDK supports:\n-  - **aws.javasdk2x.metrics.enabled** - Metrics feature is enabled if this system property is set\n-  - **aws.javasdk2x.metrics.category** - Comma separated set of MetricCategory that are enabled for collection\n-* SDK calls the methods in this interface for each request ie, enabled() method is called for every request to determine\n-  if the metrics feature is enabled or not (similarly for other configuration options).\n-  -  This allows customers to control metrics behavior in a more flexible manner; for example using an external database\n-     like DynamoDB to dynamically control metrics collection. This is useful to enable/disable metrics feature and\n-     control metrics options at runtime without the need to make code changes or re-deploy the application.\n-* As the interface methods are called for each request, it is recommended for the implementations to run expensive tasks\n-  asynchronously in the background, cache the results and periodically refresh the results.\n+The metrics feature is disabled by default. Metrics can be enabled and configured in the following ways:\n+\n+### Option 1: Configuring MetricPublishers on a request\n+\n+A publisher can be configured directly on the `RequestOverrideConfiguration`:\n+\n+```java\n+MetricPublisher metricPublisher = CloudWatchMetricPublisher.create();\n+DynamoDbClient dynamoDb = DynamoDbClient.create();\n+dynamoDb.listTables(ListTablesRequest.builder()\n+                                     .overrideConfiguration(c -> c.addMetricPublisher(metricPublisher))\n+                                     .build());\n+```\n+\n+The methods exposed for setting metric publishers follow the pattern established by `ExecutionInterceptor`s:\n+\n+```java\n+class RequestOverrideConfiguration {\n+    // ...\n+    class Builder {\n+        // ...\n+        Builder metricPublishers(List<MetricPublisher> metricsPublishers);\n+        Builder addMetricPublisher(MetricPublisher metricsPublisher);\n+    }\n+}\n+```\n+\n+### Option 2: Configuring MetricPublishers on a client\n+\n+A publisher can be configured directly on the `ClientOverrideConfiguration`. A publisher specified in this way is used\n+with lower priority than **Option 1** above.\n \n ```java\n-ClientOverrideConfiguration config = ClientOverrideConfiguration\n-    .builder()\n-    // If this is not set, SDK uses the default chain with system property\n-    .metricConfigurationProvider(new SystemSettingsMetricConfigurationProvider())\n-    .build();\n-\n-// Set the ClientOverrideConfiguration instance on the client builder\n-CodePipelineAsyncClient asyncClient =\n-    CodePipelineAsyncClient\n-        .builder()\n-        .overrideConfiguration(config)\n-        .build();\n+MetricPublisher metricPublisher = CloudWatchMetricPublisher.create();\n+DynamoDbClient dynamoDb = DynamoDbClient.builder()\n+                                        .overrideConfiguration(c -> c.addMetricPublisher(metricPublisher))\n+                                        .build();\n ```\n \n-### Metrics Provider Chain\n+The methods exposed for setting metric publishers follow the pattern established by `ExecutionInterceptor`s:\n+\n+```java\n+class ClientOverrideConfiguration {\n+    // ...\n+    class Builder {\n+        // ...\n+        Builder metricPublishers(List<MetricPublisher> metricsPublishers);\n+        Builder addMetricPublisher(MetricPublisher metricsPublisher);\n+    }\n+}\n+```\n+\n+**Note:** As with the `httpClient` setting, calling `close()` on the `DynamoDbClient` *will not* close the configured\n+`metricPublishers`. You must close the `metricPublishers` yourself when you're done using them.\n+\n+### Option 3: Configuring MetricPublishers using System Properties or Environment Variables\n+\n+This option allows the customer to enable metric publishing by default, without needing to enable it via **Option 1** \n+or **Option 2** above. This means that a customer can enable metrics without needing to make a change to their runtime \n+code.\n+\n+This option is enabled using an environment variable or system property. If both are specified, the system property \n+will be used. If metrics are enabled at the client level using **Option 2** above, this option is ignored. Overriding \n+the metric publisher at request time using **Option 1** overrides any publishers that have been enabled globally.\n+\n+**System Property:** `aws.metricPublishingEnabled=true` \n+\n+**Environment Variable:** `AWS_METRIC_PUBLISHING_ENABLED=true`\n+\n+The value specified must be one of `\"true\"` or `\"false\"`. Specifying any other string values will result in ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjQ1Mg=="}, "originalCommit": {"oid": "3b8c0319401ad18d3b040bd27863b126b2592f73"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4176, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}