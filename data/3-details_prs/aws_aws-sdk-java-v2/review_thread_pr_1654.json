{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MzExNjk3", "number": 1654, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo0ODo0NlrODg1I1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyNjowOFrODhJySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzUxNjM4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchGetItemEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo0ODo0NlrOFrQGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNzoyNlrOFrXaeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5Njk2NA==", "bodyText": "This looks like a good candidate for a utils class, and can be re-used in other classes that do a similar thing.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380896964", "createdAt": "2020-02-18T19:48:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -66,14 +62,18 @@ public int hashCode() {\n         return readBatches != null ? readBatches.hashCode() : 0;\n     }\n \n+    private static List<ReadBatch> getListIfExist(List<ReadBatch> readBatches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjY5Ng==", "bodyText": "Yes, good idea to reduce code duplication", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016696", "createdAt": "2020-02-19T00:37:26Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -66,14 +62,18 @@ public int hashCode() {\n         return readBatches != null ? readBatches.hashCode() : 0;\n     }\n \n+    private static List<ReadBatch> getListIfExist(List<ReadBatch> readBatches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5Njk2NA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzUyMTMxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchWriteItemEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1MDowNFrOFrQJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNzozM1rOFrXamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5Nzc4OA==", "bodyText": "Should this be generic and in utils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380897788", "createdAt": "2020-02-18T19:50:04Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchWriteItemEnhancedRequest.java", "diffHunk": "@@ -66,14 +62,18 @@ public int hashCode() {\n         return writeBatches != null ? writeBatches.hashCode() : 0;\n     }\n \n+    private static List<WriteBatch> getListIfExist(List<WriteBatch> writeBatches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjcyOA==", "bodyText": "yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016728", "createdAt": "2020-02-19T00:37:33Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/BatchWriteItemEnhancedRequest.java", "diffHunk": "@@ -66,14 +62,18 @@ public int hashCode() {\n         return writeBatches != null ? writeBatches.hashCode() : 0;\n     }\n \n+    private static List<WriteBatch> getListIfExist(List<WriteBatch> writeBatches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5Nzc4OA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzUzOTg1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NTo0OVrOFrQVxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNzo0N1rOFrXa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMDgwNA==", "bodyText": "Could we make this generic and put it in utils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380900804", "createdAt": "2020-02-18T19:55:49Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -65,17 +64,34 @@ public int hashCode() {\n         return transactGetItems != null ? transactGetItems.hashCode() : 0;\n     }\n \n+    private List<TransactGetItem> getListIfExist(List<Supplier<TransactGetItem>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjc4Ng==", "bodyText": "yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016786", "createdAt": "2020-02-19T00:37:47Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -65,17 +64,34 @@ public int hashCode() {\n         return transactGetItems != null ? transactGetItems.hashCode() : 0;\n     }\n \n+    private List<TransactGetItem> getListIfExist(List<Supplier<TransactGetItem>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMDgwNA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0MTE3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NjoxNFrOFrQWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozODowMVrOFrXbDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMTAwNQ==", "bodyText": "I think our pattern is to have this call the other overloaded implementation of addGetItem rather than duplicate the code here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380901005", "createdAt": "2020-02-18T19:56:14Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -65,17 +64,34 @@ public int hashCode() {\n         return transactGetItems != null ? transactGetItems.hashCode() : 0;\n     }\n \n+    private List<TransactGetItem> getListIfExist(List<Supplier<TransactGetItem>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }\n+\n     public static final class Builder {\n         private List<Supplier<TransactGetItem>> itemSupplierList = new ArrayList<>();\n \n         private Builder() {\n         }\n \n-        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource, GetItemEnhancedRequest<T> request) {\n+        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource, GetItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, GetItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource,\n+                                      Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n+            GetItemEnhancedRequest.Builder builder = GetItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, GetItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjg0Nw==", "bodyText": "yes, updating", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016847", "createdAt": "2020-02-19T00:38:01Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -65,17 +64,34 @@ public int hashCode() {\n         return transactGetItems != null ? transactGetItems.hashCode() : 0;\n     }\n \n+    private List<TransactGetItem> getListIfExist(List<Supplier<TransactGetItem>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }\n+\n     public static final class Builder {\n         private List<Supplier<TransactGetItem>> itemSupplierList = new ArrayList<>();\n \n         private Builder() {\n         }\n \n-        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource, GetItemEnhancedRequest<T> request) {\n+        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource, GetItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, GetItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addGetItem(MappedTableResource<T> mappedTableResource,\n+                                      Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n+            GetItemEnhancedRequest.Builder builder = GetItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, GetItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMTAwNQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0Mzg4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NzowMlrOFrQYKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NzowMlrOFrQYKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMTQxOQ==", "bodyText": "Could we generify and put in utils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380901419", "createdAt": "2020-02-18T19:57:02Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -67,6 +66,15 @@ public int hashCode() {\n         return transactWriteItems != null ? transactWriteItems.hashCode() : 0;\n     }\n \n+    private List<TransactWriteItem> getListIfExist(List<Supplier<TransactWriteItem>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0NTcwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NzozNFrOFrQZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1NzozNFrOFrQZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMTY5Mg==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380901692", "createdAt": "2020-02-18T19:57:34Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -78,21 +86,55 @@ private Builder() {\n             return this;\n         }\n \n-        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest<T> request) {\n+        public <T> Builder addConditionCheck(MappedTableResource<T> mappedTableResource,\n+                                             Consumer<ConditionCheck.Builder> requestConsumer) {\n+            ConditionCheck.Builder builder = ConditionCheck.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, builder.build()));\n+            return this;\n+        }\n+\n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource,\n+                                      Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource,\n+                                                                 DeleteItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0NjcwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1Nzo1MVrOFrQZ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1Nzo1MVrOFrQZ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMTg1NQ==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380901855", "createdAt": "2020-02-18T19:57:51Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -78,21 +86,55 @@ private Builder() {\n             return this;\n         }\n \n-        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest<T> request) {\n+        public <T> Builder addConditionCheck(MappedTableResource<T> mappedTableResource,\n+                                             Consumer<ConditionCheck.Builder> requestConsumer) {\n+            ConditionCheck.Builder builder = ConditionCheck.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, builder.build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0NzY4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1ODowNFrOFrQacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1ODowNFrOFrQacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMjAwMA==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380902000", "createdAt": "2020-02-18T19:58:04Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -78,21 +86,55 @@ private Builder() {\n             return this;\n         }\n \n-        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest<T> request) {\n+        public <T> Builder addConditionCheck(MappedTableResource<T> mappedTableResource,\n+                                             Consumer<ConditionCheck.Builder> requestConsumer) {\n+            ConditionCheck.Builder builder = ConditionCheck.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, builder.build()));\n+            return this;\n+        }\n+\n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource,\n+                                      Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource,\n+                                                                 DeleteItemOperation.create(builder.build())));\n+            return this;\n+        }\n+\n         public <T> Builder addPutItem(MappedTableResource<T> mappedTableResource, PutItemEnhancedRequest<T> request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, PutItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addPutItem(MappedTableResource<T> mappedTableResource, Class<? extends T> itemClass,\n+                                      Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n+            PutItemEnhancedRequest.Builder<T> builder = PutItemEnhancedRequest.builder(itemClass);\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, PutItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU0ODM0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1ODoxNVrOFrQa1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1ODoxNVrOFrQa1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMjEwMw==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380902103", "createdAt": "2020-02-18T19:58:15Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -78,21 +86,55 @@ private Builder() {\n             return this;\n         }\n \n-        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest<T> request) {\n+        public <T> Builder addConditionCheck(MappedTableResource<T> mappedTableResource,\n+                                             Consumer<ConditionCheck.Builder> requestConsumer) {\n+            ConditionCheck.Builder builder = ConditionCheck.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, builder.build()));\n+            return this;\n+        }\n+\n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource, DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addDeleteItem(MappedTableResource<T> mappedTableResource,\n+                                      Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource,\n+                                                                 DeleteItemOperation.create(builder.build())));\n+            return this;\n+        }\n+\n         public <T> Builder addPutItem(MappedTableResource<T> mappedTableResource, PutItemEnhancedRequest<T> request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, PutItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addPutItem(MappedTableResource<T> mappedTableResource, Class<? extends T> itemClass,\n+                                      Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n+            PutItemEnhancedRequest.Builder<T> builder = PutItemEnhancedRequest.builder(itemClass);\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, PutItemOperation.create(builder.build())));\n+            return this;\n+        }\n+\n         public <T> Builder addUpdateItem(MappedTableResource<T> mappedTableResource, UpdateItemEnhancedRequest<T> request) {\n             itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource, UpdateItemOperation.create(request)));\n             return this;\n         }\n \n+        public <T> Builder addUpdateItem(MappedTableResource<T> mappedTableResource, Class<? extends T> itemClass,\n+                                         Consumer<UpdateItemEnhancedRequest.Builder<T>> requestConsumer) {\n+            UpdateItemEnhancedRequest.Builder<T> builder = UpdateItemEnhancedRequest.builder(itemClass);\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateTransactWriteItem(mappedTableResource,\n+                                                                 UpdateItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU1MjYxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1OToyOFrOFrQdeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0NjoyM1rOFrXj_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMjc3Ng==", "bodyText": "Can we generify and put in utils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380902776", "createdAt": "2020-02-18T19:59:28Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -82,36 +81,57 @@ public int hashCode() {\n     public interface Builder<T> {\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n-        Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request);\n+        Builder<T> addDeleteItem(DeleteItemEnhancedRequest request);\n+\n+        Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer);\n \n         Builder<T> addPutItem(PutItemEnhancedRequest<T> request);\n \n+        Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer);\n+\n         WriteBatch build();\n     }\n \n     private static final class BuilderImpl<T> implements Builder<T> {\n \n+        private Class<? extends T> itemClass;\n         private List<Supplier<WriteRequest>> itemSupplierList = new ArrayList<>();\n         private MappedTableResource<T> mappedTableResource;\n \n-        private BuilderImpl() {\n+        private BuilderImpl(Class<? extends T> itemClass) {\n+            this.itemClass = itemClass;\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n             this.mappedTableResource = mappedTableResource;\n             return this;\n         }\n \n-        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request) {\n+        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource,\n+                                                            DeleteItemOperation.create(builder.build())));\n+            return this;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTEzNA==", "bodyText": "Think this comment belongs somewhere else.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381019134", "createdAt": "2020-02-19T00:46:23Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -82,36 +81,57 @@ public int hashCode() {\n     public interface Builder<T> {\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n-        Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request);\n+        Builder<T> addDeleteItem(DeleteItemEnhancedRequest request);\n+\n+        Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer);\n \n         Builder<T> addPutItem(PutItemEnhancedRequest<T> request);\n \n+        Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer);\n+\n         WriteBatch build();\n     }\n \n     private static final class BuilderImpl<T> implements Builder<T> {\n \n+        private Class<? extends T> itemClass;\n         private List<Supplier<WriteRequest>> itemSupplierList = new ArrayList<>();\n         private MappedTableResource<T> mappedTableResource;\n \n-        private BuilderImpl() {\n+        private BuilderImpl(Class<? extends T> itemClass) {\n+            this.itemClass = itemClass;\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n             this.mappedTableResource = mappedTableResource;\n             return this;\n         }\n \n-        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request) {\n+        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource,\n+                                                            DeleteItemOperation.create(builder.build())));\n+            return this;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMjc3Ng=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU1NDA1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOTo1OTo1NFrOFrQeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozODo0NlrOFrXb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzAxMQ==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380903011", "createdAt": "2020-02-18T19:59:54Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -82,36 +81,57 @@ public int hashCode() {\n     public interface Builder<T> {\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n-        Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request);\n+        Builder<T> addDeleteItem(DeleteItemEnhancedRequest request);\n+\n+        Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer);\n \n         Builder<T> addPutItem(PutItemEnhancedRequest<T> request);\n \n+        Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer);\n+\n         WriteBatch build();\n     }\n \n     private static final class BuilderImpl<T> implements Builder<T> {\n \n+        private Class<? extends T> itemClass;\n         private List<Supplier<WriteRequest>> itemSupplierList = new ArrayList<>();\n         private MappedTableResource<T> mappedTableResource;\n \n-        private BuilderImpl() {\n+        private BuilderImpl(Class<? extends T> itemClass) {\n+            this.itemClass = itemClass;\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n             this.mappedTableResource = mappedTableResource;\n             return this;\n         }\n \n-        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request) {\n+        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource,\n+                                                            DeleteItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzA4Mw==", "bodyText": "yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381017083", "createdAt": "2020-02-19T00:38:46Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -82,36 +81,57 @@ public int hashCode() {\n     public interface Builder<T> {\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n-        Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request);\n+        Builder<T> addDeleteItem(DeleteItemEnhancedRequest request);\n+\n+        Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer);\n \n         Builder<T> addPutItem(PutItemEnhancedRequest<T> request);\n \n+        Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer);\n+\n         WriteBatch build();\n     }\n \n     private static final class BuilderImpl<T> implements Builder<T> {\n \n+        private Class<? extends T> itemClass;\n         private List<Supplier<WriteRequest>> itemSupplierList = new ArrayList<>();\n         private MappedTableResource<T> mappedTableResource;\n \n-        private BuilderImpl() {\n+        private BuilderImpl(Class<? extends T> itemClass) {\n+            this.itemClass = itemClass;\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n             this.mappedTableResource = mappedTableResource;\n             return this;\n         }\n \n-        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request) {\n+        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource,\n+                                                            DeleteItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzAxMQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU1NDY0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMDowNFrOFrQexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMDowNFrOFrQexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzEwOQ==", "bodyText": "Could we call the other overloaded method and not duplicate code here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380903109", "createdAt": "2020-02-18T20:00:04Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -82,36 +81,57 @@ public int hashCode() {\n     public interface Builder<T> {\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n-        Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request);\n+        Builder<T> addDeleteItem(DeleteItemEnhancedRequest request);\n+\n+        Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer);\n \n         Builder<T> addPutItem(PutItemEnhancedRequest<T> request);\n \n+        Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer);\n+\n         WriteBatch build();\n     }\n \n     private static final class BuilderImpl<T> implements Builder<T> {\n \n+        private Class<? extends T> itemClass;\n         private List<Supplier<WriteRequest>> itemSupplierList = new ArrayList<>();\n         private MappedTableResource<T> mappedTableResource;\n \n-        private BuilderImpl() {\n+        private BuilderImpl(Class<? extends T> itemClass) {\n+            this.itemClass = itemClass;\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n             this.mappedTableResource = mappedTableResource;\n             return this;\n         }\n \n-        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest<T> request) {\n+        public Builder<T> addDeleteItem(DeleteItemEnhancedRequest request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, DeleteItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addDeleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n+            DeleteItemEnhancedRequest.Builder builder = DeleteItemEnhancedRequest.builder();\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource,\n+                                                            DeleteItemOperation.create(builder.build())));\n+            return this;\n+        }\n+\n         public Builder<T> addPutItem(PutItemEnhancedRequest<T> request) {\n             itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, PutItemOperation.create(request)));\n             return this;\n         }\n \n+        public Builder<T> addPutItem(Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n+            PutItemEnhancedRequest.Builder<T> builder = PutItemEnhancedRequest.builder(this.itemClass);\n+            requestConsumer.accept(builder);\n+            itemSupplierList.add(() -> generateWriteRequest(() -> mappedTableResource, PutItemOperation.create(builder.build())));\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU1NTQxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMDoxOVrOFrQfNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMDoxOVrOFrQfNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzIyMQ==", "bodyText": "Can we generify and put in utils", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380903221", "createdAt": "2020-02-18T20:00:19Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -123,4 +143,13 @@ private WriteRequest generateWriteRequest(Supplier<MappedTableResource<T>> mappe\n                                                   mappedTableResourceSupplier.get().mapperExtension());\n         }\n     }\n+\n+    private List<WriteRequest> getListIfExist(List<Supplier<WriteRequest>> itemSupplierList) {\n+        if (itemSupplierList == null || itemSupplierList.isEmpty()) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(itemSupplierList.stream()\n+                                                            .map(Supplier::get)\n+                                                            .collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU2Mzc4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMjoyOVrOFrQkXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNTo0NFrOFrXYuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDU0MA==", "bodyText": "My IDE is showing this method as not having coverage.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380904540", "createdAt": "2020-02-18T20:02:29Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -49,18 +50,35 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkPublisher<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjI0OQ==", "bodyText": "Mine too, missed that. Adding test coverage.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016249", "createdAt": "2020-02-19T00:35:44Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -49,18 +50,35 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkPublisher<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDU0MA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU2NDIxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMjozN1rOFrQkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNTo1M1rOFrXY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDYwOA==", "bodyText": "My IDE is showing this method as not having coverage.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380904608", "createdAt": "2020-02-18T20:02:37Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -49,18 +50,35 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkPublisher<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     default CompletableFuture<BatchWriteResult> batchWriteItem(BatchWriteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    default CompletableFuture<BatchWriteResult> batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjI5NQ==", "bodyText": "fixed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016295", "createdAt": "2020-02-19T00:35:53Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -49,18 +50,35 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkPublisher<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     default CompletableFuture<BatchWriteResult> batchWriteItem(BatchWriteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    default CompletableFuture<BatchWriteResult> batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDYwOA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU2NjE5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMzoxOVrOFrQl5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozNjozNFrOFrXZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDkzNA==", "bodyText": "My IDE is showing this method as not having coverage.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380904934", "createdAt": "2020-02-18T20:03:19Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedClient.java", "diffHunk": "@@ -48,18 +49,34 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkIterable<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     default BatchWriteResult batchWriteItem(BatchWriteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    default BatchWriteResult batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjQ2OA==", "bodyText": "fixed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381016468", "createdAt": "2020-02-19T00:36:34Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbEnhancedClient.java", "diffHunk": "@@ -48,18 +49,34 @@\n         throw new UnsupportedOperationException();\n     }\n \n+    default SdkIterable<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     default BatchWriteResult batchWriteItem(BatchWriteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    default BatchWriteResult batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Builder> requestConsumer) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNDkzNA=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU3MDY3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DefaultDynamoDbIndexTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowNDo1NVrOFrQo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0MDo0NFrOFrXeAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNTcyMQ==", "bodyText": "This does not appear to be used. Can we remove it?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380905721", "createdAt": "2020-02-18T20:04:55Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DefaultDynamoDbIndexTest.java", "diffHunk": "@@ -37,6 +38,9 @@\n     @Mock\n     private MapperExtension mockMapperExtension;\n \n+    @Mock\n+    private PaginatedIndexOperation<?,?,?,?> mockPaginatedOperation;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzYwMA==", "bodyText": "yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381017600", "createdAt": "2020-02-19T00:40:44Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DefaultDynamoDbIndexTest.java", "diffHunk": "@@ -37,6 +38,9 @@\n     @Mock\n     private MapperExtension mockMapperExtension;\n \n+    @Mock\n+    private PaginatedIndexOperation<?,?,?,?> mockPaginatedOperation;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNTcyMQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU3OTQ3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowNzo1OVrOFrQuhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0Nzo0NlrOFraQ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzE0Mg==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380907142", "createdAt": "2020-02-18T20:07:59Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -228,6 +226,25 @@ public void deleteTable() {\n                                 .join();\n     }\n \n+    @Test\n+    public void getItemInterfaceToOperationSucceeds() {\n+        mappedTable.getItem(r -> r.key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))).join();\n+        mappedTable.getItem(GetItemEnhancedRequest.builder()\n+                                                  .key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))\n+                                                  .build()).join();\n+    }\n+\n+    @Test\n+    public void putItemInterfaceToOperationSucceeds() {\n+        Record record = new Record()\n+            .setId(\"id-value\")\n+            .setSort(\"sort-value\")\n+            .setAttribute(\"one\");\n+\n+        mappedTable.putItem(Record.class, r -> r.item(record)).join();\n+        mappedTable.putItem(PutItemEnhancedRequest.builder(Record.class).item(record).build()).join();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzQwNg==", "bodyText": "I could not put my heart into the wiring tests after all and I removed them. All wiring combinations are still tested (no unused interface methods). We can always rethink later.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381063406", "createdAt": "2020-02-19T03:47:46Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -228,6 +226,25 @@ public void deleteTable() {\n                                 .join();\n     }\n \n+    @Test\n+    public void getItemInterfaceToOperationSucceeds() {\n+        mappedTable.getItem(r -> r.key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))).join();\n+        mappedTable.getItem(GetItemEnhancedRequest.builder()\n+                                                  .key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))\n+                                                  .build()).join();\n+    }\n+\n+    @Test\n+    public void putItemInterfaceToOperationSucceeds() {\n+        Record record = new Record()\n+            .setId(\"id-value\")\n+            .setSort(\"sort-value\")\n+            .setAttribute(\"one\");\n+\n+        mappedTable.putItem(Record.class, r -> r.item(record)).join();\n+        mappedTable.putItem(PutItemEnhancedRequest.builder(Record.class).item(record).build()).join();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzE0Mg=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU4MjY3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOTowMlrOFrQwgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOTowMlrOFrQwgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzY1MQ==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380907651", "createdAt": "2020-02-18T20:09:02Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -376,11 +381,17 @@ public void putWithConditionThatFails() {\n                    .join();\n     }\n \n+    @Test\n+    public void deleteItemInterfaceToOperationSucceeds() {\n+        mappedTable.deleteItem(r -> r.key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))).join();\n+        mappedTable.deleteItem(DeleteItemEnhancedRequest.builder()\n+                                                        .key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))\n+                                                        .build()).join();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU4MzQ0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOToxMlrOFrQw6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOToxMlrOFrQw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzc1NQ==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380907755", "createdAt": "2020-02-18T20:09:12Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -436,6 +451,17 @@ public void deleteWithConditionThatFails() {\n                                                .build()).join();\n     }\n \n+    @Test\n+    public void updateItemInterfaceToOperationSucceeds() {\n+        Record record = new Record()\n+            .setId(\"id-value\")\n+            .setSort(\"sort-value\")\n+            .setAttribute(\"one\");\n+\n+        mappedTable.updateItem(Record.class, r -> r.item(record)).join();\n+        mappedTable.updateItem(UpdateItemEnhancedRequest.builder(Record.class).item(record).build()).join();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU5MTczOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMTo0MVrOFrQ2Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0NzowNFrOFrXkng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTA5NQ==", "bodyText": "Unused imports", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380909095", "createdAt": "2020-02-18T20:11:41Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTI5NA==", "bodyText": "removed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381019294", "createdAt": "2020-02-19T00:47:04Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTA5NQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU5NDcwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMjo0MlrOFrQ3_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0NzoxNFrOFrXk3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTU2NQ==", "bodyText": "I think we're using this code in a bunch of places, can we refactor it into a base test class or util?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380909565", "createdAt": "2020-02-18T20:12:42Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Page;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.core.DefaultDynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.GlobalSecondaryIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.ScanEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.StaticTableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.Projection;\n+import software.amazon.awssdk.services.dynamodb.model.ProjectionType;\n+\n+public class AsyncIndexScanTest extends LocalDynamoDbAsyncTestBase {\n+    private static class Record {\n+        private String id;\n+        private Integer sort;\n+        private Integer value;\n+        private String gsiId;\n+        private Integer gsiSort;\n+\n+        private String getId() {\n+            return id;\n+        }\n+\n+        private Record setId(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        private Integer getSort() {\n+            return sort;\n+        }\n+\n+        private Record setSort(Integer sort) {\n+            this.sort = sort;\n+            return this;\n+        }\n+\n+        private Integer getValue() {\n+            return value;\n+        }\n+\n+        private Record setValue(Integer value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        private String getGsiId() {\n+            return gsiId;\n+        }\n+\n+        private Record setGsiId(String gsiId) {\n+            this.gsiId = gsiId;\n+            return this;\n+        }\n+\n+        private Integer getGsiSort() {\n+            return gsiSort;\n+        }\n+\n+        private Record setGsiSort(Integer gsiSort) {\n+            this.gsiSort = gsiSort;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Record record = (Record) o;\n+            return Objects.equals(id, record.id) &&\n+                   Objects.equals(sort, record.sort) &&\n+                   Objects.equals(value, record.value) &&\n+                   Objects.equals(gsiId, record.gsiId) &&\n+                   Objects.equals(gsiSort, record.gsiSort);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, sort, value, gsiId, gsiSort);\n+        }\n+    }\n+\n+    private static final TableSchema<Record> TABLE_SCHEMA =\n+        StaticTableSchema.builder(Record.class)\n+                         .newItemSupplier(Record::new)\n+                         .attributes(\n+                             stringAttribute(\"id\", Record::getId, Record::setId).as(primaryPartitionKey()),\n+                             integerNumberAttribute(\"sort\", Record::getSort, Record::setSort).as(primarySortKey()),\n+                             integerNumberAttribute(\"value\", Record::getValue, Record::setValue),\n+                             stringAttribute(\"gsi_id\", Record::getGsiId, Record::setGsiId)\n+                                 .as(secondaryPartitionKey(\"gsi_keys_only\")),\n+                             integerNumberAttribute(\"gsi_sort\", Record::getGsiSort, Record::setGsiSort)\n+                                 .as(secondarySortKey(\"gsi_keys_only\")))\n+                         .build();\n+\n+    private static final List<Record> RECORDS =\n+        IntStream.range(0, 10)\n+                 .mapToObj(i -> new Record()\n+                     .setId(\"id-value\")\n+                     .setSort(i)\n+                     .setValue(i)\n+                     .setGsiId(\"gsi-id-value\")\n+                     .setGsiSort(i))\n+                 .collect(Collectors.toList());\n+\n+    private static final List<Record> KEYS_ONLY_RECORDS =\n+        RECORDS.stream()\n+               .map(record -> new Record()\n+                   .setId(record.id)\n+                   .setSort(record.sort)\n+                   .setGsiId(record.gsiId)\n+                   .setGsiSort(record.gsiSort))\n+               .collect(Collectors.toList());\n+\n+    private DynamoDbEnhancedAsyncClient enhancedAsyncClient =\n+        DefaultDynamoDbEnhancedAsyncClient.builder()\n+                                          .dynamoDbClient(getDynamoDbAsyncClient())\n+                                          .build();\n+\n+    private DynamoDbAsyncTable<Record> mappedTable = enhancedAsyncClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbAsyncIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+\n+    private void insertRecords() {\n+        RECORDS.forEach(record -> mappedTable.putItem(Record.class, r -> r.item(record)).join());\n+    }\n+\n+    private static <T> List<T> drainPublisher(SdkPublisher<T> publisher, int expectedNumberOfResults) {\n+        BufferingSubscriber<T> subscriber = new BufferingSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.waitForCompletion(1000L);\n+\n+        assertThat(subscriber.isCompleted(), is(true));\n+        assertThat(subscriber.bufferedError(), is(nullValue()));\n+        assertThat(subscriber.bufferedItems().size(), is(expectedNumberOfResults));\n+\n+        return subscriber.bufferedItems();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTM1OQ==", "bodyText": "Yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381019359", "createdAt": "2020-02-19T00:47:14Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Page;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.core.DefaultDynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.GlobalSecondaryIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.ScanEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.StaticTableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.Projection;\n+import software.amazon.awssdk.services.dynamodb.model.ProjectionType;\n+\n+public class AsyncIndexScanTest extends LocalDynamoDbAsyncTestBase {\n+    private static class Record {\n+        private String id;\n+        private Integer sort;\n+        private Integer value;\n+        private String gsiId;\n+        private Integer gsiSort;\n+\n+        private String getId() {\n+            return id;\n+        }\n+\n+        private Record setId(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        private Integer getSort() {\n+            return sort;\n+        }\n+\n+        private Record setSort(Integer sort) {\n+            this.sort = sort;\n+            return this;\n+        }\n+\n+        private Integer getValue() {\n+            return value;\n+        }\n+\n+        private Record setValue(Integer value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        private String getGsiId() {\n+            return gsiId;\n+        }\n+\n+        private Record setGsiId(String gsiId) {\n+            this.gsiId = gsiId;\n+            return this;\n+        }\n+\n+        private Integer getGsiSort() {\n+            return gsiSort;\n+        }\n+\n+        private Record setGsiSort(Integer gsiSort) {\n+            this.gsiSort = gsiSort;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Record record = (Record) o;\n+            return Objects.equals(id, record.id) &&\n+                   Objects.equals(sort, record.sort) &&\n+                   Objects.equals(value, record.value) &&\n+                   Objects.equals(gsiId, record.gsiId) &&\n+                   Objects.equals(gsiSort, record.gsiSort);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, sort, value, gsiId, gsiSort);\n+        }\n+    }\n+\n+    private static final TableSchema<Record> TABLE_SCHEMA =\n+        StaticTableSchema.builder(Record.class)\n+                         .newItemSupplier(Record::new)\n+                         .attributes(\n+                             stringAttribute(\"id\", Record::getId, Record::setId).as(primaryPartitionKey()),\n+                             integerNumberAttribute(\"sort\", Record::getSort, Record::setSort).as(primarySortKey()),\n+                             integerNumberAttribute(\"value\", Record::getValue, Record::setValue),\n+                             stringAttribute(\"gsi_id\", Record::getGsiId, Record::setGsiId)\n+                                 .as(secondaryPartitionKey(\"gsi_keys_only\")),\n+                             integerNumberAttribute(\"gsi_sort\", Record::getGsiSort, Record::setGsiSort)\n+                                 .as(secondarySortKey(\"gsi_keys_only\")))\n+                         .build();\n+\n+    private static final List<Record> RECORDS =\n+        IntStream.range(0, 10)\n+                 .mapToObj(i -> new Record()\n+                     .setId(\"id-value\")\n+                     .setSort(i)\n+                     .setValue(i)\n+                     .setGsiId(\"gsi-id-value\")\n+                     .setGsiSort(i))\n+                 .collect(Collectors.toList());\n+\n+    private static final List<Record> KEYS_ONLY_RECORDS =\n+        RECORDS.stream()\n+               .map(record -> new Record()\n+                   .setId(record.id)\n+                   .setSort(record.sort)\n+                   .setGsiId(record.gsiId)\n+                   .setGsiSort(record.gsiSort))\n+               .collect(Collectors.toList());\n+\n+    private DynamoDbEnhancedAsyncClient enhancedAsyncClient =\n+        DefaultDynamoDbEnhancedAsyncClient.builder()\n+                                          .dynamoDbClient(getDynamoDbAsyncClient())\n+                                          .build();\n+\n+    private DynamoDbAsyncTable<Record> mappedTable = enhancedAsyncClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbAsyncIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+\n+    private void insertRecords() {\n+        RECORDS.forEach(record -> mappedTable.putItem(Record.class, r -> r.item(record)).join());\n+    }\n+\n+    private static <T> List<T> drainPublisher(SdkPublisher<T> publisher, int expectedNumberOfResults) {\n+        BufferingSubscriber<T> subscriber = new BufferingSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.waitForCompletion(1000L);\n+\n+        assertThat(subscriber.isCompleted(), is(true));\n+        assertThat(subscriber.bufferedError(), is(nullValue()));\n+        assertThat(subscriber.bufferedItems().size(), is(expectedNumberOfResults));\n+\n+        return subscriber.bufferedItems();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTU2NQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU5NjA4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMzowOVrOFrQ42w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0ODowOFrOFrXl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTc4Nw==", "bodyText": "Why is this commented out?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380909787", "createdAt": "2020-02-18T20:13:09Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Page;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.core.DefaultDynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.GlobalSecondaryIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.ScanEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.StaticTableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.Projection;\n+import software.amazon.awssdk.services.dynamodb.model.ProjectionType;\n+\n+public class AsyncIndexScanTest extends LocalDynamoDbAsyncTestBase {\n+    private static class Record {\n+        private String id;\n+        private Integer sort;\n+        private Integer value;\n+        private String gsiId;\n+        private Integer gsiSort;\n+\n+        private String getId() {\n+            return id;\n+        }\n+\n+        private Record setId(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        private Integer getSort() {\n+            return sort;\n+        }\n+\n+        private Record setSort(Integer sort) {\n+            this.sort = sort;\n+            return this;\n+        }\n+\n+        private Integer getValue() {\n+            return value;\n+        }\n+\n+        private Record setValue(Integer value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        private String getGsiId() {\n+            return gsiId;\n+        }\n+\n+        private Record setGsiId(String gsiId) {\n+            this.gsiId = gsiId;\n+            return this;\n+        }\n+\n+        private Integer getGsiSort() {\n+            return gsiSort;\n+        }\n+\n+        private Record setGsiSort(Integer gsiSort) {\n+            this.gsiSort = gsiSort;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Record record = (Record) o;\n+            return Objects.equals(id, record.id) &&\n+                   Objects.equals(sort, record.sort) &&\n+                   Objects.equals(value, record.value) &&\n+                   Objects.equals(gsiId, record.gsiId) &&\n+                   Objects.equals(gsiSort, record.gsiSort);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, sort, value, gsiId, gsiSort);\n+        }\n+    }\n+\n+    private static final TableSchema<Record> TABLE_SCHEMA =\n+        StaticTableSchema.builder(Record.class)\n+                         .newItemSupplier(Record::new)\n+                         .attributes(\n+                             stringAttribute(\"id\", Record::getId, Record::setId).as(primaryPartitionKey()),\n+                             integerNumberAttribute(\"sort\", Record::getSort, Record::setSort).as(primarySortKey()),\n+                             integerNumberAttribute(\"value\", Record::getValue, Record::setValue),\n+                             stringAttribute(\"gsi_id\", Record::getGsiId, Record::setGsiId)\n+                                 .as(secondaryPartitionKey(\"gsi_keys_only\")),\n+                             integerNumberAttribute(\"gsi_sort\", Record::getGsiSort, Record::setGsiSort)\n+                                 .as(secondarySortKey(\"gsi_keys_only\")))\n+                         .build();\n+\n+    private static final List<Record> RECORDS =\n+        IntStream.range(0, 10)\n+                 .mapToObj(i -> new Record()\n+                     .setId(\"id-value\")\n+                     .setSort(i)\n+                     .setValue(i)\n+                     .setGsiId(\"gsi-id-value\")\n+                     .setGsiSort(i))\n+                 .collect(Collectors.toList());\n+\n+    private static final List<Record> KEYS_ONLY_RECORDS =\n+        RECORDS.stream()\n+               .map(record -> new Record()\n+                   .setId(record.id)\n+                   .setSort(record.sort)\n+                   .setGsiId(record.gsiId)\n+                   .setGsiSort(record.gsiSort))\n+               .collect(Collectors.toList());\n+\n+    private DynamoDbEnhancedAsyncClient enhancedAsyncClient =\n+        DefaultDynamoDbEnhancedAsyncClient.builder()\n+                                          .dynamoDbClient(getDynamoDbAsyncClient())\n+                                          .build();\n+\n+    private DynamoDbAsyncTable<Record> mappedTable = enhancedAsyncClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbAsyncIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+\n+    private void insertRecords() {\n+        RECORDS.forEach(record -> mappedTable.putItem(Record.class, r -> r.item(record)).join());\n+    }\n+\n+    private static <T> List<T> drainPublisher(SdkPublisher<T> publisher, int expectedNumberOfResults) {\n+        BufferingSubscriber<T> subscriber = new BufferingSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.waitForCompletion(1000L);\n+\n+        assertThat(subscriber.isCompleted(), is(true));\n+        assertThat(subscriber.bufferedError(), is(nullValue()));\n+        assertThat(subscriber.bufferedItems().size(), is(expectedNumberOfResults));\n+\n+        return subscriber.bufferedItems();\n+    }\n+\n+    @Before\n+    public void createTable() {\n+        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput())\n+                                      .globalSecondaryIndices(GlobalSecondaryIndex.create(\n+                                          \"gsi_keys_only\",\n+                                          Projection.builder().projectionType(ProjectionType.KEYS_ONLY).build(),\n+                                          getDefaultProvisionedThroughput()))).join();\n+    }\n+\n+    @After\n+    public void deleteTable() {\n+        getDynamoDbAsyncClient().deleteTable(DeleteTableRequest.builder()\n+                                                               .tableName(getConcreteTableName(\"table-name\"))\n+                                                               .build()).join();\n+    }\n+\n+    @Test\n+    public void scanAllRecordsDefaultSettings() {\n+        insertRecords();\n+\n+        SdkPublisher<Page<Record>> publisher = keysOnlyMappedIndex.scan(ScanEnhancedRequest.builder().build());\n+        List<Page<Record>> results = drainPublisher(publisher, 1);\n+        Page<Record> page = results.get(0);\n+\n+        assertThat(page.items(), is(KEYS_ONLY_RECORDS));\n+    //    assertThat(page.lastEvaluatedKey(), is(nullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTY0NA==", "bodyText": "Probably left over from writing test, commented 'in'", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381019644", "createdAt": "2020-02-19T00:48:08Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexScanTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Page;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.core.DefaultDynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.GlobalSecondaryIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.ScanEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.StaticTableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.Projection;\n+import software.amazon.awssdk.services.dynamodb.model.ProjectionType;\n+\n+public class AsyncIndexScanTest extends LocalDynamoDbAsyncTestBase {\n+    private static class Record {\n+        private String id;\n+        private Integer sort;\n+        private Integer value;\n+        private String gsiId;\n+        private Integer gsiSort;\n+\n+        private String getId() {\n+            return id;\n+        }\n+\n+        private Record setId(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        private Integer getSort() {\n+            return sort;\n+        }\n+\n+        private Record setSort(Integer sort) {\n+            this.sort = sort;\n+            return this;\n+        }\n+\n+        private Integer getValue() {\n+            return value;\n+        }\n+\n+        private Record setValue(Integer value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        private String getGsiId() {\n+            return gsiId;\n+        }\n+\n+        private Record setGsiId(String gsiId) {\n+            this.gsiId = gsiId;\n+            return this;\n+        }\n+\n+        private Integer getGsiSort() {\n+            return gsiSort;\n+        }\n+\n+        private Record setGsiSort(Integer gsiSort) {\n+            this.gsiSort = gsiSort;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Record record = (Record) o;\n+            return Objects.equals(id, record.id) &&\n+                   Objects.equals(sort, record.sort) &&\n+                   Objects.equals(value, record.value) &&\n+                   Objects.equals(gsiId, record.gsiId) &&\n+                   Objects.equals(gsiSort, record.gsiSort);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, sort, value, gsiId, gsiSort);\n+        }\n+    }\n+\n+    private static final TableSchema<Record> TABLE_SCHEMA =\n+        StaticTableSchema.builder(Record.class)\n+                         .newItemSupplier(Record::new)\n+                         .attributes(\n+                             stringAttribute(\"id\", Record::getId, Record::setId).as(primaryPartitionKey()),\n+                             integerNumberAttribute(\"sort\", Record::getSort, Record::setSort).as(primarySortKey()),\n+                             integerNumberAttribute(\"value\", Record::getValue, Record::setValue),\n+                             stringAttribute(\"gsi_id\", Record::getGsiId, Record::setGsiId)\n+                                 .as(secondaryPartitionKey(\"gsi_keys_only\")),\n+                             integerNumberAttribute(\"gsi_sort\", Record::getGsiSort, Record::setGsiSort)\n+                                 .as(secondarySortKey(\"gsi_keys_only\")))\n+                         .build();\n+\n+    private static final List<Record> RECORDS =\n+        IntStream.range(0, 10)\n+                 .mapToObj(i -> new Record()\n+                     .setId(\"id-value\")\n+                     .setSort(i)\n+                     .setValue(i)\n+                     .setGsiId(\"gsi-id-value\")\n+                     .setGsiSort(i))\n+                 .collect(Collectors.toList());\n+\n+    private static final List<Record> KEYS_ONLY_RECORDS =\n+        RECORDS.stream()\n+               .map(record -> new Record()\n+                   .setId(record.id)\n+                   .setSort(record.sort)\n+                   .setGsiId(record.gsiId)\n+                   .setGsiSort(record.gsiSort))\n+               .collect(Collectors.toList());\n+\n+    private DynamoDbEnhancedAsyncClient enhancedAsyncClient =\n+        DefaultDynamoDbEnhancedAsyncClient.builder()\n+                                          .dynamoDbClient(getDynamoDbAsyncClient())\n+                                          .build();\n+\n+    private DynamoDbAsyncTable<Record> mappedTable = enhancedAsyncClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbAsyncIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+\n+    private void insertRecords() {\n+        RECORDS.forEach(record -> mappedTable.putItem(Record.class, r -> r.item(record)).join());\n+    }\n+\n+    private static <T> List<T> drainPublisher(SdkPublisher<T> publisher, int expectedNumberOfResults) {\n+        BufferingSubscriber<T> subscriber = new BufferingSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.waitForCompletion(1000L);\n+\n+        assertThat(subscriber.isCompleted(), is(true));\n+        assertThat(subscriber.bufferedError(), is(nullValue()));\n+        assertThat(subscriber.bufferedItems().size(), is(expectedNumberOfResults));\n+\n+        return subscriber.bufferedItems();\n+    }\n+\n+    @Before\n+    public void createTable() {\n+        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput())\n+                                      .globalSecondaryIndices(GlobalSecondaryIndex.create(\n+                                          \"gsi_keys_only\",\n+                                          Projection.builder().projectionType(ProjectionType.KEYS_ONLY).build(),\n+                                          getDefaultProvisionedThroughput()))).join();\n+    }\n+\n+    @After\n+    public void deleteTable() {\n+        getDynamoDbAsyncClient().deleteTable(DeleteTableRequest.builder()\n+                                                               .tableName(getConcreteTableName(\"table-name\"))\n+                                                               .build()).join();\n+    }\n+\n+    @Test\n+    public void scanAllRecordsDefaultSettings() {\n+        insertRecords();\n+\n+        SdkPublisher<Page<Record>> publisher = keysOnlyMappedIndex.scan(ScanEnhancedRequest.builder().build());\n+        List<Page<Record>> results = drainPublisher(publisher, 1);\n+        Page<Record> page = results.get(0);\n+\n+        assertThat(page.items(), is(KEYS_ONLY_RECORDS));\n+    //    assertThat(page.lastEvaluatedKey(), is(nullValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTc4Nw=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwMDE4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNDozNFrOFrQ7XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNDozNFrOFrQ7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMDQyOQ==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380910429", "createdAt": "2020-02-18T20:14:34Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "diffHunk": "@@ -222,6 +220,25 @@ public void deleteTable() {\n                                                           .build());\n     }\n \n+    @Test\n+    public void getItemInterfaceToOperationSucceeds() {\n+        mappedTable.getItem(r -> r.key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\"))));\n+        mappedTable.getItem(GetItemEnhancedRequest.builder()\n+                                                  .key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))\n+                                                  .build());\n+    }\n+\n+    @Test\n+    public void putItemInterfaceToOperationSucceeds() {\n+        Record record = new Record()\n+            .setId(\"id-value\")\n+            .setSort(\"sort-value\")\n+            .setAttribute(\"one\");\n+\n+        mappedTable.putItem(Record.class, r -> r.item(record));\n+        mappedTable.putItem(PutItemEnhancedRequest.builder(Record.class).item(record).build());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwMTM5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNDo1OVrOFrQ8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNDo1OVrOFrQ8EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMDYwOA==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380910608", "createdAt": "2020-02-18T20:14:59Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "diffHunk": "@@ -360,10 +371,17 @@ public void putWithConditionThatFails() {\n                                                   .conditionExpression(conditionExpression).build());\n     }\n \n+    @Test\n+    public void deleteItemInterfaceToOperationSucceeds() {\n+        mappedTable.deleteItem(r -> r.key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\"))));\n+        mappedTable.deleteItem(DeleteItemEnhancedRequest.builder()\n+                                                        .key(Key.create(stringValue(\"id-value\"), stringValue(\"sort-value\")))\n+                                                        .build());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwMjA5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNToxM1rOFrQ8hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNToxM1rOFrQ8hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMDcyNA==", "bodyText": "I think we should be able to make basic assertions here beyond 'it didn't blow up'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380910724", "createdAt": "2020-02-18T20:15:13Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicCrudTest.java", "diffHunk": "@@ -418,6 +436,17 @@ public void deleteWithConditionThatFails() {\n                                                .build());\n     }\n \n+    @Test\n+    public void updateItemInterfaceToOperationSucceeds() {\n+        Record record = new Record()\n+            .setId(\"id-value\")\n+            .setSort(\"sort-value\")\n+            .setAttribute(\"one\");\n+\n+        mappedTable.updateItem(Record.class, r -> r.item(record));\n+        mappedTable.updateItem(UpdateItemEnhancedRequest.builder(Record.class).item(record).build());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwMzM5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNTo0NlrOFrQ9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0ODo0M1rOFrXmgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMDk0MQ==", "bodyText": "Unused imports.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380910941", "createdAt": "2020-02-18T20:15:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -25,6 +25,8 @@\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.model.QueryConditional.equalTo;\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTc3OQ==", "bodyText": "ok", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381019779", "createdAt": "2020-02-19T00:48:43Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -25,6 +25,8 @@\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.model.QueryConditional.equalTo;\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMDk0MQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYzMzA5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoyNjoyMFrOFrRQOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDoyNDo0MVrOFrXNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNTc3MQ==", "bodyText": "I'm not sure I like this, speaking to Matt he said there is prior art for having an overloaded version of this that takes no arguments at all. So-called 'simple' method form.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380915771", "createdAt": "2020-02-18T20:26:20Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -80,66 +80,109 @@ values used are also completely arbitrary.\n  \n ### Common primitive operations\n These all strongly map to the primitive DynamoDB operations they are\n-named after. These examples are the most simple variants of each\n-operation possible. These commands can be customized by using the\n-builders provided for each command and offer most of the features\n-available in the low-level DynamoDB SDK client.\n+named after. The examples below are the most simple variants of each\n+operation possible, using the the two styles available for constructing\n+requests with either builder or consumers. These commands can be \n+customized by using the builders provided for each command and offer \n+most of the features available in the low-level DynamoDB SDK client.\n \n    ```java\n    // CreateTable\n-   customerTable.createTable(CreateTableEnhancedRequest.create());\n+   customerTable.createTable(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxMzM1OA==", "bodyText": "Adding a no-args method", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381013358", "createdAt": "2020-02-19T00:24:41Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -80,66 +80,109 @@ values used are also completely arbitrary.\n  \n ### Common primitive operations\n These all strongly map to the primitive DynamoDB operations they are\n-named after. These examples are the most simple variants of each\n-operation possible. These commands can be customized by using the\n-builders provided for each command and offer most of the features\n-available in the low-level DynamoDB SDK client.\n+named after. The examples below are the most simple variants of each\n+operation possible, using the the two styles available for constructing\n+requests with either builder or consumers. These commands can be \n+customized by using the builders provided for each command and offer \n+most of the features available in the low-level DynamoDB SDK client.\n \n    ```java\n    // CreateTable\n-   customerTable.createTable(CreateTableEnhancedRequest.create());\n+   customerTable.createTable(() -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNTc3MQ=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYzNjg3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoyNzozMVrOFrRSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDoyNToxNlrOFrXOHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNjM2Nw==", "bodyText": "Can we do the 'simple method' implementation here with no arguments.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r380916367", "createdAt": "2020-02-18T20:27:31Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -80,66 +80,109 @@ values used are also completely arbitrary.\n  \n ### Common primitive operations\n These all strongly map to the primitive DynamoDB operations they are\n-named after. These examples are the most simple variants of each\n-operation possible. These commands can be customized by using the\n-builders provided for each command and offer most of the features\n-available in the low-level DynamoDB SDK client.\n+named after. The examples below are the most simple variants of each\n+operation possible, using the the two styles available for constructing\n+requests with either builder or consumers. These commands can be \n+customized by using the builders provided for each command and offer \n+most of the features available in the low-level DynamoDB SDK client.\n \n    ```java\n    // CreateTable\n-   customerTable.createTable(CreateTableEnhancedRequest.create());\n+   customerTable.createTable(() -> {});\n+   customerTable.createTable(CreateTableEnhancedRequest.builder().build());\n    \n    // GetItem\n-   Customer customer = customerTable.getItem(GetItemEnhancedRequest.create(Key.create(stringValue(\"a123\"))));\n-   \n+   Customer customer = customerTable.getItem(r -> r.key(Key.create(stringValue(\"a123\"))));\n+   Customer customer = customerTable.getItem(GetItemEnhancedRequest.builder()\n+                                                                   .key(Key.create(stringValue(\"a123\")))\n+                                                                   .build()); \n    // UpdateItem\n-   Customer updatedCustomer = customerTable.updateItem(UpdateItemEnhancedRequest.create(customer));\n+   Customer updatedCustomer = customerTable.updateItem(Customer.class, r -> r.item(customer));\n+   Customer updatedCustomer = customerTable.updateItem(UpdateItemEnhancedRequest.builder(Customer.class)\n+                                                                                .item(customer)\n+                                                                                .build());\n    \n    // PutItem\n-   customerTable.putItem(PutItemEnhancedRequest.create(customer));\n+   customerTable.putItem(Customer.class, r -> r.item(customer));\n+   customerTable.putItem(PutItemEnhancedRequest.builder(Customer.class)\n+                                               .item(customer)\n+                                               .build());\n    \n    // DeleteItem\n-   Customer deletedCustomer = customerTable.deleteItem(DeleteItemEnhancedRequest.create(Key.create(stringValue(\"a123\"), numberValue(456))));\n+   Customer deletedCustomer = customerTable.deleteItem(r -> r.key(Key.create(stringValue(\"a123\"), numberValue(456))));\n+   Customer deletedCustomer = customerTable.deleteItem(DeleteItemEnhancedRequest.builder()\n+                                                                                     .key(Key.create(stringValue(\"a123\"), numberValue(456)))\n+                                                                                     .build());\n    \n    // Query\n-   Iterable<Page<Customer>> customers = customerTable.query(QueryEnhancedRequest.create(equalTo(Key.create(stringValue(\"a123\")))));\n-   \n+   Iterable<Page<Customer>> customers = customerTable.query(r -> r.queryConditional(equalTo(Key.create(stringValue(\"a123\")))));\n+   Iterable<Page<Customer>> customers = customerTable.query(QueryEnhancedRequest.builder()\n+                                                                                .queryConditional(equalTo(Key.create(stringValue(\"a123\"))))\n+                                                                                .build());\n    // Scan\n-   Iterable<Page<Customer>> customers = customerTable.scan(ScanEnhancedRequest.create());\n+   Iterable<Page<Customer>> customers = customerTable.scan(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxMzUzMg==", "bodyText": "Yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381013532", "createdAt": "2020-02-19T00:25:16Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -80,66 +80,109 @@ values used are also completely arbitrary.\n  \n ### Common primitive operations\n These all strongly map to the primitive DynamoDB operations they are\n-named after. These examples are the most simple variants of each\n-operation possible. These commands can be customized by using the\n-builders provided for each command and offer most of the features\n-available in the low-level DynamoDB SDK client.\n+named after. The examples below are the most simple variants of each\n+operation possible, using the the two styles available for constructing\n+requests with either builder or consumers. These commands can be \n+customized by using the builders provided for each command and offer \n+most of the features available in the low-level DynamoDB SDK client.\n \n    ```java\n    // CreateTable\n-   customerTable.createTable(CreateTableEnhancedRequest.create());\n+   customerTable.createTable(() -> {});\n+   customerTable.createTable(CreateTableEnhancedRequest.builder().build());\n    \n    // GetItem\n-   Customer customer = customerTable.getItem(GetItemEnhancedRequest.create(Key.create(stringValue(\"a123\"))));\n-   \n+   Customer customer = customerTable.getItem(r -> r.key(Key.create(stringValue(\"a123\"))));\n+   Customer customer = customerTable.getItem(GetItemEnhancedRequest.builder()\n+                                                                   .key(Key.create(stringValue(\"a123\")))\n+                                                                   .build()); \n    // UpdateItem\n-   Customer updatedCustomer = customerTable.updateItem(UpdateItemEnhancedRequest.create(customer));\n+   Customer updatedCustomer = customerTable.updateItem(Customer.class, r -> r.item(customer));\n+   Customer updatedCustomer = customerTable.updateItem(UpdateItemEnhancedRequest.builder(Customer.class)\n+                                                                                .item(customer)\n+                                                                                .build());\n    \n    // PutItem\n-   customerTable.putItem(PutItemEnhancedRequest.create(customer));\n+   customerTable.putItem(Customer.class, r -> r.item(customer));\n+   customerTable.putItem(PutItemEnhancedRequest.builder(Customer.class)\n+                                               .item(customer)\n+                                               .build());\n    \n    // DeleteItem\n-   Customer deletedCustomer = customerTable.deleteItem(DeleteItemEnhancedRequest.create(Key.create(stringValue(\"a123\"), numberValue(456))));\n+   Customer deletedCustomer = customerTable.deleteItem(r -> r.key(Key.create(stringValue(\"a123\"), numberValue(456))));\n+   Customer deletedCustomer = customerTable.deleteItem(DeleteItemEnhancedRequest.builder()\n+                                                                                     .key(Key.create(stringValue(\"a123\"), numberValue(456)))\n+                                                                                     .build());\n    \n    // Query\n-   Iterable<Page<Customer>> customers = customerTable.query(QueryEnhancedRequest.create(equalTo(Key.create(stringValue(\"a123\")))));\n-   \n+   Iterable<Page<Customer>> customers = customerTable.query(r -> r.queryConditional(equalTo(Key.create(stringValue(\"a123\")))));\n+   Iterable<Page<Customer>> customers = customerTable.query(QueryEnhancedRequest.builder()\n+                                                                                .queryConditional(equalTo(Key.create(stringValue(\"a123\"))))\n+                                                                                .build());\n    // Scan\n-   Iterable<Page<Customer>> customers = customerTable.scan(ScanEnhancedRequest.create());\n+   Iterable<Page<Customer>> customers = customerTable.scan(() -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNjM2Nw=="}, "originalCommit": {"oid": "58a29cba77abd0112690e51bc38de127c6eb9c0a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDg5OTMwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyNjowOFrOFrweCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzo1NDowMlrOFsCkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNzIwOA==", "bodyText": "Now it's generic and global we should rename this to be a little more specific to what it does, which is call each supplier and make a list of the results.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381427208", "createdAt": "2020-02-19T17:26:08Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/Utils.java", "diffHunk": "@@ -117,4 +119,13 @@ public static String cleanAttributeName(String key) {\n         return sortKeyValue.map(attributeValue -> Key.create(partitionKeyValue, attributeValue))\n                            .orElseGet(() -> Key.create(partitionKeyValue));\n     }\n+\n+    public static <T> List<T> getListIfExist(List<Supplier<T>> itemSupplierList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c02a65b42b841a447e48110009b32d980e468ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMzc5NA==", "bodyText": "yes, definitely. Updated.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1654#discussion_r381723794", "createdAt": "2020-02-20T03:54:02Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/Utils.java", "diffHunk": "@@ -117,4 +119,13 @@ public static String cleanAttributeName(String key) {\n         return sortKeyValue.map(attributeValue -> Key.create(partitionKeyValue, attributeValue))\n                            .orElseGet(() -> Key.create(partitionKeyValue));\n     }\n+\n+    public static <T> List<T> getListIfExist(List<Supplier<T>> itemSupplierList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNzIwOA=="}, "originalCommit": {"oid": "6c02a65b42b841a447e48110009b32d980e468ff"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4213, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}