{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODc4NzUx", "number": 1756, "title": "DDB Enhanced: Added support for projection expression", "bodyText": "Description\nAdded missing support for projection expression into QueryEnhancedRequest and ScanEnhancedRequest classes.\nMotivation and Context\nAt the moment, there is no way how to obtain just a portion of the data from DynamoDB in OOP manner.\nTesting\nThe tests have been updated to reflect the change.\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-04-01T09:38:13Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756", "merged": true, "mergeCommit": {"oid": "8b85f34e829b5774aae758352818ab570cfc45f5"}, "closed": true, "closedAt": "2020-04-06T16:36:40Z", "author": {"login": "musketyr"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTcJD-gFqTM4NTg0ODgxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVBZGogFqTM4ODQyNDUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODQ4ODE2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#pullrequestreview-385848816", "createdAt": "2020-04-01T18:37:00Z", "commit": {"oid": "ccc851d9e9c94e8f0ba13670260d18d9a8bb5f8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNzowMFrOF_NmAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNzowMFrOF_NmAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNzMzMQ==", "bodyText": "I'm thinking that since this is a high-level client, we should model this as List<String> attributesToProject or something like that? What do you think?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r401827331", "createdAt": "2020-04-01T18:37:00Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -255,6 +273,40 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n+         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         *\n+         * @param projectionExpression\n+         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n+         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n+         *        separated by commas.</p>\n+         *        <p>\n+         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n+         *        attributes are not found, they will not appear in the result.\n+         *        </p>\n+         *        <p>\n+         *        For more information, see <a href=\n+         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder projectionExpression(String projectionExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc851d9e9c94e8f0ba13670260d18d9a8bb5f8f"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTg2ODQ0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#pullrequestreview-386586844", "createdAt": "2020-04-02T16:18:50Z", "commit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoxODo1MFrOF_zA6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NTo1NVrOF_0gUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDQyNA==", "bodyText": "Can we use an ArrayList here as we're only adding and iterating?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402440424", "createdAt": "2020-04-02T16:18:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -48,21 +59,42 @@ private ScanOperation(ScanEnhancedRequest request) {\n     public ScanRequest generateRequest(TableSchema<T> tableSchema,\n                                        OperationContext operationContext,\n                                        DynamoDbEnhancedClientExtension extension) {\n+        Map<String, AttributeValue> expressionValues = null;\n+        Map<String, String> expressionNames = null;\n+\n+        if (this.request.filterExpression() != null) {\n+            expressionValues = this.request.filterExpression().expressionValues();\n+            expressionNames = this.request.filterExpression().expressionNames();\n+        }\n+\n+        String projectionExpression = null;\n+        if (!this.request.attributesToProject().isEmpty()) {\n+            List<String> placeholders = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzE5NQ==", "bodyText": "Do you think we should follow the same pattern established in other operations where we map attribute names? eg:- \n  \n    \n      aws-sdk-java-v2/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/UpdateItemOperation.java\n    \n    \n        Lines 55 to 56\n      in\n      d4ea84f\n    \n    \n    \n    \n\n        \n          \n           private static final Function<String, String> EXPRESSION_KEY_MAPPER = \n        \n\n        \n          \n               key -> \"#AMZN_MAPPED_\" + EnhancedClientUtils.cleanAttributeName(key);", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402443195", "createdAt": "2020-04-02T16:22:59Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -15,25 +15,36 @@\n \n package software.amazon.awssdk.enhanced.dynamodb.internal.operations;\n \n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n import java.util.function.Function;\n+import java.util.function.UnaryOperator;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n import software.amazon.awssdk.core.pagination.sync.SdkIterable;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n+import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n import software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils;\n import software.amazon.awssdk.enhanced.dynamodb.model.Page;\n import software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest;\n import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.ScanRequest;\n import software.amazon.awssdk.services.dynamodb.model.ScanResponse;\n \n @SdkInternalApi\n public class ScanOperation<T> implements PaginatedTableOperation<T, ScanRequest, ScanResponse>,\n                                          PaginatedIndexOperation<T, ScanRequest, ScanResponse> {\n \n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> \"#AMZN_PROJ\" + cleanAttributeName(k);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzY1OA==", "bodyText": "Nit: Generally speaking we've been preferring Java 8 style (stream.forEach) where it's possible to use. I don't see any reason not to use that here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402443658", "createdAt": "2020-04-02T16:23:45Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -48,21 +59,42 @@ private ScanOperation(ScanEnhancedRequest request) {\n     public ScanRequest generateRequest(TableSchema<T> tableSchema,\n                                        OperationContext operationContext,\n                                        DynamoDbEnhancedClientExtension extension) {\n+        Map<String, AttributeValue> expressionValues = null;\n+        Map<String, String> expressionNames = null;\n+\n+        if (this.request.filterExpression() != null) {\n+            expressionValues = this.request.filterExpression().expressionValues();\n+            expressionNames = this.request.filterExpression().expressionNames();\n+        }\n+\n+        String projectionExpression = null;\n+        if (!this.request.attributesToProject().isEmpty()) {\n+            List<String> placeholders = new LinkedList<>();\n+            Map<String, String> projectionPlaceholders = new HashMap<>();\n+            for (String attr : this.request.attributesToProject()) {\n+                String placeholder = PROJECTION_EXPRESSION_KEY_MAPPER.apply(attr);\n+                placeholders.add(placeholder);\n+                projectionPlaceholders.put(placeholder, attr);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NTYyMQ==", "bodyText": "Can we reword this to say 'projected attributes' instead of 'projected properties' which I think will be more consistent with how we refer to them everywhere else.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402445621", "createdAt": "2020-04-02T16:26:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -117,10 +120,10 @@ public Expression filterExpression() {\n     }\n \n     /**\n-     * Returns the projection expression set on this request object, or null if it doesn't exist.\n+     * Returns the list of projected properties on this request object, or an empty list if no projection is specified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzE5OQ==", "bodyText": "We have a particular style around collections in builders that we should try and consistently follow. For an optional list like this:\n\nIf no values are given to the builder then the builder should pass 'null' to the constructor to indicate 'no optional values supplied'.\nOn instantiation, the object should shallow copy all the values out of the builder array and store it in an immutable List implementation (we typically use Collections.unmodifiableList of an ArrayList).\nOn the builder we provide a method to add a single element to the existing builder list (or create one if it is still null), these are named 'addXXX(...)' where XXX is the singular form of the collection noun. (eg: addAttributeToProject(...)).\nAlso on the builder we provide 2 overloaded methods to replace the entire list with one that is supplied by taking a shallow copy of it (this will overwrite any values already stored in the builder list). These are named 'XXX(...)' where XXX is the plural form of the collection noun. Eg: (attributesToProject(...)). The overload provides a varargs form and a List<...> form.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402453199", "createdAt": "2020-04-02T16:38:07Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -274,39 +277,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NDgwMA==", "bodyText": "Can we say 'projected attributes' here instead of 'projected properties'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402454800", "createdAt": "2020-04-02T16:40:38Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -92,10 +95,10 @@ public Expression filterExpression() {\n     }\n \n     /**\n-     * Returns the projection expression set on this request object, or null if it doesn't exist.\n+     * Returns the list of projected properties on this request object, or an empty list if no projection is specified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTYyMA==", "bodyText": "We should ensure this list cannot be modified, especially as we're vending it in a getter. I suggest this.attributesToProject = Collections.unmodifiableList(builder.attributesToProject);", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402455620", "createdAt": "2020-04-02T16:41:49Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -35,14 +38,14 @@\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final String projectionExpression;\n+    private final List<String> attributesToProject;\n \n     private ScanEnhancedRequest(Builder builder) {\n         this.exclusiveStartKey = builder.exclusiveStartKey;\n         this.limit = builder.limit;\n         this.consistentRead = builder.consistentRead;\n         this.filterExpression = builder.filterExpression;\n-        this.projectionExpression = builder.projectionExpression;\n+        this.attributesToProject = builder.attributesToProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTk0Ng==", "bodyText": "We should ensure this list cannot be modified, especially as we're vending it in a getter. I suggest this.attributesToProject = Collections.unmodifiableList(builder.attributesToProject);", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402455946", "createdAt": "2020-04-02T16:42:19Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -50,7 +53,7 @@ private QueryEnhancedRequest(Builder builder) {\n         this.limit = builder.limit;\n         this.consistentRead = builder.consistentRead;\n         this.filterExpression = builder.filterExpression;\n-        this.projectionExpression = builder.projectionExpression;\n+        this.attributesToProject = builder.attributesToProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1Njc5MA==", "bodyText": "Please see comments I made in QueryEnhancedRequest around handling optional lists in builders.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402456790", "createdAt": "2020-04-02T16:43:39Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -211,39 +214,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);\n             return this;\n         }\n \n+        /**\n+         * The list of the attributes's paths to be retrieved from the database.\n+         *\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzgxNQ==", "bodyText": "Can we add a test for multiple projected attributes? Also given what we know about the implementation I think I would sleep better if we also had a test with projected attributes AND a filter expression together, perhaps in a configuration that is likely to require them to merge correctly.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402457815", "createdAt": "2020-04-02T16:45:07Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -157,6 +157,28 @@ public void queryAllRecordsDefaultSettings_shortcutForm() {\n         assertThat(page.lastEvaluatedKey(), is(nullValue()));\n     }\n \n+    @Test\n+    public void queryAllRecordsDefaultSettings_withProjection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1OTAwOA==", "bodyText": "Can we add a test for multiple projected attributes? Also given what we know about the implementation I think I would sleep better if we also had a test with projected attributes AND a filter expression together, perhaps in a configuration that is likely to require them to merge correctly.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402459008", "createdAt": "2020-04-02T16:46:59Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicScanTest.java", "diffHunk": "@@ -140,6 +141,24 @@ public void scanAllRecordsDefaultSettings() {\n         assertThat(page.lastEvaluatedKey(), is(nullValue()));\n     }\n \n+    @Test\n+    public void queryAllRecordsDefaultSettings_withProjection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1OTkwNA==", "bodyText": "Could we test a filter expression together with a projection expression and verify the merging logic is working correctly?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402459904", "createdAt": "2020-04-02T16:48:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/QueryOperationTest.java", "diffHunk": "@@ -272,6 +272,22 @@ public void generateRequest_consistentRead() {\n         assertThat(queryRequest.consistentRead(), is(true));\n     }\n \n+    @Test\n+    public void generateRequest_projectionExpression() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MDM2MA==", "bodyText": "Could we test a filter expression together with a projection expression and verify the merging logic is working correctly?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402460360", "createdAt": "2020-04-02T16:48:56Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperationTest.java", "diffHunk": "@@ -188,6 +189,25 @@ public void generateRequest_consistentRead() {\n         assertThat(request, is(expectedRequest));\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTgyMQ==", "bodyText": "A default optional list should be 'null' so we can differentiate between 'they didn't mention it' and 'they explicitly gave us an empty list as a value' if we ever need to.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402461821", "createdAt": "2020-04-02T16:51:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -44,7 +47,7 @@ public void builder_minimal() {\n         assertThat(builtObject.limit(), is(nullValue()));\n         assertThat(builtObject.queryConditional(), is(nullValue()));\n         assertThat(builtObject.scanIndexForward(), is(nullValue()));\n-        assertThat(builtObject.projectionExpression(), is(nullValue()));\n+        assertThat(builtObject.attributesToProject(), is(emptyIterable()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjc4Mg==", "bodyText": "When we have the overloaded versions of this, hopefully in the implementation one calls the other, in which case we should make sure we are testing the one that will give us coverage over both. Usually that's the varargs form because that should call the other one with Array.asList(...). We will also need to add a separate test for the .addAttributeToProject(...) method that we are hopefully adding.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402462782", "createdAt": "2020-04-02T16:52:45Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -69,7 +74,7 @@ public void builder_maximal() {\n                                                                .limit(3)\n                                                                .queryConditional(queryConditional)\n                                                                .scanIndexForward(true)\n-                                                               .projectionExpression(projectionExpression)\n+                                                               .attributesToProject(attributesToProjectArray)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzQ5Nw==", "bodyText": "A default optional list should be 'null' so we can differentiate between 'they didn't mention it' and 'they explicitly gave us an empty list as a value' if we ever need to.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402463497", "createdAt": "2020-04-02T16:53:48Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequestTest.java", "diffHunk": "@@ -40,7 +43,7 @@ public void builder_minimal() {\n         assertThat(builtObject.exclusiveStartKey(), is(nullValue()));\n         assertThat(builtObject.consistentRead(), is(nullValue()));\n         assertThat(builtObject.filterExpression(), is(nullValue()));\n-        assertThat(builtObject.projectionExpression(), is(nullValue()));\n+        assertThat(builtObject.attributesToProject(), is(emptyIterable()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzY4NQ==", "bodyText": "When we have the overloaded versions of this, hopefully in the implementation one calls the other, in which case we should make sure we are testing the one that will give us coverage over both. Usually that's the varargs form because that should call the other one with Array.asList(...). We will also need to add a separate test for the .addAttributeToProject(...) method that we are hopefully adding.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402463685", "createdAt": "2020-04-02T16:54:03Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequestTest.java", "diffHunk": "@@ -56,20 +59,21 @@ public void builder_maximal() {\n                                                 .expressionValues(expressionValues)\n                                                 .build();\n \n-        String projectionExpression = \"one,two\";\n+        String[] attributesToProjectArray = {\"one\", \"two\"};\n+        List<String> attributesToProject = Arrays.asList(attributesToProjectArray);\n \n         ScanEnhancedRequest builtObject = ScanEnhancedRequest.builder()\n                                                              .exclusiveStartKey(exclusiveStartKey)\n                                                              .consistentRead(false)\n                                                              .filterExpression(filterExpression)\n-                                                             .projectionExpression(projectionExpression)\n+                                                             .attributesToProject(attributesToProjectArray)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDg0OA==", "bodyText": "'path' is a new term we have not used anywhere else in the library and may cause confusion. Can we simply refer to this as 'attribute names'? I think a little more description or at least a link to the official DynamoDB documentation would also help people understand what to expect from this feature. (Please apply this comment to other places it's applicable too)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402464848", "createdAt": "2020-04-02T16:55:55Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -274,39 +277,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);\n             return this;\n         }\n \n+        /**\n+         * The list of the attributes's paths to be retrieved from the database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea2cf09384fd900f11a02afa7f07623ed820cd0"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDI1Njcz", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#pullrequestreview-387425673", "createdAt": "2020-04-03T16:56:02Z", "commit": {"oid": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1NjowMlrOGAd_Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowMToxMVrOGAeRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NDQ1OA==", "bodyText": "I believe this now returns null if no projection is specified.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403144458", "createdAt": "2020-04-03T16:56:02Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -113,6 +123,13 @@ public Expression filterExpression() {\n         return filterExpression;\n     }\n \n+    /**\n+     * Returns the list of projected attributes on this request object, or an empty list if no projection is specified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0ODAzNQ==", "bodyText": "Can we use the singular noun-form here: addAttributeToProject(...)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403148035", "createdAt": "2020-04-03T17:00:01Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -255,6 +280,73 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(Collection<String> attributesToProject) {\n+            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        One or more  attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+\n+        /**\n+         * <p>\n+         * Adds a single attribute name to be retrieved from the database. This attribute can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeToProject\n+         *        An additional single attribute name to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addAttributesToProject(String attributeToProject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0OTEwNA==", "bodyText": "Can we use the singular noun form here: addAttributeToProject(...)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403149104", "createdAt": "2020-04-03T17:01:11Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -192,6 +217,73 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(Collection<String> attributesToProject) {\n+            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        One or more  attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+\n+        /**\n+         * <p>\n+         * Adds a single attribute name to be retrieved from the database. This attribute can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeToProject\n+         *        An additional single attribute name to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addAttributesToProject(String attributeToProject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce"}, "originalPosition": 146}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78f17be750b162bf450c2d047f52c43973f8422a", "author": {"user": {"login": "musketyr", "name": "Vladimir Orany"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/78f17be750b162bf450c2d047f52c43973f8422a", "committedDate": "2020-04-03T17:14:54Z", "message": "fixed Javadoc for attributesToProject, using singular wording for the add method"}, "afterCommit": {"oid": "92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "author": {"user": {"login": "musketyr", "name": "Vladimir Orany"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "committedDate": "2020-04-03T17:42:28Z", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "498040e434da5bb60cc2235408ccb7c54e907867", "author": {"user": {"login": "musketyr", "name": "Vladimir Orany"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/498040e434da5bb60cc2235408ccb7c54e907867", "committedDate": "2020-04-04T03:59:47Z", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "author": {"user": {"login": "musketyr", "name": "Vladimir Orany"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "committedDate": "2020-04-03T17:42:28Z", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries."}, "afterCommit": {"oid": "498040e434da5bb60cc2235408ccb7c54e907867", "author": {"user": {"login": "musketyr", "name": "Vladimir Orany"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/498040e434da5bb60cc2235408ccb7c54e907867", "committedDate": "2020-04-04T03:59:47Z", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDI0NTM2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#pullrequestreview-388424536", "createdAt": "2020-04-06T16:35:49Z", "commit": {"oid": "498040e434da5bb60cc2235408ccb7c54e907867"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2498, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}