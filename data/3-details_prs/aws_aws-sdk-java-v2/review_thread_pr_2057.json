{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjAwMjkx", "number": 2057, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyMDoxNlrOEmSOIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxODowNDoxOVrOFX-9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTc5ODcyOnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyMDoxNlrOHWOWig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyNDo0MlrOHbUKFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTg2Ng==", "bodyText": "This probably needs a link to the doc where it states this must be 15 min", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r493065866", "createdAt": "2020-09-22T22:20:16Z", "author": {"login": "hunterwerlla"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzg2Mg==", "bodyText": "Ya, our doc pages all say 15 mins: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r498403862", "createdAt": "2020-10-01T17:24:42Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTg2Ng=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk3MjUwOnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNDozNlrOHwrhmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1MDo0N1rOH9pZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjgxMA==", "bodyText": "We probably should validate hostname to make sure it's compliant. https://github.com/aws/aws-sdk-java-v2/blob/master/utils/src/main/java/software/amazon/awssdk/utils/HostnameValidator.java#L23", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520806810", "createdAt": "2020-11-10T19:04:36Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to get an auth token for IAM database authentication.\n+ */\n+public final class GenerateAuthenticationTokenRequest implements ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMzM3MA==", "bodyText": "Will change", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534403370", "createdAt": "2020-12-02T18:50:47Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to get an auth token for IAM database authentication.\n+ */\n+public final class GenerateAuthenticationTokenRequest implements ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjgxMA=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MjQ5OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzozNlrOHwrn5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzozNTowNlrOIOE4YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg==", "bodyText": "SdkClientConfiguration is a protected API, so not sure if we want to use it here\nIt seems we only need region and credential provider here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520808422", "createdAt": "2020-11-10T19:07:36Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);\n+        String signedUrl = fullRequest.getUri().toString();\n+\n+        // Format should be: <hostname>>:<port>>/?Action=connect&DBUser=<username>>&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expi...\n+        // Note: This must be the real RDS hostname, not proxy or tunnels\n+        return StringUtils.replacePrefixIgnoreCase(signedUrl, \"https://\", \"\");\n+    }\n+\n+    private Region resolveRegion(GenerateAuthenticationTokenRequest request) {\n+        if (request.region() != null) {\n+            return request.region();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.AWS_REGION) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.AWS_REGION);\n+        }\n+\n+        throw new IllegalArgumentException(\"Region should be provided either in GenerateAuthenticationTokenRequest object or \"\n+                                           + \"inherited from RdsClient#utilities\");\n+    }\n+\n+    private AwsCredentialsProvider resolveCredentials(GenerateAuthenticationTokenRequest request) {\n+        if (request.credentialsProvider() != null) {\n+            return request.credentialsProvider();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER);\n+        }\n+\n+        throw new IllegalArgumentException(\"CredentialProvider should be provided either in GenerateAuthenticationTokenRequest \"\n+                                           + \"object or inherited from RdsClient#utilities\");\n+    }\n+\n+    /**\n+     * Builder class to construct {@link RdsUtilities} object\n+     */\n+    public static final class Builder {\n+        private SdkClientConfiguration clientConfiguration;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder clientConfiguration(SdkClientConfiguration clientConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNDY1OQ==", "bodyText": "Was worried about future compatibility, but since this is private we can worry about that if/when that time comes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534404659", "createdAt": "2020-12-02T18:52:53Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);\n+        String signedUrl = fullRequest.getUri().toString();\n+\n+        // Format should be: <hostname>>:<port>>/?Action=connect&DBUser=<username>>&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expi...\n+        // Note: This must be the real RDS hostname, not proxy or tunnels\n+        return StringUtils.replacePrefixIgnoreCase(signedUrl, \"https://\", \"\");\n+    }\n+\n+    private Region resolveRegion(GenerateAuthenticationTokenRequest request) {\n+        if (request.region() != null) {\n+            return request.region();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.AWS_REGION) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.AWS_REGION);\n+        }\n+\n+        throw new IllegalArgumentException(\"Region should be provided either in GenerateAuthenticationTokenRequest object or \"\n+                                           + \"inherited from RdsClient#utilities\");\n+    }\n+\n+    private AwsCredentialsProvider resolveCredentials(GenerateAuthenticationTokenRequest request) {\n+        if (request.credentialsProvider() != null) {\n+            return request.credentialsProvider();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER);\n+        }\n+\n+        throw new IllegalArgumentException(\"CredentialProvider should be provided either in GenerateAuthenticationTokenRequest \"\n+                                           + \"object or inherited from RdsClient#utilities\");\n+    }\n+\n+    /**\n+     * Builder class to construct {@link RdsUtilities} object\n+     */\n+    public static final class Builder {\n+        private SdkClientConfiguration clientConfiguration;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder clientConfiguration(SdkClientConfiguration clientConfiguration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMDk0NA==", "bodyText": "Builder now stores the cred provider and region as fields. This method is used by the package protected method RdsUtilities#create which is generated to be used from RdsClient#utiltiies()\nDefaultRdsClient.java\n    @Override\n    public RdsUtilities utilities() {\n        return RdsUtilities.create(clientConfiguration);\n    }\n\nSo everything is now hidden which should be hidden. Will add cred provider and region to the builder though so manual creation is possible.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r551630944", "createdAt": "2021-01-04T23:35:06Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);\n+        String signedUrl = fullRequest.getUri().toString();\n+\n+        // Format should be: <hostname>>:<port>>/?Action=connect&DBUser=<username>>&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expi...\n+        // Note: This must be the real RDS hostname, not proxy or tunnels\n+        return StringUtils.replacePrefixIgnoreCase(signedUrl, \"https://\", \"\");\n+    }\n+\n+    private Region resolveRegion(GenerateAuthenticationTokenRequest request) {\n+        if (request.region() != null) {\n+            return request.region();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.AWS_REGION) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.AWS_REGION);\n+        }\n+\n+        throw new IllegalArgumentException(\"Region should be provided either in GenerateAuthenticationTokenRequest object or \"\n+                                           + \"inherited from RdsClient#utilities\");\n+    }\n+\n+    private AwsCredentialsProvider resolveCredentials(GenerateAuthenticationTokenRequest request) {\n+        if (request.credentialsProvider() != null) {\n+            return request.credentialsProvider();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER);\n+        }\n+\n+        throw new IllegalArgumentException(\"CredentialProvider should be provided either in GenerateAuthenticationTokenRequest \"\n+                                           + \"object or inherited from RdsClient#utilities\");\n+    }\n+\n+    /**\n+     * Builder class to construct {@link RdsUtilities} object\n+     */\n+    public static final class Builder {\n+        private SdkClientConfiguration clientConfiguration;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder clientConfiguration(SdkClientConfiguration clientConfiguration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTAwMzE0OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMzozNFrOHwr0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToyMToyNFrOH9uoSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ==", "bodyText": "I understand the existing S3Utitlies doesn't have an interface, but seems a good idea to create one for new utility classes.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520811655", "createdAt": "2020-11-10T19:13:34Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMjc2Mg==", "bodyText": "To be clear, not a base interface for all utils, just the methods in this class, right?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534402762", "createdAt": "2020-12-02T18:49:51Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4OTE2Mw==", "bodyText": "Yup", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534489163", "createdAt": "2020-12-02T21:21:24Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ=="}, "originalCommit": {"oid": "3c56269744cd8ef94a13c558bbf52ea923af6784"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTczMDk0OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1MTowOVrOIOqcZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDoxNDowMFrOIOsXXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjM3NQ==", "bodyText": "Can we add javadocs for it?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246375", "createdAt": "2021-01-05T22:51:09Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+\n+@SdkPublicApi\n+public interface RdsUtilities {\n+    /**\n+     * Create a builder that can be used to configure and create a {@link RdsUtilities}.\n+     */\n+    static Builder builder() {\n+        return new DefaultRdsUtilities.DefaultBuilder();\n+    }\n+\n+    default String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    default String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3Nzg1NQ==", "bodyText": "Yep, missed this one.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552277855", "createdAt": "2021-01-06T00:14:00Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+\n+@SdkPublicApi\n+public interface RdsUtilities {\n+    /**\n+     * Create a builder that can be used to configure and create a {@link RdsUtilities}.\n+     */\n+    static Builder builder() {\n+        return new DefaultRdsUtilities.DefaultBuilder();\n+    }\n+\n+    default String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    default String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjM3NQ=="}, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTczMzM3OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1MjoxNFrOIOqd6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1MjoxNFrOIOqd6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0Njc2Mg==", "bodyText": "Can we add javadocs? same as other public APIs", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246762", "createdAt": "2021-01-05T22:52:14Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsUtilities;\n+import software.amazon.awssdk.utils.HostnameValidator;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to generate an auth token for IAM database authentication.\n+ */\n+@SdkPublicApi\n+public final class GenerateAuthenticationTokenRequest implements\n+        ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        HostnameValidator.validateHostnameCompliant(builder.hostname, \"hostname\", \"GenerateAuthenticationTokenRequest\");\n+\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");\n+        this.port = Validate.isPositive(builder.port, \"port\");\n+        this.username = Validate.notEmpty(builder.username, \"username\");\n+        this.region = builder.region;\n+        this.credentialsProvider = builder.credentialsProvider;\n+    }\n+\n+    public String hostname() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTczNDM5OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjo1Mjo0NlrOIOqekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo0NzoyNlrOIOu0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjkyOQ==", "bodyText": "username()?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246929", "createdAt": "2021-01-05T22:52:46Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsUtilities;\n+import software.amazon.awssdk.utils.HostnameValidator;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to generate an auth token for IAM database authentication.\n+ */\n+@SdkPublicApi\n+public final class GenerateAuthenticationTokenRequest implements\n+        ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        HostnameValidator.validateHostnameCompliant(builder.hostname, \"hostname\", \"GenerateAuthenticationTokenRequest\");\n+\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");\n+        this.port = Validate.isPositive(builder.port, \"port\");\n+        this.username = Validate.notEmpty(builder.username, \"username\");\n+        this.region = builder.region;\n+        this.credentialsProvider = builder.credentialsProvider;\n+    }\n+\n+    public String hostname() {\n+        return hostname;\n+    }\n+\n+    public int port() {\n+        return port;\n+    }\n+\n+    public String userName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNzk1Nw==", "bodyText": "Changed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552317957", "createdAt": "2021-01-06T01:47:26Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsUtilities;\n+import software.amazon.awssdk.utils.HostnameValidator;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to generate an auth token for IAM database authentication.\n+ */\n+@SdkPublicApi\n+public final class GenerateAuthenticationTokenRequest implements\n+        ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        HostnameValidator.validateHostnameCompliant(builder.hostname, \"hostname\", \"GenerateAuthenticationTokenRequest\");\n+\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");\n+        this.port = Validate.isPositive(builder.port, \"port\");\n+        this.username = Validate.notEmpty(builder.username, \"username\");\n+        this.region = builder.region;\n+        this.credentialsProvider = builder.credentialsProvider;\n+    }\n+\n+    public String hostname() {\n+        return hostname;\n+    }\n+\n+    public int port() {\n+        return port;\n+    }\n+\n+    public String userName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjkyOQ=="}, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTc1MzEyOnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzowMDozOFrOIOqqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo0ODozOFrOIOu1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0OTg4Mw==", "bodyText": "nit, can we make it a constant and add a comment with the link there so that it's less of a magic number?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552249883", "createdAt": "2021-01-05T23:00:38Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxODM5MA==", "bodyText": "Yep", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552318390", "createdAt": "2021-01-06T01:48:38Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0OTg4Mw=="}, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTc2MjQ2OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzowNTowNFrOIOqv9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjo0MjozMlrOIOvvNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTM4Mw==", "bodyText": "Seems like we can reuse the signer.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552251383", "createdAt": "2021-01-05T23:05:04Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMzMzExMQ==", "bodyText": "Ok, it lacked the thread safe annotation so wasnt sure.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552333111", "createdAt": "2021-01-06T02:42:32Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTM4Mw=="}, "originalCommit": {"oid": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MjcxNTYzOnYy", "diffSide": "RIGHT", "path": "services/rds/src/test/java/software/amazon/awssdk/services/rds/DefaultRdsUtilitiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMTo0NToyN1rOIZ7xkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMTo0NToyN1rOIZ7xkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NDY1OA==", "bodyText": "Test data came from AWS CLI: https://github.com/aws/aws-cli/blob/master/tests/functional/rds/test_generate_db_auth_token.py#L50", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r564064658", "createdAt": "2021-01-25T21:45:27Z", "author": {"login": "abrooksv"}, "path": "services/rds/src/test/java/software/amazon/awssdk/services/rds/DefaultRdsUtilitiesTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package software.amazon.awssdk.services.rds;\n+\n+import org.junit.Test;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+\n+import java.time.Clock;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import software.amazon.awssdk.services.rds.DefaultRdsUtilities.DefaultBuilder;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+\n+public class DefaultRdsUtilitiesTest {\n+    private final ZoneId utcZone = ZoneId.of(\"UTC\").normalized();\n+    private final Clock fixedClock = Clock.fixed(ZonedDateTime.of(2016, 11, 7, 17, 39, 33, 0, utcZone).toInstant(), utcZone);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05420271e4d7e9818abbba6bb3cc9f2499164aea"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwNjkyOTk0OnYy", "diffSide": "RIGHT", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxODowNDoxOVrOIhvzrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQxODowNDoxOVrOIhvzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI1NzE5OQ==", "bodyText": "Nit, should we move this option up since it's recommended", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r572257199", "createdAt": "2021-02-08T18:04:19Z", "author": {"login": "zoewangg"}, "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+\n+/**\n+ * Utilities for working with RDS. An instance of this class can be created by:\n+ * <p>\n+ * 1) Directly using the {@link #builder()} method.\n+ *\n+ * <pre>\n+ * RdsUtilities utilities = RdsUtilities.builder()\n+ *  .credentialsProvider(DefaultCredentialsProvider.create())\n+ *  .region(Region.US_WEST_2)\n+ *  .build()\n+ * </pre>\n+ * </p>\n+ *\n+ * <p>\n+ * 2) Using the low-level client {@link RdsClient#utilities()} (or {@link RdsAsyncClient#utilities()}} method. This is\n+ * recommended as SDK will use the same configuration from the {@link RdsClient} object to create the {@link RdsUtilities} object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef3854da8e51f5c7362665003dad6bb84a67180"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4049, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}