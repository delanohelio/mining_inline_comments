{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzg0MTIz", "number": 2179, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo0ODozNVrOFAaE6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozOTozNlrOFA_TXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTcxNTYyOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo0ODozNVrOH-r4JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNzowMVrOH_dIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MjY0NQ==", "bodyText": "I think the retry capacity is very valuable for troubleshooting; otherwise there's no way to tell if the retry gets throttled. I've seen an issue before where all requests failed of IOException, and I initially thought all retry attempts failed, but this header made me realize that the request did not get retried because there was no retry capacity.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r535492645", "createdAt": "2020-12-03T18:48:35Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "diffHunk": "@@ -140,14 +139,8 @@ public void logBackingOff(Duration backoffDelay) {\n      * Retrieve the request to send to the service, including any detailed retry information headers.\n      */\n     public SdkHttpFullRequest requestToSend() {\n-        Integer availableRetryCapacity = TokenBucketRetryCondition.getCapacityForExecution(context.executionAttributes())\n-                                                                  .map(TokenBucketRetryCondition.Capacity::capacityRemaining)\n-                                                                  .orElse(null);\n-        String headerValue = (attemptNumber - 1) + \"/\" +\n-                             context.executionAttributes().getAttribute(LAST_BACKOFF_DELAY_DURATION).toMillis() + \"/\" +\n-                             (availableRetryCapacity != null ? availableRetryCapacity : \"\");\n         return request.toBuilder()\n-                      .putHeader(SDK_RETRY_INFO_HEADER, headerValue)\n+                      .putHeader(SDK_RETRY_INFO_HEADER, \"attempt=\" + attemptNumber + \"; max=\" + retryPolicy.numRetries())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5179a538b5ecdcf960424ac9d33df2d9f0df09ae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNTczOQ==", "bodyText": "I guess now that we have metrics, we can see it there. It's just not as obvious", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r535505739", "createdAt": "2020-12-03T19:07:55Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "diffHunk": "@@ -140,14 +139,8 @@ public void logBackingOff(Duration backoffDelay) {\n      * Retrieve the request to send to the service, including any detailed retry information headers.\n      */\n     public SdkHttpFullRequest requestToSend() {\n-        Integer availableRetryCapacity = TokenBucketRetryCondition.getCapacityForExecution(context.executionAttributes())\n-                                                                  .map(TokenBucketRetryCondition.Capacity::capacityRemaining)\n-                                                                  .orElse(null);\n-        String headerValue = (attemptNumber - 1) + \"/\" +\n-                             context.executionAttributes().getAttribute(LAST_BACKOFF_DELAY_DURATION).toMillis() + \"/\" +\n-                             (availableRetryCapacity != null ? availableRetryCapacity : \"\");\n         return request.toBuilder()\n-                      .putHeader(SDK_RETRY_INFO_HEADER, headerValue)\n+                      .putHeader(SDK_RETRY_INFO_HEADER, \"attempt=\" + attemptNumber + \"; max=\" + retryPolicy.numRetries())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MjY0NQ=="}, "originalCommit": {"oid": "5179a538b5ecdcf960424ac9d33df2d9f0df09ae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5OTY5NQ==", "bodyText": "Maybe we could add a debug log whenever we do not retry because of throttling?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r536299695", "createdAt": "2020-12-04T18:37:01Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "diffHunk": "@@ -140,14 +139,8 @@ public void logBackingOff(Duration backoffDelay) {\n      * Retrieve the request to send to the service, including any detailed retry information headers.\n      */\n     public SdkHttpFullRequest requestToSend() {\n-        Integer availableRetryCapacity = TokenBucketRetryCondition.getCapacityForExecution(context.executionAttributes())\n-                                                                  .map(TokenBucketRetryCondition.Capacity::capacityRemaining)\n-                                                                  .orElse(null);\n-        String headerValue = (attemptNumber - 1) + \"/\" +\n-                             context.executionAttributes().getAttribute(LAST_BACKOFF_DELAY_DURATION).toMillis() + \"/\" +\n-                             (availableRetryCapacity != null ? availableRetryCapacity : \"\");\n         return request.toBuilder()\n-                      .putHeader(SDK_RETRY_INFO_HEADER, headerValue)\n+                      .putHeader(SDK_RETRY_INFO_HEADER, \"attempt=\" + attemptNumber + \"; max=\" + retryPolicy.numRetries())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MjY0NQ=="}, "originalCommit": {"oid": "5179a538b5ecdcf960424ac9d33df2d9f0df09ae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgxMTM5OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketRetryCondition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozODo0N1rOH_i7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0NDowNVrOH_k8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDUyNg==", "bodyText": "debug?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r536394526", "createdAt": "2020-12-04T21:38:47Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketRetryCondition.java", "diffHunk": "@@ -122,9 +125,17 @@ public boolean shouldRetry(RetryPolicyContext context) {\n             context.executionAttributes().putAttribute(LAST_ACQUIRED_CAPACITY, c);\n             context.executionAttributes().putAttribute(RETRY_COUNT_OF_LAST_CAPACITY_ACQUISITION,\n                                                        context.retriesAttempted());\n+            log.trace(() -> \"Successfully acquired token bucket capacity to retry this request. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cffce865aaed308f5ba8b818b3bb660c5421ec0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzU2OQ==", "bodyText": "This seemed like a bit much for debug, since we're already logging when there wasn't enough capacity. I was thinking if we really needed to debug this, we can ask them to enable trace for this one class.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r536427569", "createdAt": "2020-12-04T22:44:05Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketRetryCondition.java", "diffHunk": "@@ -122,9 +125,17 @@ public boolean shouldRetry(RetryPolicyContext context) {\n             context.executionAttributes().putAttribute(LAST_ACQUIRED_CAPACITY, c);\n             context.executionAttributes().putAttribute(RETRY_COUNT_OF_LAST_CAPACITY_ACQUISITION,\n                                                        context.retriesAttempted());\n+            log.trace(() -> \"Successfully acquired token bucket capacity to retry this request. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDUyNg=="}, "originalCommit": {"oid": "1cffce865aaed308f5ba8b818b3bb660c5421ec0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgxNDcxOnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/retry/RetryHeaderTestSuite.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozOTozNlrOH_i82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozOTozNlrOH_i82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDk3MQ==", "bodyText": "Nice!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2179#discussion_r536394971", "createdAt": "2020-12-04T21:39:36Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/retry/RetryHeaderTestSuite.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.retry;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.http.HttpExecuteResponse;\n+import software.amazon.awssdk.http.SdkHttpRequest;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.testutils.service.http.MockHttpClient;\n+\n+/**\n+ * A set of tests that verify the behavior of retry-related headers (amz-sdk-invocation-id and amz-sdk-request).\n+ */\n+public abstract class RetryHeaderTestSuite<T extends MockHttpClient> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cffce865aaed308f5ba8b818b3bb660c5421ec0"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3943, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}