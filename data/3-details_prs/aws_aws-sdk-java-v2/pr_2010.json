{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjU3OTY0", "number": 2010, "title": "Don't omit body hash during async signing", "bodyText": "Description\nThis fixes a bug where the SHA-256 of the request body is not included in the\nSigV4 calculation for async, streaming (note: not event streaming) requests.\nThis fixes streaming operations for both CloudSearch Domain and and Glacier.\nMotivation and Context\nBug fix.\nTesting\n\nNew unit tests\nTested UploadDocument for CloudSearch Domain and UploadArchive for Glacier.\nRan integ tests\n\nScreenshots (if appropriate)\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-08-28T21:54:38Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010", "merged": true, "mergeCommit": {"oid": "dc695de6ab49ad03934e1b02e7263abbd2354be0"}, "closed": true, "closedAt": "2020-09-11T20:43:40Z", "author": {"login": "dagnir"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHSyNHAFqTQ4NDM4OTMyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH6-A0ABqjM3NTc4MTc4OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Mzg5MzI0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#pullrequestreview-484389324", "createdAt": "2020-09-08T18:23:40Z", "commit": {"oid": "f4c88d313f30010394a90a53aad4c10b2dc13b8b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyMzo0MFrOHOo9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTowNTo0NlrOHPaTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzIwNQ==", "bodyText": "What if they've overridden the signer at the client level?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485113205", "createdAt": "2020-09-08T18:23:40Z", "author": {"login": "millems"}, "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-query-async-client-class.java", "diffHunk": "@@ -344,4 +350,16 @@ private AwsQueryProtocolFactory init() {\n         }\n         return publishers;\n     }\n+\n+    private <T extends QueryRequest> T applySignerOverride(T request, Signer signer) {\n+        if (request.overrideConfiguration().flatMap(c -> c.signer()).isPresent()) {\n+            return request;\n+        }\n+        Consumer<AwsRequestOverrideConfiguration.Builder> signerOverride = b -> b.signer(signer).build();\n+        AwsRequestOverrideConfiguration overrideConfiguration = request.overrideConfiguration()\n+                .map(c -> c.toBuilder().applyMutation(signerOverride).build())\n+                .orElse((AwsRequestOverrideConfiguration.builder().applyMutation(signerOverride).build()));\n+        return (T) request.toBuilder().overrideConfiguration(overrideConfiguration).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c88d313f30010394a90a53aad4c10b2dc13b8b"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTA0OA==", "bodyText": "Since this is an internal API, can we not do an overload with a branch in it? Maybe just change the existing callers to use the new method?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485115048", "createdAt": "2020-09-08T18:27:12Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java", "diffHunk": "@@ -61,6 +61,13 @@\n     protected SdkHttpFullRequest.Builder doSign(SdkHttpFullRequest request,\n                                                 Aws4SignerRequestParams requestParams,\n                                                 T signingParams) {\n+        return doSign(request, requestParams, signingParams, null);\n+    }\n+\n+    protected SdkHttpFullRequest.Builder doSign(SdkHttpFullRequest request,\n+                                                Aws4SignerRequestParams requestParams,\n+                                                T signingParams,\n+                                                String precomputedContentHash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c88d313f30010394a90a53aad4c10b2dc13b8b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMDg3MA==", "bodyText": "This feels brittle. It feels like it'll be easy to update one branch of the code without updating the other.\nIs there a way to unify the code paths? Maybe via adapting sync signers to async signers?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485920870", "createdAt": "2020-09-09T21:04:07Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/AsyncSigningStage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.http.pipeline.stages;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.AsyncRequestBody;\n+import software.amazon.awssdk.core.http.ExecutionContext;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+import software.amazon.awssdk.core.internal.http.HttpClientDependencies;\n+import software.amazon.awssdk.core.internal.http.InterruptMonitor;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.internal.http.pipeline.RequestPipeline;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.core.signer.AsyncRequestBodySigner;\n+import software.amazon.awssdk.core.signer.AsyncSigner;\n+import software.amazon.awssdk.core.signer.Signer;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.utils.Pair;\n+\n+@SdkInternalApi\n+public class AsyncSigningStage implements RequestPipeline<SdkHttpFullRequest,\n+        CompletableFuture<SdkHttpFullRequest>> {\n+\n+    private final HttpClientDependencies dependencies;\n+\n+    public AsyncSigningStage(HttpClientDependencies dependencies) {\n+        this.dependencies = dependencies;\n+    }\n+\n+    /**\n+     * Returns the response from executing one httpClientSettings request; or null for retry.\n+     */\n+    public CompletableFuture<SdkHttpFullRequest> execute(SdkHttpFullRequest request, RequestExecutionContext context)\n+            throws Exception {\n+        InterruptMonitor.checkInterrupted();\n+        return signRequest(request, context);\n+    }\n+\n+    /**\n+     * Sign the request if the signer if provided and credentials are present.\n+     */\n+    private CompletableFuture<SdkHttpFullRequest> signRequest(SdkHttpFullRequest request,\n+                                                              RequestExecutionContext context) {\n+        updateInterceptorContext(request, context.executionContext());\n+\n+        Signer signer = context.signer();\n+        MetricCollector metricCollector = context.attemptMetricCollector();\n+\n+        if (!shouldSign(signer)) {\n+            return CompletableFuture.completedFuture(request);\n+        }\n+\n+        adjustForClockSkew(context.executionAttributes());\n+\n+        if (signer instanceof AsyncSigner) {\n+            AsyncSigner nonStreamingAsyncSigner = (AsyncSigner) signer;\n+\n+            long signingStart = System.nanoTime();\n+            return nonStreamingAsyncSigner.sign(request, context.requestProvider(),\n+                    context.executionAttributes()).whenComplete((r, t) ->\n+                        metricCollector.reportMetric(CoreMetric.SIGNING_DURATION,\n+                                Duration.ofNanos(System.nanoTime() - signingStart)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd93933d791bd7498d99ed771ba95fccd3b219b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMTczOQ==", "bodyText": "Why not CompletableFutureUtils.forwardExceptionTo here and below?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485921739", "createdAt": "2020-09-09T21:05:46Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -74,16 +74,61 @@ public MakeAsyncHttpRequestStage(TransformingAsyncResponseHandler<Response<Outpu\n                                      HttpClientDependencies dependencies) {\n         this.responseHandler = responseHandler;\n         this.futureCompletionExecutor =\n-            dependencies.clientConfiguration().option(SdkAdvancedAsyncClientOption.FUTURE_COMPLETION_EXECUTOR);\n+                dependencies.clientConfiguration().option(SdkAdvancedAsyncClientOption.FUTURE_COMPLETION_EXECUTOR);\n         this.sdkAsyncHttpClient = dependencies.clientConfiguration().option(SdkClientOption.ASYNC_HTTP_CLIENT);\n         this.apiCallAttemptTimeout = dependencies.clientConfiguration().option(SdkClientOption.API_CALL_ATTEMPT_TIMEOUT);\n         this.timeoutExecutor = dependencies.clientConfiguration().option(SdkClientOption.SCHEDULED_EXECUTOR_SERVICE);\n     }\n \n     @Override\n-    public CompletableFuture<Response<OutputT>> execute(SdkHttpFullRequest request,\n-                                                        RequestExecutionContext context) throws Exception {\n-        return executeHttpRequest(request, context);\n+    public CompletableFuture<Response<OutputT>> execute(CompletableFuture<SdkHttpFullRequest> requestFuture,\n+                                                        RequestExecutionContext context) {\n+        CompletableFuture<Response<OutputT>> toReturn = new CompletableFuture<>();\n+\n+        // Setup the cancellations. If the caller fails to provide a request, forward the exception to the future we\n+        // return\n+        requestFuture.whenComplete((r, t) -> {\n+            if (t != null) {\n+                toReturn.completeExceptionally(t);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd93933d791bd7498d99ed771ba95fccd3b219b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Mzg4NTQx", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#pullrequestreview-486388541", "createdAt": "2020-09-11T00:02:25Z", "commit": {"oid": "7d1568d91bcc9347edb44d581b3af7bf10829349"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDowMjoyNVrOHQJrdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDowNTowN1rOHQJuJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Nzg0Ng==", "bodyText": "Formatting.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486697846", "createdAt": "2020-09-11T00:02:25Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/client/AsyncClientClass.java", "diffHunk": "@@ -400,4 +411,47 @@ private MethodSpec resolveMetricPublishersMethod() {\n \n         return methodBuilder.build();\n     }\n+\n+    private boolean shouldUseAsyncWithBodySigner(OperationModel opModel) {\n+        if (opModel.getInputShape().getRequestSignerClassFqcn() != null) {\n+            return false;\n+        }\n+\n+        AuthType authTypeForOperation = opModel.getAuthType();\n+\n+        if (authTypeForOperation == AuthType.IAM) {\n+            authTypeForOperation = model.getMetadata().getAuthType();\n+        }\n+\n+        return authTypeForOperation == AuthType.V4 && opModel.hasStreamingInput();\n+    }\n+\n+    private CodeBlock applyAsyncWithBodyV4SignerOverride(OperationModel opModel) {\n+        return CodeBlock.builder()\n+                .beginControlFlow(\"if (!isSignerOverridden($N))\", \"clientConfiguration\")\n+                .addStatement(\"$1L = applySignerOverride($1L, $2T.create())\",\n+                opModel.getInput().getVariableName(), AsyncAws4Signer.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1568d91bcc9347edb44d581b3af7bf10829349"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5ODUzNA==", "bodyText": "This duplicates data that was already pulled out elsewhere. To prevent duplication, can we just pull out what we need here (similar to ENDPOINT_OVERRIDDEN.... SIGNER_OVERRIDDEN?)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486698534", "createdAt": "2020-09-11T00:05:07Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/client/builder/SdkDefaultClientBuilder.java", "diffHunk": "@@ -372,6 +373,7 @@ public final B overrideConfiguration(ClientOverrideConfiguration overrideConfig)\n         overrideConfig.advancedOption(ENDPOINT_OVERRIDDEN_OVERRIDE).ifPresent(value -> {\n             clientConfiguration.option(ENDPOINT_OVERRIDDEN, value);\n         });\n+        clientConfiguration.option(CLIENT_OVERRIDE_CONFIGURATION, overrideConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1568d91bcc9347edb44d581b3af7bf10829349"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16b505d31d8269b7097c32f2fba630053b779ba7", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/16b505d31d8269b7097c32f2fba630053b779ba7", "committedDate": "2020-09-11T00:30:06Z", "message": "Set flat when signer is overridden"}, "afterCommit": {"oid": "300c98d392c52a049c61a5cb9c35264cde0bea35", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/300c98d392c52a049c61a5cb9c35264cde0bea35", "committedDate": "2020-09-11T00:47:40Z", "message": "Set flat when signer is overridden"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "300c98d392c52a049c61a5cb9c35264cde0bea35", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/300c98d392c52a049c61a5cb9c35264cde0bea35", "committedDate": "2020-09-11T00:47:40Z", "message": "Set flat when signer is overridden"}, "afterCommit": {"oid": "a0859c40d88faed6ddafeef23b9da5583ede0a2e", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a0859c40d88faed6ddafeef23b9da5583ede0a2e", "committedDate": "2020-09-11T00:48:24Z", "message": "Set flag when signer is overridden"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTEyMDQ0", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#pullrequestreview-486912044", "createdAt": "2020-09-11T15:33:22Z", "commit": {"oid": "a0859c40d88faed6ddafeef23b9da5583ede0a2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429a8a8141096a0f8409b360c649409f6023320a", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/429a8a8141096a0f8409b360c649409f6023320a", "committedDate": "2020-09-11T19:56:28Z", "message": "Don't omit body hash during async signing\n\nThis fixes a bug where the SHA-256 of the request body is not included in the\nSigV4 calculation for async, streaming (note: not event streaming) requests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0859c40d88faed6ddafeef23b9da5583ede0a2e", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a0859c40d88faed6ddafeef23b9da5583ede0a2e", "committedDate": "2020-09-11T00:48:24Z", "message": "Set flag when signer is overridden"}, "afterCommit": {"oid": "429a8a8141096a0f8409b360c649409f6023320a", "author": {"user": {"login": "dagnir", "name": "Dongie Agnir"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/429a8a8141096a0f8409b360c649409f6023320a", "committedDate": "2020-09-11T19:56:28Z", "message": "Don't omit body hash during async signing\n\nThis fixes a bug where the SHA-256 of the request body is not included in the\nSigV4 calculation for async, streaming (note: not event streaming) requests."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2437, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}