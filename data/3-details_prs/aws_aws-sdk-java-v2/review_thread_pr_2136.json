{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzMwMTQx", "number": 2136, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowMToxNFrOE117Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowMToxNFrOE117Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODkzNTM5OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/FileAsyncRequestBody.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowMToxNFrOHuWS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNDo1NFrOHuWuUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MTgyNA==", "bodyText": "Could this be a breaking change? Because the default thread pool used is https://docs.oracle.com/javase/8/docs/api/java/nio/channels/AsynchronousChannelGroup.html and customers can configure it via system properties.\nShould we close the executor when the SDK client is closed? My concern is that customers might find it surprising that after the client is closed, there are still some sdk threads lingering.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2136#discussion_r518361824", "createdAt": "2020-11-05T21:01:14Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/FileAsyncRequestBody.java", "diffHunk": "@@ -293,6 +298,12 @@ private void signalOnError(Throwable t) {\n     }\n \n     private static AsynchronousFileChannel openInputChannel(Path path) throws IOException {\n-        return AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n+        return AsynchronousFileChannel.open(path, Collections.singleton(StandardOpenOption.READ), EXECUTOR);\n+    }\n+\n+    private static ExecutorService executor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5addbce930a34d86e416511e492e812f04d9dcf3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NjA0OA==", "bodyText": "I guess someone might consider this to be breaking. It certainly wouldn't affect the majority of users, but I suppose it could affect someone. I'm willing to drop naming these threads from this change, since it was just for my ease of debugging and no customers have complained about it.\nThe threads will go away after 60 seconds, so they won't linger too long. That's also the current behavior.\nA async request body is a separate abstraction from the client, so it can't be linked to the lifecycle of a client.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2136#discussion_r518366048", "createdAt": "2020-11-05T21:09:52Z", "author": {"login": "millems"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/FileAsyncRequestBody.java", "diffHunk": "@@ -293,6 +298,12 @@ private void signalOnError(Throwable t) {\n     }\n \n     private static AsynchronousFileChannel openInputChannel(Path path) throws IOException {\n-        return AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n+        return AsynchronousFileChannel.open(path, Collections.singleton(StandardOpenOption.READ), EXECUTOR);\n+    }\n+\n+    private static ExecutorService executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MTgyNA=="}, "originalCommit": {"oid": "5addbce930a34d86e416511e492e812f04d9dcf3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODg0OA==", "bodyText": "Yeah, +1 it's super difficult to debug right now. It'd also be nice if we could provide a configuration that allows customers to provide their own executors.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2136#discussion_r518368848", "createdAt": "2020-11-05T21:14:54Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/FileAsyncRequestBody.java", "diffHunk": "@@ -293,6 +298,12 @@ private void signalOnError(Throwable t) {\n     }\n \n     private static AsynchronousFileChannel openInputChannel(Path path) throws IOException {\n-        return AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n+        return AsynchronousFileChannel.open(path, Collections.singleton(StandardOpenOption.READ), EXECUTOR);\n+    }\n+\n+    private static ExecutorService executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MTgyNA=="}, "originalCommit": {"oid": "5addbce930a34d86e416511e492e812f04d9dcf3"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3931, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}