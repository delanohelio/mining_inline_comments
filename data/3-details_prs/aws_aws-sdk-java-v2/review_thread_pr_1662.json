{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTkxNzA4", "number": 1662, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrODidOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrODidOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU2OTgyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrOFttucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyMVrOFttucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTQxMQ==", "bodyText": "This is the line that was changed from the original PR.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662#discussion_r383479411", "createdAt": "2020-02-24T19:52:21Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java", "diffHunk": "@@ -192,58 +189,78 @@ public void multiplePut() {\n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_1.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_1.get(0)))\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_2.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_2.get(0)))\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(RECORDS_1.get(0)));\n         assertThat(record2, is(RECORDS_2.get(0)));\n     }\n \n     @Test\n     public void singleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             singletonList(WriteBatch.builder(Record1.class)\n                                     .mappedTableResource(mappedTable1)\n-                                    .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                                    .addDeleteItem(r -> r.key(Key.create(numberValue(0))))\n                                     .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record, is(nullValue()));\n     }\n \n     @Test\n     public void multipleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n-        mappedTable2.putItem(PutItemEnhancedRequest.create(RECORDS_2.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(nullValue()));\n         assertThat(record2, is(nullValue()));\n     }\n \n+    @Test\n+    public void mixedCommands() {\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0)));\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0)));\n+\n+        enhancedAsyncClient.batchWriteItem(r -> r.writeBatches(\n+            WriteBatch.builder(Record1.class)\n+                      .mappedTableResource(mappedTable1)\n+                      .addPutItem(i -> i.item(RECORDS_1.get(1)))\n+                      .build(),\n+            WriteBatch.builder(Record2.class)\n+                      .mappedTableResource(mappedTable2)\n+                      .addDeleteItem(i -> i.key(Key.create(numberValue(0))))\n+                      .build())).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d969b518ea71b3eb8ebbff55b1b8a2506483afe"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4217, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}