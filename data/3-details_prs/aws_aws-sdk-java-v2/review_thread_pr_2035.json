{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzI2NjMw", "number": 2035, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowOTo1MFrOEjQczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozOTo0NVrOElE82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA1MTMyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowOTo1MFrOHRg45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowOTo1MFrOHRg45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjY5Mg==", "bodyText": "* .name(\"outerAttribute).addNested(\"innerAttributeLevel1).addNested(\"innerAttributeLevel2\").build();", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488126692", "createdAt": "2020-09-14T18:09:50Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA1NDgxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMDo0NFrOHRg7Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMDo0NFrOHRg7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzI0Mw==", "bodyText": "Ignoring the builder entirely, I think we should store this just as a single list. If it's a single element, then it's not nested, if there are multiple elements then it's nested.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488127243", "createdAt": "2020-09-14T18:10:44Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA1ODQxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMTozN1rOHRg9DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMTozN1rOHRg9DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzc1Ng==", "bodyText": "Why are you returning a raw-type list here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488127756", "createdAt": "2020-09-14T18:11:37Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA3NTg0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNjo0NFrOHRhIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNjo0NFrOHRhIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDY1MQ==", "bodyText": "We avoid this builder pattern, we think it creates more complexity and confusion than it solves. We should try and design a simple builder that intuitively works for both use cases. This may not be the best solution but whatever solution we come up with has to work for all the scenarios. E.g.:\n// All of these are equivalent\nAttributeName.builder().name(\"foo\").addNestedNames(\"bar\").build();\nAttributeName.builder().addNestedNames(\"foo\", bar\");\nAttributeName.builder().addNestedNames(\"foo\").addNestedNames(\"bar\");", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488130651", "createdAt": "2020-09-14T18:16:44Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA3NzkyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNzoyNFrOHRhJug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNzoyNFrOHRhJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTAwMg==", "bodyText": "Nit: remove this empty line.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488131002", "createdAt": "2020-09-14T18:17:24Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }\n+\n+    /**\n+     * A builder for {@link AttributeName}\n+     * This builder follows BuilderStep pattern.\n+     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n+     */\n+    public static class Builder implements AttributeNameBuilder, BuildStep {\n+        private final List<String> nestedAttributeNames = new ArrayList<>();\n+        private String attributeToProject;\n+\n+        private Builder() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA4MjA3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxODo0MFrOHRhMbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxODo0MFrOHRhMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTY5NQ==", "bodyText": "Our pattern is to initialize this to null like other parameters, and when they add something check if it's null and create a new ArrayList then if necessary. This also allows us to provide a setter method, although it's important when we let them set the whole list we always create our own new ArrayList to avoid mutation of the list outside of our control after object created :\npublic Builder nestedAttributeNames(List<String> nestedAttributeNames) { ... }", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488131695", "createdAt": "2020-09-14T18:18:40Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }\n+\n+    /**\n+     * A builder for {@link AttributeName}\n+     * This builder follows BuilderStep pattern.\n+     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n+     */\n+    public static class Builder implements AttributeNameBuilder, BuildStep {\n+        private final List<String> nestedAttributeNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA4NTA4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxOTozM1rOHRhOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxOTozM1rOHRhOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMjE4NA==", "bodyText": "Minor: Our standard pattern is to have a constructor that takes an instance of a builder. Eg:\nprivate AttributeName(Builder b) { ... }", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488132184", "createdAt": "2020-09-14T18:19:33Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA4NzQ4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyMDoxNFrOHRhP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyMDoxNFrOHRhP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMjU2MA==", "bodyText": "We should add a toBuilder() method and override equals() and hashcode().", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488132560", "createdAt": "2020-09-14T18:20:14Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDExOTU4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyOToyN1rOHRhkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyOToyN1rOHRhkDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNzc0MA==", "bodyText": "My opinion is that we should deprecate the List and just have a List. That will simplify our behavioral logic around this.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488137740", "createdAt": "2020-09-14T18:29:27Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -47,6 +48,7 @@\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n     private final List<String> attributesToProject;\n+    private final List<AttributeName> attributeNamesToProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a30b134fc2ddae7bf22202ef99a73b723f448c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEyODk3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMjowMFrOHRhpkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMjowMFrOHRhpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTE1Mg==", "bodyText": "Can we talk more offline about the design of this.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488139152", "createdAt": "2020-09-14T18:32:00Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,6 +366,92 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of AttributeName which supports representing nested attributes.\n+\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeNameToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         *        Nested levels of Attributes can be added using AttributeName class.\n+         *        AttributeName.builder() can be used to created AttributeNames.\n+         *        AttributeName.builder().name(\"simpleAttribute\").build\n+         *        or for Nested attribute\n+         *        AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributeNameToProject(Collection<AttributeName> attributeNameToProject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a30b134fc2ddae7bf22202ef99a73b723f448c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzNzA5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDozMlrOHRhuvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDozMlrOHRhuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDQ3Ng==", "bodyText": "Can we figure out a way not to have this class at all. Seems like these methods can be divided into two groups, one that acts on a List of AttributeNames and one that acts on a single AttributeName. Maybe we can create two dynamic classes that are constructed from those respective entities and provide these methods.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488140476", "createdAt": "2020-09-14T18:34:32Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.operations.utils;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeName;\n+\n+/**\n+ * Contains Util methods used in Operations.\n+ */\n+@SdkInternalApi\n+public final class OperationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a30b134fc2ddae7bf22202ef99a73b723f448c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzM5NzA0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxMTowMVrOHS6cSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxMTowMVrOHS6cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MzkzMQ==", "bodyText": "Can we give an example here to put it in context.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489593931", "createdAt": "2020-09-16T17:11:01Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQwODcxOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNDoxN1rOHS6jow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNDoxN1rOHS6jow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTgxMQ==", "bodyText": "Can we change this to: Creates a NestedAttributeName with a single element, which is effectively just a simple attribute name without nesting.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489595811", "createdAt": "2020-09-16T17:14:17Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQyMTU0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNzo0NVrOHS6rbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNzo0NVrOHS6rbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NzgwNQ==", "bodyText": "I couldn't understand this sentence. Can we change it to: Creates a NestedAttributeName from a list of elements that compose the full path of the nested attribute.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489597805", "createdAt": "2020-09-16T17:17:45Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQyOTQwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMDowMVrOHS6wYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMDowMVrOHS6wYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5OTA3NQ==", "bodyText": "Can we change this to:  Creates a NestedAttributeName from a list of elements that compose the full path of the nested attribute.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489599075", "createdAt": "2020-09-16T17:20:01Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQzMDgzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMDoyNlrOHS6xTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMDoyNlrOHS6xTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5OTMxMQ==", "bodyText": "Collection is not appropriate for this API as order matters. We should change it to List.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489599311", "createdAt": "2020-09-16T17:20:26Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQzNjcwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjowM1rOHS602Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjowM1rOHS602Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDIxNw==", "bodyText": "Nit: space should be after comma, not before", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489600217", "createdAt": "2020-09-16T17:22:03Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQzOTQyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjozNVrOHS62aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjozNVrOHS62aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDYxOQ==", "bodyText": "Can we change 'Each of the index...' to 'Each element in the list...'", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489600619", "createdAt": "2020-09-16T17:22:35Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ0MzMyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMzo0MlrOHS641Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMzo0MlrOHS641Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMTIzNw==", "bodyText": "Its implied, but I prefer to be explicit with code like this and would change this to private List<String> elements = null;", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489601237", "createdAt": "2020-09-16T17:23:42Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ1MzA1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNjoyM1rOHS6-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNjoyM1rOHS6-4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMjc4NQ==", "bodyText": "Collection is not appropriate because order matters. Can we change this to List.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489602785", "createdAt": "2020-09-16T17:26:23Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ1NDU1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNjo0N1rOHS6_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNjo0N1rOHS6_uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzAwMw==", "bodyText": "\"Adds a list of elements to the nested attribute name.\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603003", "createdAt": "2020-09-16T17:26:47Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ1NzU1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNzo0MFrOHS7BuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyNzo0MFrOHS7BuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzUxMg==", "bodyText": "\"Subsequent calls to this method will append the new elements to the end of the existing chain of elements creating new levels of nesting.\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603512", "createdAt": "2020-09-16T17:27:40Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ1OTIwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyODoxMFrOHS7CxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyODoxMFrOHS7CxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzc4MA==", "bodyText": "\"List of strings...\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603780", "createdAt": "2020-09-16T17:28:10Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ2Njg4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMDoyM1rOHS7Hng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMDoyM1rOHS7Hng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNTAyMg==", "bodyText": "\"Sets the elements that compose a nested attribute name. Will overwrite any existing elements stored by this builder.\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489605022", "createdAt": "2020-09-16T17:30:23Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ3MTc0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMTo0NlrOHS7Klg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMTo0NlrOHS7Klg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNTc4Mg==", "bodyText": "* <b>Example:</b>builder().elements(\"foo\",\"bar\") will set the elements\n         * to represent a nested attribute name of 'foo.bar'", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489605782", "createdAt": "2020-09-16T17:31:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ3NTQzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMjo0N1rOHS7M0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMjo0N1rOHS7M0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjM1Mw==", "bodyText": "\"a list of strings that correspond to the elements in a nested attribute name\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606353", "createdAt": "2020-09-16T17:32:47Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ3ODE0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMzo0MVrOHS7OkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMzo0MVrOHS7OkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjgwMQ==", "bodyText": "Can we change Collection to List", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606801", "createdAt": "2020-09-16T17:33:41Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(Collection<String> elements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ3OTExOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMzo1OFrOHS7PHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozMzo1OFrOHS7PHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjk0Mg==", "bodyText": "\"Sets the elements that compose a nested attribute name. Will overwrite any existing elements stored by this builder.\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606942", "createdAt": "2020-09-16T17:33:58Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ4MDc5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNDozMVrOHS7QMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNDozMVrOHS7QMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNzIxOA==", "bodyText": "\"a list of strings that correspond to the elements in a nested attribute name\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489607218", "createdAt": "2020-09-16T17:34:31Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ4MTkzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNDo0OFrOHS7Q2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNDo0OFrOHS7Q2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNzM4NA==", "bodyText": "This makes no sense to me?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489607384", "createdAt": "2020-09-16T17:34:48Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(Collection<String> elements) {\n+            this.elements = new ArrayList<>(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the value of the Build property for this object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ5ODc1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozOToyNlrOHS7bMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozOToyNlrOHS7bMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDAzNQ==", "bodyText": "Let's just remove these javadocs from the internal class for now, then I don't have to comment on them :)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489610035", "createdAt": "2020-09-16T17:39:26Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.NestedAttributeName;\n+\n+/**\n+ * Wrapper method to get Projection Expression Name map and Projection Expressions from NestedAttributeNames.\n+ */\n+@SdkInternalApi\n+public class ProjectionExpressionConvertor {\n+\n+    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n+    private final List<NestedAttributeName> nestedAttributeNames;\n+\n+    private ProjectionExpressionConvertor(List<NestedAttributeName> nestedAttributeNames) {\n+        this.nestedAttributeNames = nestedAttributeNames;\n+    }\n+\n+    /**\n+     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzUwMDY3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozOTo1OVrOHS7cXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzo1NDo1MlrOHUCH2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMzMg==", "bodyText": "Is this constructor really necessary?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489610332", "createdAt": "2020-09-16T17:39:59Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.NestedAttributeName;\n+\n+/**\n+ * Wrapper method to get Projection Expression Name map and Projection Expressions from NestedAttributeNames.\n+ */\n+@SdkInternalApi\n+public class ProjectionExpressionConvertor {\n+\n+    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n+    private final List<NestedAttributeName> nestedAttributeNames;\n+\n+    private ProjectionExpressionConvertor(List<NestedAttributeName> nestedAttributeNames) {\n+        this.nestedAttributeNames = nestedAttributeNames;\n+    }\n+\n+    /**\n+     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(List<NestedAttributeName> nestedAttributeNames) {\n+        return new ProjectionExpressionConvertor(nestedAttributeNames);\n+    }\n+\n+    /**\n+     * @param nestedAttributeName Individual NestedAttributeName\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(NestedAttributeName nestedAttributeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2ODM0NA==", "bodyText": "removed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r490768344", "createdAt": "2020-09-18T07:54:52Z", "author": {"login": "joviegas"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.NestedAttributeName;\n+\n+/**\n+ * Wrapper method to get Projection Expression Name map and Projection Expressions from NestedAttributeNames.\n+ */\n+@SdkInternalApi\n+public class ProjectionExpressionConvertor {\n+\n+    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n+    private final List<NestedAttributeName> nestedAttributeNames;\n+\n+    private ProjectionExpressionConvertor(List<NestedAttributeName> nestedAttributeNames) {\n+        this.nestedAttributeNames = nestedAttributeNames;\n+    }\n+\n+    /**\n+     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(List<NestedAttributeName> nestedAttributeNames) {\n+        return new ProjectionExpressionConvertor(nestedAttributeNames);\n+    }\n+\n+    /**\n+     * @param nestedAttributeName Individual NestedAttributeName\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(NestedAttributeName nestedAttributeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMzMg=="}, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzU2NjU1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo1ODo0NFrOHS8F3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo1ODo0NFrOHS8F3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMDk1Nw==", "bodyText": "I would prefer to call this property 'attributesToProject' because as it stands it could be confusing where it's assumed that these attributes -must- be nested.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489620957", "createdAt": "2020-09-16T17:58:44Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -46,7 +49,7 @@\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final List<String> attributesToProject;\n+    private final List<NestedAttributeName> nestedAttributesToProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzU3Njk3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowMTozNVrOHS8MYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowMTozNVrOHS8MYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMjYyNA==", "bodyText": "Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute with the name \"foo.bar\". Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489622624", "createdAt": "2020-09-16T18:01:35Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,9 +128,20 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzU4NDM1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowMzo0NlrOHS8Q_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowMzo0NlrOHS8Q_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMzgwNQ==", "bodyText": "Returns the list of projected attribute names, in the form of {@link NestedAttributeName} objects, for this request object, or null if no projection is specified.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489623805", "createdAt": "2020-09-16T18:03:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,9 +128,20 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.\n      */\n     public List<String> attributesToProject() {\n-        return attributesToProject;\n+        return nestedAttributesToProject != null ? nestedAttributesToProject.stream().filter(Objects::nonNull)\n+                        .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n+    }\n+\n+    /**\n+     * Returns the list of projected Nested attributes Name on this request object, or an null if no projection is specified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzU4Njg1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowNDoyN1rOHS8Sew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowNDoyN1rOHS8Sew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyNDE4Nw==", "bodyText": "Can we remove this and convert attribute name strings as they are added? If we don't think could cause unexpected and surprising behavior when they overwrite existing attributes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489624187", "createdAt": "2020-09-16T18:04:27Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -193,6 +205,7 @@ public int hashCode() {\n         private Boolean consistentRead;\n         private Expression filterExpression;\n         private List<String> attributesToProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzU5MDUzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowNToyNVrOHS8Uuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODowNToyNVrOHS8Uuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyNDc2Mw==", "bodyText": "Change 'sets' to 'adds'", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489624763", "createdAt": "2020-09-16T18:05:25Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzYxMDg3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMToxNFrOHS8hYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMToxNFrOHS8hYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyODAwMA==", "bodyText": "Copy changes I recommended for the other similar method.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489628000", "createdAt": "2020-09-16T18:11:14Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n+         *                             Nested levels of Attributes can be added using NestedAttributeName class.\n+         *                             Refer {@link NestedAttributeName}.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n+            if (nestedAttributesToProject == null) {\n+                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n+            } else {\n+                if (nestedAttributeNames != null) {\n+                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzYxMzY0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMjowOFrOHS8jKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMjowOFrOHS8jKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyODQ1OQ==", "bodyText": "This method will add new attributes to project to the existing list of attributes to project stored by this builder.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489628459", "createdAt": "2020-09-16T18:12:08Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzYxODM5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMzozOFrOHS8mIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxMzozOFrOHS8mIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyOTIxOQ==", "bodyText": "I think this is confusing to have here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489629219", "createdAt": "2020-09-16T18:13:38Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzYyMDUyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxNDoyM1rOHS8nkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxNDoyM1rOHS8nkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyOTU4Ng==", "bodyText": "Please implement all changes I suggested in QueryEnhancedRequest", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489629586", "createdAt": "2020-09-16T18:14:23Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -284,7 +301,102 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87604b8aea8b97d4be96023ab87e938e3ee3e960"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA5ODAyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTowNjo0MlrOHUElPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyNTo1M1rOHUXnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwODYzNw==", "bodyText": "attributesToProjectStringList attribute is required to maintain the order of the older attributeToProject in cases of resets.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r490808637", "createdAt": "2020-09-18T09:06:42Z", "author": {"login": "joviegas"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -192,7 +206,8 @@ public int hashCode() {\n         private Integer limit;\n         private Boolean consistentRead;\n         private Expression filterExpression;\n-        private List<String> attributesToProject;\n+        private List<String> attributesToProjectStringList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b2b7eff5a17c48eb0e2c833e8357a0fbaa5d533"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMDQ4NA==", "bodyText": "Is the order important? Conceptually I think of this as a 'set'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491120484", "createdAt": "2020-09-18T18:25:53Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -192,7 +206,8 @@ public int hashCode() {\n         private Integer limit;\n         private Boolean consistentRead;\n         private Expression filterExpression;\n-        private List<String> attributesToProject;\n+        private List<String> attributesToProjectStringList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwODYzNw=="}, "originalCommit": {"oid": "0b2b7eff5a17c48eb0e2c833e8357a0fbaa5d533"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzA0MzMwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowOToxNVrOHUXGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowOToxNVrOHUXGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMTk3Mw==", "bodyText": "Typo in DynamoDB", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491111973", "createdAt": "2020-09-18T18:09:15Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by BynamoDB request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzA0NjI5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoxMDowNFrOHUXH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1Nzo1OVrOHUYh7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMjQzMg==", "bodyText": "Having null elements should be invalid. Can we add a validator here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491112432", "createdAt": "2020-09-18T18:10:04Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by BynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNTQ3MA==", "bodyText": "Added for Null as well as Empty list", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491135470", "createdAt": "2020-09-18T18:57:59Z", "author": {"login": "joviegas"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by BynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMjQzMg=="}, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzA4ODgzOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyNDowNFrOHUXiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyNDowNFrOHUXiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExOTIwNA==", "bodyText": "I feel like we should add validation to the constructor of the class to avoid the possibility of having null elements in attributesToProject then there would be no need to filter them here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491119204", "createdAt": "2020-09-18T18:24:04Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,8 +128,22 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute\n+     * with the name \"foo.bar\".\n+     * Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.\n      */\n     public List<String> attributesToProject() {\n+        return attributesToProject != null ? attributesToProject.stream().filter(Objects::nonNull)\n+                .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzEwNjM4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyODo0N1rOHUXtBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTowODowMlrOHUYzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMTkyNw==", "bodyText": "I think this is really confusing. We don't want to treat these as separate lists. We should make it clear in the javadoc that addNestedAttributeToProject is adding a 'nested attribute' to the 'attributesToProject' list. Let's make it clear to the customer there is just one list, and let's treat it like one list.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491121927", "createdAt": "2020-09-18T18:28:47Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -231,12 +251,22 @@ public Builder filterExpression(Expression filterExpression) {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributesToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n+         *\n+         * @param attributesToProject A collection of the attributes names to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+\n+            //If there is a reset then clear the attributesToProject List.\n+            if (attributesToProjectStringList != null) {\n+                attributesToProjectStringList\n+                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzOTk4NQ==", "bodyText": "okay.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491139985", "createdAt": "2020-09-18T19:08:02Z", "author": {"login": "joviegas"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -231,12 +251,22 @@ public Builder filterExpression(Expression filterExpression) {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributesToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n+         *\n+         * @param attributesToProject A collection of the attributes names to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+\n+            //If there is a reset then clear the attributesToProject List.\n+            if (attributesToProjectStringList != null) {\n+                attributesToProjectStringList\n+                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMTkyNw=="}, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzEwNzM5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyOTowNlrOHUXtmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODoyOTowNlrOHUXtmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjA3NQ==", "bodyText": "I think this is really confusing. We don't want to treat these as separate lists. We should make it clear in the javadoc that addNestedAttributeToProject is adding a 'nested attribute' to the 'attributesToProject' list. Let's make it clear to the customer there is just one list, and let's treat it like one list.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491122075", "createdAt": "2020-09-18T18:29:06Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -294,12 +310,21 @@ public Builder filterExpression(Expression filterExpression) {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributesToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n+         *\n+         * @param attributesToProject A collection of the attributes names to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            //If there is a reset then clear the attributesToProject List.\n+            if (attributesToProjectStringList != null) {\n+                attributesToProjectStringList\n+                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzExMjY2OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozMDo0NlrOHUXw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxNTo0M1rOHUZBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjkxMg==", "bodyText": "Our assertions libraries in order of preference are : assertJ, hamcrest, junit. You picked the least preferential, can we use assertJ here and everywhere else you have created new test files.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491122912", "createdAt": "2020-09-18T18:30:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MzYxMg==", "bodyText": "updated", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491143612", "createdAt": "2020-09-18T19:15:43Z", "author": {"login": "joviegas"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjkxMg=="}, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzExNTU4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozMTo0MFrOHUXymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozMTo0MFrOHUXymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMzM1NQ==", "bodyText": "This should be invalid and throw an exception (on NestedAttributeName).", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491123355", "createdAt": "2020-09-18T18:31:40Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNestedNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        final String nestedAttribute = \"levelOne\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElements(keyName,nestedAttribute).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        expectedmap.put(MAPPED_INDICATOR + nestedAttribute, nestedAttribute);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName + NESTING_SEPARATOR + MAPPED_INDICATOR + nestedAttribute, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullAttributeName() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElement(null).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzExNzE5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozMjoxMlrOHUXzlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozMjoxMlrOHUXzlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMzYwNQ==", "bodyText": "This should be invalid and throw an exception (on NestedAttributeName).", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491123605", "createdAt": "2020-09-18T18:32:12Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNestedNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        final String nestedAttribute = \"levelOne\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElements(keyName,nestedAttribute).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        expectedmap.put(MAPPED_INDICATOR + nestedAttribute, nestedAttribute);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName + NESTING_SEPARATOR + MAPPED_INDICATOR + nestedAttribute, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullAttributeName() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElement(null).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        assertThat(stringStringMap, is(new HashMap<>()));\n+        Assert.assertFalse(toNameExpression.isPresent());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullNestedNestedAttributes() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().build();\n+        NestedAttributeName nullTest =  NestedAttributeName.builder().build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName, nullTest));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzEyNzk5OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozNTo0NlrOHUX6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozNTo0NlrOHUX6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNTMyNw==", "bodyText": "Maybe split this up, since our tests shouldn't be doing both.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491125327", "createdAt": "2020-09-18T18:35:46Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -121,26 +117,50 @@ public int hashCode() {\n                  .mapToObj(i -> new Record().setId(\"id-value\").setSort(i).setValue(i))\n                  .collect(Collectors.toList());\n \n+    private static final List<NestedTestRecord> NESTED_TEST_RECORDS =\n+            IntStream.range(0, 10)\n+                    .mapToObj(i -> {\n+                        final NestedTestRecord nestedTestRecord = new NestedTestRecord();\n+                        nestedTestRecord.setOuterAttribOne(\"id-value-\" + i);\n+                        nestedTestRecord.setSort(i);\n+                        final InnerAttributeRecord innerAttributeRecord = new InnerAttributeRecord();\n+                        innerAttributeRecord.setAttribOne(\"attribOne-\"+i);\n+                        innerAttributeRecord.setAttribTwo(i);\n+                        nestedTestRecord.setInnerAttributeRecord(innerAttributeRecord);\n+                        nestedTestRecord.setDotVariable(\"v\"+i);\n+                        return nestedTestRecord;\n+                    })\n+                    .collect(Collectors.toList());\n+\n     private DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                                                                           .dynamoDbClient(getDynamoDbClient())\n                                                                           .build();\n \n     private DynamoDbTable<Record> mappedTable = enhancedClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n \n+    private DynamoDbTable<NestedTestRecord> mappedNestedTable = enhancedClient.table(getConcreteTableName(\"nested-table-name\"),\n+            TableSchema.fromClass(NestedTestRecord.class));\n+\n     private void insertRecords() {\n         RECORDS.forEach(record -> mappedTable.putItem(r -> r.item(record)));\n+        NESTED_TEST_RECORDS.forEach(nestedTestRecord -> mappedNestedTable.putItem(r -> r.item(nestedTestRecord)));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzEzNDgyOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozODoxM1rOHUX-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozODoxM1rOHUX-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNjQwOA==", "bodyText": "Can we split these into individual tests.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491126408", "createdAt": "2020-09-18T18:38:13Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -89,6 +90,48 @@ public void builder_maximal() {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+    @Test\n+    public void test_nestedAttributesToProject(){\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzEzODgwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozOTo0NVrOHUYBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozOTo0NVrOHUYBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNzA1NQ==", "bodyText": "See my other comment in the code, I think the 'correct' state here should be \"three\", and the nested attribute should be overwritten with the others.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491127055", "createdAt": "2020-09-18T18:39:45Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -89,6 +90,48 @@ public void builder_maximal() {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+    @Test\n+    public void test_nestedAttributesToProject(){\n+\n+        String[] attributesToProjectArray = {\"one\", \"two\"};\n+        String additionalElement = \"three\";\n+        QueryEnhancedRequest builtObject = QueryEnhancedRequest.builder()\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .build();\n+        List<String> attributesToProject = Arrays.asList(\"foo.bar\", \"one\", \"two\", \"three\");\n+        assertThat(builtObject.attributesToProject(), is(attributesToProject));\n+\n+\n+        QueryEnhancedRequest builtObjectOne = QueryEnhancedRequest.builder()\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .build();\n+        List<String> attributesToProjectNestedLast = Arrays.asList( \"one\", \"two\", \"three\",\"foo.bar\");\n+        assertThat(builtObjectOne.attributesToProject(), is(attributesToProjectNestedLast));\n+\n+\n+        QueryEnhancedRequest builtObjectTwo = QueryEnhancedRequest.builder()\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .attributesToProject(additionalElement)\n+                .build();\n+        List<String> attributesToProjectStringAttributeOverwrittenNestedLast = Arrays.asList( \"foo.bar\", \"three\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacd661cb6749fd5916890a304cfe515bdc93e09"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4031, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}