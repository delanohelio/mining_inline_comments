{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTMxNDA1", "number": 2079, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDozODoyMlrOEpn5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyODoyNlrOEppe1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDgwNjg1OnYy", "diffSide": "RIGHT", "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/ApacheHttpRequestConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDozODoyMlrOHbaCtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxMjowMVrOHbcV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMDI3Nw==", "bodyText": "Seems unnecessary.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498500277", "createdAt": "2020-10-01T20:38:22Z", "author": {"login": "millems"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/ApacheHttpRequestConfig.java", "diffHunk": "@@ -1,3 +1,4 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa6603cad01f097ae35ea89a2ee0b75392efcb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNzk3Mg==", "bodyText": "Yup, removed it in the new revision", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498537972", "createdAt": "2020-10-01T22:12:01Z", "author": {"login": "zoewangg"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/ApacheHttpRequestConfig.java", "diffHunk": "@@ -1,3 +1,4 @@\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMDI3Nw=="}, "originalCommit": {"oid": "87fa6603cad01f097ae35ea89a2ee0b75392efcb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDgxNTMzOnYy", "diffSide": "LEFT", "path": "services/s3/src/it/java/software/amazon/awssdk/services/s3/KeysWithLeadingSlashIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo0MTozMVrOHbaIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo0MTozMVrOHbaIIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMTY2Nw==", "bodyText": "Irrelevant but \"wow\" to this name.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498501667", "createdAt": "2020-10-01T20:41:31Z", "author": {"login": "Quanzzzz"}, "path": "services/s3/src/it/java/software/amazon/awssdk/services/s3/KeysWithLeadingSlashIntegrationTest.java", "diffHunk": "@@ -26,7 +26,8 @@\n public class KeysWithLeadingSlashIntegrationTest extends S3IntegrationTestBase {\n \n     private static final String BUCKET = temporaryBucketName(KeysWithLeadingSlashIntegrationTest.class);\n-    private static final String KEY = \"/stupidkeywithillegalleadingslashthatsucks\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa6603cad01f097ae35ea89a2ee0b75392efcb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDg0NjU3OnYy", "diffSide": "RIGHT", "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1Mjo0OFrOHbacfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMDo1OFrOHbchLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjg3OA==", "bodyText": "What if they are explicitly using the port? i.e. http://localhost:80/test. Is that handled correctly, without mangling the host for the signature?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498506878", "createdAt": "2020-10-01T20:52:48Z", "author": {"login": "millems"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "diffHunk": "@@ -66,12 +66,24 @@ public HttpRequestBase create(final HttpExecuteRequest request, final ApacheHttp\n      * and other AWS services, this is allowed and required. This methods replaces\n      * any occurrence of \"//\" in the URI path with \"/%2F\".\n      *\n+     * @see SdkHttpRequest#getUri()\n      * @param uri The existing URI with double slashes not sanitized for Apache.\n      * @return a new String containing the modified URI\n      */\n     private String sanitizeUri(URI uri) {\n-        String newPath = uri.getPath().replace(\"//\", \"/%2F\");\n-        return uri.toString().replace(uri.getPath(), newPath);\n+        String path = uri.getPath();\n+        if (path.contains(\"//\")) {\n+            String newPath = path.replace(\"//\", \"/%2F\");\n+            String portString = SdkHttpUtils.isUsingStandardPort(uri.getScheme(), uri.getPort()) ?\n+                                \"\" : \":\" + uri.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa6603cad01f097ae35ea89a2ee0b75392efcb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDg0NQ==", "bodyText": "Yeah, we should probably check if (uri.getPort()) == -1 instead. I'll update it", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498540845", "createdAt": "2020-10-01T22:20:58Z", "author": {"login": "zoewangg"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "diffHunk": "@@ -66,12 +66,24 @@ public HttpRequestBase create(final HttpExecuteRequest request, final ApacheHttp\n      * and other AWS services, this is allowed and required. This methods replaces\n      * any occurrence of \"//\" in the URI path with \"/%2F\".\n      *\n+     * @see SdkHttpRequest#getUri()\n      * @param uri The existing URI with double slashes not sanitized for Apache.\n      * @return a new String containing the modified URI\n      */\n     private String sanitizeUri(URI uri) {\n-        String newPath = uri.getPath().replace(\"//\", \"/%2F\");\n-        return uri.toString().replace(uri.getPath(), newPath);\n+        String path = uri.getPath();\n+        if (path.contains(\"//\")) {\n+            String newPath = path.replace(\"//\", \"/%2F\");\n+            String portString = SdkHttpUtils.isUsingStandardPort(uri.getScheme(), uri.getPort()) ?\n+                                \"\" : \":\" + uri.getPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjg3OA=="}, "originalCommit": {"oid": "87fa6603cad01f097ae35ea89a2ee0b75392efcb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA2NzA4OnYy", "diffSide": "RIGHT", "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyODoyNlrOHbcp8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo1Mzo0NlrOHbdGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MzA4OQ==", "bodyText": "What about fragment? Are there other parts of the URI we should also be worried about?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498543089", "createdAt": "2020-10-01T22:28:26Z", "author": {"login": "millems"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "diffHunk": "@@ -66,12 +64,23 @@ public HttpRequestBase create(final HttpExecuteRequest request, final ApacheHttp\n      * and other AWS services, this is allowed and required. This methods replaces\n      * any occurrence of \"//\" in the URI path with \"/%2F\".\n      *\n+     * @see SdkHttpRequest#getUri()\n      * @param uri The existing URI with double slashes not sanitized for Apache.\n      * @return a new String containing the modified URI\n      */\n     private String sanitizeUri(URI uri) {\n-        String newPath = uri.getPath().replace(\"//\", \"/%2F\");\n-        return uri.toString().replace(uri.getPath(), newPath);\n+        String path = uri.getPath();\n+        if (path.contains(\"//\")) {\n+            String newPath = path.replace(\"//\", \"/%2F\");\n+            String port = uri.getPort() == -1 ? \"\" : String.valueOf(uri.getPort());\n+\n+            String query = uri.getQuery() == null ? \"\" : uri.getQuery();\n+\n+            return URI.create(uri.getScheme() + \"://\" +\n+                              uri.getHost() + port + newPath + query)\n+                      .toString();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbae29eee3be6359dc3e3b6e5a7f8f29f917ab2d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDE4MQ==", "bodyText": "We don't have fragment and other parts inSdkHttpRequest.getUri() either.\n\n  \n    \n      aws-sdk-java-v2/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n    \n    \n        Lines 99 to 120\n      in\n      d23f9e7\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Convert this HTTP request's protocol, host, port, path and query string into a properly-encoded URI string that matches the \n        \n\n        \n          \n                * URI string used for AWS request signing. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * <p>The URI's port will be missing (-1) when the {@link #port()} is the default port for the {@link #protocol()}. (80 for \n        \n\n        \n          \n                * http and 443 for https). This is to reflect the fact that request signature does not include the port.</p> \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @return The URI for this request, formatted in the same way the AWS HTTP request signer uses the URI in the signature. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               default URI getUri() { \n        \n\n        \n          \n                   // We can't create a URI by simply passing the query parameters into the URI constructor that takes a query string, \n        \n\n        \n          \n                   // because URI will re-encode them. Because we want to encode them using our encoder, we have to build the URI \n        \n\n        \n          \n                   // ourselves and pass it to the single-argument URI constructor that doesn't perform the encoding. \n        \n\n        \n          \n            \n        \n\n        \n          \n                   String encodedQueryString = SdkHttpUtils.encodeAndFlattenQueryParameters(rawQueryParameters()) \n        \n\n        \n          \n                                                           .map(value -> \"?\" + value) \n        \n\n        \n          \n                                                           .orElse(\"\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // Do not include the port in the URI when using the default port for the protocol. \n        \n\n        \n          \n                   String portString = SdkHttpUtils.isUsingStandardPort(protocol(), port()) ? \"\" : \":\" + port(); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   return URI.create(protocol() + \"://\" + host() + portString + encodedPath() + encodedQueryString);", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498544181", "createdAt": "2020-10-01T22:32:07Z", "author": {"login": "zoewangg"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "diffHunk": "@@ -66,12 +64,23 @@ public HttpRequestBase create(final HttpExecuteRequest request, final ApacheHttp\n      * and other AWS services, this is allowed and required. This methods replaces\n      * any occurrence of \"//\" in the URI path with \"/%2F\".\n      *\n+     * @see SdkHttpRequest#getUri()\n      * @param uri The existing URI with double slashes not sanitized for Apache.\n      * @return a new String containing the modified URI\n      */\n     private String sanitizeUri(URI uri) {\n-        String newPath = uri.getPath().replace(\"//\", \"/%2F\");\n-        return uri.toString().replace(uri.getPath(), newPath);\n+        String path = uri.getPath();\n+        if (path.contains(\"//\")) {\n+            String newPath = path.replace(\"//\", \"/%2F\");\n+            String port = uri.getPort() == -1 ? \"\" : String.valueOf(uri.getPort());\n+\n+            String query = uri.getQuery() == null ? \"\" : uri.getQuery();\n+\n+            return URI.create(uri.getScheme() + \"://\" +\n+                              uri.getHost() + port + newPath + query)\n+                      .toString();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MzA4OQ=="}, "originalCommit": {"oid": "dbae29eee3be6359dc3e3b6e5a7f8f29f917ab2d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1MDQyNw==", "bodyText": "Hmm... okay, future bug to fix, I suppose!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2079#discussion_r498550427", "createdAt": "2020-10-01T22:53:46Z", "author": {"login": "millems"}, "path": "http-clients/apache-client/src/main/java/software/amazon/awssdk/http/apache/internal/impl/ApacheHttpRequestFactory.java", "diffHunk": "@@ -66,12 +64,23 @@ public HttpRequestBase create(final HttpExecuteRequest request, final ApacheHttp\n      * and other AWS services, this is allowed and required. This methods replaces\n      * any occurrence of \"//\" in the URI path with \"/%2F\".\n      *\n+     * @see SdkHttpRequest#getUri()\n      * @param uri The existing URI with double slashes not sanitized for Apache.\n      * @return a new String containing the modified URI\n      */\n     private String sanitizeUri(URI uri) {\n-        String newPath = uri.getPath().replace(\"//\", \"/%2F\");\n-        return uri.toString().replace(uri.getPath(), newPath);\n+        String path = uri.getPath();\n+        if (path.contains(\"//\")) {\n+            String newPath = path.replace(\"//\", \"/%2F\");\n+            String port = uri.getPort() == -1 ? \"\" : String.valueOf(uri.getPort());\n+\n+            String query = uri.getQuery() == null ? \"\" : uri.getQuery();\n+\n+            return URI.create(uri.getScheme() + \"://\" +\n+                              uri.getHost() + port + newPath + query)\n+                      .toString();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MzA4OQ=="}, "originalCommit": {"oid": "dbae29eee3be6359dc3e3b6e5a7f8f29f917ab2d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3896, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}