{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDI0NjI2", "number": 2062, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MTo0MVrOEmxk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxODowN1rOEnJILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDkzNjE5OnYy", "diffSide": "RIGHT", "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MTo0MVrOHXALYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MTo0MVrOHXALYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MjIwOA==", "bodyText": "Need copyright headers", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r493882208", "createdAt": "2020-09-23T20:41:41Z", "author": {"login": "dagnir"}, "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package software.amazon.awssdk.services.dynamodb;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDkzNzgxOnYy", "diffSide": "RIGHT", "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MjowOVrOHXAMWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MjowOVrOHXAMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MjQ1Nw==", "bodyText": "close the client", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r493882457", "createdAt": "2020-09-23T20:42:09Z", "author": {"login": "dagnir"}, "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package software.amazon.awssdk.services.dynamodb;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;\n+import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;\n+import software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;\n+import software.amazon.awssdk.services.dynamodb.model.KeyType;\n+import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;\n+import software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbAsyncWaiter;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbWaiter;\n+import utils.resources.tables.BasicTempTable;\n+import utils.test.util.DynamoDBTestBase;\n+\n+public class WaitersIntegrationTest extends DynamoDBTestBase {\n+\n+    private static final String TABLE_NAME = \"java-sdk-waiter-test\" + System.currentTimeMillis();\n+    private static final String HASH_KEY_NAME = BasicTempTable.HASH_KEY_NAME;\n+    private static DynamoDbAsyncClient dynamoAsync;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        DynamoDBTestBase.setUpTestBase();\n+\n+        dynamoAsync = DynamoDbAsyncClient.builder().region(REGION).credentialsProvider(CREDENTIALS_PROVIDER_CHAIN).build();\n+\n+        dynamo.createTable(CreateTableRequest.builder().tableName(TABLE_NAME)\n+                                             .keySchema(KeySchemaElement.builder().keyType(KeyType.HASH)\n+                                                                        .attributeName(HASH_KEY_NAME)\n+                                                                        .build())\n+                                             .attributeDefinitions(AttributeDefinition.builder()\n+                                                                                      .attributeType(ScalarAttributeType.N)\n+                                                                                      .attributeName(HASH_KEY_NAME)\n+                                                                                      .build())\n+                                             .provisionedThroughput(ProvisionedThroughput.builder()\n+                                                                                         .readCapacityUnits(5L)\n+                                                                                         .writeCapacityUnits(5L)\n+                                                                                         .build())\n+                                             .build());\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk1MTEwOnYy", "diffSide": "RIGHT", "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0NTo1OVrOHXAUkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0NTo1OVrOHXAUkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NDU2MQ==", "bodyText": "Should be using assertJ (assertThat()). Also, whenever possible you should be letting the assertion itself do the boolean test; that means instead of\nassertThat(response.responseOrException().response().get().table().tableName().equals(TABLE_NAME)).isTrue();\nit should be\nassertThat(response.responseOrException().response().get().table().tableName()).isEqualTo(TABLE_NAME));\nLooks like you're already doing this in the functional tests", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r493884561", "createdAt": "2020-09-23T20:45:59Z", "author": {"login": "dagnir"}, "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package software.amazon.awssdk.services.dynamodb;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;\n+import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;\n+import software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;\n+import software.amazon.awssdk.services.dynamodb.model.KeyType;\n+import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;\n+import software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbAsyncWaiter;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbWaiter;\n+import utils.resources.tables.BasicTempTable;\n+import utils.test.util.DynamoDBTestBase;\n+\n+public class WaitersIntegrationTest extends DynamoDBTestBase {\n+\n+    private static final String TABLE_NAME = \"java-sdk-waiter-test\" + System.currentTimeMillis();\n+    private static final String HASH_KEY_NAME = BasicTempTable.HASH_KEY_NAME;\n+    private static DynamoDbAsyncClient dynamoAsync;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        DynamoDBTestBase.setUpTestBase();\n+\n+        dynamoAsync = DynamoDbAsyncClient.builder().region(REGION).credentialsProvider(CREDENTIALS_PROVIDER_CHAIN).build();\n+\n+        dynamo.createTable(CreateTableRequest.builder().tableName(TABLE_NAME)\n+                                             .keySchema(KeySchemaElement.builder().keyType(KeyType.HASH)\n+                                                                        .attributeName(HASH_KEY_NAME)\n+                                                                        .build())\n+                                             .attributeDefinitions(AttributeDefinition.builder()\n+                                                                                      .attributeType(ScalarAttributeType.N)\n+                                                                                      .attributeName(HASH_KEY_NAME)\n+                                                                                      .build())\n+                                             .provisionedThroughput(ProvisionedThroughput.builder()\n+                                                                                         .readCapacityUnits(5L)\n+                                                                                         .writeCapacityUnits(5L)\n+                                                                                         .build())\n+                                             .build());\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        dynamo.deleteTable(DeleteTableRequest.builder().tableName(TABLE_NAME).build());\n+    }\n+\n+    @Test\n+    public void checkTableExist_withSyncWaiter() {\n+        DynamoDbWaiter syncWaiter = dynamo.waiter();\n+        WaiterResponse<DescribeTableResponse> response = syncWaiter.waitUntilTableExists(\n+            DescribeTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        assertTrue(response.attemptsExecuted() >= 1);\n+        assertTrue(response.responseOrException().response().get().table().tableName().equals(TABLE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk2MTM0OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersAsyncFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0OTowNVrOHXAbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0OTowNVrOHXAbDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NjIyMA==", "bodyText": "Copyright headers", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r493886220", "createdAt": "2020-09-23T20:49:05Z", "author": {"login": "dagnir"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersAsyncFunctionalTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package software.amazon.awssdk.services.waiters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTAwMTc3OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersSyncFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTowMToyMVrOHXA0Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyMzoxOFrOHYMTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MjY3MQ==", "bodyText": "Seems like we need to test other scenarios as well such as\n\nWhat happens when we reach max number of attempts\nWhat happens when we get an unexpected exception\nWhat happens to the client and scheduled executor when the the waiter is closed?\netc.\n\ncc: @zoewangg for more suggestions", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r493892671", "createdAt": "2020-09-23T21:01:21Z", "author": {"login": "dagnir"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersSyncFunctionalTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package software.amazon.awssdk.services.waiters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.exception.SdkServiceException;\n+import software.amazon.awssdk.core.retry.backoff.BackoffStrategy;\n+import software.amazon.awssdk.core.waiters.PollingStrategy;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.RestJsonWithWaitersClient;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesRequest;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.waiters.RestJsonWithWaitersWaiter;\n+\n+public class WaitersSyncFunctionalTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA0NTQxMg==", "bodyText": "The max number of attempts case is added in sync Waiters. Unexpected exception case has been covered by the tests for generic Waiters. For the third case, if the client and scheduled executor are configured while creating the Waiters then they won't be closed while the Waiters are closed, and tests related to this case are also added.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r494045412", "createdAt": "2020-09-24T05:22:57Z", "author": {"login": "Quanzzzz"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersSyncFunctionalTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package software.amazon.awssdk.services.waiters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.exception.SdkServiceException;\n+import software.amazon.awssdk.core.retry.backoff.BackoffStrategy;\n+import software.amazon.awssdk.core.waiters.PollingStrategy;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.RestJsonWithWaitersClient;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesRequest;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.waiters.RestJsonWithWaitersWaiter;\n+\n+public class WaitersSyncFunctionalTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MjY3MQ=="}, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyNjYwNg==", "bodyText": "@dagnir Good call! I added the test cases with unexpected exception and caught a bug in waiterRuntime \ud83d\ude05", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r494726606", "createdAt": "2020-09-25T03:28:11Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersSyncFunctionalTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package software.amazon.awssdk.services.waiters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.exception.SdkServiceException;\n+import software.amazon.awssdk.core.retry.backoff.BackoffStrategy;\n+import software.amazon.awssdk.core.waiters.PollingStrategy;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.RestJsonWithWaitersClient;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesRequest;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.waiters.RestJsonWithWaitersWaiter;\n+\n+public class WaitersSyncFunctionalTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MjY3MQ=="}, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyOTM4OA==", "bodyText": "\ud83d\ude05Guess that's my fault. I misunderstood the unmatched exception case in the BaseWaiterTest, thanks for making sure about it again.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r495129388", "createdAt": "2020-09-25T17:23:18Z", "author": {"login": "Quanzzzz"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/waiters/WaitersSyncFunctionalTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package software.amazon.awssdk.services.waiters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.exception.SdkServiceException;\n+import software.amazon.awssdk.core.retry.backoff.BackoffStrategy;\n+import software.amazon.awssdk.core.waiters.PollingStrategy;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.RestJsonWithWaitersClient;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesRequest;\n+import software.amazon.awssdk.services.restjsonwithwaiters.model.AllTypesResponse;\n+import software.amazon.awssdk.services.restjsonwithwaiters.waiters.RestJsonWithWaitersWaiter;\n+\n+public class WaitersSyncFunctionalTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MjY3MQ=="}, "originalCommit": {"oid": "eeb30072eda99efdd976a0931813a05aa4c68b31"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDc5NDM1OnYy", "diffSide": "RIGHT", "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxNzo1OVrOHXk35g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxNzo1OVrOHXk35g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4MzQzMA==", "bodyText": "Use assertThat", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r494483430", "createdAt": "2020-09-24T17:17:59Z", "author": {"login": "dagnir"}, "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.dynamodb;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;\n+import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;\n+import software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;\n+import software.amazon.awssdk.services.dynamodb.model.KeyType;\n+import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;\n+import software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbAsyncWaiter;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbWaiter;\n+import utils.resources.tables.BasicTempTable;\n+import utils.test.util.DynamoDBTestBase;\n+\n+public class WaitersIntegrationTest extends DynamoDBTestBase {\n+\n+    private static final String TABLE_NAME = \"java-sdk-waiter-test\" + System.currentTimeMillis();\n+    private static final String HASH_KEY_NAME = BasicTempTable.HASH_KEY_NAME;\n+    private static DynamoDbAsyncClient dynamoAsync;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        DynamoDBTestBase.setUpTestBase();\n+\n+        dynamoAsync = DynamoDbAsyncClient.builder().region(REGION).credentialsProvider(CREDENTIALS_PROVIDER_CHAIN).build();\n+\n+        dynamo.createTable(CreateTableRequest.builder().tableName(TABLE_NAME)\n+                                             .keySchema(KeySchemaElement.builder().keyType(KeyType.HASH)\n+                                                                        .attributeName(HASH_KEY_NAME)\n+                                                                        .build())\n+                                             .attributeDefinitions(AttributeDefinition.builder()\n+                                                                                      .attributeType(ScalarAttributeType.N)\n+                                                                                      .attributeName(HASH_KEY_NAME)\n+                                                                                      .build())\n+                                             .provisionedThroughput(ProvisionedThroughput.builder()\n+                                                                                         .readCapacityUnits(5L)\n+                                                                                         .writeCapacityUnits(5L)\n+                                                                                         .build())\n+                                             .build());\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        dynamo.deleteTable(DeleteTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        dynamo.close();\n+        dynamoAsync.close();\n+    }\n+\n+    @Test\n+    public void checkTableExist_withSyncWaiter() {\n+        DynamoDbWaiter syncWaiter = dynamo.waiter();\n+        WaiterResponse<DescribeTableResponse> response = syncWaiter.waitUntilTableExists(\n+            DescribeTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        assertTrue(response.attemptsExecuted() >= 1);\n+        assertThat(response.matched().response().get().table().tableName()).isEqualTo(TABLE_NAME);\n+    }\n+\n+    @Test\n+    public void checkTableExist_withAsyncWaiter() throws ExecutionException, InterruptedException {\n+        DynamoDbAsyncWaiter asyncWaiter = dynamoAsync.waiter();\n+        CompletableFuture<WaiterResponse<DescribeTableResponse>> responseFuture = asyncWaiter.waitUntilTableExists(\n+            DescribeTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        responseFuture.join();\n+\n+        assertTrue(responseFuture.get().attemptsExecuted() >= 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a49f0835f7033b6ce4cb38306588659b55378b1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDc5NDcxOnYy", "diffSide": "RIGHT", "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxODowN1rOHXk4Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxODowN1rOHXk4Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4MzUwMg==", "bodyText": "use assertThat", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2062#discussion_r494483502", "createdAt": "2020-09-24T17:18:07Z", "author": {"login": "dagnir"}, "path": "services/dynamodb/src/it/java/software/amazon/awssdk/services/dynamodb/WaitersIntegrationTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.dynamodb;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.waiters.WaiterResponse;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;\n+import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;\n+import software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;\n+import software.amazon.awssdk.services.dynamodb.model.KeyType;\n+import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;\n+import software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbAsyncWaiter;\n+import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbWaiter;\n+import utils.resources.tables.BasicTempTable;\n+import utils.test.util.DynamoDBTestBase;\n+\n+public class WaitersIntegrationTest extends DynamoDBTestBase {\n+\n+    private static final String TABLE_NAME = \"java-sdk-waiter-test\" + System.currentTimeMillis();\n+    private static final String HASH_KEY_NAME = BasicTempTable.HASH_KEY_NAME;\n+    private static DynamoDbAsyncClient dynamoAsync;\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        DynamoDBTestBase.setUpTestBase();\n+\n+        dynamoAsync = DynamoDbAsyncClient.builder().region(REGION).credentialsProvider(CREDENTIALS_PROVIDER_CHAIN).build();\n+\n+        dynamo.createTable(CreateTableRequest.builder().tableName(TABLE_NAME)\n+                                             .keySchema(KeySchemaElement.builder().keyType(KeyType.HASH)\n+                                                                        .attributeName(HASH_KEY_NAME)\n+                                                                        .build())\n+                                             .attributeDefinitions(AttributeDefinition.builder()\n+                                                                                      .attributeType(ScalarAttributeType.N)\n+                                                                                      .attributeName(HASH_KEY_NAME)\n+                                                                                      .build())\n+                                             .provisionedThroughput(ProvisionedThroughput.builder()\n+                                                                                         .readCapacityUnits(5L)\n+                                                                                         .writeCapacityUnits(5L)\n+                                                                                         .build())\n+                                             .build());\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        dynamo.deleteTable(DeleteTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        dynamo.close();\n+        dynamoAsync.close();\n+    }\n+\n+    @Test\n+    public void checkTableExist_withSyncWaiter() {\n+        DynamoDbWaiter syncWaiter = dynamo.waiter();\n+        WaiterResponse<DescribeTableResponse> response = syncWaiter.waitUntilTableExists(\n+            DescribeTableRequest.builder().tableName(TABLE_NAME).build());\n+\n+        assertTrue(response.attemptsExecuted() >= 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a49f0835f7033b6ce4cb38306588659b55378b1"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4054, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}