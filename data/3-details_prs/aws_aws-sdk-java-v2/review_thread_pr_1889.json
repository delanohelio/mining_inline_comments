{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjE5OTk1", "number": 1889, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxODo0NlrOEEzHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMTowOFrOEE47pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDY3MjExOnYy", "diffSide": "RIGHT", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxODo0NlrOGipbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0ODozMlrOGisPYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzQ3Mw==", "bodyText": "What is the motivation for logging the NoOpMetricCollector? What kind of data would it write?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438983473", "createdAt": "2020-06-11T18:18:46Z", "author": {"login": "cenedhryn"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -34,6 +36,7 @@ public String name() {\n \n     @Override\n     public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        log.trace(() -> \"Metrics reported: \" + data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTYwMg==", "bodyText": "This is intended for debugging purpose and that's why it's trace", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439029602", "createdAt": "2020-06-11T19:48:32Z", "author": {"login": "zoewangg"}, "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -34,6 +36,7 @@ public String name() {\n \n     @Override\n     public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        log.trace(() -> \"Metrics reported: \" + data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzQ3Mw=="}, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDY4MzA3OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/resources/jetty-logging.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoyMjoxM1rOGipiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDozNzo1MFrOGit9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTI1OQ==", "bodyText": "What is jetty logging used for?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438985259", "createdAt": "2020-06-11T18:22:13Z", "author": {"login": "cenedhryn"}, "path": "test/codegen-generated-classes-test/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+#  http://aws.amazon.com/apache2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+#\n+\n+# Set up logging implementation\n+org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTI3Mg==", "bodyText": "We are using wiremocks as the local server and it's using jetty under the hood. This file is added to turn off the jetting logs so that it doesn't spam our logs.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439029272", "createdAt": "2020-06-11T19:47:54Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+#  http://aws.amazon.com/apache2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+#\n+\n+# Set up logging implementation\n+org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTI1OQ=="}, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1Nzc0Nw==", "bodyText": "Ok, thanks for explaining!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439057747", "createdAt": "2020-06-11T20:37:50Z", "author": {"login": "cenedhryn"}, "path": "test/codegen-generated-classes-test/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+#  http://aws.amazon.com/apache2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+#\n+\n+# Set up logging implementation\n+org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTI1OQ=="}, "originalCommit": {"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDcxMzg0OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozMjowNVrOGip2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NzowNFrOGisMcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ2MA==", "bodyText": "Can you move this private method down to the other private methods?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438990460", "createdAt": "2020-06-11T18:32:05Z", "author": {"login": "cenedhryn"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java", "diffHunk": "@@ -113,46 +119,172 @@ public void apiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence\n     @Test\n     public void apiCall_operationSuccessful_addsMetrics() {\n         stubSuccessfulResponse();\n+\n         client.allTypes().join();\n \n         ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n         verify(mockPublisher).publish(collectionCaptor.capture());\n-\n         MetricCollection capturedCollection = collectionCaptor.getValue();\n \n-        assertThat(capturedCollection.name()).isEqualTo(\"ApiCall\");\n-        assertThat(capturedCollection.metricValues(CoreMetric.SERVICE_ID))\n-            .containsExactly(SERVICE_ID);\n-        assertThat(capturedCollection.metricValues(CoreMetric.OPERATION_NAME))\n-            .containsExactly(\"AllTypes\");\n+        verifyApiCallCollection(capturedCollection);\n+\n+        assertThat(capturedCollection.children()).hasSize(1);\n+        MetricCollection attemptCollection = capturedCollection.children().get(0);\n+\n+        assertThat(attemptCollection.name()).isEqualTo(\"ApiCallAttempt\");\n+        assertThat(attemptCollection.children()).isEmpty();\n+\n+        verifySuccessfulApiCallAttemptCollection(attemptCollection);\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME).get(0))\n+            .isGreaterThanOrEqualTo(FIXED_DELAY);\n     }\n \n     @Test\n-    public void apiCall_operationFailed_addsMetrics() {\n+    public void apiCall_allRetryAttemptsFailedOf500() {\n         stubErrorResponse();\n-        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(ProtocolRestJsonException.class);\n+        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(EmptyModeledException.class);\n+\n+        ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+        verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+        MetricCollection capturedCollection = collectionCaptor.getValue();\n+        verifyApiCallCollection(capturedCollection);\n+        assertThat(capturedCollection.children()).hasSize(MAX_RETRIES + 1);\n+\n+        capturedCollection.children().forEach(this::verifyFailedApiCallAttemptCollection);\n+    }\n+\n+    private void verifyFailedApiCallAttemptCollection(MetricCollection requestMetrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyODg0OQ==", "bodyText": "sure", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439028849", "createdAt": "2020-06-11T19:47:04Z", "author": {"login": "zoewangg"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java", "diffHunk": "@@ -113,46 +119,172 @@ public void apiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence\n     @Test\n     public void apiCall_operationSuccessful_addsMetrics() {\n         stubSuccessfulResponse();\n+\n         client.allTypes().join();\n \n         ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n         verify(mockPublisher).publish(collectionCaptor.capture());\n-\n         MetricCollection capturedCollection = collectionCaptor.getValue();\n \n-        assertThat(capturedCollection.name()).isEqualTo(\"ApiCall\");\n-        assertThat(capturedCollection.metricValues(CoreMetric.SERVICE_ID))\n-            .containsExactly(SERVICE_ID);\n-        assertThat(capturedCollection.metricValues(CoreMetric.OPERATION_NAME))\n-            .containsExactly(\"AllTypes\");\n+        verifyApiCallCollection(capturedCollection);\n+\n+        assertThat(capturedCollection.children()).hasSize(1);\n+        MetricCollection attemptCollection = capturedCollection.children().get(0);\n+\n+        assertThat(attemptCollection.name()).isEqualTo(\"ApiCallAttempt\");\n+        assertThat(attemptCollection.children()).isEmpty();\n+\n+        verifySuccessfulApiCallAttemptCollection(attemptCollection);\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME).get(0))\n+            .isGreaterThanOrEqualTo(FIXED_DELAY);\n     }\n \n     @Test\n-    public void apiCall_operationFailed_addsMetrics() {\n+    public void apiCall_allRetryAttemptsFailedOf500() {\n         stubErrorResponse();\n-        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(ProtocolRestJsonException.class);\n+        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(EmptyModeledException.class);\n+\n+        ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+        verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+        MetricCollection capturedCollection = collectionCaptor.getValue();\n+        verifyApiCallCollection(capturedCollection);\n+        assertThat(capturedCollection.children()).hasSize(MAX_RETRIES + 1);\n+\n+        capturedCollection.children().forEach(this::verifyFailedApiCallAttemptCollection);\n+    }\n+\n+    private void verifyFailedApiCallAttemptCollection(MetricCollection requestMetrics) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ2MA=="}, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDczMjkzOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozODoxNVrOGiqC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0ODo0MVrOGisPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzYyMA==", "bodyText": "If we had a second metricPublisher mock and added that to the request override instead of the first one, it'd be a better test IMO.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993620", "createdAt": "2020-06-11T18:38:15Z", "author": {"login": "cenedhryn"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {\n+        SdkClientConfiguration config = SdkClientConfiguration.builder().option(METRIC_PUBLISHER, metricPublisher).build();\n+        RequestOverrideConfiguration requestOverrideConfiguration = null;\n+        Optional<MetricPublisher> result = MetricUtils.resolvePublisher(config, requestOverrideConfiguration);\n+        assertThat(result).isEqualTo(Optional.of(metricPublisher));\n+    }\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNotNull_shouldTakePrecendance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTY4NQ==", "bodyText": "sure", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439029685", "createdAt": "2020-06-11T19:48:41Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {\n+        SdkClientConfiguration config = SdkClientConfiguration.builder().option(METRIC_PUBLISHER, metricPublisher).build();\n+        RequestOverrideConfiguration requestOverrideConfiguration = null;\n+        Optional<MetricPublisher> result = MetricUtils.resolvePublisher(config, requestOverrideConfiguration);\n+        assertThat(result).isEqualTo(Optional.of(metricPublisher));\n+    }\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNotNull_shouldTakePrecendance() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzYyMA=="}, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDczMzYyOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozODoyOVrOGiqDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODozODoyOVrOGiqDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzczNQ==", "bodyText": "Thanks for adding these tests!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993735", "createdAt": "2020-06-11T18:38:29Z", "author": {"login": "cenedhryn"}, "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTYxNTIyOnYy", "diffSide": "RIGHT", "path": "services/transcribestreaming/src/it/java/software/amazon/awssdk/services/transcribestreaming/TranscribeStreamingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowODoyM1rOGiyuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1OTo1MFrOGjLQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNTc4MQ==", "bodyText": "nit: remove print", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439135781", "createdAt": "2020-06-12T00:08:23Z", "author": {"login": "dagnir"}, "path": "services/transcribestreaming/src/it/java/software/amazon/awssdk/services/transcribestreaming/TranscribeStreamingIntegrationTest.java", "diffHunk": "@@ -58,7 +60,19 @@\n     public static void setup() throws URISyntaxException {\n         client = TranscribeStreamingAsyncClient.builder()\n                                                .region(Region.US_EAST_1)\n-                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor()))\n+                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor())\n+                                               .metricPublisher(new MetricPublisher() {\n+                                                   @Override\n+                                                   public void publish(MetricCollection metricCollection) {\n+                                                       System.out.println(metricCollection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzg2OA==", "bodyText": "fixed in #1895", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439537868", "createdAt": "2020-06-12T16:59:50Z", "author": {"login": "zoewangg"}, "path": "services/transcribestreaming/src/it/java/software/amazon/awssdk/services/transcribestreaming/TranscribeStreamingIntegrationTest.java", "diffHunk": "@@ -58,7 +60,19 @@\n     public static void setup() throws URISyntaxException {\n         client = TranscribeStreamingAsyncClient.builder()\n                                                .region(Region.US_EAST_1)\n-                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor()))\n+                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor())\n+                                               .metricPublisher(new MetricPublisher() {\n+                                                   @Override\n+                                                   public void publish(MetricCollection metricCollection) {\n+                                                       System.out.println(metricCollection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNTc4MQ=="}, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTYyNTMzOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDoxMTowOFrOGiy0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1Mzo0MVrOGkFZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA==", "bodyText": "does this account for errors that result in no HTTP request being sent?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439137314", "createdAt": "2020-06-12T00:11:08Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -173,6 +175,19 @@ public void onError(Throwable error) {\n         return responseFuture;\n     }\n \n+    private CompletableFuture<Void> doExecuteHttpRequest(RequestExecutionContext context, AsyncExecuteRequest executeRequest) {\n+        MetricCollector metricCollector = context.metricCollector();\n+        long callStart = System.nanoTime();\n+        CompletableFuture<Void> httpClientFuture = sdkAsyncHttpClient.execute(executeRequest);\n+\n+        // Offload the metrics reporting from this stage onto the future completion executor\n+        httpClientFuture.whenCompleteAsync((r, t) -> {\n+            long duration = System.nanoTime() - callStart;\n+            metricCollector.reportMetric(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME, Duration.ofNanos(duration));\n+        }, futureCompletionExecutor);\n+        return httpClientFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2ODgxOQ==", "bodyText": "It seems there's no way to tell if the cause of the error is http request not being sent or http response not being received. I can update it to not report HTTP_REQUEST_ROUND_TRIP_TIME if there's an error, WDUT?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439168819", "createdAt": "2020-06-12T02:06:39Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -173,6 +175,19 @@ public void onError(Throwable error) {\n         return responseFuture;\n     }\n \n+    private CompletableFuture<Void> doExecuteHttpRequest(RequestExecutionContext context, AsyncExecuteRequest executeRequest) {\n+        MetricCollector metricCollector = context.metricCollector();\n+        long callStart = System.nanoTime();\n+        CompletableFuture<Void> httpClientFuture = sdkAsyncHttpClient.execute(executeRequest);\n+\n+        // Offload the metrics reporting from this stage onto the future completion executor\n+        httpClientFuture.whenCompleteAsync((r, t) -> {\n+            long duration = System.nanoTime() - callStart;\n+            metricCollector.reportMetric(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME, Duration.ofNanos(duration));\n+        }, futureCompletionExecutor);\n+        return httpClientFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA=="}, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MDI5NQ==", "bodyText": "Yeah I think that's more reasonable. Having this metric in there if the request didn't get fully sent or we didn't receive a response might be misleading.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r440490295", "createdAt": "2020-06-15T22:53:41Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -173,6 +175,19 @@ public void onError(Throwable error) {\n         return responseFuture;\n     }\n \n+    private CompletableFuture<Void> doExecuteHttpRequest(RequestExecutionContext context, AsyncExecuteRequest executeRequest) {\n+        MetricCollector metricCollector = context.metricCollector();\n+        long callStart = System.nanoTime();\n+        CompletableFuture<Void> httpClientFuture = sdkAsyncHttpClient.execute(executeRequest);\n+\n+        // Offload the metrics reporting from this stage onto the future completion executor\n+        httpClientFuture.whenCompleteAsync((r, t) -> {\n+            long duration = System.nanoTime() - callStart;\n+            metricCollector.reportMetric(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME, Duration.ofNanos(duration));\n+        }, futureCompletionExecutor);\n+        return httpClientFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA=="}, "originalCommit": {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}