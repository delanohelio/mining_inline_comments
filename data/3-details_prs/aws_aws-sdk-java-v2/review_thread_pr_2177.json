{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzgzNTYx", "number": 2177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxODo1NVrOE_1Vxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo1Mjo0MVrOFA-X1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzY5NjcwOnYy", "diffSide": "RIGHT", "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxODo1NVrOH9wf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1MjoyN1rOH-yUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTc5Ng==", "bodyText": "As discussed offline, we'll remove the terminalMethodsCalled.set(true) from onComplete because with the latest change, onComplete will be invoked. We will also add an assertion to verify onComplete is invoked.\nIn addition, we should add a Thread.sleep(1000) before assertThat(terminalMethodsCalled).isFalse(); because onComplete and complete is called by another thread. Adding the sleep will avoid the race condition.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2177#discussion_r534519796", "createdAt": "2020-12-02T22:18:55Z", "author": {"login": "zoewangg"}, "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "diffHunk": "@@ -162,14 +162,18 @@ public void responseReceived(SubscribeToShardResponse response) {\n                                          @Override\n                                          public void onEventStream(SdkPublisher<SubscribeToShardEventStream> publisher) {\n                                              publisher.limit(3).subscribe(new Subscriber<SubscribeToShardEventStream>() {\n+                                                 private Subscription subscription;\n                                                  @Override\n                                                  public void onSubscribe(Subscription subscription) {\n-                                                     subscription.request(10);\n+                                                     this.subscription = subscription;\n+                                                     subscription.request(1);\n                                                  }\n \n                                                  @Override\n                                                  public void onNext(SubscribeToShardEventStream subscribeToShardEventStream) {\n                                                      events.add(subscribeToShardEventStream);\n+                                                     //Cancel on first event.\n+                                                     subscription.cancel();\n                                                  }\n \n                                                  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8992d43718df10fdcdd04675870b70c0547787b8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5ODI2Nw==", "bodyText": "Added new Test case and added new flags completeMethodOfHandlerCalled and completeMethodOfHandlerCalled to avoid confusion.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2177#discussion_r535598267", "createdAt": "2020-12-03T20:52:27Z", "author": {"login": "joviegas"}, "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "diffHunk": "@@ -162,14 +162,18 @@ public void responseReceived(SubscribeToShardResponse response) {\n                                          @Override\n                                          public void onEventStream(SdkPublisher<SubscribeToShardEventStream> publisher) {\n                                              publisher.limit(3).subscribe(new Subscriber<SubscribeToShardEventStream>() {\n+                                                 private Subscription subscription;\n                                                  @Override\n                                                  public void onSubscribe(Subscription subscription) {\n-                                                     subscription.request(10);\n+                                                     this.subscription = subscription;\n+                                                     subscription.request(1);\n                                                  }\n \n                                                  @Override\n                                                  public void onNext(SubscribeToShardEventStream subscribeToShardEventStream) {\n                                                      events.add(subscribeToShardEventStream);\n+                                                     //Cancel on first event.\n+                                                     subscription.cancel();\n                                                  }\n \n                                                  @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTc5Ng=="}, "originalCommit": {"oid": "8992d43718df10fdcdd04675870b70c0547787b8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTY2MjMxOnYy", "diffSide": "RIGHT", "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo1Mjo0MVrOH_hmvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozNTowNVrOH_i1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MjkyNQ==", "bodyText": "Duplicate line. Do you mean assertThat(onCompleteSubsMethodsCalled).isTrue()?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2177#discussion_r536372925", "createdAt": "2020-12-04T20:52:41Z", "author": {"login": "zoewangg"}, "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "diffHunk": "@@ -146,8 +147,75 @@ public void subscribeToShard_ReceivesAllData() {\n     }\n \n     @Test\n-    public void cancelledSubscription_doesNotCallTerminalMethods() {\n-        AtomicBoolean terminalMethodsCalled = new AtomicBoolean(false);\n+    public void limitedSubscription_callCompleteMethodOfSubs_whenLimitsReached() {\n+        AtomicBoolean onCompleteSubsMethodsCalled = new AtomicBoolean(false);\n+        AtomicBoolean completeMethodOfHandlerCalled = new AtomicBoolean(false);\n+        AtomicBoolean errorOccurred = new AtomicBoolean(false);\n+        List<SubscribeToShardEventStream> events = new ArrayList<>();\n+        asyncClient.subscribeToShard(r -> r.consumerARN(consumerArn)\n+                        .shardId(shardId)\n+                        .startingPosition(s -> s.type(ShardIteratorType.LATEST)),\n+                new SubscribeToShardResponseHandler() {\n+                    @Override\n+                    public void responseReceived(SubscribeToShardResponse response) {\n+                        verifyHttpMetadata(response);\n+                    }\n+\n+                    @Override\n+                    public void onEventStream(SdkPublisher<SubscribeToShardEventStream> publisher) {\n+                        publisher.limit(3).subscribe(new Subscriber<SubscribeToShardEventStream>() {\n+                            private Subscription subscription;\n+                            @Override\n+                            public void onSubscribe(Subscription subscription) {\n+                                this.subscription = subscription;\n+                                subscription.request(10);\n+                            }\n+\n+                            @Override\n+                            public void onNext(SubscribeToShardEventStream subscribeToShardEventStream) {\n+                                events.add(subscribeToShardEventStream);\n+                            }\n+\n+                            @Override\n+                            public void onError(Throwable throwable) {\n+                                errorOccurred.set(true);\n+                            }\n+\n+                            @Override\n+                            public void onComplete() {\n+                                onCompleteSubsMethodsCalled.set(true);\n+                            }\n+                        });\n+                    }\n+\n+                    @Override\n+                    public void exceptionOccurred(Throwable throwable) {\n+                        errorOccurred.set(true);\n+                    }\n+\n+                    @Override\n+                    public void complete() {\n+                        completeMethodOfHandlerCalled.set(true);\n+                    }\n+                }).join();\n+\n+        try {\n+            Thread.sleep(WAIT_TIME_FOR_SUBSCRIPTION_COMPLETION);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+        assertThat(completeMethodOfHandlerCalled).isFalse();\n+        assertThat(completeMethodOfHandlerCalled).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c7f3d60c4517b6c356a54d1f5845f3be6007c7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzAxOA==", "bodyText": "Good Catch !...yeap it should have been assertThat(onCompleteSubsMethodsCalled).isTrue()\nThanks", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2177#discussion_r536393018", "createdAt": "2020-12-04T21:35:05Z", "author": {"login": "joviegas"}, "path": "services/kinesis/src/it/java/software/amazon/awssdk/services/kinesis/SubscribeToShardIntegrationTest.java", "diffHunk": "@@ -146,8 +147,75 @@ public void subscribeToShard_ReceivesAllData() {\n     }\n \n     @Test\n-    public void cancelledSubscription_doesNotCallTerminalMethods() {\n-        AtomicBoolean terminalMethodsCalled = new AtomicBoolean(false);\n+    public void limitedSubscription_callCompleteMethodOfSubs_whenLimitsReached() {\n+        AtomicBoolean onCompleteSubsMethodsCalled = new AtomicBoolean(false);\n+        AtomicBoolean completeMethodOfHandlerCalled = new AtomicBoolean(false);\n+        AtomicBoolean errorOccurred = new AtomicBoolean(false);\n+        List<SubscribeToShardEventStream> events = new ArrayList<>();\n+        asyncClient.subscribeToShard(r -> r.consumerARN(consumerArn)\n+                        .shardId(shardId)\n+                        .startingPosition(s -> s.type(ShardIteratorType.LATEST)),\n+                new SubscribeToShardResponseHandler() {\n+                    @Override\n+                    public void responseReceived(SubscribeToShardResponse response) {\n+                        verifyHttpMetadata(response);\n+                    }\n+\n+                    @Override\n+                    public void onEventStream(SdkPublisher<SubscribeToShardEventStream> publisher) {\n+                        publisher.limit(3).subscribe(new Subscriber<SubscribeToShardEventStream>() {\n+                            private Subscription subscription;\n+                            @Override\n+                            public void onSubscribe(Subscription subscription) {\n+                                this.subscription = subscription;\n+                                subscription.request(10);\n+                            }\n+\n+                            @Override\n+                            public void onNext(SubscribeToShardEventStream subscribeToShardEventStream) {\n+                                events.add(subscribeToShardEventStream);\n+                            }\n+\n+                            @Override\n+                            public void onError(Throwable throwable) {\n+                                errorOccurred.set(true);\n+                            }\n+\n+                            @Override\n+                            public void onComplete() {\n+                                onCompleteSubsMethodsCalled.set(true);\n+                            }\n+                        });\n+                    }\n+\n+                    @Override\n+                    public void exceptionOccurred(Throwable throwable) {\n+                        errorOccurred.set(true);\n+                    }\n+\n+                    @Override\n+                    public void complete() {\n+                        completeMethodOfHandlerCalled.set(true);\n+                    }\n+                }).join();\n+\n+        try {\n+            Thread.sleep(WAIT_TIME_FOR_SUBSCRIPTION_COMPLETION);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+        assertThat(completeMethodOfHandlerCalled).isFalse();\n+        assertThat(completeMethodOfHandlerCalled).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MjkyNQ=="}, "originalCommit": {"oid": "23c7f3d60c4517b6c356a54d1f5845f3be6007c7"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3941, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}