{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMTkxNDMy", "number": 2118, "reviewThreads": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowMDo0MVrOEyC4vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0NDowOFrOE7PANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTExNTQ5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowMDo0MVrOHoeJ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowMDo0MVrOHoeJ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5OTE1Ng==", "bodyText": "Why tie this to the ProfileFile file instead of having the ProfileCredentialProvider create this class like the other providers?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512199156", "createdAt": "2020-10-26T19:00:41Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.profiles.ProfileFileSystemSetting;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoCredentialsUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously using\n+ * {@link SsoCredentialsUtils#getUpdatedCredentials()}. If the credentials end up expiring, this class will block all calls\n+ * to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final RuntimeException loadException;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SsoCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = Validate.notNull(builder.ssoClient, \"SSO client must not be null.\");\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        RuntimeException loadException = null;\n+        CachedSupplier.Builder<SsoCredentialsHolder> cacheBuilder = null;\n+        try {\n+            String profileName = builder.profileName != null ? builder.profileName\n+                                                      : ProfileFileSystemSetting.AWS_PROFILE.getStringValueOrThrow();\n+\n+            ProfileFile profileFile = Optional.ofNullable(builder.profileFile)\n+                                  .orElseGet(builder.defaultProfileFileLoader);\n+\n+            // Load Profile from the profile file\n+            Optional<Profile> profileOptional = profileFile.profile(profileName);\n+            if (!profileOptional.isPresent()) {\n+                throw SdkClientException.create(String.format(\"Profile file contained no credentials for \" +\n+                                                              \"profile '%s' : %s\", profileName, profileFile));\n+            }\n+\n+            // Update SSO Credentials with configurations in profile\n+            cacheBuilder = CachedSupplier.builder(() -> updateSsoCredentials(profileOptional.get()));\n+            if (builder.asyncCredentialUpdateEnabled) {\n+                cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+            }\n+\n+        } catch (RuntimeException e) {\n+            loadException = e;\n+        }\n+\n+        if (loadException != null) {\n+            this.loadException = loadException;\n+            this.credentialCache = null;\n+        } else {\n+            this.loadException = null;\n+            this.credentialCache = cacheBuilder.build();\n+        }\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SsoCredentialsHolder> updateSsoCredentials(Profile profile) {\n+        SsoCredentialsHolder credentials = new SsoCredentialsHolder(\n+            (AwsSsoCredentials) new SsoCredentialsUtils(profile, ssoClient).getUpdatedCredentials());\n+        Instant acutalTokenExpiration = credentials.getSsoCredentialsExpiration().toInstant();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }\n+\n+    /**\n+     * Get a builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public static BuilderImpl builder() {\n+        return new BuilderImpl();\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        if (loadException != null) {\n+            throw loadException;\n+        }\n+        return credentialCache.get().getSsoCredentials();\n+    }\n+\n+    @Override\n+    public void close() {\n+        credentialCache.close();\n+        ssoClient.close();\n+    }\n+\n+    /**\n+     * A builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public interface Builder {\n+\n+        /**\n+         * Define the profile file that should be used by this credentials provider. By default, the\n+         * {@link ProfileFile#defaultProfileFile()} is used.\n+         */\n+        Builder profileFile(ProfileFile profileFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTEyMzAxOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowMzowMVrOHoeOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowODoyNlrOHqmB0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMDM5Mw==", "bodyText": "Hard coding this instead of allowing users to build a callback to handle expiration seems overly limiting and prevents tools built upon the SDK to be able to use SSO", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512200393", "createdAt": "2020-10-26T19:03:01Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNjQxMQ==", "bodyText": "Errors can be the default impl of the callback inside of the Builder", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512206411", "createdAt": "2020-10-26T19:13:47Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMDM5Mw=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNTI5OQ==", "bodyText": "This part isn't implemented in the BuilderImpl, could you please point it out if there is any other way to implement this?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r514425299", "createdAt": "2020-10-29T17:08:26Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMDM5Mw=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE0MTQ1OnYy", "diffSide": "RIGHT", "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowODowMFrOHoeZ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjowMDowNVrOHsXNLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzI0Mg==", "bodyText": "CLI generates timestamps in the format 2020-10-27T03:07:06UTC, does that lead to errors?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512203242", "createdAt": "2020-10-26T19:08:00Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjM1OQ==", "bodyText": "The \"expiresAt\" property of the example cached token in the SEP is using \"2019-11-14T04:05:45Z\", so here this property is parsed by Instant.parse(). I checked the javadoc and it looks this method only takes strings in the form of  DateTimeFormatter.ISO_INSTANT so I suppose it might lead to errors. Should I add the addressing of the suffix?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r514422359", "createdAt": "2020-10-29T17:03:56Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzI0Mg=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NTgzMw==", "bodyText": "The SEP doesnt match the CLI, gotta love \"standards\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r515255833", "createdAt": "2020-10-30T17:20:16Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzI0Mg=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzQxNw==", "bodyText": "I ended up with\n            // CLI appends UTC, which Java refuses to parse. Convert it to a Z\n            val sanitized = if (dateString.endsWith(\"UTC\")) {\n                dateString.dropLast(3) + 'Z'\n            } else {\n                dateString\n            }", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r515257417", "createdAt": "2020-10-30T17:22:56Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzI0Mg=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3OTU5Ng==", "bodyText": "Thanks \ud83d\ude01", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r516279596", "createdAt": "2020-11-02T22:00:05Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzI0Mg=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE0NzU2OnYy", "diffSide": "RIGHT", "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowOTo0M1rOHoedtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoyMDozN1rOHol6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNDIxMg==", "bodyText": "Seems dangerous to write test data to a users home dir", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512204212", "createdAt": "2020-10-26T19:09:43Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");\n+    }\n+\n+    @AfterClass\n+    public static void deleteTestTokenFile() {\n+        deleteTestTokenFile(testTokenDirectory);\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withValidProfileAndToken_getExpectedCredentials() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+\n+        String expectAccessKeyId = \"testAccessKeyId\";\n+        String expectSecretAccessKey = \"testAccessKeyId\";\n+        String expectSessionToken = \"testAccessKeyId\";\n+        RoleCredentials roleCredentials = RoleCredentials.builder()\n+                                                         .accessKeyId(expectAccessKeyId)\n+                                                         .secretAccessKey(expectSecretAccessKey)\n+                                                         .expiration(Long.MAX_VALUE)\n+                                                         .sessionToken(expectSessionToken)\n+                                                         .build();\n+\n+        GetRoleCredentialsResponse expectedResponse = GetRoleCredentialsResponse.builder()\n+                                                                                .roleCredentials(roleCredentials)\n+                                                                                .build();\n+\n+        when(ssoClient.getRoleCredentials(any(GetRoleCredentialsRequest.class))).thenReturn(expectedResponse);\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        AwsSsoCredentials ssoCredentials = (AwsSsoCredentials) provider.resolveCredentials();\n+\n+        assertThat(ssoCredentials.sessionToken()).isEqualTo(expectSessionToken);\n+        assertThat(ssoCredentials.accessKeyId()).isEqualTo(expectAccessKeyId);\n+        assertThat(ssoCredentials.secretAccessKey()).isEqualTo(expectSecretAccessKey);\n+        assertThat(ssoCredentials.expiration()).isEqualTo(Long.MAX_VALUE);\n+\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_NoSuchProfile_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        exception.expect(RuntimeException.class);\n+        exception.expectMessage(\"Profile file contained no credentials for profile 'bar'\");\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"bar\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        provider.resolveCredentials();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withExpiredTokenFile_throwExpiredTokenException() throws Exception {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String expiredStartUrl = START_URL + \"-expired\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + expiredStartUrl + \"\\n\";\n+        String expiredTokenDir = generateCachedTokenPath(expiredStartUrl);\n+        createTestTokenFile(expiredTokenDir, \"2020-01-01T00:00:00Z\");\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(ExpiredTokenException.class);\n+        exception.expectMessage(\"The SSO session associated with this profile has expired\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withWrongStartUrl_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String wrongStartUrl = START_URL + \"-wrong\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + wrongStartUrl + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"Unable to read the cached token file.\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingAccountId_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_account_id\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRegion_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_region\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRoleName_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_role_name\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingStartUrl_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_start_url\");\n+    }\n+\n+    private void missingProfileContentTestHelper(String profileContent, String missingContent) {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"This profile is invalid, \" + missingContent + \" is missing.\");\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    private static void createTestTokenFile(String tokenDirectory, String expiration) throws Exception {\n+        String tokenFileContent = \"{\\n\" +\n+                                  \"\\\"accessToken\\\": \\\"base64string\\\",\\n\" +\n+                                  \"\\\"expiresAt\\\": \\\"\" + expiration + \"\\\",\\n\" +\n+                                  \"\\\"region\\\": \\\"us-west-2\\\",\\n\" +\n+                                  \"\\\"startUrl\\\": \\\"https//d-abc123.awsapps.com/start\\\"\\n\" +\n+                                  \"}\";\n+        try{\n+            File fakeTokenFile = new File(tokenDirectory);\n+            if (fakeTokenFile.createNewFile()) {\n+                FileWriter fileWriter = new FileWriter(fakeTokenFile);\n+                fileWriter.write(tokenFileContent);\n+                fileWriter.close();\n+            }\n+        } catch (IOException e) {\n+            throw new Exception(String.format(\"Creating the test token file failed because of %s\", e));\n+        }\n+\n+    }\n+\n+    private static String generateCachedTokenPath(String startUrl) {\n+        Validate.notNull(startUrl, \"The start url shouldn't be null.\");\n+        byte[] startUrlBytes = startUrl.getBytes(StandardCharsets.UTF_8);\n+        String encodedUrl = new String(startUrlBytes, StandardCharsets.UTF_8);\n+        return \"/Users/\"+System.getProperty(\"user.name\")+\"/.aws/sso/cache/\" +  sha1Hex(encodedUrl) + \".json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNjM5Mw==", "bodyText": "+1 Look at how we test profile files for a better example.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512326393", "createdAt": "2020-10-26T23:20:37Z", "author": {"login": "millems"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");\n+    }\n+\n+    @AfterClass\n+    public static void deleteTestTokenFile() {\n+        deleteTestTokenFile(testTokenDirectory);\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withValidProfileAndToken_getExpectedCredentials() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+\n+        String expectAccessKeyId = \"testAccessKeyId\";\n+        String expectSecretAccessKey = \"testAccessKeyId\";\n+        String expectSessionToken = \"testAccessKeyId\";\n+        RoleCredentials roleCredentials = RoleCredentials.builder()\n+                                                         .accessKeyId(expectAccessKeyId)\n+                                                         .secretAccessKey(expectSecretAccessKey)\n+                                                         .expiration(Long.MAX_VALUE)\n+                                                         .sessionToken(expectSessionToken)\n+                                                         .build();\n+\n+        GetRoleCredentialsResponse expectedResponse = GetRoleCredentialsResponse.builder()\n+                                                                                .roleCredentials(roleCredentials)\n+                                                                                .build();\n+\n+        when(ssoClient.getRoleCredentials(any(GetRoleCredentialsRequest.class))).thenReturn(expectedResponse);\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        AwsSsoCredentials ssoCredentials = (AwsSsoCredentials) provider.resolveCredentials();\n+\n+        assertThat(ssoCredentials.sessionToken()).isEqualTo(expectSessionToken);\n+        assertThat(ssoCredentials.accessKeyId()).isEqualTo(expectAccessKeyId);\n+        assertThat(ssoCredentials.secretAccessKey()).isEqualTo(expectSecretAccessKey);\n+        assertThat(ssoCredentials.expiration()).isEqualTo(Long.MAX_VALUE);\n+\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_NoSuchProfile_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        exception.expect(RuntimeException.class);\n+        exception.expectMessage(\"Profile file contained no credentials for profile 'bar'\");\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"bar\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        provider.resolveCredentials();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withExpiredTokenFile_throwExpiredTokenException() throws Exception {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String expiredStartUrl = START_URL + \"-expired\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + expiredStartUrl + \"\\n\";\n+        String expiredTokenDir = generateCachedTokenPath(expiredStartUrl);\n+        createTestTokenFile(expiredTokenDir, \"2020-01-01T00:00:00Z\");\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(ExpiredTokenException.class);\n+        exception.expectMessage(\"The SSO session associated with this profile has expired\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withWrongStartUrl_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String wrongStartUrl = START_URL + \"-wrong\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + wrongStartUrl + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"Unable to read the cached token file.\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingAccountId_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_account_id\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRegion_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_region\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRoleName_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_role_name\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingStartUrl_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_start_url\");\n+    }\n+\n+    private void missingProfileContentTestHelper(String profileContent, String missingContent) {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"This profile is invalid, \" + missingContent + \" is missing.\");\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    private static void createTestTokenFile(String tokenDirectory, String expiration) throws Exception {\n+        String tokenFileContent = \"{\\n\" +\n+                                  \"\\\"accessToken\\\": \\\"base64string\\\",\\n\" +\n+                                  \"\\\"expiresAt\\\": \\\"\" + expiration + \"\\\",\\n\" +\n+                                  \"\\\"region\\\": \\\"us-west-2\\\",\\n\" +\n+                                  \"\\\"startUrl\\\": \\\"https//d-abc123.awsapps.com/start\\\"\\n\" +\n+                                  \"}\";\n+        try{\n+            File fakeTokenFile = new File(tokenDirectory);\n+            if (fakeTokenFile.createNewFile()) {\n+                FileWriter fileWriter = new FileWriter(fakeTokenFile);\n+                fileWriter.write(tokenFileContent);\n+                fileWriter.close();\n+            }\n+        } catch (IOException e) {\n+            throw new Exception(String.format(\"Creating the test token file failed because of %s\", e));\n+        }\n+\n+    }\n+\n+    private static String generateCachedTokenPath(String startUrl) {\n+        Validate.notNull(startUrl, \"The start url shouldn't be null.\");\n+        byte[] startUrlBytes = startUrl.getBytes(StandardCharsets.UTF_8);\n+        String encodedUrl = new String(startUrlBytes, StandardCharsets.UTF_8);\n+        return \"/Users/\"+System.getProperty(\"user.name\")+\"/.aws/sso/cache/\" +  sha1Hex(encodedUrl) + \".json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNDIxMg=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4NTEzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDoyNFrOHoe0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDoyNFrOHoe0jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDA2Mg==", "bodyText": "Do we not want to treat expiring soon as expired?\nWhen checking to see if a cached token is expired, the SDK MAY treat the token as expired if it will expire within 15 minutes of the expiresAt time", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512210062", "createdAt": "2020-10-26T19:20:24Z", "author": {"login": "abrooksv"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                              + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                              + \" login with the corresponding profile.\").build();\n+            }\n+\n+        } catch (IOException e) {\n+            throw SdkClientException.builder().message(\"Unable to read the cached token file. Please check if the correct \"\n+                                                       + \"sso_start_url is configured in the profile\").cause(e).build();\n+        }\n+\n+        return getCredentialsFromSso();\n+    }\n+\n+    private void validateAndResolveSsoProfile(Profile profile) {\n+        Map<String, String> configurations = profile.properties();\n+\n+        if (configurations.containsKey(SSO_ACCOUNT_ID)) {\n+            ssoAccountId = configurations.get(SSO_ACCOUNT_ID);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_ACCOUNT_ID));\n+        }\n+\n+        if (configurations.containsKey(SSO_REGION)) {\n+            ssoRegion = configurations.get(SSO_REGION);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_REGION));\n+        }\n+\n+        if (configurations.containsKey(SSO_ROLE_NAME)) {\n+            ssoRoleName = configurations.get(SSO_ROLE_NAME);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_ROLE_NAME));\n+        }\n+\n+        if (configurations.containsKey(SSO_START_URL)) {\n+            ssoStartUrl = configurations.get(SSO_START_URL);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_START_URL));\n+        }\n+\n+    }\n+\n+    /**\n+     * Call SSO to retrieve a new {@link AwsSsoCredentials}.\n+     * @return\n+     */\n+    private AwsSsoCredentials getCredentialsFromSso() {\n+        GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder().accountId(ssoAccountId)\n+                                                                               .roleName(ssoRoleName)\n+                                                                               .accessToken(tokenProperties.getAccessToken())\n+                                                                               .build();\n+        GetRoleCredentialsResponse response = ssoClient.getRoleCredentials(request);\n+        RoleCredentials roleCredentials = response.roleCredentials();\n+        return AwsSsoCredentials.create(roleCredentials.accessKeyId(), roleCredentials.secretAccessKey(),\n+                                        roleCredentials.sessionToken(), roleCredentials.expiration());\n+\n+    }\n+\n+    private boolean tokenExpired(String expiresTime) {\n+        return Instant.now().isAfter(Instant.parse(expiresTime));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ2OTIwOnYy", "diffSide": "RIGHT", "path": ".changes/next-release/feature-AWSSingleSignon-9e785be.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDoxOVrOHohgmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDoxOVrOHohgmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDEwNQ==", "bodyText": "Nit: \"Added support for retrieving SSO credentials: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512254105", "createdAt": "2020-10-26T20:40:19Z", "author": {"login": "millems"}, "path": ".changes/next-release/feature-AWSSingleSignon-9e785be.json", "diffHunk": "@@ -0,0 +1,6 @@\n+{\n+    \"category\": \"AWS Single Sign-on\", \n+    \"contributor\": \"\", \n+    \"type\": \"feature\", \n+    \"description\": \"A new SSO credentials provider is now supported, with which customers can now retrieve SSO temporary credentials easilier without copy-paste work every time anymore.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3MDIwOnYy", "diffSide": "RIGHT", "path": "core/profiles/src/main/java/software/amazon/awssdk/profiles/ProfileProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDozMlrOHohhJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDozMlrOHohhJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDI0Nw==", "bodyText": "Please document.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512254247", "createdAt": "2020-10-26T20:40:32Z", "author": {"login": "millems"}, "path": "core/profiles/src/main/java/software/amazon/awssdk/profiles/ProfileProperty.java", "diffHunk": "@@ -99,6 +99,14 @@\n      */\n     public static final String RETRY_MODE = \"retry_mode\";\n \n+    public static final String SSO_REGION = \"sso_region\";\n+\n+    public static final String SSO_ROLE_NAME = \"sso_role_name\";\n+\n+    public static final String SSO_ACCOUNT_ID = \"sso_account_id\";\n+\n+    public static final String SSO_START_URL = \"sso_start_url\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3NDE5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/AwsSsoCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MTo0OVrOHohjnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MTo0OVrOHohjnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDg3Ng==", "bodyText": "Use Instant for specific points in time, not \"long\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512254876", "createdAt": "2020-10-26T20:41:49Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/AwsSsoCredentials.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.util.Objects;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A sprcial type of {@link AwsCredentials} that provides a session token to be used in service authentication. Session\n+ * tokens are typically provided by AWS Single Sign-On Service, and provide temporary access to an AWS service.\n+ */\n+@Immutable\n+@SdkPublicApi\n+public final class AwsSsoCredentials implements AwsCredentials {\n+\n+    private final String accessKeyId;\n+    private final String secretAccessKey;\n+    private final String sessionToken;\n+    private final long expiration;\n+\n+    /**\n+     * Constructs a new SSO credentials object, with the specified AWS access key, AWS secret key, AWS session token\n+     * and expiration time.\n+     *\n+     * @param accessKey The AWS access key, used to identify the user interacting with AWS.\n+     * @param secretKey The AWS secret access key, used to authenticate the user interacting with AWS.\n+     * @param sessionToken The AWS session token, retrieved from an AWS token service, used for authenticating that this user has\n+     * received temporary permission to access some resource.\n+     * @param expiration The expiration time in millis, used to check if this credential has expired.\n+     */\n+    private AwsSsoCredentials(String accessKey, String secretKey, String sessionToken, long expiration) {\n+        this.accessKeyId = Validate.paramNotNull(accessKey, \"accessKey\");\n+        this.secretAccessKey = Validate.paramNotNull(secretKey, \"secretKey\");\n+        this.sessionToken = Validate.paramNotNull(sessionToken, \"sessionToken\");\n+        this.expiration = Validate.paramNotNull(expiration, \"expiration\");\n+    }\n+\n+    public static AwsSsoCredentials create(String accessKey, String secretKey, String sessionToken, long expiration) {\n+        return new AwsSsoCredentials(accessKey, secretKey, sessionToken, expiration);\n+    }\n+\n+    /**\n+     * Retrieve the AWS access key, used to identify the user interacting with AWS.\n+     */\n+    @Override\n+    public String accessKeyId() {\n+        return accessKeyId;\n+    }\n+\n+    /**\n+     * Retrieve the AWS secret access key, used to authenticate the user interacting with AWS.\n+     */\n+    @Override\n+    public String secretAccessKey() {\n+        return secretAccessKey;\n+    }\n+\n+    /**\n+     * Retrieve the AWS session token. This token is retrieved from an AWS token service, and is used for authenticating that this\n+     * user has received temporary permission to access some resource.\n+     */\n+    public String sessionToken() {\n+        return sessionToken;\n+    }\n+\n+    /**\n+     * Retrieve the expiration time. This is the absolute time millis of expiration of this credentials, and is used for\n+     * credentials validation.\n+     */\n+    public long expiration() {\n+        return expiration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3NTM4OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MjowNVrOHohkSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzo1MzoyMFrOHomiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA1MA==", "bodyText": "Use Instant, not Date", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512255050", "createdAt": "2020-10-26T20:42:05Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Instant;\n+import java.util.Date;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a SSO session credentials with its expiration time.\n+ */\n+@SdkInternalApi\n+@ThreadSafe\n+public class SsoCredentialsHolder {\n+    private final AwsSsoCredentials ssoCredentials;\n+    private final Date ssoCredentialsExpiration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzNjU2OQ==", "bodyText": "ya'll should prolly have a linting rule for the java.util Date/Time abominations.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512336569", "createdAt": "2020-10-26T23:53:20Z", "author": {"login": "kiiadi"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Instant;\n+import java.util.Date;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a SSO session credentials with its expiration time.\n+ */\n+@SdkInternalApi\n+@ThreadSafe\n+public class SsoCredentialsHolder {\n+    private final AwsSsoCredentials ssoCredentials;\n+    private final Date ssoCredentialsExpiration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA1MA=="}, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ3ODc5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MzowOFrOHohmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MzowOFrOHohmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTU5NQ==", "bodyText": "private?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512255595", "createdAt": "2020-10-26T20:43:08Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.profiles.ProfileFileSystemSetting;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoCredentialsUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously using\n+ * {@link SsoCredentialsUtils#getUpdatedCredentials()}. If the credentials end up expiring, this class will block all calls\n+ * to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final RuntimeException loadException;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SsoCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    SsoCredentialsProvider(BuilderImpl builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ4MDYzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0Mzo0MlrOHohnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0Mzo0MlrOHohnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTg5MQ==", "bodyText": "Can this just be part of the ProfileCredentialsProvider?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512255891", "createdAt": "2020-10-26T20:43:42Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.profiles.ProfileFileSystemSetting;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoCredentialsUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously using\n+ * {@link SsoCredentialsUtils#getUpdatedCredentials()}. If the credentials end up expiring, this class will block all calls\n+ * to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg3NDc3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/AwsSsoCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1MTowM1rOHolRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1MTowM1rOHolRMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTY5OQ==", "bodyText": "Can we just use AwsSessionCredentials?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512315699", "createdAt": "2020-10-26T22:51:03Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/AwsSsoCredentials.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.util.Objects;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A sprcial type of {@link AwsCredentials} that provides a session token to be used in service authentication. Session\n+ * tokens are typically provided by AWS Single Sign-On Service, and provide temporary access to an AWS service.\n+ */\n+@Immutable\n+@SdkPublicApi\n+public final class AwsSsoCredentials implements AwsCredentials {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg3NzEwOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1MTo1OVrOHolSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1MTo1OVrOHolSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNjA1OA==", "bodyText": "Can we move this to an internal-named package or make it a package-protected class?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512316058", "createdAt": "2020-10-26T22:51:59Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Instant;\n+import java.util.Date;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a SSO session credentials with its expiration time.\n+ */\n+@SdkInternalApi\n+@ThreadSafe\n+public class SsoCredentialsHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg4MzAxOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NDoxM1rOHolWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NDoxM1rOHolWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNjkzNw==", "bodyText": "Can all profile stuff be pushed to the ProfileCredentialsProvider, and have this class not use anything profile-file related? E.g. see StsAssumeRoleCredentialsProvider + StsProfileCredentialsProviderFactory and their relationship to ProfileCredentialsProvider. We might even be able to reuse ChildProfileCredentialsProviderFactory if we're lucky.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512316937", "createdAt": "2020-10-26T22:54:13Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.profiles.ProfileFileSystemSetting;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoCredentialsUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously using\n+ * {@link SsoCredentialsUtils#getUpdatedCredentials()}. If the credentials end up expiring, this class will block all calls\n+ * to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final RuntimeException loadException;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SsoCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = Validate.notNull(builder.ssoClient, \"SSO client must not be null.\");\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        RuntimeException loadException = null;\n+        CachedSupplier.Builder<SsoCredentialsHolder> cacheBuilder = null;\n+        try {\n+            String profileName = builder.profileName != null ? builder.profileName\n+                                                      : ProfileFileSystemSetting.AWS_PROFILE.getStringValueOrThrow();\n+\n+            ProfileFile profileFile = Optional.ofNullable(builder.profileFile)\n+                                  .orElseGet(builder.defaultProfileFileLoader);\n+\n+            // Load Profile from the profile file\n+            Optional<Profile> profileOptional = profileFile.profile(profileName);\n+            if (!profileOptional.isPresent()) {\n+                throw SdkClientException.create(String.format(\"Profile file contained no credentials for \" +\n+                                                              \"profile '%s' : %s\", profileName, profileFile));\n+            }\n+\n+            // Update SSO Credentials with configurations in profile\n+            cacheBuilder = CachedSupplier.builder(() -> updateSsoCredentials(profileOptional.get()));\n+            if (builder.asyncCredentialUpdateEnabled) {\n+                cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg4ODgwOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NjozN1rOHolZnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NjozN1rOHolZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNzg1NQ==", "bodyText": "Protected classes shouldn't be in the internal package. Is this actually protected?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512317855", "createdAt": "2020-10-26T22:56:37Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+\n+/**\n+ * <p>\n+ * The SSO session token that was passed is expired or is not valid, Get a new SSO session token from the\n+ * {@link SsoCredentialsProvider} and then retry the request.\n+ * </p>\n+ */\n+@SdkProtectedApi\n+public class ExpiredTokenException extends SdkClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg5MDQ1OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsTokenProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NzoyMVrOHolanQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NzoyMVrOHolanQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxODEwOQ==", "bodyText": "Why protected?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512318109", "createdAt": "2020-10-26T22:57:21Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsTokenProperties.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * A container for credential properties.\n+ */\n+@SdkProtectedApi\n+public class SsoCredentialsTokenProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg5MDk0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NzozNVrOHola6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NzozNVrOHola6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxODE4Ng==", "bodyText": "Why protected?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512318186", "createdAt": "2020-10-26T22:57:35Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg5MTQyOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsTokenProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1Nzo0OVrOHolbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1Nzo0OVrOHolbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxODI1Ng==", "bodyText": "Can we just use JsonNode so that we don't have this whole class?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512318256", "createdAt": "2020-10-26T22:57:49Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsTokenProperties.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * A container for credential properties.\n+ */\n+@SdkProtectedApi\n+public class SsoCredentialsTokenProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg5NTIzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1OToyNFrOHoldZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1OToyNFrOHoldZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxODgyMQ==", "bodyText": "Who \"gets a new SSO session token and then retry the request\"? Is that an instruction to someone?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512318821", "createdAt": "2020-10-26T22:59:24Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+\n+/**\n+ * <p>\n+ * The SSO session token that was passed is expired or is not valid, Get a new SSO session token from the\n+ * {@link SsoCredentialsProvider} and then retry the request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg5ODM4OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzowMDoxOFrOHolfCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzowMDoxOFrOHolfCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxOTI0Mg==", "bodyText": "NEVER use ObjectMapper directly! We don't want our libraries to have a hard-dependency on Jackson-databind. Use JacksonUtils.sensitiveJsonNodeOf here: (1) so that we only indirectly depend on Jackson (marginally better), and (2) so that we don't log the user's access token if parsing fails.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512319242", "createdAt": "2020-10-26T23:00:18Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTkxMzI3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzowNjoyMVrOHolnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzowNjoyMVrOHolnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMTQyNw==", "bodyText": "Is this only valid on Mac? See ProfileFileLocation for the proper way to find the customer's home directory.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512321427", "createdAt": "2020-10-26T23:06:21Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTkzMjUxOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxNDozM1rOHoly5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxNDozM1rOHoly5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNDMyNQ==", "bodyText": "This is a bit DRYer, and makes it only one hash key lookup in configurations instead of two:\nssoAccountId = Validate.notNull(configurations.get(SSO_ACCOUNT_ID), \n                                \"The %s profile is invalid, %s is missing.\", profile.name(), SSO_ACCOUNT_ID);", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512324325", "createdAt": "2020-10-26T23:14:33Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                              + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                              + \" login with the corresponding profile.\").build();\n+            }\n+\n+        } catch (IOException e) {\n+            throw SdkClientException.builder().message(\"Unable to read the cached token file. Please check if the correct \"\n+                                                       + \"sso_start_url is configured in the profile\").cause(e).build();\n+        }\n+\n+        return getCredentialsFromSso();\n+    }\n+\n+    private void validateAndResolveSsoProfile(Profile profile) {\n+        Map<String, String> configurations = profile.properties();\n+\n+        if (configurations.containsKey(SSO_ACCOUNT_ID)) {\n+            ssoAccountId = configurations.get(SSO_ACCOUNT_ID);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_ACCOUNT_ID));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTkzNzA0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxNjoyMlrOHol1bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxNjoyMlrOHol1bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNDk3Mg==", "bodyText": "These not being final makes me nervous about thread-safety. The first two can easily be made final, but the next 4 only happen when we do getUpdatedCredentials. Is there any way to just do the work of getUpdatedCredentials at initialization and create a new SsoCredentialsUtils (there's probably a better name) whenever we need a refresh?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512324972", "createdAt": "2020-10-26T23:16:22Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTk0MDg0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODowMlrOHol3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODowMlrOHol3oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNTUzNg==", "bodyText": "Is this dependency always available?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512325536", "createdAt": "2020-10-26T23:18:02Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTk0MTQ5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODoyNFrOHol4BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODoyNFrOHol4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNTYzNw==", "bodyText": "BinaryUtils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512325637", "createdAt": "2020-10-26T23:18:24Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCredentialsUtils.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ACCOUNT_ID;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_REGION;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_ROLE_NAME;\n+import static software.amazon.awssdk.profiles.ProfileProperty.SSO_START_URL;\n+import static software.amazon.awssdk.utils.JavaSystemSetting.USER_NAME;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Map;\n+import javax.xml.bind.DatatypeConverter;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.AwsSsoCredentials;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.internal.SystemSettingUtils;\n+\n+@SdkProtectedApi\n+public final class SsoCredentialsUtils {\n+\n+    private static final String TOKEN_DIRECTORY = \"/Users/\" + SystemSettingUtils.resolveSetting(USER_NAME).get() +\n+                                                  \"/.aws/sso/cache/\";\n+\n+    private Profile profile;\n+    private SsoClient ssoClient;\n+\n+    private String ssoRegion;\n+    private String ssoAccountId;\n+    private String ssoRoleName;\n+    private String ssoStartUrl;\n+\n+    private SsoCredentialsTokenProperties tokenProperties;\n+\n+    public SsoCredentialsUtils(Profile profile, SsoClient ssoClient) {\n+        this.profile = profile;\n+        this.ssoClient = ssoClient;\n+    }\n+\n+    /**\n+     * Validate and resolve the SSO profile. Then load the cached token file to retrieve necessary information for the SSO call.\n+     */\n+    public AwsCredentials getUpdatedCredentials() {\n+        validateAndResolveSsoProfile(profile);\n+\n+        try {\n+            String cachedTokenPath = generateCachedTokenPath(ssoStartUrl);\n+            File cachedTokenFile = new File(cachedTokenPath);\n+\n+            tokenProperties = new ObjectMapper().readValue(cachedTokenFile,\n+                                                           SsoCredentialsTokenProperties.class);\n+            if (tokenExpired(tokenProperties.getExpiresAt())) {\n+                throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                              + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                              + \" login with the corresponding profile.\").build();\n+            }\n+\n+        } catch (IOException e) {\n+            throw SdkClientException.builder().message(\"Unable to read the cached token file. Please check if the correct \"\n+                                                       + \"sso_start_url is configured in the profile\").cause(e).build();\n+        }\n+\n+        return getCredentialsFromSso();\n+    }\n+\n+    private void validateAndResolveSsoProfile(Profile profile) {\n+        Map<String, String> configurations = profile.properties();\n+\n+        if (configurations.containsKey(SSO_ACCOUNT_ID)) {\n+            ssoAccountId = configurations.get(SSO_ACCOUNT_ID);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_ACCOUNT_ID));\n+        }\n+\n+        if (configurations.containsKey(SSO_REGION)) {\n+            ssoRegion = configurations.get(SSO_REGION);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_REGION));\n+        }\n+\n+        if (configurations.containsKey(SSO_ROLE_NAME)) {\n+            ssoRoleName = configurations.get(SSO_ROLE_NAME);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_ROLE_NAME));\n+        }\n+\n+        if (configurations.containsKey(SSO_START_URL)) {\n+            ssoStartUrl = configurations.get(SSO_START_URL);\n+        } else {\n+            throw SdkClientException.create(String.format(\"This profile is invalid, %s is missing.\", SSO_START_URL));\n+        }\n+\n+    }\n+\n+    /**\n+     * Call SSO to retrieve a new {@link AwsSsoCredentials}.\n+     * @return\n+     */\n+    private AwsSsoCredentials getCredentialsFromSso() {\n+        GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder().accountId(ssoAccountId)\n+                                                                               .roleName(ssoRoleName)\n+                                                                               .accessToken(tokenProperties.getAccessToken())\n+                                                                               .build();\n+        GetRoleCredentialsResponse response = ssoClient.getRoleCredentials(request);\n+        RoleCredentials roleCredentials = response.roleCredentials();\n+        return AwsSsoCredentials.create(roleCredentials.accessKeyId(), roleCredentials.secretAccessKey(),\n+                                        roleCredentials.sessionToken(), roleCredentials.expiration());\n+\n+    }\n+\n+    private boolean tokenExpired(String expiresTime) {\n+        return Instant.now().isAfter(Instant.parse(expiresTime));\n+    }\n+\n+    /**\n+     * Generate the cached file name by generating the SHA1 Hex Digest of the UTF-8 encoded start url bytes.\n+     */\n+    private String generateCachedTokenPath(String startUrl) {\n+        Validate.notNull(startUrl, \"The start url shouldn't be null.\");\n+        byte[] startUrlBytes = startUrl.getBytes(StandardCharsets.UTF_8);\n+        String encodedUrl = new String(startUrlBytes, StandardCharsets.UTF_8);\n+        return TOKEN_DIRECTORY +  sha1Hex(encodedUrl) + \".json\";\n+    }\n+\n+    /**\n+     * Use {@link MessageDigest} instance to encrypt the input String.\n+     */\n+    private String sha1Hex(String input) {\n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(\"SHA-1\");\n+            md.update(input.getBytes(StandardCharsets.UTF_8));\n+        } catch (NoSuchAlgorithmException e) {\n+            throw SdkClientException.builder().message(\"Unable to use \\\"SHA-1\\\" algorithm.\").cause(e).build();\n+        }\n+\n+        return DatatypeConverter.printHexBinary(md.digest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTk0MjQ2OnYy", "diffSide": "RIGHT", "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODo1MVrOHol4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoxODo1MVrOHol4mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNTc4Ng==", "bodyText": "BinaryUtils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512325786", "createdAt": "2020-10-26T23:18:51Z", "author": {"login": "millems"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");\n+    }\n+\n+    @AfterClass\n+    public static void deleteTestTokenFile() {\n+        deleteTestTokenFile(testTokenDirectory);\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withValidProfileAndToken_getExpectedCredentials() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+\n+        String expectAccessKeyId = \"testAccessKeyId\";\n+        String expectSecretAccessKey = \"testAccessKeyId\";\n+        String expectSessionToken = \"testAccessKeyId\";\n+        RoleCredentials roleCredentials = RoleCredentials.builder()\n+                                                         .accessKeyId(expectAccessKeyId)\n+                                                         .secretAccessKey(expectSecretAccessKey)\n+                                                         .expiration(Long.MAX_VALUE)\n+                                                         .sessionToken(expectSessionToken)\n+                                                         .build();\n+\n+        GetRoleCredentialsResponse expectedResponse = GetRoleCredentialsResponse.builder()\n+                                                                                .roleCredentials(roleCredentials)\n+                                                                                .build();\n+\n+        when(ssoClient.getRoleCredentials(any(GetRoleCredentialsRequest.class))).thenReturn(expectedResponse);\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        AwsSsoCredentials ssoCredentials = (AwsSsoCredentials) provider.resolveCredentials();\n+\n+        assertThat(ssoCredentials.sessionToken()).isEqualTo(expectSessionToken);\n+        assertThat(ssoCredentials.accessKeyId()).isEqualTo(expectAccessKeyId);\n+        assertThat(ssoCredentials.secretAccessKey()).isEqualTo(expectSecretAccessKey);\n+        assertThat(ssoCredentials.expiration()).isEqualTo(Long.MAX_VALUE);\n+\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_NoSuchProfile_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        exception.expect(RuntimeException.class);\n+        exception.expectMessage(\"Profile file contained no credentials for profile 'bar'\");\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"bar\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        provider.resolveCredentials();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withExpiredTokenFile_throwExpiredTokenException() throws Exception {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String expiredStartUrl = START_URL + \"-expired\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + expiredStartUrl + \"\\n\";\n+        String expiredTokenDir = generateCachedTokenPath(expiredStartUrl);\n+        createTestTokenFile(expiredTokenDir, \"2020-01-01T00:00:00Z\");\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(ExpiredTokenException.class);\n+        exception.expectMessage(\"The SSO session associated with this profile has expired\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withWrongStartUrl_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String wrongStartUrl = START_URL + \"-wrong\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + wrongStartUrl + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"Unable to read the cached token file.\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingAccountId_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_account_id\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRegion_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_region\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRoleName_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_role_name\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingStartUrl_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_start_url\");\n+    }\n+\n+    private void missingProfileContentTestHelper(String profileContent, String missingContent) {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"This profile is invalid, \" + missingContent + \" is missing.\");\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    private static void createTestTokenFile(String tokenDirectory, String expiration) throws Exception {\n+        String tokenFileContent = \"{\\n\" +\n+                                  \"\\\"accessToken\\\": \\\"base64string\\\",\\n\" +\n+                                  \"\\\"expiresAt\\\": \\\"\" + expiration + \"\\\",\\n\" +\n+                                  \"\\\"region\\\": \\\"us-west-2\\\",\\n\" +\n+                                  \"\\\"startUrl\\\": \\\"https//d-abc123.awsapps.com/start\\\"\\n\" +\n+                                  \"}\";\n+        try{\n+            File fakeTokenFile = new File(tokenDirectory);\n+            if (fakeTokenFile.createNewFile()) {\n+                FileWriter fileWriter = new FileWriter(fakeTokenFile);\n+                fileWriter.write(tokenFileContent);\n+                fileWriter.close();\n+            }\n+        } catch (IOException e) {\n+            throw new Exception(String.format(\"Creating the test token file failed because of %s\", e));\n+        }\n+\n+    }\n+\n+    private static String generateCachedTokenPath(String startUrl) {\n+        Validate.notNull(startUrl, \"The start url shouldn't be null.\");\n+        byte[] startUrlBytes = startUrl.getBytes(StandardCharsets.UTF_8);\n+        String encodedUrl = new String(startUrlBytes, StandardCharsets.UTF_8);\n+        return \"/Users/\"+System.getProperty(\"user.name\")+\"/.aws/sso/cache/\" +  sha1Hex(encodedUrl) + \".json\";\n+    }\n+\n+    private static String sha1Hex(String input) {\n+        MessageDigest md;\n+        try{\n+            md = MessageDigest.getInstance(\"SHA-1\");\n+            md.update(input.getBytes(StandardCharsets.UTF_8));\n+        } catch (NoSuchAlgorithmException e) {\n+            throw SdkClientException.builder().message(\"Unable to use \\\"SHA-1\\\" algorithm.\").cause(e).build();\n+        }\n+\n+        return DatatypeConverter.printHexBinary(md.digest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTk0NjQzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoyMDozMVrOHol61Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzoyMDozMVrOHol61Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNjM1Nw==", "bodyText": "It's bad form to reproduce the logic you're testing within your tests (e.g. sha1Hex, generateCachedTokenPath), because you're likely going to write the same bug in both places and defeat the purpose of your tests. Can you just hard-code the values you are expecting here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r512326357", "createdAt": "2020-10-26T23:20:31Z", "author": {"login": "millems"}, "path": "services/sso/src/test/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProviderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javax.xml.bind.DatatypeConverter;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.StringInputStream;\n+import software.amazon.awssdk.utils.Validate;\n+\n+public class SsoCredentialsProviderTest {\n+\n+    private static String START_URL = \"https://d-abc123.awsapps.com/start-beta\";\n+\n+    private static String testTokenDirectory;\n+    private SsoCredentialsProvider provider;\n+\n+    @Rule\n+    public final ExpectedException exception = ExpectedException.none();\n+\n+    @BeforeClass\n+    public static void createTestTokenFile() throws Exception {\n+        testTokenDirectory = generateCachedTokenPath(START_URL);\n+        createTestTokenFile(testTokenDirectory, \"2090-01-01T00:00:00Z\");\n+    }\n+\n+    @AfterClass\n+    public static void deleteTestTokenFile() {\n+        deleteTestTokenFile(testTokenDirectory);\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withValidProfileAndToken_getExpectedCredentials() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+\n+        String expectAccessKeyId = \"testAccessKeyId\";\n+        String expectSecretAccessKey = \"testAccessKeyId\";\n+        String expectSessionToken = \"testAccessKeyId\";\n+        RoleCredentials roleCredentials = RoleCredentials.builder()\n+                                                         .accessKeyId(expectAccessKeyId)\n+                                                         .secretAccessKey(expectSecretAccessKey)\n+                                                         .expiration(Long.MAX_VALUE)\n+                                                         .sessionToken(expectSessionToken)\n+                                                         .build();\n+\n+        GetRoleCredentialsResponse expectedResponse = GetRoleCredentialsResponse.builder()\n+                                                                                .roleCredentials(roleCredentials)\n+                                                                                .build();\n+\n+        when(ssoClient.getRoleCredentials(any(GetRoleCredentialsRequest.class))).thenReturn(expectedResponse);\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        AwsSsoCredentials ssoCredentials = (AwsSsoCredentials) provider.resolveCredentials();\n+\n+        assertThat(ssoCredentials.sessionToken()).isEqualTo(expectSessionToken);\n+        assertThat(ssoCredentials.accessKeyId()).isEqualTo(expectAccessKeyId);\n+        assertThat(ssoCredentials.secretAccessKey()).isEqualTo(expectSecretAccessKey);\n+        assertThat(ssoCredentials.expiration()).isEqualTo(Long.MAX_VALUE);\n+\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_NoSuchProfile_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        exception.expect(RuntimeException.class);\n+        exception.expectMessage(\"Profile file contained no credentials for profile 'bar'\");\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"bar\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        provider.resolveCredentials();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withExpiredTokenFile_throwExpiredTokenException() throws Exception {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String expiredStartUrl = START_URL + \"-expired\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + expiredStartUrl + \"\\n\";\n+        String expiredTokenDir = generateCachedTokenPath(expiredStartUrl);\n+        createTestTokenFile(expiredTokenDir, \"2020-01-01T00:00:00Z\");\n+\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(ExpiredTokenException.class);\n+        exception.expectMessage(\"The SSO session associated with this profile has expired\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void retrieveSSOCredentials_withWrongStartUrl_throwSdkClientException() {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        String wrongStartUrl = START_URL + \"-wrong\";\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + wrongStartUrl + \"\\n\";\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"Unable to read the cached token file.\");\n+\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingAccountId_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_account_id\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRegion_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_role_name=SampleRole\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_region\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingRoleName_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_start_url=\" + START_URL + \"\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_role_name\");\n+    }\n+\n+    @Test\n+    public void createSSOCredentialsProvider_missingStartUrl_throwSdkClientException() {\n+        String profileContent = \"[profile foo]\\n\" +\n+                                \"sso_account_id=012345678901\\n\" +\n+                                \"sso_region=us-east-1\\n\" +\n+                                \"sso_role_name=SampleRole\\n\";\n+        missingProfileContentTestHelper(profileContent,\"sso_start_url\");\n+    }\n+\n+    private void missingProfileContentTestHelper(String profileContent, String missingContent) {\n+        SsoClient ssoClient = mock(SsoClient.class);\n+        ProfileFile profiles = ProfileFile.builder()\n+                                          .content(new StringInputStream(profileContent))\n+                                          .type(ProfileFile.Type.CONFIGURATION)\n+                                          .build();\n+\n+\n+        provider = SsoCredentialsProvider.builder()\n+                                         .profileFile(profiles)\n+                                         .profileName(\"foo\")\n+                                         .ssoClient(ssoClient)\n+                                         .build();\n+        exception.expect(SdkClientException.class);\n+        exception.expectMessage(\"This profile is invalid, \" + missingContent + \" is missing.\");\n+        provider.resolveCredentials();\n+        provider.close();\n+    }\n+\n+    private static void createTestTokenFile(String tokenDirectory, String expiration) throws Exception {\n+        String tokenFileContent = \"{\\n\" +\n+                                  \"\\\"accessToken\\\": \\\"base64string\\\",\\n\" +\n+                                  \"\\\"expiresAt\\\": \\\"\" + expiration + \"\\\",\\n\" +\n+                                  \"\\\"region\\\": \\\"us-west-2\\\",\\n\" +\n+                                  \"\\\"startUrl\\\": \\\"https//d-abc123.awsapps.com/start\\\"\\n\" +\n+                                  \"}\";\n+        try{\n+            File fakeTokenFile = new File(tokenDirectory);\n+            if (fakeTokenFile.createNewFile()) {\n+                FileWriter fileWriter = new FileWriter(fakeTokenFile);\n+                fileWriter.write(tokenFileContent);\n+                fileWriter.close();\n+            }\n+        } catch (IOException e) {\n+            throw new Exception(String.format(\"Creating the test token file failed because of %s\", e));\n+        }\n+\n+    }\n+\n+    private static String generateCachedTokenPath(String startUrl) {\n+        Validate.notNull(startUrl, \"The start url shouldn't be null.\");\n+        byte[] startUrlBytes = startUrl.getBytes(StandardCharsets.UTF_8);\n+        String encodedUrl = new String(startUrlBytes, StandardCharsets.UTF_8);\n+        return \"/Users/\"+System.getProperty(\"user.name\")+\"/.aws/sso/cache/\" +  sha1Hex(encodedUrl) + \".json\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9889d086cfd9fb2d55ccad662f825b68984c6461"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjc3MDg5OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToxODo1NlrOHu6eHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo1MzozM1rOH1_i9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA==", "bodyText": "Does this match the rules in the CLI? (After role_arn, before session_token, skip SSO if any of the 4 required fields aren't set, instead of raising an error?)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518954524", "createdAt": "2020-11-06T19:18:56Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDY1NA==", "bodyText": "This rule isn't specified in the SEP, but there is a line saying:\nIf the SSO credential provider is added to a default chain it MUST be added immediately after the WebIdentityProvider and before all other providers.\nEven though this isn't the default providers chain, it should still follow the similar rule so I put the SSO provider here.\nAbout skipping SSO when none of the four fields are set, there is the corresponding rule in SEP:\nIf one or more of the above configuration values is present the profile MUST be resolved by the SSO credential provider. All of the above configuration values MUST be set in the profile for the profile to be treated as a valid profile by the SSO credential provider. In the case that one or more of the above configuration values is missing from the profile the SSO credential provider MUST raise an exception that the profile is invalid.\nFrom my understanding, if there is one or more of the four properties is present then we need to check if all of the four are all present, and if not then we throw out an exception. However, if none of them are here then at least it means the customer isn't wanting the SSO provider so we shouldn't raise the error.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520014654", "createdAt": "2020-11-09T18:07:42Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MTYzMg==", "bodyText": "Should this be above the role_arn logic, then?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520841632", "createdAt": "2020-11-10T20:05:17Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNjEzMA==", "bodyText": "I checked with CLI team, they confirmed that they have the same order as us (SSO is after webIdentity).\ndef providers(self, profile_name, disable_env_vars=False):\n        return [\n            self._create_web_identity_provider(\n                profile_name, disable_env_vars,\n            ),\n            self._create_sso_provider(profile_name),\n            self._create_shared_credential_provider(profile_name),\n            self._create_process_provider(profile_name),\n            self._create_config_provider(profile_name),\n        ]", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526336130", "createdAt": "2020-11-18T18:45:47Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NDI4Mg==", "bodyText": "Which step do they check the role_arn? Right now, it looks like we're prioritizing role_arn higher than sso. I think the CLI is prioritizing it lower.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526364282", "createdAt": "2020-11-18T19:31:26Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3NTMxNg==", "bodyText": "I think role_arn is only used while creating the web identity credentials provider so it should be checked at the very first step. But I can check again to confirm this more accurately.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526375316", "createdAt": "2020-11-18T19:49:32Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3NzcxOA==", "bodyText": "I guess I should be asking about STS assume-role credentials, not role_arn. I think the CLI treats STS assume-role credentials lower than SSO credentials, but this code treats it higher.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526377718", "createdAt": "2020-11-18T19:53:33Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -116,6 +119,11 @@ public ProfileCredentialsUtils(Profile profile, Function<String, Optional<Profil\n             }\n         }\n \n+        if (properties.containsKey(ProfileProperty.SSO_ROLE_NAME) || properties.containsKey(ProfileProperty.SSO_ACCOUNT_ID)\n+            || properties.containsKey(ProfileProperty.SSO_REGION) || properties.containsKey(ProfileProperty.SSO_START_URL)) {\n+            return Optional.ofNullable(ssoProfileCredentialsProvider());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUyNA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjc3NjUyOnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToyMDo0M1rOHu6hZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxMDoxNFrOHu9p0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NTM2Nw==", "bodyText": "You should check with John to see if this line is correct, since he's changing this line for STS.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518955367", "createdAt": "2020-11-06T19:20:43Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -262,4 +294,20 @@ private ChildProfileCredentialsProviderFactory stsCredentialsProviderFactory() {\n             throw new IllegalStateException(\"Failed to create the '\" + name + \"' profile credentials provider.\", e);\n         }\n     }\n+\n+    /**\n+     * Load the factory that can be used to create the SSO credentials provider, assuming it is on the classpath.\n+     */\n+    private SsoCredentialsProviderFactory ssoCredentialsProviderFactory() {\n+        try {\n+            Class<?> ssoCredentialsProviderFactory = Class.forName(SSO_PROFILE_CREDENTIALS_PROVIDER_FACTORY, true,\n+                                                                   Thread.currentThread().getContextClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NzY0MQ==", "bodyText": "out of interest why are you doing custom class loading?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518987641", "createdAt": "2020-11-06T20:25:39Z", "author": {"login": "kiiadi"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -262,4 +294,20 @@ private ChildProfileCredentialsProviderFactory stsCredentialsProviderFactory() {\n             throw new IllegalStateException(\"Failed to create the '\" + name + \"' profile credentials provider.\", e);\n         }\n     }\n+\n+    /**\n+     * Load the factory that can be used to create the SSO credentials provider, assuming it is on the classpath.\n+     */\n+    private SsoCredentialsProviderFactory ssoCredentialsProviderFactory() {\n+        try {\n+            Class<?> ssoCredentialsProviderFactory = Class.forName(SSO_PROFILE_CREDENTIALS_PROVIDER_FACTORY, true,\n+                                                                   Thread.currentThread().getContextClassLoader());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NTM2Nw=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNjY3Mw==", "bodyText": "What's the alternative? SSO isn't necessarily on the classpath.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519006673", "createdAt": "2020-11-06T21:10:14Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -262,4 +294,20 @@ private ChildProfileCredentialsProviderFactory stsCredentialsProviderFactory() {\n             throw new IllegalStateException(\"Failed to create the '\" + name + \"' profile credentials provider.\", e);\n         }\n     }\n+\n+    /**\n+     * Load the factory that can be used to create the SSO credentials provider, assuming it is on the classpath.\n+     */\n+    private SsoCredentialsProviderFactory ssoCredentialsProviderFactory() {\n+        try {\n+            Class<?> ssoCredentialsProviderFactory = Class.forName(SSO_PROFILE_CREDENTIALS_PROVIDER_FACTORY, true,\n+                                                                   Thread.currentThread().getContextClassLoader());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NTM2Nw=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjc4ODMzOnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToyNDozOVrOHu6ouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToyNDozOVrOHu6ouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NzI0MQ==", "bodyText": "Isn't this used by SSO, so it should be protected?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518957241", "createdAt": "2020-11-06T19:24:39Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgwMDkyOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToyOToxM1rOHu6w5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo1MjoxNVrOHu_9OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1OTMzMw==", "bodyText": "Is this still accurate? E.g. with regard loading from a profile file.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518959333", "createdAt": "2020-11-06T19:29:13Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.SessionCredentialsHolder;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * Currently, the cached token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown. If\n+ * the users want to change the behavior of this, please implement your own cached token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NDQwOA==", "bodyText": "Generally, we still need to load the accountId and roleName from the profile file, but that's for generating the request, not the cached token directory. I can update that.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519044408", "createdAt": "2020-11-06T22:52:15Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.SessionCredentialsHolder;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * Currently, the cached token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown. If\n+ * the users want to change the behavior of this, please implement your own cached token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1OTMzMw=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgxMTQ4OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/SessionCredentialsHolder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozMjoyN1rOHu63IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NDozNFrOH1QRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MDkyOA==", "bodyText": "I know it hurts to duplicate this, but I'd vote for copying it to the two places it's needed instead of sharing it, and making it an API we have to maintain backwards-compatibility on.\nMaybe an alternative would be to make AwsSessionCredentials have an optional expiration time? Not sure if that's better or worse...", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518960928", "createdAt": "2020-11-06T19:32:27Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/SessionCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a session with its expiration time.\n+ */\n+@SdkProtectedApi\n+@ThreadSafe\n+public final class SessionCredentialsHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NDcyOQ==", "bodyText": "Can I know the reason why we don't want to share this between different credentials providers?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519044729", "createdAt": "2020-11-06T22:53:26Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/SessionCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a session with its expiration time.\n+ */\n+@SdkProtectedApi\n+@ThreadSafe\n+public final class SessionCredentialsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MDkyOA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NDA1OA==", "bodyText": "Our biggest source of technical debt in the SDK are APIs that we can't change: protected and public APIs. We try not to add new protected or public APIs unless we have a strong reason to do so, because it means we can pretty much never change our mind in the future. We can always refactor internal APIs if we want to in the future.\nThis seems like a protected API that we might regret adding. For example, what happens if we want to add the expiration time to AwsSessionCredentials in the future? Then, SessionCredentialsHolder is no longer needed, but we can't delete it because it's protected.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520844058", "createdAt": "2020-11-10T20:09:34Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/SessionCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a session with its expiration time.\n+ */\n+@SdkProtectedApi\n+@ThreadSafe\n+public final class SessionCredentialsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MDkyOA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMzE0Mw==", "bodyText": "Got you, will do the change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r525603143", "createdAt": "2020-11-17T23:54:34Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/SessionCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+\n+/**\n+ * Holder class used to atomically store a session with its expiration time.\n+ */\n+@SdkProtectedApi\n+@ThreadSafe\n+public final class SessionCredentialsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MDkyOA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgyMDU3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNToxNVrOHu68Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDowOTo1N1rOHwtz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjI3NQ==", "bodyText": "Do these need to be public?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518962275", "createdAt": "2020-11-06T19:35:15Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.SessionCredentialsHolder;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * Currently, the cached token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown. If\n+ * the users want to change the behavior of this, please implement your own cached token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SessionCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    private SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = notNull(builder.ssoClient, \"SSO client must not be null.\");\n+        this.getRoleCredentialsRequestSupplier = builder.getRoleCredentialsRequestSupplier;\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        CachedSupplier.Builder<SessionCredentialsHolder> cacheBuilder = CachedSupplier.builder(this::updateSsoCredentials);\n+        if (builder.asyncCredentialUpdateEnabled) {\n+            cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+        }\n+\n+        this.credentialCache = cacheBuilder.build();\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SessionCredentialsHolder> updateSsoCredentials() {\n+        SessionCredentialsHolder credentials = getUpdatedCredentials(ssoClient);\n+        Instant acutalTokenExpiration = credentials.getSessionCredentialsExpiration();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    private SessionCredentialsHolder getUpdatedCredentials(SsoClient ssoClient) {\n+        GetRoleCredentialsRequest request = getRoleCredentialsRequestSupplier.get();\n+        notNull(request, \"GetRoleCredentialsRequest can't be null.\");\n+        RoleCredentials roleCredentials = ssoClient.getRoleCredentials(request).roleCredentials();\n+        AwsSessionCredentials sessionCredentials = AwsSessionCredentials.create(roleCredentials.accessKeyId(),\n+                                                                                roleCredentials.secretAccessKey(),\n+                                                                                roleCredentials.sessionToken());\n+        return new SessionCredentialsHolder(sessionCredentials, Instant.ofEpochMilli(roleCredentials.expiration()));\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NTE3Mg==", "bodyText": "Not really for now, I made them public for consistency with the existed STSCredentialsProvider, I can change it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519045172", "createdAt": "2020-11-06T22:54:59Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.SessionCredentialsHolder;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * Currently, the cached token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown. If\n+ * the users want to change the behavior of this, please implement your own cached token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SessionCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    private SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = notNull(builder.ssoClient, \"SSO client must not be null.\");\n+        this.getRoleCredentialsRequestSupplier = builder.getRoleCredentialsRequestSupplier;\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        CachedSupplier.Builder<SessionCredentialsHolder> cacheBuilder = CachedSupplier.builder(this::updateSsoCredentials);\n+        if (builder.asyncCredentialUpdateEnabled) {\n+            cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+        }\n+\n+        this.credentialCache = cacheBuilder.build();\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SessionCredentialsHolder> updateSsoCredentials() {\n+        SessionCredentialsHolder credentials = getUpdatedCredentials(ssoClient);\n+        Instant acutalTokenExpiration = credentials.getSessionCredentialsExpiration();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    private SessionCredentialsHolder getUpdatedCredentials(SsoClient ssoClient) {\n+        GetRoleCredentialsRequest request = getRoleCredentialsRequestSupplier.get();\n+        notNull(request, \"GetRoleCredentialsRequest can't be null.\");\n+        RoleCredentials roleCredentials = ssoClient.getRoleCredentials(request).roleCredentials();\n+        AwsSessionCredentials sessionCredentials = AwsSessionCredentials.create(roleCredentials.accessKeyId(),\n+                                                                                roleCredentials.secretAccessKey(),\n+                                                                                roleCredentials.sessionToken());\n+        return new SessionCredentialsHolder(sessionCredentials, Instant.ofEpochMilli(roleCredentials.expiration()));\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjI3NQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NDI1Nw==", "bodyText": "Ah, if StsCredentialsProvider have them public I guess that's fine.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520844257", "createdAt": "2020-11-10T20:09:57Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.SessionCredentialsHolder;\n+import software.amazon.awssdk.profiles.ProfileFile;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.ExpiredTokenException;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. The credential provider loads configuration from a {@link ProfileFile}, and use this information\n+ * to generate a cached token directory. With this directory the information a {@link SsoClient} can do a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * Currently, the cached token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown. If\n+ * the users want to change the behavior of this, please implement your own cached token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SessionCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    private SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = notNull(builder.ssoClient, \"SSO client must not be null.\");\n+        this.getRoleCredentialsRequestSupplier = builder.getRoleCredentialsRequestSupplier;\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        CachedSupplier.Builder<SessionCredentialsHolder> cacheBuilder = CachedSupplier.builder(this::updateSsoCredentials);\n+        if (builder.asyncCredentialUpdateEnabled) {\n+            cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+        }\n+\n+        this.credentialCache = cacheBuilder.build();\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SessionCredentialsHolder> updateSsoCredentials() {\n+        SessionCredentialsHolder credentials = getUpdatedCredentials(ssoClient);\n+        Instant acutalTokenExpiration = credentials.getSessionCredentialsExpiration();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    private SessionCredentialsHolder getUpdatedCredentials(SsoClient ssoClient) {\n+        GetRoleCredentialsRequest request = getRoleCredentialsRequestSupplier.get();\n+        notNull(request, \"GetRoleCredentialsRequest can't be null.\");\n+        RoleCredentials roleCredentials = ssoClient.getRoleCredentials(request).roleCredentials();\n+        AwsSessionCredentials sessionCredentials = AwsSessionCredentials.create(roleCredentials.accessKeyId(),\n+                                                                                roleCredentials.secretAccessKey(),\n+                                                                                roleCredentials.sessionToken());\n+        return new SessionCredentialsHolder(sessionCredentials, Instant.ofEpochMilli(roleCredentials.expiration()));\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjI3NQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgyNTc0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNjo1NFrOHu6_jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMTo0NFrOHwt3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MzA4NA==", "bodyText": "If customers will see this, it'll have to be a public API. Should we just use a generic SdkClientException, or do you think customers will want to catch this exception specifically and do something about it?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518963084", "createdAt": "2020-11-06T19:36:54Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkInternalApi\n+public class ExpiredTokenException extends SdkClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NTg0NQ==", "bodyText": "It is mentioned in the SEP that this exception will be thrown. I guess it's safer for us to use the same exception as the SEP so the users wouldn't get confused? I can change it to public though.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519045845", "createdAt": "2020-11-06T22:57:14Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkInternalApi\n+public class ExpiredTokenException extends SdkClientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MzA4NA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTIwMw==", "bodyText": "I suppose someone might want to \"catch\" ExpiredTokenException and update their credentials. I guess it's fine to add a new public class here, then.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520845203", "createdAt": "2020-11-10T20:11:44Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkInternalApi\n+public class ExpiredTokenException extends SdkClientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MzA4NA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgzMTYyOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCachedAccessTokenProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozOTowOFrOHu7DUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODo0NjoxMVrOH19Bgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NDA1MA==", "bodyText": "Is this 15 minute non-grace-period in the SEP?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518964050", "createdAt": "2020-11-06T19:39:08Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCachedAccessTokenProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.util.json.JacksonUtils;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+/**\n+ * Resolve the access token from the cached token file. If the token has expired then throw out an exception to ask the users to\n+ * update the token. This provider can also be replaced by any other implementation of resolving the access token. The users can\n+ * resolve the access token in their own way and add it to the {@link SsoCredentialsProvider.Builder#refreshRequest}.\n+ */\n+@SdkInternalApi\n+public final class SsoCachedAccessTokenProvider {\n+\n+    private Path cachedTokenFilePath;\n+\n+    public SsoCachedAccessTokenProvider(Path cachedTokenFilePath) {\n+        this.cachedTokenFilePath = cachedTokenFilePath;\n+    }\n+\n+    public String resolveAccessToken() {\n+        try (InputStream cachedTokenStream = Files.newInputStream(cachedTokenFilePath)) {\n+            return getTokenFromJson(IoUtils.toUtf8String(cachedTokenStream));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String getTokenFromJson(String json) {\n+        JsonNode jsonNode = JacksonUtils.sensitiveJsonNodeOf(json);\n+\n+        if (validateToken(jsonNode.get(\"expiresAt\").asText())) {\n+            throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                          + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                          + \" login with the corresponding profile.\").build();\n+        }\n+\n+        return jsonNode.get(\"accessToken\").asText();\n+    }\n+\n+    private boolean validateToken(String expirationTime) {\n+        return Instant.now().isAfter(Instant.parse(expirationTime).minus(15, MINUTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NjIyOQ==", "bodyText": "Yes, this is on the SEP: When checking to see if a cached token is expired, the SDK MAY treat the token as expired if it will expire within 15 minutes of the expiresAt time.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519046229", "createdAt": "2020-11-06T22:58:27Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCachedAccessTokenProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.util.json.JacksonUtils;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+/**\n+ * Resolve the access token from the cached token file. If the token has expired then throw out an exception to ask the users to\n+ * update the token. This provider can also be replaced by any other implementation of resolving the access token. The users can\n+ * resolve the access token in their own way and add it to the {@link SsoCredentialsProvider.Builder#refreshRequest}.\n+ */\n+@SdkInternalApi\n+public final class SsoCachedAccessTokenProvider {\n+\n+    private Path cachedTokenFilePath;\n+\n+    public SsoCachedAccessTokenProvider(Path cachedTokenFilePath) {\n+        this.cachedTokenFilePath = cachedTokenFilePath;\n+    }\n+\n+    public String resolveAccessToken() {\n+        try (InputStream cachedTokenStream = Files.newInputStream(cachedTokenFilePath)) {\n+            return getTokenFromJson(IoUtils.toUtf8String(cachedTokenStream));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String getTokenFromJson(String json) {\n+        JsonNode jsonNode = JacksonUtils.sensitiveJsonNodeOf(json);\n+\n+        if (validateToken(jsonNode.get(\"expiresAt\").asText())) {\n+            throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                          + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                          + \" login with the corresponding profile.\").build();\n+        }\n+\n+        return jsonNode.get(\"accessToken\").asText();\n+    }\n+\n+    private boolean validateToken(String expirationTime) {\n+        return Instant.now().isAfter(Instant.parse(expirationTime).minus(15, MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NDA1MA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTYyMw==", "bodyText": "Alright, then. I guess we can relax it if customers complain. 15 minutes seems like a lot. Does the CLI do this?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520845623", "createdAt": "2020-11-10T20:12:27Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCachedAccessTokenProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.util.json.JacksonUtils;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+/**\n+ * Resolve the access token from the cached token file. If the token has expired then throw out an exception to ask the users to\n+ * update the token. This provider can also be replaced by any other implementation of resolving the access token. The users can\n+ * resolve the access token in their own way and add it to the {@link SsoCredentialsProvider.Builder#refreshRequest}.\n+ */\n+@SdkInternalApi\n+public final class SsoCachedAccessTokenProvider {\n+\n+    private Path cachedTokenFilePath;\n+\n+    public SsoCachedAccessTokenProvider(Path cachedTokenFilePath) {\n+        this.cachedTokenFilePath = cachedTokenFilePath;\n+    }\n+\n+    public String resolveAccessToken() {\n+        try (InputStream cachedTokenStream = Files.newInputStream(cachedTokenFilePath)) {\n+            return getTokenFromJson(IoUtils.toUtf8String(cachedTokenStream));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String getTokenFromJson(String json) {\n+        JsonNode jsonNode = JacksonUtils.sensitiveJsonNodeOf(json);\n+\n+        if (validateToken(jsonNode.get(\"expiresAt\").asText())) {\n+            throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                          + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                          + \" login with the corresponding profile.\").build();\n+        }\n+\n+        return jsonNode.get(\"accessToken\").asText();\n+    }\n+\n+    private boolean validateToken(String expirationTime) {\n+        return Instant.now().isAfter(Instant.parse(expirationTime).minus(15, MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NDA1MA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNjM4Ng==", "bodyText": "Yes, confirmed by CLI team.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526336386", "createdAt": "2020-11-18T18:46:11Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoCachedAccessTokenProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.util.json.JacksonUtils;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+/**\n+ * Resolve the access token from the cached token file. If the token has expired then throw out an exception to ask the users to\n+ * update the token. This provider can also be replaced by any other implementation of resolving the access token. The users can\n+ * resolve the access token in their own way and add it to the {@link SsoCredentialsProvider.Builder#refreshRequest}.\n+ */\n+@SdkInternalApi\n+public final class SsoCachedAccessTokenProvider {\n+\n+    private Path cachedTokenFilePath;\n+\n+    public SsoCachedAccessTokenProvider(Path cachedTokenFilePath) {\n+        this.cachedTokenFilePath = cachedTokenFilePath;\n+    }\n+\n+    public String resolveAccessToken() {\n+        try (InputStream cachedTokenStream = Files.newInputStream(cachedTokenFilePath)) {\n+            return getTokenFromJson(IoUtils.toUtf8String(cachedTokenStream));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String getTokenFromJson(String json) {\n+        JsonNode jsonNode = JacksonUtils.sensitiveJsonNodeOf(json);\n+\n+        if (validateToken(jsonNode.get(\"expiresAt\").asText())) {\n+            throw ExpiredTokenException.builder().message(\"The SSO session associated with this profile has expired or is\"\n+                                                          + \" otherwise invalid. To refresh this SSO session run aws sso\"\n+                                                          + \" login with the corresponding profile.\").build();\n+        }\n+\n+        return jsonNode.get(\"accessToken\").asText();\n+    }\n+\n+    private boolean validateToken(String expirationTime) {\n+        return Instant.now().isAfter(Instant.parse(expirationTime).minus(15, MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NDA1MA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg0ODI1OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo0NDo1M1rOHu7NlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToyODo0NFrOHvB85w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NjY3Nw==", "bodyText": "I don't actually see this class in this PR. Am I blind?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518966677", "createdAt": "2020-11-06T19:44:53Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -49,6 +50,8 @@\n public final class ProfileCredentialsUtils {\n     private static final String STS_PROFILE_CREDENTIALS_PROVIDER_FACTORY =\n         \"software.amazon.awssdk.services.sts.internal.StsProfileCredentialsProviderFactory\";\n+    private static final String SSO_PROFILE_CREDENTIALS_PROVIDER_FACTORY =\n+        \"software.amazon.awssdk.services.sso.internal.SsoCredentialsProviderFactory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NzA5NQ==", "bodyText": "My bad, the name of this class is changed, it should be SsoProfileCredentialsProviderFactory now.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519077095", "createdAt": "2020-11-07T01:28:44Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -49,6 +50,8 @@\n public final class ProfileCredentialsUtils {\n     private static final String STS_PROFILE_CREDENTIALS_PROVIDER_FACTORY =\n         \"software.amazon.awssdk.services.sts.internal.StsProfileCredentialsProviderFactory\";\n+    private static final String SSO_PROFILE_CREDENTIALS_PROVIDER_FACTORY =\n+        \"software.amazon.awssdk.services.sso.internal.SsoCredentialsProviderFactory\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NjY3Nw=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg1MjY3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo0NjoyNVrOHu7QMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMjo1OFrOHwt6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NzM0NA==", "bodyText": "Is this what's supposed to be in that string I commented on earlier? If so, should this be a protected API, since its constructor is invoked by the auth module?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518967344", "createdAt": "2020-11-06T19:46:25Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NzI4Mw==", "bodyText": "Agree, should I move it out of the internal package?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519077283", "createdAt": "2020-11-07T01:29:46Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NzM0NA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTg3OQ==", "bodyText": "Yeah, if it's protected it shouldn't be in the internal package.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520845879", "createdAt": "2020-11-10T20:12:58Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NzM0NA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg2MDMzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo0OTowNlrOHu7U-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo0OTowNlrOHu7U-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2ODU2OA==", "bodyText": "Nit: can this just use the other create() method?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518968568", "createdAt": "2020-11-06T19:49:06Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg2MzI3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1MDowMFrOHu7Wsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTozMjoyMVrOHvB_EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTAxMA==", "bodyText": "Is this field needed?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518969010", "createdAt": "2020-11-06T19:50:00Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NzY0OQ==", "bodyText": "Not really, it was useful before and not any more after I did multiple changes. I can remove it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519077649", "createdAt": "2020-11-07T01:32:21Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTAxMA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg2NTc5OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1MDo0N1rOHu7YQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1MDo0N1rOHu7YQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTQxMA==", "bodyText": "Isn't this also a protected API?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518969410", "createdAt": "2020-11-06T19:50:47Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg2NzU5OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1MToyOFrOHu7Zdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo0Mjo0OFrOH1_KEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ==", "bodyText": "Should this be named with \"Profile\" since it's not necessarily related to a profile file? I'd honestly rather just pass a Profile to a ProfileCredentialsProviderFactory instead of a SsoCredentialsProfileProperties to a SsoCredentialsProviderFactory, and not make this specific to SSO. If we had done that for the web identity token file, we wouldn't have to create yet another protected API here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518969719", "createdAt": "2020-11-06T19:51:28Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3ODc2Mw==", "bodyText": "It's not necessary to include \"Profile\" in the name but I can't come up with a better name. Do you have any good idea about how to name this? I named it with \"Profile\" because it takes the configurations from the profile file and those properties are all related to the SSO credentials provider.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519078763", "createdAt": "2020-11-07T01:41:06Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NjI1Mg==", "bodyText": "What do you think about my alternate suggestion - making it more generic and just passing the profile through?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520846252", "createdAt": "2020-11-10T20:13:44Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNjc2MA==", "bodyText": "I understand your point of making the factory generic so we don't need to add more and more factories as protected apis here. But I think our purpose of using ProfileCredentialsUtils to create different credentials providers from the profile properties is just to make the reading properties part generic. If we pass a Profile directly to the ProfileCredentialsProviderFactory, then we would need to add a series of reading properties and validating properties stuffs in the factory itself. Isn't that conflicting with our original design? If you do think creating less protected apis is worthy then do you think we should make it independent from the current ProfileCredentialsUtils?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r525636760", "createdAt": "2020-11-18T01:32:52Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MTc3Mw==", "bodyText": "To make sure we're on the same page, I was picturing just changing the current SsoCredentialsProviderFactory to ProfileCredentialsProviderFactory which takes a profile, and then we'd have an SsoProfileCredentialsProviderFactory that implements that interface. The responsibilities of the calling class and the factory itself would remain the same.\nThe SsoProfileCredentialsProviderFactory would indeed read the properties from the profile, but that's just calling profile.property(ProfileProperty.foo) instead of ssoCredentialsProfileProperties.foo(). Would there have to be more than that?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526361773", "createdAt": "2020-11-18T19:27:20Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MTM0Nw==", "bodyText": "I see, sorry I misunderstood your suggestion, will do the change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526371347", "createdAt": "2020-11-18T19:42:48Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/SsoCredentialsProfileProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.auth.credentials.internal;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+\n+/**\n+ * A container for SSO credential properties, these properties can be loaded from the profile in default.\n+ */\n+@SdkInternalApi\n+public class SsoCredentialsProfileProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2OTcxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg4NDE0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1NjozNlrOHu7jOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1NjozNlrOHu7jOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjIxOQ==", "bodyText": "Unqualified generics. Supplier of what?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518972219", "createdAt": "2020-11-06T19:56:36Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {\n+        this.tokenProvider = tokenProvider;\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when\n+     * {@link #create(SsoCredentialsProfileProperties)} or\n+     * {@link #create(SsoCredentialsProfileProperties, SsoCachedAccessTokenProvider)} is invoked. This wrapper is important\n+     * because it ensures the parent credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(SsoCredentialsProfileProperties credentialsProperties,\n+                                              SsoCachedAccessTokenProvider provider) {\n+            String ssoAccountId = credentialsProperties.ssoAccountId();\n+            String ssoRoleName = credentialsProperties.ssoRoleName();\n+            String ssoRegion = credentialsProperties.ssoRegion();\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider.resolveAccessToken());\n+\n+            this.credentialsProvider = SsoCredentialsProvider.builder()\n+                                                             .ssoClient(ssoClient)\n+                                                             .refreshRequest(supplier)\n+                                                             .build();\n+        }\n+\n+        @Override\n+        public AwsCredentials resolveCredentials() {\n+            return this.credentialsProvider.resolveCredentials();\n+        }\n+\n+        @Override\n+        public void close() {\n+            IoUtils.closeQuietly(credentialsProvider, null);\n+            IoUtils.closeQuietly(ssoClient, null);\n+        }\n+    }\n+\n+\n+    private static final class GetRoleCredentialsRequestSupplier implements Supplier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg4NjMyOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1NzoxNFrOHu7kdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoyMTo1MFrOH1TlhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjUzMg==", "bodyText": "This looks constant. Do we need to even use a supplier here? What if the token expires?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518972532", "createdAt": "2020-11-06T19:57:14Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {\n+        this.tokenProvider = tokenProvider;\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when\n+     * {@link #create(SsoCredentialsProfileProperties)} or\n+     * {@link #create(SsoCredentialsProfileProperties, SsoCachedAccessTokenProvider)} is invoked. This wrapper is important\n+     * because it ensures the parent credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(SsoCredentialsProfileProperties credentialsProperties,\n+                                              SsoCachedAccessTokenProvider provider) {\n+            String ssoAccountId = credentialsProperties.ssoAccountId();\n+            String ssoRoleName = credentialsProperties.ssoRoleName();\n+            String ssoRegion = credentialsProperties.ssoRegion();\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider.resolveAccessToken());\n+\n+            this.credentialsProvider = SsoCredentialsProvider.builder()\n+                                                             .ssoClient(ssoClient)\n+                                                             .refreshRequest(supplier)\n+                                                             .build();\n+        }\n+\n+        @Override\n+        public AwsCredentials resolveCredentials() {\n+            return this.credentialsProvider.resolveCredentials();\n+        }\n+\n+        @Override\n+        public void close() {\n+            IoUtils.closeQuietly(credentialsProvider, null);\n+            IoUtils.closeQuietly(ssoClient, null);\n+        }\n+    }\n+\n+\n+    private static final class GetRoleCredentialsRequestSupplier implements Supplier {\n+        private final GetRoleCredentialsRequest request;\n+        private final String cachedToken;\n+\n+        GetRoleCredentialsRequestSupplier(GetRoleCredentialsRequest request,\n+                                          String cachedToken) {\n+            this.request = request;\n+            this.cachedToken = cachedToken;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            return request.toBuilder().accessToken(cachedToken).build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MDAwNg==", "bodyText": "This is a debatable part. I used to put the check of whether the token expires here in this supplier, but that led to the lacking of flexibility because customers wouldn't be able to customize their own ways of resolving the access token from the cached token file. However, in my current implmenetation, I took the whole resolving access token part out of the factory(including validating the token file), and found out that this supplier became constant and it doesn't really change with the token. Could you point me out to a better way to handle both of these two here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519080006", "createdAt": "2020-11-07T01:52:08Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {\n+        this.tokenProvider = tokenProvider;\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when\n+     * {@link #create(SsoCredentialsProfileProperties)} or\n+     * {@link #create(SsoCredentialsProfileProperties, SsoCachedAccessTokenProvider)} is invoked. This wrapper is important\n+     * because it ensures the parent credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(SsoCredentialsProfileProperties credentialsProperties,\n+                                              SsoCachedAccessTokenProvider provider) {\n+            String ssoAccountId = credentialsProperties.ssoAccountId();\n+            String ssoRoleName = credentialsProperties.ssoRoleName();\n+            String ssoRegion = credentialsProperties.ssoRegion();\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider.resolveAccessToken());\n+\n+            this.credentialsProvider = SsoCredentialsProvider.builder()\n+                                                             .ssoClient(ssoClient)\n+                                                             .refreshRequest(supplier)\n+                                                             .build();\n+        }\n+\n+        @Override\n+        public AwsCredentials resolveCredentials() {\n+            return this.credentialsProvider.resolveCredentials();\n+        }\n+\n+        @Override\n+        public void close() {\n+            IoUtils.closeQuietly(credentialsProvider, null);\n+            IoUtils.closeQuietly(ssoClient, null);\n+        }\n+    }\n+\n+\n+    private static final class GetRoleCredentialsRequestSupplier implements Supplier {\n+        private final GetRoleCredentialsRequest request;\n+        private final String cachedToken;\n+\n+        GetRoleCredentialsRequestSupplier(GetRoleCredentialsRequest request,\n+                                          String cachedToken) {\n+            this.request = request;\n+            this.cachedToken = cachedToken;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            return request.toBuilder().accessToken(cachedToken).build();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjUzMg=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDA5Nw==", "bodyText": "If you need to be able to reload the token in the credentials provider after it expires, you'll have to query the SsoAccessTokenProvider in this supplier to get the access token.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520850097", "createdAt": "2020-11-10T20:21:08Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {\n+        this.tokenProvider = tokenProvider;\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when\n+     * {@link #create(SsoCredentialsProfileProperties)} or\n+     * {@link #create(SsoCredentialsProfileProperties, SsoCachedAccessTokenProvider)} is invoked. This wrapper is important\n+     * because it ensures the parent credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(SsoCredentialsProfileProperties credentialsProperties,\n+                                              SsoCachedAccessTokenProvider provider) {\n+            String ssoAccountId = credentialsProperties.ssoAccountId();\n+            String ssoRoleName = credentialsProperties.ssoRoleName();\n+            String ssoRegion = credentialsProperties.ssoRegion();\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider.resolveAccessToken());\n+\n+            this.credentialsProvider = SsoCredentialsProvider.builder()\n+                                                             .ssoClient(ssoClient)\n+                                                             .refreshRequest(supplier)\n+                                                             .build();\n+        }\n+\n+        @Override\n+        public AwsCredentials resolveCredentials() {\n+            return this.credentialsProvider.resolveCredentials();\n+        }\n+\n+        @Override\n+        public void close() {\n+            IoUtils.closeQuietly(credentialsProvider, null);\n+            IoUtils.closeQuietly(ssoClient, null);\n+        }\n+    }\n+\n+\n+    private static final class GetRoleCredentialsRequestSupplier implements Supplier {\n+        private final GetRoleCredentialsRequest request;\n+        private final String cachedToken;\n+\n+        GetRoleCredentialsRequestSupplier(GetRoleCredentialsRequest request,\n+                                          String cachedToken) {\n+            this.request = request;\n+            this.cachedToken = cachedToken;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            return request.toBuilder().accessToken(cachedToken).build();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjUzMg=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY1NzQ3Nw==", "bodyText": "This change is done.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r525657477", "createdAt": "2020-11-18T02:21:50Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {\n+        this.tokenProvider = tokenProvider;\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when\n+     * {@link #create(SsoCredentialsProfileProperties)} or\n+     * {@link #create(SsoCredentialsProfileProperties, SsoCachedAccessTokenProvider)} is invoked. This wrapper is important\n+     * because it ensures the parent credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(SsoCredentialsProfileProperties credentialsProperties,\n+                                              SsoCachedAccessTokenProvider provider) {\n+            String ssoAccountId = credentialsProperties.ssoAccountId();\n+            String ssoRoleName = credentialsProperties.ssoRoleName();\n+            String ssoRegion = credentialsProperties.ssoRegion();\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider.resolveAccessToken());\n+\n+            this.credentialsProvider = SsoCredentialsProvider.builder()\n+                                                             .ssoClient(ssoClient)\n+                                                             .refreshRequest(supplier)\n+                                                             .build();\n+        }\n+\n+        @Override\n+        public AwsCredentials resolveCredentials() {\n+            return this.credentialsProvider.resolveCredentials();\n+        }\n+\n+        @Override\n+        public void close() {\n+            IoUtils.closeQuietly(credentialsProvider, null);\n+            IoUtils.closeQuietly(ssoClient, null);\n+        }\n+    }\n+\n+\n+    private static final class GetRoleCredentialsRequestSupplier implements Supplier {\n+        private final GetRoleCredentialsRequest request;\n+        private final String cachedToken;\n+\n+        GetRoleCredentialsRequestSupplier(GetRoleCredentialsRequest request,\n+                                          String cachedToken) {\n+            this.request = request;\n+            this.cachedToken = cachedToken;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            return request.toBuilder().accessToken(cachedToken).build();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjUzMg=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg5MTE1OnYy", "diffSide": "RIGHT", "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTo1ODo1N1rOHu7nhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTozMDowMFrOH1-q6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzMxOQ==", "bodyText": "Don't we already have this elsewhere?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r518973319", "createdAt": "2020-11-06T19:58:57Z", "author": {"login": "millems"}, "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.testutils;\n+\n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.rules.ExternalResource;\n+import software.amazon.awssdk.utils.SystemSetting;\n+\n+/**\n+ * A utility that can temporarily forcibly set environment variables and\n+ * then allows resetting them to the original values.\n+ */\n+public class EnvironmentVariableHelper extends ExternalResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3OTM4OA==", "bodyText": "Yea, we already have it in the test-utils module, I tried moving it from the test-utils into the utils module, but there are some other places using this class having the dependency on test-utils but not on utils, and that caused some issue. So I just copied one here. Should we move it to utils and correct all of those usages?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519079388", "createdAt": "2020-11-07T01:46:40Z", "author": {"login": "Quanzzzz"}, "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.testutils;\n+\n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.rules.ExternalResource;\n+import software.amazon.awssdk.utils.SystemSetting;\n+\n+/**\n+ * A utility that can temporarily forcibly set environment variables and\n+ * then allows resetting them to the original values.\n+ */\n+public class EnvironmentVariableHelper extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzMxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDUxOA==", "bodyText": "Why does this need to be in the utils module?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520850518", "createdAt": "2020-11-10T20:21:53Z", "author": {"login": "millems"}, "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.testutils;\n+\n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.rules.ExternalResource;\n+import software.amazon.awssdk.utils.SystemSetting;\n+\n+/**\n+ * A utility that can temporarily forcibly set environment variables and\n+ * then allows resetting them to the original values.\n+ */\n+public class EnvironmentVariableHelper extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzMxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0MzU2Ng==", "bodyText": "Because we have the UserHomeDirectoryUtilsTest using it in the utils module. And as we discussed, it's better for us to extract userHomeDirectory() method out of ProfileFileLocation, thus I moved it into UserHomeDirectoryUtils, as well as the UserHomeDirectoryUtilsTest.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r525643566", "createdAt": "2020-11-18T01:54:00Z", "author": {"login": "Quanzzzz"}, "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.testutils;\n+\n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.rules.ExternalResource;\n+import software.amazon.awssdk.utils.SystemSetting;\n+\n+/**\n+ * A utility that can temporarily forcibly set environment variables and\n+ * then allows resetting them to the original values.\n+ */\n+public class EnvironmentVariableHelper extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzMxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MzM2OA==", "bodyText": "I see, test-utils uses utils, not the other way around. I guess this is okay for now... I'd like to eventually see why test-utils needs to depend on utils.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r526363368", "createdAt": "2020-11-18T19:30:00Z", "author": {"login": "millems"}, "path": "utils/src/test/java/software/amazon/awssdk/testutils/EnvironmentVariableHelper.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.testutils;\n+\n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.rules.ExternalResource;\n+import software.amazon.awssdk.utils.SystemSetting;\n+\n+/**\n+ * A utility that can temporarily forcibly set environment variables and\n+ * then allows resetting them to the original values.\n+ */\n+public class EnvironmentVariableHelper extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzMxOQ=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIwODc4OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/software/amazon/awssdk/utils/UserHomeDirectoryUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo0ODoxM1rOHu-l_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMTo0NDoyOFrOHvCE6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMjA3Ng==", "bodyText": "nit: you could probably move this down since it's not used if HOME is set.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519022076", "createdAt": "2020-11-06T21:48:13Z", "author": {"login": "kiiadi"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/UserHomeDirectoryUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.utils;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * Load the home directory that should be used for the stored file. This will check the same environment variables as the CLI\n+ * to identify the location of home, before falling back to java-specific resolution.\n+ */\n+@SdkProtectedApi\n+public final class UserHomeDirectoryUtils {\n+\n+    private UserHomeDirectoryUtils() {\n+\n+    }\n+\n+    public static String userHomeDirectory() {\n+        boolean isWindows = JavaSystemSetting.OS_NAME.getStringValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3OTE0NA==", "bodyText": "Good call, thanks for reminding me about this.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r519079144", "createdAt": "2020-11-07T01:44:28Z", "author": {"login": "Quanzzzz"}, "path": "utils/src/main/java/software/amazon/awssdk/utils/UserHomeDirectoryUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.utils;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+\n+/**\n+ * Load the home directory that should be used for the stored file. This will check the same environment variables as the CLI\n+ * to identify the location of home, before falling back to java-specific resolution.\n+ */\n+@SdkProtectedApi\n+public final class UserHomeDirectoryUtils {\n+\n+    private UserHomeDirectoryUtils() {\n+\n+    }\n+\n+    public static String userHomeDirectory() {\n+        boolean isWindows = JavaSystemSetting.OS_NAME.getStringValue()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMjA3Ng=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI0NTAyOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMDoxOFrOHwuJEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoyMToxNFrOH1TjTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0OTY4MA==", "bodyText": "Can we rename SsoCachedAccessTokenProvider to SsoAccessTokenProvider? The fact that it works on a cache seems like an implementation detail.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r520849680", "createdAt": "2020-11-10T20:20:18Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY1NjkwOA==", "bodyText": "Will do the change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r525656908", "createdAt": "2020-11-18T02:21:14Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoCachedTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.SsoCredentialsProviderFactory;\n+import software.amazon.awssdk.auth.credentials.internal.SsoCredentialsProfileProperties;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.auth.SsoCredentialsProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link SsoCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * sprcified in either a {@link Profile} or environment variables.\n+ */\n+@SdkInternalApi\n+public class SsoProfileCredentialsProviderFactory implements SsoCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    private SsoCachedAccessTokenProvider tokenProvider;\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoCachedAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties) {\n+        this.tokenProvider = new SsoCachedAccessTokenProvider(\n+            generateCachedTokenPath(ssoCredentialsProfileProperties.ssoStartUrl(), TOKEN_DIRECTORY));\n+        return new SsoProfileCredentialsProvider(ssoCredentialsProfileProperties, tokenProvider);\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoCachedAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(SsoCredentialsProfileProperties ssoCredentialsProfileProperties,\n+                                         SsoCachedAccessTokenProvider tokenProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0OTY4MA=="}, "originalCommit": {"oid": "187767b2de70685ac65f21ec9c3d9cc0c64d3427"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTIzMDc0OnYy", "diffSide": "RIGHT", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNjoyMVrOH2uj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1Mjo1NVrOH2vJ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0Nzk5Ng==", "bodyText": "Why is this protected?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527147996", "createdAt": "2020-11-19T19:36:21Z", "author": {"login": "millems"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -46,10 +47,12 @@\n /**\n  * Utility class to load {@link #credentialsProvider()} configured in a profile.\n  */\n-@SdkInternalApi\n+@SdkProtectedApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzczNg==", "bodyText": "That was a mistake, I fixed it once... but I guess the fix wasn't included... will update it again.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527157736", "createdAt": "2020-11-19T19:52:55Z", "author": {"login": "Quanzzzz"}, "path": "core/auth/src/main/java/software/amazon/awssdk/auth/credentials/internal/ProfileCredentialsUtils.java", "diffHunk": "@@ -46,10 +47,12 @@\n /**\n  * Utility class to load {@link #credentialsProvider()} configured in a profile.\n  */\n-@SdkInternalApi\n+@SdkProtectedApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0Nzk5Ng=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTI0MjY2OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/ExpiredTokenException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozOTozOVrOH2urBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowMjoyMlrOH2vefw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0OTgzMQ==", "bodyText": "Can we override build() to return ExpiredTokenException? Customers might want to get hold of an actual instance of ExpiredTokenException, and without the different build return type they'd need to cast,", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527149831", "createdAt": "2020-11-19T19:39:39Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkPublicApi\n+public class ExpiredTokenException extends SdkClientException {\n+\n+    private static final List<SdkField<?>> SDK_FIELDS = Collections.unmodifiableList(Arrays.asList());\n+\n+    private ExpiredTokenException(Builder b) {\n+        super(b);\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return new BuilderImpl(this);\n+    }\n+\n+    public static Builder builder() {\n+        return new BuilderImpl();\n+    }\n+\n+    public interface Builder extends SdkPojo, SdkClientException.Builder {\n+        @Override\n+        Builder message(String message);\n+\n+        @Override\n+        Builder cause(Throwable cause);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MzAwNw==", "bodyText": "Sure, will do the change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527163007", "createdAt": "2020-11-19T20:02:22Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkPublicApi\n+public class ExpiredTokenException extends SdkClientException {\n+\n+    private static final List<SdkField<?>> SDK_FIELDS = Collections.unmodifiableList(Arrays.asList());\n+\n+    private ExpiredTokenException(Builder b) {\n+        super(b);\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return new BuilderImpl(this);\n+    }\n+\n+    public static Builder builder() {\n+        return new BuilderImpl();\n+    }\n+\n+    public interface Builder extends SdkPojo, SdkClientException.Builder {\n+        @Override\n+        Builder message(String message);\n+\n+        @Override\n+        Builder cause(Throwable cause);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0OTgzMQ=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTI2MTY0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoProfileCredentialsProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NDozOFrOH2u2pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowNzozMVrOH2vpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjgwNg==", "bodyText": "You could simplify this to\nSupplier<GetRoleCredentialsRequest> supplier = () -> request.toBuilder().accessToken(tokenProvider.resolveAccessToken()).build();\n\n(or even use the copy() method instead of toBuilder() and build() if you're feeling extra frisky).", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527152806", "createdAt": "2020-11-19T19:44:38Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProviderFactory;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileProperty;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoAccessTokenProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link ProfileCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * specified in either a {@link Profile} or environment variables.\n+ */\n+@SdkProtectedApi\n+public class SsoProfileCredentialsProviderFactory implements ProfileCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(Profile profile) {\n+        return create(profile, new SsoAccessTokenProvider(\n+            generateCachedTokenPath(profile.properties().get(ProfileProperty.SSO_START_URL), TOKEN_DIRECTORY)));\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(Profile profile,\n+                                         SsoAccessTokenProvider tokenProvider) {\n+        return new SsoProfileCredentialsProvider(profile, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when {@link #create(Profile)} or\n+     * {@link #create(Profile, SsoAccessTokenProvider)} is invoked. This wrapper is important because it ensures the parent\n+     * credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(Profile profile,\n+                                              SsoAccessTokenProvider provider) {\n+            String ssoAccountId = profile.properties().get(ProfileProperty.SSO_ACCOUNT_ID);\n+            String ssoRoleName = profile.properties().get(ProfileProperty.SSO_ROLE_NAME);\n+            String ssoRegion = profile.properties().get(ProfileProperty.SSO_REGION);\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NTc0OA==", "bodyText": "Sounds good, will do the change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527165748", "createdAt": "2020-11-19T20:07:31Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoProfileCredentialsProviderFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.services.sso.internal.SsoTokenFileUtils.generateCachedTokenPath;\n+import static software.amazon.awssdk.utils.UserHomeDirectoryUtils.userHomeDirectory;\n+\n+import java.nio.file.Paths;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.annotations.SdkTestInternalApi;\n+import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.ProfileCredentialsProviderFactory;\n+import software.amazon.awssdk.profiles.Profile;\n+import software.amazon.awssdk.profiles.ProfileProperty;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SsoAccessTokenProvider;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.utils.IoUtils;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+\n+/**\n+ * An implementation of {@link ProfileCredentialsProviderFactory} that allows users to get SSO role credentials using the startUrl\n+ * specified in either a {@link Profile} or environment variables.\n+ */\n+@SdkProtectedApi\n+public class SsoProfileCredentialsProviderFactory implements ProfileCredentialsProviderFactory {\n+\n+    private static final String TOKEN_DIRECTORY = Paths.get(userHomeDirectory(), \".aws\", \"sso\", \"cache\").toString();\n+\n+    /**\n+     * Default method to create the {@link SsoProfileCredentialsProvider} with a {@link SsoAccessTokenProvider}\n+     * object created with the start url from {@link Profile} or environment variables and the default token file directory.\n+     */\n+    public AwsCredentialsProvider create(Profile profile) {\n+        return create(profile, new SsoAccessTokenProvider(\n+            generateCachedTokenPath(profile.properties().get(ProfileProperty.SSO_START_URL), TOKEN_DIRECTORY)));\n+    }\n+\n+    /**\n+     * Alternative method to create the {@link SsoProfileCredentialsProvider} with a customized\n+     * {@link SsoAccessTokenProvider}. This method is only used for testing.\n+     */\n+    @SdkTestInternalApi\n+    public AwsCredentialsProvider create(Profile profile,\n+                                         SsoAccessTokenProvider tokenProvider) {\n+        return new SsoProfileCredentialsProvider(profile, tokenProvider);\n+    }\n+\n+    /**\n+     * A wrapper for a {@link SsoCredentialsProvider} that is returned by this factory when {@link #create(Profile)} or\n+     * {@link #create(Profile, SsoAccessTokenProvider)} is invoked. This wrapper is important because it ensures the parent\n+     * credentials provider is closed when the sso credentials provider is no longer needed.\n+     */\n+    private static final class SsoProfileCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+        private final SsoClient ssoClient;\n+        private final SsoCredentialsProvider credentialsProvider;\n+\n+        private SsoProfileCredentialsProvider(Profile profile,\n+                                              SsoAccessTokenProvider provider) {\n+            String ssoAccountId = profile.properties().get(ProfileProperty.SSO_ACCOUNT_ID);\n+            String ssoRoleName = profile.properties().get(ProfileProperty.SSO_ROLE_NAME);\n+            String ssoRegion = profile.properties().get(ProfileProperty.SSO_REGION);\n+\n+            this.ssoClient = SsoClient.builder()\n+                                      .credentialsProvider(AnonymousCredentialsProvider.create())\n+                                      .region(Region.of(ssoRegion))\n+                                      .build();\n+\n+            GetRoleCredentialsRequest request = GetRoleCredentialsRequest.builder()\n+                                                                         .accountId(ssoAccountId)\n+                                                                         .roleName(ssoRoleName)\n+                                                                         .build();\n+\n+            GetRoleCredentialsRequestSupplier supplier = new GetRoleCredentialsRequestSupplier(request,\n+                                                                                               provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjgwNg=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTI2OTA3OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo0NjozNVrOH2u7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowNzo1OVrOH2vqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1Mzk2Nw==", "bodyText": "It looks like the directory name is software.amazon.awssdk.services.sso instead of having a chain of parent directories: software/amazon/awssdk/services/sso. Is that just github being weird, or is that accurate?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527153967", "createdAt": "2020-11-19T19:46:35Z", "author": {"login": "millems"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NTk4Ng==", "bodyText": "It might be IntelliJ acting weird, I will recreate the directory to make it accurate.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527165986", "createdAt": "2020-11-19T20:07:59Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1Mzk2Nw=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTI5NTA5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1MzozMVrOH2vLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDoxMjoyNlrOH23FCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1ODAzOA==", "bodyText": "private?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527158038", "createdAt": "2020-11-19T19:53:31Z", "author": {"login": "zoewangg"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SessionCredentialsHolder;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. This credential provider maintains a {@link Supplier<GetRoleCredentialsRequest>} for a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * While creating the {@link GetRoleCredentialsRequest}, an access token is needed to be resolved from a token file.\n+ * In default, the token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown.\n+ * If the users want to change the behavior of this, please implement your own token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SessionCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    private SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = notNull(builder.ssoClient, \"SSO client must not be null.\");\n+        this.getRoleCredentialsRequestSupplier = builder.getRoleCredentialsRequestSupplier;\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        CachedSupplier.Builder<SessionCredentialsHolder> cacheBuilder = CachedSupplier.builder(this::updateSsoCredentials);\n+        if (builder.asyncCredentialUpdateEnabled) {\n+            cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+        }\n+\n+        this.credentialCache = cacheBuilder.build();\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SessionCredentialsHolder> updateSsoCredentials() {\n+        SessionCredentialsHolder credentials = getUpdatedCredentials(ssoClient);\n+        Instant acutalTokenExpiration = credentials.getSessionCredentialsExpiration();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    private SessionCredentialsHolder getUpdatedCredentials(SsoClient ssoClient) {\n+        GetRoleCredentialsRequest request = getRoleCredentialsRequestSupplier.get();\n+        notNull(request, \"GetRoleCredentialsRequest can't be null.\");\n+        RoleCredentials roleCredentials = ssoClient.getRoleCredentials(request).roleCredentials();\n+        AwsSessionCredentials sessionCredentials = AwsSessionCredentials.create(roleCredentials.accessKeyId(),\n+                                                                                roleCredentials.secretAccessKey(),\n+                                                                                roleCredentials.sessionToken());\n+        return new SessionCredentialsHolder(sessionCredentials, Instant.ofEpochMilli(roleCredentials.expiration()));\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }\n+\n+    /**\n+     * Get a builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public static BuilderImpl builder() {\n+        return new BuilderImpl();\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return credentialCache.get().getSessionCredentials();\n+    }\n+\n+    @Override\n+    public void close() {\n+        credentialCache.close();\n+    }\n+\n+    /**\n+     * A builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public interface Builder {\n+\n+        /**\n+         * Configure the {@link SsoClient} to use when calling SSO to update the session. This client should not be shut\n+         * down as long as this credentials provider is in use.\n+         */\n+        Builder ssoClient(SsoClient ssoclient);\n+\n+        /**\n+         * Configure whether the provider should fetch credentials asynchronously in the background. If this is true,\n+         * threads are less likely to block when credentials are loaded, but addtiional resources are used to maintian\n+         * the provider.\n+         *\n+         * <p>By default, this is disabled.</p>\n+         */\n+        Builder asyncCredentialUpdateEnabled(Boolean asyncCredentialUpdateEnabled);\n+\n+        /**\n+         * Configure the amount of time, relative to SSO session token expiration, that the cached credentials are considered\n+         * stale and should no longer be used. All threads will block until the value is updated.\n+         *\n+         * <p>By default, this is 1 minute.</p>\n+         */\n+        Builder staleTime(Duration staleTime);\n+\n+        /**\n+         * Configure the amount of time, relative to SSO session token expiration, that the cached credentials are considered\n+         * close to stale and should be updated. See {@link #asyncCredentialUpdateEnabled}.\n+         *\n+         * <p>By default, this is 5 minutes.</p>\n+         */\n+        Builder prefetchTime(Duration prefetchTime);\n+\n+        /**\n+         * Configure the {@link GetRoleCredentialsRequest} that should be periodically sent to the SSO service to update the\n+         * credentials.\n+         */\n+        Builder refreshRequest(GetRoleCredentialsRequest getRoleCredentialsRequest);\n+\n+        /**\n+         * Similar to {@link #refreshRequest(GetRoleCredentialsRequest)}, but takes a {@link Supplier} to supply the request to\n+         * SSO.\n+         */\n+        Builder refreshRequest(Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier);\n+\n+        /**\n+         * Create a {@link SsoCredentialsProvider} using the configuration applied to this builder.\n+         * @return\n+         */\n+        SsoCredentialsProvider build();\n+\n+    }\n+\n+    public static final class BuilderImpl implements Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI4NzU2MA==", "bodyText": "I guess it can be protected here, as the factory is actually calling the methods of the BuilderImpl.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527287560", "createdAt": "2020-11-20T00:12:26Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SessionCredentialsHolder;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. This credential provider maintains a {@link Supplier<GetRoleCredentialsRequest>} for a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * While creating the {@link GetRoleCredentialsRequest}, an access token is needed to be resolved from a token file.\n+ * In default, the token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown.\n+ * If the users want to change the behavior of this, please implement your own token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";\n+\n+    private final Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier;\n+\n+    private final SsoClient ssoClient;\n+    private final Duration staleTime;\n+    private final Duration prefetchTime;\n+\n+    private final CachedSupplier<SessionCredentialsHolder> credentialCache;\n+\n+    /**\n+     * @see #builder()\n+     */\n+    private SsoCredentialsProvider(BuilderImpl builder) {\n+        this.ssoClient = notNull(builder.ssoClient, \"SSO client must not be null.\");\n+        this.getRoleCredentialsRequestSupplier = builder.getRoleCredentialsRequestSupplier;\n+\n+        this.staleTime = Optional.ofNullable(builder.staleTime).orElse(DEFAULT_STALE_TIME);\n+        this.prefetchTime = Optional.ofNullable(builder.prefetchTime).orElse(DEFAULT_PREFETCH_TIME);\n+\n+        CachedSupplier.Builder<SessionCredentialsHolder> cacheBuilder = CachedSupplier.builder(this::updateSsoCredentials);\n+        if (builder.asyncCredentialUpdateEnabled) {\n+            cacheBuilder.prefetchStrategy(new NonBlocking(ASYNC_THREAD_NAME));\n+        }\n+\n+        this.credentialCache = cacheBuilder.build();\n+    }\n+\n+    /**\n+     * Update the expiring session SSO credentials by calling SSO. Invoked by {@link CachedSupplier} when the credentials\n+     * are close to expiring.\n+     */\n+    private RefreshResult<SessionCredentialsHolder> updateSsoCredentials() {\n+        SessionCredentialsHolder credentials = getUpdatedCredentials(ssoClient);\n+        Instant acutalTokenExpiration = credentials.getSessionCredentialsExpiration();\n+\n+        return RefreshResult.builder(credentials)\n+                            .staleTime(acutalTokenExpiration.minus(staleTime))\n+                            .prefetchTime(acutalTokenExpiration.minus(prefetchTime))\n+                            .build();\n+    }\n+\n+    private SessionCredentialsHolder getUpdatedCredentials(SsoClient ssoClient) {\n+        GetRoleCredentialsRequest request = getRoleCredentialsRequestSupplier.get();\n+        notNull(request, \"GetRoleCredentialsRequest can't be null.\");\n+        RoleCredentials roleCredentials = ssoClient.getRoleCredentials(request).roleCredentials();\n+        AwsSessionCredentials sessionCredentials = AwsSessionCredentials.create(roleCredentials.accessKeyId(),\n+                                                                                roleCredentials.secretAccessKey(),\n+                                                                                roleCredentials.sessionToken());\n+        return new SessionCredentialsHolder(sessionCredentials, Instant.ofEpochMilli(roleCredentials.expiration()));\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered stale and\n+     * should no longer be used. All threads will block until the value is updated.\n+     */\n+    public Duration staleTime() {\n+        return staleTime;\n+    }\n+\n+    /**\n+     * The amount of time, relative to session token expiration, that the cached credentials are considered close to stale\n+     * and should be updated.\n+     */\n+    public Duration prefetchTime() {\n+        return prefetchTime;\n+    }\n+\n+    /**\n+     * Get a builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public static BuilderImpl builder() {\n+        return new BuilderImpl();\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return credentialCache.get().getSessionCredentials();\n+    }\n+\n+    @Override\n+    public void close() {\n+        credentialCache.close();\n+    }\n+\n+    /**\n+     * A builder for creating a custom {@link SsoCredentialsProvider}.\n+     */\n+    public interface Builder {\n+\n+        /**\n+         * Configure the {@link SsoClient} to use when calling SSO to update the session. This client should not be shut\n+         * down as long as this credentials provider is in use.\n+         */\n+        Builder ssoClient(SsoClient ssoclient);\n+\n+        /**\n+         * Configure whether the provider should fetch credentials asynchronously in the background. If this is true,\n+         * threads are less likely to block when credentials are loaded, but addtiional resources are used to maintian\n+         * the provider.\n+         *\n+         * <p>By default, this is disabled.</p>\n+         */\n+        Builder asyncCredentialUpdateEnabled(Boolean asyncCredentialUpdateEnabled);\n+\n+        /**\n+         * Configure the amount of time, relative to SSO session token expiration, that the cached credentials are considered\n+         * stale and should no longer be used. All threads will block until the value is updated.\n+         *\n+         * <p>By default, this is 1 minute.</p>\n+         */\n+        Builder staleTime(Duration staleTime);\n+\n+        /**\n+         * Configure the amount of time, relative to SSO session token expiration, that the cached credentials are considered\n+         * close to stale and should be updated. See {@link #asyncCredentialUpdateEnabled}.\n+         *\n+         * <p>By default, this is 5 minutes.</p>\n+         */\n+        Builder prefetchTime(Duration prefetchTime);\n+\n+        /**\n+         * Configure the {@link GetRoleCredentialsRequest} that should be periodically sent to the SSO service to update the\n+         * credentials.\n+         */\n+        Builder refreshRequest(GetRoleCredentialsRequest getRoleCredentialsRequest);\n+\n+        /**\n+         * Similar to {@link #refreshRequest(GetRoleCredentialsRequest)}, but takes a {@link Supplier} to supply the request to\n+         * SSO.\n+         */\n+        Builder refreshRequest(Supplier<GetRoleCredentialsRequest> getRoleCredentialsRequestSupplier);\n+\n+        /**\n+         * Create a {@link SsoCredentialsProvider} using the configuration applied to this builder.\n+         * @return\n+         */\n+        SsoCredentialsProvider build();\n+\n+    }\n+\n+    public static final class BuilderImpl implements Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1ODAzOA=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTMwMzk5OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SessionCredentialsHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1NTo1MVrOH2vQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1NTo1MVrOH2vQog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1OTQ1OA==", "bodyText": "minor: can we change the getters to fluent style? getSessionCredentials -> sessionCredentials", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527159458", "createdAt": "2020-11-19T19:55:51Z", "author": {"login": "zoewangg"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/internal/SessionCredentialsHolder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.internal;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+\n+/**\n+ * Holder class used to atomically store a session with its expiration time.\n+ */\n+@SdkInternalApi\n+@ThreadSafe\n+public final class SessionCredentialsHolder {\n+\n+    private final AwsSessionCredentials sessionCredentials;\n+    private final Instant sessionCredentialsExpiration;\n+\n+    public SessionCredentialsHolder(AwsSessionCredentials credentials, Instant expiration) {\n+        this.sessionCredentials = credentials;\n+        this.sessionCredentialsExpiration = expiration;\n+    }\n+\n+    public AwsSessionCredentials getSessionCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ1Mjg0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/ExpiredTokenException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDozNzo0OFrOH2wr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDozNzo0OFrOH2wr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4Mjg0Ng==", "bodyText": "final?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527182846", "createdAt": "2020-11-19T20:37:48Z", "author": {"login": "zoewangg"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/ExpiredTokenException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.SdkField;\n+import software.amazon.awssdk.core.SdkPojo;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+\n+/**\n+ * <p>\n+ * The session token that was passed is expired or is not valid.\n+ * </p>\n+ */\n+@SdkPublicApi\n+public class ExpiredTokenException extends SdkClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ1NDY0OnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDozODoyN1rOH2wtIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDozODoyN1rOH2wtIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4MzEzOA==", "bodyText": "nit: missing <p>", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527183138", "createdAt": "2020-11-19T20:38:27Z", "author": {"login": "zoewangg"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SessionCredentialsHolder;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. This credential provider maintains a {@link Supplier<GetRoleCredentialsRequest>} for a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ3MjUzOnYy", "diffSide": "RIGHT", "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0NDowOFrOH2w4Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzo0MDo1NVrOH22a7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NjAxNA==", "bodyText": "Would it make sense to prefix it with sdk-? It'd be easier to filter all SDK threads in a thread dump.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527186014", "createdAt": "2020-11-19T20:44:08Z", "author": {"login": "zoewangg"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SessionCredentialsHolder;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. This credential provider maintains a {@link Supplier<GetRoleCredentialsRequest>} for a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * While creating the {@link GetRoleCredentialsRequest}, an access token is needed to be resolved from a token file.\n+ * In default, the token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown.\n+ * If the users want to change the behavior of this, please implement your own token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3Njc4Mw==", "bodyText": "Sure, good call", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2118#discussion_r527276783", "createdAt": "2020-11-19T23:40:55Z", "author": {"login": "Quanzzzz"}, "path": "services/sso/src/main/java/software.amazon.awssdk.services.sso/auth/SsoCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.sso.auth;\n+\n+import static software.amazon.awssdk.utils.Validate.notNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.services.sso.SsoClient;\n+import software.amazon.awssdk.services.sso.internal.SessionCredentialsHolder;\n+import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;\n+import software.amazon.awssdk.services.sso.model.RoleCredentials;\n+import software.amazon.awssdk.utils.SdkAutoCloseable;\n+import software.amazon.awssdk.utils.cache.CachedSupplier;\n+import software.amazon.awssdk.utils.cache.NonBlocking;\n+import software.amazon.awssdk.utils.cache.RefreshResult;\n+\n+/**\n+ * An implementation of {@link AwsCredentialsProvider} that is extended within this package to provide support for periodically\n+ * updating session credentials. This credential provider maintains a {@link Supplier<GetRoleCredentialsRequest>} for a\n+ * {@link SsoClient#getRoleCredentials(Consumer)} call to retrieve the credentials needed.\n+ *\n+ * While creating the {@link GetRoleCredentialsRequest}, an access token is needed to be resolved from a token file.\n+ * In default, the token is assumed unexpired, and if it's expired then an {@link ExpiredTokenException} will be thrown.\n+ * If the users want to change the behavior of this, please implement your own token resolving logic and override the\n+ * {@link Builder#refreshRequest).\n+ *\n+ * When credentials get close to expiration, this class will attempt to update them asynchronously. If the credentials\n+ * end up expiring, this class will block all calls to {@link #resolveCredentials()} until the credentials can be updated.\n+ */\n+@SdkPublicApi\n+public final class SsoCredentialsProvider implements AwsCredentialsProvider, SdkAutoCloseable {\n+\n+    private static final Duration DEFAULT_STALE_TIME = Duration.ofMinutes(1);\n+    private static final Duration DEFAULT_PREFETCH_TIME = Duration.ofMinutes(5);\n+\n+    private static final String ASYNC_THREAD_NAME = \"sso-credentials-provider\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NjAxNA=="}, "originalCommit": {"oid": "7fa7dba9ff1da04a48013721d69eeec158018e88"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}