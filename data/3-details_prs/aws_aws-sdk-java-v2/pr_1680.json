{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTk3MDAz", "number": 1680, "title": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondary\u2026", "bodyText": "\u2026Index, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs\nMotivation and Context\nSpring cleaning before final launch review. Relates to #35\nTesting\nExisting tests pass\nChecklist\n\n\n\n I have read the CONTRIBUTING document\n Local run of mvn install succeeds\n My code follows the code style of this project\n My change requires a change to the Javadoc documentation\n I have updated the Javadoc documentation accordingly\n I have read the README document\n I have added tests to cover my changes\n All new and existing tests passed\n A short description of the change has been added to the CHANGELOG\n My change is to implement 1.11 parity feature and I have updated LaunchChangelog\n\nLicense\n\n\n\n\n I confirm that this pull request can be released under the Apache 2 license", "createdAt": "2020-03-03T21:41:43Z", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680", "merged": true, "mergeCommit": {"oid": "b2b05d252b0a9ed544740996807aee37e3b681dc"}, "closed": true, "closedAt": "2020-03-04T22:10:44Z", "author": {"login": "bmaizels"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKKYUIABqjMwOTQyMTQzNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKdctmAH2gAyMzgzMTk3MDAzOjdkMTc0ZTVjNDA0NzE2NzdiOGViZGE3OTUwYTEwYmUwNTZiNDkyYjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08d2acd35171c633f1866a648324aae5cc05ea73", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/08d2acd35171c633f1866a648324aae5cc05ea73", "committedDate": "2020-03-03T21:39:02Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}, "afterCommit": {"oid": "a452c2d942bb8869fbae89bf6f561030c730d738", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a452c2d942bb8869fbae89bf6f561030c730d738", "committedDate": "2020-03-03T22:50:35Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a452c2d942bb8869fbae89bf6f561030c730d738", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/a452c2d942bb8869fbae89bf6f561030c730d738", "committedDate": "2020-03-03T22:50:35Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}, "afterCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c5ac0e182eb3a1d2416dab816f741757f64b9592", "committedDate": "2020-03-03T22:51:57Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDMyNzUz", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#pullrequestreview-368432753", "createdAt": "2020-03-04T00:55:15Z", "commit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NToxNVrOFxcB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowMToxMlrOFxzRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mzc2NQ==", "bodyText": "Under which circumstances would someone use this method, as opposed to the coalesce method? Is this worth mentioning in the class description, or here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#discussion_r387383765", "createdAt": "2020-03-04T00:55:15Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Expression.java", "diffHunk": "@@ -36,28 +56,49 @@ private Expression(String expression,\n         this.expressionNames = expressionNames;\n     }\n \n+    /**\n+     * Constructs a new expression builder.\n+     * @return a new expression builder.\n+     */\n     public static Builder builder() {\n         return new Builder();\n     }\n \n-    public static Expression coalesce(Expression condition1, Expression condition2, String joinToken) {\n-        if (condition1 == null) {\n-            return condition2;\n+    /**\n+     * Coalesces two complete expressions into a single expression. The expression string will be joined using the \n+     * supplied join token, and the ExpressionNames and ExpressionValues maps will be merged.\n+     * @param expression1 The first expression to coalesce\n+     * @param expression2 The second expression to coalesce\n+     * @param joinToken The join token to be used to join the expression strings (e.g.: 'AND', 'OR')\n+     * @return The coalesced expression\n+     * @throws IllegalArgumentException if a conflict occurs when merging ExpressionNames or ExpressionValues\n+     */\n+    public static Expression coalesce(Expression expression1, Expression expression2, String joinToken) {\n+        if (expression1 == null) {\n+            return expression2;\n         }\n \n-        if (condition2 == null) {\n-            return condition1;\n+        if (expression2 == null) {\n+            return expression1;\n         }\n \n         return Expression.builder()\n-                         .expression(coalesceExpressions(condition1.expression, condition2.expression, joinToken))\n-                         .expressionValues(coalesceValues(condition1.expressionValues(),\n-                                                          condition2.expressionValues()))\n-                         .expressionNames(coalesceNames(condition1.expressionNames(),\n-                                                        condition2.expressionNames()))\n+                         .expression(coalesceExpressions(expression1.expression, expression2.expression, joinToken))\n+                         .expressionValues(coalesceValues(expression1.expressionValues(),\n+                                                          expression2.expressionValues()))\n+                         .expressionNames(coalesceNames(expression1.expressionNames(),\n+                                                        expression2.expressionNames()))\n                          .build();\n     }\n \n+    /**\n+     * Coalesces two expression strings into a single expression string. The expression string will be joined using the\n+     * supplied join token.\n+     * @param expression1 The first expression string to coalesce\n+     * @param expression2 The second expression string to coalesce\n+     * @param joinToken The join token to be used to join the expression strings (e.g.: 'AND', 'OR)\n+     * @return The coalesced expression\n+     */\n     public static String coalesceExpressions(String expression1, String expression2, String joinToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MzU3OA==", "bodyText": "Typo: 'An' not 'In'", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#discussion_r387743578", "createdAt": "2020-03-04T15:31:20Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryConditional.java", "diffHunk": "@@ -15,443 +15,171 @@\n \n package software.amazon.awssdk.enhanced.dynamodb.model;\n \n-import static software.amazon.awssdk.enhanced.dynamodb.internal.AttributeValues.nullAttributeValue;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.isNullAttributeValue;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.function.Consumer;\n-import java.util.function.UnaryOperator;\n \n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.Key;\n import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n-import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n-\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.BeginsWithConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.BetweenConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.EqualToConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.SingleKeyItemConditional;\n+\n+/**\n+ * In interface for a literal conditional that can be used in an enhanced DynamoDB query. Contains convenient static", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NTM1Mw==", "bodyText": "Nit: Could we have a punctuation at the end of this sentence?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#discussion_r387745353", "createdAt": "2020-03-04T15:33:46Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryConditional.java", "diffHunk": "@@ -15,443 +15,171 @@\n \n package software.amazon.awssdk.enhanced.dynamodb.model;\n \n-import static software.amazon.awssdk.enhanced.dynamodb.internal.AttributeValues.nullAttributeValue;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.isNullAttributeValue;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.function.Consumer;\n-import java.util.function.UnaryOperator;\n \n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.Key;\n import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n-import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n-\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.BeginsWithConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.BetweenConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.EqualToConditional;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.conditional.SingleKeyItemConditional;\n+\n+/**\n+ * In interface for a literal conditional that can be used in an enhanced DynamoDB query. Contains convenient static\n+ * methods that can be used to construct the most common conditional statements. Query conditionals are not linked to\n+ * any specific table or schema and can be re-used in different contexts.\n+ * <p>\n+ * Example:\n+ * {@code\n+ * QueryConditional partitionValueGreaterThanTen = QueryConditional.greaterThan(k -> k.partitionValue(10));\n+ * }\n+ */\n @SdkPublicApi\n-public abstract class QueryConditional {\n-    private static final UnaryOperator<String> EXPRESSION_KEY_MAPPER =\n-        key -> \"#AMZN_MAPPED_\" + cleanAttributeName(key);\n-    private static final UnaryOperator<String> EXPRESSION_VALUE_KEY_MAPPER =\n-        key -> \":AMZN_MAPPED_\" + cleanAttributeName(key);\n-    private static final UnaryOperator<String> EXPRESSION_OTHER_VALUE_KEY_MAPPER =\n-        key -> \":AMZN_MAPPED_\" + cleanAttributeName(key) + \"2\";\n-\n-    public static QueryConditional equalTo(Key key) {\n+public interface QueryConditional {\n+    /**\n+     * Creates a {@link QueryConditional} that matches when the key of an index is equal to a specific value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjUxNA==", "bodyText": "I find it a bit confusing that Expression is used in QueryConditionals and condition expressions, but ExpressionParameters are only used in QueryConditionals. Can we name this class to reflect its scope (I know that it's localized to the conditional package)? 'Parameters' is a vague name too. If we were super literal we could even call it 'KeysAndValues' on the same model as 'KeysAndAttributes'.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#discussion_r387756514", "createdAt": "2020-03-04T15:49:45Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/conditional/ExpressionParameters.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.conditional;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+\n+@SdkInternalApi\n+class ExpressionParameters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2NDU3OQ==", "bodyText": "While the other conditionals are named after what they do, this name is more abstract. Do we expect other operators here in the future than greater than/lesser than? If not, there is the mathematical term Inequality that encompasses these operators. It might be too specific/obscure though!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#discussion_r387764579", "createdAt": "2020-03-04T16:01:12Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/conditional/SingleKeyItemConditional.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.conditional;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.AttributeValues.nullAttributeValue;\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.UnaryOperator;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.Expression;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.enhanced.dynamodb.model.QueryConditional;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+\n+@SdkInternalApi\n+public class SingleKeyItemConditional implements QueryConditional {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5ac0e182eb3a1d2416dab816f741757f64b9592", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/c5ac0e182eb3a1d2416dab816f741757f64b9592", "committedDate": "2020-03-03T22:51:57Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}, "afterCommit": {"oid": "2e32a343d8d7931a458bc817fae7b7c617fa3528", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/2e32a343d8d7931a458bc817fae7b7c617fa3528", "committedDate": "2020-03-04T17:46:40Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e32a343d8d7931a458bc817fae7b7c617fa3528", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/2e32a343d8d7931a458bc817fae7b7c617fa3528", "committedDate": "2020-03-04T17:46:40Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}, "afterCommit": {"oid": "3091c3688cad2cba3491c5283053e097a9503d64", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/3091c3688cad2cba3491c5283053e097a9503d64", "committedDate": "2020-03-04T18:30:22Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDIzNTUz", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1680#pullrequestreview-369023553", "createdAt": "2020-03-04T18:36:39Z", "commit": {"oid": "2e32a343d8d7931a458bc817fae7b7c617fa3528"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b563acb29362389ec55e9fdebbedf255dcd15b91", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/b563acb29362389ec55e9fdebbedf255dcd15b91", "committedDate": "2020-03-04T20:20:40Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3091c3688cad2cba3491c5283053e097a9503d64", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/3091c3688cad2cba3491c5283053e097a9503d64", "committedDate": "2020-03-04T18:30:22Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}, "afterCommit": {"oid": "b563acb29362389ec55e9fdebbedf255dcd15b91", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/b563acb29362389ec55e9fdebbedf255dcd15b91", "committedDate": "2020-03-04T20:20:40Z", "message": "dynamodb-enhanced: clean up QueryConditional, EnhancedGlobalSecondaryIndex, EnhancedLocalSecondaryIndex and Expression. Added missing javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d174e5c40471677b8ebda7950a10be056b492b9", "author": {"user": {"login": "bmaizels", "name": "Benjamin Maizels"}}, "url": "https://github.com/aws/aws-sdk-java-v2/commit/7d174e5c40471677b8ebda7950a10be056b492b9", "committedDate": "2020-03-04T21:03:56Z", "message": "Merge branch 'master' into bmaizels/dynamodb-enhanced-cleanup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2713, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}