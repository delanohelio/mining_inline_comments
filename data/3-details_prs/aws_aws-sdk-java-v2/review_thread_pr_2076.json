{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTA5NDAz", "number": 2076, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToxMjowNFrOEp8zvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToxMjowNFrOEp8zvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDIzMzU3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/models/RecordWithUpdateBehaviors.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToxMjowNFrOHb7vxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowODo1NFrOHb803A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjQ4Ng==", "bodyText": "I'm confused about the use of this. Would you actually use it for \"created date\" if it doesn't work for putItem (only for updateItem)? Wouldn't this be firstUpdatedDate, which seems kind of useless?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2076#discussion_r499052486", "createdAt": "2020-10-02T21:12:04Z", "author": {"login": "millems"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/models/RecordWithUpdateBehaviors.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.functionaltests.models;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_ALWAYS;\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_IF_NOT_EXISTS;\n+\n+@DynamoDbBean\n+public class RecordWithUpdateBehaviors {\n+    private String id;\n+    private Instant createdOn;\n+    private Instant lastUpdatedOn;\n+    private Long version;\n+\n+    @DynamoDbPartitionKey\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    @DynamoDbUpdateBehavior(WRITE_IF_NOT_EXISTS)\n+    public Instant getCreatedOn() {\n+        return createdOn;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78576238ea3469ddae74c57cf58fd6ce99701bed"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2OTQxNA==", "bodyText": "The use-case, as it was put to me, was to avoid branching logic and always do a uniform update. It also allows schema evolution so they can update the record and write a value with a new attribute that didn't exist in the schema before only if it hadn't been set before in the database. I imagine it's the same rationale that lead to DDB implementing if_not_exists in their update expressions at all, this is really just a 'plumbing it through' exercise.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2076#discussion_r499069414", "createdAt": "2020-10-02T22:06:16Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/models/RecordWithUpdateBehaviors.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.functionaltests.models;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_ALWAYS;\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_IF_NOT_EXISTS;\n+\n+@DynamoDbBean\n+public class RecordWithUpdateBehaviors {\n+    private String id;\n+    private Instant createdOn;\n+    private Instant lastUpdatedOn;\n+    private Long version;\n+\n+    @DynamoDbPartitionKey\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    @DynamoDbUpdateBehavior(WRITE_IF_NOT_EXISTS)\n+    public Instant getCreatedOn() {\n+        return createdOn;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjQ4Ng=="}, "originalCommit": {"oid": "78576238ea3469ddae74c57cf58fd6ce99701bed"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MDE3Mg==", "bodyText": "I think it's probably more useful at the request level than the schema level, but that's a different feature request, I suppose.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2076#discussion_r499070172", "createdAt": "2020-10-02T22:08:54Z", "author": {"login": "millems"}, "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/models/RecordWithUpdateBehaviors.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.functionaltests.models;\n+\n+import java.time.Instant;\n+import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_ALWAYS;\n+import static software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior.WRITE_IF_NOT_EXISTS;\n+\n+@DynamoDbBean\n+public class RecordWithUpdateBehaviors {\n+    private String id;\n+    private Instant createdOn;\n+    private Instant lastUpdatedOn;\n+    private Long version;\n+\n+    @DynamoDbPartitionKey\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    @DynamoDbUpdateBehavior(WRITE_IF_NOT_EXISTS)\n+    public Instant getCreatedOn() {\n+        return createdOn;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjQ4Ng=="}, "originalCommit": {"oid": "78576238ea3469ddae74c57cf58fd6ce99701bed"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4065, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}