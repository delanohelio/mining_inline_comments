{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDM4NjYw", "number": 2097, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1ODo1M1rOEupmAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTowODo1NVrOEupxaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzUxNDI1OnYy", "diffSide": "RIGHT", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/client/specs/JsonProtocolSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1ODo1M1rOHjMgRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0MTo0NlrOHjNqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NzA3OQ==", "bodyText": "YES! Thank you for refactoring these", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2097#discussion_r506667079", "createdAt": "2020-10-16T18:58:53Z", "author": {"login": "dagnir"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/client/specs/JsonProtocolSpec.java", "diffHunk": "@@ -235,36 +225,23 @@ public CodeBlock asyncExecutionHandler(IntermediateModel intermediateModel, Oper\n                                                                               : pojoResponseType;\n         TypeName executeFutureValueType = executeFutureValueType(opModel, poetExtensions);\n \n-        builder.add(\"\\n\\n$T<$T> executeFuture = clientHandler.execute(new $T<$T, $T>()\\n\" +\n-                    \".withOperationName(\\\"$N\\\")\\n\" +\n-                    \".withMarshaller($L)\\n\" +\n-                    \"$L\" +\n-                    \"$L\" +\n-                    \".withResponseHandler($L)\\n\" +\n-                    \".withErrorResponseHandler(errorResponseHandler)\\n\" +\n-                    \".withMetricCollector(apiCallMetricCollector)\\n\" +\n-                    hostPrefixExpression(opModel) +\n-                    discoveredEndpoint(opModel) +\n-                    asyncRequestBody +\n-                    \".withInput($L)$L);\",\n-                    CompletableFuture.class,\n-                    executeFutureValueType,\n-                    ClientExecutionParams.class,\n-                    requestType,\n-                    responseType,\n-                    opModel.getOperationName(),\n-                    asyncMarshaller(model, opModel, marshaller, protocolFactory),\n-                    opModel.hasEventStreamInput() ? CodeBlock.builder()\n-                                                             .add(\".withAsyncRequestBody($T.fromPublisher(adapted))\",\n-                                                                  AsyncRequestBody.class)\n-                                                             .build()\n-                                                             .toString()\n-                                                  : \"\",\n-                    opModel.hasEventStreamInput() && opModel.hasEventStreamOutput() ? CodeBlock\n-                        .builder().add(\".withFullDuplex(true)\").build() : \"\",\n-                    opModel.hasEventStreamOutput() && !isRestJson ? \"voidResponseHandler\" : \"responseHandler\",\n-                    opModel.getInput().getVariableName(),\n-                    asyncResponseTransformerVariable(isStreaming, isRestJson, opModel));\n+        builder.add(\"\\n\\n$T<$T> executeFuture = clientHandler.execute(new $T<$T, $T>()\\n\",\n+                    CompletableFuture.class, executeFutureValueType, ClientExecutionParams.class, requestType, responseType)\n+               .add(\".withOperationName(\\\"$N\\\")\\n\", opModel.getOperationName())\n+               .add(\".withMarshaller($L)\\n\", asyncMarshaller(model, opModel, marshaller, protocolFactory))\n+               .add(asyncRequestBody(opModel))\n+               .add(fullDuplex(opModel))\n+               .add(\".withResponseHandler($L)\\n\", responseHandlerName(opModel, isRestJson))\n+               .add(\".withErrorResponseHandler(errorResponseHandler)\\n\")\n+               .add(\".withMetricCollector(apiCallMetricCollector)\\n\")\n+               .add(hostPrefixExpression(opModel))\n+               .add(discoveredEndpoint(opModel))\n+               .add(asyncRequestBody)\n+               .add(HttpChecksumRequiredTrait.putHttpChecksumAttribute(opModel))\n+               .add(\".withInput($L)$L);\",\n+                    opModel.getInput().getVariableName(), asyncResponseTransformerVariable(isStreaming, isRestJson, opModel));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f010be60c292149bb0586e8d54378895c7ed8f03"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NTk4OA==", "bodyText": "It killed me to add one more line to it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2097#discussion_r506685988", "createdAt": "2020-10-16T19:41:46Z", "author": {"login": "millems"}, "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/client/specs/JsonProtocolSpec.java", "diffHunk": "@@ -235,36 +225,23 @@ public CodeBlock asyncExecutionHandler(IntermediateModel intermediateModel, Oper\n                                                                               : pojoResponseType;\n         TypeName executeFutureValueType = executeFutureValueType(opModel, poetExtensions);\n \n-        builder.add(\"\\n\\n$T<$T> executeFuture = clientHandler.execute(new $T<$T, $T>()\\n\" +\n-                    \".withOperationName(\\\"$N\\\")\\n\" +\n-                    \".withMarshaller($L)\\n\" +\n-                    \"$L\" +\n-                    \"$L\" +\n-                    \".withResponseHandler($L)\\n\" +\n-                    \".withErrorResponseHandler(errorResponseHandler)\\n\" +\n-                    \".withMetricCollector(apiCallMetricCollector)\\n\" +\n-                    hostPrefixExpression(opModel) +\n-                    discoveredEndpoint(opModel) +\n-                    asyncRequestBody +\n-                    \".withInput($L)$L);\",\n-                    CompletableFuture.class,\n-                    executeFutureValueType,\n-                    ClientExecutionParams.class,\n-                    requestType,\n-                    responseType,\n-                    opModel.getOperationName(),\n-                    asyncMarshaller(model, opModel, marshaller, protocolFactory),\n-                    opModel.hasEventStreamInput() ? CodeBlock.builder()\n-                                                             .add(\".withAsyncRequestBody($T.fromPublisher(adapted))\",\n-                                                                  AsyncRequestBody.class)\n-                                                             .build()\n-                                                             .toString()\n-                                                  : \"\",\n-                    opModel.hasEventStreamInput() && opModel.hasEventStreamOutput() ? CodeBlock\n-                        .builder().add(\".withFullDuplex(true)\").build() : \"\",\n-                    opModel.hasEventStreamOutput() && !isRestJson ? \"voidResponseHandler\" : \"responseHandler\",\n-                    opModel.getInput().getVariableName(),\n-                    asyncResponseTransformerVariable(isStreaming, isRestJson, opModel));\n+        builder.add(\"\\n\\n$T<$T> executeFuture = clientHandler.execute(new $T<$T, $T>()\\n\",\n+                    CompletableFuture.class, executeFutureValueType, ClientExecutionParams.class, requestType, responseType)\n+               .add(\".withOperationName(\\\"$N\\\")\\n\", opModel.getOperationName())\n+               .add(\".withMarshaller($L)\\n\", asyncMarshaller(model, opModel, marshaller, protocolFactory))\n+               .add(asyncRequestBody(opModel))\n+               .add(fullDuplex(opModel))\n+               .add(\".withResponseHandler($L)\\n\", responseHandlerName(opModel, isRestJson))\n+               .add(\".withErrorResponseHandler(errorResponseHandler)\\n\")\n+               .add(\".withMetricCollector(apiCallMetricCollector)\\n\")\n+               .add(hostPrefixExpression(opModel))\n+               .add(discoveredEndpoint(opModel))\n+               .add(asyncRequestBody)\n+               .add(HttpChecksumRequiredTrait.putHttpChecksumAttribute(opModel))\n+               .add(\".withInput($L)$L);\",\n+                    opModel.getInput().getVariableName(), asyncResponseTransformerVariable(isStreaming, isRestJson, opModel));\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NzA3OQ=="}, "originalCommit": {"oid": "f010be60c292149bb0586e8d54378895c7ed8f03"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzU0MzQ0OnYy", "diffSide": "RIGHT", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/HttpChecksumRequiredTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTowODo1NVrOHjMykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0Mzo0MVrOHjPQGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3MTc2Mg==", "bodyText": "Can we include a test for the case where an async content is provided?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2097#discussion_r506671762", "createdAt": "2020-10-16T19:08:55Z", "author": {"login": "dagnir"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/HttpChecksumRequiredTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+\n+import io.reactivex.Flowable;\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.http.ExecutableHttpRequest;\n+import software.amazon.awssdk.http.HttpExecuteRequest;\n+import software.amazon.awssdk.http.HttpExecuteResponse;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.http.SdkHttpRequest;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.http.async.AsyncExecuteRequest;\n+import software.amazon.awssdk.http.async.SdkAsyncHttpClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonClient;\n+import software.amazon.awssdk.services.protocolrestxml.ProtocolRestXmlAsyncClient;\n+import software.amazon.awssdk.services.protocolrestxml.ProtocolRestXmlClient;\n+\n+/**\n+ * Verify that the \"httpChecksumRequired\" C2J trait results in a valid MD5 checksum of the payload being included in the HTTP\n+ * request.\n+ */\n+public class HttpChecksumRequiredTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f010be60c292149bb0586e8d54378895c7ed8f03"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMjA4OQ==", "bodyText": "Fixed!", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2097#discussion_r506712089", "createdAt": "2020-10-16T20:43:41Z", "author": {"login": "millems"}, "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/HttpChecksumRequiredTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+\n+import io.reactivex.Flowable;\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.http.ExecutableHttpRequest;\n+import software.amazon.awssdk.http.HttpExecuteRequest;\n+import software.amazon.awssdk.http.HttpExecuteResponse;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.http.SdkHttpRequest;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+import software.amazon.awssdk.http.async.AsyncExecuteRequest;\n+import software.amazon.awssdk.http.async.SdkAsyncHttpClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonAsyncClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonClient;\n+import software.amazon.awssdk.services.protocolrestxml.ProtocolRestXmlAsyncClient;\n+import software.amazon.awssdk.services.protocolrestxml.ProtocolRestXmlClient;\n+\n+/**\n+ * Verify that the \"httpChecksumRequired\" C2J trait results in a valid MD5 checksum of the payload being included in the HTTP\n+ * request.\n+ */\n+public class HttpChecksumRequiredTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3MTc2Mg=="}, "originalCommit": {"oid": "f010be60c292149bb0586e8d54378895c7ed8f03"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3911, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}