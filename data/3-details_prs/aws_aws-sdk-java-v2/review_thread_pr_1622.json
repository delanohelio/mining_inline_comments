{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzU4NzQ2", "number": 1622, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODoyMDoxNlrODbrCZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1MzoyOVrODcDoxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzQzMjcwOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODoyMDoxNlrOFjSryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToyNjowN1rOFjYDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA==", "bodyText": "RuntimeException might not be the best exception to be wrapped with. The reason I didn't use IOException is because I figured not all exceptions thrown on connection are retryable, but is that true?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372550600", "createdAt": "2020-01-29T18:20:16Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Nzg2Mw==", "bodyText": "Wouldn't we want IOExceptions to stay IOExceptions? Any reason we need to re-wrap here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372557863", "createdAt": "2020-01-29T18:34:16Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2NTk5OA==", "bodyText": "The reason I re-wrap it here is to provide more descriptive message on the exception. Currently, it's not very clear why the request fails.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372565998", "createdAt": "2020-01-29T18:50:34Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MDQyMQ==", "bodyText": "Wouldn't this make currently-retried exceptions not be retried? Should we make it an IOException if the wrapped is an IOException?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372580421", "createdAt": "2020-01-29T19:18:45Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NjIzNQ==", "bodyText": "I thought our default retry policy would check if the root cause of the exception is assignable from IOException, but turns out it would only check one level down.\n\n  \n    \n      aws-sdk-java-v2/core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/RetryOnExceptionsCondition.java\n    \n    \n        Lines 59 to 62\n      in\n      138def2\n    \n    \n    \n    \n\n        \n          \n           Predicate<Class<? extends Exception>> hasRetrableCause = \n        \n\n        \n          \n               ex -> exception.getCause() != null && ex.isAssignableFrom(exception.getCause().getClass()); \n        \n\n        \n          \n            \n        \n\n        \n          \n           return exceptionsToRetryOn.stream().anyMatch(isRetryableException.or(hasRetrableCause)); \n        \n    \n  \n\n\nI'll make it an IOException if the wrapped is an IOException", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372586235", "createdAt": "2020-01-29T19:30:16Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5ODEzMQ==", "bodyText": "Or we could update the retry policy to check down the entire chain? That would probably be better.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372598131", "createdAt": "2020-01-29T19:54:35Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzODQ4MQ==", "bodyText": "+1. I'll create a backlog item for it. I think it'd still be nice to wrap IOException with an IOException here to make it clear this is a transient retryable I/O related error.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372638481", "createdAt": "2020-01-29T21:26:07Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MDYwMA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzQ2NDgyOnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/HandlerRemovingChannelPool.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODozMDowM1rOFjS_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToyMzo0MlrOFjX-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1NTcyOQ==", "bodyText": "Do we still need the IN_USE checks in the handler if we are removing it?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372555729", "createdAt": "2020-01-29T18:30:03Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/HandlerRemovingChannelPool.java", "diffHunk": "@@ -83,7 +83,8 @@ private void removePerRequestHandlers(Channel channel) {\n                            FlushOnReadHandler.class,\n                            ResponseHandler.class,\n                            ReadTimeoutHandler.class,\n-                           WriteTimeoutHandler.class);\n+                           WriteTimeoutHandler.class,\n+                           UnusedChannelExceptionHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MTQ0Mg==", "bodyText": "Hmm, good point. I'll change it to only add it once when the channel is created and not removing it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372561442", "createdAt": "2020-01-29T18:41:40Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/HandlerRemovingChannelPool.java", "diffHunk": "@@ -83,7 +83,8 @@ private void removePerRequestHandlers(Channel channel) {\n                            FlushOnReadHandler.class,\n                            ResponseHandler.class,\n                            ReadTimeoutHandler.class,\n-                           WriteTimeoutHandler.class);\n+                           WriteTimeoutHandler.class,\n+                           UnusedChannelExceptionHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1NTcyOQ=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzNzQyNQ==", "bodyText": "Reverted this change. Now we only attach UnusedChannelExceptionHandler to h1 channels once they are created", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372637425", "createdAt": "2020-01-29T21:23:42Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/HandlerRemovingChannelPool.java", "diffHunk": "@@ -83,7 +83,8 @@ private void removePerRequestHandlers(Channel channel) {\n                            FlushOnReadHandler.class,\n                            ResponseHandler.class,\n                            ReadTimeoutHandler.class,\n-                           WriteTimeoutHandler.class);\n+                           WriteTimeoutHandler.class,\n+                           UnusedChannelExceptionHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1NTcyOQ=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzQ3MjE5OnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODozMjoyOVrOFjTEkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToyMToyNlrOFjX6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Njk0NA==", "bodyText": "This seems super fragile. Can we just have a handler at the end of every pipeline that closes on exception?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372556944", "createdAt": "2020-01-29T18:32:29Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);\n+\n+            // Deliver the exception only if the channel knows to handle the exception\n+            if (ch.pipeline().get(ResponseHandler.class) != null) {\n+                log.debug(() -> \"Delivering exception to child channel \" + ch + ioException);\n+                ch.pipeline().fireExceptionCaught(ioException);\n+            } else {\n+                log.debug(() -> \"Closing child channel \" + ch + ioException);\n+                ch.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MTYzNw==", "bodyText": "The connection could get closed before any handler is attached to stream channels and there would be nothing catching the exception. I found out this issue in my testing where I set a very low pingPeriod.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372561637", "createdAt": "2020-01-29T18:42:01Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);\n+\n+            // Deliver the exception only if the channel knows to handle the exception\n+            if (ch.pipeline().get(ResponseHandler.class) != null) {\n+                log.debug(() -> \"Delivering exception to child channel \" + ch + ioException);\n+                ch.pipeline().fireExceptionCaught(ioException);\n+            } else {\n+                log.debug(() -> \"Closing child channel \" + ch + ioException);\n+                ch.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Njk0NA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjEwMA==", "bodyText": "Can we have a handler attached to the end of every channel as soon as it is created, before it is even connected, that calls close() when an exception is fired on the channel, assuming nothing else closed the channel already?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372582100", "createdAt": "2020-01-29T19:22:12Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);\n+\n+            // Deliver the exception only if the channel knows to handle the exception\n+            if (ch.pipeline().get(ResponseHandler.class) != null) {\n+                log.debug(() -> \"Delivering exception to child channel \" + ch + ioException);\n+                ch.pipeline().fireExceptionCaught(ioException);\n+            } else {\n+                log.debug(() -> \"Closing child channel \" + ch + ioException);\n+                ch.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Njk0NA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzNjMyNQ==", "bodyText": "Updated to attach UnusedChannelExceptionHandler to the stream channels once they are created and that should take care of it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372636325", "createdAt": "2020-01-29T21:21:26Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +185,19 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> {\n+            RuntimeException ioException = new RuntimeException(\"An exception occurred on the connection \", t);\n+\n+            // Deliver the exception only if the channel knows to handle the exception\n+            if (ch.pipeline().get(ResponseHandler.class) != null) {\n+                log.debug(() -> \"Delivering exception to child channel \" + ch + ioException);\n+                ch.pipeline().fireExceptionCaught(ioException);\n+            } else {\n+                log.debug(() -> \"Closing child channel \" + ch + ioException);\n+                ch.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Njk0NA=="}, "originalCommit": {"oid": "ab03e4ae7276a66d9eec88c62abffac83d289653"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzk4MjU1OnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/ChannelPipelineInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToyNzozOFrOFjYFpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMjoxNFrOFjYN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzOTE0MA==", "bodyText": "What happens when an exception is fired on a parent H2 channel after this change?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372639140", "createdAt": "2020-01-29T21:27:38Z", "author": {"login": "millems"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/ChannelPipelineInitializer.java", "diffHunk": "@@ -109,7 +109,14 @@ public void channelCreated(Channel ch) {\n         }\n \n         pipeline.addLast(FutureCancelHandler.getInstance());\n-        pipeline.addLast(UnusedChannelExceptionHandler.getInstance());\n+\n+        // Only add it for h1 channel because it does not apply to\n+        // h2 connection channel. It will be attached\n+        // to stream channels when they are created.\n+        if (protocol == Protocol.HTTP1_1) {\n+            pipeline.addLast(UnusedChannelExceptionHandler.getInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MTIzOA==", "bodyText": "ReleaseOnExceptionHandler will take care of it.\n\n  \n    \n      aws-sdk-java-v2/http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/Http2MultiplexedChannelPool.java\n    \n    \n        Lines 380 to 396\n      in\n      138def2\n    \n    \n    \n    \n\n        \n          \n           private static final class ReleaseOnExceptionHandler extends ChannelDuplexHandler { \n        \n\n        \n          \n               private static final ReleaseOnExceptionHandler INSTANCE = new ReleaseOnExceptionHandler(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public void channelInactive(ChannelHandlerContext ctx) { \n        \n\n        \n          \n                   closeAndReleaseParent(ctx, new ClosedChannelException()); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { \n        \n\n        \n          \n                   closeAndReleaseParent(ctx, cause); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               private void closeAndReleaseParent(ChannelHandlerContext ctx, Throwable cause) { \n        \n\n        \n          \n                   Http2MultiplexedChannelPool pool = ctx.channel().attr(ChannelAttributeKey.HTTP2_MULTIPLEXED_CHANNEL_POOL).get(); \n        \n\n        \n          \n                   pool.closeAndReleaseParent(ctx.channel(), cause); \n        \n\n        \n          \n               }", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r372641238", "createdAt": "2020-01-29T21:32:14Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/ChannelPipelineInitializer.java", "diffHunk": "@@ -109,7 +109,14 @@ public void channelCreated(Channel ch) {\n         }\n \n         pipeline.addLast(FutureCancelHandler.getInstance());\n-        pipeline.addLast(UnusedChannelExceptionHandler.getInstance());\n+\n+        // Only add it for h1 channel because it does not apply to\n+        // h2 connection channel. It will be attached\n+        // to stream channels when they are created.\n+        if (protocol == Protocol.HTTP1_1) {\n+            pipeline.addLast(UnusedChannelExceptionHandler.getInstance());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzOTE0MA=="}, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2MDc3OnYy", "diffSide": "RIGHT", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1MjozNVrOFj5i7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0ODoyNlrOFj7BWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NzMwOQ==", "bodyText": "minor: instanceof here is more concise", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r373187309", "createdAt": "2020-01-30T20:52:35Z", "author": {"login": "dagnir"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +186,16 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(decorateConnectionException(t)));\n+    }\n+\n+    private Throwable decorateConnectionException(Throwable t) {\n+        String message = \"An error occurred on the connection: \" + t.getMessage();\n+        if (IOException.class.isAssignableFrom(t.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTQ4MQ==", "bodyText": "Fixed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r373211481", "createdAt": "2020-01-30T21:48:26Z", "author": {"login": "zoewangg"}, "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -184,7 +186,16 @@ void closeChildChannels() {\n      * Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.\n      */\n     void closeChildChannels(Throwable t) {\n-        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(t));\n+        closeAndExecuteOnChildChannels(ch -> ch.pipeline().fireExceptionCaught(decorateConnectionException(t)));\n+    }\n+\n+    private Throwable decorateConnectionException(Throwable t) {\n+        String message = \"An error occurred on the connection: \" + t.getMessage();\n+        if (IOException.class.isAssignableFrom(t.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NzMwOQ=="}, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2MzA4OnYy", "diffSide": "RIGHT", "path": ".changes/next-release/bugfix-NettyNIOHTTPClient-dba3e80.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1MzoyOVrOFj5kbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0ODozMVrOFj7Bgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NzY5NA==", "bodyText": "nit: space in \"connection.This\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r373187694", "createdAt": "2020-01-30T20:53:29Z", "author": {"login": "dagnir"}, "path": ".changes/next-release/bugfix-NettyNIOHTTPClient-dba3e80.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"category\": \"Netty NIO HTTP Client\", \n+    \"type\": \"bugfix\", \n+    \"description\": \"Deliver exceptions to stream channels correctly if there's an exception thrown on connection.This also fixes a bug where publisher signals onComplete if the stream is closed as a result of outbound GOAWAY.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTUyMw==", "bodyText": "Fixed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1622#discussion_r373211523", "createdAt": "2020-01-30T21:48:31Z", "author": {"login": "zoewangg"}, "path": ".changes/next-release/bugfix-NettyNIOHTTPClient-dba3e80.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"category\": \"Netty NIO HTTP Client\", \n+    \"type\": \"bugfix\", \n+    \"description\": \"Deliver exceptions to stream channels correctly if there's an exception thrown on connection.This also fixes a bug where publisher signals onComplete if the stream is closed as a result of outbound GOAWAY.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NzY5NA=="}, "originalCommit": {"oid": "3bfe6ae35ad04070bdcab5961d6e29a8c16434cd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4187, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}