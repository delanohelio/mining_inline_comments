{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjI5MjAz", "number": 1586, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo0Mzo0NlrODXREyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxNjozNlrODXSM6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzIzNTk0OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo0Mzo0N1rOFcfoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToyMDozNFrOFcgXkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyMjY3Mw==", "bodyText": "To be safe, I think we should use flip() here in case the limits of the buffers are > the readable bytes. Alternatively, we could use remaining() instead of limit() to calculate the size.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365422673", "createdAt": "2020-01-10T20:43:47Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.async;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.reactivestreams.Publisher;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.internal.async.EnvelopeWrappedSdkPublisher;\n+\n+/**\n+ * Common implementations of {@link SdkPublisher} that are provided for convenience when building asynchronous\n+ * interceptors to be used with specific clients.\n+ */\n+@SdkProtectedApi\n+public final class SdkPublishers {\n+    private SdkPublishers() {\n+    }\n+\n+    /**\n+     * Constructs an {@link SdkPublisher} that wraps a {@link ByteBuffer} publisher and inserts additional content\n+     * that wraps the published content like an envelope. This can be used when you want to transform the content of\n+     * an asynchronous SDK response by putting it in an envelope.\n+     * @param publisher The underlying publisher to wrap the content of.\n+     * @param envelopePrefix A string representing the content to be inserted as the head of the containing envelope.\n+     * @param envelopeSuffix A string representing the content to be inserted as the tail of containing envelope.\n+     * @return An {@link SdkPublisher} that wraps the provided publisher.\n+     */\n+    public static SdkPublisher<ByteBuffer> envelopeWrappedPublisher(Publisher<ByteBuffer> publisher,\n+                                                                    String envelopePrefix,\n+                                                                    String envelopeSuffix) {\n+        return EnvelopeWrappedSdkPublisher.of(publisher,\n+                                              wrap(envelopePrefix),\n+                                              wrap(envelopeSuffix),\n+                                              SdkPublishers::concat);\n+    }\n+\n+    private static ByteBuffer wrap(String s) {\n+        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    private static ByteBuffer concat(ByteBuffer b1, ByteBuffer b2) {\n+        ByteBuffer result = ByteBuffer.allocate(b1.limit() + b2.limit());\n+        result.put(b1);\n+        result.put(b2);\n+        result.rewind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMTcyNg==", "bodyText": "If the input buffers are not already rewound then I think we'd only want to copy the remaining bytes, so I favor just using .remaining() instead. Do you agree?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365431726", "createdAt": "2020-01-10T21:11:23Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.async;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.reactivestreams.Publisher;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.internal.async.EnvelopeWrappedSdkPublisher;\n+\n+/**\n+ * Common implementations of {@link SdkPublisher} that are provided for convenience when building asynchronous\n+ * interceptors to be used with specific clients.\n+ */\n+@SdkProtectedApi\n+public final class SdkPublishers {\n+    private SdkPublishers() {\n+    }\n+\n+    /**\n+     * Constructs an {@link SdkPublisher} that wraps a {@link ByteBuffer} publisher and inserts additional content\n+     * that wraps the published content like an envelope. This can be used when you want to transform the content of\n+     * an asynchronous SDK response by putting it in an envelope.\n+     * @param publisher The underlying publisher to wrap the content of.\n+     * @param envelopePrefix A string representing the content to be inserted as the head of the containing envelope.\n+     * @param envelopeSuffix A string representing the content to be inserted as the tail of containing envelope.\n+     * @return An {@link SdkPublisher} that wraps the provided publisher.\n+     */\n+    public static SdkPublisher<ByteBuffer> envelopeWrappedPublisher(Publisher<ByteBuffer> publisher,\n+                                                                    String envelopePrefix,\n+                                                                    String envelopeSuffix) {\n+        return EnvelopeWrappedSdkPublisher.of(publisher,\n+                                              wrap(envelopePrefix),\n+                                              wrap(envelopeSuffix),\n+                                              SdkPublishers::concat);\n+    }\n+\n+    private static ByteBuffer wrap(String s) {\n+        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    private static ByteBuffer concat(ByteBuffer b1, ByteBuffer b2) {\n+        ByteBuffer result = ByteBuffer.allocate(b1.limit() + b2.limit());\n+        result.put(b1);\n+        result.put(b2);\n+        result.rewind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyMjY3Mw=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzNDc2OQ==", "bodyText": "Yeah I think either way works fine.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365434769", "createdAt": "2020-01-10T21:20:34Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.async;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.reactivestreams.Publisher;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.internal.async.EnvelopeWrappedSdkPublisher;\n+\n+/**\n+ * Common implementations of {@link SdkPublisher} that are provided for convenience when building asynchronous\n+ * interceptors to be used with specific clients.\n+ */\n+@SdkProtectedApi\n+public final class SdkPublishers {\n+    private SdkPublishers() {\n+    }\n+\n+    /**\n+     * Constructs an {@link SdkPublisher} that wraps a {@link ByteBuffer} publisher and inserts additional content\n+     * that wraps the published content like an envelope. This can be used when you want to transform the content of\n+     * an asynchronous SDK response by putting it in an envelope.\n+     * @param publisher The underlying publisher to wrap the content of.\n+     * @param envelopePrefix A string representing the content to be inserted as the head of the containing envelope.\n+     * @param envelopeSuffix A string representing the content to be inserted as the tail of containing envelope.\n+     * @return An {@link SdkPublisher} that wraps the provided publisher.\n+     */\n+    public static SdkPublisher<ByteBuffer> envelopeWrappedPublisher(Publisher<ByteBuffer> publisher,\n+                                                                    String envelopePrefix,\n+                                                                    String envelopeSuffix) {\n+        return EnvelopeWrappedSdkPublisher.of(publisher,\n+                                              wrap(envelopePrefix),\n+                                              wrap(envelopeSuffix),\n+                                              SdkPublishers::concat);\n+    }\n+\n+    private static ByteBuffer wrap(String s) {\n+        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    private static ByteBuffer concat(ByteBuffer b1, ByteBuffer b2) {\n+        ByteBuffer result = ByteBuffer.allocate(b1.limit() + b2.limit());\n+        result.put(b1);\n+        result.put(b2);\n+        result.rewind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyMjY3Mw=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI0NDE4OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo0Nzo0NlrOFcfteA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxMjowMFrOFcgMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyMzk5Mg==", "bodyText": "nit: \"concatinate\"", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365423992", "createdAt": "2020-01-10T20:47:46Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMTkzNQ==", "bodyText": "Will fix the spelling.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365431935", "createdAt": "2020-01-10T21:12:00Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyMzk5Mg=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI1MTIwOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1MTowMFrOFcfx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxMjoyNFrOFcgNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTEyMw==", "bodyText": "The spec requires Publishers to externally synchronize calls to the Subscriber's methods, so we shouldn't need these to be atomics", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365425123", "createdAt": "2020-01-10T20:51:00Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjA2NA==", "bodyText": "Great, I'll tear that out then.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365432064", "createdAt": "2020-01-10T21:12:24Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTEyMw=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI2Mjg1OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1Njo0MFrOFcf5Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxMjo1OVrOFcgNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNjk2Mg==", "bodyText": "Technically we can just ignore any further signals after onComplete/onError, so tracking something like an isDone variable might be easier", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365426962", "createdAt": "2020-01-10T20:56:40Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+\n+        private ContentWrappedSubscriber(Subscriber<? super T> wrappedSubscriber) {\n+            this.wrappedSubscriber = wrappedSubscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            wrappedSubscriber.onSubscribe(subscription);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            if (contentPrefix != null && prefixApplied.compareAndSet(false, true)) {\n+                wrappedSubscriber.onNext(mergeContentFunction.apply(contentPrefix, t));\n+            } else {\n+                wrappedSubscriber.onNext(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            wrappedSubscriber.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            try {\n+                // In the event onComplete() is called multiple times, only transmit the envelope once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjI2Mw==", "bodyText": "Okay, will make that change.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365432263", "createdAt": "2020-01-10T21:12:59Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+\n+        private ContentWrappedSubscriber(Subscriber<? super T> wrappedSubscriber) {\n+            this.wrappedSubscriber = wrappedSubscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            wrappedSubscriber.onSubscribe(subscription);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            if (contentPrefix != null && prefixApplied.compareAndSet(false, true)) {\n+                wrappedSubscriber.onNext(mergeContentFunction.apply(contentPrefix, t));\n+            } else {\n+                wrappedSubscriber.onNext(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            wrappedSubscriber.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            try {\n+                // In the event onComplete() is called multiple times, only transmit the envelope once", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNjk2Mg=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI3MDkwOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTowMDoyOFrOFcf-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxOToxM1rOFcgWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyODI2Mw==", "bodyText": "I'm not sure, but I think this behavior might violate the spec. A Publisher is allowed to signal onComplete without first getting a request() signal, so it's possible that this calls onNext before the downstream subscriber signals any demand which is not allowed", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365428263", "createdAt": "2020-01-10T21:00:28Z", "author": {"login": "dagnir"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+\n+        private ContentWrappedSubscriber(Subscriber<? super T> wrappedSubscriber) {\n+            this.wrappedSubscriber = wrappedSubscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            wrappedSubscriber.onSubscribe(subscription);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            if (contentPrefix != null && prefixApplied.compareAndSet(false, true)) {\n+                wrappedSubscriber.onNext(mergeContentFunction.apply(contentPrefix, t));\n+            } else {\n+                wrappedSubscriber.onNext(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            wrappedSubscriber.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzNDM3Nw==", "bodyText": "As discussed we'll change this to not send the envelope at all on an empty stream which is the only scenario we think this will crop up in.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365434377", "createdAt": "2020-01-10T21:19:13Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {\n+    private final Publisher<T> wrappedPublisher;\n+    private final T contentPrefix;\n+    private final T contentSuffix;\n+    private final BiFunction<T, T, T> mergeContentFunction;\n+\n+    private EnvelopeWrappedSdkPublisher(Publisher<T> wrappedPublisher,\n+                                        T contentPrefix,\n+                                        T contentSuffix,\n+                                        BiFunction<T, T, T> mergeContentFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.contentPrefix = contentPrefix;\n+        this.contentSuffix = contentSuffix;\n+        this.mergeContentFunction = mergeContentFunction;\n+    }\n+\n+    /**\n+     * Create a new publisher that wraps the content of an existing publisher.\n+     * @param wrappedPublisher The publisher who's content will be wrapped.\n+     * @param contentPrefix The content to be inserted in front of the wrapped content.\n+     * @param contentSuffix The content to be inserted at the back of the wrapped content.\n+     * @param mergeContentFunction A function that will be used to merge the inserted content into the wrapped content.\n+     * @param <T> The content type.\n+     * @return A newly initialized instance of this class.\n+     */\n+    public static <T> EnvelopeWrappedSdkPublisher<T> of(Publisher<T> wrappedPublisher,\n+                                                        T contentPrefix,\n+                                                        T contentSuffix,\n+                                                        BiFunction<T, T, T> mergeContentFunction) {\n+        return new EnvelopeWrappedSdkPublisher<>(wrappedPublisher, contentPrefix, contentSuffix, mergeContentFunction);\n+    }\n+\n+    /**\n+     * See {@link Publisher#subscribe(Subscriber)}\n+     */\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        wrappedPublisher.subscribe(new ContentWrappedSubscriber(subscriber));\n+    }\n+\n+    private class ContentWrappedSubscriber implements Subscriber<T> {\n+        private final Subscriber<? super T> wrappedSubscriber;\n+        private final AtomicBoolean prefixApplied = new AtomicBoolean(false);\n+        private final AtomicBoolean suffixApplied = new AtomicBoolean(false);\n+\n+        private ContentWrappedSubscriber(Subscriber<? super T> wrappedSubscriber) {\n+            this.wrappedSubscriber = wrappedSubscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            wrappedSubscriber.onSubscribe(subscription);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            if (contentPrefix != null && prefixApplied.compareAndSet(false, true)) {\n+                wrappedSubscriber.onNext(mergeContentFunction.apply(contentPrefix, t));\n+            } else {\n+                wrappedSubscriber.onNext(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            wrappedSubscriber.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyODI2Mw=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI3OTkzOnYy", "diffSide": "RIGHT", "path": ".changes/next-release/bugfix-AmazonS3-36e9d26.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTowNDo0NVrOFcgD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxMDowMlrOFchUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyOTcxOA==", "bodyText": "minor: we probably should add another entry with category AWS Java SDK for v2 since we've made changes in core as well.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365429718", "createdAt": "2020-01-10T21:04:45Z", "author": {"login": "zoewangg"}, "path": ".changes/next-release/bugfix-AmazonS3-36e9d26.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"type\": \"bugfix\",\n+    \"category\": \"Amazon S3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0OTU2NQ==", "bodyText": "The core change is just a new class to support the S3 change (and possibly other similar changes in the future in other clients if it ever becomes necessary). Do you think it's still necessary to add a release note for a new utility class in this content?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365449565", "createdAt": "2020-01-10T22:07:25Z", "author": {"login": "bmaizels"}, "path": ".changes/next-release/bugfix-AmazonS3-36e9d26.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"type\": \"bugfix\",\n+    \"category\": \"Amazon S3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyOTcxOA=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MDMzOA==", "bodyText": "Oh okay, I thought you made other changes as well. Then no need to create one for core.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365450338", "createdAt": "2020-01-10T22:10:02Z", "author": {"login": "zoewangg"}, "path": ".changes/next-release/bugfix-AmazonS3-36e9d26.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+    \"type\": \"bugfix\",\n+    \"category\": \"Amazon S3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyOTcxOA=="}, "originalCommit": {"oid": "dc0db29ba53e2c77d4d66a05acc5d8924bc0c073"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI4NTAxOnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTowNzozNlrOFcgHXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjowODowM1rOFchSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMDYyMA==", "bodyText": "Should we add another parameter to specify Charset instead of assuming it's UTF_8? we can make it default to UTF_8 if not specified", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365430620", "createdAt": "2020-01-10T21:07:36Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.async;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.reactivestreams.Publisher;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.internal.async.EnvelopeWrappedSdkPublisher;\n+\n+/**\n+ * Common implementations of {@link SdkPublisher} that are provided for convenience when building asynchronous\n+ * interceptors to be used with specific clients.\n+ */\n+@SdkProtectedApi\n+public final class SdkPublishers {\n+    private SdkPublishers() {\n+    }\n+\n+    /**\n+     * Constructs an {@link SdkPublisher} that wraps a {@link ByteBuffer} publisher and inserts additional content\n+     * that wraps the published content like an envelope. This can be used when you want to transform the content of\n+     * an asynchronous SDK response by putting it in an envelope.\n+     * @param publisher The underlying publisher to wrap the content of.\n+     * @param envelopePrefix A string representing the content to be inserted as the head of the containing envelope.\n+     * @param envelopeSuffix A string representing the content to be inserted as the tail of containing envelope.\n+     * @return An {@link SdkPublisher} that wraps the provided publisher.\n+     */\n+    public static SdkPublisher<ByteBuffer> envelopeWrappedPublisher(Publisher<ByteBuffer> publisher,\n+                                                                    String envelopePrefix,\n+                                                                    String envelopeSuffix) {\n+        return EnvelopeWrappedSdkPublisher.of(publisher,\n+                                              wrap(envelopePrefix),\n+                                              wrap(envelopeSuffix),\n+                                              SdkPublishers::concat);\n+    }\n+\n+    private static ByteBuffer wrap(String s) {\n+        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0OTczOA==", "bodyText": "Maybe, seems like overkill in this case. I could change the name to wrapUtf8() instead?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365449738", "createdAt": "2020-01-10T22:08:03Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/async/SdkPublishers.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.async;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.reactivestreams.Publisher;\n+\n+import software.amazon.awssdk.annotations.SdkProtectedApi;\n+import software.amazon.awssdk.core.internal.async.EnvelopeWrappedSdkPublisher;\n+\n+/**\n+ * Common implementations of {@link SdkPublisher} that are provided for convenience when building asynchronous\n+ * interceptors to be used with specific clients.\n+ */\n+@SdkProtectedApi\n+public final class SdkPublishers {\n+    private SdkPublishers() {\n+    }\n+\n+    /**\n+     * Constructs an {@link SdkPublisher} that wraps a {@link ByteBuffer} publisher and inserts additional content\n+     * that wraps the published content like an envelope. This can be used when you want to transform the content of\n+     * an asynchronous SDK response by putting it in an envelope.\n+     * @param publisher The underlying publisher to wrap the content of.\n+     * @param envelopePrefix A string representing the content to be inserted as the head of the containing envelope.\n+     * @param envelopeSuffix A string representing the content to be inserted as the tail of containing envelope.\n+     * @return An {@link SdkPublisher} that wraps the provided publisher.\n+     */\n+    public static SdkPublisher<ByteBuffer> envelopeWrappedPublisher(Publisher<ByteBuffer> publisher,\n+                                                                    String envelopePrefix,\n+                                                                    String envelopeSuffix) {\n+        return EnvelopeWrappedSdkPublisher.of(publisher,\n+                                              wrap(envelopePrefix),\n+                                              wrap(envelopeSuffix),\n+                                              SdkPublishers::concat);\n+    }\n+\n+    private static ByteBuffer wrap(String s) {\n+        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMDYyMA=="}, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI5NTI5OnYy", "diffSide": "RIGHT", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxMjo1OFrOFcgNvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzowMzo0MFrOFciMdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjI1NA==", "bodyText": "We probably should add reactive-stream tcl test for it as well.\nhttps://github.com/aws/aws-sdk-java-v2/blob/master/CONTRIBUTING.md#reactive-streams", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365432254", "createdAt": "2020-01-10T21:12:58Z", "author": {"login": "zoewangg"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2NDUyNg==", "bodyText": "As discussed offline, this implementation will never be truly compliant as crudely acts as a man-in-the-middle between an external publisher and subscriber. In this case we control the publisher side, so we're able to hide/mitigate the way we are inserting data where there should be none giving the outward appearance of a compliant publisher to any subscribers. I've marked it internal-only and clearly documented this gotcha/limitation.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365464526", "createdAt": "2020-01-10T23:02:59Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjI1NA=="}, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2NDY5NQ==", "bodyText": "Also I did run the TCL tests and fixed all the issues that were flagged that were not working as intended.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365464695", "createdAt": "2020-01-10T23:03:40Z", "author": {"login": "bmaizels"}, "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/async/EnvelopeWrappedSdkPublisher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.async;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiFunction;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Publisher implementation that wraps the content of another publisher in an envelope with an optional prefix (or\n+ * header) and suffix (or footer). The prefix content will be prepended to the first published object from the\n+ * wrapped publisher, and the suffix content will be published when the wrapped publisher signals completion.\n+ * <p>\n+ * The envelope prefix will not be published until the wrapped publisher publishes something or is completed.\n+ * The envelope suffix will not be published until the wrapped publisher is completed.\n+ * <p>\n+ * This class can be used in an asynchronous interceptor in the AWS SDK to wrap content around the incoming\n+ * bytestream from a response.\n+ * <p>\n+ * A function must be supplied that can be used to concatinate the envelope content to the content being published by\n+ * the wrapped publisher. Example usage:\n+ * {@code\n+ *    Publisher<String> wrappedPublisher = ContentEnvelopeWrappingPublisher.of(publisher, \"S\", \"E\", (s1, s2) -> s1 + s2);\n+ * }\n+ * If publisher publishes a single string \"1\", wrappedPublisher will publish \"S1\" (prepending the envelop prefix). If\n+ * publisher then publishes a second string \"2\", wrappedPublisher will then publish \"2\" (no added content). If\n+ * publisher then completes, wrappedPublisher will then publish \"E\" and then complete.\n+ *\n+ * @param <T> The type of objects being published\n+ */\n+\n+@ThreadSafe\n+@SdkInternalApi\n+public class EnvelopeWrappedSdkPublisher<T> implements SdkPublisher<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjI1NA=="}, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQyMDU2OnYy", "diffSide": "RIGHT", "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/internal/handlers/GetBucketPolicyInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxNjozNlrOFchcCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzowNDozNFrOFciNMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjI5Ng==", "bodyText": "Do we need this?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365452296", "createdAt": "2020-01-10T22:16:36Z", "author": {"login": "zoewangg"}, "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/internal/handlers/GetBucketPolicyInterceptor.java", "diffHunk": "@@ -33,24 +39,43 @@\n  */\n @SdkInternalApi\n public final class GetBucketPolicyInterceptor implements ExecutionInterceptor {\n+    private static final String XML_ENVELOPE_PREFIX = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><Policy><![CDATA[\";\n+    private static final String XML_ENVELOPE_SUFFIX = \"]]></Policy>\";\n+\n+    private static final Predicate<Context.ModifyHttpResponse> INTERCEPTOR_CONTEXT_PREDICATE =\n+        context -> context.request() instanceof GetBucketPolicyRequest && context.httpResponse().isSuccessful();\n \n     @Override\n     public Optional<InputStream> modifyHttpResponseContent(Context.ModifyHttpResponse context,\n                                                            ExecutionAttributes executionAttributes) {\n-        if (context.request() instanceof GetBucketPolicyRequest && context.httpResponse().isSuccessful()) {\n+        if (INTERCEPTOR_CONTEXT_PREDICATE.test(context)) {\n \n             String policy = context.responseBody()\n                                    .map(r -> invokeSafely(() -> IoUtils.toUtf8String(r)))\n                                    .orElse(null);\n \n             if (policy != null) {\n-                // Wrap in CDATA to deal with any escaping issues\n-                String xml = String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n-                                           + \"<Policy><![CDATA[%s]]></Policy>\", policy);\n+                String xml = XML_ENVELOPE_PREFIX + policy + XML_ENVELOPE_SUFFIX;\n                 return Optional.of(AbortableInputStream.create(new StringInputStream(xml)));\n             }\n         }\n \n         return context.responseBody();\n     }\n+\n+    @Override\n+    public Optional<Publisher<ByteBuffer>> modifyAsyncHttpResponseContent(Context.ModifyHttpResponse context,\n+                                                                          ExecutionAttributes executionAttributes) {\n+        if (INTERCEPTOR_CONTEXT_PREDICATE.test(context)) {\n+            return context.responsePublisher().map(\n+                body -> SdkPublishers.envelopeWrappedPublisher(body, XML_ENVELOPE_PREFIX, XML_ENVELOPE_SUFFIX));\n+        }\n+\n+        return context.responsePublisher();\n+    }\n+\n+    @Override\n+    public void beforeUnmarshalling(Context.BeforeUnmarshalling context, ExecutionAttributes executionAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2NDg4MA==", "bodyText": "I don't think so... removing it.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1586#discussion_r365464880", "createdAt": "2020-01-10T23:04:34Z", "author": {"login": "bmaizels"}, "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/internal/handlers/GetBucketPolicyInterceptor.java", "diffHunk": "@@ -33,24 +39,43 @@\n  */\n @SdkInternalApi\n public final class GetBucketPolicyInterceptor implements ExecutionInterceptor {\n+    private static final String XML_ENVELOPE_PREFIX = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><Policy><![CDATA[\";\n+    private static final String XML_ENVELOPE_SUFFIX = \"]]></Policy>\";\n+\n+    private static final Predicate<Context.ModifyHttpResponse> INTERCEPTOR_CONTEXT_PREDICATE =\n+        context -> context.request() instanceof GetBucketPolicyRequest && context.httpResponse().isSuccessful();\n \n     @Override\n     public Optional<InputStream> modifyHttpResponseContent(Context.ModifyHttpResponse context,\n                                                            ExecutionAttributes executionAttributes) {\n-        if (context.request() instanceof GetBucketPolicyRequest && context.httpResponse().isSuccessful()) {\n+        if (INTERCEPTOR_CONTEXT_PREDICATE.test(context)) {\n \n             String policy = context.responseBody()\n                                    .map(r -> invokeSafely(() -> IoUtils.toUtf8String(r)))\n                                    .orElse(null);\n \n             if (policy != null) {\n-                // Wrap in CDATA to deal with any escaping issues\n-                String xml = String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n-                                           + \"<Policy><![CDATA[%s]]></Policy>\", policy);\n+                String xml = XML_ENVELOPE_PREFIX + policy + XML_ENVELOPE_SUFFIX;\n                 return Optional.of(AbortableInputStream.create(new StringInputStream(xml)));\n             }\n         }\n \n         return context.responseBody();\n     }\n+\n+    @Override\n+    public Optional<Publisher<ByteBuffer>> modifyAsyncHttpResponseContent(Context.ModifyHttpResponse context,\n+                                                                          ExecutionAttributes executionAttributes) {\n+        if (INTERCEPTOR_CONTEXT_PREDICATE.test(context)) {\n+            return context.responsePublisher().map(\n+                body -> SdkPublishers.envelopeWrappedPublisher(body, XML_ENVELOPE_PREFIX, XML_ENVELOPE_SUFFIX));\n+        }\n+\n+        return context.responsePublisher();\n+    }\n+\n+    @Override\n+    public void beforeUnmarshalling(Context.BeforeUnmarshalling context, ExecutionAttributes executionAttributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjI5Ng=="}, "originalCommit": {"oid": "d099622a9c485a0450694a07845dbfbf43f3e2b6"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4310, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}