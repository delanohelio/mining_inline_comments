{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzQ0NTQ0", "number": 1731, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1NToxM1rODqfXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1MDoxNlrODs5Q_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgwNjQ3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1NToxM1rOF6RS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowOToyOVrOF6R4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NTA5Mg==", "bodyText": "I think this is more interesting/relevant than flattening and extending. Can we make this section come first?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396645092", "createdAt": "2020-03-23T17:55:13Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NDY1NQ==", "bodyText": "Yes", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396654655", "createdAt": "2020-03-23T18:09:29Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NTA5Mg=="}, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgwOTY1OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1NTo1MlrOF6RU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowOTo0OVrOF6R5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NTU4OA==", "bodyText": "I think we should give an example on how to do this.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396645588", "createdAt": "2020-03-23T17:55:52Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NDg4Ng==", "bodyText": "Will add", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396654886", "createdAt": "2020-03-23T18:09:49Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NTU4OA=="}, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgxMzEwOnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1Njo0NFrOF6RXHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowMDozNVrOF9_V5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NjE3NQ==", "bodyText": "Let's add a note that makes it clear that overriding a single attribute will not apply the same converter to other attributes of that type unless they are also overridden or the provider supports it instead.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396646175", "createdAt": "2020-03-23T17:56:44Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NTI1NA==", "bodyText": "ok", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r400545254", "createdAt": "2020-03-30T23:00:35Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NjE3NQ=="}, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgxODc4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1ODowMVrOF6Rajw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxMDoxNVrOF6R6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NzA1NQ==", "bodyText": "I think this description is a bit circumspect. Let's just pitch it as 'this is how to change the name used to store the attribute in the DynamoDb table' or something equivalent. I think the annotation javadoc might need changing too.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396647055", "createdAt": "2020-03-23T17:58:01Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName)\n+                                     a.attributeConverter(customAttributeConverter))\n+    .build();\n+```\n+\n+## Advanced BeanTableSchema scenarios\n+### Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Mark attributes that should participate in mapping to DDB\n+Any attribute in a class marked with @DynamoDbBean will be included in the mapping as long\n+as it has a getter and a setter, according to the Java Bean standard. It's also\n+possible to explicitly mark attributes to participate in the mapping to DDB, with a custom name,\n+using the @DynamoDbAttribute annotation:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NTE1Nw==", "bodyText": "Ok, I'll look into that.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396655157", "createdAt": "2020-03-23T18:10:15Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName)\n+                                     a.attributeConverter(customAttributeConverter))\n+    .build();\n+```\n+\n+## Advanced BeanTableSchema scenarios\n+### Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Mark attributes that should participate in mapping to DDB\n+Any attribute in a class marked with @DynamoDbBean will be included in the mapping as long\n+as it has a getter and a setter, according to the Java Bean standard. It's also\n+possible to explicitly mark attributes to participate in the mapping to DDB, with a custom name,\n+using the @DynamoDbAttribute annotation:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NzA1NQ=="}, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgyNjc4OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1OTo0OFrOF6Rfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowNDoxNFrOF9_a4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0ODM1NQ==", "bodyText": "I think we should organize the documentation by 'use-case scenario' then show how to do it in the different table schema implementations (I've been putting Bean first, then Static). So I think this should be joined with the equivalent section for the static table schema.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396648355", "createdAt": "2020-03-23T17:59:48Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName)\n+                                     a.attributeConverter(customAttributeConverter))\n+    .build();\n+```\n+\n+## Advanced BeanTableSchema scenarios\n+### Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Mark attributes that should participate in mapping to DDB\n+Any attribute in a class marked with @DynamoDbBean will be included in the mapping as long\n+as it has a getter and a setter, according to the Java Bean standard. It's also\n+possible to explicitly mark attributes to participate in the mapping to DDB, with a custom name,\n+using the @DynamoDbAttribute annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbAttribute(\"renamedInternalKey\")\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Flat map attributes from another class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NjUzMA==", "bodyText": "Yes, I rearranged it and its clearer, consistent and less repetitive.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r400546530", "createdAt": "2020-03-30T23:04:14Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName)\n+                                     a.attributeConverter(customAttributeConverter))\n+    .build();\n+```\n+\n+## Advanced BeanTableSchema scenarios\n+### Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Mark attributes that should participate in mapping to DDB\n+Any attribute in a class marked with @DynamoDbBean will be included in the mapping as long\n+as it has a getter and a setter, according to the Java Bean standard. It's also\n+possible to explicitly mark attributes to participate in the mapping to DDB, with a custom name,\n+using the @DynamoDbAttribute annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbAttribute(\"renamedInternalKey\")\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Flat map attributes from another class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0ODM1NQ=="}, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODgzMTg3OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowMTowOVrOF6RjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowMTowOVrOF6RjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0OTIxNw==", "bodyText": "Same comment as before, I think we should organize by use-case and then a description of how to do it in the BeanTableSchema and then the StaticTableSchema", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r396649217", "createdAt": "2020-03-23T18:01:09Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -291,32 +296,205 @@ Using composition:\n public class Customer{\n   private String name;\n   private GenericRecord recordMetadata;\n+  //getters and setters for all attributes\n }\n \n @Data\n public class GenericRecord {\n   private String id;\n   private String createdDate;\n+  //getters and setters for all attributes\n }\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .newItemSupplier(GenericRecord::new)\n-    .attributes(\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     // Because we are flattening a component object, we supply a getter and setter so the\n     // mapper knows how to access it\n-    .flatten(CUSTOMER_TABLE_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n+    .flatten(GENERIC_RECORD_SCHEMA, Customer::getRecordMetadata, Customer::setRecordMetadata)\n     .build(); \n ```\n You can flatten as many different eligible classes as you like using the\n builder pattern. The only constraints are that attributes must not have\n the same name when they are being rolled together, and there must never\n-be more than one partition key, sort key or table name.\n\\ No newline at end of file\n+be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+ to the StaticTableSchema:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName))\n+    .attributeConverterProviders(converterProvider1, converterProvider2)\n+    .build();\n+```\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider and must therefore include it in the chain if you wish to\n+use its attribute converters.\n+\n+#### Override the mapping of a single attribute\n+Supply an AttributeConverter when creating the attribute to directly override any\n+converters provided by the table schema AttributeConverterProviders:\n+```java\n+private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n+  StaticTableSchema.builder(Customer.class)\n+    .newItemSupplier(Customer::new)\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                     a.getter(Customer::getName)\n+                                     a.setter(Customer::setName)\n+                                     a.attributeConverter(customAttributeConverter))\n+    .build();\n+```\n+\n+## Advanced BeanTableSchema scenarios\n+### Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Mark attributes that should participate in mapping to DDB\n+Any attribute in a class marked with @DynamoDbBean will be included in the mapping as long\n+as it has a getter and a setter, according to the Java Bean standard. It's also\n+possible to explicitly mark attributes to participate in the mapping to DDB, with a custom name,\n+using the @DynamoDbAttribute annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbAttribute(\"renamedInternalKey\")\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Flat map attributes from another class\n+If the attributes for your table record are spread across several\n+different Java objects, either through inheritance or composition, the\n+BeanTableSchema provides methods to flat map\n+those attributes and rolling them up into a single schema.\n+\n+To accomplish this using inheritance, the only requirement is that\n+both classes are annotated as a DynamoDb bean:-\n+```java\n+@DynamoDbBean\n+public class Customer extends GenericRecord {\n+    private String name;\n+    private GenericRecord record;\n+\n+    public String getName() { return this.name; }\n+    public void setName(String name) { this.name = name;}\n+\n+    public String getRecord() { return this.record; }\n+    public void setRecord(String record) { this.record = record;}\n+}\n+\n+@DynamoDbBean\n+public abstract class GenericRecord {\n+    private String id;\n+    private String createdDate;\n+\n+    public String getId() { return this.id; }\n+    public void setId(String id) { this.id = id;}\n+\n+    public String getCreatedDate() { return this.createdDate; }\n+    public void setCreatedDate(String createdDate) { this.createdDate = createdDate;}\n+}\n+\n+```\n+\n+Using composition, the @DynamoDbFlatten annotation flat maps the composite class:\n+```java\n+@DynamoDbBean\n+public class Customer {\n+    private String name;\n+    private GenericRecord record;\n+\n+    public String getName() { return this.name; }\n+    public void setName(String name) { this.name = name;}\n+\n+    @DynamoDbFlatten(dynamoDbBeanClass = GenericRecord.class)\n+    public String getRecord() { return this.record; }\n+    public void setRecord(String record) { this.record = record;}\n+}\n+\n+@DynamoDbBean\n+public class GenericRecord {\n+    private String id;\n+    private String createdDate;\n+\n+    public String getId() { return this.id; }\n+    public void setId(String id) { this.id = id;}\n+\n+    public String getCreatedDate() { return this.createdDate; }\n+    public void setCreatedDate(String createdDate) { this.createdDate = createdDate;}\n+}\n+```\n+You can flatten as many different eligible classes as you like using the flatten annotation.\n+The only constraints are that attributes must not have the same name when they are being rolled\n+together, and there must never be more than one partition key, sort key or table name.\n+\n+### Control how attributes are converted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e31a08fe87f1399f9a4724111eea07489b9887"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAyMTE2OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0OTo1NlrOF-AVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1ODoyNVrOF-Afvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MTUzNg==", "bodyText": "Capital C?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r400561536", "createdAt": "2020-03-30T23:49:56Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -248,14 +246,143 @@ Or using a StaticTableSchema:\n                                        .tags(versionAttribute())                         \n ```\n \n-## Advanced StaticTableSchema scenarios\n+## Advanced table schema features\n+### Explicitly include/exclude attributes in DDB mapping\n+#### Excluding attributes\n+Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+#### Including attributes\n+Change the name used to store an attribute in DBB by explicitly marking it with the\n+ @DynamoDbAttribute annotation and supplying a different name:\n+```java\n+private String internalKey;\n+\n+@DynamoDbAttribute(\"renamedInternalKey\")\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Control attribute conversion\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+through the @DynamoDbBean annotation. Any custom AttributeConverterProvider must extend the AttributeConverterProvider \n+interface. \n+\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider (DefaultAttributeConverterProvider) and must therefore include it in the chain if you wish to\n+use its attribute converters. It's also possible to annotate the bean with an empty array `{}`, thus\n+disabling the usage of any attribute converter providers including the default, in which case\n+all attributes must have their own attribute converters (see below).\n+\n+Single converter provider:\n+```java\n+@DynamoDbBean(converterProviders = converterProvider1.class)\n+public class Customer {\n+\n+}\n+```\n+\n+Chain of converter providers ending with the default (least priority):\n+```java\n+@DynamoDbBean(converterProviders = {\n+   converterProvider1.class, \n+   converterProvider2.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0592f9d69da66e73f7efcbf41bbc067b51d7030f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NDE1OA==", "bodyText": ":-)", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r400564158", "createdAt": "2020-03-30T23:58:25Z", "author": {"login": "cenedhryn"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -248,14 +246,143 @@ Or using a StaticTableSchema:\n                                        .tags(versionAttribute())                         \n ```\n \n-## Advanced StaticTableSchema scenarios\n+## Advanced table schema features\n+### Explicitly include/exclude attributes in DDB mapping\n+#### Excluding attributes\n+Ignore attributes that should not participate in mapping to DDB\n+Mark the attribute with the @DynamoDbIgnore annotation:\n+```java\n+private String internalKey;\n+\n+@DynamoDbIgnore\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+#### Including attributes\n+Change the name used to store an attribute in DBB by explicitly marking it with the\n+ @DynamoDbAttribute annotation and supplying a different name:\n+```java\n+private String internalKey;\n+\n+@DynamoDbAttribute(\"renamedInternalKey\")\n+public String getInternalKey() { return this.internalKey; }\n+public void setInternalKey(String internalKey) { return this.internalKey = internalKey;}\n+```\n+\n+### Control attribute conversion\n+By default, the table schema provides converters for all primitive and many common Java types\n+through a default implementation of the AttributeConverterProvider interface. This behavior\n+can be changed both at the attribute converter provider level as well as for a single attribute.\n+\n+#### Provide custom attribute converter providers\n+You can provide a single AttributeConverterProvider or a chain of ordered AttributeConverterProviders\n+through the @DynamoDbBean annotation. Any custom AttributeConverterProvider must extend the AttributeConverterProvider \n+interface. \n+\n+Note that if you supply your own chain of attribute converter providers, you will override\n+the default converter provider (DefaultAttributeConverterProvider) and must therefore include it in the chain if you wish to\n+use its attribute converters. It's also possible to annotate the bean with an empty array `{}`, thus\n+disabling the usage of any attribute converter providers including the default, in which case\n+all attributes must have their own attribute converters (see below).\n+\n+Single converter provider:\n+```java\n+@DynamoDbBean(converterProviders = converterProvider1.class)\n+public class Customer {\n+\n+}\n+```\n+\n+Chain of converter providers ending with the default (least priority):\n+```java\n+@DynamoDbBean(converterProviders = {\n+   converterProvider1.class, \n+   converterProvider2.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MTUzNg=="}, "originalCommit": {"oid": "0592f9d69da66e73f7efcbf41bbc067b51d7030f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAyMTc0OnYy", "diffSide": "RIGHT", "path": "services-custom/dynamodb-enhanced/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1MDoxNlrOF-AV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1MDoxNlrOF-AV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MTYyOA==", "bodyText": "I think we should move this text underneath the StaticTableSchema example.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1731#discussion_r400561628", "createdAt": "2020-03-30T23:50:16Z", "author": {"login": "bmaizels"}, "path": "services-custom/dynamodb-enhanced/README.md", "diffHunk": "@@ -270,53 +397,96 @@ public abstract class GenericRecord {\n \n private static final StaticTableSchema<GenericRecord> GENERIC_RECORD_SCHEMA =\n   StaticTableSchema.builder(GenericRecord.class)\n-    .attributes(\n-          // The partition key will be inherited by the top level mapper\n-      stringAttribute(\"id\", GenericRecord::getId, GenericRecord::setId).as(primaryPartitionKey()),\n-      stringAttribute(\"created_date\", GenericRecord::getCreatedDate, GenericRecord::setCreatedDate))\n-    .build();\n+       // The partition key will be inherited by the top level mapper\n+      .addAttribute(String.class, a -> a.name(\"id\")\n+                                        .getter(GenericRecord::getId)\n+                                        .setter(GenericRecord::setId)\n+                                        .tags(primaryPartitionKey()))\n+      .addAttribute(String.class, a -> a.name(\"created_date\")\n+                                        .getter(GenericRecord::getCreatedDate)\n+                                        .setter(GenericRecord::setCreatedDate))\n+     .build();\n     \n private static final StaticTableSchema<Customer> CUSTOMER_TABLE_SCHEMA =\n   StaticTableSchema.builder(Customer.class)\n     .newItemSupplier(Customer::new)\n-    .attributes(\n-      stringAttribute(\"name\", Customer::getName, Customer::setName))\n+    .addAttribute(String.class, a -> a.name(\"name\")\n+                                      .getter(Customer::getName)\n+                                      .setter(Customer::setName))\n     .extend(GENERIC_RECORD_SCHEMA)     // All the attributes of the GenericRecord schema are added to Customer\n     .build();\n ```\n+#### Using composition\n+\n+Using composition, the @DynamoDbFlatten annotation flat maps the composite class:\n+```java\n+@DynamoDbBean\n+public class Customer {\n+    private String name;\n+    private GenericRecord record;\n+\n+    public String getName() { return this.name; }\n+    public void setName(String name) { this.name = name;}\n+\n+    @DynamoDbFlatten(dynamoDbBeanClass = GenericRecord.class)\n+    public String getRecord() { return this.record; }\n+    public void setRecord(String record) { this.record = record;}\n+}\n+\n+@DynamoDbBean\n+public class GenericRecord {\n+    private String id;\n+    private String createdDate;\n+\n+    public String getId() { return this.id; }\n+    public void setId(String id) { this.id = id;}\n+\n+    public String getCreatedDate() { return this.createdDate; }\n+    public void setCreatedDate(String createdDate) { this.createdDate = createdDate;}\n+}\n+```\n+You can flatten as many different eligible classes as you like using the flatten annotation.\n+The only constraints are that attributes must not have the same name when they are being rolled\n+together, and there must never be more than one partition key, sort key or table name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0592f9d69da66e73f7efcbf41bbc067b51d7030f"}, "originalPosition": 234}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}