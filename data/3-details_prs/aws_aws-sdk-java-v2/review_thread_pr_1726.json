{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTEyMTU5", "number": 1726, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMTo0MVrODq_XLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0MTozOVrODq_2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA0OTA4OnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMTo0MVrOF7FCfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNToyNFrOF7Fpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5Mjg2Mw==", "bodyText": "Add a TODO here so we don't forget?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397492863", "createdAt": "2020-03-24T22:11:41Z", "author": {"login": "spfink"}, "path": "test/sdk-benchmarks/pom.xml", "diffHunk": "@@ -134,6 +134,16 @@\n             <artifactId>netty-nio-client</artifactId>\n             <version>${awsjavasdk.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>software.amazon.awssdk</groupId>\n+            <artifactId>dynamodb-enhanced</artifactId>\n+            <version>${awsjavasdk.version}-PREVIEW</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjg3NQ==", "bodyText": "Sure", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397502875", "createdAt": "2020-03-24T22:35:24Z", "author": {"login": "dagnir"}, "path": "test/sdk-benchmarks/pom.xml", "diffHunk": "@@ -134,6 +134,16 @@\n             <artifactId>netty-nio-client</artifactId>\n             <version>${awsjavasdk.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>software.amazon.awssdk</groupId>\n+            <artifactId>dynamodb-enhanced</artifactId>\n+            <version>${awsjavasdk.version}-PREVIEW</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5Mjg2Mw=="}, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1MDY4OnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjoxMVrOF7FDYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozOToxMVrOF7Fvbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA4OA==", "bodyText": "What's this endpoint?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493088", "createdAt": "2020-03-24T22:12:11Z", "author": {"login": "spfink"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.ENDPOINT;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.Map;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.benchmark.utils.MockHttpClient;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocol;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocolFactory;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n+import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n+import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n+import software.amazon.awssdk.services.dynamodb.transform.PutItemRequestMarshaller;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@Fork(2)\n+@State(Scope.Benchmark)\n+public class EnhancedClientGetOverheadBenchmark {\n+    private static final AwsJsonProtocolFactory JSON_PROTOCOL_FACTORY = AwsJsonProtocolFactory\n+            .builder()\n+            .clientConfiguration(SdkClientConfiguration.builder()\n+                    .option(ENDPOINT, URI.create(\"https://dynamodb.amazonaws.com\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDM2Ng==", "bodyText": "This was to stop the numerous profile loader related log messages", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397504366", "createdAt": "2020-03-24T22:39:11Z", "author": {"login": "dagnir"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.ENDPOINT;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.Map;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.benchmark.utils.MockHttpClient;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocol;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocolFactory;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n+import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n+import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n+import software.amazon.awssdk.services.dynamodb.transform.PutItemRequestMarshaller;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@Fork(2)\n+@State(Scope.Benchmark)\n+public class EnhancedClientGetOverheadBenchmark {\n+    private static final AwsJsonProtocolFactory JSON_PROTOCOL_FACTORY = AwsJsonProtocolFactory\n+            .builder()\n+            .clientConfiguration(SdkClientConfiguration.builder()\n+                    .option(ENDPOINT, URI.create(\"https://dynamodb.amazonaws.com\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA4OA=="}, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1MjA4OnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjo0MlrOF7FEOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjo0MlrOF7FEOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzMwNg==", "bodyText": "I think we can write out better method names here", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493306", "createdAt": "2020-03-24T22:12:42Z", "author": {"login": "spfink"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.ENDPOINT;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.Map;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.benchmark.utils.MockHttpClient;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocol;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocolFactory;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n+import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n+import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n+import software.amazon.awssdk.services.dynamodb.transform.PutItemRequestMarshaller;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@Fork(2)\n+@State(Scope.Benchmark)\n+public class EnhancedClientGetOverheadBenchmark {\n+    private static final AwsJsonProtocolFactory JSON_PROTOCOL_FACTORY = AwsJsonProtocolFactory\n+            .builder()\n+            .clientConfiguration(SdkClientConfiguration.builder()\n+                    .option(ENDPOINT, URI.create(\"https://dynamodb.amazonaws.com\"))\n+                    .build())\n+            .defaultServiceExceptionSupplier(DynamoDbException::builder)\n+            .protocol(AwsJsonProtocol.AWS_JSON)\n+            .protocolVersion(\"1.0\")\n+            .build();\n+\n+    private static final PutItemRequestMarshaller PUT_ITEM_REQUEST_MARSHALLER =\n+            new PutItemRequestMarshaller(JSON_PROTOCOL_FACTORY);\n+\n+    private static final V2ItemFactory ITEM_FACTORY = new V2ItemFactory();\n+\n+    private final Key testKey = Key.builder().partitionValue(\"key\").build();\n+\n+\n+    @Benchmark\n+    public Object llGet(TestState s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1MzgyOnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzoxNVrOF7FFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozODozMlrOF7Fueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzU2MQ==", "bodyText": "Why the seemingly random new lines? Also can we just for loop something here?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493561", "createdAt": "2020-03-24T22:13:15Z", "author": {"login": "spfink"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java", "diffHunk": "@@ -0,0 +1,922 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import com.amazonaws.util.ImmutableMapParameter;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import software.amazon.awssdk.core.SdkBytes;\n+\n+abstract class ItemFactory<T> {\n+    private static final String ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\n+\n+    private static final Random RNG = new Random();\n+\n+    public final Map<String, T> tiny() {\n+        return asItem(tinyBean());\n+    }\n+\n+    public final Map<String, T> small() {\n+        return asItem(smallBean());\n+    }\n+\n+    public final Map<String, T> huge() {\n+        return asItem(hugeBean());\n+    }\n+\n+    public final Map<String, T> hugeFlat() {\n+        return asItem(hugeBeanFlat());\n+    }\n+\n+    public final TinyBean tinyBean() {\n+        TinyBean b = new TinyBean();\n+        b.setStringAttr(randomS());\n+        return b;\n+    }\n+\n+    public final SmallBean smallBean() {\n+        SmallBean b = new SmallBean();\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(), randomS(), randomS()));\n+        return b;\n+    }\n+\n+    public final HugeBean hugeBean() {\n+        HugeBean b = new HugeBean();\n+        b.setHashKey(randomS());\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(),\n+                randomS(),\n+                randomS(),\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDEyMg==", "bodyText": "The lines break them up in to powers of 2. I can change to using a loop", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397504122", "createdAt": "2020-03-24T22:38:32Z", "author": {"login": "dagnir"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java", "diffHunk": "@@ -0,0 +1,922 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import com.amazonaws.util.ImmutableMapParameter;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import software.amazon.awssdk.core.SdkBytes;\n+\n+abstract class ItemFactory<T> {\n+    private static final String ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\n+\n+    private static final Random RNG = new Random();\n+\n+    public final Map<String, T> tiny() {\n+        return asItem(tinyBean());\n+    }\n+\n+    public final Map<String, T> small() {\n+        return asItem(smallBean());\n+    }\n+\n+    public final Map<String, T> huge() {\n+        return asItem(hugeBean());\n+    }\n+\n+    public final Map<String, T> hugeFlat() {\n+        return asItem(hugeBeanFlat());\n+    }\n+\n+    public final TinyBean tinyBean() {\n+        TinyBean b = new TinyBean();\n+        b.setStringAttr(randomS());\n+        return b;\n+    }\n+\n+    public final SmallBean smallBean() {\n+        SmallBean b = new SmallBean();\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(), randomS(), randomS()));\n+        return b;\n+    }\n+\n+    public final HugeBean hugeBean() {\n+        HugeBean b = new HugeBean();\n+        b.setHashKey(randomS());\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(),\n+                randomS(),\n+                randomS(),\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzU2MQ=="}, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1OTMzOnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxNTowOVrOF7FIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNjoxM1rOF7FqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NDQxMA==", "bodyText": "Do we really need v1 here long term? Once we have a good baseline for v2, can we just track v2?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397494410", "createdAt": "2020-03-24T22:15:09Z", "author": {"login": "spfink"}, "path": "test/sdk-benchmarks/pom.xml", "diffHunk": "@@ -134,6 +134,16 @@\n             <artifactId>netty-nio-client</artifactId>\n             <version>${awsjavasdk.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>software.amazon.awssdk</groupId>\n+            <artifactId>dynamodb-enhanced</artifactId>\n+            <version>${awsjavasdk.version}-PREVIEW</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws</groupId>\n+            <artifactId>aws-java-sdk-dynamodb</artifactId>\n+            <version>1.11.748</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMzE3Nw==", "bodyText": "We can remove it in the future, but while we're iterating on the performance we should have this in here.", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397503177", "createdAt": "2020-03-24T22:36:13Z", "author": {"login": "dagnir"}, "path": "test/sdk-benchmarks/pom.xml", "diffHunk": "@@ -134,6 +134,16 @@\n             <artifactId>netty-nio-client</artifactId>\n             <version>${awsjavasdk.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>software.amazon.awssdk</groupId>\n+            <artifactId>dynamodb-enhanced</artifactId>\n+            <version>${awsjavasdk.version}-PREVIEW</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws</groupId>\n+            <artifactId>aws-java-sdk-dynamodb</artifactId>\n+            <version>1.11.748</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NDQxMA=="}, "originalCommit": {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDEyNjMyOnYy", "diffSide": "RIGHT", "path": "buildspecs/benchmarks.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0MDoxNFrOF7FxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1MDowOVrOF7GAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDc2OQ==", "bodyText": "intended change?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397504769", "createdAt": "2020-03-24T22:40:14Z", "author": {"login": "zoewangg"}, "path": "buildspecs/benchmarks.yml", "diffHunk": "@@ -10,4 +10,4 @@ phases:\n       - mvn install -P quick -pl :sdk-benchmarks --am\n       - mvn install -pl :bom-internal\n       - cd test/sdk-benchmarks\n-      - mvn exec:exec\n\\ No newline at end of file\n+      - java -jar target/benchmarks.jar -f 1 -wi 8 -i 8 software.amazon.awssdk.benchmark.enhanced.dynamodb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd33dc12b5fbe05705ec57edc859681753df5f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwODYyNQ==", "bodyText": "just while I'm testing these changes in codebuild", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397508625", "createdAt": "2020-03-24T22:50:09Z", "author": {"login": "dagnir"}, "path": "buildspecs/benchmarks.yml", "diffHunk": "@@ -10,4 +10,4 @@ phases:\n       - mvn install -P quick -pl :sdk-benchmarks --am\n       - mvn install -pl :bom-internal\n       - cd test/sdk-benchmarks\n-      - mvn exec:exec\n\\ No newline at end of file\n+      - java -jar target/benchmarks.jar -f 1 -wi 8 -i 8 software.amazon.awssdk.benchmark.enhanced.dynamodb", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDc2OQ=="}, "originalCommit": {"oid": "edd33dc12b5fbe05705ec57edc859681753df5f4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDEyOTQxOnYy", "diffSide": "RIGHT", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/BenchmarkRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0MTozOVrOF7Fy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1MDoyOVrOF7GAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTI2NA==", "bodyText": "Should we add ddb enhanced client data to baseline.json for regression detection?", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397505264", "createdAt": "2020-03-24T22:41:39Z", "author": {"login": "zoewangg"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/BenchmarkRunner.java", "diffHunk": "@@ -74,6 +83,7 @@ public static void main(String... args) throws RunnerException, JsonProcessingEx\n         benchmarksToRun.addAll(ASYNC_BENCHMARKS);\n         benchmarksToRun.addAll(PROTOCOL_BENCHMARKS);\n         benchmarksToRun.addAll(COLD_START_BENCHMARKS);\n+        benchmarksToRun.addAll(MAPPER_BENCHMARKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd33dc12b5fbe05705ec57edc859681753df5f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwODc1MQ==", "bodyText": "See previous comment for getting baseline", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397508751", "createdAt": "2020-03-24T22:50:29Z", "author": {"login": "dagnir"}, "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/BenchmarkRunner.java", "diffHunk": "@@ -74,6 +83,7 @@ public static void main(String... args) throws RunnerException, JsonProcessingEx\n         benchmarksToRun.addAll(ASYNC_BENCHMARKS);\n         benchmarksToRun.addAll(PROTOCOL_BENCHMARKS);\n         benchmarksToRun.addAll(COLD_START_BENCHMARKS);\n+        benchmarksToRun.addAll(MAPPER_BENCHMARKS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTI2NA=="}, "originalCommit": {"oid": "edd33dc12b5fbe05705ec57edc859681753df5f4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4281, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}