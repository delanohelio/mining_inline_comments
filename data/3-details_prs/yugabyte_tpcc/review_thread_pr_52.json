{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDkxMTU3", "number": 52, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MTozMVrOElu1ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mzo0NVrOElu5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAwMTA2OnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MTozMVrOHVXlIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzozMDowM1rOHVbTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODQ4MA==", "bodyText": "Do we need this log here or was it just for debugging?", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492168480", "createdAt": "2020-09-21T15:51:31Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -303,11 +304,17 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n \n         stockQuantities[ol_number - 1] = s_quantity;\n \n+        if (ol_i_id == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTQwNA==", "bodyText": "Removed", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492229404", "createdAt": "2020-09-21T17:30:03Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -303,11 +304,17 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n \n         stockQuantities[ol_number - 1] = s_quantity;\n \n+        if (ol_i_id == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODQ4MA=="}, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAwMTY0OnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MTo0MFrOHVXlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzozMDowN1rOHVbTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODU4Mg==", "bodyText": "ditto.", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492168582", "createdAt": "2020-09-21T15:51:40Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -303,11 +304,17 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n \n         stockQuantities[ol_number - 1] = s_quantity;\n \n+        if (ol_i_id == 1) {\n+          LOG.info(\"Old s_quant is \" + s_quantity + \" val \" + ol_quantity);\n+        }\n         if (s_quantity - ol_quantity >= 10) {\n           s_quantity -= ol_quantity;\n         } else {\n           s_quantity += -ol_quantity + 91;\n         }\n+        if (ol_i_id == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTQ1NQ==", "bodyText": "Done.", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492229455", "createdAt": "2020-09-21T17:30:07Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -303,11 +304,17 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n \n         stockQuantities[ol_number - 1] = s_quantity;\n \n+        if (ol_i_id == 1) {\n+          LOG.info(\"Old s_quant is \" + s_quantity + \" val \" + ol_quantity);\n+        }\n         if (s_quantity - ol_quantity >= 10) {\n           s_quantity -= ol_quantity;\n         } else {\n           s_quantity += -ol_quantity + 91;\n         }\n+        if (ol_i_id == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2ODU4Mg=="}, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAxMDc5OnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mzo0NVrOHVXrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzozMDoxMVrOHVbThA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDA0Nw==", "bodyText": "nit: supplierWhId?", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492170047", "createdAt": "2020-09-21T15:53:45Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -391,4 +398,254 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n         stmtUpdateStock.clearBatch();\n     }\n   }\n+\n+  public void test(Connection conn, TPCCWorker w) throws Exception {\n+    //initializing all prepared statements\n+    stmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n+    stmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n+    stmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n+    stmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n+    stmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n+    stmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n+    stmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n+    stmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n+    stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n+    stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n+\n+    int count = 10;\n+    int wId = 1;\n+    int dId = 1;\n+    int cId = 1;\n+\n+    int[] itemIDs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    int[] supplierWhIds = {1, 2, 1, 1, 1, 1, 1, 1, 1, 1};\n+    int[] initialQty = {20, 20, 20, 20, 20, 11, 11, 11, 11, 11};\n+    InitializeStockValues(conn, count, itemIDs, supplierWhIds, initialQty);\n+    int nextOid = GetNextOid(conn, wId, dId);\n+\n+    int[] orderQts =   { 1,  2,  3,  4,  5,  6,  7,  8,  9, 10};\n+    int[] qtyArr = {19, 18, 17, 16, 15, 96, 95, 94, 93, 92};\n+    int[] orderCntArr = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n+    int[] remoteCntArr = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+    // TPC-C spec v5.11.0 section 4.2 describes the NewOrder transaction.\n+    // 1. wId is the Warehouse Id used for the transaction.\n+    // 2. dId is the District Id used for the transaction.\n+    // 3. cId is the customer Id used for the transaction.\n+    // 4. nextOid is the Order Id used for the next transaction. This is used in the OORDER table as\n+    //    well as the ORDER_LINE table.\n+    // 5. itemIDs are the items being worked on by this transaction.\n+    // 6. supplierWHIds are the corresponding Warehouse IDs. The combination of itemId and\n+    //    supplierWhId is used to figure out the STOCK table row to be modified. We also need to\n+    //    ensure that the ORDER_LINE table is populated with the same number of rows with the\n+    //    corresponding {itemId, supplierWhId} combination.\n+    // 7. orderQts is the quantity of each item that needs to be part of the order. This quantity\n+    //    needs to be reflected in every row in ORDER_LINE.\n+    // 8. qtyArr is the final expected value for `S_QUANTITY` in the STOCK table for the\n+    //    corresponding items. This value is calculated using the specification in section 2.4.2.2.\n+    // 9. ytdArr is the final expected value for `S_YTD` in the STOCK table for the corresponding\n+    //    items.\n+    // 10. orderCntArr is the final expected value for `S_ORDER_CNT` in the STOCK table for the\n+    //     corresponding items.\n+    // 11. remoteCntArr is the final expected value for `S_REMOTE_CNT` in the STOCK table for the\n+    //     corresponding items.\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid,\n+                              itemIDs, supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{19, 18, 17, 16, 15, 96, 95, 94, 93, 92} /* qtyArr */,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* ytdArr */,\n+                              new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1} /* orderCntArr */,\n+                              new int[]{0, 1, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid + 1,\n+                              itemIDs, supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{18, 16, 14, 12, 10, 90, 88, 86, 84, 82} /* qtyArr */,\n+                              new int[]{2, 4, 6, 8, 10, 12, 14, 16, 18, 20} /* ytdArr */,\n+                              new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2} /* orderCntArr */,\n+                              new int[]{0, 2, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+    // Test same item being present twice in the list of items.\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid + 2,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 1} /* itemIDs */,\n+                              supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{98, 14, 11, 99, 96, 84, 81, 78, 75, 98} /* qtyArr */,\n+                              new int[]{13, 6, 9, 12, 15, 18, 21, 24, 27, 13} /* ytdArr */,\n+                              new int[]{4, 3, 3, 3, 3, 3, 3, 3, 3, 4} /* orderCntArr */,\n+                              new int[]{0, 3, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+  }\n+\n+  void AssertNewOrderTransaction(Connection conn, TPCCWorker w,\n+                                 int count, int wId, int dId, int cId, int nextOid,\n+                                 int[] itemIDs, int[] supplierWhIds, int[] orderQts,\n+                                 int[] qtyArr, int[] ytdArr,\n+                                 int[] orderCntArr, int[] remoteCntArr) throws Exception {\n+    try{\n+      newOrderTransaction(wId, dId, cId, count, 0 /* o_all_local */, itemIDs, supplierWhIds,\n+                          orderQts, conn, w);\n+    } catch (Exception e) {\n+      LOG.error(\"Execution of the new order transaction failed\" + e);\n+      throw e;\n+    }\n+\n+    AssertDistValues(conn, wId, dId, nextOid + 1);\n+    LOG.info(\"Done asserting District\");\n+    AssertStockValues(conn, count, itemIDs, supplierWhIds, qtyArr, ytdArr, orderCntArr,\n+                      remoteCntArr);\n+    LOG.info(\"Done asserting STOCK\");\n+    AssertOOrderValues(conn, nextOid, wId, dId);\n+    LOG.info(\"Done asserting OORDER\");\n+    AssertOrderLineValues(conn, count, nextOid, wId, dId, itemIDs, supplierWhIds, orderQts);\n+    LOG.info(\"Done asserting ORDERLINE\");\n+  }\n+\n+  // Initializes the stock quantity with the specified values and sets the S_YTD, S_ORDER_CNT and\n+  // S_REMOTE_CNT to 0.\n+  void InitializeStockValues(Connection conn,int count,\n+                             int[] itemIDs, int[] supplierWhIds, int [] qtyArr) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      for (int i = 0; i < count; ++i) {\n+        stmt.execute(\n+          String.format(\"UPDATE STOCK SET S_QUANTITY = %d, S_YTD = 0, \" +\n+                        \"S_ORDER_CNT = 0, S_REMOTE_CNT = 0 WHERE S_W_ID = %d AND S_I_ID = %d\",\n+                        qtyArr[i], supplierWhIds[i], itemIDs[i]));\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Initializing rows in STOCK table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Returns the next OID specified in the DISTRICT table.\n+  int GetNextOid(Connection conn, int wId, int dId) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      ResultSet rs = stmt.executeQuery(\n+          String.format(\"SELECT * FROM DISTRICT WHERE D_W_ID = %d AND D_ID = %d\", wId, dId));\n+      if (!rs.next()) {\n+        throw new Exception(\"Reading rows from DISTRICT table failed\");\n+      }\n+      return rs.getInt(\"D_NEXT_O_ID\");\n+    } catch (Exception e) {\n+      LOG.error(\"Reading rows from DISTRICT table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Ensures that the DISTRICT table is updated with the proper OID.\n+  void AssertDistValues(Connection conn, int wId, int dId, int nextOId) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+\n+      ResultSet rs = stmt.executeQuery(\n+          String.format(\"SELECT * FROM DISTRICT WHERE D_W_ID = %d AND D_ID = %d\", wId, dId));\n+      if (!rs.next()) {\n+        throw new Exception(\"Reading row from DISTRICT table failed\");\n+      }\n+      if (rs.getInt(\"D_NEXT_O_ID\") != nextOId) {\n+          throw new Exception(String.format(\"Values not expected for DISTRICT (%d) (%d)\",\n+                                            rs.getInt(\"D_NEXT_O_ID\"), nextOId));\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Reading rows from DISTRICT table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Ensures that the STOCK table is updated with the proper values of quantity, ytd, order_cnt and\n+  // remote_cnt values.\n+  void AssertStockValues(Connection conn, int count,\n+                         int[] itemIDs, int[] supplierWhIds,\n+                         int[] qtyArr, int[] ytdArr,\n+                         int[] orderCntArr, int[] remoteCntArr) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      for (int i = 0; i < count; ++i) {\n+        int itemId = itemIDs[i];\n+        int supplieWhId = supplierWhIds[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTUwOA==", "bodyText": "Done", "url": "https://github.com/yugabyte/tpcc/pull/52#discussion_r492229508", "createdAt": "2020-09-21T17:30:11Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -391,4 +398,254 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n         stmtUpdateStock.clearBatch();\n     }\n   }\n+\n+  public void test(Connection conn, TPCCWorker w) throws Exception {\n+    //initializing all prepared statements\n+    stmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n+    stmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n+    stmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n+    stmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n+    stmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n+    stmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n+    stmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n+    stmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n+    stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n+    stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n+\n+    int count = 10;\n+    int wId = 1;\n+    int dId = 1;\n+    int cId = 1;\n+\n+    int[] itemIDs = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    int[] supplierWhIds = {1, 2, 1, 1, 1, 1, 1, 1, 1, 1};\n+    int[] initialQty = {20, 20, 20, 20, 20, 11, 11, 11, 11, 11};\n+    InitializeStockValues(conn, count, itemIDs, supplierWhIds, initialQty);\n+    int nextOid = GetNextOid(conn, wId, dId);\n+\n+    int[] orderQts =   { 1,  2,  3,  4,  5,  6,  7,  8,  9, 10};\n+    int[] qtyArr = {19, 18, 17, 16, 15, 96, 95, 94, 93, 92};\n+    int[] orderCntArr = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n+    int[] remoteCntArr = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+    // TPC-C spec v5.11.0 section 4.2 describes the NewOrder transaction.\n+    // 1. wId is the Warehouse Id used for the transaction.\n+    // 2. dId is the District Id used for the transaction.\n+    // 3. cId is the customer Id used for the transaction.\n+    // 4. nextOid is the Order Id used for the next transaction. This is used in the OORDER table as\n+    //    well as the ORDER_LINE table.\n+    // 5. itemIDs are the items being worked on by this transaction.\n+    // 6. supplierWHIds are the corresponding Warehouse IDs. The combination of itemId and\n+    //    supplierWhId is used to figure out the STOCK table row to be modified. We also need to\n+    //    ensure that the ORDER_LINE table is populated with the same number of rows with the\n+    //    corresponding {itemId, supplierWhId} combination.\n+    // 7. orderQts is the quantity of each item that needs to be part of the order. This quantity\n+    //    needs to be reflected in every row in ORDER_LINE.\n+    // 8. qtyArr is the final expected value for `S_QUANTITY` in the STOCK table for the\n+    //    corresponding items. This value is calculated using the specification in section 2.4.2.2.\n+    // 9. ytdArr is the final expected value for `S_YTD` in the STOCK table for the corresponding\n+    //    items.\n+    // 10. orderCntArr is the final expected value for `S_ORDER_CNT` in the STOCK table for the\n+    //     corresponding items.\n+    // 11. remoteCntArr is the final expected value for `S_REMOTE_CNT` in the STOCK table for the\n+    //     corresponding items.\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid,\n+                              itemIDs, supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{19, 18, 17, 16, 15, 96, 95, 94, 93, 92} /* qtyArr */,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* ytdArr */,\n+                              new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1} /* orderCntArr */,\n+                              new int[]{0, 1, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid + 1,\n+                              itemIDs, supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{18, 16, 14, 12, 10, 90, 88, 86, 84, 82} /* qtyArr */,\n+                              new int[]{2, 4, 6, 8, 10, 12, 14, 16, 18, 20} /* ytdArr */,\n+                              new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2} /* orderCntArr */,\n+                              new int[]{0, 2, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+    // Test same item being present twice in the list of items.\n+    AssertNewOrderTransaction(conn, w, count, wId, dId, cId, nextOid + 2,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 1} /* itemIDs */,\n+                              supplierWhIds,\n+                              new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} /* orderQts */,\n+                              new int[]{98, 14, 11, 99, 96, 84, 81, 78, 75, 98} /* qtyArr */,\n+                              new int[]{13, 6, 9, 12, 15, 18, 21, 24, 27, 13} /* ytdArr */,\n+                              new int[]{4, 3, 3, 3, 3, 3, 3, 3, 3, 4} /* orderCntArr */,\n+                              new int[]{0, 3, 0, 0, 0, 0, 0, 0, 0, 0} /* remoteCntArr */);\n+\n+  }\n+\n+  void AssertNewOrderTransaction(Connection conn, TPCCWorker w,\n+                                 int count, int wId, int dId, int cId, int nextOid,\n+                                 int[] itemIDs, int[] supplierWhIds, int[] orderQts,\n+                                 int[] qtyArr, int[] ytdArr,\n+                                 int[] orderCntArr, int[] remoteCntArr) throws Exception {\n+    try{\n+      newOrderTransaction(wId, dId, cId, count, 0 /* o_all_local */, itemIDs, supplierWhIds,\n+                          orderQts, conn, w);\n+    } catch (Exception e) {\n+      LOG.error(\"Execution of the new order transaction failed\" + e);\n+      throw e;\n+    }\n+\n+    AssertDistValues(conn, wId, dId, nextOid + 1);\n+    LOG.info(\"Done asserting District\");\n+    AssertStockValues(conn, count, itemIDs, supplierWhIds, qtyArr, ytdArr, orderCntArr,\n+                      remoteCntArr);\n+    LOG.info(\"Done asserting STOCK\");\n+    AssertOOrderValues(conn, nextOid, wId, dId);\n+    LOG.info(\"Done asserting OORDER\");\n+    AssertOrderLineValues(conn, count, nextOid, wId, dId, itemIDs, supplierWhIds, orderQts);\n+    LOG.info(\"Done asserting ORDERLINE\");\n+  }\n+\n+  // Initializes the stock quantity with the specified values and sets the S_YTD, S_ORDER_CNT and\n+  // S_REMOTE_CNT to 0.\n+  void InitializeStockValues(Connection conn,int count,\n+                             int[] itemIDs, int[] supplierWhIds, int [] qtyArr) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      for (int i = 0; i < count; ++i) {\n+        stmt.execute(\n+          String.format(\"UPDATE STOCK SET S_QUANTITY = %d, S_YTD = 0, \" +\n+                        \"S_ORDER_CNT = 0, S_REMOTE_CNT = 0 WHERE S_W_ID = %d AND S_I_ID = %d\",\n+                        qtyArr[i], supplierWhIds[i], itemIDs[i]));\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Initializing rows in STOCK table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Returns the next OID specified in the DISTRICT table.\n+  int GetNextOid(Connection conn, int wId, int dId) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      ResultSet rs = stmt.executeQuery(\n+          String.format(\"SELECT * FROM DISTRICT WHERE D_W_ID = %d AND D_ID = %d\", wId, dId));\n+      if (!rs.next()) {\n+        throw new Exception(\"Reading rows from DISTRICT table failed\");\n+      }\n+      return rs.getInt(\"D_NEXT_O_ID\");\n+    } catch (Exception e) {\n+      LOG.error(\"Reading rows from DISTRICT table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Ensures that the DISTRICT table is updated with the proper OID.\n+  void AssertDistValues(Connection conn, int wId, int dId, int nextOId) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+\n+      ResultSet rs = stmt.executeQuery(\n+          String.format(\"SELECT * FROM DISTRICT WHERE D_W_ID = %d AND D_ID = %d\", wId, dId));\n+      if (!rs.next()) {\n+        throw new Exception(\"Reading row from DISTRICT table failed\");\n+      }\n+      if (rs.getInt(\"D_NEXT_O_ID\") != nextOId) {\n+          throw new Exception(String.format(\"Values not expected for DISTRICT (%d) (%d)\",\n+                                            rs.getInt(\"D_NEXT_O_ID\"), nextOId));\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Reading rows from DISTRICT table failed \" + e);\n+      throw e;\n+    }\n+  }\n+\n+  // Ensures that the STOCK table is updated with the proper values of quantity, ytd, order_cnt and\n+  // remote_cnt values.\n+  void AssertStockValues(Connection conn, int count,\n+                         int[] itemIDs, int[] supplierWhIds,\n+                         int[] qtyArr, int[] ytdArr,\n+                         int[] orderCntArr, int[] remoteCntArr) throws Exception {\n+    try {\n+      Statement stmt = conn.createStatement();\n+      for (int i = 0; i < count; ++i) {\n+        int itemId = itemIDs[i];\n+        int supplieWhId = supplierWhIds[i];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDA0Nw=="}, "originalCommit": {"oid": "8d48ce25bad213fa741d155c6cf7665ea055e036"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 749, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}