{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzk1NDEz", "number": 25, "title": "Adding support for connection pooling in TPCC.", "bodyText": "Summary:\nWe need 10X the number of terminals with respect to the number of\nwarehouses to get a good TPM-C number. Each terminal gets its own\nconnection to perform transactions. This is fine for smaller number of\nwarehouses. But as the number increases, we reach the limit of the max\nnumber of connections supported by the DB.\nGiven that each terminal spends most of its time waiting for keying or\nfor thinking, we could reuse the connections across the terminals.\nThis change creates a Hikari pool one per endpoint and each worker gets\na reference to the pool rather than an actual connection. When the\nworker executes a transaction, it gets a connection from the pool and\ngives the connection back to the pool once the transaction is done.\nEach worker prepares a statement every time it executes a transaction.\nThis is fine since the driver has a cache of PreparedStatements per\nconnection of size 256. The number of unique statements in the\napplication is 33. Hence we don't send the PrepareStatement requests to\nthe server every time.\nReviewers:\nNeha, Mikhail, Karthik", "createdAt": "2020-06-11T02:07:27Z", "url": "https://github.com/yugabyte/tpcc/pull/25", "merged": true, "mergeCommit": {"oid": "e4f7e0e758e7100b30a2d08942b66c3ab1b52678"}, "closed": true, "closedAt": "2020-06-12T07:07:57Z", "author": {"login": "psudheer21"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqEaTTgH2gAyNDMyNzk1NDEzOmI0NzQ2OThkZWFhOGY5MTZlNmI1MGNlZTJmMmEzZDJlY2YzZDgyMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqdax-ABqjM0MzcxODc5NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/b474698deaa8f916e6b50cee2f2a3d2ecf3d8234", "committedDate": "2020-06-11T01:59:15Z", "message": "Adding support for connection pooling in TPCC.\n\nSummary:\nWe need 10X the number of terminals with respect to the number of\nwarehouses to get a good TPM-C number. Each terminal gets its own\nconnection to perform transactions. This is fine for smaller number of\nwarehouses. But as the number increases, we reach the limit of the max\nnumber of connections supported by the DB.\n\nGiven that each terminal spends most of its time waiting for keying or\nfor thinking, we could reuse the connections across the terminals.\n\nThis change creates a Hikari pool one per endpoint and each worker gets\na reference to the pool rather than an actual connection. When the\nworker executes a transaction, it gets a connection from the pool and\n gives the connection back to the pool once the transaction is done.\n\nEach worker prepares a statement every time it executes a transaction.\nThis is fine since the driver has a cache of PreparedStatements per\nconnection of size 256. The number of unique statements in the\napplication is 33. Hence we don't send the PrepareStatement requests to\nthe server every time.\n\nReviewers:\nNeha, Mikhail, Karthik"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTU1OTM4", "url": "https://github.com/yugabyte/tpcc/pull/25#pullrequestreview-428555938", "createdAt": "2020-06-11T02:45:56Z", "commit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjo0NTo1NlrOGiMqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozODo1MVrOGiOQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxMjI4OA==", "bodyText": "Fix this comment as well or remove it.", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438512288", "createdAt": "2020-06-11T02:45:56Z", "author": {"login": "mbautin"}, "path": "config/workload_all.xml", "diffHunk": "@@ -2,11 +2,13 @@\n <parameters>\r\n     <dbtype>postgres</dbtype>\r\n     <driver>org.postgresql.Driver</driver>\r\n-    <DBUrls>\r\n+    <nodes>\r\n       <!-- Add as many DBUrl as the number of nodes present.  -->\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNzQxMg==", "bodyText": "I don't agree with catching and ignoring exceptions. There must be a better way to get an element from an XML file. Or, if you must catch and ignore this particular exception, encapsulate that logic in a helper function taking an xml config and a key and do not wrap additional code in these exception-suppressing blocks.", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438537412", "createdAt": "2020-06-11T04:34:35Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -264,6 +264,26 @@ public static void main(String[] args) throws Exception {\n                 // Nothing to do here !\n             }\n \n+            try {\n+                wrkld.setPort(xmlConfig.getInt(\"port\"));\n+            } catch(NoSuchElementException nse) {\n+                // Nothing to do here !\n+            }\n+\n+            try {\n+                wrkld.setNumDBConnections(xmlConfig.getInt(\"numDBConnections\"));\n+            } catch(NoSuchElementException nse) {\n+                // Nothing to do here !\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNzY4MA==", "bodyText": "Fix indentation", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438537680", "createdAt": "2020-06-11T04:35:45Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -103,12 +105,12 @@ public DatabaseType getDBType() {\n         return db_type;\n     }\n \n-\tpublic void setDBConnections(List<String> connections) {\n-      this.dbConnections = connections;\n+\tpublic void setNodes(List<String> nodes) {\n+      this.nodes = nodes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNzcxMw==", "bodyText": "Fix indentation", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438537713", "createdAt": "2020-06-11T04:35:54Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -103,12 +105,12 @@ public DatabaseType getDBType() {\n         return db_type;\n     }\n \n-\tpublic void setDBConnections(List<String> connections) {\n-      this.dbConnections = connections;\n+\tpublic void setNodes(List<String> nodes) {\n+      this.nodes = nodes;\n \t}\n \n-\tpublic List<String> getDBConnections() {\n-\t\treturn dbConnections;\n+\tpublic List<String> getNodes() {\n+\t\treturn nodes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNzkyOA==", "bodyText": "Why are we just logging an exception and proceeding here? Wouldn't it be better to let the workload crash at this point? (E.g. wrap and re-throw the exception as a RuntimeException if necessary.)", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438537928", "createdAt": "2020-06-11T04:36:49Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -95,28 +99,37 @@ public BenchmarkModule(String benchmarkName, WorkloadConfiguration workConf, boo\n         this.catalog = (withCatalog ? new Catalog(this) : null);\n         File xmlFile = this.getSQLDialect();\n         this.dialects = new StatementDialects(this.workConf.getDBType(), xmlFile);\n+\n+        try {\n+            createDataSource();\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to create Data source\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODMwMQ==", "bodyText": "This should probably be a \"ceiling\" value, i.e. (totalConnections + numNodes - 1) / numNodes.", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438538301", "createdAt": "2020-06-11T04:38:21Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -95,28 +99,37 @@ public BenchmarkModule(String benchmarkName, WorkloadConfiguration workConf, boo\n         this.catalog = (withCatalog ? new Catalog(this) : null);\n         File xmlFile = this.getSQLDialect();\n         this.dialects = new StatementDialects(this.workConf.getDBType(), xmlFile);\n+\n+        try {\n+            createDataSource();\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to create Data source\", e);\n+        }\n     }\n \n-    // --------------------------------------------------------------------------\n-    // DATABASE CONNETION\n-    // --------------------------------------------------------------------------\n+    private List<HikariDataSource> listDataSource = new ArrayList<>();\n+\n+    public void createDataSource() throws SQLException {\n+        int numConnections = workConf.getNumDBConnections() / workConf.getNodes().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODQyMg==", "bodyText": "Add a space after the comma", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r438538422", "createdAt": "2020-06-11T04:38:51Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/TPCCWorker.java", "diffHunk": "@@ -67,7 +68,7 @@ public TPCCWorker(TPCCBenchmark benchmarkModule, int id,\n \t * Executes a single TPCC transaction of type transactionType.\n \t */\n \t@Override\n-    protected TransactionStatus executeWork(TransactionType nextTransaction) throws UserAbortException, SQLException {\n+    protected TransactionStatus executeWork(Connection conn,TransactionType nextTransaction) throws UserAbortException, SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b474698deaa8f916e6b50cee2f2a3d2ecf3d8234"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "593c92326cccbf74baa84c2344c096c47541c843", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/593c92326cccbf74baa84c2344c096c47541c843", "committedDate": "2020-06-11T23:40:15Z", "message": "Addressed comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mzc2Njk0", "url": "https://github.com/yugabyte/tpcc/pull/25#pullrequestreview-429376694", "createdAt": "2020-06-12T00:01:56Z", "commit": {"oid": "593c92326cccbf74baa84c2344c096c47541c843"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowMTo1NlrOGiylTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowMjozM1rOGiyl5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzUxOA==", "bodyText": "Nit: indentation seems inconsistent in this file.", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r439133518", "createdAt": "2020-06-12T00:01:56Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -43,14 +43,16 @@ public void setBenchmarkName(String benchmarkName) {\n         this.benchmarkName = benchmarkName;\n     }\n \n-    private List<String> dbConnections;\n+    private List<String> nodes;\n \tprivate String db_name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "593c92326cccbf74baa84c2344c096c47541c843"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzY2OA==", "bodyText": "Nit: remove an extra space after r", "url": "https://github.com/yugabyte/tpcc/pull/25#discussion_r439133668", "createdAt": "2020-06-12T00:02:33Z", "author": {"login": "mbautin"}, "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -87,36 +91,47 @@\n      */\n     private final Random rng = new Random();\n \n-    public BenchmarkModule(String benchmarkName, WorkloadConfiguration workConf, boolean withCatalog) {\n+    public BenchmarkModule(String benchmarkName, WorkloadConfiguration workConf, boolean withCatalog) throws Exception {\n         assert (workConf != null) : \"The WorkloadConfiguration instance is null.\";\n \n         this.benchmarkName = benchmarkName;\n         this.workConf = workConf;\n         this.catalog = (withCatalog ? new Catalog(this) : null);\n         File xmlFile = this.getSQLDialect();\n         this.dialects = new StatementDialects(this.workConf.getDBType(), xmlFile);\n+\n+        try {\n+            createDataSource();\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to create Data source\", e);\n+            throw e;\n+        }\n     }\n \n-    // --------------------------------------------------------------------------\n-    // DATABASE CONNETION\n-    // --------------------------------------------------------------------------\n+    private List<HikariDataSource> listDataSource = new ArrayList<>();\n+\n+    public void createDataSource() throws SQLException {\n+        int numConnections =\n+            (workConf.getNumDBConnections() + workConf.getNodes().size() - 1) / workConf.getNodes().size();\n+        for (String ip : workConf.getNodes()) {\n+            Properties props = new Properties();\n+            props.setProperty(\"dataSourceClassName\", \"org.postgresql.ds.PGSimpleDataSource\");\n+            props.setProperty(\"dataSource.serverName\", ip);\n+            props.setProperty(\"dataSource.portNumber\", Integer.toString(workConf.getPort()));\n+            props.setProperty(\"dataSource.user\", workConf.getDBUsername());\n+            props.setProperty(\"dataSource.password\", workConf.getDBPassword());\n+            props.setProperty(\"dataSource.databaseName\", workConf.getDBName());\n+            props.setProperty(\"maximumPoolSize\", Integer.toString(numConnections));\n+\n+            HikariConfig config = new HikariConfig(props);\n+            listDataSource.add(new HikariDataSource(config));\n+        }\n+    }\n \n-    /**\n-     *\n-     * @return\n-     * @throws SQLException\n-     */\n-    public final Connection makeConnection() throws SQLException {\n-        java.util.Properties props = new java.util.Properties();\n-        props.put(\"user\", workConf.getDBUsername());\n-        props.put(\"password\", workConf.getDBPassword());\n-        props.put(\"reWriteBatchedInserts\", \"true\");\n-\n-        List<String> dbConnections = workConf.getDBConnections();\n-        int r = (int)TPCCUtil.randomNumber(0, dbConnections.size() - 1, rng);\n-        Connection conn = DriverManager.getConnection(dbConnections.get(r), props);\n-        Catalog.setSeparator(conn);\n-        return (conn);\n+    private static AtomicInteger dataSourceCounter = new AtomicInteger(0);\n+    public final HikariDataSource getDataSource() {\n+        int r =  dataSourceCounter.getAndIncrement() % workConf.getNodes().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "593c92326cccbf74baa84c2344c096c47541c843"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6af2378b505889c9f0c281267627b7a46d70c5d", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/c6af2378b505889c9f0c281267627b7a46d70c5d", "committedDate": "2020-06-12T07:07:09Z", "message": "Reformat code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f6bdf7ab4d1944ffed336f48b92fafd26c2e322", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/6f6bdf7ab4d1944ffed336f48b92fafd26c2e322", "committedDate": "2020-06-12T07:04:58Z", "message": "Changed the formatting."}, "afterCommit": {"oid": "c6af2378b505889c9f0c281267627b7a46d70c5d", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/c6af2378b505889c9f0c281267627b7a46d70c5d", "committedDate": "2020-06-12T07:07:09Z", "message": "Reformat code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 463, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}