{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzcyODIz", "number": 1, "title": "Adding the tpcc specific benchmark.", "bodyText": "Summary:\nThis change is a fork of oltpbench with all the other benchmarks removed\nand using the yugabyte specific driver for communication with our\ndatabase.\n\nThe ivy.xml and pom.xml has the dependency changes.\nThe DBWorkload.java has some changes so that tpcc is the only benchmark\nthat is supported.\nREADME is modified with the required details to download/compile and\nuse the tool.\nconfig has the required changes to run the tool against our DB.\n\nReviewers: Karthik, Mihnea", "createdAt": "2020-01-10T10:05:34Z", "url": "https://github.com/yugabyte/tpcc/pull/1", "merged": true, "mergeCommit": {"oid": "025f012dae9e1e24a12ed6575d8e11b904bf209b"}, "closed": true, "closedAt": "2020-01-20T08:37:41Z", "author": {"login": "psudheer21"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb47lq7AH2gAyMzYxMzcyODIzOmJhMDBiZTVkODM3NDBlOTE2NWEyMjg3YTRmYTJiMTIwYTNhNjMxZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8ITTzgH2gAyMzYxMzcyODIzOmYxODZlYmRiYzYwOGRiYTgwYTE1MjhjYjExMzI4NWM5MTI1OTlkMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/ba00be5d83740e9165a2287a4fa2b120a3a631d2", "committedDate": "2020-01-10T10:00:14Z", "message": "Adding the tpcc specific benchmark.\n\nSummary:\nThis change is a fork of oltpbench with all the other benchmarks removed\nand using the yugabyte specific driver for communication with our\ndatabase.\n\n1. The ivy.xml and pom.xml has the dependency changes.\n2. The DBWorkload.java has some changes so that tpcc is the only benchmark\n   that is supported.\n3. README is modified with the required details to download/compile and\n   use the tool.\n4. config has the required changes to run the tool against our DB.\n\nReviewers: Karthik, Mihnea"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzAzOTA5", "url": "https://github.com/yugabyte/tpcc/pull/1#pullrequestreview-341303909", "createdAt": "2020-01-10T17:12:25Z", "commit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoxMjoyNVrOFcajxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoxODowNVrOFcas9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMzOTU4OA==", "bodyText": "Lets make this Yugabyte specific.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r365339588", "createdAt": "2020-01-10T17:12:25Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original bencmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+If you start from scratch, you should create an empty database (e.g., for TPC-C you can create a db named <b>tpcc</b>) and provide login credential to the benchmark, by modifying  <b>the workload descriptor file</b>. The ./config directory provides several examples, we now use the sample_tpcc_config.xml. You should edit the following portion:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>mysql</dbtype>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDIyOQ==", "bodyText": "Same: use YB config file in example.\nAs a next step, we can make -c optional and use a default YB tpcc config file.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r365340229", "createdAt": "2020-01-10T17:13:57Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original bencmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+If you start from scratch, you should create an empty database (e.g., for TPC-C you can create a db named <b>tpcc</b>) and provide login credential to the benchmark, by modifying  <b>the workload descriptor file</b>. The ./config directory provides several examples, we now use the sample_tpcc_config.xml. You should edit the following portion:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>mysql</dbtype>\n+    <driver>com.mysql.jdbc.Driver</driver>\n+    <DBUrl>jdbc:mysql://localhost:3306/tpcc</DBUrl>\n+    <username>root</username>\n+    <password>mysecretpassword</password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\n+````\n+\n+## Running the Benchmark\n+A utility script (./tpccbenchmark) is provided for running the benchmark. The options are\n+\n+```\n+-c,--config &lt;arg&gt;            [required] Workload configuration file\n+   --clear &lt;arg&gt;             Clear all records in the database for this\n+                             benchmark\n+   --create &lt;arg&gt;            Initialize the database for this benchmark\n+   --dialects-export &lt;arg&gt;   Export benchmark SQL to a dialects file\n+   --execute &lt;arg&gt;           Execute the benchmark workload\n+-h,--help                    Print this help\n+   --histograms              Print txn histograms\n+   --load &lt;arg&gt;              Load data using the benchmark's data loader\n+-o,--output &lt;arg&gt;            Output file (default System.out)\n+   --runscript &lt;arg&gt;         Run an SQL script\n+-s,--sample &lt;arg&gt;            Sampling window\n+-v,--verbose                 Display Messages\n+```\n+\n+## Example\n+The following command for example initiate a tpcc database (--create=true --load=true) and a then run a workload as described in config/sample_tpcc_config.xml file. The results (latency, throughput) are summarized into 5seconds buckets (-s 5) and the output is written into two file: outputfile.res (aggregated) and outputfile.raw (detailed):\n+\n+```\n+./tpccbenchmark -c config/sample_tpcc_config.xml --create=true --load=true --execute=true -s 5 -o outputfile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDU1Nw==", "bodyText": "Please provide ysql commands that users will need to run for this.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r365340557", "createdAt": "2020-01-10T17:14:47Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original bencmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+If you start from scratch, you should create an empty database (e.g., for TPC-C you can create a db named <b>tpcc</b>) and provide login credential to the benchmark, by modifying  <b>the workload descriptor file</b>. The ./config directory provides several examples, we now use the sample_tpcc_config.xml. You should edit the following portion:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MTk0Mw==", "bodyText": "I would recommend making the config file name more descriptive. For example, config_workload_1, config_workload_2 etc. We can also remove the yugabyte_tpcc prefix since this YB tpcc repo anyway.\nLets also add one more config to run all workloads (similar to what oltpbench has) - config_workload_all", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r365341943", "createdAt": "2020-01-10T17:18:05Z", "author": {"login": "ndeodhar"}, "path": "config/yugabyte_tpcc_config_1.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\"?>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba00be5d83740e9165a2287a4fa2b120a3a631d2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/fff0b2093ee12d22dd5703088a353f2966d3d9d1", "committedDate": "2020-01-13T08:32:57Z", "message": "Changes to README and configs\n\nSummary:\nAdded Yugabyte specific instructions in the README.\nMade changes to config to be Yugabyte specific.\n\nReviewers: Karthik, Mihnea, Neha"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzIzMjUx", "url": "https://github.com/yugabyte/tpcc/pull/1#pullrequestreview-344323251", "createdAt": "2020-01-17T01:45:27Z", "commit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTo0NToyOFrOFeswpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTo1NjozNlrOFes5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNDk1MQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n          \n          \n            \n            This is a fork of OLTPBench that is used to run the TPCC benchmark. All the other benchmarks have been removed.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367734951", "createdAt": "2020-01-17T01:45:28Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNTgyMA==", "bodyText": "Lets make this REPEATABLE_READ instead of READ_COMMITTED since that's the Yugabyte default. As a side note, we bump up \"read committed\" to be \"repeatable read\" anyway.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367735820", "createdAt": "2020-01-17T01:49:32Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original benchmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+The DB connection details should be as follows:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>postgres</dbtype>\n+    <driver>org.postgresql.Driver</driver>\n+    <DBUrl>jdbc:postgresql://<ip>:5433/yugabyte</DBUrl>\n+    <username>yugabyte</username>\n+    <password></password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNTk0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The details of the workloads has already been populated in the sample config present in /config.\n          \n          \n            \n            The details of the workloads have already been populated in the sample config present in /config.", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367735941", "createdAt": "2020-01-17T01:50:10Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original benchmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+The DB connection details should be as follows:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>postgres</dbtype>\n+    <driver>org.postgresql.Driver</driver>\n+    <DBUrl>jdbc:postgresql://<ip>:5433/yugabyte</DBUrl>\n+    <username>yugabyte</username>\n+    <password></password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\n+````\n+\n+The details of the workloads has already been populated in the sample config present in /config.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The workload descriptor works the same way as it is in the upstream branch and details can be found in the [on-line documentation](https://github.com/oltpbenchmark/oltpbench/wiki).\n          \n          \n            \n            The workload descriptor works the same way as it does in the upstream branch and details can be found in the [on-line documentation](https://github.com/oltpbenchmark/oltpbench/wiki).", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367736011", "createdAt": "2020-01-17T01:50:29Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original benchmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+The DB connection details should be as follows:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>postgres</dbtype>\n+    <driver>org.postgresql.Driver</driver>\n+    <DBUrl>jdbc:postgresql://<ip>:5433/yugabyte</DBUrl>\n+    <username>yugabyte</username>\n+    <password></password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\n+````\n+\n+The details of the workloads has already been populated in the sample config present in /config.\n+The workload descriptor works the same way as it is in the upstream branch and details can be found in the [on-line documentation](https://github.com/oltpbenchmark/oltpbench/wiki).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjMwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following command for example initiate a tpcc database (--create=true --load=true) and a then run a workload as described in config/workload_1.xml file. The results (latency, throughput) are summarized into 5 seconds buckets (-s 5) and the output is written into two file: outputfile.res (aggregated) and outputfile.raw (detailed):\n          \n          \n            \n            The following command, for example, initiates a tpcc database (--create=true --load=true) and then runs a workload as described in config/workload_1.xml file. The results (latency, throughput) are summarized into 5 seconds buckets (-s 5) and the output is written into two file: outputfile.res (aggregated) and outputfile.raw (detailed):", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367736303", "createdAt": "2020-01-17T01:51:38Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original benchmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+The DB connection details should be as follows:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>postgres</dbtype>\n+    <driver>org.postgresql.Driver</driver>\n+    <DBUrl>jdbc:postgresql://<ip>:5433/yugabyte</DBUrl>\n+    <username>yugabyte</username>\n+    <password></password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\n+````\n+\n+The details of the workloads has already been populated in the sample config present in /config.\n+The workload descriptor works the same way as it is in the upstream branch and details can be found in the [on-line documentation](https://github.com/oltpbenchmark/oltpbench/wiki).\n+\n+## Running the Benchmark\n+A utility script (./tpccbenchmark) is provided for running the benchmark. The options are\n+\n+```\n+-c,--config &lt;arg&gt;            [required] Workload configuration file\n+   --clear &lt;arg&gt;             Clear all records in the database for this\n+                             benchmark\n+   --create &lt;arg&gt;            Initialize the database for this benchmark\n+   --dialects-export &lt;arg&gt;   Export benchmark SQL to a dialects file\n+   --execute &lt;arg&gt;           Execute the benchmark workload\n+-h,--help                    Print this help\n+   --histograms              Print txn histograms\n+   --load &lt;arg&gt;              Load data using the benchmark's data loader\n+-o,--output &lt;arg&gt;            Output file (default System.out)\n+   --runscript &lt;arg&gt;         Run an SQL script\n+-s,--sample &lt;arg&gt;            Sampling window\n+-v,--verbose                 Display Messages\n+```\n+\n+## Example\n+The following command for example initiate a tpcc database (--create=true --load=true) and a then run a workload as described in config/workload_1.xml file. The results (latency, throughput) are summarized into 5 seconds buckets (-s 5) and the output is written into two file: outputfile.res (aggregated) and outputfile.raw (detailed):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Since data loading can be a lengthy process, one would first create a and populate a database which can be reused for multiple experiments:\n          \n          \n            \n            Since data loading can be a lengthy process, one could first create and populate a database which can then be reused for multiple experiments:", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367736527", "createdAt": "2020-01-17T01:52:46Z", "author": {"login": "ndeodhar"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,82 @@\n-# tpcc\n-Repo to run TPCC benchmarks against YugabyteDB\n+# TPCC benchmark\n+\n+This is a fork of Oltp bench that is used to run the TPCC benchmark. All the other benchmarks have been removed.\n+\n+\n+Just like the original benchmark this is a multi-threaded load generator. The framework is designed to be able to produce variable rate,\n+variable mixture load against any JDBC-enabled relational database. The framework also provides data collection\n+features, e.g., per-transaction-type latency and throughput logs.\n+\n+## Dependencies\n+\n++ Java (+1.7)\n++ Apache Ant\n+\n+\n+## Environment Setup\n++ Install Java and Ant.\n++ Download the source code.\n+  ```bash\n+  git clone https://github.com/yugabyte/tpcc.git\n+  ```\n++ Run the following commands to build:\n+  ```bash\n+  ant bootstrap\n+  ant resolve\n+  ant build\n+  ```\n+\n+## Setup of the Database\n+The DB connection details should be as follows:\n+\n+````xml\n+<!-- config/sample_tpcc_config.xml -->\n+    <!-- Connection details -->\n+    <dbtype>postgres</dbtype>\n+    <driver>org.postgresql.Driver</driver>\n+    <DBUrl>jdbc:postgresql://<ip>:5433/yugabyte</DBUrl>\n+    <username>yugabyte</username>\n+    <password></password>\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\n+````\n+\n+The details of the workloads has already been populated in the sample config present in /config.\n+The workload descriptor works the same way as it is in the upstream branch and details can be found in the [on-line documentation](https://github.com/oltpbenchmark/oltpbench/wiki).\n+\n+## Running the Benchmark\n+A utility script (./tpccbenchmark) is provided for running the benchmark. The options are\n+\n+```\n+-c,--config &lt;arg&gt;            [required] Workload configuration file\n+   --clear &lt;arg&gt;             Clear all records in the database for this\n+                             benchmark\n+   --create &lt;arg&gt;            Initialize the database for this benchmark\n+   --dialects-export &lt;arg&gt;   Export benchmark SQL to a dialects file\n+   --execute &lt;arg&gt;           Execute the benchmark workload\n+-h,--help                    Print this help\n+   --histograms              Print txn histograms\n+   --load &lt;arg&gt;              Load data using the benchmark's data loader\n+-o,--output &lt;arg&gt;            Output file (default System.out)\n+   --runscript &lt;arg&gt;         Run an SQL script\n+-s,--sample &lt;arg&gt;            Sampling window\n+-v,--verbose                 Display Messages\n+```\n+\n+## Example\n+The following command for example initiate a tpcc database (--create=true --load=true) and a then run a workload as described in config/workload_1.xml file. The results (latency, throughput) are summarized into 5 seconds buckets (-s 5) and the output is written into two file: outputfile.res (aggregated) and outputfile.raw (detailed):\n+\n+```\n+./tpccbenchmark -c config/workload_1.xml --create=true --load=true --execute=true -s 5 -o outputfile\n+```\n+\n+Since data loading can be a lengthy process, one would first create a and populate a database which can be reused for multiple experiments:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjc5Ng==", "bodyText": "Same comment here (and other config files): Lets use REPEATABLE READ", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367736796", "createdAt": "2020-01-17T01:54:11Z", "author": {"login": "ndeodhar"}, "path": "config/workload_1.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\"?>\r\n+<parameters>\r\n+    <dbtype>postgres</dbtype>\r\n+    <driver>org.postgresql.Driver</driver>\r\n+    <DBUrl>jdbc:postgresql://127.0.0.1:5433/yugabyte</DBUrl>\r\n+    <username>yugabyte</username>\r\n+    <password></password>\r\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNzIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <weights>45,43,3,3,3</weights>\n          \n          \n            \n                      <weights>45,43,4,4,4</weights>", "url": "https://github.com/yugabyte/tpcc/pull/1#discussion_r367737236", "createdAt": "2020-01-17T01:56:36Z", "author": {"login": "ndeodhar"}, "path": "config/workload_all.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\"?>\r\n+<parameters>\r\n+    <dbtype>postgres</dbtype>\r\n+    <driver>org.postgresql.Driver</driver>\r\n+    <DBUrl>jdbc:postgresql://127.0.0.1:5433/yugabyte</DBUrl>\r\n+    <username>yugabyte</username>\r\n+    <password></password>\r\n+    <isolation>TRANSACTION_READ_COMMITTED</isolation>\r\n+    <loaderThreads>2</loaderThreads>\r\n+\r\n+   \t<transactiontypes>\r\n+    \t<transactiontype>\r\n+    \t\t<name>NewOrder</name>\r\n+    \t</transactiontype>\r\n+    \t<transactiontype>\r\n+    \t\t<name>Payment</name>\r\n+    \t</transactiontype>\r\n+    \t<transactiontype>\r\n+    \t\t<name>OrderStatus</name>\r\n+    \t</transactiontype>\r\n+    \t<transactiontype>\r\n+    \t\t<name>Delivery</name>\r\n+    \t</transactiontype>\r\n+    \t<transactiontype>\r\n+    \t\t<name>StockLevel</name>\r\n+    \t</transactiontype>\r\n+   \t</transactiontypes>\r\n+\r\n+    <terminals>2</terminals>\r\n+    <scalefactor>2</scalefactor>\r\n+    <works>\r\n+        <work>\r\n+          <time>30</time>\r\n+          <rate>10000</rate>\r\n+          <ratelimited bench=\"tpcc\">true</ratelimited>\r\n+          <weights>45,43,3,3,3</weights>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff0b2093ee12d22dd5703088a353f2966d3d9d1"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33dd01395fb9a41402b379c2e647d338756f5d5", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/c33dd01395fb9a41402b379c2e647d338756f5d5", "committedDate": "2020-01-20T08:26:49Z", "message": "Changes to README and configs\n\nSummary:\nAdded Yugabyte specific instructions in the README.\nMade changes to config to be Yugabyte specific.\n\nReviewers: Karthik, Mihnea, Neha"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f186ebdbc608dba80a1528cb113285c912599d38", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/f186ebdbc608dba80a1528cb113285c912599d38", "committedDate": "2020-01-20T08:30:43Z", "message": "Merge branch 'new_tpcc' of github.com:yugabyte/tpcc into new_tpcc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 449, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}