{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNjk0Nzg4", "number": 45, "title": "Reduce client to database calls for New Order inserts and selects", "bodyText": "Summary:\nThis change involves:\n1. Batching the select for entries in Item into 1 statement using the\n'IN' predicate.\n2. Batching the select for entries in Stock into 1 statement using the\n'IN' predicate.\n3. Batching the insert for all entries into OrderLine using the\nmultirow VALUES syntax.\nReviewers:\nKarthik, Mihnea", "createdAt": "2020-08-01T02:01:19Z", "url": "https://github.com/yugabyte/tpcc/pull/45", "merged": true, "mergeCommit": {"oid": "7e0ee9d728b668390f8a451a12fb93e17fdcbfed"}, "closed": true, "closedAt": "2020-09-23T02:29:57Z", "author": {"login": "psudheer21"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7U5NOABqjM2MTY3NTc2MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLjDEhAFqTQ5Mzk4MzYyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04cd693b28693bb950d2add6a76ca4115d93eebf", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/04cd693b28693bb950d2add6a76ca4115d93eebf", "committedDate": "2020-08-01T02:00:37Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nReviewers:\nNeha, Karthik"}, "afterCommit": {"oid": "7e8a5a5767060c09499e6a46d583c494b12e7d78", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/7e8a5a5767060c09499e6a46d583c494b12e7d78", "committedDate": "2020-08-03T16:46:52Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nReviewers:\nNeha, Karthik"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e8a5a5767060c09499e6a46d583c494b12e7d78", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/7e8a5a5767060c09499e6a46d583c494b12e7d78", "committedDate": "2020-08-03T16:46:52Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nReviewers:\nNeha, Karthik"}, "afterCommit": {"oid": "851d7e591deb83bc19e0ede5401f175b940ea233", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/851d7e591deb83bc19e0ede5401f175b940ea233", "committedDate": "2020-08-03T20:18:52Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nReviewers:\nNeha, Karthik"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTE1NzE0", "url": "https://github.com/yugabyte/tpcc/pull/45#pullrequestreview-474915714", "createdAt": "2020-08-25T21:16:07Z", "commit": {"oid": "26de559d30a2d625ea147b2093ddecf5434633dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNjowOFrOHGqBdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNjowOFrOHGqBdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MjAwNA==", "bodyText": "might be cleaner to use something like this: https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r476742004", "createdAt": "2020-08-25T21:16:08Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -101,35 +85,77 @@\n \tprivate PreparedStatement stmtInsertNewOrder = null;\n \tprivate PreparedStatement stmtUpdateDist = null;\n \tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n \tprivate PreparedStatement stmtUpdateStock = null;\n \tprivate PreparedStatement stmtInsertOrderLine = null;\n+\tprivate PreparedStatement stmtGetItemsAndStock = null;\n+\n+\tpublic NewOrder() {\n+\t\tstmtGetItemsAndStockSQL = new SQLStmt[15];\n+\t\tstmtUpdateStockSQL = new SQLStmt[15];\n+\t\tstmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tsb.append(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA, \");\n+        sb.append(\"S_W_ID, S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10 FROM \");\n+\t\tsb.append(TPCCConstants.TABLENAME_ITEM);\n+\t\tsb.append(\", \");\n+\t\tsb.append(TPCCConstants.TABLENAME_STOCK);\n+\t\tsb.append(\" WHERE S_I_ID = I_ID AND S_W_ID = ? AND S_I_ID in (\");\n+\t\tfor (int ii = 1; ii <= 15; ++ii) {\n+\t\t\tif (ii == 1) sb.append(\"?\");\n+\t\t\telse sb.append(\",?\");\n+\t\t\tstmtGetItemsAndStockSQL[ii - 1] = new SQLStmt(sb.toString() + \") FOR UPDATE\");\n+\t\t}\n \n+\t\tsb = new StringBuilder();\n+\t\tsb.append(\"UPDATE \");\n+\t\tsb.append(TPCCConstants.TABLENAME_STOCK);\n+\t\tsb.append(\" SET S_QUANTITY = r.q, S_YTD = S_YTD + r.y, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = S_REMOTE_CNT + r.c \");\n+\t\tsb.append(\" FROM (SELECT \");\n+\n+\t\tStringBuilder sb2 = new StringBuilder();\n+\t\tsb2.append(\"UNNEST(ARRAY[\");\n+\n+\t\tfor (int ii = 1; ii <= 15; ++ii) {\n+\t\t\tif (ii == 1) sb2.append(\"?\");\n+\t\t\telse sb2.append(\", ?\");\n+\n+\t\t\tStringBuilder sb3 = new StringBuilder();\n+\t\t\tsb3.append(sb);\n+\t\t\tsb3.append(sb2);\n+\t\t\tsb3.append(\"]) as i, \");\n+\t\t\tsb3.append(sb2);\n+\t\t\tsb3.append(\"]) as q, \");\n+\t\t\tsb3.append(sb2);\n+\t\t\tsb3.append(\"]) as y, \");\n+\t\t\tsb3.append(sb2);\n+\t\t\tsb3.append(\"]) as c\");\n+\t\t\tsb3.append(\")r\");\n+\t\t\tsb3.append(\" WHERE STOCK.S_I_ID = r.i AND STOCK.S_W_ID = ?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26de559d30a2d625ea147b2093ddecf5434633dd"}, "originalPosition": 149}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26de559d30a2d625ea147b2093ddecf5434633dd", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/26de559d30a2d625ea147b2093ddecf5434633dd", "committedDate": "2020-08-04T18:22:38Z", "message": "Use a single update statement for all the updates"}, "afterCommit": {"oid": "619cd6d3fc6ff4f9a6b0cbecc5a31c7606e881ad", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/619cd6d3fc6ff4f9a6b0cbecc5a31c7606e881ad", "committedDate": "2020-09-11T17:02:33Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the update of all the entries in `Stock` using a PgSql\n   procedure.\n4. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "619cd6d3fc6ff4f9a6b0cbecc5a31c7606e881ad", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/619cd6d3fc6ff4f9a6b0cbecc5a31c7606e881ad", "committedDate": "2020-09-11T17:02:33Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the update of all the entries in `Stock` using a PgSql\n   procedure.\n4. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}, "afterCommit": {"oid": "8cab44cfd4e6f01b147257fe45c5e47f22b19c5c", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/8cab44cfd4e6f01b147257fe45c5e47f22b19c5c", "committedDate": "2020-09-11T19:41:45Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the update of all the entries in `Stock` using a PgSql\n   procedure.\n4. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cab44cfd4e6f01b147257fe45c5e47f22b19c5c", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/8cab44cfd4e6f01b147257fe45c5e47f22b19c5c", "committedDate": "2020-09-11T19:41:45Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the update of all the entries in `Stock` using a PgSql\n   procedure.\n4. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}, "afterCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/babcb0f41b8a7dc165e8af42e893cf30758373f7", "committedDate": "2020-09-16T07:12:41Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDI5Nzcz", "url": "https://github.com/yugabyte/tpcc/pull/45#pullrequestreview-490029773", "createdAt": "2020-09-16T21:21:33Z", "commit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToyMTozM1rOHTErCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo1MToxOVrOHTFfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2MTU0Ng==", "bodyText": "move this into the com.oltpbenchmark block.\nAlso any reason for reordering these import blocks?\nI think putting the more fundamental imports (e.g. java.util) first, and then the local-package imports (e.g. com.oltpbenchmark) is fairly common.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489761546", "createdAt": "2020-09-16T21:21:33Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2MzkxMw==", "bodyText": "something looks odd about indentation above (e.g. some lines not being changed, for others the highlighted spaces size&location differ)? If we are changing that can you double-check it is consistent. But probably easier to keep the existing style (or otherwise other files will now differ from the ones changed here).", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489763913", "createdAt": "2020-09-16T21:26:18Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjMyNw==", "bodyText": "nit: extra empty line.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489766327", "createdAt": "2020-09-16T21:31:31Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2ODAyNg==", "bodyText": "Add a comment here explaining how these are handled below.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489768026", "createdAt": "2020-09-16T21:35:27Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2ODIxNQ==", "bodyText": "nit: maybe add a comment/new-line before this line too (to separate the two kinds of statements now).\nAlso maybe mention how are we getting away with just having one prepared statement here (because they are cached somewhere else and this is just the current one)?", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489768215", "createdAt": "2020-09-16T21:35:54Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MDUxNA==", "bodyText": "nit: ii -> i", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489770514", "createdAt": "2020-09-16T21:41:06Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;\n+  private PreparedStatement stmtGetItem = null;\n+  private PreparedStatement stmtGetStock = null;\n+\n+  public NewOrder() {\n+    stmtGetItemSQL = new SQLStmt[15];\n+    stmtGetStockSQL = new SQLStmt[15];\n+    stmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int ii = 1; ii <= 15; ++ii) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MDkxNQ==", "bodyText": "ditto", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489770915", "createdAt": "2020-09-16T21:42:04Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;\n+  private PreparedStatement stmtGetItem = null;\n+  private PreparedStatement stmtGetStock = null;\n+\n+  public NewOrder() {\n+    stmtGetItemSQL = new SQLStmt[15];\n+    stmtGetStockSQL = new SQLStmt[15];\n+    stmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetItemSQL[ii - 1] = new SQLStmt(sb.toString() + \")\");\n+    }\n+\n+    // We create 15 statements for selecting rows from the `STOCK` table with varying number of\n+    // ITEM ids and a fixed WAREHOUSE id. Each string looks like:\n+    // SELECT I_I, I_NAME , I_DATA\n+    // FROM STOCK\n+    // WHERE S_W_ID = ? AND S_I_ID in (?, ? ..);\n+    sb = new StringBuilder();\n+    sb.append(\n+      String.format(\"SELECT S_W_ID, S_I_ID, S_QUANTITY, S_DATA, S_YTD, S_REMOTE_CNT, S_DIST_01, \" +\n+                    \"S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, \" +\n+                    \"S_DIST_09, S_DIST_10 FROM %s WHERE S_W_ID = ? AND S_I_ID in (\",\n+                    TPCCConstants.TABLENAME_STOCK));\n+    for (int ii = 1; ii <= 15; ++ii) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTAxNg==", "bodyText": "ditto", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489771016", "createdAt": "2020-09-16T21:42:15Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;\n+  private PreparedStatement stmtGetItem = null;\n+  private PreparedStatement stmtGetStock = null;\n+\n+  public NewOrder() {\n+    stmtGetItemSQL = new SQLStmt[15];\n+    stmtGetStockSQL = new SQLStmt[15];\n+    stmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetItemSQL[ii - 1] = new SQLStmt(sb.toString() + \")\");\n+    }\n+\n+    // We create 15 statements for selecting rows from the `STOCK` table with varying number of\n+    // ITEM ids and a fixed WAREHOUSE id. Each string looks like:\n+    // SELECT I_I, I_NAME , I_DATA\n+    // FROM STOCK\n+    // WHERE S_W_ID = ? AND S_I_ID in (?, ? ..);\n+    sb = new StringBuilder();\n+    sb.append(\n+      String.format(\"SELECT S_W_ID, S_I_ID, S_QUANTITY, S_DATA, S_YTD, S_REMOTE_CNT, S_DIST_01, \" +\n+                    \"S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, \" +\n+                    \"S_DIST_09, S_DIST_10 FROM %s WHERE S_W_ID = ? AND S_I_ID in (\",\n+                    TPCCConstants.TABLENAME_STOCK));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetStockSQL[ii - 1] = new SQLStmt(sb.toString() + \") FOR UPDATE\");\n+    }\n \n+    // We create 11 statements that insert into `ORDERLINE`. Each string looks like:\n+    // INSERT INTO ORDERLINE\n+    // (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT,\n+    //  OL_DIST_INFO)\n+    // VALUES (?,?,?,?,?,?,?,?,?), (?,?,?,?,?,?,?,?,?) ..\n+    sb = new StringBuilder();\n+    sb.append(String.format(\"INSERT INTO %s (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, \" +\n+                            \"OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) VALUES\",\n+                            TPCCConstants.TABLENAME_ORDERLINE));\n+    for (int ii = 1; ii <= 15; ++ii) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDgzMw==", "bodyText": "nit: ii -> i?", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489774833", "createdAt": "2020-09-16T21:51:06Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;\n+  private PreparedStatement stmtGetItem = null;\n+  private PreparedStatement stmtGetStock = null;\n+\n+  public NewOrder() {\n+    stmtGetItemSQL = new SQLStmt[15];\n+    stmtGetStockSQL = new SQLStmt[15];\n+    stmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetItemSQL[ii - 1] = new SQLStmt(sb.toString() + \")\");\n+    }\n+\n+    // We create 15 statements for selecting rows from the `STOCK` table with varying number of\n+    // ITEM ids and a fixed WAREHOUSE id. Each string looks like:\n+    // SELECT I_I, I_NAME , I_DATA\n+    // FROM STOCK\n+    // WHERE S_W_ID = ? AND S_I_ID in (?, ? ..);\n+    sb = new StringBuilder();\n+    sb.append(\n+      String.format(\"SELECT S_W_ID, S_I_ID, S_QUANTITY, S_DATA, S_YTD, S_REMOTE_CNT, S_DIST_01, \" +\n+                    \"S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, \" +\n+                    \"S_DIST_09, S_DIST_10 FROM %s WHERE S_W_ID = ? AND S_I_ID in (\",\n+                    TPCCConstants.TABLENAME_STOCK));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetStockSQL[ii - 1] = new SQLStmt(sb.toString() + \") FOR UPDATE\");\n+    }\n \n+    // We create 11 statements that insert into `ORDERLINE`. Each string looks like:\n+    // INSERT INTO ORDERLINE\n+    // (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT,\n+    //  OL_DIST_INFO)\n+    // VALUES (?,?,?,?,?,?,?,?,?), (?,?,?,?,?,?,?,?,?) ..\n+    sb = new StringBuilder();\n+    sb.append(String.format(\"INSERT INTO %s (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, \" +\n+                            \"OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) VALUES\",\n+                            TPCCConstants.TABLENAME_ORDERLINE));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"(?,?,?,?,?,?,?,?,?)\");\n+      } else {\n+        sb.append(\", (?,?,?,?,?,?,?,?,?)\");\n+      }\n+      if (ii >= 5) {\n+        stmtInsertOrderLineSQL[ii - 5] = new SQLStmt(sb.toString());\n+      }\n+    }\n+  }\n+\n+  public ResultSet run(Connection conn, Random gen,\n+      int terminalWarehouseID, int numWarehouses,\n+      int terminalDistrictLowerID, int terminalDistrictUpperID,\n+      TPCCWorker w) throws SQLException {\n+\n+    int districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n+    int customerID = TPCCUtil.getCustomerID(gen);\n+    int numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n+    int[] itemIDs = new int[numItems];\n+    int[] supplierWarehouseIDs = new int[numItems];\n+    int[] orderQuantities = new int[numItems];\n+    int allLocal = 1;\n+    for (int i = 0; i < numItems; i++) {\n+      itemIDs[i] = TPCCUtil.getItemID(gen);\n+      if (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n+        supplierWarehouseIDs[i] = terminalWarehouseID;\n+      } else {\n+        do {\n+          supplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n+              numWarehouses, gen);\n+        } while (supplierWarehouseIDs[i] == terminalWarehouseID\n+            && numWarehouses > 1);\n+        allLocal = 0;\n+      }\n+      orderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n     }\n \n+    // we need to cause 1% of the new orders to be rolled back.\n+    if (TPCCUtil.randomNumber(1, 100, gen) == 1)\n+      itemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n+\n+    //initializing all prepared statements\n+    stmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n+    stmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n+    stmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n+    stmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n+    stmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n+    stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n+    stmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n+    stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL[numItems - 5]);\n+\n+    newOrderTransaction(terminalWarehouseID, districtID,\n+            customerID, numItems, allLocal, itemIDs,\n+            supplierWarehouseIDs, orderQuantities, conn, w);\n+    return null;\n \n+    }\n \n+  private void newOrderTransaction(int w_id, int d_id, int c_id,\n+      int o_ol_cnt, int o_all_local, int[] itemIDs,\n+      int[] supplierWarehouseIDs, int[] orderQuantities, Connection conn, TPCCWorker w)\n+      throws SQLException {\n+    float c_discount, w_tax, d_tax = 0, i_price;\n+    int d_next_o_id, o_id = -1, s_quantity;\n+    String c_last = null, c_credit = null, i_name, i_data, s_data;\n+    String ol_dist_info = null;\n+    float[] itemPrices = new float[o_ol_cnt];\n+    float[] orderLineAmounts = new float[o_ol_cnt];\n+    String[] itemNames = new String[o_ol_cnt];\n+    int[] stockQuantities = new int[o_ol_cnt];\n+    char[] brandGeneric = new char[o_ol_cnt];\n+    int ol_supply_w_id, ol_i_id, ol_quantity;\n+    int s_remote_cnt_increment;\n+    float ol_amount, total_amount = 0;\n+\n+    try {\n+      stmtGetCust.setInt(1, w_id);\n+      stmtGetCust.setInt(2, d_id);\n+      stmtGetCust.setInt(3, c_id);\n+      ResultSet rs = stmtGetCust.executeQuery();\n+      if (!rs.next())\n+        throw new RuntimeException(\"C_D_ID=\" + d_id\n+            + \" C_ID=\" + c_id + \" not found!\");\n+      c_discount = rs.getFloat(\"C_DISCOUNT\");\n+      c_last = rs.getString(\"C_LAST\");\n+      c_credit = rs.getString(\"C_CREDIT\");\n+      rs.close();\n+      rs = null;\n+\n+      stmtGetWhse.setInt(1, w_id);\n+      rs = stmtGetWhse.executeQuery();\n+      if (!rs.next())\n+        throw new RuntimeException(\"W_ID=\" + w_id + \" not found!\");\n+      w_tax = rs.getFloat(\"W_TAX\");\n+      rs.close();\n+      rs = null;\n+\n+      stmtGetDist.setInt(1, w_id);\n+      stmtGetDist.setInt(2, d_id);\n+      rs = stmtGetDist.executeQuery();\n+      if (!rs.next()) {\n+        throw new RuntimeException(\"D_ID=\" + d_id + \" D_W_ID=\" + w_id\n+            + \" not found!\");\n+      }\n+      d_next_o_id = rs.getInt(\"D_NEXT_O_ID\");\n+      d_tax = rs.getFloat(\"D_TAX\");\n+      rs.close();\n+      rs = null;\n+\n+      //woonhak, need to change order because of foreign key constraints\n+      //update next_order_id first, but it might doesn't matter\n+      stmtUpdateDist.setInt(1, w_id);\n+      stmtUpdateDist.setInt(2, d_id);\n+      int result = stmtUpdateDist.executeUpdate();\n+      if (result == 0)\n+        throw new RuntimeException(\n+            \"Error!! Cannot update next_order_id on district for D_ID=\"\n+                + d_id + \" D_W_ID=\" + w_id);\n+\n+      o_id = d_next_o_id;\n+\n+      // woonhak, need to change order, because of foreign key constraints\n+      //[[insert ooder first\n+      stmtInsertOOrder.setInt(1, o_id);\n+      stmtInsertOOrder.setInt(2, d_id);\n+      stmtInsertOOrder.setInt(3, w_id);\n+      stmtInsertOOrder.setInt(4, c_id);\n+      stmtInsertOOrder.setTimestamp(5, w.getBenchmarkModule().getTimestamp(\n+          System.currentTimeMillis()));\n+      stmtInsertOOrder.setInt(6, o_ol_cnt);\n+      stmtInsertOOrder.setInt(7, o_all_local);\n+      stmtInsertOOrder.executeUpdate();\n+      //insert ooder first]]\n+      /*TODO: add error checking */\n+\n+      stmtInsertNewOrder.setInt(1, o_id);\n+      stmtInsertNewOrder.setInt(2, d_id);\n+      stmtInsertNewOrder.setInt(3, w_id);\n+      stmtInsertNewOrder.executeUpdate();\n+      /*TODO: add error checking */\n+\n+      float[] i_price_arr = new float[o_ol_cnt];\n+      String[] i_name_arr = new String[o_ol_cnt];\n+      String[] i_data_arr = new String[o_ol_cnt];\n+\n+      int[] s_qty_arr = new int[o_ol_cnt];\n+      String[] s_data_arr = new String[o_ol_cnt];\n+      String[] ol_dist_info_arr = new String[o_ol_cnt];\n+      int[] ytd_arr = new int[o_ol_cnt];\n+      int[] remote_cnt_arr = new int[o_ol_cnt];\n+\n+      getItemsAndStock(o_ol_cnt, w_id, d_id,\n+                       itemIDs, supplierWarehouseIDs, orderQuantities,\n+                       i_price_arr, i_name_arr, i_data_arr,\n+                       s_qty_arr, s_data_arr, ol_dist_info_arr,\n+                       ytd_arr, remote_cnt_arr, conn);\n+\n+      updateStock(o_ol_cnt, w_id, itemIDs, supplierWarehouseIDs,\n+                  orderQuantities, s_qty_arr, ytd_arr, remote_cnt_arr, conn);\n+\n+      total_amount = insertOrderLines(o_id, w_id, d_id, o_ol_cnt, itemIDs,\n+                                      supplierWarehouseIDs, orderQuantities,\n+                                      i_price_arr, i_data_arr, s_data_arr,\n+                                      ol_dist_info_arr, orderLineAmounts,\n+                                      brandGeneric);\n+      total_amount *= (1 + w_tax + d_tax) * (1 - c_discount);\n+    } catch(UserAbortException userEx) {\n+        LOG.debug(\"Caught an expected error in New Order\");\n+        throw userEx;\n+    } finally {\n+        if (stmtInsertOrderLine != null)\n+            stmtInsertOrderLine.clearBatch();\n+        if (stmtUpdateStock != null)\n+            stmtUpdateStock.clearBatch();\n+    }\n+  }\n+\n+  void getItemsAndStock(int o_ol_cnt, int w_id, int d_id,\n+                        int[] itemIDs, int[] supplierWarehouseIDs, int[] orderQuantities,\n+                        float[] i_price_arr, String[] i_name_arr, String[] i_data_arr,\n+                        int[] s_qty_arr, String[] s_data_arr, String[] ol_dist_info_arr,\n+                        int[] ytd_arr, int[] remote_cnt_arr,\n+                        Connection conn) throws  SQLException {\n+    Map<Integer, HashSet<Integer>> input = new HashMap<>();\n+    for (int ii = 0; ii < o_ol_cnt; ++ii) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 439}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDkzMA==", "bodyText": "add a comment for this function.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r489774930", "createdAt": "2020-09-16T21:51:19Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -16,394 +16,559 @@\n \n package com.oltpbenchmark.benchmarks.tpcc.procedures;\n \n+import com.oltpbenchmark.api.SQLStmt;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n+import org.apache.log4j.Logger;\n+\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Random;\n \n-import org.apache.log4j.Logger;\n-\n-import com.oltpbenchmark.api.SQLStmt;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;\n-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;\n+import com.oltpbenchmark.types.DatabaseType;\n \n public class NewOrder extends TPCCProcedure {\n \n     private static final Logger LOG = Logger.getLogger(NewOrder.class);\n \n     public final SQLStmt stmtGetCustSQL = new SQLStmt(\n-    \t\t\"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER + \n-\t        \" WHERE C_W_ID = ? \" + \n-\t        \"   AND C_D_ID = ? \" +\n-\t        \"   AND C_ID = ?\");\n+        \"SELECT C_DISCOUNT, C_LAST, C_CREDIT\" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_CUSTOMER +\n+          \" WHERE C_W_ID = ? \" +\n+          \"   AND C_D_ID = ? \" +\n+          \"   AND C_ID = ?\");\n \n     public final SQLStmt stmtGetWhseSQL = new SQLStmt(\n-    \t\t\"SELECT W_TAX \" + \n-\t\t    \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE + \n-\t\t    \" WHERE W_ID = ?\");\n-    \n+        \"SELECT W_TAX \" +\n+        \"  FROM \" + TPCCConstants.TABLENAME_WAREHOUSE +\n+        \" WHERE W_ID = ?\");\n+\n     public final SQLStmt stmtGetDistSQL = new SQLStmt(\n-    \t\t\"SELECT D_NEXT_O_ID, D_TAX \" +\n-\t        \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n-\t        \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n+        \"SELECT D_NEXT_O_ID, D_TAX \" +\n+          \"  FROM \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \" WHERE D_W_ID = ? AND D_ID = ? FOR UPDATE\");\n \n-\tpublic final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n-\t        \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n+  public final SQLStmt  stmtInsertNewOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_NEWORDER +\n+          \" (NO_O_ID, NO_D_ID, NO_W_ID) \" +\n             \" VALUES ( ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT + \n-\t        \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n+  public final SQLStmt  stmtUpdateDistSQL = new SQLStmt(\n+          \"UPDATE \" + TPCCConstants.TABLENAME_DISTRICT +\n+          \"   SET D_NEXT_O_ID = D_NEXT_O_ID + 1 \" +\n             \" WHERE D_W_ID = ? \" +\n-\t        \"   AND D_ID = ?\");\n+          \"   AND D_ID = ?\");\n \n-\tpublic final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER + \n-\t        \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" + \n+  public final SQLStmt  stmtInsertOOrderSQL = new SQLStmt(\n+          \"INSERT INTO \" + TPCCConstants.TABLENAME_OPENORDER +\n+          \" (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL)\" +\n             \" VALUES (?, ?, ?, ?, ?, ?, ?)\");\n \n-\tpublic final SQLStmt  stmtGetItemSQL = new SQLStmt(\n-\t        \"SELECT I_PRICE, I_NAME , I_DATA \" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_ITEM + \n-            \" WHERE I_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtGetStockSQL = new SQLStmt(\n-\t        \"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, \" +\n-            \"       S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10\" +\n-            \"  FROM \" + TPCCConstants.TABLENAME_STOCK + \n-            \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ? FOR UPDATE\");\n-\n-\tpublic final SQLStmt  stmtUpdateStockSQL = new SQLStmt(\n-\t        \"UPDATE \" + TPCCConstants.TABLENAME_STOCK + \n-\t        \"   SET S_QUANTITY = ? , \" +\n-            \"       S_YTD = S_YTD + ?, \" + \n-\t        \"       S_ORDER_CNT = S_ORDER_CNT + 1, \" +\n-            \"       S_REMOTE_CNT = S_REMOTE_CNT + ? \" +\n-\t        \" WHERE S_I_ID = ? \" +\n-            \"   AND S_W_ID = ?\");\n-\n-\tpublic final SQLStmt  stmtInsertOrderLineSQL = new SQLStmt(\n-\t        \"INSERT INTO \" + TPCCConstants.TABLENAME_ORDERLINE + \n-\t        \" (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\");\n-\n-\n-\t// NewOrder Txn\n-\tprivate PreparedStatement stmtGetCust = null;\n-\tprivate PreparedStatement stmtGetWhse = null;\n-\tprivate PreparedStatement stmtGetDist = null;\n-\tprivate PreparedStatement stmtInsertNewOrder = null;\n-\tprivate PreparedStatement stmtUpdateDist = null;\n-\tprivate PreparedStatement stmtInsertOOrder = null;\n-\tprivate PreparedStatement stmtGetItem = null;\n-\tprivate PreparedStatement stmtGetStock = null;\n-\tprivate PreparedStatement stmtUpdateStock = null;\n-\tprivate PreparedStatement stmtInsertOrderLine = null;\n-\n-\n-    public ResultSet run(Connection conn, Random gen,\n-\t\t\tint terminalWarehouseID, int numWarehouses,\n-\t\t\tint terminalDistrictLowerID, int terminalDistrictUpperID,\n-\t\t\tTPCCWorker w) throws SQLException {\n-\n-\n-\n-\t\t//initializing all prepared statements\n-\t\tstmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-\t\tstmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-\t\tstmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-\t\tstmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-\t\tstmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-\t\tstmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-\t\tstmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-\t\tstmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-\t\tstmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-\t\tstmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n-\n-\n-\t\tint districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n-\t\tint customerID = TPCCUtil.getCustomerID(gen);\n-\n-\t\tint numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n-\t\tint[] itemIDs = new int[numItems];\n-\t\tint[] supplierWarehouseIDs = new int[numItems];\n-\t\tint[] orderQuantities = new int[numItems];\n-\t\tint allLocal = 1;\n-\t\tfor (int i = 0; i < numItems; i++) {\n-\t\t\titemIDs[i] = TPCCUtil.getItemID(gen);\n-\t\t\tif (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n-\t\t\t\tsupplierWarehouseIDs[i] = terminalWarehouseID;\n-\t\t\t} else {\n-\t\t\t\tdo {\n-\t\t\t\t\tsupplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n-\t\t\t\t\t\t\tnumWarehouses, gen);\n-\t\t\t\t} while (supplierWarehouseIDs[i] == terminalWarehouseID\n-\t\t\t\t\t\t&& numWarehouses > 1);\n-\t\t\t\tallLocal = 0;\n-\t\t\t}\n-\t\t\torderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n-\t\t}\n-\n-\t\t// we need to cause 1% of the new orders to be rolled back.\n-\t\tif (TPCCUtil.randomNumber(1, 100, gen) == 1)\n-\t\t\titemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n-\n-\n-\t\tnewOrderTransaction(terminalWarehouseID, districtID,\n-\t\t\t\t\t\tcustomerID, numItems, allLocal, itemIDs,\n-\t\t\t\t\t\tsupplierWarehouseIDs, orderQuantities, conn, w);\n-\t\treturn null;\n+  public final SQLStmt stmtUpdateStockSQL = new SQLStmt(\n+      \"UPDATE \" + TPCCConstants.TABLENAME_STOCK +\n+      \" SET S_QUANTITY = ?, S_YTD = ?, S_ORDER_CNT = S_ORDER_CNT + 1,  S_REMOTE_CNT = ? \" +\n+      \"WHERE S_W_ID = ? AND S_I_ID = ?\");\n+\n+  public SQLStmt[] stmtGetItemSQL;\n+  public SQLStmt[] stmtGetStockSQL;\n+  public SQLStmt[] stmtInsertOrderLineSQL;\n+\n+\n+  // NewOrder Txn\n+  private PreparedStatement stmtGetCust = null;\n+  private PreparedStatement stmtGetWhse = null;\n+  private PreparedStatement stmtGetDist = null;\n+  private PreparedStatement stmtInsertNewOrder = null;\n+  private PreparedStatement stmtUpdateDist = null;\n+  private PreparedStatement stmtInsertOOrder = null;\n+  private PreparedStatement stmtUpdateStock = null;\n+  private PreparedStatement stmtInsertOrderLine = null;\n+  private PreparedStatement stmtGetItem = null;\n+  private PreparedStatement stmtGetStock = null;\n+\n+  public NewOrder() {\n+    stmtGetItemSQL = new SQLStmt[15];\n+    stmtGetStockSQL = new SQLStmt[15];\n+    stmtInsertOrderLineSQL = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetItemSQL[ii - 1] = new SQLStmt(sb.toString() + \")\");\n+    }\n+\n+    // We create 15 statements for selecting rows from the `STOCK` table with varying number of\n+    // ITEM ids and a fixed WAREHOUSE id. Each string looks like:\n+    // SELECT I_I, I_NAME , I_DATA\n+    // FROM STOCK\n+    // WHERE S_W_ID = ? AND S_I_ID in (?, ? ..);\n+    sb = new StringBuilder();\n+    sb.append(\n+      String.format(\"SELECT S_W_ID, S_I_ID, S_QUANTITY, S_DATA, S_YTD, S_REMOTE_CNT, S_DIST_01, \" +\n+                    \"S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, \" +\n+                    \"S_DIST_09, S_DIST_10 FROM %s WHERE S_W_ID = ? AND S_I_ID in (\",\n+                    TPCCConstants.TABLENAME_STOCK));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetStockSQL[ii - 1] = new SQLStmt(sb.toString() + \") FOR UPDATE\");\n+    }\n \n+    // We create 11 statements that insert into `ORDERLINE`. Each string looks like:\n+    // INSERT INTO ORDERLINE\n+    // (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT,\n+    //  OL_DIST_INFO)\n+    // VALUES (?,?,?,?,?,?,?,?,?), (?,?,?,?,?,?,?,?,?) ..\n+    sb = new StringBuilder();\n+    sb.append(String.format(\"INSERT INTO %s (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, \" +\n+                            \"OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) VALUES\",\n+                            TPCCConstants.TABLENAME_ORDERLINE));\n+    for (int ii = 1; ii <= 15; ++ii) {\n+      if (ii == 1) {\n+        sb.append(\"(?,?,?,?,?,?,?,?,?)\");\n+      } else {\n+        sb.append(\", (?,?,?,?,?,?,?,?,?)\");\n+      }\n+      if (ii >= 5) {\n+        stmtInsertOrderLineSQL[ii - 5] = new SQLStmt(sb.toString());\n+      }\n+    }\n+  }\n+\n+  public ResultSet run(Connection conn, Random gen,\n+      int terminalWarehouseID, int numWarehouses,\n+      int terminalDistrictLowerID, int terminalDistrictUpperID,\n+      TPCCWorker w) throws SQLException {\n+\n+    int districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);\n+    int customerID = TPCCUtil.getCustomerID(gen);\n+    int numItems = (int) TPCCUtil.randomNumber(5, 15, gen);\n+    int[] itemIDs = new int[numItems];\n+    int[] supplierWarehouseIDs = new int[numItems];\n+    int[] orderQuantities = new int[numItems];\n+    int allLocal = 1;\n+    for (int i = 0; i < numItems; i++) {\n+      itemIDs[i] = TPCCUtil.getItemID(gen);\n+      if (TPCCUtil.randomNumber(1, 100, gen) > 1) {\n+        supplierWarehouseIDs[i] = terminalWarehouseID;\n+      } else {\n+        do {\n+          supplierWarehouseIDs[i] = TPCCUtil.randomNumber(1,\n+              numWarehouses, gen);\n+        } while (supplierWarehouseIDs[i] == terminalWarehouseID\n+            && numWarehouses > 1);\n+        allLocal = 0;\n+      }\n+      orderQuantities[i] = TPCCUtil.randomNumber(1, 10, gen);\n     }\n \n+    // we need to cause 1% of the new orders to be rolled back.\n+    if (TPCCUtil.randomNumber(1, 100, gen) == 1)\n+      itemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n+\n+    //initializing all prepared statements\n+    stmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n+    stmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n+    stmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n+    stmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n+    stmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n+    stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n+    stmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n+    stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL[numItems - 5]);\n+\n+    newOrderTransaction(terminalWarehouseID, districtID,\n+            customerID, numItems, allLocal, itemIDs,\n+            supplierWarehouseIDs, orderQuantities, conn, w);\n+    return null;\n \n+    }\n \n+  private void newOrderTransaction(int w_id, int d_id, int c_id,\n+      int o_ol_cnt, int o_all_local, int[] itemIDs,\n+      int[] supplierWarehouseIDs, int[] orderQuantities, Connection conn, TPCCWorker w)\n+      throws SQLException {\n+    float c_discount, w_tax, d_tax = 0, i_price;\n+    int d_next_o_id, o_id = -1, s_quantity;\n+    String c_last = null, c_credit = null, i_name, i_data, s_data;\n+    String ol_dist_info = null;\n+    float[] itemPrices = new float[o_ol_cnt];\n+    float[] orderLineAmounts = new float[o_ol_cnt];\n+    String[] itemNames = new String[o_ol_cnt];\n+    int[] stockQuantities = new int[o_ol_cnt];\n+    char[] brandGeneric = new char[o_ol_cnt];\n+    int ol_supply_w_id, ol_i_id, ol_quantity;\n+    int s_remote_cnt_increment;\n+    float ol_amount, total_amount = 0;\n+\n+    try {\n+      stmtGetCust.setInt(1, w_id);\n+      stmtGetCust.setInt(2, d_id);\n+      stmtGetCust.setInt(3, c_id);\n+      ResultSet rs = stmtGetCust.executeQuery();\n+      if (!rs.next())\n+        throw new RuntimeException(\"C_D_ID=\" + d_id\n+            + \" C_ID=\" + c_id + \" not found!\");\n+      c_discount = rs.getFloat(\"C_DISCOUNT\");\n+      c_last = rs.getString(\"C_LAST\");\n+      c_credit = rs.getString(\"C_CREDIT\");\n+      rs.close();\n+      rs = null;\n+\n+      stmtGetWhse.setInt(1, w_id);\n+      rs = stmtGetWhse.executeQuery();\n+      if (!rs.next())\n+        throw new RuntimeException(\"W_ID=\" + w_id + \" not found!\");\n+      w_tax = rs.getFloat(\"W_TAX\");\n+      rs.close();\n+      rs = null;\n+\n+      stmtGetDist.setInt(1, w_id);\n+      stmtGetDist.setInt(2, d_id);\n+      rs = stmtGetDist.executeQuery();\n+      if (!rs.next()) {\n+        throw new RuntimeException(\"D_ID=\" + d_id + \" D_W_ID=\" + w_id\n+            + \" not found!\");\n+      }\n+      d_next_o_id = rs.getInt(\"D_NEXT_O_ID\");\n+      d_tax = rs.getFloat(\"D_TAX\");\n+      rs.close();\n+      rs = null;\n+\n+      //woonhak, need to change order because of foreign key constraints\n+      //update next_order_id first, but it might doesn't matter\n+      stmtUpdateDist.setInt(1, w_id);\n+      stmtUpdateDist.setInt(2, d_id);\n+      int result = stmtUpdateDist.executeUpdate();\n+      if (result == 0)\n+        throw new RuntimeException(\n+            \"Error!! Cannot update next_order_id on district for D_ID=\"\n+                + d_id + \" D_W_ID=\" + w_id);\n+\n+      o_id = d_next_o_id;\n+\n+      // woonhak, need to change order, because of foreign key constraints\n+      //[[insert ooder first\n+      stmtInsertOOrder.setInt(1, o_id);\n+      stmtInsertOOrder.setInt(2, d_id);\n+      stmtInsertOOrder.setInt(3, w_id);\n+      stmtInsertOOrder.setInt(4, c_id);\n+      stmtInsertOOrder.setTimestamp(5, w.getBenchmarkModule().getTimestamp(\n+          System.currentTimeMillis()));\n+      stmtInsertOOrder.setInt(6, o_ol_cnt);\n+      stmtInsertOOrder.setInt(7, o_all_local);\n+      stmtInsertOOrder.executeUpdate();\n+      //insert ooder first]]\n+      /*TODO: add error checking */\n+\n+      stmtInsertNewOrder.setInt(1, o_id);\n+      stmtInsertNewOrder.setInt(2, d_id);\n+      stmtInsertNewOrder.setInt(3, w_id);\n+      stmtInsertNewOrder.executeUpdate();\n+      /*TODO: add error checking */\n+\n+      float[] i_price_arr = new float[o_ol_cnt];\n+      String[] i_name_arr = new String[o_ol_cnt];\n+      String[] i_data_arr = new String[o_ol_cnt];\n+\n+      int[] s_qty_arr = new int[o_ol_cnt];\n+      String[] s_data_arr = new String[o_ol_cnt];\n+      String[] ol_dist_info_arr = new String[o_ol_cnt];\n+      int[] ytd_arr = new int[o_ol_cnt];\n+      int[] remote_cnt_arr = new int[o_ol_cnt];\n+\n+      getItemsAndStock(o_ol_cnt, w_id, d_id,\n+                       itemIDs, supplierWarehouseIDs, orderQuantities,\n+                       i_price_arr, i_name_arr, i_data_arr,\n+                       s_qty_arr, s_data_arr, ol_dist_info_arr,\n+                       ytd_arr, remote_cnt_arr, conn);\n+\n+      updateStock(o_ol_cnt, w_id, itemIDs, supplierWarehouseIDs,\n+                  orderQuantities, s_qty_arr, ytd_arr, remote_cnt_arr, conn);\n+\n+      total_amount = insertOrderLines(o_id, w_id, d_id, o_ol_cnt, itemIDs,\n+                                      supplierWarehouseIDs, orderQuantities,\n+                                      i_price_arr, i_data_arr, s_data_arr,\n+                                      ol_dist_info_arr, orderLineAmounts,\n+                                      brandGeneric);\n+      total_amount *= (1 + w_tax + d_tax) * (1 - c_discount);\n+    } catch(UserAbortException userEx) {\n+        LOG.debug(\"Caught an expected error in New Order\");\n+        throw userEx;\n+    } finally {\n+        if (stmtInsertOrderLine != null)\n+            stmtInsertOrderLine.clearBatch();\n+        if (stmtUpdateStock != null)\n+            stmtUpdateStock.clearBatch();\n+    }\n+  }\n+\n+  void getItemsAndStock(int o_ol_cnt, int w_id, int d_id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7"}, "originalPosition": 432}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "babcb0f41b8a7dc165e8af42e893cf30758373f7", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/babcb0f41b8a7dc165e8af42e893cf30758373f7", "committedDate": "2020-09-16T07:12:41Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}, "afterCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/0201eddc1fc7c6747d75ccdda9e3a9de256ddf27", "committedDate": "2020-09-22T20:53:32Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTY5NDYy", "url": "https://github.com/yugabyte/tpcc/pull/45#pullrequestreview-493969462", "createdAt": "2020-09-23T01:32:09Z", "commit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTozMjowOVrOHWSFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTozNjozMlrOHWSQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyNzA2Mg==", "bodyText": "nit: space after //, start sentence with capital letter and . at the end.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r493127062", "createdAt": "2020-09-23T01:32:09Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -152,22 +211,31 @@ public ResultSet run(Connection conn, Random gen,\n     if (TPCCUtil.randomNumber(1, 100, gen) == 1)\n       itemIDs[numItems - 1] = TPCCConfig.INVALID_ITEM_ID;\n \n+    //initializing all prepared statements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyNzY0NA==", "bodyText": "nit: space after -", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r493127644", "createdAt": "2020-09-23T01:33:05Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -243,165 +311,299 @@ private void newOrderTransaction(int w_id, int d_id, int c_id,\n       stmtInsertNewOrder.executeUpdate();\n       /*TODO: add error checking */\n \n+      float[] i_price_arr = new float[o_ol_cnt];\n+      String[] i_name_arr = new String[o_ol_cnt];\n+      String[] i_data_arr = new String[o_ol_cnt];\n+\n+      int[] s_qty_arr = new int[o_ol_cnt];\n+      String[] s_data_arr = new String[o_ol_cnt];\n+      String[] ol_dist_info_arr = new String[o_ol_cnt];\n+      int[] ytd_arr = new int[o_ol_cnt];\n+      int[] remote_cnt_arr = new int[o_ol_cnt];\n+\n+      getItemsAndStock(o_ol_cnt, w_id, d_id,\n+                       itemIDs, supplierWarehouseIDs, orderQuantities,\n+                       i_price_arr, i_name_arr, i_data_arr,\n+                       s_qty_arr, s_data_arr, ol_dist_info_arr,\n+                       ytd_arr, remote_cnt_arr, conn);\n+\n+      updateStock(o_ol_cnt, w_id, itemIDs, supplierWarehouseIDs,\n+                  orderQuantities, s_qty_arr, ytd_arr, remote_cnt_arr, conn);\n+\n+      total_amount = insertOrderLines(o_id, w_id, d_id, o_ol_cnt, itemIDs,\n+                                      supplierWarehouseIDs, orderQuantities,\n+                                      i_price_arr, i_data_arr, s_data_arr,\n+                                      ol_dist_info_arr, orderLineAmounts,\n+                                      brandGeneric);\n+      total_amount *= (1 + w_tax + d_tax) * (1 - c_discount);\n+    } catch(UserAbortException userEx) {\n+        LOG.debug(\"Caught an expected error in New Order\");\n+        throw userEx;\n+    } finally {\n+        if (stmtInsertOrderLine != null)\n+            stmtInsertOrderLine.clearBatch();\n+        if (stmtUpdateStock != null)\n+            stmtUpdateStock.clearBatch();\n+    }\n+  }\n \n-      /* woonhak, [[change order\n-      stmtInsertOOrder.setInt(1, o_id);\n-      stmtInsertOOrder.setInt(2, d_id);\n-      stmtInsertOOrder.setInt(3, w_id);\n-      stmtInsertOOrder.setInt(4, c_id);\n-      stmtInsertOOrder.setTimestamp(5,\n-          new Timestamp(System.currentTimeMillis()));\n-      stmtInsertOOrder.setInt(6, o_ol_cnt);\n-      stmtInsertOOrder.setInt(7, o_all_local);\n-      stmtInsertOOrder.executeUpdate();\n-      change order]]*/\n-\n-      Set<Integer> itemSet = new HashSet<Integer>();\n-      for (int ol_number = 1; ol_number <= o_ol_cnt; ol_number++) {\n-        ol_supply_w_id = supplierWarehouseIDs[ol_number - 1];\n-        ol_i_id = itemIDs[ol_number - 1];\n-\n-        // If the item is present multiple times in the list, flush the outstanding updates/inserts\n-        // so that this update can use the correct values.\n-        if (itemSet.contains(ol_i_id)) {\n-          stmtInsertOrderLine.executeBatch();\n-          stmtUpdateStock.executeBatch();\n+  // This function queries the ITEM and the STOCK table to get the information pertaining to the\n+  // items that are part of this order. The state is saved in the corresponding arrays.\n+  void getItemsAndStock(int o_ol_cnt, int w_id, int d_id,\n+                        int[] itemIDs, int[] supplierWarehouseIDs, int[] orderQuantities,\n+                        float[] i_price_arr, String[] i_name_arr, String[] i_data_arr,\n+                        int[] s_qty_arr, String[] s_data_arr, String[] ol_dist_info_arr,\n+                        int[] ytd_arr, int[] remote_cnt_arr,\n+                        Connection conn) throws  SQLException {\n+\n+    Map<Integer, HashSet<Integer>> input = new HashMap<>();\n+    for (int i = 0; i < o_ol_cnt; ++i) {\n+      int itemId = itemIDs[i];\n+      int supplierWh = supplierWarehouseIDs[i];\n+      if (!input.containsKey(supplierWh)) {\n+        input.put(supplierWh, new HashSet<>());\n+      }\n+      input.get(supplierWh).add(itemId);\n+    }\n+\n+    for (Map.Entry<Integer, HashSet<Integer>> entry : input.entrySet()) {\n+      stmtGetItem = this.getPreparedStatement(conn, stmtGetItemSQLArr[entry.getValue().size() - 1]);\n+      int k = 1;\n+      for (int itemId : entry.getValue()) {\n+        stmtGetItem.setInt(k++,  itemId);\n+      }\n+      ResultSet rs1 = stmtGetItem.executeQuery();\n+\n+      stmtGetStock =\n+        this.getPreparedStatement(conn, stmtGetStockSQLArr[entry.getValue().size() - 1]);\n+      k = 1;\n+      stmtGetStock.setInt(k++, entry.getKey() /* supplier WH */);\n+      for (int itemId: entry.getValue()) {\n+        stmtGetStock.setInt(k++, itemId);\n+      }\n+      ResultSet rs2 = stmtGetStock.executeQuery();\n+\n+      Map<Integer, Integer> m = new HashMap<>();\n+      for (int i = 0; i < itemIDs.length; ++i) {\n+        int expected = itemIDs[i];\n+        if (m.containsKey(expected)) {\n+          continue;\n+                }\n+        if (!rs1.next()) {\n+          throw new UserAbortException(\"EXPECTED new order rollback: I_ID=\" +\n+                                       TPCCConfig.INVALID_ITEM_ID + \"not found\");\n         }\n-        itemSet.add(ol_i_id);\n-        ol_quantity = orderQuantities[ol_number - 1];\n-        stmtGetItem.setInt(1, ol_i_id);\n-        rs = stmtGetItem.executeQuery();\n-        if (!rs.next()) {\n-          // This is (hopefully) an expected error: this is an\n-          // expected new order rollback\n-          assert ol_number == o_ol_cnt;\n-          assert ol_i_id == TPCCConfig.INVALID_ITEM_ID;\n-          rs.close();\n-          throw new UserAbortException(\n-              \"EXPECTED new order rollback: I_ID=\" + ol_i_id\n-                  + \" not found!\");\n+        if (!rs2.next()) {\n+          throw new UserAbortException(\"EXPECTED new order rollback: I_ID=\" +\n+                                       TPCCConfig.INVALID_ITEM_ID + \"not found\");\n         }\n \n-        i_price = rs.getFloat(\"I_PRICE\");\n-        i_name = rs.getString(\"I_NAME\");\n-        i_data = rs.getString(\"I_DATA\");\n-        rs.close();\n-        rs = null;\n-\n-        itemPrices[ol_number - 1] = i_price;\n-        itemNames[ol_number - 1] = i_name;\n-\n-\n-        stmtGetStock.setInt(1, ol_i_id);\n-        stmtGetStock.setInt(2, ol_supply_w_id);\n-        rs = stmtGetStock.executeQuery();\n-        if (!rs.next())\n-          throw new RuntimeException(\"I_ID=\" + ol_i_id\n-              + \" not found!\");\n-        s_quantity = rs.getInt(\"S_QUANTITY\");\n-        s_data = rs.getString(\"S_DATA\");\n-        s_dist_01 = rs.getString(\"S_DIST_01\");\n-        s_dist_02 = rs.getString(\"S_DIST_02\");\n-        s_dist_03 = rs.getString(\"S_DIST_03\");\n-        s_dist_04 = rs.getString(\"S_DIST_04\");\n-        s_dist_05 = rs.getString(\"S_DIST_05\");\n-        s_dist_06 = rs.getString(\"S_DIST_06\");\n-        s_dist_07 = rs.getString(\"S_DIST_07\");\n-        s_dist_08 = rs.getString(\"S_DIST_08\");\n-        s_dist_09 = rs.getString(\"S_DIST_09\");\n-        s_dist_10 = rs.getString(\"S_DIST_10\");\n-        rs.close();\n-        rs = null;\n-\n-        stockQuantities[ol_number - 1] = s_quantity;\n-\n-        if (s_quantity - ol_quantity >= 10) {\n-          s_quantity -= ol_quantity;\n+        int itemId = rs1.getInt(\"I_ID\");\n+        assert (itemId == expected);\n+        itemId = rs2.getInt(\"S_I_ID\");\n+        assert (itemId == expected);\n+\n+        float price = rs1.getFloat(\"I_PRICE\");\n+        String name = rs1.getString(\"I_NAME\");\n+        String data = rs1.getString(\"I_DATA\");\n+\n+        int s_quantity = rs2.getInt(\"S_QUANTITY\");\n+        String s_data = rs2.getString(\"S_DATA\");\n+        String ol_dist_info = getDistInfo(rs2, d_id);\n+        int supplierWh = rs2.getInt(\"S_W_ID\");\n+\n+        int ytd = rs2.getInt(\"S_YTD\");\n+        int remote_cnt = rs2.getInt(\"S_REMOTE_CNT\");\n+\n+        storeInfo(itemIDs, supplierWarehouseIDs, orderQuantities,\n+                  itemId, w_id, supplierWh,\n+                  price, name, data, s_quantity, s_data, ol_dist_info,\n+                  ytd, remote_cnt,\n+                  i_price_arr, i_name_arr, i_data_arr,\n+                  s_qty_arr, s_data_arr, ol_dist_info_arr,\n+                  ytd_arr, remote_cnt_arr);\n+      }\n+      rs1.close();\n+      rs2.close();\n+    }\n+  }\n+\n+  // Returns the district information based on the district id from a row in the STOCK table.\n+  String getDistInfo(ResultSet rs, int d_id) throws SQLException {\n+    switch (d_id) {\n+      case 1:\n+        return rs.getString(\"S_DIST_01\");\n+      case 2:\n+        return rs.getString(\"S_DIST_02\");\n+      case 3:\n+        return rs.getString(\"S_DIST_03\");\n+      case 4:\n+        return rs.getString(\"S_DIST_04\");\n+      case 5:\n+        return rs.getString(\"S_DIST_05\");\n+      case 6:\n+        return rs.getString(\"S_DIST_06\");\n+      case 7:\n+        return rs.getString(\"S_DIST_07\");\n+      case 8:\n+        return rs.getString(\"S_DIST_08\");\n+      case 9:\n+        return rs.getString(\"S_DIST_09\");\n+      case 10:\n+        return rs.getString(\"S_DIST_10\");\n+    }\n+    return \"\";\n+  }\n+\n+  // Stores the different states in the various arrays.\n+  void storeInfo(int[] itemIDs, int[] supplierWhs, int[] orderQuantities,\n+                 int itemId, int w_id, int supplierWh,\n+                 float price, String name, String i_data,\n+                 int qty, String s_data, String dist_info,\n+                 int ytd, int remote_cnt,\n+                 float[] i_price_arr, String[] i_name_arr, String[] i_data_arr,\n+                 int[] qty_arr, String[] data_arr, String[] dist_info_arr,\n+                 int[] ytd_arr, int[] remote_cnt_arr) {\n+    for (int i = 0; i < itemIDs.length; ++i) {\n+      if (itemId == itemIDs[i] && supplierWh == supplierWhs[i]) {\n+        i_price_arr[i] = price;\n+        i_name_arr[i] = name;\n+        i_data_arr[i] = i_data;\n+\n+        qty_arr[i] = qty;\n+        data_arr[i] = s_data;\n+        dist_info_arr[i]= dist_info;\n+        ytd_arr[i] = ytd;\n+        remote_cnt_arr[i] = remote_cnt;\n+\n+        // Note that the same item could be present in the itemID multiple times. So adjust the new\n+        // quantity for the next time accordingly.\n+        if (qty - orderQuantities[i] >= 10) {\n+          qty -= orderQuantities[i];\n         } else {\n-          s_quantity += -ol_quantity + 91;\n+          qty += (91 -orderQuantities[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyOTY4OA==", "bodyText": "nit: for consistency capitalize in -> IN.", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r493129688", "createdAt": "2020-09-23T01:36:17Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -108,26 +117,76 @@\n   private PreparedStatement stmtUpdateStock = null;\n   private PreparedStatement stmtInsertOrderLine = null;\n \n-  public ResultSet run(Connection conn, Random gen,\n-    int terminalWarehouseID, int numWarehouses,\n-    int terminalDistrictLowerID, int terminalDistrictUpperID,\n-      TPCCWorker w) throws SQLException {\n+  public NewOrder() {\n+    stmtGetItemSQLArr = new SQLStmt[15];\n+    stmtGetStockSQLArr = new SQLStmt[15];\n+    stmtInsertOrderLineSQLArr = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyOTg2MA==", "bodyText": "nit: ditto about in", "url": "https://github.com/yugabyte/tpcc/pull/45#discussion_r493129860", "createdAt": "2020-09-23T01:36:32Z", "author": {"login": "m-iancu"}, "path": "src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java", "diffHunk": "@@ -108,26 +117,76 @@\n   private PreparedStatement stmtUpdateStock = null;\n   private PreparedStatement stmtInsertOrderLine = null;\n \n-  public ResultSet run(Connection conn, Random gen,\n-    int terminalWarehouseID, int numWarehouses,\n-    int terminalDistrictLowerID, int terminalDistrictUpperID,\n-      TPCCWorker w) throws SQLException {\n+  public NewOrder() {\n+    stmtGetItemSQLArr = new SQLStmt[15];\n+    stmtGetStockSQLArr = new SQLStmt[15];\n+    stmtInsertOrderLineSQLArr = new SQLStmt[11];\n+\n+    // We create 15 statements for selecting rows from the `ITEM` table with varying number of ITEM\n+    // ids.  Each string looks like:\n+    // SELECT I_ID, I_PRICE, I_NAME , I_DATA\n+    // FROM ITEM\n+    // WHERE I_ID in (?, ? ..);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"SELECT I_ID, I_PRICE, I_NAME , I_DATA FROM %s WHERE I_ID in (\",\n+                            TPCCConstants.TABLENAME_ITEM));\n+    for (int i = 1; i <= 15; ++i) {\n+      if (i == 1) {\n+        sb.append(\"?\");\n+      } else {\n+        sb.append(\",?\");\n+      }\n+      stmtGetItemSQLArr[i - 1] = new SQLStmt(sb.toString() + \")\");\n+    }\n \n-    //initializing all prepared statements\n-    stmtGetCust=this.getPreparedStatement(conn, stmtGetCustSQL);\n-    stmtGetWhse=this.getPreparedStatement(conn, stmtGetWhseSQL);\n-    stmtGetDist=this.getPreparedStatement(conn, stmtGetDistSQL);\n-    stmtInsertNewOrder=this.getPreparedStatement(conn, stmtInsertNewOrderSQL);\n-    stmtUpdateDist =this.getPreparedStatement(conn, stmtUpdateDistSQL);\n-    stmtInsertOOrder =this.getPreparedStatement(conn, stmtInsertOOrderSQL);\n-    stmtGetItem =this.getPreparedStatement(conn, stmtGetItemSQL);\n-    stmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);\n-    stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);\n-    stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);\n+    // We create 15 statements for selecting rows from the `STOCK` table with varying number of\n+    // ITEM ids and a fixed WAREHOUSE id. Each string looks like:\n+    // SELECT I_I, I_NAME , I_DATA\n+    // FROM STOCK\n+    // WHERE S_W_ID = ? AND S_I_ID in (?, ? ..);\n+    sb = new StringBuilder();\n+    sb.append(\n+      String.format(\"SELECT S_W_ID, S_I_ID, S_QUANTITY, S_DATA, S_YTD, S_REMOTE_CNT, S_DIST_01, \" +\n+                    \"S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, \" +\n+                    \"S_DIST_09, S_DIST_10 FROM %s WHERE S_W_ID = ? AND S_I_ID in (\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0cba29f5d17dffe72d56f0f040503b53720ffc", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/0c0cba29f5d17dffe72d56f0f040503b53720ffc", "committedDate": "2020-09-23T02:18:08Z", "message": "Reduce client to database calls for New Order Inserts and Selects.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement using the\n   'IN' predicate.\n2. Batching the select for entries in `Stock` into 1 statement using the\n   'IN' predicate.\n3. Batching the insert for all entries into `OrderLine` using the\n   multirow VALUES syntax.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0201eddc1fc7c6747d75ccdda9e3a9de256ddf27", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/0201eddc1fc7c6747d75ccdda9e3a9de256ddf27", "committedDate": "2020-09-22T20:53:32Z", "message": "Reducing calls from the client to the Database for New Order Transaction.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement.\n2. Batching the select for entries in `Stock` into 1 statement.\n3. Batching the insert for all entries into `OrderLine`.\n\nReviewers:\nKarthik, Mihnea"}, "afterCommit": {"oid": "0c0cba29f5d17dffe72d56f0f040503b53720ffc", "author": {"user": {"login": "psudheer21", "name": "Sudheer Ponnemkunnath Rammohan"}}, "url": "https://github.com/yugabyte/tpcc/commit/0c0cba29f5d17dffe72d56f0f040503b53720ffc", "committedDate": "2020-09-23T02:18:08Z", "message": "Reduce client to database calls for New Order Inserts and Selects.\n\nSummary:\nThis change involves:\n1. Batching the select for entries in `Item` into 1 statement using the\n   'IN' predicate.\n2. Batching the select for entries in `Stock` into 1 statement using the\n   'IN' predicate.\n3. Batching the insert for all entries into `OrderLine` using the\n   multirow VALUES syntax.\n\nReviewers:\nKarthik, Mihnea"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTgzNjI3", "url": "https://github.com/yugabyte/tpcc/pull/45#pullrequestreview-493983627", "createdAt": "2020-09-23T02:20:26Z", "commit": {"oid": "0c0cba29f5d17dffe72d56f0f040503b53720ffc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 480, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}