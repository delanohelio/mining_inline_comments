{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODkyNDk1", "number": 59, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzozOTowMFrOEt1xAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNDoyODowM1rOEuSvlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTAyMjc1OnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/api/Worker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzozOTowMFrOHh3pAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTo1MjoxMlrOHiiWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg==", "bodyText": "what if we get a retry status?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505276672", "createdAt": "2020-10-15T07:39:00Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNTU0Mw==", "bodyText": "It was a conscious decision to just include the time of the actual operation and not the failure cases.\nLet me know what you think.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505705543", "createdAt": "2020-10-15T17:09:59Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNjQzMw==", "bodyText": "i do think its useful to isolate measurement to successful operations in terms of our own understanding, as you did here, but we should also be measuring the latency a user would experience for said operation, from op start, through each retry, to final completion, when grading ourselves", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505726433", "createdAt": "2020-10-15T17:45:07Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMzEyMQ==", "bodyText": "But 1% of the transactions have failures by design.\nShould we include those?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505923121", "createdAt": "2020-10-15T23:37:47Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzNzEzMw==", "bodyText": "id say lets match the previous behavior for those?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505937133", "createdAt": "2020-10-16T00:29:43Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3NjM2Mg==", "bodyText": "Done.\nI have changed the behaviour a bit and showed the actual latency by default and the whole operation latency along with the connection acquisition latency protected by the flag.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505976362", "createdAt": "2020-10-16T01:52:12Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -420,7 +439,10 @@ protected final TransactionType doWork(boolean measure, SubmittedProcedure piece\n                     // }\n \n                     status = TransactionStatus.UNKNOWN;\n+\n+                    startOperation.setValue(System.nanoTime());\n                     status = this.executeWork(conn, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3NjY3Mg=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTAzMDIxOnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/api/Worker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0MDowMlrOHh3uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzo0MDowMlrOHifIpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3ODAxMQ==", "bodyText": "could we just pass in startConnection and endConnection, keep the old startOperation/endOperation computation outside here, and compute the difference if desired?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505278011", "createdAt": "2020-10-15T07:40:02Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -310,10 +318,14 @@ public final void run() {\n                 }\n             }\n \n-            long startOperation = System.nanoTime();\n+            MutableLong startOperation = new MutableLong();\n+            MutableLong endOperation = new MutableLong();\n+            MutableLong startConnection = new MutableLong();\n+            MutableLong endConnection = new MutableLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNDcxOQ==", "bodyText": "I would prefer this, cuz the intention is clearer here. where we try to get the time of the actual operation execution.\nLet me know what you think", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505704719", "createdAt": "2020-10-15T17:08:48Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -310,10 +318,14 @@ public final void run() {\n                 }\n             }\n \n-            long startOperation = System.nanoTime();\n+            MutableLong startOperation = new MutableLong();\n+            MutableLong endOperation = new MutableLong();\n+            MutableLong startConnection = new MutableLong();\n+            MutableLong endConnection = new MutableLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3ODAxMQ=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNzI0NQ==", "bodyText": "yeah i dont disagree. i might consider returning something richer than TransactionType that includes latency info as well, to further clarify/document the intention", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505727245", "createdAt": "2020-10-15T17:46:32Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -310,10 +318,14 @@ public final void run() {\n                 }\n             }\n \n-            long startOperation = System.nanoTime();\n+            MutableLong startOperation = new MutableLong();\n+            MutableLong endOperation = new MutableLong();\n+            MutableLong startConnection = new MutableLong();\n+            MutableLong endConnection = new MutableLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3ODAxMQ=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMzc0OA==", "bodyText": "Thats a good idea. Let me incorporate that.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505923748", "createdAt": "2020-10-15T23:40:02Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -310,10 +318,14 @@ public final void run() {\n                 }\n             }\n \n-            long startOperation = System.nanoTime();\n+            MutableLong startOperation = new MutableLong();\n+            MutableLong endOperation = new MutableLong();\n+            MutableLong startConnection = new MutableLong();\n+            MutableLong endConnection = new MutableLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI3ODAxMQ=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzgyMDAxOnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/DBWorkload.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo1MDowNFrOHiTRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzozOToyMFrOHifHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyOTM1Ng==", "bodyText": "this feels hacky. is there some alternative approach where we can track overall_latencies as the original latency semantic (including connection acquisition and all retries), acq_connection_latenciesas the time taken to acquire a connection, and final_op_try_latency as the latency of the final/successful op only (as in excluding retries), and each list can be of size final int kNumTxnTypes = 5;?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505729356", "createdAt": "2020-10-15T17:50:04Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -1018,32 +1018,52 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n     LOG.info(\"Efficiency : \" + df.format(efficiency) + \"%\");\n \n     List<List<Integer>> list_latencies = new ArrayList<>();\n-    for (int i = 0; i < 5; ++i) {\n+    for (int i = 0; i < 6; ++i) {\n       list_latencies.add(new ArrayList<Integer>());\n     }\n+\n+    boolean printConnectionLatency =\n+      xmlConfig.containsKey(\"displayHikariPoolConnectionLatency\") &&\n+      xmlConfig.getBoolean(\"displayHikariPoolConnectionLatency\");\n     for (Worker<?> w : workers) {\n       for (LatencyRecord.Sample sample : w.getLatencyRecords()) {\n         list_latencies.get(sample.tranType - 1).add(sample.operationLatencyUs);\n       }\n+\n+      // Since we have 5 transaction types, use the index 5 to store the latency for the Hikari pool\n+      // connections.\n+      if (printConnectionLatency) {\n+        for (LatencyRecord.Sample sample : w.getConnectionLatencyRecords()) {\n+          list_latencies.get(5).add(sample.operationLatencyUs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczMDg0NA==", "bodyText": "so, going further, each worker can have getLatencyRecords , getConnectionLatencies, and getFinalOpLatencies", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505730844", "createdAt": "2020-10-15T17:52:30Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -1018,32 +1018,52 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n     LOG.info(\"Efficiency : \" + df.format(efficiency) + \"%\");\n \n     List<List<Integer>> list_latencies = new ArrayList<>();\n-    for (int i = 0; i < 5; ++i) {\n+    for (int i = 0; i < 6; ++i) {\n       list_latencies.add(new ArrayList<Integer>());\n     }\n+\n+    boolean printConnectionLatency =\n+      xmlConfig.containsKey(\"displayHikariPoolConnectionLatency\") &&\n+      xmlConfig.getBoolean(\"displayHikariPoolConnectionLatency\");\n     for (Worker<?> w : workers) {\n       for (LatencyRecord.Sample sample : w.getLatencyRecords()) {\n         list_latencies.get(sample.tranType - 1).add(sample.operationLatencyUs);\n       }\n+\n+      // Since we have 5 transaction types, use the index 5 to store the latency for the Hikari pool\n+      // connections.\n+      if (printConnectionLatency) {\n+        for (LatencyRecord.Sample sample : w.getConnectionLatencyRecords()) {\n+          list_latencies.get(5).add(sample.operationLatencyUs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyOTM1Ng=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMzUzNQ==", "bodyText": "Changed the code to be easier to read by making the intentions clearer.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505923535", "createdAt": "2020-10-15T23:39:20Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -1018,32 +1018,52 @@ private static Results runWorkload(List<BenchmarkModule> benchList, boolean verb\n     LOG.info(\"Efficiency : \" + df.format(efficiency) + \"%\");\n \n     List<List<Integer>> list_latencies = new ArrayList<>();\n-    for (int i = 0; i < 5; ++i) {\n+    for (int i = 0; i < 6; ++i) {\n       list_latencies.add(new ArrayList<Integer>());\n     }\n+\n+    boolean printConnectionLatency =\n+      xmlConfig.containsKey(\"displayHikariPoolConnectionLatency\") &&\n+      xmlConfig.getBoolean(\"displayHikariPoolConnectionLatency\");\n     for (Worker<?> w : workers) {\n       for (LatencyRecord.Sample sample : w.getLatencyRecords()) {\n         list_latencies.get(sample.tranType - 1).add(sample.operationLatencyUs);\n       }\n+\n+      // Since we have 5 transaction types, use the index 5 to store the latency for the Hikari pool\n+      // connections.\n+      if (printConnectionLatency) {\n+        for (LatencyRecord.Sample sample : w.getConnectionLatencyRecords()) {\n+          list_latencies.get(5).add(sample.operationLatencyUs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyOTM1Ng=="}, "originalCommit": {"oid": "ba57c2ce7b1376699d47463742f200764d7a03aa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTEzNTExOnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/DBWorkload.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDozNToxMFrOHigD2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNToyN1rOHijYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzODkwNw==", "bodyText": "i < list_latencies.size()?", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505938907", "createdAt": "2020-10-16T00:35:10Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -1113,7 +1135,9 @@ public static void mergeResults(String dirPath, String[] fileNames) {\n     LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n     LOG.info(\"TPM-C: \" + df.format(tpmc));\n     LOG.info(\"Efficiency : \" + df.format(efficiency) + \"%\");\n-    printLatencies(list_latencies, transactionTypes);\n+    for (int i = 0; i < 5; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13034d65f4fe209d5419316f080b124d045dd973"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5MzI3Mg==", "bodyText": "Done.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r505993272", "createdAt": "2020-10-16T02:25:27Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -1113,7 +1135,9 @@ public static void mergeResults(String dirPath, String[] fileNames) {\n     LOG.info(\"Num New Order transactions : \" + numNewOrderTransactions + \", time seconds: \" + time);\n     LOG.info(\"TPM-C: \" + df.format(tpmc));\n     LOG.info(\"Efficiency : \" + df.format(efficiency) + \"%\");\n-    printLatencies(list_latencies, transactionTypes);\n+    for (int i = 0; i < 5; ++i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzODkwNw=="}, "originalCommit": {"oid": "13034d65f4fe209d5419316f080b124d045dd973"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTc3MDQ2OnYy", "diffSide": "RIGHT", "path": "src/com/oltpbenchmark/api/Worker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNDoyODowM1rOHimg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjo0NDoyM1rOHipc7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NDYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r506044634", "createdAt": "2020-10-16T04:28:03Z", "author": {"login": "robertsami"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -352,15 +423,35 @@ public final void run() {\n             long end = System.nanoTime();\n             postState = wrkldState.getGlobalState();\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf39e60ba17fa0c5126c3e5f218e1c1ac7b57c4a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5Mjc4Mw==", "bodyText": "Done.", "url": "https://github.com/yugabyte/tpcc/pull/59#discussion_r506092783", "createdAt": "2020-10-16T06:44:23Z", "author": {"login": "psudheer21"}, "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -352,15 +423,35 @@ public final void run() {\n             long end = System.nanoTime();\n             postState = wrkldState.getGlobalState();\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NDYzNA=="}, "originalCommit": {"oid": "cf39e60ba17fa0c5126c3e5f218e1c1ac7b57c4a"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}