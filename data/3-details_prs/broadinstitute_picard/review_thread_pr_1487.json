{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTE4NjYz", "number": 1487, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNzozMFrODuYXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MToyNVrODuYtZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTYwMjg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNzozMFrOGAV0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNzozMFrOGAV0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDU2Mg==", "bodyText": "Odd indent, or maybe github is showing the diff wrong?", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403010562", "createdAt": "2020-04-03T13:37:30Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -294,14 +323,9 @@ public void testOneCovariateErrorMetrics(final String errorSubscript, final File\n         Assert.assertEquals(metric, expectedMetric);\n     }\n \n-    @DataProvider(name = \"OneCovariateIndelErrorMetricsDataProvider\")\n+    @DataProvider()\n     public Object[][] oneCovariateIndelErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+                final int priorQ = 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTYwODAzOnYy", "diffSide": "LEFT", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozODo1MFrOGAV3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozODo1MFrOGAV3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTQxNg==", "bodyText": "It's hard to see in the diff but it looks like this file is no longer deleted on exit, is that correct?", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403011416", "createdAt": "2020-04-03T13:38:50Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -422,28 +446,10 @@ public void testOneCovariateErrorMetrics(final String errorSubscript, final File\n         };\n     }\n \n-    @Test(dataProvider = \"OneCovariateIndelErrorMetricsDataProvider\")\n+    @Test(dataProvider = \"oneCovariateIndelErrorMetricsDataProvider\")\n     public void testOneCovariateIndelErrorMetrics(final String errorSubscript, final File samFile, final int priorQ, BaseErrorMetric expectedMetric) {\n-        final File referenceFile = CHR_M_REFERENCE;\n-        final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");\n \n-        final File outputBaseFileName = new File(OUTPUT_DATA_PATH, \"test\");\n-        final File errorByAll = new File(outputBaseFileName.getAbsolutePath() + errorSubscript);\n-        errorByAll.deleteOnExit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTYyMjg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo0Mjo0MVrOGAWA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1ODowMVrOGAkNqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMzg3Mw==", "bodyText": "This is run before every test, so this will create a new temp dir for each test, and store it in a static field. Is that what you want to do here? If each test gets its own temp dir, using a non-static field would make that clearer.", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403013873", "createdAt": "2020-04-03T13:42:41Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NjUwNQ==", "bodyText": "hmmmm, my understanding is that what you described is the case of @BeforeMethod.  but that @BeforeTest is only run once per test-file, not test-method.", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403246505", "createdAt": "2020-04-03T18:58:01Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMzg3Mw=="}, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTYyNTIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo0MzoyMFrOGAWCeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo0MzoyMFrOGAWCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNDI2Ng==", "bodyText": "these can all be static", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403014266", "createdAt": "2020-04-03T13:43:20Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY1OTI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MToyNVrOGAWX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNjo0M1rOGAkltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA==", "bodyText": "Does this mean that testdata/picard/sam/BamErrorMetrics/NIST.selected.vcf.idx can be deleted?", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403019748", "createdAt": "2020-04-03T13:51:25Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);\n+\n+        for (final File file : files) {\n+            final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTkwMw==", "bodyText": "yes...but a slightly different path will be tested....", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403251903", "createdAt": "2020-04-03T19:05:08Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);\n+\n+        for (final File file : files) {\n+            final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA=="}, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MjY2MA==", "bodyText": "will do.", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403252660", "createdAt": "2020-04-03T19:06:43Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);\n+\n+        for (final File file : files) {\n+            final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA=="}, "originalCommit": {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 732, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}