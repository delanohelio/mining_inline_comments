{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNjgzNjM1", "number": 1582, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NDo0MlrOEnNz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0ODo0N1rOEouVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTU2MjE4OnYy", "diffSide": "LEFT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NDo0MlrOHXsRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NDo0MlrOHXsRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNDc0Nw==", "bodyText": "Do you want a unit test to cover this?", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r494604747", "createdAt": "2020-09-24T20:54:42Z", "author": {"login": "nh13"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -596,7 +596,8 @@ static IntervalListInputType forFile(final File intervalListExtractable) {\n                     }\n                 }\n             }\n-            throw new SAMException(\"Cannot figure out type of file \" + intervalListExtractable.getAbsolutePath() + \" from extension. Current implementation understands the following types: \" + Arrays.toString(IntervalListInputType.values()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc7bd0ec388edb061e70a1c4dc96d9053396709e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTE5OTMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODozNDoxMVrOHYOb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODozNDoxMVrOHYOb6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NDM5Mg==", "bodyText": "Since this test is essentially identical to the one above, it would be better to modify the @dataProvider so that it creates objects of the form {IntervalListTools.Action, File}, and provide the input file as a second argument to testAllActions", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r495164392", "createdAt": "2020-09-25T18:34:11Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -115,6 +116,25 @@ public void testAllActions(final IntervalListTools.Action action) throws IOExcep\n         Assert.assertEquals(runPicardCommandLine(args), 0);\n     }\n \n+    // test that all actions work for standard input, but not test output at all.\n+    @Test(dataProvider = \"ActionsTest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74406f6588ff0b7ec5e7efaf3b275e2a2deab425"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM3NjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0ODo0N1rOHZ-p_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0ODo0N1rOHZ-p_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMzAwNg==", "bodyText": "How about specifically noting that for standard input one should write /dev/stdin as the input file?", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r497003006", "createdAt": "2020-09-29T19:48:47Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -237,7 +237,8 @@\n \n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n             doc = \"One or more interval lists. If multiple interval lists are provided the output is the\" +\n-                    \"result of merging the inputs. Supported formats are interval_list and VCF.\", minElements = 1)\n+                    \"result of merging the inputs. Supported formats are interval_list and VCF.\" +\n+                    \"If file extension is unrecognized, assumes file is interval_list\", minElements = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "364146a233671212bf0859181bd69f7efaef93e7"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 643, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}