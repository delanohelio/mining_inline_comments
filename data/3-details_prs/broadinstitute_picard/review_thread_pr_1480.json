{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTY0OTg1", "number": 1480, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NToyMVrODqAnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOTo1MFrOD8e7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzc2ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NToyMVrOF5isQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NToyMVrOF5isQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4MTUzOA==", "bodyText": "This documentation is unclear...I needed to read the code to understand what you mean.\nExplain that the program will assume that the variants in the files come from non overlapping regions, but that while each file is itself sorted, the order that the files are provided in is not to be trusted. If TRUE, instead of sorting all the variants, the program will concatenate the variants from the files using the order of the first variant in each file as the order of the files.\nAlso, \"SORT\" is not a good name, since it's is used elsewhere to mean that the outputs will be sorted....I suggest you use REORDER_INPUT_BY_FIRST_VARIANT", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r395881538", "createdAt": "2020-03-20T20:45:21Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,24 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"Re-order the INPUT files according to order of their first variant.\", optional = true, shortName = \"S\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQzMTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoyOToyN1rOGVcR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoyOToyN1rOGVcR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNjYwOA==", "bodyText": "It would be clearer here if you start with what the option is doing and then explain the reason:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n          \n          \n            \n                @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n          \n          \n            \n                        + \"to the genomic location of the first variant in each file. \"\n          \n          \n            \n                        + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n          \n          \n            \n                        + \" but the order of the files in INPUT is untrusted.\",\n          \n          \n            \n                optional = true, shortName = \"RI\")", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425136608", "createdAt": "2020-05-14T13:29:27Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ0MjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozMTo0MFrOGVcYrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozMTo0MFrOGVcYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODM1MA==", "bodyText": "'reorder'\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** class used to sort VCFs using the first variant */\n          \n          \n            \n                /** class used to reorder input VCFs using the first variant */", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138350", "createdAt": "2020-05-14T13:31:40Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ0NTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozMjoyMFrOGVcacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozMjoyMFrOGVcacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODgwMA==", "bodyText": "whitespace\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    VariantContext firstVariant = null;// may be null if the vcf is empty\n          \n          \n            \n                    VariantContext firstVariant = null;   // may be null if the vcf is empty", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138800", "createdAt": "2020-05-14T13:32:20Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */\n+    private static class FirstVariantInVcf {\n+        final File vcfFile;\n+        VariantContext firstVariant = null;// may be null if the vcf is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ1NDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNDoxM1rOGVcgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNDoxM1rOGVcgDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDIzOQ==", "bodyText": "add braces:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n          \n          \n            \n                                    if (vcfcxt.firstVariant == null) {\n          \n          \n            \n                                        log.info(\"No variant in \" + f);\n          \n          \n            \n                                     }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425140239", "createdAt": "2020-05-14T13:34:13Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ2MTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNTo1MFrOGVcktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNTo1MFrOGVcktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTQyOQ==", "bodyText": "space\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant==null) {\n          \n          \n            \n                            if (A.firstVariant == null) {", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141429", "createdAt": "2020-05-14T13:35:50Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ2MzkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNjoyMFrOGVcmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNjoyMFrOGVcmEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTc3OQ==", "bodyText": "space and braces\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (B.firstVariant==null) return 0;\n          \n          \n            \n                                if (B.firstVariant == null) {\n          \n          \n            \n                                    return 0;\n          \n          \n            \n                                }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141779", "createdAt": "2020-05-14T13:36:20Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ2ODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/vcf/GatherVcfs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNzoyOFrOGVcpSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozNzoyOFrOGVcpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MjYwMg==", "bodyText": "spaces and braces\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant!=null && B.firstVariant==null) return -1;\n          \n          \n            \n                            if (A.firstVariant != null && B.firstVariant == null) {\n          \n          \n            \n                                return -1;\n          \n          \n            \n                            }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425142602", "createdAt": "2020-05-14T13:37:28Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;\n+                    return 1;\n+                }\n+                if (A.firstVariant!=null && B.firstVariant==null) return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ3NDU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozODo0N1rOGVctCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozODo0N1rOGVctCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzU2Mg==", "bodyText": "spacing here (and on the next 4 lines)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n          \n          \n            \n                            {Arrays.asList(shard1, shard2, shard3), vcf, 0, false},", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143562", "createdAt": "2020-05-14T13:38:47Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ3NjU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOToxNVrOGVcuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOToxNVrOGVcuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzkwOA==", "bodyText": "'reorder'\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {\n          \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean reorder) throws IOException {", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143908", "createdAt": "2020-05-14T13:39:15Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 0, true},\n+                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1, false},\n+                {Arrays.asList(shard1,shard3,shard2), vcf, 1, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 1, false} ,\n+                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0, false},\n+                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1, false},\n+                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 0, true}\n         };\n     }\n \n     @Test(dataProvider = \"vcfshards\")\n-    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal) throws IOException {\n-\n+    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ3OTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/vcf/MergeVcfsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOTo1MFrOGVcwKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOTo1MFrOGVcwKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0NDM2MA==", "bodyText": "space\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");\n          \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\", \".vcf\");", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425144360", "createdAt": "2020-05-14T13:39:50Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/MergeVcfsTest.java", "diffHunk": "@@ -11,4 +20,21 @@\n     protected CommandLineProgram getProgram() {\n         return new MergeVcfs();\n     }\n+    \n+    @Test\n+    public void TestComments() throws IOException {\n+        final String comment1 = \"This is a comment\";\n+        final List<String> args = new ArrayList<>();\n+        final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 722, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}