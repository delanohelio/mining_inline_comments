{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTIxNTY0", "number": 1608, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxMzo1NlrOE5qFUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo1Mzo1MFrOFA9J6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODkzNzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxMzo1NlrOH0Pomg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxMzo1NlrOH0Pomg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NDE1NA==", "bodyText": "remove commented out old code", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524544154", "createdAt": "2020-11-16T20:13:56Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +405,18 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+//        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk1NjE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOToxNVrOH0Pz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOToxNVrOH0Pz7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzA1Mw==", "bodyText": "don't need the timeOut since you're testing on very small files.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547053", "createdAt": "2020-11-16T20:19:15Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk1NzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOTozMVrOH0P0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDozNDoyMFrOH3f38w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ==", "bodyText": "I'm not sure I understand why this is inherently incompatible with UNION. I get that currently the htsjdk uniqued method combines abbutting intervals, but I don't see why it has to be that way....it seems plausible, to work around it by using the lower-level getUniqueIntervals directly.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547249", "createdAt": "2020-11-16T20:19:31Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU4MTIxMg==", "bodyText": "There is an additional wrinkle, that getUniqueIntervals returns List<Intervals> whereas uniqued() returns IntervalList, and there is no constructor that takes in a List<Intervals> and turns it into an IntervalList. I can see if there's a way to do this with addAll() and removing the old intervals. If you have any ideas let me know.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524581212", "createdAt": "2020-11-16T21:07:34Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NzgxMw==", "bodyText": "you can replicate the htsjdk code to make a private method that also allows you to state \"mergeAbutting\", right? eventually perhaps someone will push that down to htsdjk.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524597813", "createdAt": "2020-11-16T21:22:32Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NTk1NQ==", "bodyText": "Fixed @yfarjoun", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r527955955", "createdAt": "2020-11-20T20:34:20Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk1ODAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOTozOVrOH0P0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowODoxNVrOH0R8Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzMyNQ==", "bodyText": "unneeded brackets (maybe this used to be inside a try block?)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547325", "createdAt": "2020-11-16T20:19:39Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU4MTk2Mw==", "bodyText": "I was wondering about this, I copied and pasted from another test. Happy to remove! :)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524581963", "createdAt": "2020-11-16T21:08:15Z", "author": {"login": "tmelman"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzMyNQ=="}, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4MDUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNTo1OFrOH0QCxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDozNDo0M1rOH3f4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDg1NQ==", "bodyText": "Would like to see some tests of the other actions as well.  And I think you can combine this with testCombineAbuttingIntervals and use a DataProvider", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524550855", "createdAt": "2020-11-16T20:25:58Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {\n+            final List<String> args = new ArrayList<>();\n+            args.add(\"INPUT=\" + abutting);\n+            args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=UNION\"); // Note: ACTION=UNION is equivalent to UNIQUE=true and DONT_COMBINE_ABUTTING=false, or defaults\n+            Assert.assertEquals(runPicardCommandLine(args), 0);\n+        }\n+        final IntervalList gather = IntervalList.fromFile(ilOut);\n+        final IntervalList original = IntervalList.fromFile(abutting_combined);\n+\n+        Assert.assertEquals(gather, original); // equal to expected output\n+    }\n+    @Test(timeOut = 40_000)\n+    public void testDontCombineAbuttingIntervals() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NjEzMg==", "bodyText": "Fixed @kachulis", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r527956132", "createdAt": "2020-11-20T20:34:43Z", "author": {"login": "tmelman"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {\n+            final List<String> args = new ArrayList<>();\n+            args.add(\"INPUT=\" + abutting);\n+            args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=UNION\"); // Note: ACTION=UNION is equivalent to UNIQUE=true and DONT_COMBINE_ABUTTING=false, or defaults\n+            Assert.assertEquals(runPicardCommandLine(args), 0);\n+        }\n+        final IntervalList gather = IntervalList.fromFile(ilOut);\n+        final IntervalList original = IntervalList.fromFile(abutting_combined);\n+\n+        Assert.assertEquals(gather, original); // equal to expected output\n+    }\n+    @Test(timeOut = 40_000)\n+    public void testDontCombineAbuttingIntervals() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDg1NQ=="}, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjkzNzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1ODoyN1rOH5TA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1ODoyN1rOH5TA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MjQwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529842405", "createdAt": "2020-11-24T19:58:27Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -328,10 +337,13 @@ void output(final long totalBaseCount, final long intervalCount, final PrintStre\n \n         UNION(\"Like CONCATENATE but with UNIQUE and SORT implied, the result being the set-wise union of all INPUTS, \" +\n                 \"with overlapping and abutting intervals merged into one.\", false) {\n-            @Override\n-            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n-                return super.act(firstList.sorted().uniqued(), ignored);\n-            }\n+//            @Override\n+//            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n+////                return super.act(firstList.sorted().uniqued(), ignored);\n+//                return super.act(IntervalListTools.uniqued(firstList.sorted(), false), ignored);\n+//            }\n+// Before I delete this code block: I'm removing this in order to move this functionality down to the \"doWork()\" subroutine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzEyMzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1NDowMlrOH5UxAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowODoxNlrOH53rlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg==", "bodyText": "why does this need to return an IntervalList? can't you let it return a list of intervals instead?  You immediately call getIntervals() on it the only place I see it used, so it seems like a lot of unneeded converting back and forth between lists of intervals and interval lists.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529871106", "createdAt": "2020-11-24T20:54:02Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -501,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNjE1NQ==", "bodyText": "Because I'm reproducing the functionality of \"uniqued\" in htsjdk's IntervalList. The idea is to have a \"uniqued\" method that we can one day add to their code base in a PR. Alternatively they have a \"getUniqueIntervals()\" method that rerturns a List of Intervals. I could use that but this makes for cleaner code with all the defaults.\ntl;dr: this was purely a design decision, I don't have a strong preference on which way to do it, and I'm happy to change it to according to your preferences, as you will also be interacting with it.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529926155", "createdAt": "2020-11-24T22:13:21Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -501,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg=="}, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MzE1OA==", "bodyText": "I see, that seems reasonable then", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r530443158", "createdAt": "2020-11-25T15:08:16Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -501,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg=="}, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM5NzA1OnYy", "diffSide": "RIGHT", "path": "testdata/picard/util/abutting.interval_list", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozNTo1MFrOH_fO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozNTo1MFrOH_fO7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNDA2Mg==", "bodyText": "perhaps use the name of the interval to comment about the properties of each interval:\ne.g\n1\t30000\t30001\t+\ttarget_1_abutting_the_next\n1\t30002\t30003\t+\ttarget_2_abutting_the_previous_but_not_the_next\n1\t30005\t30007\t+\ttarget_3_overlapping_the_next_but_not_abutting_the_previous\n1\t30006\t30008\t+\ttarget_4_overlapping_the_previous", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536334062", "createdAt": "2020-12-04T19:35:50Z", "author": {"login": "yfarjoun"}, "path": "testdata/picard/util/abutting.interval_list", "diffHunk": "@@ -0,0 +1,6 @@\n+@HD\tVN:1.6\tSO:coordinate\n+@SQ\tSN:1\tLN:249250621\tAS:GRCh37\tUR:http://www.broadinstitute.org/ftp/pub/seq/references/Homo_sapiens_assembly19.fasta\tM5:1b22b98cdeb4a9304cb5d48026a85128\tSP:Homo Sapiens\n+1\t30000\t30001\t+\ttarget_1\n+1\t30002\t30003\t+\ttarget_2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQwNTU1OnYy", "diffSide": "RIGHT", "path": "testdata/picard/util/abutting_combined.interval_list", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozODowMFrOH_fTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozODowMFrOH_fTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNTI3MA==", "bodyText": "if you name the intervals in a meaningful way, you can also have the tests \"CONTATENATE=true\" and the resulting names here will show which intervals got merged.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536335270", "createdAt": "2020-12-04T19:38:00Z", "author": {"login": "yfarjoun"}, "path": "testdata/picard/util/abutting_combined.interval_list", "diffHunk": "@@ -0,0 +1,4 @@\n+@HD\tVN:1.6\tSO:coordinate\n+@SQ\tSN:1\tLN:249250621\tAS:GRCh37\tUR:http://www.broadinstitute.org/ftp/pub/seq/references/Homo_sapiens_assembly19.fasta\tM5:1b22b98cdeb4a9304cb5d48026a85128\tSP:Homo Sapiens\n+1\t30000\t30003\t+\ttarget_1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQxMDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozOToyM1rOH_fWfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozOToyM1rOH_fWfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNTk5OQ==", "bodyText": "I'd add a \"//TODO:'' item to move this to htsjdk and use that once we can. (possibly adding issues that can be referenced)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536335999", "createdAt": "2020-12-04T19:39:23Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQxNzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MToxN1rOH_faxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MToxN1rOH_faxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n          \n          \n            \n                    List<Interval> finalIntervals = UNIQUE ? uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337092", "createdAt": "2020-12-04T19:41:17Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n-        //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+        //only get unique if this has been asked OR if action is UNION, unless inverting (since the invert will return a unique list)\n+        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQyMTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MjoxNVrOH_fc-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MjoxNVrOH_fc-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzY1OA==", "bodyText": "We tend to use camelCase for variables and methods\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n          \n          \n            \n                private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337658", "createdAt": "2020-12-04T19:42:15Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQyNTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MzoyMVrOH_ffQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxOToxMVrOH_kTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA==", "bodyText": "why are these in variables? you can just put true,false in the method call, no?", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536338240", "createdAt": "2020-12-04T19:43:21Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwOTU4Ng==", "bodyText": "I definitely can, it just makes for more readable code. Purely design decision, happy to change it", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536409586", "createdAt": "2020-12-04T22:02:20Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDM2OA==", "bodyText": "OK. So in that case, just change the variable names to camelCase", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536410368", "createdAt": "2020-12-04T22:04:07Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzEzNQ==", "bodyText": "done \ud83d\udc4d :)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536417135", "createdAt": "2020-12-04T22:19:11Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQ2MjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/IntervalListTools.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo1Mzo1MFrOH_f0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowOTowNFrOH_kBXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ==", "bodyText": "if UNIQUE sorts by default, shouldn't this be SORT=false?", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536343805", "createdAt": "2020-12-04T19:53:50Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDIxMA==", "bodyText": "per the previous implementation, UNION assumes sort and unique are true. so if action is union we have to reproduce that behavior.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536410210", "createdAt": "2020-12-04T22:03:47Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTI5MQ==", "bodyText": "I guess I'm confused by why the INVERT==true branch claims (in the comments) that theres no need to sort, and here there seems to be a need to sort again.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536411291", "createdAt": "2020-12-04T22:06:18Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjUxMA==", "bodyText": "theres a bit of a loop of flags and actions overlapping lol\u2026 but I don't know what \"UNION\" would be with \"UNIQUE\" false.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536412510", "createdAt": "2020-12-04T22:09:04Z", "author": {"login": "tmelman"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 670, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}