{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjQxNjI1", "number": 1603, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTowMFrOE12Nlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODozM1rOE5qZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODk4MTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTowMFrOHuWu0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMzo0MFrOHuXNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODk3OA==", "bodyText": "since there already is a tile stratifier, it woudl seem more consistent to just add x & y stratifier (or one stratifiyer for x and one for y?) and then use it in conjunction with the Tile stratifier\nIs there a reason this cannot work?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518368978", "createdAt": "2020-11-05T21:15:00Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                String tile = Integer.toString(location.getTile());\n+                String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n+                String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n+                return (tile + \"_\" + x + \"_\" + y);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NjgyOA==", "bodyText": "Not that I know of, I can try it out and see how it compares (in terms of speed) to the way it is configured currently", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518376828", "createdAt": "2020-11-05T21:23:40Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                String tile = Integer.toString(location.getTile());\n+                String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n+                String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n+                return (tile + \"_\" + x + \"_\" + y);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODk3OA=="}, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTk4OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozNjowM1rOHuy46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1NzozNVrOHu19hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMxNQ==", "bodyText": "This method is actually inherited by OpticalDuplicateFinder from ReadNameParser, so for clarity better to use a ReadNameParser object since you're not doing anything related to optical duplicates here.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518830315", "createdAt": "2020-11-06T15:36:03Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MDY0Nw==", "bodyText": "ok, should I change that in the existing tile stratifier as well?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518880647", "createdAt": "2020-11-06T16:57:35Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMxNQ=="}, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMzNDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMjowOVrOHy_tiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMjoyMlrOHy_t8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng==", "bodyText": "perhaps a comment to explain why this field is static?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234696", "createdAt": "2020-11-13T21:12:09Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n+        @Override\n+        public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n+            return stratify(recordAndOffset.getRecord());\n+        }\n+        static ReadNameParser readNameParser = new ReadNameParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDgwMQ==", "bodyText": "also, I think it can be made final, right?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234801", "createdAt": "2020-11-13T21:12:22Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n+        @Override\n+        public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n+            return stratify(recordAndOffset.getRecord());\n+        }\n+        static ReadNameParser readNameParser = new ReadNameParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM1Njk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxOTo1MVrOHy_6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxOTo1MVrOHy_6hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzODAyMg==", "bodyText": "hmmm. I think that storing a map with all the names of the reads is not the best design....I suspect that each read will be reads, queried a few different ways (tile, x, y, etc) and then move on. so perhaps use a Cache instead of a full map? see picard/sam/SamErrorMetric/ReadBaseStratification.java:272 for an example.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523238022", "createdAt": "2020-11-13T21:19:51Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -27,6 +29,8 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n+    private Map<String, PhysicalLocation> locationMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM2NjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMzoxOVrOHzAAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMzoxOVrOHzAAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTUyMw==", "bodyText": "final", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523239523", "createdAt": "2020-11-13T21:23:19Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM3MTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyNDo0N1rOHzADKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyNDo0N1rOHzADKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MDIzNA==", "bodyText": "since you are going to have both if and elseit would be easier to read the code if you removed the ! and switched the cases", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523240234", "createdAt": "2020-11-13T21:24:47Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM4MDg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyODowMVrOHzAIkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyODowMVrOHzAIkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTYxOA==", "bodyText": "remove b?\nif(readLocationInformation(readName, loc)){\n   locationMap......\n   return true;\n}\nreturn false;\n} else {\n...\n}", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241618", "createdAt": "2020-11-13T21:28:01Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM4MjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyODozMVrOHzAJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyODozMVrOHzAJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTgxNQ==", "bodyText": "remove spurious new lines", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241815", "createdAt": "2020-11-13T21:28:31Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);\n+            loc.setTile(location.getTile());\n+            loc.setX(location.getX());\n+            loc.setY(location.getY());\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM4MzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyOToxMFrOHzAKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NjoyOVrOH0FUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw==", "bodyText": "why does this ned to be serializable?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523242073", "createdAt": "2020-11-13T21:29:10Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "diffHunk": "@@ -1,11 +1,13 @@\n package picard.sam.util;\n \n+import java.io.Serializable;\n+\n /**\n  * Small interface that provides access to the physical location information about a cluster.\n  * All values should be defaulted to -1 if unavailable.  ReadGroup and Tile should only allow\n  * non-zero positive integers, x and y coordinates may be negative.\n  */\n-public interface PhysicalLocation {\n+public interface PhysicalLocation extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NjMwOA==", "bodyText": "Travis was failing with java.io.NotSerializableException: picard.sam.util.PhysicalLocationInt (https://travis-ci.com/github/broadinstitute/picard/jobs/434802169), making PhysicalLocation serializable solved the issue.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524286308", "createdAt": "2020-11-16T13:58:56Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "diffHunk": "@@ -1,11 +1,13 @@\n package picard.sam.util;\n \n+import java.io.Serializable;\n+\n /**\n  * Small interface that provides access to the physical location information about a cluster.\n  * All values should be defaulted to -1 if unavailable.  ReadGroup and Tile should only allow\n  * non-zero positive integers, x and y coordinates may be negative.\n  */\n-public interface PhysicalLocation {\n+public interface PhysicalLocation extends Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIyNw==", "bodyText": "so a comment, \"needs to be Serializable since it is a field in ReadNameParser which is Serializable.\" would help here.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375227", "createdAt": "2020-11-16T15:56:29Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "diffHunk": "@@ -1,11 +1,13 @@\n package picard.sam.util;\n \n+import java.io.Serializable;\n+\n /**\n  * Small interface that provides access to the physical location information about a cluster.\n  * All values should be defaulted to -1 if unavailable.  ReadGroup and Tile should only allow\n  * non-zero positive integers, x and y coordinates may be negative.\n  */\n-public interface PhysicalLocation {\n+public interface PhysicalLocation extends Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM5MDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMToxOVrOHzAONQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjowNjo1NFrOH08wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ==", "bodyText": "You should be able to clamp down on the template T here and make it an Integer, right? if in the future somebody thinks of non-integer positions, we can open it up again....", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243061", "createdAt": "2020-11-13T21:31:19Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n          \n          \n            \n                abstract static class PositionBasedStratifier implements RecordAndOffsetStratifier<Integer> {", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243174", "createdAt": "2020-11-13T21:31:37Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzI3MA==", "bodyText": "and this will simplify the downstream", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243270", "createdAt": "2020-11-13T21:31:51Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTM0OA==", "bodyText": "why not do this?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375348", "createdAt": "2020-11-16T15:56:40Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjY4Ng==", "bodyText": "don't ignore me :-)", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524552686", "createdAt": "2020-11-16T20:29:25Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MzQyNA==", "bodyText": "oops I thought I already changed this! Sorry about that", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r525283424", "createdAt": "2020-11-17T16:06:54Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM5Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMjozM1rOHzAQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMjozM1rOHzAQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzU2Mw==", "bodyText": "put into 3 lines:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }\n          \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { \n          \n          \n            \n                   LOCATION_BIN_SIZE = locationBinSize; \n          \n          \n            \n                }", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243563", "createdAt": "2020-11-13T21:32:33Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -73,6 +75,11 @@ public static void setLongHomopolymer(int longHomopolymer) {\n         LONG_HOMOPOLYMER = longHomopolymer;\n     }\n \n+    /**\n+     * defaults to 2500\n+     **/\n+    public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM5NDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMjo1MFrOHzAQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1MDozNFrOHz_jZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzY4OA==", "bodyText": "are these all used?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243688", "createdAt": "2020-11-13T21:32:50Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -37,6 +37,7 @@\n import picard.sam.util.Pair;\n import picard.sam.util.PhysicalLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MDY3Nw==", "bodyText": "There's one that isn't used, I'll delete it", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524280677", "createdAt": "2020-11-16T13:50:34Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -37,6 +37,7 @@\n import picard.sam.util.Pair;\n import picard.sam.util.PhysicalLocation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzY4OA=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzgyMjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1MTowM1rOH0FCmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NDowOFrOH0FNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng==", "bodyText": "without a maximumSize this doesn't actually evict any entries....", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524370586", "createdAt": "2020-11-16T15:51:03Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -29,7 +32,7 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MTY3Ng==", "bodyText": "what should I set as maximumSize?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524371676", "createdAt": "2020-11-16T15:52:15Z", "author": {"login": "mollysacks"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -29,7 +32,7 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng=="}, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MzI5MQ==", "bodyText": "I dont' think it should matter much. I imagine that 1 would be enough....but we can use 20 to be \"safe\"", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524373291", "createdAt": "2020-11-16T15:54:08Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -29,7 +32,7 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng=="}, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzg1NzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NzoyMFrOH0FXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NzoyMFrOH0FXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTkwNg==", "bodyText": "remove soem newlines here.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375906", "createdAt": "2020-11-16T15:57:20Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java", "diffHunk": "@@ -25,10 +25,17 @@\n public class ReadBaseStratificationTest {\n \n     @BeforeClass\n-    public void setup() {\n+    public void setupLH() {\n         ReadBaseStratification.setLongHomopolymer(6);\n     }\n \n+    @BeforeClass\n+    public void setupLBS() {\n+        ReadBaseStratification.setLocationBinSize(1000);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4MTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjowOVrOH0QDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjowOVrOH0QDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDk2MA==", "bodyText": "strings should be compared with .equals()", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524550960", "createdAt": "2020-11-16T20:26:09Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4NTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxMVrOH0QFjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxMVrOH0QFjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTU2NA==", "bodyText": "no need for this temp variable, b, just put the read....() statement in the if(.)", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551564", "createdAt": "2020-11-16T20:27:11Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4NjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoyNFrOH0QGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoyNFrOH0QGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTY4OQ==", "bodyText": "can be initialized with null.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551689", "createdAt": "2020-11-16T20:27:24Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -32,7 +32,9 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().maximumSize(20).build();\n+    private String readNameStored = new String();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4OTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODozM1rOH0QIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODozM1rOH0QIJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjIzMQ==", "bodyText": "since you don't control loc, and it isn't immutable, it would be better to copy over the contents into physicalLocationStored rather than keeping a reference...", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524552231", "createdAt": "2020-11-16T20:28:33Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                readNameStored = readName;\n+                physicalLocationStored = loc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 663, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}