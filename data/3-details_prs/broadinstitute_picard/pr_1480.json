{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTY0OTg1", "number": 1480, "title": "GatherVcfs and MergeVcfs: add COMMENT=  + GatherVcfs SORT", "bodyText": "Description\nGatherVcfs and MergeVcfs are often my last steps in the workflow; This is the moment where I wish I could add a comment in my VCFS.\nHere I added a an option COMMENT= for both commands.\nFurthermore, I added an option SORT to GatherVcfs to avoid sorting my VCF according to the dictionary. if SORT=true, the first variant of each VCF is extracted and we use those variants to sort the INPUT.\nI updated the test and fixed a one or two resource leak.\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-03-03T13:55:18Z", "url": "https://github.com/broadinstitute/picard/pull/1480", "merged": true, "mergeCommit": {"oid": "1e6c51e27ea0333369fa22cf4438ee01859d4931"}, "closed": true, "closedAt": "2020-05-18T18:24:02Z", "author": {"login": "lindenb"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKA0skgH2gAyMzgyOTY0OTg1OjIyNWE0YTk4MzMzNDMzYjk0ZTM2MTMzMjRmMjgwNWQyNWY3M2IwMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchoBN_gH2gAyMzgyOTY0OTg1OjVmOTdhMGQ4N2Q5NzE4Nzc0ZDAyZjFjMWQ3ZmMxNDE1NzllYjZkMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "225a4a98333433b94e3613324f2805d25f73b00a", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/225a4a98333433b94e3613324f2805d25f73b00a", "committedDate": "2020-03-03T11:42:53Z", "message": "comment and sort gathervcfs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/e2d15197cdf695e9fe6422f2f9b23c326e199b87", "committedDate": "2020-03-03T13:13:43Z", "message": "add first variant in list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODAxMDgz", "url": "https://github.com/broadinstitute/picard/pull/1480#pullrequestreview-378801083", "createdAt": "2020-03-20T20:45:21Z", "commit": {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NToyMVrOF5isQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NToyMVrOF5isQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4MTUzOA==", "bodyText": "This documentation is unclear...I needed to read the code to understand what you mean.\nExplain that the program will assume that the variants in the files come from non overlapping regions, but that while each file is itself sorted, the order that the files are provided in is not to be trusted. If TRUE, instead of sorting all the variants, the program will concatenate the variants from the files using the order of the first variant in each file as the order of the files.\nAlso, \"SORT\" is not a good name, since it's is used elsewhere to mean that the outputs will be sorted....I suggest you use REORDER_INPUT_BY_FIRST_VARIANT", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r395881538", "createdAt": "2020-03-20T20:45:21Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,24 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"Re-order the INPUT files according to order of their first variant.\", optional = true, shortName = \"S\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODAyMDg3", "url": "https://github.com/broadinstitute/picard/pull/1480#pullrequestreview-378802087", "createdAt": "2020-03-20T20:47:18Z", "commit": {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7285e96db0d59dc0943d7d1e650addf3850cc24c", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/7285e96db0d59dc0943d7d1e650addf3850cc24c", "committedDate": "2020-04-28T10:52:48Z", "message": "fix comments for https://github.com/broadinstitute/picard/pull/1480/files#r395881538"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "committedDate": "2020-04-28T11:44:18Z", "message": "Merge branch 'master' into pl_vcfcomments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODAzOTc4", "url": "https://github.com/broadinstitute/picard/pull/1480#pullrequestreview-411803978", "createdAt": "2020-05-14T13:29:26Z", "commit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoyOToyN1rOGVcR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozOTo1MFrOGVcwKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNjYwOA==", "bodyText": "It would be clearer here if you start with what the option is doing and then explain the reason:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n          \n          \n            \n                @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n          \n          \n            \n                        + \"to the genomic location of the first variant in each file. \"\n          \n          \n            \n                        + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n          \n          \n            \n                        + \" but the order of the files in INPUT is untrusted.\",\n          \n          \n            \n                optional = true, shortName = \"RI\")", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425136608", "createdAt": "2020-05-14T13:29:27Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODM1MA==", "bodyText": "'reorder'\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** class used to sort VCFs using the first variant */\n          \n          \n            \n                /** class used to reorder input VCFs using the first variant */", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138350", "createdAt": "2020-05-14T13:31:40Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODgwMA==", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    VariantContext firstVariant = null;// may be null if the vcf is empty\n          \n          \n            \n                    VariantContext firstVariant = null;   // may be null if the vcf is empty", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138800", "createdAt": "2020-05-14T13:32:20Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */\n+    private static class FirstVariantInVcf {\n+        final File vcfFile;\n+        VariantContext firstVariant = null;// may be null if the vcf is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDIzOQ==", "bodyText": "add braces:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n          \n          \n            \n                                    if (vcfcxt.firstVariant == null) {\n          \n          \n            \n                                        log.info(\"No variant in \" + f);\n          \n          \n            \n                                     }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425140239", "createdAt": "2020-05-14T13:34:13Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTQyOQ==", "bodyText": "space\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant==null) {\n          \n          \n            \n                            if (A.firstVariant == null) {", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141429", "createdAt": "2020-05-14T13:35:50Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTc3OQ==", "bodyText": "space and braces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (B.firstVariant==null) return 0;\n          \n          \n            \n                                if (B.firstVariant == null) {\n          \n          \n            \n                                    return 0;\n          \n          \n            \n                                }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141779", "createdAt": "2020-05-14T13:36:20Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MjYwMg==", "bodyText": "spaces and braces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant!=null && B.firstVariant==null) return -1;\n          \n          \n            \n                            if (A.firstVariant != null && B.firstVariant == null) {\n          \n          \n            \n                                return -1;\n          \n          \n            \n                            }", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425142602", "createdAt": "2020-05-14T13:37:28Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;\n+                    return 1;\n+                }\n+                if (A.firstVariant!=null && B.firstVariant==null) return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzU2Mg==", "bodyText": "spacing here (and on the next 4 lines)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n          \n          \n            \n                            {Arrays.asList(shard1, shard2, shard3), vcf, 0, false},", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143562", "createdAt": "2020-05-14T13:38:47Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzkwOA==", "bodyText": "'reorder'\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {\n          \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean reorder) throws IOException {", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143908", "createdAt": "2020-05-14T13:39:15Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 0, true},\n+                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1, false},\n+                {Arrays.asList(shard1,shard3,shard2), vcf, 1, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 1, false} ,\n+                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0, false},\n+                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1, false},\n+                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 0, true}\n         };\n     }\n \n     @Test(dataProvider = \"vcfshards\")\n-    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal) throws IOException {\n-\n+    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0NDM2MA==", "bodyText": "space\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");\n          \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\", \".vcf\");", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425144360", "createdAt": "2020-05-14T13:39:50Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/vcf/MergeVcfsTest.java", "diffHunk": "@@ -11,4 +20,21 @@\n     protected CommandLineProgram getProgram() {\n         return new MergeVcfs();\n     }\n+    \n+    @Test\n+    public void TestComments() throws IOException {\n+        final String comment1 = \"This is a comment\";\n+        final List<String> args = new ArrayList<>();\n+        final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ab8a49262122d00ebba826af1f5df02d3c5f56", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/72ab8a49262122d00ebba826af1f5df02d3c5f56", "committedDate": "2020-05-14T13:47:33Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc666042909bd86ddb84d2b9f53adb24e860e193", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/fc666042909bd86ddb84d2b9f53adb24e860e193", "committedDate": "2020-05-14T13:47:48Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d815c048c7d41c3adfd9ef49349d756d1960c62c", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/d815c048c7d41c3adfd9ef49349d756d1960c62c", "committedDate": "2020-05-14T13:48:05Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/5bcb065868b2b13d7dd7f0fb17b611d365797636", "committedDate": "2020-05-14T13:48:23Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nbraces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c489f7682949b3168bbf8b4f80bb2eefc3507b", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/60c489f7682949b3168bbf8b4f80bb2eefc3507b", "committedDate": "2020-05-14T13:48:43Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e88e3bc0a4a509ad86622ef3389024a4276d47b8", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/e88e3bc0a4a509ad86622ef3389024a4276d47b8", "committedDate": "2020-05-14T13:48:59Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "019a6e6a5c57f71e32905b0ea68be0ed74db0822", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/019a6e6a5c57f71e32905b0ea68be0ed74db0822", "committedDate": "2020-05-14T13:49:16Z", "message": "Update src/test/java/picard/vcf/GatherVcfsTest.java\r\n\r\nadd spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfeec0fc8641e143865d738959def8117419395f", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/dfeec0fc8641e143865d738959def8117419395f", "committedDate": "2020-05-14T13:49:34Z", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadd spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "865c495af891d39cb0b34c402c0c77c33e75b208", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/865c495af891d39cb0b34c402c0c77c33e75b208", "committedDate": "2020-05-14T13:49:54Z", "message": "Update src/test/java/picard/vcf/MergeVcfsTest.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9ddb28fa12d351dd84d76ae426f992e1d666b2e", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/b9ddb28fa12d351dd84d76ae426f992e1d666b2e", "committedDate": "2020-05-14T13:50:17Z", "message": "Update src/test/java/picard/vcf/GatherVcfsTest.java\r\n\r\nrename sort->reorder\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6796c6df2e6e527abf41a011f9e00c62542015a7", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/6796c6df2e6e527abf41a011f9e00c62542015a7", "committedDate": "2020-05-14T13:59:41Z", "message": "Merge branch 'master' into pl_vcfcomments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e725f2d0f5fa7b9a4ce9ba84ad2a9f01026e7410", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/e725f2d0f5fa7b9a4ce9ba84ad2a9f01026e7410", "committedDate": "2020-05-14T14:20:05Z", "message": "fix variable decl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206d92f007438d002b70f81e9b2555fdda585747", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/206d92f007438d002b70f81e9b2555fdda585747", "committedDate": "2020-05-15T12:21:35Z", "message": "rename variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTQyMTY2", "url": "https://github.com/broadinstitute/picard/pull/1480#pullrequestreview-412942166", "createdAt": "2020-05-15T20:20:23Z", "commit": {"oid": "206d92f007438d002b70f81e9b2555fdda585747"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f97a0d87d9718774d02f1c1d7fc141579eb6d35", "author": {"user": {"login": "lindenb", "name": "Pierre Lindenbaum"}}, "url": "https://github.com/broadinstitute/picard/commit/5f97a0d87d9718774d02f1c1d7fc141579eb6d35", "committedDate": "2020-05-15T20:23:07Z", "message": "Merge branch 'master' into pl_vcfcomments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2407, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}