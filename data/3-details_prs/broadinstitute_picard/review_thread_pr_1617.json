{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDM4MDcx", "number": 1617, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODozNzozNFrOFRA1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMzoxNVrOFSBUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMzgzNjk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/CompareSAMs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODozNzozNFrOIXMOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODozNzozNFrOIXMOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE4ODQ0Mw==", "bodyText": "Might want to add a:\nIOUtil.assertFileIsWritable(samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE);\nbefore the call to generate the concordance report (in order to fail fast if there's a problem writing the file).", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r561188443", "createdAt": "2021-01-20T18:37:34Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/sam/CompareSAMs.java", "diffHunk": "@@ -118,6 +118,9 @@ protected int doWork() {\n             if (OUTPUT != null) {\n                 comparison.writeReport(OUTPUT, getDefaultHeaders());\n             }\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {\n+                comparison.writeMQConcordanceReport(samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE, getDefaultHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMzg1NzE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/CompareSAMsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODo0Mjo1MFrOIXMaug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODo0Mjo1MFrOIXMaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE5MTYxMA==", "bodyText": "Please deleteOnExit() any temp files created by the test.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r561191610", "createdAt": "2021-01-20T18:42:50Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -120,4 +125,77 @@ public void testComparisons(final String f1, final String f2, final ArrayList<St\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).LEFT_FILE, in2);\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).RIGHT_FILE, in1);\n     }\n+\n+    @DataProvider(name=\"compareSamsMQConcordance\")\n+    public Object[][] compareSamsMQConcordanceTestData() {\n+        return new Object[][] {\n+                {\"genomic_sorted.sam\", \"unsorted.sam\", null},\n+                {\"genomic_sorted.sam\", \"chr21.sam\", null},\n+                {\"genomic_sorted.sam\", \"bigger_seq_dict.sam\", null},\n+                {\"genomic_sorted.sam\", \"genomic_sorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"has_non_primary.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted_5.sam\", \"genomic_sorted_5_plus.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"group_same_coord.sam\", \"group_same_coord_diff_order.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 2}}},\n+                {\"genomic_sorted_same_position.sam\", \"genomic_sorted_same_position.sam\", new Object[][] { {\"0,0\", 2}}},\n+                {\"group_same_coord.sam\", \"diff_coords.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"genomic_sorted.sam\", \"unmapped_first.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"unmapped_second.sam\", new Object[][] { {\"30,0\", 1}, {\"20,20\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_second.sam\", new Object[][] { {\"0,20\", 1}, {\"30,0\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_first.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"genomic_sorted_sam_v1.6.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted2.sam\", new Object[][] { {\"20,20\", 1}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient_one_align_differ.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_two_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_one_align_differ_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_two_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"genomic_sorted.sam\", \"mq0_2.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"mq0_1.sam\", \"mq0_2.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"compareSamsMQConcordance\")\n+    public void testMQConcordance(final String f1, final String f2, final Object[][] expectedMQConcordance) throws IOException {\n+        final Path tmpOutput = Files.createTempFile(\"compareSam\", \".tsv\");\n+        final Path tmpMQConcordanceOutput = Files.createTempFile(\"compareSam.mqconcordance\", \".tsv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTgyNTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SamComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTozMDozM1rOIYGiRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTozMDozM1rOIYGiRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0MzgxNA==", "bodyText": "does this histogram really need to be written out to a separate file?  Can't it just be added to the main metrics output?", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562143814", "createdAt": "2021-01-21T19:30:33Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -72,6 +75,16 @@ public void writeReport(final File output, final List<Header> headers) {\n         comparisonMetricFile.write(output);\n     }\n \n+    public void writeMQConcordanceReport(final File output, final List<Header> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTg0NzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SamComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTozNzowNFrOIYGwGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTozNzowNFrOIYGwGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0NzM1NQ==", "bodyText": "this doesn't need a separate message.  Stating that the alignments cannot be compared (above) covers that the mapping qualities of the alignments aren't being compared.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562147355", "createdAt": "2021-01-21T19:37:04Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -155,12 +168,18 @@ private boolean compareAlignmentsAndCatalogDuplicateMarkingDifferences() {\n         if (!compareValues(leftReader.getFileHeader().getSortOrder(), rightReader.getFileHeader().getSortOrder(),\n                 \"Sort Order\")) {\n             System.out.println(\"Cannot compare alignments if sort orders differ.\");\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTg2MzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SamComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0MTo0NVrOIYG6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0MTo0NVrOIYG6HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0OTkxNw==", "bodyText": "I don't think creating a pair object and using its toString method is the best way to  generate this string.  Just build the string yourself instead.  You can write a one line method for it for clarity.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562149917", "createdAt": "2021-01-21T19:41:45Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -397,6 +416,10 @@ private boolean alignmentsMatch(final SAMRecord s1, final SAMRecord s2) {\n                 (samComparisonArgumentCollection.LENIENT_UNKNOWN_MQ_ALIGNMENT && s1.getMappingQuality() == SAMRecord.UNKNOWN_MAPPING_QUALITY && s2.getMappingQuality() == SAMRecord.UNKNOWN_MAPPING_QUALITY));\n     }\n \n+    private void compareAndUpdateMappingQualityConcordance(final SAMRecord s1, final SAMRecord s2) {\n+        mappingQualityHistogram.increment(new Pair<>(s1.getMappingQuality(), s2.getMappingQuality()).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTg2NDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SamComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0MjowOVrOIYG64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0MjowOVrOIYG64Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1MDExMw==", "bodyText": "don't need separate output.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562150113", "createdAt": "2021-01-21T19:42:09Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -407,6 +430,10 @@ private void tallyAlignmentRecords(final SAMRecord s1, final SAMRecord s2) {\n         catalogDuplicateDifferences(s1, s2);\n         final AlignmentComparison comp = compareAlignmentRecords(s1, s2);\n         comparisonMetric.updateMetric(comp);\n+\n+        if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTg3OTMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/CompareSAMsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0NjoxOFrOIYHD0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0NjoxOFrOIYHD0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1MjQwMg==", "bodyText": "the tool shouldn't throw exception in this case, but in future you can replace this pattern with Assert.assertThrows", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562152402", "createdAt": "2021-01-21T19:46:18Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -120,4 +125,77 @@ public void testComparisons(final String f1, final String f2, final ArrayList<St\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).LEFT_FILE, in2);\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).RIGHT_FILE, in1);\n     }\n+\n+    @DataProvider(name=\"compareSamsMQConcordance\")\n+    public Object[][] compareSamsMQConcordanceTestData() {\n+        return new Object[][] {\n+                {\"genomic_sorted.sam\", \"unsorted.sam\", null},\n+                {\"genomic_sorted.sam\", \"chr21.sam\", null},\n+                {\"genomic_sorted.sam\", \"bigger_seq_dict.sam\", null},\n+                {\"genomic_sorted.sam\", \"genomic_sorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"has_non_primary.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted_5.sam\", \"genomic_sorted_5_plus.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"group_same_coord.sam\", \"group_same_coord_diff_order.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 2}}},\n+                {\"genomic_sorted_same_position.sam\", \"genomic_sorted_same_position.sam\", new Object[][] { {\"0,0\", 2}}},\n+                {\"group_same_coord.sam\", \"diff_coords.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"genomic_sorted.sam\", \"unmapped_first.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"unmapped_second.sam\", new Object[][] { {\"30,0\", 1}, {\"20,20\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_second.sam\", new Object[][] { {\"0,20\", 1}, {\"30,0\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_first.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"genomic_sorted_sam_v1.6.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted2.sam\", new Object[][] { {\"20,20\", 1}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient_one_align_differ.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_two_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_one_align_differ_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_two_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"genomic_sorted.sam\", \"mq0_2.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"mq0_1.sam\", \"mq0_2.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"compareSamsMQConcordance\")\n+    public void testMQConcordance(final String f1, final String f2, final Object[][] expectedMQConcordance) throws IOException {\n+        final Path tmpOutput = Files.createTempFile(\"compareSam\", \".tsv\");\n+        final Path tmpMQConcordanceOutput = Files.createTempFile(\"compareSam.mqconcordance\", \".tsv\");\n+        final String in1 = new File(TEST_FILES_DIR, f1).getAbsolutePath();\n+        final String in2 = new File(TEST_FILES_DIR, f2).getAbsolutePath();\n+        final ArrayList<String> commandArgs = new ArrayList<>(\n+                Arrays.asList(\n+                        in1,\n+                        in2,\n+                        \"O=\" + tmpOutput,\n+                        \"OUTPUT_MQ_CONCORDANCE=\" + tmpMQConcordanceOutput\n+                )\n+        );\n+        // If the files cannot be compared (e.g. if their sort order differs) we expect an exception to be thrown.\n+        if (expectedMQConcordance == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTg5MzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SamComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0OTo0NlrOIYHMLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0OTo0NlrOIYHMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1NDU0MQ==", "bodyText": "don't throw an exception.  we want the tool to run successfully and return that the SAM files are different in this case.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562154541", "createdAt": "2021-01-21T19:49:46Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -155,12 +168,18 @@ private boolean compareAlignmentsAndCatalogDuplicateMarkingDifferences() {\n         if (!compareValues(leftReader.getFileHeader().getSortOrder(), rightReader.getFileHeader().getSortOrder(),\n                 \"Sort Order\")) {\n             System.out.println(\"Cannot compare alignments if sort orders differ.\");\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {\n+                throw new PicardException(\"Cannot generate mapping quality concordance histogram because the two files cannot be compared (see reason above).\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDQwMDc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/sam/CompareSAMsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMjoxNVrOIYxWkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMjoxNVrOIYxWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0NTMyOQ==", "bodyText": "unused", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562845329", "createdAt": "2021-01-22T19:02:15Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -24,18 +24,21 @@\n package picard.sam;\n \n import htsjdk.samtools.metrics.MetricsFile;\n+import htsjdk.samtools.util.Histogram;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n+import picard.PicardException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDQwMzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/sam/util/SAMComparisonArgumentCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMzoxNVrOIYxYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMzoxNVrOIYxYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0NTc5Ng==", "bodyText": "unused", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562845796", "createdAt": "2021-01-22T19:03:15Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SAMComparisonArgumentCollection.java", "diffHunk": "@@ -3,6 +3,8 @@\n import org.broadinstitute.barclay.argparser.Argument;\n import org.broadinstitute.barclay.argparser.ArgumentCollection;\n \n+import java.io.File;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}