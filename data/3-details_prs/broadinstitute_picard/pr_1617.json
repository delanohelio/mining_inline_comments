{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDM4MDcx", "number": 1617, "title": "Add optional mapping quality concordance feature to CompareSAMs", "bodyText": "If the argument OUTPUT_MQ_CONCORDANCE is provided, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\nAdded separate tests for all CompareSAM test cases to check the mapping quality concordance.\n\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-12-02T14:02:20Z", "url": "https://github.com/broadinstitute/picard/pull/1617", "merged": true, "mergeCommit": {"oid": "4a9c42dca657514b82fedb1c7be7613ecdddf6e3"}, "closed": true, "closedAt": "2021-01-25T15:17:20Z", "author": {"login": "michaelgatzen"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdyEgZHgFqTU3MjUxNjUwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdzllCfgBqjQyNDUxOTA2MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNTE2NTA5", "url": "https://github.com/broadinstitute/picard/pull/1617#pullrequestreview-572516509", "createdAt": "2021-01-20T18:35:44Z", "commit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODozNzozNFrOIXMOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxODo0Mjo1MFrOIXMaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE4ODQ0Mw==", "bodyText": "Might want to add a:\nIOUtil.assertFileIsWritable(samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE);\nbefore the call to generate the concordance report (in order to fail fast if there's a problem writing the file).", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r561188443", "createdAt": "2021-01-20T18:37:34Z", "author": {"login": "gbggrant"}, "path": "src/main/java/picard/sam/CompareSAMs.java", "diffHunk": "@@ -118,6 +118,9 @@ protected int doWork() {\n             if (OUTPUT != null) {\n                 comparison.writeReport(OUTPUT, getDefaultHeaders());\n             }\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {\n+                comparison.writeMQConcordanceReport(samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE, getDefaultHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE5MTYxMA==", "bodyText": "Please deleteOnExit() any temp files created by the test.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r561191610", "createdAt": "2021-01-20T18:42:50Z", "author": {"login": "gbggrant"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -120,4 +125,77 @@ public void testComparisons(final String f1, final String f2, final ArrayList<St\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).LEFT_FILE, in2);\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).RIGHT_FILE, in1);\n     }\n+\n+    @DataProvider(name=\"compareSamsMQConcordance\")\n+    public Object[][] compareSamsMQConcordanceTestData() {\n+        return new Object[][] {\n+                {\"genomic_sorted.sam\", \"unsorted.sam\", null},\n+                {\"genomic_sorted.sam\", \"chr21.sam\", null},\n+                {\"genomic_sorted.sam\", \"bigger_seq_dict.sam\", null},\n+                {\"genomic_sorted.sam\", \"genomic_sorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"has_non_primary.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted_5.sam\", \"genomic_sorted_5_plus.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"group_same_coord.sam\", \"group_same_coord_diff_order.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 2}}},\n+                {\"genomic_sorted_same_position.sam\", \"genomic_sorted_same_position.sam\", new Object[][] { {\"0,0\", 2}}},\n+                {\"group_same_coord.sam\", \"diff_coords.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"genomic_sorted.sam\", \"unmapped_first.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"unmapped_second.sam\", new Object[][] { {\"30,0\", 1}, {\"20,20\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_second.sam\", new Object[][] { {\"0,20\", 1}, {\"30,0\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_first.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"genomic_sorted_sam_v1.6.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted2.sam\", new Object[][] { {\"20,20\", 1}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient_one_align_differ.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_two_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_one_align_differ_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_two_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"genomic_sorted.sam\", \"mq0_2.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"mq0_1.sam\", \"mq0_2.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"compareSamsMQConcordance\")\n+    public void testMQConcordance(final String f1, final String f2, final Object[][] expectedMQConcordance) throws IOException {\n+        final Path tmpOutput = Files.createTempFile(\"compareSam\", \".tsv\");\n+        final Path tmpMQConcordanceOutput = Files.createTempFile(\"compareSam.mqconcordance\", \".tsv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNTI3MTIx", "url": "https://github.com/broadinstitute/picard/pull/1617#pullrequestreview-572527121", "createdAt": "2021-01-20T18:49:11Z", "commit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNjY3NTE2", "url": "https://github.com/broadinstitute/picard/pull/1617#pullrequestreview-573667516", "createdAt": "2021-01-21T19:30:33Z", "commit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTozMDozM1rOIYGiRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxOTo0OTo0NlrOIYHMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0MzgxNA==", "bodyText": "does this histogram really need to be written out to a separate file?  Can't it just be added to the main metrics output?", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562143814", "createdAt": "2021-01-21T19:30:33Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -72,6 +75,16 @@ public void writeReport(final File output, final List<Header> headers) {\n         comparisonMetricFile.write(output);\n     }\n \n+    public void writeMQConcordanceReport(final File output, final List<Header> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0NzM1NQ==", "bodyText": "this doesn't need a separate message.  Stating that the alignments cannot be compared (above) covers that the mapping qualities of the alignments aren't being compared.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562147355", "createdAt": "2021-01-21T19:37:04Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -155,12 +168,18 @@ private boolean compareAlignmentsAndCatalogDuplicateMarkingDifferences() {\n         if (!compareValues(leftReader.getFileHeader().getSortOrder(), rightReader.getFileHeader().getSortOrder(),\n                 \"Sort Order\")) {\n             System.out.println(\"Cannot compare alignments if sort orders differ.\");\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0OTkxNw==", "bodyText": "I don't think creating a pair object and using its toString method is the best way to  generate this string.  Just build the string yourself instead.  You can write a one line method for it for clarity.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562149917", "createdAt": "2021-01-21T19:41:45Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -397,6 +416,10 @@ private boolean alignmentsMatch(final SAMRecord s1, final SAMRecord s2) {\n                 (samComparisonArgumentCollection.LENIENT_UNKNOWN_MQ_ALIGNMENT && s1.getMappingQuality() == SAMRecord.UNKNOWN_MAPPING_QUALITY && s2.getMappingQuality() == SAMRecord.UNKNOWN_MAPPING_QUALITY));\n     }\n \n+    private void compareAndUpdateMappingQualityConcordance(final SAMRecord s1, final SAMRecord s2) {\n+        mappingQualityHistogram.increment(new Pair<>(s1.getMappingQuality(), s2.getMappingQuality()).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1MDExMw==", "bodyText": "don't need separate output.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562150113", "createdAt": "2021-01-21T19:42:09Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -407,6 +430,10 @@ private void tallyAlignmentRecords(final SAMRecord s1, final SAMRecord s2) {\n         catalogDuplicateDifferences(s1, s2);\n         final AlignmentComparison comp = compareAlignmentRecords(s1, s2);\n         comparisonMetric.updateMetric(comp);\n+\n+        if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1MjQwMg==", "bodyText": "the tool shouldn't throw exception in this case, but in future you can replace this pattern with Assert.assertThrows", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562152402", "createdAt": "2021-01-21T19:46:18Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -120,4 +125,77 @@ public void testComparisons(final String f1, final String f2, final ArrayList<St\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).LEFT_FILE, in2);\n         Assert.assertEquals(metricsOutput.getMetrics().get(1).RIGHT_FILE, in1);\n     }\n+\n+    @DataProvider(name=\"compareSamsMQConcordance\")\n+    public Object[][] compareSamsMQConcordanceTestData() {\n+        return new Object[][] {\n+                {\"genomic_sorted.sam\", \"unsorted.sam\", null},\n+                {\"genomic_sorted.sam\", \"chr21.sam\", null},\n+                {\"genomic_sorted.sam\", \"bigger_seq_dict.sam\", null},\n+                {\"genomic_sorted.sam\", \"genomic_sorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"has_non_primary.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted_5.sam\", \"genomic_sorted_5_plus.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"group_same_coord.sam\", \"group_same_coord_diff_order.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 2}}},\n+                {\"genomic_sorted_same_position.sam\", \"genomic_sorted_same_position.sam\", new Object[][] { {\"0,0\", 2}}},\n+                {\"group_same_coord.sam\", \"diff_coords.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 4}}},\n+                {\"genomic_sorted.sam\", \"unmapped_first.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"unmapped_second.sam\", new Object[][] { {\"30,0\", 1}, {\"20,20\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_second.sam\", new Object[][] { {\"0,20\", 1}, {\"30,0\", 1}}},\n+                {\"unmapped_first.sam\", \"unmapped_first.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}},\n+                {\"genomic_sorted.sam\", \"genomic_sorted_sam_v1.6.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted.sam\", new Object[][] { {\"20,20\", 1}, {\"30,30\", 1}}},\n+                {\"unsorted.sam\", \"unsorted2.sam\", new Object[][] { {\"20,20\", 1}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient_one_align_differ.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_two_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_lenient.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base.sam\", \"duplicate_four_mismatch_strict.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_one_align_differ_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_two_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_lenient_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"duplicate_base_queryname.sam\", \"duplicate_four_mismatch_strict_queryname.sam\", new Object[][] { {\"20,20\", 2}, {\"30,30\", 12}}},\n+                {\"genomic_sorted.sam\", \"mq0_2.sam\", new Object[][] { {\"20,0\", 1}, {\"30,30\", 1}}},\n+                {\"mq0_1.sam\", \"mq0_2.sam\", new Object[][] { {\"0,0\", 1}, {\"30,30\", 1}}}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"compareSamsMQConcordance\")\n+    public void testMQConcordance(final String f1, final String f2, final Object[][] expectedMQConcordance) throws IOException {\n+        final Path tmpOutput = Files.createTempFile(\"compareSam\", \".tsv\");\n+        final Path tmpMQConcordanceOutput = Files.createTempFile(\"compareSam.mqconcordance\", \".tsv\");\n+        final String in1 = new File(TEST_FILES_DIR, f1).getAbsolutePath();\n+        final String in2 = new File(TEST_FILES_DIR, f2).getAbsolutePath();\n+        final ArrayList<String> commandArgs = new ArrayList<>(\n+                Arrays.asList(\n+                        in1,\n+                        in2,\n+                        \"O=\" + tmpOutput,\n+                        \"OUTPUT_MQ_CONCORDANCE=\" + tmpMQConcordanceOutput\n+                )\n+        );\n+        // If the files cannot be compared (e.g. if their sort order differs) we expect an exception to be thrown.\n+        if (expectedMQConcordance == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE1NDU0MQ==", "bodyText": "don't throw an exception.  we want the tool to run successfully and return that the SAM files are different in this case.", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562154541", "createdAt": "2021-01-21T19:49:46Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SamComparison.java", "diffHunk": "@@ -155,12 +168,18 @@ private boolean compareAlignmentsAndCatalogDuplicateMarkingDifferences() {\n         if (!compareValues(leftReader.getFileHeader().getSortOrder(), rightReader.getFileHeader().getSortOrder(),\n                 \"Sort Order\")) {\n             System.out.println(\"Cannot compare alignments if sort orders differ.\");\n+            if (samComparisonArgumentCollection.OUTPUT_MQ_CONCORDANCE != null) {\n+                throw new PicardException(\"Cannot generate mapping quality concordance histogram because the two files cannot be compared (see reason above).\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2851668345663e39ab393ca2fde3eb0c83a3e"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e06bb307fb7bc3fd0b4c7cf7ffacd30db302457", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/6e06bb307fb7bc3fd0b4c7cf7ffacd30db302457", "committedDate": "2021-01-22T13:16:09Z", "message": "Implemented several PR comments\n\n- The mapping quality concordance histogram is written to the main metrics file instead of a separate metrics file\n- The optional File input OUTPUT_MQ_CONCORDANCE is changed to a boolean COMPARE_MQ\n- Changed documentation accordingly\n- The tool does not throw an exception if mapping quality should be analyzed but the files cannot be compared\n- Modified tests accordingly\n- Made sure that temporary test files are deleted"}, "afterCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd", "committedDate": "2021-01-22T13:23:22Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NTM3NjIx", "url": "https://github.com/broadinstitute/picard/pull/1617#pullrequestreview-574537621", "createdAt": "2021-01-22T19:02:15Z", "commit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMjoxNVrOIYxWkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxOTowMzoxNVrOIYxYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0NTMyOQ==", "bodyText": "unused", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562845329", "createdAt": "2021-01-22T19:02:15Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/sam/CompareSAMsTest.java", "diffHunk": "@@ -24,18 +24,21 @@\n package picard.sam;\n \n import htsjdk.samtools.metrics.MetricsFile;\n+import htsjdk.samtools.util.Histogram;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n+import picard.PicardException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0NTc5Ng==", "bodyText": "unused", "url": "https://github.com/broadinstitute/picard/pull/1617#discussion_r562845796", "createdAt": "2021-01-22T19:03:15Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/util/SAMComparisonArgumentCollection.java", "diffHunk": "@@ -3,6 +3,8 @@\n import org.broadinstitute.barclay.argparser.Argument;\n import org.broadinstitute.barclay.argparser.ArgumentCollection;\n \n+import java.io.File;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/89460cd441f5f8e6bfb8a15d01a4b16b5b4647dd", "committedDate": "2021-01-22T13:23:22Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}, "afterCommit": {"oid": "eddd97210c197fd4fc411c67f809a48244e446ab", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/eddd97210c197fd4fc411c67f809a48244e446ab", "committedDate": "2021-01-25T10:28:54Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eddd97210c197fd4fc411c67f809a48244e446ab", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/eddd97210c197fd4fc411c67f809a48244e446ab", "committedDate": "2021-01-25T10:28:54Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}, "afterCommit": {"oid": "5db820becde2a042b1c4c52e67d5e3816eced211", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/5db820becde2a042b1c4c52e67d5e3816eced211", "committedDate": "2021-01-25T11:18:01Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "367195c3da5ce24f5373e15cc8e990675e575257", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/367195c3da5ce24f5373e15cc8e990675e575257", "committedDate": "2021-01-25T11:54:02Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5db820becde2a042b1c4c52e67d5e3816eced211", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/5db820becde2a042b1c4c52e67d5e3816eced211", "committedDate": "2021-01-25T11:18:01Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}, "afterCommit": {"oid": "367195c3da5ce24f5373e15cc8e990675e575257", "author": {"user": {"login": "michaelgatzen", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/367195c3da5ce24f5373e15cc8e990675e575257", "committedDate": "2021-01-25T11:54:02Z", "message": "Added mapping quality concordance functionality to CompareSAMs\n\n- If the argument COMPARE_MQ is set to true, CompareSAMs will produce a histogram that reflects concordance of mapping qualities between two alignment files.\n- Added saparate tests for all CompareSAM test cases to check the mapping quality concordance."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2352, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}