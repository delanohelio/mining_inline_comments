{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTk3NjQy", "number": 1456, "title": "Use new IntervalMergingIterator to merge intervals on the fly ", "bodyText": "and write the intervalList without having to hold it all in memory.\nfixes #1454\nDescription\nGive your PR a concise yet descriptive title\nPlease explain the changes you made here.\nExplain the motivation for making this change. What existing problem does the pull request solve?\nMention any issues fixed, addressed or otherwise related to this pull request, including issue numbers or hard links for issues in other repos.\nYou can delete these instructions once you have written your PR description.\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-01-26T08:59:03Z", "url": "https://github.com/broadinstitute/picard/pull/1456", "merged": true, "mergeCommit": {"oid": "91713cef6027b40397ecb311a2114ec1fdd77859"}, "closed": true, "closedAt": "2020-08-12T20:55:58Z", "author": {"login": "yfarjoun"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcINkrJAFqTM2NTI1NDIwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc95WM1AH2gAyMzY3MTk3NjQyOjk0ZjNhZDkxOWFkZmE2MGQ3ZmQ2MWE3OWJhNzZkNzdkMDRjY2JlZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjU0MjAx", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-365254201", "createdAt": "2020-02-26T21:26:18Z", "commit": {"oid": "68fe8bea94b403d64f47d456831629b684776e07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyNjoxOFrOFu82rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyNjoxOFrOFu82rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NTg1Mw==", "bodyText": "Would be nice to expose to the command line the option to not concatenate all the merged interval names.  In the use case which prompted this, a TON of sites (think whole genome gvcf with bp resolution) are often merged into a single interval, which then has an outrageously long concatenated name.  These concatenated names often don't carry any useful information, and can make the resulting interval list extremely large.", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r384775853", "createdAt": "2020-02-26T21:26:18Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -84,10 +91,23 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        final IntervalList intervalList = VCFFileReader.fromVcf(INPUT, INCLUDE_FILTERED);\n+        try (VCFFileReader vcfReader = new VCFFileReader(INPUT.toPath(), false)) {\n+            final Iterator<Interval> samFileIterator = VCFFileReader.toIntervals(vcfReader, INCLUDE_FILTERED);\n+            try (IntervalListWriter writer = new IntervalListWriter(OUTPUT.toPath(), new SAMFileHeader(vcfReader.getFileHeader().getSequenceDictionary()))) {\n+                final IntervalList.IntervalMergerIterator mergingIterator =\n+                        new IntervalList.IntervalMergerIterator(samFileIterator, true, false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68fe8bea94b403d64f47d456831629b684776e07"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da2b5d5dc9987f5e86e90f15b85fc9a32b8d7c6", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/9da2b5d5dc9987f5e86e90f15b85fc9a32b8d7c6", "committedDate": "2020-03-20T01:49:38Z", "message": "- use new IntervalMergingIterator to merge intervals on the fly and write the intervalList without having to hold it all in memory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e883eccaf62e7b68c2dca4316e54bf9e96949fc5", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/e883eccaf62e7b68c2dca4316e54bf9e96949fc5", "committedDate": "2020-03-20T01:49:58Z", "message": "- adapted code to modified version of merging iterator that was actually merged into htsjdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ed64955b878e90b44037156f14c504334368114", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/8ed64955b878e90b44037156f14c504334368114", "committedDate": "2020-03-20T01:49:58Z", "message": "- make the concatenation of variant names/intervals optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adfe651333496281cefb965d5abac90437325ccd", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/adfe651333496281cefb965d5abac90437325ccd", "committedDate": "2020-03-20T01:16:32Z", "message": "- make the concatenation of variant names/intervals optional"}, "afterCommit": {"oid": "8ed64955b878e90b44037156f14c504334368114", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/8ed64955b878e90b44037156f14c504334368114", "committedDate": "2020-03-20T01:49:58Z", "message": "- make the concatenation of variant names/intervals optional"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Mjk4NTY4", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-389298568", "createdAt": "2020-04-07T16:40:48Z", "commit": {"oid": "8ed64955b878e90b44037156f14c504334368114"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo0MDo0OFrOGCMeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0NjozN1rOGCVdsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1NDYyNA==", "bodyText": "Don't we usually want boolean argument defaults to be false?", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r404954624", "createdAt": "2020-04-07T16:40:48Z", "author": {"login": "skwalker"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -74,6 +81,11 @@\n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output Picard Interval List.\")\n     public File OUTPUT;\n \n+    @Argument(doc=\"Controls the naming of the resulting intervals. When true, each resulting interval will be named the concatenation of \" +\n+            \"the variant ID fields (if present), or 'interval-<number>' (if not) with a pipe '|' separator. \" +\n+            \"When false, only the first name will be used.\")\n+    public boolean CONCATENATE_IDS = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed64955b878e90b44037156f14c504334368114"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjAwMA==", "bodyText": "does this need to be \".incomplete\" ?", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r405102000", "createdAt": "2020-04-07T20:46:37Z", "author": {"login": "skwalker"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -84,10 +96,23 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        final IntervalList intervalList = VCFFileReader.fromVcf(INPUT, INCLUDE_FILTERED);\n+        try (VCFFileReader vcfReader = new VCFFileReader(INPUT.toPath(), false)) {\n+            final Iterator<Interval> samFileIterator = VCFFileReader.toIntervals(vcfReader, INCLUDE_FILTERED);\n+            try (IntervalListWriter writer = new IntervalListWriter(OUTPUT.toPath(), new SAMFileHeader(vcfReader.getFileHeader().getSequenceDictionary()))) {\n+                final IntervalList.IntervalMergerIterator mergingIterator =\n+                        new IntervalList.IntervalMergerIterator(samFileIterator, true, false, CONCATENATE_IDS);\n+                for (final Interval interval : new IterableAdapter<>(mergingIterator)){\n+                    writer.write(interval);\n+                }\n+            } catch (IOException e) {\n+                if(!OUTPUT.renameTo(new File(OUTPUT.getAbsolutePath() + \"incomplete\"))){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed64955b878e90b44037156f14c504334368114"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5eab4bdf1224cc5c04e0f07681c4e97c80c15c2", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/b5eab4bdf1224cc5c04e0f07681c4e97c80c15c2", "committedDate": "2020-06-02T22:22:00Z", "message": "making IntervalListToBed faster (3 mins instead of over 3 hours for a 1.6G vcf)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/f2822b6f816c279fd32c6f1688011de720e89c7f", "committedDate": "2020-06-02T22:23:44Z", "message": "minor updates for yossi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODQ0MDc1", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-431844075", "createdAt": "2020-06-16T19:55:03Z", "commit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTo1NTowM1rOGkq7VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDowNTowNVrOGkrO7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTIzNw==", "bodyText": "no need to close out since it's inside the T-W-R loop.", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441105237", "createdAt": "2020-06-16T19:55:03Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();\n+            if (SORT) {\n+\n+                final SortingCollection<Interval> sortedIntervals =\n+                        SortingCollection.newInstance(Interval.class, new IntervalCodec(((SAMFileHeader)intervalsReader.getHeader()).getSequenceDictionary()),\n+                                Interval::compareTo, 500000, OUTPUT.toPath());\n+\n+                for (final Interval i: intervalsReader.iterator()) {\n+                    sortedIntervals.add(i);\n+                }\n+\n+                intervalIterable = sortedIntervals;\n+            }\n+\n+            for (final Interval i : intervalIterable) {\n                 final String strand = i.isNegativeStrand() ? \"-\" : \"+\";\n                 final List<?> fields = CollectionUtil.makeList(i.getContig(), i.getStart()-1, i.getEnd(), i.getName(), SCORE, strand);\n                 out.append(fields.stream().map(String::valueOf).collect(Collectors.joining(\"\\t\")));\n                 out.newLine();\n-            }\n \n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNjAyNA==", "bodyText": "this is actually a closable iterator, so you can put it inside the try clause above as well", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441106024", "createdAt": "2020-06-16T19:56:33Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNzA5NQ==", "bodyText": "why was this bad? perhaps you can explain in a comment since the code below seems needlessly complicated....", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441107095", "createdAt": "2020-06-16T19:58:36Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTEwNQ==", "bodyText": "unneeded empty new lines.", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441109105", "createdAt": "2020-06-16T20:02:31Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();\n+            if (SORT) {\n+\n+                final SortingCollection<Interval> sortedIntervals =\n+                        SortingCollection.newInstance(Interval.class, new IntervalCodec(((SAMFileHeader)intervalsReader.getHeader()).getSequenceDictionary()),\n+                                Interval::compareTo, 500000, OUTPUT.toPath());\n+\n+                for (final Interval i: intervalsReader.iterator()) {\n+                    sortedIntervals.add(i);\n+                }\n+\n+                intervalIterable = sortedIntervals;\n+            }\n+\n+            for (final Interval i : intervalIterable) {\n                 final String strand = i.isNegativeStrand() ? \"-\" : \"+\";\n                 final List<?> fields = CollectionUtil.makeList(i.getContig(), i.getStart()-1, i.getEnd(), i.getName(), SCORE, strand);\n                 out.append(fields.stream().map(String::valueOf).collect(Collectors.joining(\"\\t\")));\n                 out.newLine();\n-            }\n \n+            }\n             out.close();\n-        }\n-        catch (IOException ioe) {\n+            return 0;\n+        } catch (IOException ioe) {\n             throw new RuntimeIOException(ioe);\n         }\n \n-        return 0;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTkzMA==", "bodyText": "Hmmm. The reason that this was default true was that that was the behavior prior to making this an option....we didn't want to change the default behavior....why does the default need to change?", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441109930", "createdAt": "2020-06-16T20:04:20Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -84,7 +84,7 @@\n     @Argument(doc=\"Controls the naming of the resulting intervals. When true, each resulting interval will be named the concatenation of \" +\n             \"the variant ID fields (if present), or 'interval-<number>' (if not) with a pipe '|' separator. \" +\n             \"When false, only the first name will be used.\")\n-    public boolean CONCATENATE_IDS = true;\n+    public boolean CONCATENATE_IDS = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMDI1Mg==", "bodyText": "there is a preference for explicit imports...can you ask IntelliJ to use explicit imports?", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r441110252", "createdAt": "2020-06-16T20:05:05Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -23,11 +23,11 @@\n  */\n package picard.util;\n \n-import htsjdk.samtools.util.CollectionUtil;\n-import htsjdk.samtools.util.IOUtil;\n-import htsjdk.samtools.util.Interval;\n-import htsjdk.samtools.util.IntervalList;\n-import htsjdk.samtools.util.RuntimeIOException;\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb98421370be9ff845aa16a542fe042e900ae3e", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/5fb98421370be9ff845aa16a542fe042e900ae3e", "committedDate": "2020-06-17T16:44:23Z", "message": "responding to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd351944bde1a83c757616ee9ecb1e151caa83e3", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/cd351944bde1a83c757616ee9ecb1e151caa83e3", "committedDate": "2020-06-19T14:39:49Z", "message": "responding to comments; fixing sort in intervallisttobed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njc4OTg3", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-439678987", "createdAt": "2020-06-30T05:25:16Z", "commit": {"oid": "cd351944bde1a83c757616ee9ecb1e151caa83e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyNToxNlrOGqsL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyNToxNlrOGqsL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNzMxMg==", "bodyText": "this cannot work...the @argument value is modified after the class is instantiated...so concatenate_ids will always be true. move this line into doWork()", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r447417312", "createdAt": "2020-06-30T05:25:16Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -81,10 +81,17 @@\n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output Picard Interval List.\")\n     public File OUTPUT;\n \n-    @Argument(doc=\"Controls the naming of the resulting intervals. When true, each resulting interval will be named the concatenation of \" +\n-            \"the variant ID fields (if present), or 'interval-<number>' (if not) with a pipe '|' separator. \" +\n-            \"When false, only the first name will be used.\")\n-    public boolean CONCATENATE_IDS = false;\n+\n+    public enum VARIANT_ID_TYPES {\n+        CONCAT_ALL,\n+        USE_FIRST\n+    }\n+\n+    @Argument(doc=\"Controls the naming of the resulting intervals. When set to CONCAT_ALL (the default), each resulting \" +\n+            \"interval will be named the concatenation of the variant ID fields (if present), or 'interval-<number>' \" +\n+            \"(if not) with a pipe '|' separator. If set to USE_FIRST, only the first name will be used.\")\n+    public VARIANT_ID_TYPES VARIANT_ID_METHOD = VARIANT_ID_TYPES.CONCAT_ALL;\n+    public final boolean concatenate_ids = (VARIANT_ID_METHOD == VARIANT_ID_TYPES.CONCAT_ALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd351944bde1a83c757616ee9ecb1e151caa83e3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njc5NTM5", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-439679539", "createdAt": "2020-06-30T05:26:48Z", "commit": {"oid": "cd351944bde1a83c757616ee9ecb1e151caa83e3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4193e26c0e539bae219ea5af4bc2715bdd800da4", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/4193e26c0e539bae219ea5af4bc2715bdd800da4", "committedDate": "2020-07-09T19:34:25Z", "message": "responding to yossi's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTYyNjIy", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-445962622", "createdAt": "2020-07-09T20:55:51Z", "commit": {"oid": "4193e26c0e539bae219ea5af4bc2715bdd800da4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDo1NTo1MlrOGvhfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDo1ODozNVrOGvhk5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDkzNw==", "bodyText": "still no need to close", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r452484937", "createdAt": "2020-07-09T20:55:52Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();\n+            if (SORT) {\n+\n+                final SortingCollection<Interval> sortedIntervals =\n+                        SortingCollection.newInstance(Interval.class, new IntervalCodec(((SAMFileHeader)intervalsReader.getHeader()).getSequenceDictionary()),\n+                                Interval::compareTo, 500000, OUTPUT.toPath());\n+\n+                for (final Interval i: intervalsReader.iterator()) {\n+                    sortedIntervals.add(i);\n+                }\n+\n+                intervalIterable = sortedIntervals;\n+            }\n+\n+            for (final Interval i : intervalIterable) {\n                 final String strand = i.isNegativeStrand() ? \"-\" : \"+\";\n                 final List<?> fields = CollectionUtil.makeList(i.getContig(), i.getStart()-1, i.getEnd(), i.getName(), SCORE, strand);\n                 out.append(fields.stream().map(String::valueOf).collect(Collectors.joining(\"\\t\")));\n                 out.newLine();\n-            }\n \n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNTIzNw=="}, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTg0Ng==", "bodyText": "I meant that intervalIterable can be instantiated inside the parens:\ntry (AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n       Iterable<Interval> intervalIterable = intervalsReader.iterator();\n       BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)){", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r452485846", "createdAt": "2020-07-09T20:57:34Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNjAyNA=="}, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjI2Nw==", "bodyText": "too many new lines", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r452486267", "createdAt": "2020-07-09T20:58:22Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/vcf/VcfToIntervalListTest.java", "diffHunk": "@@ -48,12 +49,33 @@ public void testExcludingFiltered(\n         if (includeFiltered) {\n             arguments.add(VcfToIntervalList.INCLUDE_FILTERED_SHORT_NAME + \"=true\");\n         }\n+        if (useFirstID) {\n+            arguments.add(\"VARIANT_ID_METHOD=USE_FIRST\");\n+        } else {\n+            arguments.add(\"VARIANT_ID_METHOD=CONCAT_ALL\"); // this should be the default and unnecessary\n+        }\n         runPicardCommandLine(arguments);\n \n         Assert.assertTrue(outputFile.exists());\n \n         final List<Interval> intervals = IntervalList.fromFile(outputFile).getIntervals();\n \n         Assert.assertEquals(intervals.size(), expectedIntervalsSize);\n+\n+        if (useFirstID) {\n+            for (Interval interval : intervals) {\n+                Assert.assertFalse(interval.getName().contains(\"|\"));\n+            }\n+        } else {\n+            // make sure the one where two sites that should be concatenated into one interval were actually concatenated\n+            Assert.assertTrue(intervals.get(5).getName().contains(\"|\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4193e26c0e539bae219ea5af4bc2715bdd800da4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjM3Mw==", "bodyText": "remove comment?", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r452486373", "createdAt": "2020-07-09T20:58:35Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/vcf/VcfToIntervalListTest.java", "diffHunk": "@@ -48,12 +49,33 @@ public void testExcludingFiltered(\n         if (includeFiltered) {\n             arguments.add(VcfToIntervalList.INCLUDE_FILTERED_SHORT_NAME + \"=true\");\n         }\n+        if (useFirstID) {\n+            arguments.add(\"VARIANT_ID_METHOD=USE_FIRST\");\n+        } else {\n+            arguments.add(\"VARIANT_ID_METHOD=CONCAT_ALL\"); // this should be the default and unnecessary\n+        }\n         runPicardCommandLine(arguments);\n \n         Assert.assertTrue(outputFile.exists());\n \n         final List<Interval> intervals = IntervalList.fromFile(outputFile).getIntervals();\n \n         Assert.assertEquals(intervals.size(), expectedIntervalsSize);\n+\n+        if (useFirstID) {\n+            for (Interval interval : intervals) {\n+                Assert.assertFalse(interval.getName().contains(\"|\"));\n+            }\n+        } else {\n+            // make sure the one where two sites that should be concatenated into one interval were actually concatenated\n+            Assert.assertTrue(intervals.get(5).getName().contains(\"|\"));\n+\n+\n+        }\n+\n+\n+\n     }\n }\n+\n+// USE_FIRST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4193e26c0e539bae219ea5af4bc2715bdd800da4"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/fd108292a7c3d4c06d068fb2d1285dc1ee94c37f", "committedDate": "2020-07-17T19:37:05Z", "message": "responding to yossi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTIyNzU1", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-450922755", "createdAt": "2020-07-17T19:57:44Z", "commit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTI5OTIw", "url": "https://github.com/broadinstitute/picard/pull/1456#pullrequestreview-450929920", "createdAt": "2020-07-17T20:11:24Z", "commit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxMToyNFrOGzf3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0MDoyMFrOG0NFhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MjU2MQ==", "bodyText": "No longer need to close out because try-with-resources", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r456652561", "createdAt": "2020-07-17T20:11:24Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +75,45 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n-\n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n-                final String strand = i.isNegativeStrand() ? \"-\" : \"+\";\n-                final List<?> fields = CollectionUtil.makeList(i.getContig(), i.getStart()-1, i.getEnd(), i.getName(), SCORE, strand);\n-                out.append(fields.stream().map(String::valueOf).collect(Collectors.joining(\"\\t\")));\n-                out.newLine();\n-            }\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             CloseableIterator<Interval> intervalsToUse = getSortedIntervals(intervalsReader);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n+            intervalsToUse.stream().forEach(i -> generateOutput(i, out));\n \n             out.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3OTM5OQ==", "bodyText": "empty new line still here", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r457379399", "createdAt": "2020-07-20T13:24:47Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListToBed.java", "diffHunk": "@@ -69,24 +69,37 @@ protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n \n-        IntervalList intervals = IntervalList.fromFile(INPUT);\n-        if (SORT) intervals = intervals.sorted();\n+        try (final AbstractFeatureReader<Interval, LineIterator> intervalsReader = AbstractFeatureReader.getFeatureReader(INPUT.getPath(), new IntervalListCodec(), false);\n+             final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT)) {\n \n-        try {\n-            final BufferedWriter out = IOUtil.openFileForBufferedWriting(OUTPUT);\n-            for (final Interval i : intervals) {\n+            Iterable<Interval> intervalIterable = intervalsReader.iterator();\n+            if (SORT) {\n+\n+                final SortingCollection<Interval> sortedIntervals =\n+                        SortingCollection.newInstance(Interval.class, new IntervalCodec(((SAMFileHeader)intervalsReader.getHeader()).getSequenceDictionary()),\n+                                Interval::compareTo, 500000, OUTPUT.toPath());\n+\n+                for (final Interval i: intervalsReader.iterator()) {\n+                    sortedIntervals.add(i);\n+                }\n+\n+                intervalIterable = sortedIntervals;\n+            }\n+\n+            for (final Interval i : intervalIterable) {\n                 final String strand = i.isNegativeStrand() ? \"-\" : \"+\";\n                 final List<?> fields = CollectionUtil.makeList(i.getContig(), i.getStart()-1, i.getEnd(), i.getName(), SCORE, strand);\n                 out.append(fields.stream().map(String::valueOf).collect(Collectors.joining(\"\\t\")));\n                 out.newLine();\n-            }\n \n+            }\n             out.close();\n-        }\n-        catch (IOException ioe) {\n+            return 0;\n+        } catch (IOException ioe) {\n             throw new RuntimeIOException(ioe);\n         }\n \n-        return 0;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTEwNQ=="}, "originalCommit": {"oid": "f2822b6f816c279fd32c6f1688011de720e89c7f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MDU2OA==", "bodyText": "no longer needs \"TODO\" comment", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r457380568", "createdAt": "2020-07-20T13:26:09Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -83,11 +101,25 @@\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n+        final boolean concatenate_ids = (VARIANT_ID_METHOD == VARIANT_ID_TYPES.CONCAT_ALL); // TODO: move to doWork() section\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NTQwMg==", "bodyText": "unnecessary semicolon", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r457385402", "createdAt": "2020-07-20T13:31:31Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/vcf/VcfToIntervalList.java", "diffHunk": "@@ -83,11 +101,25 @@\n     protected int doWork() {\n         IOUtil.assertFileIsReadable(INPUT);\n         IOUtil.assertFileIsWritable(OUTPUT);\n+        final boolean concatenate_ids = (VARIANT_ID_METHOD == VARIANT_ID_TYPES.CONCAT_ALL); // TODO: move to doWork() section\n \n-        final IntervalList intervalList = VCFFileReader.fromVcf(INPUT, INCLUDE_FILTERED);\n+        try (VCFFileReader vcfReader = new VCFFileReader(INPUT.toPath(), false)) {\n+            final Iterator<Interval> samFileIterator = VCFFileReader.toIntervals(vcfReader, INCLUDE_FILTERED);\n+            try (IntervalListWriter writer = new IntervalListWriter(OUTPUT.toPath(), new SAMFileHeader(vcfReader.getFileHeader().getSequenceDictionary()))) {\n+                final IntervalList.IntervalMergerIterator mergingIterator =\n+                        new IntervalList.IntervalMergerIterator(samFileIterator, true, false, concatenate_ids);\n+                for (final Interval interval : new IterableAdapter<>(mergingIterator)){\n+                    writer.write(interval);\n+                }\n+            } catch (IOException e) {\n+                if(!OUTPUT.renameTo(new File(OUTPUT.getAbsolutePath() + \".incomplete\"))){\n+                    OUTPUT.delete();\n+                };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4OTY5MQ==", "bodyText": "still too many new lines", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r457389691", "createdAt": "2020-07-20T13:36:11Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/vcf/VcfToIntervalListTest.java", "diffHunk": "@@ -48,12 +49,33 @@ public void testExcludingFiltered(\n         if (includeFiltered) {\n             arguments.add(VcfToIntervalList.INCLUDE_FILTERED_SHORT_NAME + \"=true\");\n         }\n+        if (useFirstID) {\n+            arguments.add(\"VARIANT_ID_METHOD=USE_FIRST\");\n+        } else {\n+            arguments.add(\"VARIANT_ID_METHOD=CONCAT_ALL\"); // this should be the default and unnecessary\n+        }\n         runPicardCommandLine(arguments);\n \n         Assert.assertTrue(outputFile.exists());\n \n         final List<Interval> intervals = IntervalList.fromFile(outputFile).getIntervals();\n \n         Assert.assertEquals(intervals.size(), expectedIntervalsSize);\n+\n+        if (useFirstID) {\n+            for (Interval interval : intervals) {\n+                Assert.assertFalse(interval.getName().contains(\"|\"));\n+            }\n+        } else {\n+            // make sure the one where two sites that should be concatenated into one interval were actually concatenated\n+            Assert.assertTrue(intervals.get(5).getName().contains(\"|\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjI2Nw=="}, "originalCommit": {"oid": "4193e26c0e539bae219ea5af4bc2715bdd800da4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MzU0Mg==", "bodyText": "need to add this file, tests fail currently because doesn't exist in repo", "url": "https://github.com/broadinstitute/picard/pull/1456#discussion_r457393542", "createdAt": "2020-07-20T13:40:20Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToBedTest.java", "diffHunk": "@@ -13,6 +13,7 @@\n public class IntervalListToBedTest {\n     private static final String TEST_DATA_DIR = \"testdata/picard/util/\";\n     private final File INTERVAL_LIST = new File(TEST_DATA_DIR, \"interval_list_to_bed_test.interval_list\");\n+    private final File UNSORTED_INTERVAL_LIST = new File(TEST_DATA_DIR, \"unsorted_interval_list_to_bed_test.interval_list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd108292a7c3d4c06d068fb2d1285dc1ee94c37f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9434e07a839a8f6700eb1e2228fd77b26621ec", "author": {"user": {"login": "skwalker", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/9a9434e07a839a8f6700eb1e2228fd77b26621ec", "committedDate": "2020-07-20T22:53:43Z", "message": "responding to comments, adding test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f3ad919adfa60d7fd61a79ba76d77d04ccbee2", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/94f3ad919adfa60d7fd61a79ba76d77d04ccbee2", "committedDate": "2020-08-11T16:24:18Z", "message": "Merge branch 'master' into yf_scale_vcfToIntervalList"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2371, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}