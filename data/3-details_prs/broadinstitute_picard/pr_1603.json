{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjQxNjI1", "number": 1603, "title": "Add flowcell location stratifier for CollectSamErrorMetrics", "bodyText": "Description\nAdd two stratifiers, one for a read's x-coordinate (FLOWCELL_X) and one for a read's y-coordinate (FLOWCELL_Y). Takes in an argument LOCATION_BIN_SIZE (default 2500) that controls the size of each bin. In the output, a read's X/Y coordinate is its raw coordinate divided by LOCATION_BIN_SIZE, rounded down (floor division). A higher value for  LOCATION_BIN_SIZE decreases the number of bins, which is especially useful for saving memory when using FLOWCELL_X and FLOWCELL_Y together.\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-11-05T17:58:11Z", "url": "https://github.com/broadinstitute/picard/pull/1603", "merged": true, "mergeCommit": {"oid": "6a1fdba35d945458a7640043cbd089832a316dd9"}, "closed": true, "closedAt": "2020-11-17T16:36:30Z", "author": {"login": "mollysacks"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSNym_gH2gAyNTE2MjQxNjI1OmU0YTFmOTM3YjBiNjljN2FmYmJhNmM2MjE2MGVmODczODE4ODBlM2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddcEG2AFqTUzMjU0NzQ5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4a1f937b0b69c7afbba6c62160ef87381880e3a", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/e4a1f937b0b69c7afbba6c62160ef87381880e3a", "committedDate": "2020-10-13T19:31:55Z", "message": "add-location-stratifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "committedDate": "2020-11-05T17:40:28Z", "message": "first"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njc3OTg4", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-524677988", "createdAt": "2020-11-05T21:15:00Z", "commit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTowMFrOHuWu0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTowMFrOHuWu0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODk3OA==", "bodyText": "since there already is a tile stratifier, it woudl seem more consistent to just add x & y stratifier (or one stratifiyer for x and one for y?) and then use it in conjunction with the Tile stratifier\nIs there a reason this cannot work?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518368978", "createdAt": "2020-11-05T21:15:00Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                String tile = Integer.toString(location.getTile());\n+                String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n+                String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n+                return (tile + \"_\" + x + \"_\" + y);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MjYzNzY2", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-525263766", "createdAt": "2020-11-06T15:36:03Z", "commit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozNjowM1rOHuy46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozNjowM1rOHuy46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMxNQ==", "bodyText": "This method is actually inherited by OpticalDuplicateFinder from ReadNameParser, so for clarity better to use a ReadNameParser object since you're not doing anything related to optical duplicates here.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518830315", "createdAt": "2020-11-06T15:36:03Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "committedDate": "2020-11-12T14:35:10Z", "message": "edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9139b657a787bd628d1548e1abae38f9a4a9e041", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/9139b657a787bd628d1548e1abae38f9a4a9e041", "committedDate": "2020-11-12T15:03:14Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b05bcf4c7a4cd8e88b8e28333539d76624c7e0ed", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/b05bcf4c7a4cd8e88b8e28333539d76624c7e0ed", "committedDate": "2020-11-12T15:35:12Z", "message": "make-travis-pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc0f424c7723d73fbcdcfe52062db0855a30686", "author": {"user": {"login": "mollysacks", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/adc0f424c7723d73fbcdcfe52062db0855a30686", "committedDate": "2020-11-12T20:57:26Z", "message": "Merge branch 'master' into ms_location_stratifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5450766d205be9cd8b9163d448ddaa913d303392", "author": {"user": {"login": "mollysacks", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/5450766d205be9cd8b9163d448ddaa913d303392", "committedDate": "2020-11-13T14:15:07Z", "message": "Update CollectSamErrorMetrics.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "author": {"user": {"login": "mollysacks", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/cf680969e320838f9acbb8b7dd2f58dbcd456516", "committedDate": "2020-11-13T14:18:24Z", "message": "Update ReadBaseStratification.java\n\ndelete original location stratifier (replaced with x/y)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDE4NDcz", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-530418473", "createdAt": "2020-11-13T21:12:08Z", "commit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMjowOVrOHy_tiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMjo1MFrOHzAQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng==", "bodyText": "perhaps a comment to explain why this field is static?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234696", "createdAt": "2020-11-13T21:12:09Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n+        @Override\n+        public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n+            return stratify(recordAndOffset.getRecord());\n+        }\n+        static ReadNameParser readNameParser = new ReadNameParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDgwMQ==", "bodyText": "also, I think it can be made final, right?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234801", "createdAt": "2020-11-13T21:12:22Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n+        @Override\n+        public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n+            return stratify(recordAndOffset.getRecord());\n+        }\n+        static ReadNameParser readNameParser = new ReadNameParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzODAyMg==", "bodyText": "hmmm. I think that storing a map with all the names of the reads is not the best design....I suspect that each read will be reads, queried a few different ways (tile, x, y, etc) and then move on. so perhaps use a Cache instead of a full map? see picard/sam/SamErrorMetric/ReadBaseStratification.java:272 for an example.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523238022", "createdAt": "2020-11-13T21:19:51Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -27,6 +29,8 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n+    private Map<String, PhysicalLocation> locationMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTUyMw==", "bodyText": "final", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523239523", "createdAt": "2020-11-13T21:23:19Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MDIzNA==", "bodyText": "since you are going to have both if and elseit would be easier to read the code if you removed the ! and switched the cases", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523240234", "createdAt": "2020-11-13T21:24:47Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTYxOA==", "bodyText": "remove b?\nif(readLocationInformation(readName, loc)){\n   locationMap......\n   return true;\n}\nreturn false;\n} else {\n...\n}", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241618", "createdAt": "2020-11-13T21:28:01Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTgxNQ==", "bodyText": "remove spurious new lines", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241815", "createdAt": "2020-11-13T21:28:31Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);\n+            loc.setTile(location.getTile());\n+            loc.setX(location.getX());\n+            loc.setY(location.getY());\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw==", "bodyText": "why does this ned to be serializable?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523242073", "createdAt": "2020-11-13T21:29:10Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "diffHunk": "@@ -1,11 +1,13 @@\n package picard.sam.util;\n \n+import java.io.Serializable;\n+\n /**\n  * Small interface that provides access to the physical location information about a cluster.\n  * All values should be defaulted to -1 if unavailable.  ReadGroup and Tile should only allow\n  * non-zero positive integers, x and y coordinates may be negative.\n  */\n-public interface PhysicalLocation {\n+public interface PhysicalLocation extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ==", "bodyText": "You should be able to clamp down on the template T here and make it an Integer, right? if in the future somebody thinks of non-integer positions, we can open it up again....", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243061", "createdAt": "2020-11-13T21:31:19Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n          \n          \n            \n                abstract static class PositionBasedStratifier implements RecordAndOffsetStratifier<Integer> {", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243174", "createdAt": "2020-11-13T21:31:37Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzI3MA==", "bodyText": "and this will simplify the downstream", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243270", "createdAt": "2020-11-13T21:31:51Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzU2Mw==", "bodyText": "put into 3 lines:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }\n          \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { \n          \n          \n            \n                   LOCATION_BIN_SIZE = locationBinSize; \n          \n          \n            \n                }", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243563", "createdAt": "2020-11-13T21:32:33Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -73,6 +75,11 @@ public static void setLongHomopolymer(int longHomopolymer) {\n         LONG_HOMOPOLYMER = longHomopolymer;\n     }\n \n+    /**\n+     * defaults to 2500\n+     **/\n+    public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzY4OA==", "bodyText": "are these all used?", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243688", "createdAt": "2020-11-13T21:32:50Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -37,6 +37,7 @@\n import picard.sam.util.Pair;\n import picard.sam.util.PhysicalLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce58d19b3a84d33a7c43814f33183a803f00794", "author": {"user": {"login": "mollysacks", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/fce58d19b3a84d33a7c43814f33183a803f00794", "committedDate": "2020-11-16T13:51:18Z", "message": "Update src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\nCo-authored-by: Yossi Farjoun <farjoun@broadinstitute.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/b114f662905e887e100fbe9518f055c4f0c08962", "committedDate": "2020-11-16T15:02:27Z", "message": "edits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDUyNTM3", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531452537", "createdAt": "2020-11-16T15:51:03Z", "commit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1MTowM1rOH0FCmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1MTowM1rOH0FCmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng==", "bodyText": "without a maximumSize this doesn't actually evict any entries....", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524370586", "createdAt": "2020-11-16T15:51:03Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -29,7 +32,7 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDU5MDAw", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531459000", "createdAt": "2020-11-16T15:57:20Z", "commit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NzoyMFrOH0FXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NzoyMFrOH0FXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTkwNg==", "bodyText": "remove soem newlines here.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375906", "createdAt": "2020-11-16T15:57:20Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java", "diffHunk": "@@ -25,10 +25,17 @@\n public class ReadBaseStratificationTest {\n \n     @BeforeClass\n-    public void setup() {\n+    public void setupLH() {\n         ReadBaseStratification.setLongHomopolymer(6);\n     }\n \n+    @BeforeClass\n+    public void setupLBS() {\n+        ReadBaseStratification.setLocationBinSize(1000);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114f662905e887e100fbe9518f055c4f0c08962"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "committedDate": "2020-11-16T16:47:04Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/0546ad9f7108364bba9d3958ba692802cb3d8616", "committedDate": "2020-11-16T19:52:19Z", "message": "speed-up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzEzNzM3", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531713737", "createdAt": "2020-11-16T20:26:09Z", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjowOVrOH0QDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjowOVrOH0QDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDk2MA==", "bodyText": "strings should be compared with .equals()", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524550960", "createdAt": "2020-11-16T20:26:09Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzE1OTAx", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531715901", "createdAt": "2020-11-16T20:27:11Z", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxMVrOH0QFjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxMVrOH0QFjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTU2NA==", "bodyText": "no need for this temp variable, b, just put the read....() statement in the if(.)", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551564", "createdAt": "2020-11-16T20:27:11Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzE2MzY0", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531716364", "createdAt": "2020-11-16T20:27:24Z", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoyNFrOH0QGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoyNFrOH0QGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTY4OQ==", "bodyText": "can be initialized with null.", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551689", "createdAt": "2020-11-16T20:27:24Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -32,7 +32,9 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().maximumSize(20).build();\n+    private String readNameStored = new String();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzE4ODMy", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531718832", "createdAt": "2020-11-16T20:28:33Z", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODozM1rOH0QIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODozM1rOH0QIJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjIzMQ==", "bodyText": "since you don't control loc, and it isn't immutable, it would be better to copy over the contents into physicalLocationStored rather than keeping a reference...", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524552231", "createdAt": "2020-11-16T20:28:33Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                readNameStored = readName;\n+                physicalLocationStored = loc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNzIxMDI4", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-531721028", "createdAt": "2020-11-16T20:29:35Z", "commit": {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/57fcb88b242caa1986bad122ea9e5cd7e796a502", "committedDate": "2020-11-16T20:35:47Z", "message": "changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bc5ceb837f30c373fca30da1abe35c27ead3a5", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/c5bc5ceb837f30c373fca30da1abe35c27ead3a5", "committedDate": "2020-11-16T22:44:30Z", "message": "fix-npe"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTI4MjM2", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-532528236", "createdAt": "2020-11-17T16:04:18Z", "commit": {"oid": "c5bc5ceb837f30c373fca30da1abe35c27ead3a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7528771cc38952dd130bca1bb12e7b2c02a70d2", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/f7528771cc38952dd130bca1bb12e7b2c02a70d2", "committedDate": "2020-11-17T16:08:37Z", "message": "remove-template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTQ3NDkz", "url": "https://github.com/broadinstitute/picard/pull/1603#pullrequestreview-532547493", "createdAt": "2020-11-17T16:22:52Z", "commit": {"oid": "f7528771cc38952dd130bca1bb12e7b2c02a70d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2337, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}