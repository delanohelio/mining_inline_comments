{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTIxNTY0", "number": 1608, "title": "Add functionality to not combine abutting intervals", "bodyText": "Description\nThe behavior up until now in IntervalListTools for dealing with combining interval lists has been to combine abutting and overlapping interval lists. However, GATK internally often keeps abutting intervals separate, as detailed in this issue: #1499.\nHere I've added a functionality to create the interval list as requested, keeping abutting interval lists separate.\nChanges made:\n\nAdded an option for DONT_COMBINE_ABUTTING to IntervalListTools. Default is false to keep current behavior the same.\nWhen DONT_COMBINE_ABUTTING=true and UNIQUE=true and there is no action, this will create interval lists merging ONLY overlapping intervals.\nThrow an error when DONT_COMBINE_ABUTTING=true but ACTION=UNION, as this is unsupported.\nAdded tests and test data.\n\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-11-16T20:10:06Z", "url": "https://github.com/broadinstitute/picard/pull/1608", "merged": true, "mergeCommit": {"oid": "5780c88363d96a150fe4ddfab5a0ffcb66cd3c52"}, "closed": true, "closedAt": "2020-12-09T14:42:35Z", "author": {"login": "tmelman"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddKiT7AH2gAyNTIxOTIxNTY0OjNlMzZjM2VlZjIzNjFmMDFmZDQzOGI1NGFmZjJkZjU4MzQzZGRjYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkO97GgFqTU0NzU0MzA4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e36c3eef2361f01fd438b54aff2df58343ddcaf", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/3e36c3eef2361f01fd438b54aff2df58343ddcaf", "committedDate": "2020-11-16T19:57:34Z", "message": "Added functionality to recreate interval list with abutting intervals kept separate, plus tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "committedDate": "2020-11-16T20:02:12Z", "message": "Added some comments in the tests, newlines at end of data files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNjk5OTY4", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-531699968", "createdAt": "2020-11-16T20:19:31Z", "commit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOTozMVrOH0P0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxOTozMVrOH0P0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ==", "bodyText": "I'm not sure I understand why this is inherently incompatible with UNION. I get that currently the htsjdk uniqued method combines abbutting intervals, but I don't see why it has to be that way....it seems plausible, to work around it by using the lower-level getUniqueIntervals directly.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547249", "createdAt": "2020-11-16T20:19:31Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNjg4MDI0", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-531688024", "createdAt": "2020-11-16T20:13:55Z", "commit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoxMzo1NlrOH0Pomg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNTo1OFrOH0QCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NDE1NA==", "bodyText": "remove commented out old code", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524544154", "createdAt": "2020-11-16T20:13:56Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +405,18 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+//        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzA1Mw==", "bodyText": "don't need the timeOut since you're testing on very small files.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547053", "createdAt": "2020-11-16T20:19:15Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzMyNQ==", "bodyText": "unneeded brackets (maybe this used to be inside a try block?)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547325", "createdAt": "2020-11-16T20:19:39Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDg1NQ==", "bodyText": "Would like to see some tests of the other actions as well.  And I think you can combine this with testCombineAbuttingIntervals and use a DataProvider", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524550855", "createdAt": "2020-11-16T20:25:58Z", "author": {"login": "kachulis"}, "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {\n+            final List<String> args = new ArrayList<>();\n+            args.add(\"INPUT=\" + abutting);\n+            args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=UNION\"); // Note: ACTION=UNION is equivalent to UNIQUE=true and DONT_COMBINE_ABUTTING=false, or defaults\n+            Assert.assertEquals(runPicardCommandLine(args), 0);\n+        }\n+        final IntervalList gather = IntervalList.fromFile(ilOut);\n+        final IntervalList original = IntervalList.fromFile(abutting_combined);\n+\n+        Assert.assertEquals(gather, original); // equal to expected output\n+    }\n+    @Test(timeOut = 40_000)\n+    public void testDontCombineAbuttingIntervals() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ff478590bf608cf18a8b6ad576c26fc3e5bea9d", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/0ff478590bf608cf18a8b6ad576c26fc3e5bea9d", "committedDate": "2020-11-16T20:41:06Z", "message": "Edited the USAGE_DETAILS to include example for this functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "committedDate": "2020-11-16T20:41:50Z", "message": "Added comment in the tests about using ACTION=CONCAT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b153ccc11b59202fb3efa94c0f009c242d04779", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/9b153ccc11b59202fb3efa94c0f009c242d04779", "committedDate": "2020-11-18T21:39:34Z", "message": "Made DONT_MERGE_ABUTTING work with Union"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/f37b707cc9bc00179f4778eb3f46ad51b12707e5", "committedDate": "2020-11-20T20:31:57Z", "message": "Addressed code review changes to make DONT_MERGE_ABUTTING work with all actions (especially UNION)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODU4ODc4", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-537858878", "createdAt": "2020-11-24T19:58:27Z", "commit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1ODoyN1rOH5TA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1NDowMlrOH5UxAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MjQwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529842405", "createdAt": "2020-11-24T19:58:27Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -328,10 +337,13 @@ void output(final long totalBaseCount, final long intervalCount, final PrintStre\n \n         UNION(\"Like CONCATENATE but with UNIQUE and SORT implied, the result being the set-wise union of all INPUTS, \" +\n                 \"with overlapping and abutting intervals merged into one.\", false) {\n-            @Override\n-            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n-                return super.act(firstList.sorted().uniqued(), ignored);\n-            }\n+//            @Override\n+//            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n+////                return super.act(firstList.sorted().uniqued(), ignored);\n+//                return super.act(IntervalListTools.uniqued(firstList.sorted(), false), ignored);\n+//            }\n+// Before I delete this code block: I'm removing this in order to move this functionality down to the \"doWork()\" subroutine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg==", "bodyText": "why does this need to return an IntervalList? can't you let it return a list of intervals instead?  You immediately call getIntervals() on it the only place I see it used, so it seems like a lot of unneeded converting back and forth between lists of intervals and interval lists.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529871106", "createdAt": "2020-11-24T20:54:02Z", "author": {"login": "kachulis"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -501,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzM0ODc0", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-542334874", "createdAt": "2020-12-01T22:04:47Z", "commit": {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "author": {"user": {"login": "tmelman", "name": null}}, "url": "https://github.com/broadinstitute/picard/commit/7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "committedDate": "2020-12-03T20:50:48Z", "message": "Merge branch 'master' into tamar_adjacent_intervals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MjQzMzYz", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-545243363", "createdAt": "2020-12-04T19:35:50Z", "commit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozNTo1MFrOH_fO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo1Mzo1MFrOH_f0_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNDA2Mg==", "bodyText": "perhaps use the name of the interval to comment about the properties of each interval:\ne.g\n1\t30000\t30001\t+\ttarget_1_abutting_the_next\n1\t30002\t30003\t+\ttarget_2_abutting_the_previous_but_not_the_next\n1\t30005\t30007\t+\ttarget_3_overlapping_the_next_but_not_abutting_the_previous\n1\t30006\t30008\t+\ttarget_4_overlapping_the_previous", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536334062", "createdAt": "2020-12-04T19:35:50Z", "author": {"login": "yfarjoun"}, "path": "testdata/picard/util/abutting.interval_list", "diffHunk": "@@ -0,0 +1,6 @@\n+@HD\tVN:1.6\tSO:coordinate\n+@SQ\tSN:1\tLN:249250621\tAS:GRCh37\tUR:http://www.broadinstitute.org/ftp/pub/seq/references/Homo_sapiens_assembly19.fasta\tM5:1b22b98cdeb4a9304cb5d48026a85128\tSP:Homo Sapiens\n+1\t30000\t30001\t+\ttarget_1\n+1\t30002\t30003\t+\ttarget_2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNTI3MA==", "bodyText": "if you name the intervals in a meaningful way, you can also have the tests \"CONTATENATE=true\" and the resulting names here will show which intervals got merged.", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536335270", "createdAt": "2020-12-04T19:38:00Z", "author": {"login": "yfarjoun"}, "path": "testdata/picard/util/abutting_combined.interval_list", "diffHunk": "@@ -0,0 +1,4 @@\n+@HD\tVN:1.6\tSO:coordinate\n+@SQ\tSN:1\tLN:249250621\tAS:GRCh37\tUR:http://www.broadinstitute.org/ftp/pub/seq/references/Homo_sapiens_assembly19.fasta\tM5:1b22b98cdeb4a9304cb5d48026a85128\tSP:Homo Sapiens\n+1\t30000\t30003\t+\ttarget_1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNTk5OQ==", "bodyText": "I'd add a \"//TODO:'' item to move this to htsjdk and use that once we can. (possibly adding issues that can be referenced)", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536335999", "createdAt": "2020-12-04T19:39:23Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzA5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n          \n          \n            \n                    List<Interval> finalIntervals = UNIQUE ? uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337092", "createdAt": "2020-12-04T19:41:17Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n-        //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+        //only get unique if this has been asked OR if action is UNION, unless inverting (since the invert will return a unique list)\n+        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzY1OA==", "bodyText": "We tend to use camelCase for variables and methods\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n          \n          \n            \n                private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337658", "createdAt": "2020-12-04T19:42:15Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA==", "bodyText": "why are these in variables? you can just put true,false in the method call, no?", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536338240", "createdAt": "2020-12-04T19:43:21Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ==", "bodyText": "if UNIQUE sorts by default, shouldn't this be SORT=false?", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536343805", "createdAt": "2020-12-04T19:53:50Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/ce854d1b15fed7373c444fad41c2119f1c642a2a", "committedDate": "2020-12-04T22:16:58Z", "message": "Addressed code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a1e477655b3275ca6d5b81b05194547f1a0a98", "author": {"user": null}, "url": "https://github.com/broadinstitute/picard/commit/f9a1e477655b3275ca6d5b81b05194547f1a0a98", "committedDate": "2020-12-04T22:18:48Z", "message": "Addressed code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTQzMDg3", "url": "https://github.com/broadinstitute/picard/pull/1608#pullrequestreview-547543087", "createdAt": "2020-12-08T19:04:49Z", "commit": {"oid": "f9a1e477655b3275ca6d5b81b05194547f1a0a98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2343, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}