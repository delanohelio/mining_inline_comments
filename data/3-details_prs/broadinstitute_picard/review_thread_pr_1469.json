{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzU0MjAw", "number": 1469, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0ODozNVrODgxZtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MTo1NFrODuaC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkwNDIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/picard/util/LiftoverVcfTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0ODozNVrOFrKKGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0ODozNVrOFrKKGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5OTUxMw==", "bodyText": "bingo", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r380799513", "createdAt": "2020-02-18T16:48:35Z", "author": {"login": "nh13"}, "path": "src/test/java/picard/util/LiftoverVcfTest.java", "diffHunk": "@@ -1124,36 +1149,73 @@ public void testLeftAlignVariants(final VariantContext source, final ReferenceSe\n         stop = 1049;\n         offset = 0;\n         builder.start(start).stop(stop).alleles(CollectionUtil.makeList(AAAARef, AAA));\n-        result_builder.start(start + offset).stop(stop + offset).alleles(CollectionUtil.makeList(AAAARef, AAA));\n+        resultBuilder.start(start + offset).stop(stop + offset).alleles(CollectionUtil.makeList(AAAARef, AAA));\n         genotypeBuilder.alleles(builder.getAlleles());\n-        resultGenotypeBuilder.alleles(result_builder.getAlleles());\n+        resultGenotypeBuilder.alleles(resultBuilder.getAlleles());\n         builder.genotypes(genotypeBuilder.make());\n-        result_builder.genotypes(resultGenotypeBuilder.make());\n-        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), result_builder.make()});\n+        resultBuilder.genotypes(resultGenotypeBuilder.make());\n+        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), resultBuilder.make()});\n \n         // near start of second interval snp\n         builder.source(\"test13\");\n         start = 1046;\n         builder.start(start).stop(start).alleles(CollectionUtil.makeList(ARef, T));\n-        result_builder.start(start + offset).stop(start + offset).alleles(CollectionUtil.makeList(ARef, T));\n+        resultBuilder.start(start + offset).stop(start + offset).alleles(CollectionUtil.makeList(ARef, T));\n         genotypeBuilder.alleles(builder.getAlleles());\n-        resultGenotypeBuilder.alleles(result_builder.getAlleles());\n+        resultGenotypeBuilder.alleles(resultBuilder.getAlleles());\n         builder.genotypes(genotypeBuilder.make());\n-        result_builder.genotypes(resultGenotypeBuilder.make());\n-        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), result_builder.make()});\n+        resultBuilder.genotypes(resultGenotypeBuilder.make());\n+        tests.add(new Object[]{liftOver, twoIntervalChainReference, builder.make(), resultBuilder.make()});\n \n         return tests.iterator();\n     }\n \n-    @Test(dataProvider = \"indelNoFlipData\")\n-    public void testLiftOverSimpleIndels(final LiftOver liftOver, final ReferenceSequence reference, final VariantContext source, final VariantContext result) {\n+    @DataProvider\n+    public Iterator<Object[]> cleanIndelNoFlipData(){\n+        Iterator<Object[]> sourceIterator = indelNoFlipData();\n \n-        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), .95);\n+        return new Iterator<Object[]>() {\n+            @Override\n+            public boolean hasNext() {\n+                return sourceIterator.hasNext();\n+            }\n+\n+            @Override\n+            public Object[] next() {\n+                final Object[] next = sourceIterator.next();\n+                final LiftOver liftOver = (LiftOver) next[0];\n+                final VariantContext source = (VariantContext) next[2];\n+                final VariantContext result = (VariantContext) next[3];\n+                return new Object[]{\n+                        liftOver,\n+                        Optional.ofNullable(source).map(v -> new VariantContextBuilder(v).rmAttribute(VCFConstants.END_KEY).make()).orElse(null),\n+                        Optional.ofNullable(result).map(v -> new VariantContextBuilder(v).rmAttribute(VCFConstants.END_KEY).make()).orElse(null)\n+                };\n+            }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"cleanIndelNoFlipData\")\n+    public void testLiftOverSimpleIndels(final LiftOver liftOver, final VariantContext source, final VariantContext result) {\n+\n+        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), 1);\n+\n+        final VariantContextBuilder vcb = LiftoverUtils.liftSimpleVariantContext(source, target);\n+        // liftSimpleVariantContext doesn't take care of end attributes...\n \n-        VariantContextBuilder vcb = LiftoverUtils.liftSimpleVariantContext(source, target);\n         VcfTestUtils.assertEquals(vcb == null ? null : vcb.make(), result);\n     }\n \n+    @Test(dataProvider = \"indelNoFlipData\")\n+    public void testLiftOverIndels(final LiftOver liftOver, final ReferenceSequence reference, final VariantContext source, final VariantContext result) {\n+\n+        final Interval target = liftOver.liftOver(new Interval(source.getContig(), source.getStart(), source.getEnd()), 1);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c680235e6fc20682185be5b2e41d8edc3b07b5"}, "originalPosition": 378}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTg4OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/LiftoverUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxNjoxNlrOFsd-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxNjoxNlrOFsd-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3MjgwMA==", "bodyText": "Not sure if the sun/oracle java code guidelines cover streaming operations yet, but I think it's more readable if each stream segment starts a new line:\n        return vc.getAlleles().stream()\n                .filter(a -> !a.isSymbolic())\n                .filter(a -> !a.equals(Allele.SPAN_DEL))\n                .anyMatch(a -> a.length() != 1);", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r382172800", "createdAt": "2020-02-20T18:16:16Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -182,33 +190,30 @@ protected static VariantContextBuilder reverseComplementVariantContext(final Var\n         return vcb;\n     }\n \n-    private static List<Allele> reverseComplementAlleles(final List<Allele> originalAlleles, final Interval target, final ReferenceSequence refSeq, final boolean isIndel, final boolean addToStart) {\n+    private static boolean isIndelForLiftover(final VariantContext vc){\n+        final Allele ref = vc.getReference();\n+        if (ref.length() != 1) {\n+            return true;\n+        }\n+\n+       return vc.getAlleles().stream().filter(a -> !a.isSymbolic()).filter(a -> !a.equals(Allele.SPAN_DEL)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d676561eaefa65fa35902db93436982693347d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTg3MTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/LiftoverUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MDoyN1rOGAYclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MDoyN1rOGAYclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1MzcxOA==", "bodyText": "whitespace\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(a->!a.equals(Allele.SPAN_DEL)&&!a.isSymbolic())\n          \n          \n            \n                            .filter(a -> !a.equals(Allele.SPAN_DEL) && !a.isSymbolic())\n          \n      \n    \n    \n  \n\nalso, above you write filter(a -> !a.isSymbolic()).filter(a -> !a.equals(Allele.SPAN_DEL). The version with one call to filter() is probably clearer, either way I would use the same form in both places to be consistent.", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r403053718", "createdAt": "2020-04-03T14:40:27Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -365,7 +359,9 @@ protected static void leftAlignVariant(final VariantContextBuilder builder, fina\n \n         // Put each allele into the alleleBasesMap unless it is a spanning deletion.\n         // Spanning deletions are dealt with as a special case later in fixedAlleleMap.\n-        alleles.stream().filter(a->!a.equals(Allele.SPAN_DEL)).forEach(a -> alleleBasesMap.put(a, a.getBases()));\n+        alleles.stream()\n+                .filter(a->!a.equals(Allele.SPAN_DEL)&&!a.isSymbolic())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd95c01cda9f8f61f638a6007281b1730858d92c"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTg3ODI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/picard/util/LiftoverUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MTo1NFrOGAYguw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo0MTo1NFrOGAYguw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NDc3OQ==", "bodyText": "whitespace\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isIndelForLiftover(final VariantContext vc){\n          \n          \n            \n                private static boolean isIndelForLiftover(final VariantContext vc) {", "url": "https://github.com/broadinstitute/picard/pull/1469#discussion_r403054779", "createdAt": "2020-04-03T14:41:54Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/LiftoverUtils.java", "diffHunk": "@@ -183,33 +184,26 @@ protected static VariantContextBuilder reverseComplementVariantContext(final Var\n         return vcb;\n     }\n \n-    private static List<Allele> reverseComplementAlleles(final List<Allele> originalAlleles, final Interval target, final ReferenceSequence refSeq, final boolean isIndel, final boolean addToStart) {\n-        final List<Allele> alleles = new ArrayList<>();\n-\n-        for (final Allele oldAllele : originalAlleles) {\n-            alleles.add(LiftoverUtils.reverseComplement(oldAllele, target, refSeq, isIndel, addToStart));\n+    private static boolean isIndelForLiftover(final VariantContext vc){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd95c01cda9f8f61f638a6007281b1730858d92c"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 714, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}