{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTUxMTQ0", "number": 1455, "title": "Fix non-symmetry bug in FingerprintChecker", "bodyText": "Fixes a bug in the fingerprinting code that resulted in non-symmetric results\nResults: LOD(a,b) != LOD(b,a)\nThe problem was that the normlized posterior was used as the prior in the denominator of the LOD calculation.\nThe correct thing to do is to use the unnormalized posterior array which is what this commit does.\nOther changes include:\n\nmore tests\ncleanup\n\nFixes #1437\nDescription\nGive your PR a concise yet descriptive title\nPlease explain the changes you made here.\nExplain the motivation for making this change. What existing problem does the pull request solve?\nMention any issues fixed, addressed or otherwise related to this pull request, including issue numbers or hard links for issues in other repos.\nYou can delete these instructions once you have written your PR description.\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-01-22T16:36:00Z", "url": "https://github.com/broadinstitute/picard/pull/1455", "merged": true, "mergeCommit": {"oid": "a7f9963ebbbaea0e09b25735c6742a8daa24c0c7"}, "closed": true, "closedAt": "2020-02-21T05:48:25Z", "author": {"login": "yfarjoun"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb87OxRgFqTM0Njg1ODI1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGTuJrAH2gAyMzY1OTUxMTQ0OmU3YTk3OWIzNTg0YmZhYmNhOTYzOWMyOTIyNzNhOWU3MGUzODhiNDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODU4MjU2", "url": "https://github.com/broadinstitute/picard/pull/1455#pullrequestreview-346858256", "createdAt": "2020-01-22T19:50:54Z", "commit": {"oid": "643e9015af71fdec20063ec1a13f8875561d8771"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1MDo1NFrOFgo6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1MDo1NFrOFgo6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTA0NA==", "bodyText": "For the reviewer, this is the bug fix....most of everything else is window dressing.", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r369769044", "createdAt": "2020-01-22T19:50:54Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/picard/fingerprint/HaplotypeProbabilities.java", "diffHunk": "@@ -213,16 +220,16 @@ public double shiftedLogEvidenceProbabilityGivenOtherEvidence(final HaplotypePro\n         if (!this.haplotypeBlock.equals(otherHp.getHaplotype())) {\n             throw new IllegalArgumentException(\"Haplotypes are from different HaplotypeBlocks!\");\n         }\n-        /** Get the posterior from the other otherHp. Use this posterior as the prior to calculate probability.\n-         *\n-         *   P(hap|x,y) = P(x|hap,y) P(hap|y) / P(x|y)\n-         *              = P(x | hap) * P(hap | y) / P(x)\n-         *                likelihood * other.posterior\n-         *\n-         *              = P(x|hap) P(y|hap) P(hap)/P(x)P(y)\n-         *              = A P(x| hap) P(y| hap) P(hap)  # where A is an unknown scaling factor\n+        /* Get the posterior from the other otherHp. Use this posterior as the prior to calculate probability.\n+\n+            P(hap|x,y) = P(x|hap,y) P(hap|y) / P(x|y)\n+                       = P(x | hap) * P(hap | y) / P(x)\n+                         likelihood * other.posterior\n+\n+                       = P(x|hap) P(y|hap) P(hap)/P(x)P(y)\n+                       = A P(x| hap) P(y| hap) P(hap)  # where A is an unknown scaling factor\n          */\n-        return shiftedLogEvidenceProbabilityUsingGenotypeFrequencies(otherHp.getPosteriorProbabilities());\n+        return shiftedLogEvidenceProbabilityUsingGenotypeFrequencies(otherHp.getPosteriorLikelihoods());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643e9015af71fdec20063ec1a13f8875561d8771"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f53d5b850044f2957ead4f15d245be2766e69f70", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/f53d5b850044f2957ead4f15d245be2766e69f70", "committedDate": "2020-01-23T14:31:50Z", "message": "-move \"randomSublist\" to a more appropriate place"}, "afterCommit": {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/e2b0d9a90d42deedbad2a89349ffd05dda04d595", "committedDate": "2020-02-10T19:54:14Z", "message": "Found a bug in the fingerprinting code that resulted in non-symmetric results: LOD(a,b) != LOD(b,a)\n\nThe problem was that the __normlized__ posterior was used as the prior in the denominator of the LOD calculation.\nThe correct thing to do is to use the __unnormalized__ posterior array which is what this commit does.\n\nOther changes include:\n\n- more tests\n- cleaup\n\n- Found a disabled test laying around...enabled it and more cleanup.\n\n-move \"randomSublist\" to a more appropriate place"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTAyMzM0", "url": "https://github.com/broadinstitute/picard/pull/1455#pullrequestreview-360502334", "createdAt": "2020-02-18T16:49:19Z", "commit": {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0OToxOVrOFrKL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mzo1OVrOFrKXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5OTk4MQ==", "bodyText": "New public APIs should have tests.", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380799981", "createdAt": "2020-02-18T16:49:19Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -285,6 +324,38 @@ public static int indexOfMin(final double[] nums) {\n         return pNormalizeLogProbability(likelihoods);\n     }\n \n+    /**\n+     * Takes a complete set of mutually exclusive logLikelihoods and converts them to probabilities\n+     * with no rescaling. Will throw if underflow is detected (if all the likelihoods are less than -300)\n+     */\n+    public static double[] getProbabilityFromLog(final double[] lLikelihood) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjIyNg==", "bodyText": "Would be nice to reformat this too", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380802226", "createdAt": "2020-02-18T16:52:59Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -441,7 +556,34 @@ public static double klDivergance(double[] measured, double[] distribution) {\n         return retVal;\n     }\n \n-    /** \n+    /**\n+     * A small utility function to choose n random elements (un-shuffled) from a list\n+     *\n+     * @param list A list of elements\n+     * @param n    a number of elements requested from list\n+     * @return a list of n randomly chosen (but in the original order) elements from list.\n+     * If the list has less than n elements it is returned in its entirety.\n+     */\n+    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+        int availableElements = list.size();\n+        if (availableElements <= n) return list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjkyNA==", "bodyText": "Any reason to not use Math.random() here?", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380802924", "createdAt": "2020-02-18T16:53:59Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -441,7 +556,34 @@ public static double klDivergance(double[] measured, double[] distribution) {\n         return retVal;\n     }\n \n-    /** \n+    /**\n+     * A small utility function to choose n random elements (un-shuffled) from a list\n+     *\n+     * @param list A list of elements\n+     * @param n    a number of elements requested from list\n+     * @return a list of n randomly chosen (but in the original order) elements from list.\n+     * If the list has less than n elements it is returned in its entirety.\n+     */\n+    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+        int availableElements = list.size();\n+        if (availableElements <= n) return list;\n+\n+        int stillNeeded = n;\n+        final Random rg = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595"}, "originalPosition": 457}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxOTYzOTQx", "url": "https://github.com/broadinstitute/picard/pull/1455#pullrequestreview-361963941", "createdAt": "2020-02-20T14:51:34Z", "commit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1MTozNVrOFsWWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1NzowNFrOFsWk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0Nzg1Ng==", "bodyText": "Unless there's a need to use it elsewhere, I would make this private.", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382047856", "createdAt": "2020-02-20T14:51:35Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -88,6 +89,8 @@\n     public static final int DEFAULT_MINIMUM_MAPPING_QUALITY = 10;\n     public static final int DEFAULT_MINIMUM_BASE_QUALITY = 20;\n     public static final int DEFAULT_MAXIMAL_PL_DIFFERENCE = 30;\n+    // used sometimes to subset loci. Fix the random seed so that the results are deterministic\n+    public static final Random random = new Random(42);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0ODE2MA==", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads,random);\n          \n          \n            \n                            final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads, random);", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382048160", "createdAt": "2020-02-20T14:51:55Z", "author": {"login": "pshapiro4broad"}, "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -633,7 +634,7 @@ private FingerprintIdDetails createUnknownFP(final Path samFile, final SAMRecord\n                 final Snp snp = this.haplotypes.getSnp(info.getSequenceName(), info.getPosition());\n \n                 // randomly select locusMaxReads elements from the list\n-                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = randomSublist(info.getRecordAndPositions(), locusMaxReads);\n+                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads,random);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDEwMA==", "bodyText": "Could write this as\n        final List<Integer> list = Arrays.asList(1, 2, 3);", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050100", "createdAt": "2020-02-20T14:54:52Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/util/MathUtilTest.java", "diffHunk": "@@ -84,6 +88,19 @@ private void assertEquals(final double[] actual, final double[] expected) {\n         }\n     }\n \n+    @Test\n+    public void testRandomSublist() {\n+        final Random random = new Random();\n+        final List<Integer> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDYzNw==", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File metricsFile = File.createTempFile(\"crosscheck\",\".crosscheck_metrics\");\n          \n          \n            \n                    final File metricsFile = File.createTempFile(\"crosscheck\", \".crosscheck_metrics\");", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050637", "createdAt": "2020-02-20T14:55:44Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -143,27 +160,30 @@ public void testTerminateOnBadFile() {\n         final File na12891_r1 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.r1.sam\");\n         final File na12891_r2 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.r2.sam\");\n         final File na12892_r1 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r1.sam\");\n-        final File na12892_r2 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r1.sam\");\n+        final File na12892_r2 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r2.sam\");\n \n         final File na12891_noRg = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.noRgTag.sam\");\n \n         return new Object[][]{\n                 {na12891_r1, na12891_r2, true, true},\n                 {na12892_r1, na12892_r2, true, true},\n                 {na12892_r1, na12891_r2, false, true},\n-                {na12892_r1, na12891_noRg, false, true},\n                 {na12891_r1, na12891_noRg, true, true},\n+                {na12892_r1, na12891_noRg, false, true},\n \n-                {na12891_r1, na12891_r2, true, false},\n-                {na12892_r1, na12892_r2, true, false},\n-                {na12892_r1, na12891_r2, false, false},\n-                {na12892_r1, na12891_noRg, false, false},\n-                {na12891_r1, na12891_noRg, true, false}\n+                {na12891_r2, na12891_r2, true, false},\n+                {na12892_r2, na12892_r2, true, false},\n+                {na12892_r2, na12891_r2, false, false},\n+                {na12891_r2, na12891_noRg, true, false},\n+                {na12892_r2, na12891_noRg, false, false},\n         };\n     }\n \n     @Test(dataProvider = \"checkFingerprintsSamDataProvider\")\n-    public void testCheckFingerprintsSam(final File samFile1, final File samFile2, final boolean expectedMatch, final boolean silent) {\n+    public void testCheckFingerprintsSam(final File samFile1, final File samFile2, final boolean expectedMatch, final boolean silent) throws IOException {\n+\n+        final File metricsFile = File.createTempFile(\"crosscheck\",\".crosscheck_metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDgyMQ==", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"OUTPUT=\"+metricsFile.getAbsolutePath()\n          \n          \n            \n                            \"OUTPUT=\" + metricsFile.getAbsolutePath()", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050821", "createdAt": "2020-02-20T14:55:59Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -173,9 +193,29 @@ public void testCheckFingerprintsSam(final File samFile1, final File samFile2, f\n                 \"I=\" + samFile2.getAbsolutePath(),\n                 \"VALIDATION_STRINGENCY=\" + (silent ? \"SILENT\" : \"LENIENT\"),\n                 \"CROSSCHECK_BY=FILE\",\n+                \"OUTPUT=\"+metricsFile.getAbsolutePath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MTM2Nw==", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Fingerprint fp1:fp1Map.values()){\n          \n          \n            \n                    for (Fingerprint fp1 : fp1Map.values()) {", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382051367", "createdAt": "2020-02-20T14:56:46Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -124,13 +124,30 @@ public void testCheckFingerprintsVcf(final File vcfFile, final File genotypesFil\n \n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintVcf(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) throws IOException {\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1 = fpChecker.fingerprintVcf(vcfFile.toPath());\n \n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n+\n+    @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n+    public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+        final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n+        final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n+\n+        for(Fingerprint fp1:fp1Map.values()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MTU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);\n          \n          \n            \n                            compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(), 1e-10);", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382051582", "createdAt": "2020-02-20T14:57:04Z", "author": {"login": "pshapiro4broad"}, "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -124,13 +124,30 @@ public void testCheckFingerprintsVcf(final File vcfFile, final File genotypesFil\n \n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintVcf(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) throws IOException {\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1 = fpChecker.fingerprintVcf(vcfFile.toPath());\n \n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n+\n+    @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n+    public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+        final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n+        final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n+\n+        for(Fingerprint fp1:fp1Map.values()){\n+            for(Fingerprint fp2:fp2Map.values()) {\n+                final MatchResults matchResults12 = FingerprintChecker.calculateMatchResults(fp1, fp2);\n+                final MatchResults matchResults21 = FingerprintChecker.calculateMatchResults(fp2, fp1);\n+                compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001f859ddf3c9127f32e559c1af366472139f0ca", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/001f859ddf3c9127f32e559c1af366472139f0ca", "committedDate": "2020-02-20T20:38:20Z", "message": "Found a bug in the fingerprinting code that resulted in non-symmetric results: LOD(a,b) != LOD(b,a)\n\nThe problem was that the __normlized__ posterior was used as the prior in the denominator of the LOD calculation.\nThe correct thing to do is to use the __unnormalized__ posterior array which is what this commit does.\n\nOther changes include:\n\n- more tests\n- cleaup\n\n- Found a disabled test laying around...enabled it and more cleanup.\n\n-move \"randomSublist\" to a more appropriate place"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72f535d102403de5ca25849367cfc3417b2ff7f", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/b72f535d102403de5ca25849367cfc3417b2ff7f", "committedDate": "2020-02-20T20:38:20Z", "message": "- responding to review comments (found a bug!)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deab7fa11840cd5f8ff2c629ddea96d27c92254a", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/deab7fa11840cd5f8ff2c629ddea96d27c92254a", "committedDate": "2020-02-20T20:38:20Z", "message": "- responding to more review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82dfdf1bfc71fe3afe43e660411319589d9de3f5", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/82dfdf1bfc71fe3afe43e660411319589d9de3f5", "committedDate": "2020-02-20T20:51:52Z", "message": "- responding to review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/3826ca5eef0fd1a72ba63b233ac44dc24559168d", "committedDate": "2020-02-18T19:36:08Z", "message": "- responding to more review comments."}, "afterCommit": {"oid": "82dfdf1bfc71fe3afe43e660411319589d9de3f5", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/82dfdf1bfc71fe3afe43e660411319589d9de3f5", "committedDate": "2020-02-20T20:51:52Z", "message": "- responding to review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a979b3584bfabca9639c292273a9e70e388b43", "author": {"user": {"login": "yfarjoun", "name": "Yossi Farjoun"}}, "url": "https://github.com/broadinstitute/picard/commit/e7a979b3584bfabca9639c292273a9e70e388b43", "committedDate": "2020-02-20T23:28:14Z", "message": "Merge branch 'master' into yf_fix_fingerprinting_non-symmetry_bug"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2366, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}