{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTE2MzMy", "number": 1517, "title": "GL-670 Generate BPM.CSV from BPM file", "bodyText": "Added functionality to parse Illumina BPM (Bead Pool Manifest) files\nAdded new CLP to generate Illumina 'normalization manifest' CSV file'\nModified GtcToVcf and CompareGtcFiles to use IlluminaBPMFile parser (rather than using the old csv)\nDescription\nGive your PR a concise yet descriptive title\nPlease explain the changes you made here.\nExplain the motivation for making this change. What existing problem does the pull request solve?\nMention any issues fixed, addressed or otherwise related to this pull request, including issue numbers or hard links for issues in other repos.\nYou can delete these instructions once you have written your PR description.\n\nChecklist (never delete this)\nNever delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.\nContent\n\n Added or modified tests to cover changes and any new functionality\n Edited the README / documentation (if applicable)\n All tests passing on Travis\n\nReview\n\n Final thumbs-up from reviewer\n Rebase, squash and reword as applicable\n\nFor more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests", "createdAt": "2020-05-27T15:03:40Z", "url": "https://github.com/broadinstitute/picard/pull/1517", "merged": true, "mergeCommit": {"oid": "62791836fad77d0e552575ae8b15d49324464b87"}, "closed": true, "closedAt": "2020-06-02T23:01:03Z", "author": {"login": "gbggrant"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcleQtagFqTQxOTUzNTYzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnb8TdABqjMzOTk1OTM3MzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTM1NjM2", "url": "https://github.com/broadinstitute/picard/pull/1517#pullrequestreview-419535636", "createdAt": "2020-05-27T19:16:40Z", "commit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNjo0MVrOGbZouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNjo0MVrOGbZouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NDc2MA==", "bodyText": "final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InfiniumEGTFile infiniumEGTFile;\n          \n          \n            \n                    final InfiniumEGTFile infiniumEGTFile;", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431384760", "createdAt": "2020-05-27T19:16:41Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTM1OTgx", "url": "https://github.com/broadinstitute/picard/pull/1517#pullrequestreview-419535981", "createdAt": "2020-05-27T19:17:15Z", "commit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNzoxNVrOGbZqiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo1Njo1NVrOGba_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IlluminaBPMFile bpmFile;\n          \n          \n            \n                    final IlluminaBPMFile bpmFile;", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431385227", "createdAt": "2020-05-27T19:17:15Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;\n+        try {\n+            infiniumEGTFile = new InfiniumEGTFile(CLUSTER_FILE);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading cluster file '\" + CLUSTER_FILE.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        IlluminaBPMFile bpmFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NjE4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DecimalFormat df = new DecimalFormat((\"0.0000\"));\n          \n          \n            \n                    final DecimalFormat df = new DecimalFormat((\"0.0000\"));", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431386186", "createdAt": "2020-05-27T19:18:05Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;\n+        try {\n+            infiniumEGTFile = new InfiniumEGTFile(CLUSTER_FILE);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading cluster file '\" + CLUSTER_FILE.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        IlluminaBPMFile bpmFile;\n+        try (final DataInputStream inputStream = new DataInputStream(new FileInputStream(INPUT))) {\n+            bpmFile = new IlluminaBPMFile(inputStream);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading bpm file '\" + INPUT.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        DecimalFormat df = new DecimalFormat((\"0.0000\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDM5Ng==", "bodyText": "Is this necessary?", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431390396", "createdAt": "2020-05-27T19:25:01Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTE5Mw==", "bodyText": "true", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431391193", "createdAt": "2020-05-27T19:26:34Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzI3Ng==", "bodyText": "Could probably use a hashset here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n          \n          \n            \n                    final Set<Integer> uniqueNormalizationIdsSet = new HashSet<>();", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431393276", "createdAt": "2020-05-27T19:30:19Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDE5Ng==", "bodyText": "may not need to initialize as null", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431394196", "createdAt": "2020-05-27T19:31:59Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n+\n+        // Initialize the locus entries\n+        locusEntries = new IlluminaBPMLocusEntry[numLoci];\n+        for (int i = 0; i < numLoci; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTA5Nw==", "bodyText": "Consider refactoring into a separate method", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431395097", "createdAt": "2020-05-27T19:33:41Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n+\n+        // Initialize the locus entries\n+        locusEntries = new IlluminaBPMLocusEntry[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            locusEntries[i] = null;\n+        }\n+\n+        // Read the locus entries.\n+        for (int i = 0; i < numLoci; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODI4Nw==", "bodyText": "Consider passing the InfiniumDataFile into the constructor and parsing there", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431398287", "createdAt": "2020-05-27T19:39:51Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODgzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n          \n          \n            \n               // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n          \n          \n            \n                int assayType;", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431398834", "createdAt": "2020-05-27T19:40:59Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {\n+    String ilmnId;              // IlmnID (probe identifier) of locus\n+    String name;                // Name (variant identifier) of locus\n+    int index;                  // Index of this entry.\n+    String ilmnStrand;          // Illumina Strand value\n+    String snp;                 // SNP value for locus (e.g., [A/C])\n+    String chrom;               // Chromosome for the locus (e.g., XY)\n+    String ploidy;              // Ploidy\n+    String species;\n+    int mapInfo;                // Mapping location of locus\n+    String customerStrand;      // Customer Strand\n+    int addressA;               // AddressA ID of locus\n+    String alleleAProbeSeq;     // CSV files or BPM files with version 4 data block\n+    int addressB;               // AddressB ID of locus (0 if none)\n+    String alleleBProbeSeq;     // CSV files or BPM files with version 4 data block (empty if none)\n+\n+    String genomeBuild;\n+    String source;\n+    String sourceVersion;\n+    String sourceStrand;\n+    String sourceSeq;           // CSV files or BPM files with version 4 data block\n+    String topGenomicSeq;       // CSV files or BPM files with version 4 data block\n+\n+    int expClusters;\n+    int intensityOnly;\n+    int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMTk3MQ==", "bodyText": "parseBoolean() ?", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431401971", "createdAt": "2020-05-27T19:47:04Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumEGTFile.java", "diffHunk": "@@ -151,16 +157,11 @@ private void parseFloats(float[] array) throws IOException {\n \n     private void readHeaderData() throws IOException {\n         setFileVersion(parseInt());\n-        // skip gcVersion\n-        skipString();\n-        // skip clusterVersion\n-        skipString();\n-        // skip callVersion\n-        skipString();\n-        // skip normalizationVersion\n-        skipString();\n-        // skip dataCreated\n-        skipString();\n+        gencallVersion = parseString();\n+        clusterVersion = parseString();\n+        callVersion = parseString();\n+        normalizationVersion = parseString();\n+        dateCreated = parseString();\n         // skip isWGT\n         skipBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMjYxNw==", "bodyText": "null is default", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431402617", "createdAt": "2020-05-27T19:48:13Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -82,7 +84,10 @@\n     public static final byte AB_CALL = 2;\n     public static final byte BB_CALL = 3;\n \n-    private final InfiniumNormalizationManifest normalizationManifest;\n+    // Normalization Ids as pulled from the BPM file\n+    private int[] allNormalizationIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        illuminaBPMFile = new IlluminaBPMFile(inputStream);\n          \n          \n            \n                        illuminaBPMFile = new IlluminaBPMFile(bpmFile);\n          \n      \n    \n    \n  \n\nAnd make IlluminaBPMFile autocloseable", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431405117", "createdAt": "2020-05-27T19:53:15Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -163,12 +169,17 @@ public void close() throws IOException {\n         stream.close();\n     }\n \n-    InfiniumGTCFile(final DataInputStream gtcStream) throws IOException {\n-        super(gtcStream, true);\n-        this.normalizationManifest = null;\n-        parse();\n-    }\n+    private void loadNormalizationIds(final File bpmFile) {\n+        IlluminaBPMFile illuminaBPMFile;\n+        try (final DataInputStream inputStream = new DataInputStream(new FileInputStream(bpmFile))) {\n+            illuminaBPMFile = new IlluminaBPMFile(inputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjExNQ==", "bodyText": "always true", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406115", "createdAt": "2020-05-27T19:55:13Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -221,7 +232,7 @@ private void parse() throws IOException {\n             stream.close();\n         }\n \n-        if ((normalizationManifest != null) && (normalizationManifest.getNormIds() != null)) {\n+        if (allNormalizationIds != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjUzMw==", "bodyText": "simplify\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if ((allNormalizationIds != null) && (allNormalizationIds.length > i)) {\n          \n          \n            \n                        if (allNormalizationIds.length > i) {", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406533", "createdAt": "2020-05-27T19:56:01Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -230,15 +241,14 @@ private void normalizeIntensities() {\n         normalizedXIntensities = new float[numberOfSnps];\n         normalizedYIntensities = new float[numberOfSnps];\n \n-        final int[] normIds = normalizationManifest.getNormIds();\n         for (int i = 0; i < rawXIntensities.length; i++) {\n             final int rawX = rawXIntensities[i];\n             final int rawY = rawYIntensities[i];\n \n             final int normId;\n             int normIndex = -1;\n-            if ((normIds != null) && (normIds.length > i)) {\n-                normId = normIds[i];\n+            if ((allNormalizationIds != null) && (allNormalizationIds.length > i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjk1Nw==", "bodyText": "always true", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406957", "createdAt": "2020-05-27T19:56:55Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -495,7 +505,7 @@ private void parseTransformations(final InfiniumFileTOC toc) throws IOException\n     }\n \n     private void normalizeAndCalculateStatistics() {\n-        if (normalizationManifest.getNormIds() != null) {\n+        if (allNormalizationIds != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDM1MDM4", "url": "https://github.com/broadinstitute/picard/pull/1517#pullrequestreview-423035038", "createdAt": "2020-06-02T20:31:25Z", "commit": {"oid": "c1ebffd5845faa4b06c146ae99aa90a4699bf63b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozMToyNVrOGeC5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozMToyNVrOGeC5mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzk3OQ==", "bodyText": "generally prefer comments on separate lines", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r434157979", "createdAt": "2020-06-02T20:31:25Z", "author": {"login": "jessicaway"}, "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {\n+    String ilmnId;              // IlmnID (probe identifier) of locus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ebffd5845faa4b06c146ae99aa90a4699bf63b"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "author": {"user": {"login": "gbggrant", "name": "George Grant"}}, "url": "https://github.com/broadinstitute/picard/commit/16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "committedDate": "2020-06-02T21:41:44Z", "message": "GtcFile now uses bpm rather than bpm.csv\nHave CompareGtcFiles use IlluminaBPMFile\nPass the actual bpm file to the IlluminaBPMFile constructor - no longer pass in DataInputStream."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1ec49262afbebbecc6d10e56408757e714f75da", "author": {"user": {"login": "gbggrant", "name": "George Grant"}}, "url": "https://github.com/broadinstitute/picard/commit/f1ec49262afbebbecc6d10e56408757e714f75da", "committedDate": "2020-06-02T21:40:56Z", "message": "Updated comments"}, "afterCommit": {"oid": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "author": {"user": {"login": "gbggrant", "name": "George Grant"}}, "url": "https://github.com/broadinstitute/picard/commit/16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "committedDate": "2020-06-02T21:41:44Z", "message": "GtcFile now uses bpm rather than bpm.csv\nHave CompareGtcFiles use IlluminaBPMFile\nPass the actual bpm file to the IlluminaBPMFile constructor - no longer pass in DataInputStream."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3219, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}