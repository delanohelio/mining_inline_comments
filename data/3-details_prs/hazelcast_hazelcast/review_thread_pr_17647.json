{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDM2ODQ3", "number": 17647, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyMTo1NVrOEo_BWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyNDowOFrOEo_EPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDExMDM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyMTo1NVrOHaY4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyMTo1NVrOHaY4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzMjYyNw==", "bodyText": "It is wrong to resolve the state at this point and then use its value in a further condition. Instead, we should first check if AbstractInvocationFuture#isDone, similarly to all other CompletionStage API implementations.", "url": "https://github.com/hazelcast/hazelcast/pull/17647#discussion_r497432627", "createdAt": "2020-09-30T11:21:55Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java", "diffHunk": "@@ -864,33 +879,19 @@ protected void unblockWhenComplete(@Nonnull final BiConsumer<? super V, ? super\n         }\n     }\n \n-    @Override\n-    public InternalCompletableFuture<V> exceptionally(@Nonnull Function<Throwable, ? extends V> fn) {\n-        requireNonNull(fn);\n+    private void unblockExceptionally(@Nonnull Function<Throwable, ? extends V> fn,\n+                                      InternalCompletableFuture<V> future) {\n         Object result = resolve(state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe787a981400ee015292eec464aabac4ee9576c0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDExNzcyOnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyNDowOFrOHaY8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyNDowOFrOHaY8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzMzc2NA==", "bodyText": "Here result may be not UNRESOLVED but another valid value of a non-complete future like Thread, AbstractInvocationFuture$WhenCompleteNode etc. The problem is that isDone() operates on field state but result reflects a potentially stale value of state field -> it is possible that result != UNRESOLVED and isDone() are both true and yet result is not the actual completion value.", "url": "https://github.com/hazelcast/hazelcast/pull/17647#discussion_r497433764", "createdAt": "2020-09-30T11:24:08Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java", "diffHunk": "@@ -864,33 +879,19 @@ protected void unblockWhenComplete(@Nonnull final BiConsumer<? super V, ? super\n         }\n     }\n \n-    @Override\n-    public InternalCompletableFuture<V> exceptionally(@Nonnull Function<Throwable, ? extends V> fn) {\n-        requireNonNull(fn);\n+    private void unblockExceptionally(@Nonnull Function<Throwable, ? extends V> fn,\n+                                      InternalCompletableFuture<V> future) {\n         Object result = resolve(state);\n-        final InternalCompletableFuture<V> future = newCompletableFuture();\n-        for (; ; ) {\n-            if (result != UNRESOLVED && isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe787a981400ee015292eec464aabac4ee9576c0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 137, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}