{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MzE5NTQz", "number": 17688, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0Mzo1MVrOEqq0ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0Mzo1MVrOEqq0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc3MTg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/map/IndexStatsChangingNumberOfMembersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0Mzo1MVrOHdAYgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjozOTo0MFrOHdEVCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ==", "bodyText": "Should we not reevaluate this UUID to partition mapping in the assertTrueEventually block? I'm asking because I can imagine that this was invoked with the 1st member being the master member while the 0th member might have had a stale partition table. We then wait until all members have the same partition table as the 0th, which might not happen.", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500177025", "createdAt": "2020-10-06T10:43:51Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/map/IndexStatsChangingNumberOfMembersTest.java", "diffHunk": "@@ -409,7 +418,36 @@ protected double calculateOverallSelectivity(long initialHits, double initialTot\n     }\n \n     protected void addIndex(IMap<?, ?> map) {\n-        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(\"this\"));\n+        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(INDEX_NAME));\n     }\n \n+    protected void awaitStable(String mapName, HazelcastInstance... instances) {\n+        // Await for migrations to complete.\n+        waitAllForSafeState(instances);\n+\n+        // Make sure that all indexes contain expected partitions.\n+        Map<UUID, PartitionIdSet> memberToPartitions = new HashMap<>();\n+\n+        Set<Partition> partitions = instances[0].getPartitionService().getPartitions();\n+\n+        for (Partition partition : partitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "817dac32098520cec7a37f7b3f820ff5dcb48c36"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MDgyMA==", "bodyText": "This additional check is invoked after waitAllForSafeState, so the partition distribution is expected to be stable at this point.", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500240820", "createdAt": "2020-10-06T12:38:24Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/test/java/com/hazelcast/map/IndexStatsChangingNumberOfMembersTest.java", "diffHunk": "@@ -409,7 +418,36 @@ protected double calculateOverallSelectivity(long initialHits, double initialTot\n     }\n \n     protected void addIndex(IMap<?, ?> map) {\n-        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(\"this\"));\n+        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(INDEX_NAME));\n     }\n \n+    protected void awaitStable(String mapName, HazelcastInstance... instances) {\n+        // Await for migrations to complete.\n+        waitAllForSafeState(instances);\n+\n+        // Make sure that all indexes contain expected partitions.\n+        Map<UUID, PartitionIdSet> memberToPartitions = new HashMap<>();\n+\n+        Set<Partition> partitions = instances[0].getPartitionService().getPartitions();\n+\n+        for (Partition partition : partitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ=="}, "originalCommit": {"oid": "817dac32098520cec7a37f7b3f820ff5dcb48c36"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTY3Mg==", "bodyText": "Good point, thanks!", "url": "https://github.com/hazelcast/hazelcast/pull/17688#discussion_r500241672", "createdAt": "2020-10-06T12:39:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/map/IndexStatsChangingNumberOfMembersTest.java", "diffHunk": "@@ -409,7 +418,36 @@ protected double calculateOverallSelectivity(long initialHits, double initialTot\n     }\n \n     protected void addIndex(IMap<?, ?> map) {\n-        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(\"this\"));\n+        map.addIndex(new IndexConfig(IndexType.HASH, \"this\").setName(INDEX_NAME));\n     }\n \n+    protected void awaitStable(String mapName, HazelcastInstance... instances) {\n+        // Await for migrations to complete.\n+        waitAllForSafeState(instances);\n+\n+        // Make sure that all indexes contain expected partitions.\n+        Map<UUID, PartitionIdSet> memberToPartitions = new HashMap<>();\n+\n+        Set<Partition> partitions = instances[0].getPartitionService().getPartitions();\n+\n+        for (Partition partition : partitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzAyNQ=="}, "originalCommit": {"oid": "817dac32098520cec7a37f7b3f820ff5dcb48c36"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 171, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}