{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDIyMDgz", "number": 16461, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzowODo1NlrODXJeTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo1Mjo1M1rODZbnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTk5MDUzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzowODo1NlrOFcTmcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzowODo1NlrOFcTmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyNTU4Ng==", "bodyText": "The implementation of this class looks suspicious to me. Evaluate predicate is an indexed predicate over some other predicate. matchIndex may return null if the target index is not ready, causing NPE during query execution. We need to add tests for bitmap indexes in addition to existing tests, to make sure that the logic works properly.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r365225586", "createdAt": "2020-01-10T13:08:56Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "diffHunk": "@@ -72,13 +72,13 @@ public boolean apply(Map.Entry mapEntry) {\n     }\n \n     @Override\n-    public Set<QueryableEntry> filter(QueryContext queryContext) {\n-        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME);\n+    public Set<QueryableEntry> filter(QueryContext queryContext, int ownedPartitionCount) {\n+        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME, ownedPartitionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3e9678d5e5d4a6549e5080476ce19aabcde3ca"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTk5MzE5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzoxMDoxMFrOFcToGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzoxMDoxMFrOFcToGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyNjAwOA==", "bodyText": "Shouldn't we do something like this instead?\nreturn queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME, ownedPartitionCount) != null;", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r365226008", "createdAt": "2020-01-10T13:10:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "diffHunk": "@@ -72,13 +72,13 @@ public boolean apply(Map.Entry mapEntry) {\n     }\n \n     @Override\n-    public Set<QueryableEntry> filter(QueryContext queryContext) {\n-        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME);\n+    public Set<QueryableEntry> filter(QueryContext queryContext, int ownedPartitionCount) {\n+        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME, ownedPartitionCount);\n         return index.evaluate(predicate);\n     }\n \n     @Override\n-    public boolean isIndexed(QueryContext queryContext) {\n+    public boolean isIndexed(QueryContext queryContext, int ownedPartitionCount) {\n         return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3e9678d5e5d4a6549e5080476ce19aabcde3ca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjMzNDc1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToxMDo1NVrOFcW4fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToxMDo1NVrOFcW4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3OTM1Ng==", "bodyText": "EvaluatePredicate already assume that we decided to use an index, so we should not check the nested predicate. Instead, we should use EvaluatePredicate.indexName with EXACT_NAME rule to check if the index is ready.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r365279356", "createdAt": "2020-01-10T15:10:55Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluatePredicate.java", "diffHunk": "@@ -72,13 +72,23 @@ public boolean apply(Map.Entry mapEntry) {\n     }\n \n     @Override\n-    public Set<QueryableEntry> filter(QueryContext queryContext) {\n-        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME);\n+    public Set<QueryableEntry> filter(QueryContext queryContext, int ownedPartitionCount) {\n+        Index index = queryContext.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME, ownedPartitionCount);\n+        if (index == null) {\n+            return null;\n+        }\n         return index.evaluate(predicate);\n     }\n \n     @Override\n-    public boolean isIndexed(QueryContext queryContext) {\n+    public boolean isIndexed(QueryContext queryContext, int ownedPartitionCount) {\n+        if (predicate instanceof IndexAwarePredicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5406be863956e23ee38f933ea05b7dd77b79370"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM0NTM0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/query/impl/IndexConcurrencyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToxNDoyMVrOFcW_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToxNDoyMVrOFcW_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4MTAzNQ==", "bodyText": "Only several predicates are checked, whilst other types still may fail. E,g, AndPredicate, OrPredicate. We'd better extend the check for all built-in predicate types.\nBitmap indexes may generate different predicates during the optimization process (EvaluatePredicate), so a separate test for bitmaps is needed, with matching predicate types.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r365281035", "createdAt": "2020-01-10T15:14:21Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/test/java/com/hazelcast/query/impl/IndexConcurrencyTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.query.impl;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IMap;\n+import com.hazelcast.query.Predicates;\n+import com.hazelcast.query.SqlPredicate;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.annotation.ParallelTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collection;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class, ParallelTest.class})\n+public class IndexConcurrencyTest extends AbstractIndexConcurrencyTest {\n+\n+    @Override\n+    protected Config getConfig() {\n+        return smallInstanceConfig();\n+    }\n+\n+    @Test\n+    public void testIndexCreationAndQueryDeterministicConcurrency() {\n+        Config config = getConfig();\n+\n+        HazelcastInstance node = createHazelcastInstance(config);\n+        IMap<Integer, Person> map = node.getMap(randomMapName());\n+\n+        // put some data\n+        for (int i = 0; i < 10000; ++i) {\n+            map.put(i, new Person(i));\n+        }\n+\n+        // initialize age field access counter\n+        Person.accessCountDown = new AtomicLong(5000);\n+\n+        // start indexer, it will await for latch in the middle\n+        AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n+        Thread indexer = new Thread(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                try {\n+                    map.addIndex(\"age\", true);\n+                } catch (Throwable t) {\n+                    exception.compareAndSet(null, t);\n+                }\n+            }\n+        });\n+        indexer.start();\n+\n+        // await for query latch\n+        assertOpenEventually(Person.queryLatch);\n+        Person.accessCountDown = null;\n+\n+        // run checking query\n+        Collection<Person> persons = map.values(new SqlPredicate(\"age >= 5000\"));\n+        assertEquals(5000, persons.size());\n+\n+        persons = map.values(Predicates.equal(\"age\", \"20\"));\n+        assertEquals(1, persons.size());\n+\n+        persons = map.values(Predicates.greaterThan(\"age\", \"5000\"));\n+        assertEquals(4999, persons.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5406be863956e23ee38f933ea05b7dd77b79370"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTkyODMzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo1MToxMFrOFfz9zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjowODowNVrOFf3wzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg==", "bodyText": "Is it OK to pass -1 here? It seem that we may cache inconsistent results here if the check for partition count is skipped, don't we?", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368901582", "createdAt": "2020-01-21T09:51:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyMTQxOQ==", "bodyText": "Seems like it's impossible to fix that without introducing changes to query cache itself and that's out of scope of this task. Probably we should just open a new issue. @ahmetmircik wdyt?", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368921419", "createdAt": "2020-01-21T10:30:36Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg=="}, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyOTQ0Mw==", "bodyText": "I've created an issue #16513 for 4.1 milestone to track this.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368929443", "createdAt": "2020-01-21T10:47:18Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg=="}, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk1MTc3OQ==", "bodyText": "Maybe i'm missing something, but QueryCache indexes are local and should have no relation with partitioning subsystem.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368951779", "createdAt": "2020-01-21T11:38:08Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg=="}, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2MDEwNA==", "bodyText": "@ahmetmircik yes, but one can still call addIndex on one thread while running queries from another. Until addIndex wouldn't be finished with its job, queries would return inconsistent results.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368960104", "createdAt": "2020-01-21T11:58:35Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg=="}, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2Mzc4OQ==", "bodyText": "Thanks for clarification, now the opened issue makes sense.", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368963789", "createdAt": "2020-01-21T12:08:05Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/subscriber/DefaultQueryCache.java", "diffHunk": "@@ -334,7 +334,7 @@ public V get(Object key) {\n \n         Set<K> resultingSet = new HashSet<K>();\n \n-        Set<QueryableEntry> query = indexes.query(predicate);\n+        Set<QueryableEntry> query = indexes.query(predicate, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMTU4Mg=="}, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTkzNDEwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluateVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo1Mjo1M1rOFf0BSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo1Mjo1M1rOFf0BSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMjQ3NQ==", "bodyText": "I am a little worried with plain -1 in many places. Shouldn't we declare it as a static final constant instead?", "url": "https://github.com/hazelcast/hazelcast/pull/16461#discussion_r368902475", "createdAt": "2020-01-21T09:52:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/EvaluateVisitor.java", "diffHunk": "@@ -51,7 +51,7 @@ public Predicate visit(AndPredicate andPredicate, Indexes indexes) {\n \n             EvaluatePredicate evaluatePredicate = (EvaluatePredicate) subPredicate;\n             String indexName = evaluatePredicate.getIndexName();\n-            Index index = indexes.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME);\n+            Index index = indexes.matchIndex(indexName, QueryContext.IndexMatchHint.EXACT_NAME, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27918909ce2376c0b405d1ea5ab492cda5eb4140"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 851, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}