{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTE2NDg0", "number": 17897, "title": "Remove StoreAdapter", "bodyText": "Goal:\nTo introduce new HDRecord types, i'm trying to remove HDRecord usages from other packages, like query related class package. This is to increase isolation and making further changes easy.\nMain Modifications:\n\nRemoved StoreAdapter and relevant references to it.\nFiltered out expired entries in Indexes.query method.\n\nee counterpart: hazelcast/hazelcast-enterprise#3860", "createdAt": "2020-11-25T15:14:10Z", "url": "https://github.com/hazelcast/hazelcast/pull/17897", "merged": true, "mergeCommit": {"oid": "aa0aa4415494054c576b03c075ea25be2cb0c628"}, "closed": true, "closedAt": "2020-12-03T17:32:31Z", "author": {"login": "ahmetmircik"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgRlwJAFqTUzOTI0NDI2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdil8IxAFqTU0NDE2MTk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjQ0MjY2", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-539244266", "createdAt": "2020-11-26T11:47:49Z", "commit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo0Nzo0OVrOH6YEQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1MjoxNVrOH6YNwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2MA==", "bodyText": "Do we really need hasNext local variable here? return true seems enough.", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r530973760", "createdAt": "2020-11-26T11:47:49Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/IterableUtil.java", "diffHunk": "@@ -61,6 +69,63 @@ public void remove() {\n         };\n     }\n \n+    /**\n+     * Lazily filters iterated elements.\n+     *\n+     * @return a new iterable object which\n+     * has an iterator capable of filtering elements\n+     */\n+    public static <T> Iterable<T> filter(Iterable<T> iterable, Predicate<T> filter) {\n+        Iterator<T> givenIterator = iterable.iterator();\n+\n+        Iterator<T> filteringIterator = new Iterator<T>() {\n+            private T next;\n+\n+            @Override\n+            public boolean hasNext() {\n+                boolean hasNext = false;\n+                while (givenIterator.hasNext()) {\n+                    T temp = givenIterator.next();\n+                    if (filter.test(temp)) {\n+                        next = temp;\n+                        hasNext = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NTU0Mw==", "bodyText": "We should throw NoSuchElementException only if there is no next element not expecting that the user called hasNext() before that. I'd put it like\nif (!hasNext()) {\n    throw new NoSuchElementException()\n}", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r530975543", "createdAt": "2020-11-26T11:51:04Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/IterableUtil.java", "diffHunk": "@@ -61,6 +69,63 @@ public void remove() {\n         };\n     }\n \n+    /**\n+     * Lazily filters iterated elements.\n+     *\n+     * @return a new iterable object which\n+     * has an iterator capable of filtering elements\n+     */\n+    public static <T> Iterable<T> filter(Iterable<T> iterable, Predicate<T> filter) {\n+        Iterator<T> givenIterator = iterable.iterator();\n+\n+        Iterator<T> filteringIterator = new Iterator<T>() {\n+            private T next;\n+\n+            @Override\n+            public boolean hasNext() {\n+                boolean hasNext = false;\n+                while (givenIterator.hasNext()) {\n+                    T temp = givenIterator.next();\n+                    if (filter.test(temp)) {\n+                        next = temp;\n+                        hasNext = true;\n+                        break;\n+                    }\n+                }\n+                return hasNext;\n+            }\n+\n+            @Override\n+            public T next() {\n+                if (next == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NjE5Mw==", "bodyText": "If I call hasNext() multiple times it shouldn't advance the iterator, but it seems it does.", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r530976193", "createdAt": "2020-11-26T11:52:15Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/IterableUtil.java", "diffHunk": "@@ -61,6 +69,63 @@ public void remove() {\n         };\n     }\n \n+    /**\n+     * Lazily filters iterated elements.\n+     *\n+     * @return a new iterable object which\n+     * has an iterator capable of filtering elements\n+     */\n+    public static <T> Iterable<T> filter(Iterable<T> iterable, Predicate<T> filter) {\n+        Iterator<T> givenIterator = iterable.iterator();\n+\n+        Iterator<T> filteringIterator = new Iterator<T>() {\n+            private T next;\n+\n+            @Override\n+            public boolean hasNext() {\n+                boolean hasNext = false;\n+                while (givenIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Mjk2MTA1", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-539296105", "createdAt": "2020-11-26T13:03:13Z", "commit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowMzoxM1rOH6aj-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzowMzoxM1rOH6aj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNDY1MQ==", "bodyText": "Is this method called on the partition thread?", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r531014651", "createdAt": "2020-11-26T13:03:13Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java", "diffHunk": "@@ -158,7 +159,24 @@ public Indexes createIndexes(boolean global) {\n                 .indexProvider(mapServiceContext.getIndexProvider(mapConfig))\n                 .usesCachedQueryableEntries(mapConfig.getCacheDeserializedValues() != CacheDeserializedValues.NEVER)\n                 .partitionCount(partitionCount)\n-                .build();\n+                .resultFilter(queryableEntry -> hasNotExpired(queryableEntry)).build();\n+    }\n+\n+    /**\n+     * @return {@code true} if queryableEntry has\n+     * not expired, otherwise returns {@code false}\n+     */\n+    private boolean hasNotExpired(QueryableEntry queryableEntry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c68e6c52cc1a4f06503cc76c1877f21e8a90d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzYzNzMy", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-539363732", "createdAt": "2020-11-26T14:32:00Z", "commit": {"oid": "087f511ac69d46eb4a29141ad41ed10acf43033b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDozMjowMFrOH6dzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDozMjowMFrOH6dzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NzY1Mg==", "bodyText": "Not sure that we need hasNextCallCount and nextCallCount. Why not using just next? If it is not null the hasNext() returns true immediately. The next() will first call hasNext() and if it exists, return it (assigning next to null). Something similar to the HDBplusTree#EntryIterator.", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r531067652", "createdAt": "2020-11-26T14:32:00Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/IterableUtil.java", "diffHunk": "@@ -61,6 +69,72 @@ public void remove() {\n         };\n     }\n \n+    /**\n+     * Lazily filters iterated elements.\n+     *\n+     * @return a new iterable object which\n+     * has an iterator capable of filtering elements\n+     */\n+    public static <T> Iterable<T> filter(Iterable<T> iterable, Predicate<T> filter) {\n+        Iterator<T> givenIterator = iterable.iterator();\n+\n+        @SuppressWarnings(\"checkstyle:anoninnerlength\")\n+        Iterator<T> filteringIterator = new Iterator<T>() {\n+            private T next;\n+            private int hasNextCallCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087f511ac69d46eb4a29141ad41ed10acf43033b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODQwMDAx", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-541840001", "createdAt": "2020-12-01T12:18:21Z", "commit": {"oid": "363350d26f61d1186dad831d737aa2426b40dd83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTA5ODUw", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-543109850", "createdAt": "2020-12-02T18:12:41Z", "commit": {"oid": "363350d26f61d1186dad831d737aa2426b40dd83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMjo0MVrOH9n51A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMjo0MVrOH9n51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3ODk2NA==", "bodyText": "I'm a bit lost here. Now we don't update the isIndexStoreExpirable field anywhere but we still use the return value from BaseIndexStore#isExpirable in three places. Can you elaborate on this change?", "url": "https://github.com/hazelcast/hazelcast/pull/17897#discussion_r534378964", "createdAt": "2020-12-02T18:12:41Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/BaseIndexStore.java", "diffHunk": "@@ -145,13 +145,6 @@ private Comparable sanitizeScalar(Object input) {\n         }\n     }\n \n-    void markIndexStoreExpirableIfNecessary(QueryableEntry record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "363350d26f61d1186dad831d737aa2426b40dd83"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1937d07211e6a511422d407e9f7e8c2719040c71", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1937d07211e6a511422d407e9f7e8c2719040c71", "committedDate": "2020-12-02T18:24:03Z", "message": "remove adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34bda86807eec0b981cd7db6a038d54916f901b0", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/34bda86807eec0b981cd7db6a038d54916f901b0", "committedDate": "2020-12-02T18:24:03Z", "message": "loop to filter in Indexes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac435eae2addeab14056c31444b53e3674a9f0e9", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ac435eae2addeab14056c31444b53e3674a9f0e9", "committedDate": "2020-12-02T18:24:03Z", "message": "add result != null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069a0fae87d5ca5571fa8611008001b7952c0b49", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/069a0fae87d5ca5571fa8611008001b7952c0b49", "committedDate": "2020-12-02T18:24:03Z", "message": "Return iterable from indexes.query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad70f2391b310ea98271aadb82f493457335f71", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2ad70f2391b310ea98271aadb82f493457335f71", "committedDate": "2020-12-02T18:24:03Z", "message": "spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800edbdedbf99bea6d03e77a9f4f52fe13da5616", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/800edbdedbf99bea6d03e77a9f4f52fe13da5616", "committedDate": "2020-12-02T18:24:03Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e4f6999e77b6fdc69a7510572ea35a0fc7894b", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f3e4f6999e77b6fdc69a7510572ea35a0fc7894b", "committedDate": "2020-12-02T18:24:03Z", "message": "optimize for non expirable record stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136f2c1880a7ad2d08751ce066b4cec1772a1eda", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/136f2c1880a7ad2d08751ce066b4cec1772a1eda", "committedDate": "2020-12-02T18:24:03Z", "message": "optimize for non expirable record stores 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e750d258f59644d2525dbe2626e7e9e411408b", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c9e750d258f59644d2525dbe2626e7e9e411408b", "committedDate": "2020-12-02T18:24:03Z", "message": "optimize for non expirable record stores 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0956fc0cc641f7e7381cafa751bb599449983396", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0956fc0cc641f7e7381cafa751bb599449983396", "committedDate": "2020-12-02T18:24:03Z", "message": "optimize for non expirable record stores 4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da66aa5e9d01689fa276cdb478d3d279af13d010", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da66aa5e9d01689fa276cdb478d3d279af13d010", "committedDate": "2020-12-02T18:24:03Z", "message": "javadoc updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e014f7153c6ff456ebda524b550c45f4ef04dca1", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e014f7153c6ff456ebda524b550c45f4ef04dca1", "committedDate": "2020-12-02T18:24:03Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9dd1c6aabd8915954bb1592886559a0232b4270", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e9dd1c6aabd8915954bb1592886559a0232b4270", "committedDate": "2020-12-02T18:24:03Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42406f8bdf91d148a6bc38748df10c88befd843d", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/42406f8bdf91d148a6bc38748df10c88befd843d", "committedDate": "2020-12-02T18:24:03Z", "message": "address review comments 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ee371d45d2228cc504bd8beb5d3c59ae088724c", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ee371d45d2228cc504bd8beb5d3c59ae088724c", "committedDate": "2020-12-02T18:24:04Z", "message": "address review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "363350d26f61d1186dad831d737aa2426b40dd83", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/363350d26f61d1186dad831d737aa2426b40dd83", "committedDate": "2020-11-26T15:56:31Z", "message": "address review comments 2"}, "afterCommit": {"oid": "7ee371d45d2228cc504bd8beb5d3c59ae088724c", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ee371d45d2228cc504bd8beb5d3c59ae088724c", "committedDate": "2020-12-02T18:24:04Z", "message": "address review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9014bcb8c0682de201a835ca5abcd15534454331", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9014bcb8c0682de201a835ca5abcd15534454331", "committedDate": "2020-12-02T18:52:41Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTYxNzkw", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-543161790", "createdAt": "2020-12-02T19:19:56Z", "commit": {"oid": "9014bcb8c0682de201a835ca5abcd15534454331"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTYxOTUz", "url": "https://github.com/hazelcast/hazelcast/pull/17897#pullrequestreview-544161953", "createdAt": "2020-12-03T16:42:50Z", "commit": {"oid": "9014bcb8c0682de201a835ca5abcd15534454331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3166, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}