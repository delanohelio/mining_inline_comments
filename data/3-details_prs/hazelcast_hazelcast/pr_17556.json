{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTUxNjI5", "number": 17556, "title": "Try load custom exceptions via class loader on client", "bodyText": "We are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\nThis causes poor experience as the behaviour is different between\nthe client and the member.\nsee  #9753\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\nfixes #9753", "createdAt": "2020-09-16T12:24:12Z", "url": "https://github.com/hazelcast/hazelcast/pull/17556", "merged": true, "mergeCommit": {"oid": "9557a293338e9e56d3b7a380524159029e852f57"}, "closed": true, "closedAt": "2020-10-06T08:56:35Z", "author": {"login": "sancar"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJsvXpgBqjM3NzY3NTgwNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPeqyNgH2gAyNDg3OTUxNjI5OjA2MzMyYWY2ZjY2MWUzNjY0ZTgxZjY4MDE1ZDAxM2VlNzQ5M2E3ZjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fb9ab634e665dd22cdbc4cb65d786ec188d17f3", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5fb9ab634e665dd22cdbc4cb65d786ec188d17f3", "committedDate": "2020-09-17T08:07:55Z", "message": "Add assert to check if exception is defined in the protocol\n\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us."}, "afterCommit": {"oid": "a61792f02d527e8cdcd3ddb02187067b6286eaa7", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a61792f02d527e8cdcd3ddb02187067b6286eaa7", "committedDate": "2020-09-17T08:29:58Z", "message": "Add assert to check if exception is defined in the protocol\n\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42096f126d40afef7dd481e61ef10fd4f19c4f99", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/42096f126d40afef7dd481e61ef10fd4f19c4f99", "committedDate": "2020-09-17T11:52:03Z", "message": "fix"}, "afterCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/18dd1ddac9db67a1cfe6d044166b7e61b55ccb20", "committedDate": "2020-09-24T14:21:18Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTMwNDc3", "url": "https://github.com/hazelcast/hazelcast/pull/17556#pullrequestreview-500930477", "createdAt": "2020-10-02T07:59:49Z", "commit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo1OTo0OVrOHbkbyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODoxNTowOFrOHbk37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MDUzNg==", "bodyText": "Question: should we create a test that would verify that each error code is registered in both ClientExceptions and ClientExceptionFactory? The process of adding a new code seems to be error-prone and leads to missing registrations like this one.", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498670536", "createdAt": "2020-10-02T07:59:49Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientExceptions.java", "diffHunk": "@@ -209,6 +209,11 @@ public ClientExceptions(boolean jcacheAvailable) {\n         register(ClientProtocolErrorCodes.STALE_APPEND_REQUEST_EXCEPTION, StaleAppendRequestException.class);\n         register(ClientProtocolErrorCodes.NOT_LEADER_EXCEPTION, NotLeaderException.class);\n         register(ClientProtocolErrorCodes.VERSION_MISMATCH_EXCEPTION, VersionMismatchException.class);\n+        register(ClientProtocolErrorCodes.NO_SUCH_METHOD_ERROR, NoSuchMethodError.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3Mjc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion\n          \n          \n            \n                 * @return {@code null} if can not find a constructor as described above, otherwise returns newly constructed exception", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498672751", "createdAt": "2020-10-02T08:04:38Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +208,49 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)\n+     * new Throwable(String message, Throwable cause)\n+     * new Throwable(Throwable cause)\n+     * new Throwable(String message)\n+     * new Throwable()\n+     *\n+     * @param exceptionClass class of the exception\n+     * @param message        message to be pass to constructor of the exception\n+     * @param cause          cause to be set to the exception\n+     * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MzMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In all cases the cause is set(via constructor or via initCause)\n          \n          \n            \n                 * In all cases the cause is set (via constructor or via {@code initCause})", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498673308", "createdAt": "2020-10-02T08:05:50Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +208,49 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3Nzc0Mg==", "bodyText": "Probably it makes sense to add an exception class with non-matching signature and check that it leads to a UndefinedErrorCodeException. Or we could simply keep ClientProtocolErrorCodesTest#testUndefinedException (and modify it slightly). WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498677742", "createdAt": "2020-10-02T08:15:08Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/testsubjects/CustomExceptions.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package testsubjects;\n+\n+public class CustomExceptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0bac82c0b562e741480be7b7ba388700bdcfe2", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7e0bac82c0b562e741480be7b7ba388700bdcfe2", "committedDate": "2020-10-02T12:34:50Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0a8111398f442c2a20d3efeb2e86dd0753f08203", "committedDate": "2020-10-02T12:34:50Z", "message": "addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/18dd1ddac9db67a1cfe6d044166b7e61b55ccb20", "committedDate": "2020-09-24T14:21:18Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}, "afterCommit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0a8111398f442c2a20d3efeb2e86dd0753f08203", "committedDate": "2020-10-02T12:34:50Z", "message": "addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTI2Mjg4", "url": "https://github.com/hazelcast/hazelcast/pull/17556#pullrequestreview-501126288", "createdAt": "2020-10-02T13:18:09Z", "commit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODoxMFrOHbtQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODoxMFrOHbtQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTE4OA==", "bodyText": "nit: a list (ul/li) + code blocks could be used here to make this part of the javadoc more readable", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498815188", "createdAt": "2020-10-02T13:18:10Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/UndefinedErrorCodeException.java", "diffHunk": "@@ -20,8 +20,16 @@\n import com.hazelcast.spi.impl.operationservice.WrappableException;\n \n /**\n- * This exception is thrown when an exception that is coming from server is not recognized by the protocol.\n- * Class name of the original exception is included in the exception\n+ * This exception is thrown when an exception that is coming from server is not recognized by the protocol and\n+ * it can not be constructed by the client via reflection.\n+ * For the client to be able to recreate original exception it should be available on the classpath and\n+ * it should have one of the following constructors publicly.\n+ * new Throwable(String message, Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzYyMzU5", "url": "https://github.com/hazelcast/hazelcast/pull/17556#pullrequestreview-501762359", "createdAt": "2020-10-05T06:54:39Z", "commit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06332af6f661e3664e81f68015d013ee7493a7f0", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/06332af6f661e3664e81f68015d013ee7493a7f0", "committedDate": "2020-10-05T07:29:59Z", "message": "fix for NullPointerException when exception is with a non-matching signature"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3315, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}