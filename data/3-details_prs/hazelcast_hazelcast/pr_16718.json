{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODk2NzY4", "number": 16718, "title": "add codec versioning support", "bodyText": "This PR reflects the necessary changes to Hazelcast side for the work done on the protocol side to add the ability to add new parameters, methods, services, events, custom types to codecs.\nApart from the minor minor changes, following logic is added to the client message comparison:\n\n\nIf a new fix sized parameter is added to a custom type, initial frames of the messages read from the old binary files (e.g. 2.0 binary file) and the encoded messages (e.g. message encoded by the 2.1 codec) will differ such that the encoded initial frame will contain extra parameters. Old clients/members does not try to decode them so we should not try to compare them. Therefore, we only compare the part of the encodedFrame which is sliced with the size of the binaryFrame.\n\n\nIf a new var sized parameter is added to a custom type, encoded message (message encoded by the 2.1 codec) will have extra frames compared to the messages read from the old binary files (e.g. 2.0 binary file). When we reach the END_FRAME of the binary message, we will not be at the END_FRAME of the encoded message. Therefore, we skip the additional frames to reach the end frame. Also, as an edge case, if a custom type is added to another custom type as an extension, we should also skip to its END_FRAME. The fastForwardToEndFrame call inside the if check is for this case.\n\n\nAlthough it is not in this PR, following things will happen when protocol is expanded:\n\nA new set of binary and test files (e.g. 2.0.1.protocol.compatibility.binary, ClientCompatibilityTest_2_0_1.java ... ) will be automatically generated.\nFor the newly added parameters, there will be an extra boolean called isXXExists on the ResponseParameters, RequestParameters, handleYYEvent method, constructor/factory of the custom type depending on where the parameter is added. When isXXExist is true, one may assume that the XX field/parameter is encoded by the other end of the communication and it is successfully decoded. If it is false, it means that the message comes from an endpoint that is older than the version that the XX is added and XX field/parameter will have the default value (0, false or null).\nIf a new parameter is added to a custom type, an extra step is necessary for the compatibility tests. Lets say a new String parameter (xx) is added to the Address and the protocol is updated. The new string will be added to the reference object. However, there will be 2.0 compatibility tests that call         assertTrue(isEqual(anAddress, parameters.address)); Now, the equality check is not that straightforward. For 2.0 binaries parameters.address will contain host and port, but for the 2.1 binaries parameters.address will contain host, port and xx. Therefore one needs to add an isEqual(Address, Address) method to the reference objects (or update the equals method of the Address) that will return true when host and port fields matches and the isXXExists is false. If isXXExists is true, isEqual method should also compare the xx fields.\n\nProtocol PR: hazelcast/hazelcast-client-protocol#309", "createdAt": "2020-03-03T11:29:20Z", "url": "https://github.com/hazelcast/hazelcast/pull/16718", "merged": true, "mergeCommit": {"oid": "d728ddb21e7b96bf78c2557e86ff52e85a604e0d"}, "closed": true, "closedAt": "2020-03-17T07:11:56Z", "author": {"login": "mdumandag"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLAgWXgBqjMxMDU0MzkwMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNROvVgFqTM3NDM0Njc0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c915af8f35c192bb777657a501661dc729056fdf", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c915af8f35c192bb777657a501661dc729056fdf", "committedDate": "2020-03-03T10:44:26Z", "message": "add codec versioning support"}, "afterCommit": {"oid": "5931c744df9ac98265a1f3bc4b755b02c3e228e9", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5931c744df9ac98265a1f3bc4b755b02c3e228e9", "committedDate": "2020-03-06T13:54:19Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5931c744df9ac98265a1f3bc4b755b02c3e228e9", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5931c744df9ac98265a1f3bc4b755b02c3e228e9", "committedDate": "2020-03-06T13:54:19Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}, "afterCommit": {"oid": "9bfab3de83957d16735afc22a7991459f8bf6e89", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9bfab3de83957d16735afc22a7991459f8bf6e89", "committedDate": "2020-03-06T13:55:42Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d621eb3e37a9aa6ae10ba30d14be12a241ce6b2", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4d621eb3e37a9aa6ae10ba30d14be12a241ce6b2", "committedDate": "2020-03-13T07:33:30Z", "message": "add codec versioning support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "committedDate": "2020-03-13T07:33:30Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bfab3de83957d16735afc22a7991459f8bf6e89", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9bfab3de83957d16735afc22a7991459f8bf6e89", "committedDate": "2020-03-06T13:55:42Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}, "afterCommit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "author": {"user": {"login": "mdumandag", "name": "Metin Dumandag"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "committedDate": "2020-03-13T07:33:30Z", "message": "improve messagec comparision logic to handle addition of new custom types to custom types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTg3NjY3", "url": "https://github.com/hazelcast/hazelcast/pull/16718#pullrequestreview-374187667", "createdAt": "2020-03-13T10:20:26Z", "commit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMDoyNlrOF1-ZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMDoyNlrOF1-ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MTI1Mg==", "bodyText": "What is the reason of having to calls to fastForwardToEndFrame ? Why do we need to fast forward once more if encodedFrame.isBeginFrame()", "url": "https://github.com/hazelcast/hazelcast/pull/16718#discussion_r392141252", "createdAt": "2020-03-13T10:20:26Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/protocol/compatibility/ClientCompatibilityTest_2_0.java", "diffHunk": "@@ -6917,32 +6920,24 @@ private void compareClientMessages(ClientMessage binaryMessage, ClientMessage en\n \n         ClientMessage.ForwardFrameIterator binaryFrameIterator = binaryMessage.frameIterator();\n         ClientMessage.ForwardFrameIterator encodedFrameIterator = encodedMessage.frameIterator();\n+        assertTrue(\"Client message that is read from the binary file does not have any frames\", binaryFrameIterator.hasNext());\n \n-        boolean isInitialFramesCompared = false;\n         while (binaryFrameIterator.hasNext()) {\n             binaryFrame = binaryFrameIterator.next();\n             encodedFrame = encodedFrameIterator.next();\n             assertNotNull(\"Encoded client message has less frames.\", encodedFrame);\n \n-            boolean isFinal = binaryFrameIterator.peekNext() == null;\n-            if (!isInitialFramesCompared) {\n-                compareInitialFrame(binaryFrame, encodedFrame, isFinal);\n-                isInitialFramesCompared = true;\n-            } else {\n-                assertArrayEquals(\"Frames have different contents\", binaryFrame.content, encodedFrame.content);\n-                int flags = isFinal ? encodedFrame.flags | IS_FINAL_FLAG : encodedFrame.flags;\n-                assertEquals(\"Frames have different flags\", binaryFrame.flags, flags);\n+            if (binaryFrame.isEndFrame() && !encodedFrame.isEndFrame()) {\n+                if (encodedFrame.isBeginFrame()) {\n+                    HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);\n+                }\n+                encodedFrame = HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzEwMzUw", "url": "https://github.com/hazelcast/hazelcast/pull/16718#pullrequestreview-374310350", "createdAt": "2020-03-13T13:45:34Z", "commit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzQ2NzQ5", "url": "https://github.com/hazelcast/hazelcast/pull/16718#pullrequestreview-374346749", "createdAt": "2020-03-13T14:31:35Z", "commit": {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3858, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}