{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTE3ODY1", "number": 17562, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDo1MDo1NFrOElmc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxNDo1NFrOEmdmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODYyNzQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDo1MDo1NFrOHVKQhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjo0OTozMFrOHVOYVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk1MDIxMw==", "bodyText": "The backupMap is initialized with the HashMap that is not thread-safe. Is it handled properly that multiple threads are not accessing it?", "url": "https://github.com/hazelcast/hazelcast/pull/17562#discussion_r491950213", "createdAt": "2020-09-21T10:50:54Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "diffHunk": "@@ -99,6 +98,8 @@\n     // to avoid reloading same items\n     private long lastIdLoaded;\n \n+    private volatile Map<Long, QueueItem> backupMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15844b170a946e4838ead3dacc09241210a18952"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNzc1MA==", "bodyText": "fixed it by making backupMap a CHM.", "url": "https://github.com/hazelcast/hazelcast/pull/17562#discussion_r492017750", "createdAt": "2020-09-21T12:49:30Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "diffHunk": "@@ -99,6 +98,8 @@\n     // to avoid reloading same items\n     private long lastIdLoaded;\n \n+    private volatile Map<Long, QueueItem> backupMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk1MDIxMw=="}, "originalCommit": {"oid": "15844b170a946e4838ead3dacc09241210a18952"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzY2NDA5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxNDo1NFrOHWf3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTozNjozN1rOHY16mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM1Mjc0Nw==", "bodyText": "This mix of referring to a local variable and the field is a bit confusing. Can you elaborate a bit or simply use the local variable only when checking the size and adding to backup map?", "url": "https://github.com/hazelcast/hazelcast/pull/17562#discussion_r493352747", "createdAt": "2020-09-23T09:14:54Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "diffHunk": "@@ -980,24 +986,29 @@ public boolean hasEnoughCapacity(int delta) {\n      * @return backup replica map from item ID to queue item\n      */\n     public Map<Long, QueueItem> getBackupMap() {\n+        ConcurrentMap<Long, QueueItem> backupMap = this.backupMap;\n         if (backupMap == null) {\n+            Queue<QueueItem> itemQueue = this.itemQueue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad7f14fd8767a430e248a33a96aeb1f747d0c64"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxMTIyNA==", "bodyText": "now it should be more clear", "url": "https://github.com/hazelcast/hazelcast/pull/17562#discussion_r495811224", "createdAt": "2020-09-28T09:36:37Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "diffHunk": "@@ -980,24 +986,29 @@ public boolean hasEnoughCapacity(int delta) {\n      * @return backup replica map from item ID to queue item\n      */\n     public Map<Long, QueueItem> getBackupMap() {\n+        ConcurrentMap<Long, QueueItem> backupMap = this.backupMap;\n         if (backupMap == null) {\n+            Queue<QueueItem> itemQueue = this.itemQueue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM1Mjc0Nw=="}, "originalCommit": {"oid": "6ad7f14fd8767a430e248a33a96aeb1f747d0c64"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 241, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}