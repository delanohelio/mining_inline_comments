{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTE5ODIy", "number": 17395, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozMTo0NlrOEb8H6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNDowM1rOEb-7qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzMyMDcyOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastOperandTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozMTo0NlrOHGLLMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxODo0MVrOHGPVRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNjU5Mg==", "bodyText": "What's the reasoning behind introducing an abstract class with a single non-abstract implementation?", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476236592", "createdAt": "2020-08-25T07:31:46Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastOperandTypes.java", "diffHunk": "@@ -65,11 +66,11 @@ public static SqlOperandTypeChecker notAllNull(SqlOperandTypeChecker base) {\n         return new NotAllNull(base);\n     }\n \n-    private static final class NotAny implements SqlSingleOperandTypeChecker {\n+    private abstract static class DisallowedTypeOperandTypeChecker implements SqlSingleOperandTypeChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNDcxMA==", "bodyText": "A leftover. I was experimenting with some advanced type checking for temporal types but ultimately removed it. Forgot to roll back the changes.\nRolled back in e442d1c", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476304710", "createdAt": "2020-08-25T09:18:41Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastOperandTypes.java", "diffHunk": "@@ -65,11 +66,11 @@ public static SqlOperandTypeChecker notAllNull(SqlOperandTypeChecker base) {\n         return new NotAllNull(base);\n     }\n \n-    private static final class NotAny implements SqlSingleOperandTypeChecker {\n+    private abstract static class DisallowedTypeOperandTypeChecker implements SqlSingleOperandTypeChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNjU5Mg=="}, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM0NDE5OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozODozN1rOHGLZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNjozNVrOHGPotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI2NA==", "bodyText": "What's the status of TIME_WITH_LOCAL_TIME_ZONE? There is no mapping from/to query data type for it, but it's listed as allowed.", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476240264", "createdAt": "2020-08-25T07:38:37Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java", "diffHunk": "@@ -204,6 +208,10 @@ public Void visit(SqlDataTypeSpec type) {\n             case REAL:\n             case DOUBLE:\n             case VARCHAR:\n+            case DATE:\n+            case TIME:\n+            case TIMESTAMP:\n+            case TIME_WITH_LOCAL_TIME_ZONE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTY4NA==", "bodyText": "This is a bug, neither TIME_WITH_LOCAL_TIME_ZONE, nor TIMESTAMP_WITH_LOCAL_TIME_ZONE should be there. We should list there only built-in Calcite types that we use. Our custom TIMESTAMP_WITH_TIME_ZONE is not in the list, because we rely on custom identifier remapping (similarly to ANY -> OBJECT)\nFixed in 5ebe4af", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476309684", "createdAt": "2020-08-25T09:26:35Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java", "diffHunk": "@@ -204,6 +208,10 @@ public Void visit(SqlDataTypeSpec type) {\n             case REAL:\n             case DOUBLE:\n             case VARCHAR:\n+            case DATE:\n+            case TIME:\n+            case TIMESTAMP:\n+            case TIME_WITH_LOCAL_TIME_ZONE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI2NA=="}, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc4MDkwOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTemporalType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNDowM1rOHGPijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNzo1NFrOHGPr4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODExMA==", "bodyText": "Is it ok to use underscored type names while Calcite, and SQL in general, refer to them without underscores?", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476308110", "createdAt": "2020-08-25T09:24:03Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTemporalType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.sql.impl.calcite.SqlToQueryType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.type.BasicSqlType;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+/**\n+ * Class describing TIME, TIMESTAMP and TIMESTAMP_WITH_TIME_ZONE types.\n+ */\n+public final class HazelcastTemporalType extends BasicSqlType {\n+\n+    public static final RelDataType TIME = new HazelcastTemporalType(SqlTypeName.TIME, false);\n+    public static final RelDataType TIME_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIME, true);\n+\n+    public static final RelDataType TIMESTAMP = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, false);\n+    public static final RelDataType TIMESTAMP_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, true);\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, false\n+    );\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE_NULLABLE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE,\n+        true\n+    );\n+\n+    private HazelcastTemporalType(SqlTypeName typeName, boolean nullable) {\n+        super(HazelcastTypeSystem.INSTANCE, typeName);\n+\n+        this.isNullable = nullable;\n+\n+        computeDigest();\n+    }\n+\n+    @Override\n+    protected void generateTypeString(StringBuilder sb, boolean withDetail) {\n+        sb.append(SqlToQueryType.map(typeName).getTypeFamily());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDQ5OQ==", "bodyText": "WIthout underscores, they are split into independent tokens, and hence require custom parser implementation. We may introduce more convenient naming later (e.g. TIMESTAMP WITH TIME ZONE, or Postgres-like timestamptz, etc)", "url": "https://github.com/hazelcast/hazelcast/pull/17395#discussion_r476310499", "createdAt": "2020-08-25T09:27:54Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTemporalType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.sql.impl.calcite.SqlToQueryType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.type.BasicSqlType;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+/**\n+ * Class describing TIME, TIMESTAMP and TIMESTAMP_WITH_TIME_ZONE types.\n+ */\n+public final class HazelcastTemporalType extends BasicSqlType {\n+\n+    public static final RelDataType TIME = new HazelcastTemporalType(SqlTypeName.TIME, false);\n+    public static final RelDataType TIME_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIME, true);\n+\n+    public static final RelDataType TIMESTAMP = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, false);\n+    public static final RelDataType TIMESTAMP_NULLABLE = new HazelcastTemporalType(SqlTypeName.TIMESTAMP, true);\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, false\n+    );\n+\n+    public static final RelDataType TIMESTAMP_WITH_TIME_ZONE_NULLABLE = new HazelcastTemporalType(\n+        SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE,\n+        true\n+    );\n+\n+    private HazelcastTemporalType(SqlTypeName typeName, boolean nullable) {\n+        super(HazelcastTypeSystem.INSTANCE, typeName);\n+\n+        this.isNullable = nullable;\n+\n+        computeDigest();\n+    }\n+\n+    @Override\n+    protected void generateTypeString(StringBuilder sb, boolean withDetail) {\n+        sb.append(SqlToQueryType.map(typeName).getTypeFamily());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODExMA=="}, "originalCommit": {"oid": "2bbf272b9f1dd081c3e1a5487192a023bbaa1a41"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 330, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}