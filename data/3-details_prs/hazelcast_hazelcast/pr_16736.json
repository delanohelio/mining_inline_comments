{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjUyOTEw", "number": 16736, "title": "Disable COR on certain IMap operations", "bodyText": "This PR is introducing a marker interface as a \"hint\" when reading data that defensive copying can be avoided. Here disable copy on read for selected entities while read from IMap. This only covers the changes needed for a single use case and is not a general purpose fix.\nEE: hazelcast/hazelcast-enterprise#3559", "createdAt": "2020-03-10T16:57:37Z", "url": "https://github.com/hazelcast/hazelcast/pull/16736", "merged": true, "mergeCommit": {"oid": "1d14c38969815168b58f74f02c95aaef12d60670"}, "closed": true, "closedAt": "2020-03-20T13:37:24Z", "author": {"login": "vamehta-eng"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMVfJYAH2gAyMzg2MjUyOTEwOmZjODk4YTEwMWUwMWRlM2U1OTY1MDVkMDkyYjUwMTMxN2Y0MGZlNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPfxEcAFqTM3ODQ0NDI3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40", "author": {"user": {"login": "vamehta-eng", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/fc898a101e01de3e596505d092b501317f40fe40", "committedDate": "2020-03-10T16:55:12Z", "message": "Disable COR on certain IMap operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODM5OTM2", "url": "https://github.com/hazelcast/hazelcast/pull/16736#pullrequestreview-372839936", "createdAt": "2020-03-11T14:58:48Z", "commit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1ODo0OFrOF060cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToxODo0MFrOF07t5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMzk2OA==", "bodyText": "Needs javadoc. You can check out this PR for inspiration - #11479", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391033968", "createdAt": "2020-03-11T14:58:48Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/Immutable.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.hazelcast.map;\n+\n+public interface Immutable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNjY1OQ==", "bodyText": "Why do you need to cast here?", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391036659", "createdAt": "2020-03-11T15:02:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/StorageImpl.java", "diffHunk": "@@ -170,11 +170,14 @@ public MapKeysWithCursor fetchKeys(int tableIndex, int size) {\n     public MapEntriesWithCursor fetchEntries(int tableIndex, int size, SerializationService serializationService) {\n         List<Map.Entry<Data, R>> entries = new ArrayList<Map.Entry<Data, R>>(size);\n         int newTableIndex = records.fetchEntries(tableIndex, size, entries);\n-        List<Map.Entry<Data, Data>> entriesData = new ArrayList<Map.Entry<Data, Data>>(entries.size());\n+        List<Map.Entry<Data, Object>> entriesData = new ArrayList<Map.Entry<Data, Object>>(entries.size());\n         for (Map.Entry<Data, R> entry : entries) {\n-            R record = entry.getValue();\n-            Data dataValue = serializationService.toData(record.getValue());\n-            entriesData.add(new AbstractMap.SimpleEntry<Data, Data>(entry.getKey(), dataValue));\n+            R record = (R)(Record)entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzM3OQ==", "bodyText": "No need to cast to Data. Also, add generics to remove the type warning - new AbstractMap.SimpleEntry<Data, Object>.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391037379", "createdAt": "2020-03-11T15:03:17Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/StorageImpl.java", "diffHunk": "@@ -170,11 +170,14 @@ public MapKeysWithCursor fetchKeys(int tableIndex, int size) {\n     public MapEntriesWithCursor fetchEntries(int tableIndex, int size, SerializationService serializationService) {\n         List<Map.Entry<Data, R>> entries = new ArrayList<Map.Entry<Data, R>>(size);\n         int newTableIndex = records.fetchEntries(tableIndex, size, entries);\n-        List<Map.Entry<Data, Data>> entriesData = new ArrayList<Map.Entry<Data, Data>>(entries.size());\n+        List<Map.Entry<Data, Object>> entriesData = new ArrayList<Map.Entry<Data, Object>>(entries.size());\n         for (Map.Entry<Data, R> entry : entries) {\n-            R record = entry.getValue();\n-            Data dataValue = serializationService.toData(record.getValue());\n-            entriesData.add(new AbstractMap.SimpleEntry<Data, Data>(entry.getKey(), dataValue));\n+            R record = (R)(Record)entry.getValue();\n+            Object value = record.getValue();\n+            Object dataValue = (value instanceof com.hazelcast.map.Immutable) ?\n+                    value :\n+                    serializationService.toData(value);\n+            entriesData.add(new AbstractMap.SimpleEntry((Data)entry.getKey(), dataValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzc0OA==", "bodyText": "You can import this to avoid the fully-qualified class name. You can also change the variable name since this is no longer dataValue.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391037748", "createdAt": "2020-03-11T15:03:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/StorageImpl.java", "diffHunk": "@@ -170,11 +170,14 @@ public MapKeysWithCursor fetchKeys(int tableIndex, int size) {\n     public MapEntriesWithCursor fetchEntries(int tableIndex, int size, SerializationService serializationService) {\n         List<Map.Entry<Data, R>> entries = new ArrayList<Map.Entry<Data, R>>(size);\n         int newTableIndex = records.fetchEntries(tableIndex, size, entries);\n-        List<Map.Entry<Data, Data>> entriesData = new ArrayList<Map.Entry<Data, Data>>(entries.size());\n+        List<Map.Entry<Data, Object>> entriesData = new ArrayList<Map.Entry<Data, Object>>(entries.size());\n         for (Map.Entry<Data, R> entry : entries) {\n-            R record = entry.getValue();\n-            Data dataValue = serializationService.toData(record.getValue());\n-            entriesData.add(new AbstractMap.SimpleEntry<Data, Data>(entry.getKey(), dataValue));\n+            R record = (R)(Record)entry.getValue();\n+            Object value = record.getValue();\n+            Object dataValue = (value instanceof com.hazelcast.map.Immutable) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MjYxMQ==", "bodyText": "No need to cast here.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391042611", "createdAt": "2020-03-11T15:10:25Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/iterator/MapEntriesWithCursor.java", "diffHunk": "@@ -33,26 +33,31 @@\n  *\n  * @see com.hazelcast.map.impl.proxy.MapProxyImpl#iterator\n  */\n-public class MapEntriesWithCursor extends AbstractCursor<Map.Entry<Data, Data>> {\n+public class MapEntriesWithCursor extends AbstractCursor<Map.Entry<Data, Object>> {\n \n     public MapEntriesWithCursor() {\n     }\n \n-    public MapEntriesWithCursor(List<Map.Entry<Data, Data>> entries, int nextTableIndexToReadFrom) {\n+    public MapEntriesWithCursor(List<Map.Entry<Data, Object>> entries, int nextTableIndexToReadFrom) {\n         super(entries, nextTableIndexToReadFrom);\n     }\n \n     @Override\n-    void writeElement(ObjectDataOutput out, Entry<Data, Data> entry) throws IOException {\n-        out.writeData(entry.getKey());\n-        out.writeData(entry.getValue());\n+    void writeElement(ObjectDataOutput out, Entry<Data, Object> entry) throws IOException {\n+        out.writeData((Data)entry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0Mzc5NA==", "bodyText": "You can replace the full class name with an import.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391043794", "createdAt": "2020-03-11T15:12:02Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/GetOperation.java", "diffHunk": "@@ -25,20 +25,20 @@\n \n public final class GetOperation extends ReadonlyKeyBasedMapOperation implements BlockingOperation {\n \n-    private Data result;\n+    private Object result;\n \n     public GetOperation() {\n     }\n \n     public GetOperation(String name, Data dataKey) {\n         super(name, dataKey);\n-\n         this.dataKey = dataKey;\n     }\n \n     @Override\n     public void run() {\n-        result = mapServiceContext.toData(recordStore.get(dataKey, false, getCallerAddress()));\n+        Object value = this.recordStore.get(this.dataKey, false, getCallerAddress());\n+        this.result = (value instanceof com.hazelcast.map.Immutable) ? value : this.mapServiceContext.toData(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0NDIyNg==", "bodyText": "No need for this. prefixes here and in line below.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391044226", "createdAt": "2020-03-11T15:12:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/GetOperation.java", "diffHunk": "@@ -25,20 +25,20 @@\n \n public final class GetOperation extends ReadonlyKeyBasedMapOperation implements BlockingOperation {\n \n-    private Data result;\n+    private Object result;\n \n     public GetOperation() {\n     }\n \n     public GetOperation(String name, Data dataKey) {\n         super(name, dataKey);\n-\n         this.dataKey = dataKey;\n     }\n \n     @Override\n     public void run() {\n-        result = mapServiceContext.toData(recordStore.get(dataKey, false, getCallerAddress()));\n+        Object value = this.recordStore.get(this.dataKey, false, getCallerAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0ODY3OA==", "bodyText": "I believe this will create a class cast exception when being used from the client. We're going to have to release this changed - https://github.com/hazelcast/hazelcast-client-protocol/blob/1.8.z/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/template/ResponseTemplate.java#L219-L225.\ncc @asimarslan @sancar", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r391048678", "createdAt": "2020-03-11T15:18:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapFetchEntriesMessageTask.java", "diffHunk": "@@ -53,7 +54,7 @@ protected ClientMessage encodeResponse(Object response) {\n         }\n         MapEntriesWithCursor mapEntriesWithCursor = (MapEntriesWithCursor) response;\n         return MapFetchEntriesCodec.encodeResponse(mapEntriesWithCursor.getNextTableIndexToReadFrom(),\n-                mapEntriesWithCursor.getBatch());\n+                                                   (List<Map.Entry<Data, Data>>)(Object)mapEntriesWithCursor.getBatch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc898a101e01de3e596505d092b501317f40fe40"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b89b8a93367020c8e819de4c299b8fb3d80195be", "author": {"user": {"login": "vamehta-eng", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/b89b8a93367020c8e819de4c299b8fb3d80195be", "committedDate": "2020-03-12T18:40:34Z", "message": "Addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTAzOTA0", "url": "https://github.com/hazelcast/hazelcast/pull/16736#pullrequestreview-374103904", "createdAt": "2020-03-13T07:55:50Z", "commit": {"oid": "b89b8a93367020c8e819de4c299b8fb3d80195be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzo1NTo1MVrOF16aJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzo1NTo1MVrOF16aJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA3NTgxMw==", "bodyText": "Can you remove mentioning of Adobe and simply say that it is a hint that this object is effectively immutable and can be shared safely between threads?", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r392075813", "createdAt": "2020-03-13T07:55:51Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/Immutable.java", "diffHunk": "@@ -1,4 +1,23 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.hazelcast.map;\n \n+/**\n+ * This is just a marker interface for Adobe Entities so that we can disable Copy on Read for this type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89b8a93367020c8e819de4c299b8fb3d80195be"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d6764880d1f301cb06243b3f00888ba7692478", "author": {"user": {"login": "vamehta-eng", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/a4d6764880d1f301cb06243b3f00888ba7692478", "committedDate": "2020-03-13T18:13:32Z", "message": "Fixing serialization problem as per comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c46c164c5136e02d4552147e66d8892d373b8c4", "author": {"user": {"login": "vamehta-eng", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/6c46c164c5136e02d4552147e66d8892d373b8c4", "committedDate": "2020-03-17T18:50:06Z", "message": "Removing dimond operator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjAzOTIz", "url": "https://github.com/hazelcast/hazelcast/pull/16736#pullrequestreview-376603923", "createdAt": "2020-03-18T07:00:26Z", "commit": {"oid": "6c46c164c5136e02d4552147e66d8892d373b8c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01b8f46cc873b511967c1ca5b54e19011d3991e", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d01b8f46cc873b511967c1ca5b54e19011d3991e", "committedDate": "2020-03-20T11:22:15Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da93576e5dd677a2e52c1888602fe84991d38a8", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9da93576e5dd677a2e52c1888602fe84991d38a8", "committedDate": "2020-03-20T11:26:42Z", "message": "Minor updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c75491cb4eea0990ff73afd1d72a8222382499", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d1c75491cb4eea0990ff73afd1d72a8222382499", "committedDate": "2020-03-20T12:00:08Z", "message": "Fix compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDM0NTQ5", "url": "https://github.com/hazelcast/hazelcast/pull/16736#pullrequestreview-378434549", "createdAt": "2020-03-20T12:19:44Z", "commit": {"oid": "d1c75491cb4eea0990ff73afd1d72a8222382499"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoxOTo0NFrOF5ReZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoxOTo0NFrOF5ReZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5OTQ2MA==", "bodyText": "Having immutable only makes sense if your application accesses it over its local embedded node, otherwise serialization will happen if you reach data over client or over remote nodes to the application. Is this what you want? Or maybe you can consider using near cache for this case, it will be much faster.", "url": "https://github.com/hazelcast/hazelcast/pull/16736#discussion_r395599460", "createdAt": "2020-03-20T12:19:44Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/GetOperation.java", "diffHunk": "@@ -38,7 +39,10 @@ public GetOperation(String name, Data dataKey) {\n \n     @Override\n     public void run() {\n-        result = mapServiceContext.toData(recordStore.get(dataKey, false, getCallerAddress()));\n+        Object currentValue = recordStore.get(dataKey, false, getCallerAddress());\n+        result = (currentValue instanceof Immutable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c75491cb4eea0990ff73afd1d72a8222382499"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d98eb258b209a7c1d581bda6b5bba1e188287c0", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5d98eb258b209a7c1d581bda6b5bba1e188287c0", "committedDate": "2020-03-20T12:30:52Z", "message": "Fix serialization of iteration batches"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDQ0Mjc0", "url": "https://github.com/hazelcast/hazelcast/pull/16736#pullrequestreview-378444274", "createdAt": "2020-03-20T12:35:36Z", "commit": {"oid": "d1c75491cb4eea0990ff73afd1d72a8222382499"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}