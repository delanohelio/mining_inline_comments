{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjU1MTc3", "number": 17013, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo1MzozNFrOEA2IYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1NTowOFrOEXl6hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzIyMzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo1MzozNFrOGcYEGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowODoxOVrOGvOODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNzU3Ng==", "bodyText": "This smells like a design problem. The class is lock free and now get some locks.", "url": "https://github.com/hazelcast/hazelcast/pull/17013#discussion_r432407576", "createdAt": "2020-05-29T10:53:34Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "diffHunk": "@@ -33,37 +33,38 @@\n  */\n public class DefaultCyclicBuffer<E extends Sequenced> implements CyclicBuffer<E> {\n \n-    private static final long UNAVAILABLE = -1L;\n+    private static final long UNSET = -1L;\n \n     private int capacity;\n     private E[] buffer;\n     private AtomicLong headSequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed54cb9c8bf5d4be892ab9d368ed424b9c67243"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTIzMA==", "bodyText": "put a new assertion to have much info about failure and removed locks", "url": "https://github.com/hazelcast/hazelcast/pull/17013#discussion_r452169230", "createdAt": "2020-07-09T12:08:19Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "diffHunk": "@@ -33,37 +33,38 @@\n  */\n public class DefaultCyclicBuffer<E extends Sequenced> implements CyclicBuffer<E> {\n \n-    private static final long UNAVAILABLE = -1L;\n+    private static final long UNSET = -1L;\n \n     private int capacity;\n     private E[] buffer;\n     private AtomicLong headSequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNzU3Ng=="}, "originalCommit": {"oid": "6ed54cb9c8bf5d4be892ab9d368ed424b9c67243"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODIwMzExOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTozMjowMFrOGsI4eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowOToyNVrOGvOQSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNjA1Nw==", "bodyText": "Can you explain from which threads this buffer is accessed, how and when? Why the need for such coarse synchronization?", "url": "https://github.com/hazelcast/hazelcast/pull/17013#discussion_r448936057", "createdAt": "2020-07-02T11:32:00Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "diffHunk": "@@ -33,37 +33,38 @@\n  */\n public class DefaultCyclicBuffer<E extends Sequenced> implements CyclicBuffer<E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91d172e90cd7bd96eda95c3022e3169931eb510"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTgwMg==", "bodyText": "put a new assertion to have much info about failure and removed synchronization. This class is accessed by partition threads.", "url": "https://github.com/hazelcast/hazelcast/pull/17013#discussion_r452169802", "createdAt": "2020-07-09T12:09:25Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "diffHunk": "@@ -33,37 +33,38 @@\n  */\n public class DefaultCyclicBuffer<E extends Sequenced> implements CyclicBuffer<E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNjA1Nw=="}, "originalCommit": {"oid": "b91d172e90cd7bd96eda95c3022e3169931eb510"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTczODkzOnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1NTowOFrOG_d3Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1NTowOFrOG_d3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMjY5MA==", "bodyText": "How was it even possible in the previous code that the available was higher than the capacity?", "url": "https://github.com/hazelcast/hazelcast/pull/17013#discussion_r469202690", "createdAt": "2020-08-12T11:55:08Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/querycache/accumulator/DefaultCyclicBuffer.java", "diffHunk": "@@ -137,16 +138,11 @@ public int size() {\n         long head = headSequence.get();\n         long tail = tailSequence.get();\n \n-        if (tail == UNAVAILABLE) {\n+        if (tail == UNSET) {\n             return 0;\n         }\n \n-        int avail = (int) (tail - head + 1);\n-        if (avail <= capacity) {\n-            return avail;\n-        } else {\n-            return capacity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e082bdfc7643478305b3a2108050b4eb7ea722ff"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 546, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}