{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTA2OTk0", "number": 16991, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDowOVrOD9Umvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozNjoyN1rOEA0uHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3MzI3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ExtendedMapEntry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDowOVrOGWvwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDowOVrOGWvwvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDM4Mg==", "bodyText": "can we move ExtendedMapEntry to com.hazelcast.map package?", "url": "https://github.com/hazelcast/hazelcast/pull/16991#discussion_r426504382", "createdAt": "2020-05-18T09:50:09Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ExtendedMapEntry.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Interface to provide parity with IMap set and put operations. For use in EntryProcessors.\n+ *\n+ * @see com.hazelcast.map.IMap#set(Object, Object, long, TimeUnit)\n+ * @see com.hazelcast.map.IMap#put(Object, Object, long, TimeUnit)\n+ */\n+public interface ExtendedMapEntry<V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7655b4526260194336881a9d29eaf1130e032abf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjk5MjMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozNjoyN1rOGcVybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowMjowOFrOGeIwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDI4NA==", "bodyText": "i think we also need to set ttl for backup-entry-processing case. Please addd another test for this case.", "url": "https://github.com/hazelcast/hazelcast/pull/16991#discussion_r432370284", "createdAt": "2020-05-29T09:36:27Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperator.java", "diffHunk": "@@ -257,7 +257,7 @@ private void onAddedOrUpdated() {\n         if (backup) {\n             recordStore.putBackup(dataKey, newValue, NOT_WAN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb136adb5187538cf49b6cacd0abae3ae7cf8e0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3Mjk3MA==", "bodyText": "Hi @ahmetmircik, I'm not sure how I get access to a backup EntryView or equivalent in order to test (and fix) this.", "url": "https://github.com/hazelcast/hazelcast/pull/16991#discussion_r433572970", "createdAt": "2020-06-02T01:30:32Z", "author": {"login": "keteracel"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperator.java", "diffHunk": "@@ -257,7 +257,7 @@ private void onAddedOrUpdated() {\n         if (backup) {\n             recordStore.putBackup(dataKey, newValue, NOT_WAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDI4NA=="}, "originalCommit": {"oid": "3eb136adb5187538cf49b6cacd0abae3ae7cf8e0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5MDk3Mw==", "bodyText": "Hi, as in this test, eventually, total entry count(owned + backup) should be zero. You can copy that test and can change put with entry-processor equivalent.", "url": "https://github.com/hazelcast/hazelcast/pull/16991#discussion_r433990973", "createdAt": "2020-06-02T15:58:21Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperator.java", "diffHunk": "@@ -257,7 +257,7 @@ private void onAddedOrUpdated() {\n         if (backup) {\n             recordStore.putBackup(dataKey, newValue, NOT_WAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDI4NA=="}, "originalCommit": {"oid": "3eb136adb5187538cf49b6cacd0abae3ae7cf8e0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Mzg1Nw==", "bodyText": "Thanks @ahmetmircik. I did add a test that digs into the RecordStore to verify the record has the correct TTL. The test fails if I revert my change to apply backup TTLs. Let me know if that test is good or if you'd like the eventually style test. Personally I feel the test I wrote is more accurately testing the TTL is set correctly on the Record and should run a little quicker. But am open to feedback on what you'd rather see.", "url": "https://github.com/hazelcast/hazelcast/pull/16991#discussion_r434253857", "createdAt": "2020-06-03T01:02:08Z", "author": {"login": "keteracel"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperator.java", "diffHunk": "@@ -257,7 +257,7 @@ private void onAddedOrUpdated() {\n         if (backup) {\n             recordStore.putBackup(dataKey, newValue, NOT_WAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDI4NA=="}, "originalCommit": {"oid": "3eb136adb5187538cf49b6cacd0abae3ae7cf8e0"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 528, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}