{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjU3MDk1", "number": 16610, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoxNToyOFrODeANSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoxNToyOFrODeANSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg3MjczOnYy", "diffSide": "RIGHT", "path": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientUserCodeDeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoxNToyOFrOFm7Qlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0MTozN1rOFm71qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2MTExMA==", "bodyText": "would this also do the same?\n        Collections.sort(classes, (c1, c2) -> c1.equals(c2) ? 0 : c1.isAssignableFrom(c2) ? -1 : 1);", "url": "https://github.com/hazelcast/hazelcast/pull/16610#discussion_r376361110", "createdAt": "2020-02-07T12:15:28Z", "author": {"login": "ihsandemir"}, "path": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientUserCodeDeploymentService.java", "diffHunk": "@@ -66,8 +67,37 @@ public void start() throws IOException, ClassNotFoundException {\n         loadClasses();\n     }\n \n+    public static List<Class> sortByInheritance(List<Class<?>> classList) {\n+        List<Class> sortedList = new LinkedList<Class>();\n+        for (Class aClass : classList) {\n+            boolean isInserted = false;\n+\n+            int index = 0;\n+            for (Class sortedClass : sortedList) {\n+                if (aClass.isAssignableFrom(sortedClass)) {\n+                    sortedList.add(index, aClass);\n+                    isInserted = true;\n+                    break;\n+                }\n+                index++;\n+            }\n+            if (!isInserted) {\n+                sortedList.add(aClass);\n+            }\n+        }\n+        return sortedList;\n+    }\n+\n+\n     private void loadClasses() throws ClassNotFoundException {\n-        for (String className : clientUserCodeDeploymentConfig.getClassNames()) {\n+        List<String> classNames = clientUserCodeDeploymentConfig.getClassNames();\n+        List<Class<?>> classes = new ArrayList<Class<?>>(classNames.size());\n+        for (String className : classNames) {\n+            classes.add(configClassLoader.loadClass(className));\n+        }\n+        List<Class> sortedClasses = sortByInheritance(classes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb371fccca47695c1f83cc44bcc37ee3039f9547"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MDYwMw==", "bodyText": "It is not a correct comparator implementation, because it does not give a total order. See this question and answer\nhttps://stackoverflow.com/questions/50921813/how-to-sort-classes-according-to-their-inheritance-level#comment88888102_50922334", "url": "https://github.com/hazelcast/hazelcast/pull/16610#discussion_r376370603", "createdAt": "2020-02-07T12:41:37Z", "author": {"login": "sancar"}, "path": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientUserCodeDeploymentService.java", "diffHunk": "@@ -66,8 +67,37 @@ public void start() throws IOException, ClassNotFoundException {\n         loadClasses();\n     }\n \n+    public static List<Class> sortByInheritance(List<Class<?>> classList) {\n+        List<Class> sortedList = new LinkedList<Class>();\n+        for (Class aClass : classList) {\n+            boolean isInserted = false;\n+\n+            int index = 0;\n+            for (Class sortedClass : sortedList) {\n+                if (aClass.isAssignableFrom(sortedClass)) {\n+                    sortedList.add(index, aClass);\n+                    isInserted = true;\n+                    break;\n+                }\n+                index++;\n+            }\n+            if (!isInserted) {\n+                sortedList.add(aClass);\n+            }\n+        }\n+        return sortedList;\n+    }\n+\n+\n     private void loadClasses() throws ClassNotFoundException {\n-        for (String className : clientUserCodeDeploymentConfig.getClassNames()) {\n+        List<String> classNames = clientUserCodeDeploymentConfig.getClassNames();\n+        List<Class<?>> classes = new ArrayList<Class<?>>(classNames.size());\n+        for (String className : classNames) {\n+            classes.add(configClassLoader.loadClass(className));\n+        }\n+        List<Class> sortedClasses = sortByInheritance(classes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2MTExMA=="}, "originalCommit": {"oid": "cb371fccca47695c1f83cc44bcc37ee3039f9547"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 800, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}