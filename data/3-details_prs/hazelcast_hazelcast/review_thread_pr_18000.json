{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDA5MTI2", "number": 18000, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo0Mjo0MVrOFI2zAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMzo1MlrOFI3BcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMwNzIzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo0Mjo0MVrOILAuBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwOToyMDowOFrOILDfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA==", "bodyText": "Should be javax.annotation.Nonnull", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548417028", "createdAt": "2020-12-24T06:42:41Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -16,17 +16,20 @@\n \n package com.hazelcast.internal.serialization.impl.portable;\n \n+import com.hazelcast.internal.serialization.impl.AbstractGenericRecord;\n import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.nio.serialization.FieldDefinition;\n import com.hazelcast.nio.serialization.FieldType;\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ1OTIwNQ==", "bodyText": "I wonder if is there a way to tell IDE not to set this by default", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548459205", "createdAt": "2020-12-24T09:10:09Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -16,17 +16,20 @@\n \n package com.hazelcast.internal.serialization.impl.portable;\n \n+import com.hazelcast.internal.serialization.impl.AbstractGenericRecord;\n import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.nio.serialization.FieldDefinition;\n import com.hazelcast.nio.serialization.FieldType;\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ2MjUyNQ==", "bodyText": "It would be even nicer to have a linter rule to fail code style validation if org.jetbrains.annotations.NotNull is in use. It seems to be a common pitfall.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548462525", "createdAt": "2020-12-24T09:20:08Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -16,17 +16,20 @@\n \n package com.hazelcast.internal.serialization.impl.portable;\n \n+import com.hazelcast.internal.serialization.impl.AbstractGenericRecord;\n import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.nio.serialization.FieldDefinition;\n import com.hazelcast.nio.serialization.FieldType;\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMxOTM2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo0OToyNFrOILA0pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo0OToyNFrOILA0pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxODcyNA==", "bodyText": "Should probably use Objects#hashCode, as Objects#hash is nothing more than Arrays#hashCode called on varargs array.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548418724", "createdAt": "2020-12-24T06:49:24Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMyMTkyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo1MDo0NlrOILA2CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo1MDo0NlrOILA2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTA4MA==", "bodyText": "nit: could be renamed to fieldNames", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419080", "createdAt": "2020-12-24T06:50:46Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());\n+        Set<String> thisFieldNames = getFieldNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMyMzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo1MTo0NVrOILA26g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNjoxMDo0NlrOILLGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg==", "bodyText": "This method looks like something specific to Portables. How it will work for, say, the new serialization format?", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419306", "createdAt": "2020-12-24T06:51:45Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0NTA1Mg==", "bodyText": "Yes, it will work for the new serialization format as well. That is why the return type is Object and not ClassDefinition", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548445052", "createdAt": "2020-12-24T08:25:28Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ1MjQ0MA==", "bodyText": "Is it going to return the schema itself or schema id?", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548452440", "createdAt": "2020-12-24T08:48:59Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjQwNA==", "bodyText": "It will return the schema itself", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548556404", "createdAt": "2020-12-24T15:16:17Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU4NzA3OQ==", "bodyText": "Makes sense. It might be a good idea to document the contract for this method.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548587079", "createdAt": "2020-12-24T16:10:46Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMzNzA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo1OToyN1rOILA-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo1OToyN1rOILA-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashcode implementation\n          \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashCode implementations.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421261", "createdAt": "2020-12-24T06:59:27Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMzODE0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableInternalGenericRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMDoxOFrOILA_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMDoxOFrOILA_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTQzOA==", "bodyText": "Should be javax.annotation.Nonnull", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421438", "createdAt": "2020-12-24T07:00:18Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableInternalGenericRecord.java", "diffHunk": "@@ -26,9 +27,11 @@\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import com.hazelcast.nio.serialization.Portable;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODM0NDE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/AbstractGenericRecordTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMzo1MlrOILBCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMzo1MlrOILBCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMjI4Mw==", "bodyText": "nit: looks like a leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548422283", "createdAt": "2020-12-24T07:03:52Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/AbstractGenericRecordTest.java", "diffHunk": "@@ -134,6 +134,8 @@ public void testPutWithoutFactory_readAsPortable() throws IOException {\n         IMap<Object, Object> clusterMap = instances[0].getMap(\"test\");\n         clusterMap.put(1, expected);\n \n+        System.out.println(expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 40, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}