{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODg4NzYz", "number": 17100, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzowNlrOEGZBBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzowNlrOEGZBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTM2NzcyOnYy", "diffSide": "LEFT", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/spi/impl/ClientInvocationFutureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzowNlrOGlKFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzowNlrOGlKFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNTc0MA==", "bodyText": "Completing the invocationFuture is both unnecessary (because it is sufficient for one CompletableFuture to be completed for *Either methods to be executed) and using a value other than null may result in (t) -> t function to return that value as there is no guarantee which CompletableFuture's completion value will be passed in the Function.", "url": "https://github.com/hazelcast/hazelcast/pull/17100#discussion_r441615740", "createdAt": "2020-06-17T15:03:06Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/spi/impl/ClientInvocationFutureTest.java", "diffHunk": "@@ -278,29 +277,25 @@ public void test_handle() throws Exception {\n     public void test_acceptEither() throws Exception {\n         CompletableFuture nextStage = invocationFuture.acceptEither(newCompletedFuture(null),\n                 t -> ignore(null));\n-        invocationFuture.complete(response);\n \n         assertEquals(null, nextStage.get(10, TimeUnit.SECONDS));\n         verify(callIdSequence).forceNext();\n-        verify(callIdSequence, times(2)).complete();\n+        verify(callIdSequence, times(1)).complete();\n     }\n \n     @Test\n     public void test_applyEither() throws Exception {\n-        CompletableFuture nextStage = invocationFuture.applyToEither(newCompletedFuture(null),\n-                (t) -> t);\n-        invocationFuture.complete(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33e724f36d1017cb363f51e48efa8ff5bf867ae8"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 596, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}