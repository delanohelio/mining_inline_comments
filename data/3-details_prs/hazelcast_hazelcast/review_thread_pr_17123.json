{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MzkzMTY3", "number": 17123, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1Mjo0MFrOEIQd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MTo0OVrOEWQ1CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkzODQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1Mjo0MFrOGoG81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1Nzo1MFrOGoHI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDEwMg==", "bodyText": "What is the added value of a Boolean compared to boolean?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444710102", "createdAt": "2020-06-24T07:52:40Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzE2OA==", "bodyText": "It avoids boxing in the addParameter call.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444713168", "createdAt": "2020-06-24T07:57:50Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDEwMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk1MjYyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpCommandProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjoyOFrOGoHFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxMzozOFrOGqw_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjM0NQ==", "bodyText": "Why a Boolean?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444712345", "createdAt": "2020-06-24T07:56:28Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpCommandProcessor.java", "diffHunk": "@@ -213,12 +214,22 @@ private boolean authenticate(@Nonnull HttpPostCommand command,\n         }\n         String decodedPass = pass != null ? URLDecoder.decode(pass, \"UTF-8\") : null;\n         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(decodedName, decodedPass);\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzg4OA==", "bodyText": "It avoids boxing in the addParameter call.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444713888", "createdAt": "2020-06-24T07:59:08Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpCommandProcessor.java", "diffHunk": "@@ -213,12 +214,22 @@ private boolean authenticate(@Nonnull HttpPostCommand command,\n         }\n         String decodedPass = pass != null ? URLDecoder.decode(pass, \"UTF-8\") : null;\n         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(decodedName, decodedPass);\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjM0NQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5NjE1NA==", "bodyText": "Afaik no new object is made if you have a boolean that is being boxed. So I don't think there is any difference from a performance perspective. Anyhow. It isn't very important.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r447496154", "createdAt": "2020-06-30T08:13:38Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpCommandProcessor.java", "diffHunk": "@@ -213,12 +214,22 @@ private boolean authenticate(@Nonnull HttpPostCommand command,\n         }\n         String decodedPass = pass != null ? URLDecoder.decode(pass, \"UTF-8\") : null;\n         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(decodedName, decodedPass);\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjM0NQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk1OTY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODoxNlrOGoHJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODoxNlrOGoHJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzQzMg==", "bodyText": "Would be nice to have the audit log dump its content in the Diagnostics.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444713432", "createdAt": "2020-06-24T07:58:16Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "diffHunk": "@@ -18,7 +18,69 @@\n \n public final class AuditlogTypeIds {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk2NDMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterJoinManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1OTo0MFrOGoHMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1OTo0MFrOGoHMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNDE4Ng==", "bodyText": "Boolean vs boolean", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444714186", "createdAt": "2020-06-24T07:59:40Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterJoinManager.java", "diffHunk": "@@ -373,14 +374,25 @@ private void secureLogin(JoinRequest joinRequest, Connection connection) {\n                 throw new SecurityException(\"Expecting security credentials, but credentials could not be found in join request\");\n             }\n             String endpoint = joinRequest.getAddress().getHost();\n+            Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk3MTUwOnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMTo0N1rOGoHROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMTo0N1rOGoHROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNTMyMA==", "bodyText": "Can't we enable it by default? And at least dump everything into diagnostics. Diagnostics should also be enabled by default but that is another discussion.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444715320", "createdAt": "2020-06-24T08:01:47Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUwNjg0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNDoyOFrOGt56fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNDoyOFrOGt56fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Nzk2NQ==", "bodyText": "Leftover SSLConfig, there is one more occurrence.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450787965", "createdAt": "2020-07-07T11:14:28Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUxMzU4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNjo0MFrOGt5-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1MDo1MFrOGv0cKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTA0NA==", "bodyText": "Can we move these into a public package? I guess these are part of public API now, given that we can't change the IDs after we've released them. Also, maybe we can refer to this file from the AuditlogService javadoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450789044", "createdAt": "2020-07-07T11:16:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "diffHunk": "@@ -18,7 +18,69 @@\n \n public final class AuditlogTypeIds {\n \n-    public static final String CONNECTION_ASKS_PROTOCOL = \"HZ-1001\";\n+    // Network Events\n+    /**\n+     * Event type ID: Connection accepted.\n+     */\n+    public static final String NETWORK_CONNECT = \"HZ-0101\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NTQzMg==", "bodyText": "Good point. I'll move the class and update the JavaDoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452795432", "createdAt": "2020-07-10T11:50:50Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "diffHunk": "@@ -18,7 +18,69 @@\n \n public final class AuditlogTypeIds {\n \n-    public static final String CONNECTION_ASKS_PROTOCOL = \"HZ-1001\";\n+    // Network Events\n+    /**\n+     * Event type ID: Connection accepted.\n+     */\n+    public static final String NETWORK_CONNECT = \"HZ-0101\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTA0NA=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUzMjIzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMjo0NVrOGt6KJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMjo0NVrOGt6KJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTk3NA==", "bodyText": "Not related to this class, but can you complete the javadoc for AuditlogService#eventBuilder?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450791974", "createdAt": "2020-07-07T11:22:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.auditlog;\n+\n+import java.util.Properties;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+\n+/**\n+ * Interface implemented by {@link AuditlogService} factory classes.\n+ */\n+public interface AuditlogServiceFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU0NDIyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNjozNlrOGt6RaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1Njo1OVrOGxU4VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMg==", "bodyText": "Unfortunately seems params are an easy way how to leak private API. User implementations can now get references to classes such as com.hazelcast.internal.nio.Connection. I don't see an easy way out of it but I'd prefer that we don't do it.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450793832", "createdAt": "2020-07-07T11:26:36Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMzEwNA==", "bodyText": "I wouldn't call it leaking private API. We don't do any promise about specific types. Params are just objects. If the consuming class doesn't recognize the type, it should just use Object.toString().\nBy using this way we avoid possibly expensive toString calls when it's not necessary.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452803104", "createdAt": "2020-07-10T12:09:11Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxOTAzNQ==", "bodyText": "Just wondering, if a user implements some service and uses the methods on the Connection but we move the Connection class or remove it's methods in a patch release - is that ok? Is it something that we can warn users about? Like - you can downcast to specific parameter classes but it's still private API?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452819035", "createdAt": "2020-07-10T12:43:46Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NTUwOA==", "bodyText": "The warning will be added to EventBuilder javadoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r454375508", "createdAt": "2020-07-14T13:56:59Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg1ODgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowM1rOGt9RJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowM1rOGt9RJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MjkxNw==", "bodyText": "Can you also add some @Nullable or @Nonnull annotations to the parameters for reference? I guess it's not easy to determine in some cases as it depends on the concrete config class implementation.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450842917", "createdAt": "2020-07-07T12:57:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg2NjMxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1ODo1NVrOGt9V3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozNzozOFrOGxUCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDEyNg==", "bodyText": "I'm also thinking if we can somehow document (for example in AuditlogTypeIds) what are the parameters for each type, any maybe use some static strings for reference.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450844126", "createdAt": "2020-07-07T12:58:55Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)\n+                .addParameter(\"credentials\", credentials)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0Njg0Mw==", "bodyText": "I would rather avoid such commitments at least in the first iteration. If we see a demand for parameter specifications we can think about how to define names and assigned types in the next versions.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452846843", "createdAt": "2020-07-10T13:34:49Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)\n+                .addParameter(\"credentials\", credentials)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDEyNg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTMyNw==", "bodyText": "Sounds good. But we need to be explicit about this in the documentation then - the parameters are not public API yet and don't have guarantees. You can use the event ID and message and that's it.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r453171327", "createdAt": "2020-07-11T08:20:01Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)\n+                .addParameter(\"credentials\", credentials)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDEyNg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MTY1Ng==", "bodyText": "I'll add a warning to EventBuilder class's JavaDoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r454361656", "createdAt": "2020-07-14T13:37:38Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)\n+                .addParameter(\"credentials\", credentials)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDEyNg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg3NDM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowMTowMVrOGt9a4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjoxNjoyOVrOGwMezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTQwOQ==", "bodyText": "Can you use com.hazelcast.internal.util.Preconditions#checkNotNull(T, java.lang.String) instead? It's commonly used in some other config files. It changes the thrown exception type though to NullPointerException.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450845409", "createdAt": "2020-07-07T13:01:01Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig\n+     * @throws IllegalArgumentException if properties is {@code null}\n+     */\n+    public T setProperties(Properties properties) {\n+        if (properties == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjAwNg==", "bodyText": "I guess I can't as the checkNotNull throws a NPE and setProperties throws the IAE.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452812006", "createdAt": "2020-07-10T12:29:12Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig\n+     * @throws IllegalArgumentException if properties is {@code null}\n+     */\n+    public T setProperties(Properties properties) {\n+        if (properties == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTQwOQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTg2OA==", "bodyText": "If this was the case already in 4.0 then yes, we can't change it. But if it's newly introduced config, I'd prefer checkNotNull as it's commonly used in public API.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r453171868", "createdAt": "2020-07-11T08:26:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig\n+     * @throws IllegalArgumentException if properties is {@code null}\n+     */\n+    public T setProperties(Properties properties) {\n+        if (properties == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTQwOQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4OTMyNQ==", "bodyText": "It's the old thingy from the SSLConfig - the AbstractFactoryWithPropertiesConfig is a new shared parent class to which some methods were moved from the SSLConfig.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r453189325", "createdAt": "2020-07-11T12:16:29Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig\n+     * @throws IllegalArgumentException if properties is {@code null}\n+     */\n+    public T setProperties(Properties properties) {\n+        if (properties == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTQwOQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTAyNTY2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultNodeExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozNToyNlrOGt-2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNDozNFrOGv1naA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODc5NA==", "bodyText": "I guess we might also throw InvalidConfigurationException but then it would be different from the behaviour above. WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450868794", "createdAt": "2020-07-07T13:35:26Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultNodeExtension.java", "diffHunk": "@@ -164,6 +165,12 @@ private void checkSecurityAllowed() {\n                 throw new IllegalStateException(\"Symmetric Encryption requires Hazelcast Enterprise Edition\");\n             }\n         }\n+        AuditlogConfig auditlogConfig = node.getConfig().getAuditlogConfig();\n+        if (auditlogConfig != null && auditlogConfig.isEnabled()) {\n+            if (!BuildInfoProvider.getBuildInfo().isEnterprise()) {\n+                throw new IllegalStateException(\"Auditlog requires Hazelcast Enterprise Edition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNDY5Ng==", "bodyText": "This can be changed, but I would rather keep the reported exception in sync with other EE features (HR, persistence, security features).", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452814696", "createdAt": "2020-07-10T12:34:34Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultNodeExtension.java", "diffHunk": "@@ -164,6 +165,12 @@ private void checkSecurityAllowed() {\n                 throw new IllegalStateException(\"Symmetric Encryption requires Hazelcast Enterprise Edition\");\n             }\n         }\n+        AuditlogConfig auditlogConfig = node.getConfig().getAuditlogConfig();\n+        if (auditlogConfig != null && auditlogConfig.isEnabled()) {\n+            if (!BuildInfoProvider.getBuildInfo().isEnterprise()) {\n+                throw new IllegalStateException(\"Auditlog requires Hazelcast Enterprise Edition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODc5NA=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA0MjcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozOToyMVrOGt_A2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Mjo1NVrOGv12zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTUxMg==", "bodyText": "This is in the internal package, maybe I misunderstood that the SPI was public? The service is in internal too.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450871512", "createdAt": "2020-07-07T13:39:21Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.auditlog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxODYzOA==", "bodyText": "Good point. Totally forgot about moving it into the wildness in 4.1. :) It was intentionally internal in 4.0 but it should be public now so I'll move the package out of the *.internal", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452818638", "createdAt": "2020-07-10T12:42:55Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.auditlog;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTUxMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA1MTI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0MToyM1rOGt_GPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxNTo0MlrOGxVsFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3Mjg5Mg==", "bodyText": "Do we want to log which member joined?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450872892", "createdAt": "2020-07-07T13:41:23Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "diffHunk": "@@ -400,7 +401,11 @@ public boolean finalizeJoin(MembersView membersView, Address callerAddress, UUID\n             membershipManager.updateMembers(membersView);\n             clusterHeartbeatManager.heartbeat();\n             setJoined(true);\n-\n+            node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.CLUSTER_MEMBER_ADDED)\n+                .message(\"Member joined\")\n+                .addParameter(\"membersView\", membersView)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4ODc1Ng==", "bodyText": "\ud83d\udc4d I'll add it as new parameter: address", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r454388756", "createdAt": "2020-07-14T14:15:42Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "diffHunk": "@@ -400,7 +401,11 @@ public boolean finalizeJoin(MembersView membersView, Address callerAddress, UUID\n             membershipManager.updateMembers(membersView);\n             clusterHeartbeatManager.heartbeat();\n             setJoined(true);\n-\n+            node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.CLUSTER_MEMBER_ADDED)\n+                .message(\"Member joined\")\n+                .addParameter(\"membersView\", membersView)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3Mjg5Mg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA1MzUyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0MTo1NFrOGt_HoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0MTo1NFrOGt_HoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MzI0OQ==", "bodyText": "Do we want to log which member?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450873249", "createdAt": "2020-07-07T13:41:54Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "diffHunk": "@@ -990,7 +998,12 @@ public void promoteLocalLiteMember() {\n             }\n \n             MemberImpl localMemberInMemberList = membershipManager.getMember(member.getAddress());\n-            if (localMemberInMemberList.isLiteMember()) {\n+            boolean result = localMemberInMemberList.isLiteMember();\n+            node.getNodeExtension().getAuditlogService().eventBuilder(AuditlogTypeIds.CLUSTER_PROMOTE_MEMBER)\n+                .message(\"Promotion of the lite member\")\n+                .addParameter(\"success\", result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA1OTA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0MzoxMlrOGt_LJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODoyMjowNFrOGwLZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDE0OA==", "bodyText": "Do you want to log if it was added or removed?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450874148", "createdAt": "2020-07-07T13:43:12Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -789,6 +803,11 @@ private void sortMembersInMembershipOrder(List<Member> members) {\n \n     private void sendMembershipEventNotifications(MemberImpl member, Set<Member> members, final boolean added) {\n         int eventType = added ? MembershipEvent.MEMBER_ADDED : MembershipEvent.MEMBER_REMOVED;\n+        node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(added ? AuditlogTypeIds.CLUSTER_MEMBER_ADDED : AuditlogTypeIds.CLUSTER_MEMBER_REMOVED)\n+                .message(\"Membership changed\")\n+                .addParameter(\"memberAddress\", member.getAddress())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODc0OA==", "bodyText": "Do you mean to have it in the message too? Currently, the add and remove types are differentiated in typeId().", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452828748", "createdAt": "2020-07-10T13:02:35Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -789,6 +803,11 @@ private void sortMembersInMembershipOrder(List<Member> members) {\n \n     private void sendMembershipEventNotifications(MemberImpl member, Set<Member> members, final boolean added) {\n         int eventType = added ? MembershipEvent.MEMBER_ADDED : MembershipEvent.MEMBER_REMOVED;\n+        node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(added ? AuditlogTypeIds.CLUSTER_MEMBER_ADDED : AuditlogTypeIds.CLUSTER_MEMBER_REMOVED)\n+                .message(\"Membership changed\")\n+                .addParameter(\"memberAddress\", member.getAddress())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDE0OA=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTUyMA==", "bodyText": "Ah, right, missed that, thanks.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r453171520", "createdAt": "2020-07-11T08:22:04Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -789,6 +803,11 @@ private void sortMembersInMembershipOrder(List<Member> members) {\n \n     private void sendMembershipEventNotifications(MemberImpl member, Set<Member> members, final boolean added) {\n         int eventType = added ? MembershipEvent.MEMBER_ADDED : MembershipEvent.MEMBER_REMOVED;\n+        node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(added ? AuditlogTypeIds.CLUSTER_MEMBER_ADDED : AuditlogTypeIds.CLUSTER_MEMBER_REMOVED)\n+                .message(\"Membership changed\")\n+                .addParameter(\"memberAddress\", member.getAddress())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDE0OA=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA2MDg5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0Mzo0M1rOGt_MYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0Mzo0M1rOGt_MYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDQ2Nw==", "bodyText": "Minor - typo: fillFactoryWithPropertiesCofnig -> fillFactoryWithPropertiesConfig", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450874467", "createdAt": "2020-07-07T13:43:43Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "diffHunk": "@@ -226,21 +227,24 @@ protected ClassFilter parseClassFilterList(Node node) {\n     }\n \n     protected SSLConfig parseSslConfig(Node node) {\n-        SSLConfig sslConfig = new SSLConfig();\n+        return fillFactoryWithPropertiesCofnig(node, new SSLConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA2NzM5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerAcceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0NToxNFrOGt_Qgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMDowNVrOGv3aXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NTUyMg==", "bodyText": "I guess we should make clear in the documentation that these invocations are done in performance sensitive places so the logger appender should not do anything too heavy.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450875522", "createdAt": "2020-07-07T13:45:14Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerAcceptor.java", "diffHunk": "@@ -288,7 +289,12 @@ private void newConnection(final EndpointQualifier qualifier, SocketChannel sock\n             if (logger.isFineEnabled()) {\n                 logger.fine(\"Accepting socket connection from \" + channel.socket().getRemoteSocketAddress());\n             }\n-\n+            serverContext.getAuditLogService()\n+                .eventBuilder(AuditlogTypeIds.NETWORK_CONNECT)\n+                .message(\"New connection accepted.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NDEyNA==", "bodyText": "I'll add a note to the AuditloService javadoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452844124", "createdAt": "2020-07-10T13:30:05Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerAcceptor.java", "diffHunk": "@@ -288,7 +289,12 @@ private void newConnection(final EndpointQualifier qualifier, SocketChannel sock\n             if (logger.isFineEnabled()) {\n                 logger.fine(\"Accepting socket connection from \" + channel.socket().getRemoteSocketAddress());\n             }\n-\n+            serverContext.getAuditLogService()\n+                .eventBuilder(AuditlogTypeIds.NETWORK_CONNECT)\n+                .message(\"New connection accepted.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NTUyMg=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA3MzU5OnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0NjozOVrOGt_UXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODoyMTozOFrOGwLZIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NjUwOQ==", "bodyText": "What if any users were already using this property to set it to true?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450876509", "createdAt": "2020-07-07T13:46:39Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzI2Mw==", "bodyText": "It's not a documented property. It was intended only for API testing.\nI would rather see it removed, but if you think it can cause troubles we can leave it unused and just mark it deprecated.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r452843263", "createdAt": "2020-07-10T13:28:39Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NjUwOQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQ5MQ==", "bodyText": "If it wasn't documented in the reference manual and if it was intended for testing, I think we can remove it.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r453171491", "createdAt": "2020-07-11T08:21:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NjUwOQ=="}, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc5ODQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MTo0OVrOG9er5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MTo0OVrOG9er5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExOTA3Nw==", "bodyText": "Shouldn't this be AuditlogTypeIds.CLUSTER_MEMBER_REMOVED?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r467119077", "createdAt": "2020-08-07T15:41:49Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -706,13 +714,19 @@ private void removeMember(MemberImpl member, String reason, boolean shouldCloseC\n             }\n \n             logger.info(\"Removing \" + member);\n-            clusterService.getClusterJoinManager().removeJoin(member.getAddress());\n+            clusterService.getClusterJoinManager().removeJoin(address);\n             clusterService.getClusterHeartbeatManager().removeMember(member);\n             partialDisconnectionHandler.removeMember(member);\n \n             MemberMap newMembers = MemberMap.cloneExcluding(currentMembers, member);\n             setMembers(newMembers);\n \n+            node.getNodeExtension().getAuditlogService().eventBuilder(AuditlogTypeIds.CLUSTER_MEMBER_SUSPECTED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 616, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}