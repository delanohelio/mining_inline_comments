{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDk4MDc3", "number": 16581, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyNTowMlrODnjqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozODowMFrODnj9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODA1MzQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/transaction/impl/xa/XATransaction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyNTowMlrOF1oJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTo0MDowMVrOF2AoHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NjY1NQ==", "bodyText": "Shouldn't we add these too?\nhttps://github.com/hazelcast/hazelcast/pull/16579/files#diff-0c104d8009708b16b9092edfd2438fa1R173-R176", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r391776655", "createdAt": "2020-03-12T17:25:02Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/transaction/impl/xa/XATransaction.java", "diffHunk": "@@ -175,18 +175,41 @@ public void commit() throws TransactionException, IllegalStateException {\n         }\n     }\n \n-    public void commitAsync(ExecutionCallback callback) {\n+    public void commitAsync(final ExecutionCallback callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5NDQxMQ==", "bodyText": "I found the same is missing in #16618 and #16617.", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r391794411", "createdAt": "2020-03-12T17:54:32Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/transaction/impl/xa/XATransaction.java", "diffHunk": "@@ -175,18 +175,41 @@ public void commit() throws TransactionException, IllegalStateException {\n         }\n     }\n \n-    public void commitAsync(ExecutionCallback callback) {\n+    public void commitAsync(final ExecutionCallback callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NjY1NQ=="}, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NzY5Mg==", "bodyText": "didn't get this?", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r392177692", "createdAt": "2020-03-13T11:40:01Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/transaction/impl/xa/XATransaction.java", "diffHunk": "@@ -175,18 +175,41 @@ public void commit() throws TransactionException, IllegalStateException {\n         }\n     }\n \n-    public void commitAsync(ExecutionCallback callback) {\n+    public void commitAsync(final ExecutionCallback callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NjY1NQ=="}, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODA5OTQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/NearCachingHook.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozNzoxOVrOF1om5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozNTo0M1rOF2AhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4NDE2NQ==", "bodyText": "How come you don't use @Nullable here?", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r391784165", "createdAt": "2020-03-12T17:37:19Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/NearCachingHook.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.nearcache;\n+\n+\n+import com.hazelcast.nio.serialization.Data;\n+\n+/**\n+ * Hook to be used by near cache enabled proxy objects.\n+ *\n+ * With this hook, you can implement needed logic\n+ * for truly invalidate/populate local near cache.\n+ */\n+public interface NearCachingHook<K, V> {\n+\n+    NearCachingHook EMPTY_HOOK = new NearCachingHook() {\n+\n+        @Override\n+        public void beforeRemoteCall(Object key, Data keyData,\n+                                     Object value, Data valueData) {\n+        }\n+\n+        @Override\n+        public void onRemoteCallSuccess() {\n+        }\n+\n+        @Override\n+        public void onRemoteCallFailure() {\n+\n+        }\n+    };\n+\n+    void beforeRemoteCall(K key, Data keyData, V value, Data valueData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NTkxNA==", "bodyText": "It wasn't common in 3.12 (java 6) using those, no real reason.", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r392175914", "createdAt": "2020-03-13T11:35:43Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/NearCachingHook.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.nearcache;\n+\n+\n+import com.hazelcast.nio.serialization.Data;\n+\n+/**\n+ * Hook to be used by near cache enabled proxy objects.\n+ *\n+ * With this hook, you can implement needed logic\n+ * for truly invalidate/populate local near cache.\n+ */\n+public interface NearCachingHook<K, V> {\n+\n+    NearCachingHook EMPTY_HOOK = new NearCachingHook() {\n+\n+        @Override\n+        public void beforeRemoteCall(Object key, Data keyData,\n+                                     Object value, Data valueData) {\n+        }\n+\n+        @Override\n+        public void onRemoteCallSuccess() {\n+        }\n+\n+        @Override\n+        public void onRemoteCallFailure() {\n+\n+        }\n+    };\n+\n+    void beforeRemoteCall(K key, Data keyData, V value, Data valueData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4NDE2NQ=="}, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODEwMTc1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/MapTransactionLogRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozODowMFrOF1oofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTozNTo0NlrOF2AhNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4NDU3Mw==", "bodyText": "Can the parameter be@Nullable?", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r391784573", "createdAt": "2020-03-12T17:38:00Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/MapTransactionLogRecord.java", "diffHunk": "@@ -39,10 +40,15 @@\n     private String ownerUuid;\n     private Operation op;\n \n+    private transient NearCachingHook nearCachingHook = NearCachingHook.EMPTY_HOOK;\n+\n     public MapTransactionLogRecord() {\n     }\n \n-    public MapTransactionLogRecord(String name, Data key, int partitionId, Operation op, long version, String ownerUuid) {\n+    public MapTransactionLogRecord(String name, Data key, int partitionId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NTkyNw==", "bodyText": "same", "url": "https://github.com/hazelcast/hazelcast/pull/16581#discussion_r392175927", "createdAt": "2020-03-13T11:35:46Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/MapTransactionLogRecord.java", "diffHunk": "@@ -39,10 +40,15 @@\n     private String ownerUuid;\n     private Operation op;\n \n+    private transient NearCachingHook nearCachingHook = NearCachingHook.EMPTY_HOOK;\n+\n     public MapTransactionLogRecord() {\n     }\n \n-    public MapTransactionLogRecord(String name, Data key, int partitionId, Operation op, long version, String ownerUuid) {\n+    public MapTransactionLogRecord(String name, Data key, int partitionId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4NDU3Mw=="}, "originalCommit": {"oid": "e450c75f8fcd9fd9b509837b375a1b47569e4667"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 795, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}