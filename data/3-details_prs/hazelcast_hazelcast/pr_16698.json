{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzg4MjU4", "number": 16698, "title": "Initial commit to add MultiMap bulk put feature request (#9079)", "bodyText": "Hi @mmedenjak @Holmistr\nApologies for the late update. This is the initial PR for MultiMap.putAllAsync. Please take a look.\nDesign Issues-Thoughts\n\nGenerally have followed Map.putAllAsync partition bundling bulk operation flow.\nOne ideal signature wouldve been putAllAsync(Map<? extends K, Collection<? extends V>>)\nBut the new putAllAsync and putAll had to have an (Map<Object, Collection>) signature because i) adding generics to MultiMapSupport broke the listeners and ii) passing in a generic Map<?, Collection<?>> into a non generic putAllInternal(Map<Object, Collection<Object>>) doesnt work.\nOther alternatives wouldve been a) preprocessing the generic Map and making a temporary Map<Data, Data> to pass into putAllInternal or b) defining a putAllAsync(MultiMapConfig) interface.\nThe new PutAllOperation class was not subclassed to AbstractKeyBasedMultiMapOperation and be invoked by MultiMapOperationFactory due to needing to have createPartitionOperation. One other solution couldve been to make MultiMapOperationFactory partition aware.\nOne other interface couldve been a key specific bulk op putAll(Key, Collection)\nI envision MultiMap bulk get to return all CStage getAllAsync() and filtered CStage getAllAsync(KeySet<T>) similar to the IMap interfaces. wdyt?\n\nImplementation Issues\n\nClientMultiMapProxy putAllAsync and putAll implementations not done yet.\nTwo new statics for PUT_ALL are defined in MultiMapDataSerializerHook but there seems to already be a preexisting and unused ADD_ALL static. Unsure whether ADD_ALL is semantically identical to PUT_ALL\nBatching not implemented yet (or necessary? am unsure)\nPotentially BackupOperation and backup needs to be implemented for PutAllOperation\nDidnt tooth comb all the loops yet but have a hunch some are optimizable", "createdAt": "2020-02-27T11:21:42Z", "url": "https://github.com/hazelcast/hazelcast/pull/16698", "merged": true, "mergeCommit": {"oid": "53c076356586e113302a555f65deec4aeb2752e4"}, "closed": true, "closedAt": "2020-04-22T15:47:25Z", "author": {"login": "abdulazizali77"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIc5JJAFqTM2NTYwNDUwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ1-lbgBqjMyNTY4MTk3Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjA0NTAy", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-365604502", "createdAt": "2020-02-27T11:24:46Z", "commit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyNDo0NlrOFvOowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDowMTo0NFrOFvTTFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NzIwMQ==", "bodyText": "In the public interface javadoc:\n\ndescribe what the method's contract is. For example, this is the place to mention that there is no atomicity guarantee (some puts may have already been executed while puts in other partitions may still be ongoing, so clients may observe partial effects of this method).\ndo not commit to internal implementation details; the fact that the implementation will batch KVs by partition is an optimization that might be true for the current implementation however we want to be free to change implementation as needed.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r385067201", "createdAt": "2020-02-27T11:24:46Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMap.java", "diffHunk": "@@ -57,6 +58,33 @@\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public interface MultiMap<K, V> extends BaseMultiMap<K, V> {\n+\n+    /**\n+     * Stores a Map in the multimap synchronously.\n+     * <p>\n+     * This method performs a bulk put into a MultiMap\n+     * by partitions similar to Map.putAllAsync", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2Nzc2OA==", "bodyText": "We expose CompletionStage as public return type for our async interface methods.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                InternalCompletableFuture<Void> putAllAsync(@Nonnull Map<? extends Object, Collection> m);\n          \n          \n            \n                CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m);", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r385067768", "createdAt": "2020-02-27T11:26:06Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMap.java", "diffHunk": "@@ -57,6 +58,33 @@\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public interface MultiMap<K, V> extends BaseMultiMap<K, V> {\n+\n+    /**\n+     * Stores a Map in the multimap synchronously.\n+     * <p>\n+     * This method performs a bulk put into a MultiMap\n+     * by partitions similar to Map.putAllAsync\n+     *\n+     * @param m the map to be stored\n+     */\n+    void putAll(@Nonnull Map<?, Collection> m);\n+\n+    /**\n+     * Stores a Map in the multimap aynchronously.\n+     * <p>\n+     * This method performs a bulk put into a MultiMap\n+     * by partitions similar to Map.putAllAsync.\n+     * <p>\n+     * <b>Warning:</b> The Map and result of the put cannot be fetched\n+     * from the Future.\n+     *\n+     * @param m the map to be stored\n+     * @return a void Future\n+     */\n+    //FIXME:should be narrowly generic, but as it were, MultiMapProxySupport is not genericized.\n+    //Another alternative is to pass in MultiMapValue\n+    InternalCompletableFuture<Void> putAllAsync(@Nonnull Map<? extends Object, Collection> m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyNjg0Ng==", "bodyText": "When adding new methods in minor versions, due to rolling-upgrade restrictions we need first to check if we are allowed to run the method. In this case, one is only allowed to run the new method in version 4.1. So first instruction should be something like this:\n    if (isClusterVersionLessThan(Versions.V4_1)) {\n        throw new UnsupportedOperationException(\"MultiMap#putAll is only available with cluster version 4.1 or greater\");\n    }\n\n(same for putAll above)", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r385126846", "createdAt": "2020-02-27T13:32:16Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +93,20 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public void putAll(@Nonnull Map<? extends Object, Collection> m) {\n+        //TODO: add contains check\n+        putAllInternal(m, null);\n+    }\n+\n+    @Override\n+    public InternalCompletableFuture<Void> putAllAsync(@Nonnull Map<? extends Object, Collection> m) {\n+        //TODO: add contains check\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE0MzU3NA==", "bodyText": "MultiMapSupport is not aware of K, V type parameters; instead it only operates with Data, the serialized binary form of keys and values. So here I would expect a Map<Data, Collection<Data>> as argument. Serialization occurs in MultiMapProxyImpl, as an example see how MultiMap#put(@Nonnull K key, @Nonnull V value) is implemented.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r385143574", "createdAt": "2020-02-27T14:01:44Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxySupport.java", "diffHunk": "@@ -16,54 +16,267 @@\n \n package com.hazelcast.multimap.impl;\n \n-import com.hazelcast.internal.locksupport.LockProxySupport;\n-import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.cluster.Address;\n import com.hazelcast.config.MultiMapConfig;\n import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.locksupport.LockProxySupport;\n+import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.internal.partition.IPartitionService;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.internal.util.ExceptionUtil;\n+import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.map.impl.MapEntries;\n import com.hazelcast.multimap.impl.operations.CountOperation;\n import com.hazelcast.multimap.impl.operations.DeleteOperation;\n import com.hazelcast.multimap.impl.operations.GetAllOperation;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.OperationFactoryType;\n+import com.hazelcast.multimap.impl.operations.MultiMapPutAllOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapResponse;\n import com.hazelcast.multimap.impl.operations.PutOperation;\n import com.hazelcast.multimap.impl.operations.RemoveAllOperation;\n import com.hazelcast.multimap.impl.operations.RemoveOperation;\n-import com.hazelcast.internal.serialization.Data;\n import com.hazelcast.spi.impl.AbstractDistributedObject;\n-import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.spi.impl.InternalCompletableFuture;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.operationservice.Operation;\n-import com.hazelcast.internal.util.ExceptionUtil;\n-import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.spi.impl.operationservice.OperationFactory;\n+import com.hazelcast.spi.impl.operationservice.OperationService;\n \n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n \n+import static com.hazelcast.internal.util.CollectionUtil.asIntegerList;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.CALLER_RUNS;\n+import static com.hazelcast.internal.util.ExceptionUtil.rethrow;\n+import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n import static com.hazelcast.internal.util.MapUtil.toIntSize;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_KEY_IS_NOT_ALLOWED;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_VALUE_IS_NOT_ALLOWED;\n+import static com.hazelcast.spi.impl.InternalCompletableFuture.newCompletedFuture;\n+import static java.lang.Math.ceil;\n+import static java.lang.Math.log10;\n+import static java.util.Collections.singletonMap;\n \n public abstract class MultiMapProxySupport extends AbstractDistributedObject<MultiMapService> {\n \n     protected final MultiMapConfig config;\n     protected final String name;\n     protected final LockProxySupport lockSupport;\n+    protected final SerializationService serializationService;\n+    protected final OperationService operationService;\n+    protected final IPartitionService partitionService;\n+    private final float putAllInitialSizeFactor;\n \n     protected MultiMapProxySupport(MultiMapConfig config, MultiMapService service, NodeEngine nodeEngine, String name) {\n         super(nodeEngine, service);\n         this.config = config;\n         this.name = name;\n \n+        this.partitionService = nodeEngine.getPartitionService();\n+        this.serializationService = nodeEngine.getSerializationService();\n+        this.operationService = nodeEngine.getOperationService();\n+\n         lockSupport = new LockProxySupport(new DistributedObjectNamespace(MultiMapService.SERVICE_NAME, name),\n                 LockSupportServiceImpl.getMaxLeaseTimeInMillis(nodeEngine.getProperties()));\n+\n+        //TODO: implement properties and properties.getFloat(MAP_PUT_ALL_INITIAL_SIZE_FACTOR);\n+        this.putAllInitialSizeFactor = 1;\n     }\n \n     @Override\n     public String getName() {\n         return name;\n     }\n \n+    //NB: this method is copied from MapProxySupport#getPutAllInitialSize\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    private int getPutAllInitialSize(boolean useBatching, int mapSize, int partitionCount) {\n+        if (mapSize == 1) {\n+            return 1;\n+        }\n+        //TODO: implement batching\n+        /*\n+        if (useBatching) {\n+            return putAllBatchSize;\n+        }*/\n+        if (putAllInitialSizeFactor < 1) {\n+            // this is an educated guess for the initial size of the entries per partition, depending on the map size\n+            return (int) ceil(20f * mapSize / partitionCount / log10(mapSize));\n+        }\n+        return (int) ceil(putAllInitialSizeFactor * mapSize / partitionCount);\n+    }\n+\n+    //NB: this method is generally copied from MapProxySupport#putAllInternal\n+    @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:methodlength\"})\n+    protected void putAllInternal(Map<? extends Object, Collection> map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1"}, "originalPosition": 114}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b2dfd27152e08ea00364879267a44f5927999a1", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2b2dfd27152e08ea00364879267a44f5927999a1", "committedDate": "2020-02-27T11:07:49Z", "message": "Initial commit to add MultiMap bulk put feature request (#9079)\n\nAdd and implement two new interfaces putAllAsync and putAll.\nImplementation is partition aware and follows Map.putAllInternal.\n\nAdd two new operation classes, MultiMapPutAllOperationFactory and PutAllOperation\nwhich also follows the partitioning in Map PutAll operation flow.\nModify MultiMap serializer hook to add new operations.\n\nAdd stub for ClientMultiMapProxy."}, "afterCommit": {"oid": "941f97d717eb624059761c4884b9fa7381bc6c33", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/941f97d717eb624059761c4884b9fa7381bc6c33", "committedDate": "2020-03-22T19:07:37Z", "message": " Modify new MultiMap bulk store interfaces to take in Map, MultiMap and Key and Collection (#9079)\n Implement ClientMultiMapProxy, corresponding PutAllMessageTask, unit tests and copy in generated codec.\n Address comments and fix MultiMap javadoc.\n\n Add new Precondition to throw given Exception."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "941f97d717eb624059761c4884b9fa7381bc6c33", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/941f97d717eb624059761c4884b9fa7381bc6c33", "committedDate": "2020-03-22T19:07:37Z", "message": " Modify new MultiMap bulk store interfaces to take in Map, MultiMap and Key and Collection (#9079)\n Implement ClientMultiMapProxy, corresponding PutAllMessageTask, unit tests and copy in generated codec.\n Address comments and fix MultiMap javadoc.\n\n Add new Precondition to throw given Exception."}, "afterCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d98853fc1667c392bc94f445adcb517df86ddf3b", "committedDate": "2020-03-22T22:31:00Z", "message": "Modify new MultiMap bulk store interfaces to take in Map, MultiMap and Key and Collection (#9079)\n Implement ClientMultiMapProxy, corresponding PutAllMessageTask, unit tests and copy in generated codec.\n Address comments and fix MultiMap javadoc.\n\n Add new Precondition to throw given Exception."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Mzc2MTU5", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-379376159", "createdAt": "2020-03-23T12:20:01Z", "commit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyMDowMlrOF6C5kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoyNzo0OVrOF6wIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwOTIzNQ==", "bodyText": "While I appreciate the clean coding style with checkTrue(boolean, RuntimeException), this version of code will produce a lot of litter even in the happy path, when cluster version is >= 4.1. I would rather have the exception construction & message formatting code be only executed when the cluster version condition is false.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r396409235", "createdAt": "2020-03-23T12:20:02Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +100,120 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public void putAll(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrue(isClusterVersionGreaterOrEqual(Versions.V4_1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDQyMg==", "bodyText": "I would rather not have this (and the async variant) API method with MultiMap as argument implemented at all. The reason is that it makes it extremely easy for users to shoot themselves in the foot, abstracting away the fact that each invocation to get an item from the MultiMap argument will be a remote invocation.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r396520422", "createdAt": "2020-03-23T15:05:50Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMap.java", "diffHunk": "@@ -57,6 +58,117 @@\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public interface MultiMap<K, V> extends BaseMultiMap<K, V> {\n+\n+    /**\n+     * Stores the given Map in the MultiMap synchronously.\n+     * <p>\n+     * This version doesn't support batching. Don't mutate the given map until the future completes.\n+     * <p>\n+     * No atomicity guarantees are given. It could be that in case of failure\n+     * some of the key/value-pairs get written, while others are not.\n+     * <p>\n+     * <b>Warning:</b> There is no warning if the input Map collection items are discarded due to uniqueness\n+     * eg. passing in List into a Set type MultiMap\n+     *\n+     * @param m the Map to be stored\n+     * @since 4.1\n+     */\n+    void putAll(@Nonnull Map<? extends K, Collection<? extends V>> m);\n+\n+    /**\n+     * Stores the given MultiMap in the MultiMap synchronously.\n+     * <p>\n+     * This version doesn't support batching. Don't mutate the given multimap until the future completes.\n+     * <p>\n+     * No atomicity guarantees are given. It could be that in case of failure\n+     * some of the key/value-pairs get written, while others are not.\n+     * <p>\n+     * <b>Warning:</b> There is no warning if the input MultiMap items are discarded due to uniqueness\n+     * eg. passing in List type MultiMap into a Set type MultiMap\n+     *\n+     * @param m the MultiMap to be stored\n+     * @since 4.1\n+     */\n+    void putAll(@Nonnull MultiMap<K, V> m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0MDQ0Nw==", "bodyText": "\"This version doesn't support batching.\" -> This seems superfluous for an API description, don't bother with mentioning implementation details in the contract description. If you feel like it is important to mention this so users can take it into account when planning their usage of the API, then probably it could be rephrased. From my point of view reading \"This version doesn't support batching\" indicates that there exists a version that supports batching.\n\"Don't mutate the given map until the future completes.\" -> what do you think about rephrasing as \"The results of concurrently mutating the given map are undefined\"?", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r396540447", "createdAt": "2020-03-23T15:31:55Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMap.java", "diffHunk": "@@ -57,6 +58,117 @@\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public interface MultiMap<K, V> extends BaseMultiMap<K, V> {\n+\n+    /**\n+     * Stores the given Map in the MultiMap synchronously.\n+     * <p>\n+     * This version doesn't support batching. Don't mutate the given map until the future completes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5Nzg4OQ==", "bodyText": "Are we sure that it is worth the parallelStream setup here, also taking into account that the per-element function (in line 114 below) also contends for the same CPU cores? I think this question can have varying answers depending on the number of keys and the average number of values per key, however using parallelStream to process both the entry stream and the values collection is certain to have a detrimental effect. I would probably opt for simple sequential execution in both places (here and line 114).\nRelated reading: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r396597889", "createdAt": "2020-03-23T16:47:07Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +100,120 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public void putAll(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrue(isClusterVersionGreaterOrEqual(Versions.V4_1),\n+                new UnsupportedOperationException(MessageFormat.format(MINIMUM_VERSION_ERROR_FORMAT,\n+                        \"MultiMap#putAll\", \"4.1\")));\n+        Map<Data, Collection<Data>> dataMap = new HashMap<Data, Collection<Data>>();\n+\n+        m.entrySet().parallelStream().forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NTQ1NA==", "bodyText": "new PutAllPartitionAwareOperationFactory?", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r397045454", "createdAt": "2020-03-24T10:24:37Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapDataSerializerHook.java", "diffHunk": "@@ -172,6 +175,8 @@ public DataSerializableFactory createFactory() {\n         constructors[MERGE_BACKUP_OPERATION] = arg -> new MergeBackupOperation();\n         constructors[DELETE] = arg -> new DeleteOperation();\n         constructors[DELETE_BACKUP] = arg -> new DeleteBackupOperation();\n+        constructors[PUT_ALL] = arg -> new PutAllOperation();\n+        constructors[PUT_ALL_PARTITION_AWARE_FACTORY] = arg -> new MultiMapOperationFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDM4Nw==", "bodyText": "This is unnecessary", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r397080387", "createdAt": "2020-03-24T11:25:31Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +116,245 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+                System.out.println(\"entryRemoved \" + event);\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+                System.out.println(\"mapCleared \" + event);\n+            }\n+        };\n+    }\n+\n+    protected HazelcastInstance testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapList\")\n+                .setValueCollectionType(\"LIST\")\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapSet\")\n+                .setValueCollectionType(\"SET\")\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(\"LIST\")\n+                .setBinary(false);\n+        Config cfg = smallInstanceConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+        HazelcastInstance hz = createHazelcastInstanceFactory(1)\n+                .newInstances(cfg)[0];\n+\n+        Accessors.getNode(hz).getClusterService().changeClusterVersion(Version.of(4, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzODc3MQ==", "bodyText": "The Set and List implementations used internally in the multimap container are not thread-safe. Additionally, using parallelStream here breaks the principle of a single thread accessing a partition's data. Instead, do a plain for loop (and avoid the cost of stream & consumer allocations as a bonus). This is the reason of spurious test failures you observed. One more thing, event should be only triggered when a value is actually added (so adding an already existing value to a Set-backed multimap should not trigger an event).", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r397138771", "createdAt": "2020-03-24T13:10:10Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.memory.NativeOutOfMemoryError;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+    private long recordId;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+        //May benefit from refactoring or default interfaces\n+    }\n+\n+    @Override\n+    public final void run() {\n+        try {\n+            runInternal();\n+        } catch (NativeOutOfMemoryError e) {\n+            //TODO: implement rerun?\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    protected void runInternal() {\n+        //FIXME: potentially bad idiom?\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+        //FIXME: is this the best place to set response?\n+        response = true;\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection c = (Collection) toObject(dataValue);\n+        Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(dataKey).getCollection(false);\n+        Consumer addObjToCollection = o -> {\n+            recordId = container.nextId();\n+            MultiMapRecord record = new MultiMapRecord(recordId, o);\n+            coll.add(record);\n+            getOrCreateContainer().update();\n+            publishEvent(EntryEventType.ADDED, dataKey, o, null);\n+        };\n+\n+        if (coll instanceof Set) {\n+            c.parallelStream().distinct().forEach(addObjToCollection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MDM1MQ==", "bodyText": "Need to respect the configured in-memory format here. Do something like MultiMapRecord record = new MultiMapRecord(recordId, isBinary() ? o : toObject(o));\nwhere\npublic final boolean isBinary() {\n    return getOrCreateContainer().getConfig().isBinary();\n}", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r397150351", "createdAt": "2020-03-24T13:27:49Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.memory.NativeOutOfMemoryError;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+    private long recordId;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+        //May benefit from refactoring or default interfaces\n+    }\n+\n+    @Override\n+    public final void run() {\n+        try {\n+            runInternal();\n+        } catch (NativeOutOfMemoryError e) {\n+            //TODO: implement rerun?\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    protected void runInternal() {\n+        //FIXME: potentially bad idiom?\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+        //FIXME: is this the best place to set response?\n+        response = true;\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection c = (Collection) toObject(dataValue);\n+        Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(dataKey).getCollection(false);\n+        Consumer addObjToCollection = o -> {\n+            recordId = container.nextId();\n+            MultiMapRecord record = new MultiMapRecord(recordId, o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d98853fc1667c392bc94f445adcb517df86ddf3b", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d98853fc1667c392bc94f445adcb517df86ddf3b", "committedDate": "2020-03-22T22:31:00Z", "message": "Modify new MultiMap bulk store interfaces to take in Map, MultiMap and Key and Collection (#9079)\n Implement ClientMultiMapProxy, corresponding PutAllMessageTask, unit tests and copy in generated codec.\n Address comments and fix MultiMap javadoc.\n\n Add new Precondition to throw given Exception."}, "afterCommit": {"oid": "3e59db4b82436572d3935ebe5d12f14fdfb1ca7c", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3e59db4b82436572d3935ebe5d12f14fdfb1ca7c", "committedDate": "2020-03-31T03:16:06Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove non async putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation\n\nFix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference.\n\nImplement Preconditions.checkTrue to take in class type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzQ0MTcz", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-385344173", "createdAt": "2020-04-01T07:55:18Z", "commit": {"oid": "3e59db4b82436572d3935ebe5d12f14fdfb1ca7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo1NToxOVrOF-040Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo1NToxOVrOF-040Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMjU0NQ==", "bodyText": "file added accidentally (and change your password \ud83d\ude09 )", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401422545", "createdAt": "2020-04-01T07:55:19Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/password.txt", "diffHunk": "@@ -0,0 +1 @@\n+h4z3lc4$t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e59db4b82436572d3935ebe5d12f14fdfb1ca7c"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e59db4b82436572d3935ebe5d12f14fdfb1ca7c", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3e59db4b82436572d3935ebe5d12f14fdfb1ca7c", "committedDate": "2020-03-31T03:16:06Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove non async putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation\n\nFix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference.\n\nImplement Preconditions.checkTrue to take in class type."}, "afterCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d5eab935497c3e80d0e4201d684cae3adce677c7", "committedDate": "2020-04-01T09:33:46Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove non async putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation\n\nFix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference.\n\nImplement Preconditions.checkTrue to take in class type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NjA5MTQ4", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-385609148", "createdAt": "2020-04-01T13:55:11Z", "commit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NToxMVrOF_BzbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1ODo1NVrOF_HfXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNDE1Ng==", "bodyText": "this is IMap's put all operation factory, please revert", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401634156", "createdAt": "2020-04-01T13:55:11Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PutAllPartitionAwareOperationFactory.java", "diffHunk": "@@ -27,12 +26,11 @@\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Map;\n \n /**\n  * Inserts the {@link MapEntries} for all partitions of a member via locally invoked {@link PutAllOperation}.\n  * <p>\n- * Used to reduce the number of remote invocations of an {@link IMap#putAll(Map)} call.\n+ * Used to reduce the number of remote invocations of an {@link MultiMap#putAllAsync(Map) } call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzNDU5Mw==", "bodyText": "please remove also this variant of putAllAsync with MultiMap as argument", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401634593", "createdAt": "2020-04-01T13:55:45Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMap.java", "diffHunk": "@@ -57,6 +58,69 @@\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public interface MultiMap<K, V> extends BaseMultiMap<K, V> {\n+\n+\n+    /**\n+     * Stores the given Map in the MultiMap asynchronously.\n+     * <p>\n+     * The results of concurrently mutating the given map are undefined.\n+     * <p>\n+     * No atomicity guarantees are given. It could be that in case of failure\n+     * some of the key/value-pairs get written, while others are not.\n+     * <p>\n+     * <b>Warning:</b> There is no warning if the input Map collection items are discarded due to uniqueness\n+     * eg. passing in List into a Set type MultiMap\n+     * <p>\n+     * <b>Warning:</b> The Map and result of the put cannot be fetched\n+     * from the Future.\n+     *\n+     * @param m the map to be stored\n+     * @return a void CompletionStage\n+     * @since 4.1\n+     */\n+    CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m);\n+\n+    /**\n+     * Stores a specified MultiMap in the MultiMap synchronously.\n+     * <p>\n+     * The results of concurrently mutating the given MultiMap are undefined\n+     * <p>\n+     * No atomicity guarantees are given. It could be that in case of failure\n+     * some of the key/value-pairs get written, while others are not.\n+     * <p>\n+     * <b>Warning:</b> There is no warning if the input MultiMap items are discarded due to uniqueness\n+     * eg. passing in List type MultiMap into a Set type MultiMap\n+     * <p>\n+     * <b>Warning:</b> The Map and result of the put cannot be fetched\n+     * from the Future.\n+     *\n+     * @param m the map to be stored\n+     * @return a void CompletionStage\n+     * @since 4.1\n+     */\n+    CompletionStage<Void> putAllAsync(@Nonnull MultiMap<K, V> m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NDI1Nw==", "bodyText": "I think reflection is too heavy weight as an alternative to something like if (!properVersion) { throw new UnsupportedOperationException(...);}. Taking also into account the Java 9+ reflection restrictions I would rather not use reflection in this case.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401654257", "createdAt": "2020-04-01T14:22:25Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Preconditions.java", "diffHunk": "@@ -328,6 +329,28 @@ public static void checkTrue(boolean expression, String errorMessage) {\n         }\n     }\n \n+    /**\n+     * Tests whether the supplied expression is {@code true}.\n+     *\n+     * @param expression the expression tested to see if it is {@code true}.\n+     * @param clazz      the exception class to construct.\n+     * @param message    the exception message.\n+     * @throws java.lang.RuntimeException if the supplied expression is {@code false}.\n+     */\n+    public static void checkTrue(boolean expression, Class<? extends RuntimeException> clazz, String message)\n+            throws RuntimeException {\n+        try {\n+            if (!expression) {\n+                Constructor<? extends RuntimeException> con = clazz.getConstructor(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2MDc4Nw==", "bodyText": "also implement BackupAwareOperation here and:\n\nshouldBackup should return true if the put all resulted in modification of the multimap (similarly to PutOperation)\ngetSync/AsyncBackupCount are already implemented in AbstractMultiMapOperation so no need to bother with those\ngetBackupOperation must return a new PutAllBackupOperation as discussed.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401660787", "createdAt": "2020-04-01T14:30:41Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.memory.NativeOutOfMemoryError;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2MjM2OA==", "bodyText": "remove this try-catch block and pull runInternal code here. MultiMap does not support NATIVE in memory format so it's not possible for NativeOutOfMemoryError to be thrown.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401662368", "createdAt": "2020-04-01T14:32:44Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.memory.NativeOutOfMemoryError;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+    private long recordId;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+        //May benefit from refactoring or default interfaces\n+    }\n+\n+    @Override\n+    public final void run() {\n+        try {\n+            runInternal();\n+        } catch (NativeOutOfMemoryError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDg5Mg==", "bodyText": "to be removed (see relevant comment in MultiMap interface)", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401704892", "createdAt": "2020-04-01T15:28:40Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +101,47 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrue(isClusterVersionGreaterOrEqual(Versions.V4_1),\n+                UnsupportedOperationException.class, MINIMUM_VERSION_ERROR_4_1);\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            dataMap.put(toData(e.getKey()), toData(e.getValue()));\n+        }\n+        putAllInternal(dataMap, future);\n+        return future;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull MultiMap<K, V> m) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNDEwMg==", "bodyText": "I would only set response to true if a value was actually added to the multimap (so if at least one of coll.add(record) in line 84 below returned true). This way, you can check response in your shouldBackup implementation to avoid sending a backup operation when no actual changes were performed. This is similar to how the existing MultiMap PutOperation works.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401714102", "createdAt": "2020-04-01T15:41:01Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.memory.NativeOutOfMemoryError;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+    private long recordId;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+        //May benefit from refactoring or default interfaces\n+    }\n+\n+    @Override\n+    public final void run() {\n+        try {\n+            runInternal();\n+        } catch (NativeOutOfMemoryError e) {\n+            //TODO: implement rerun?\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    protected void runInternal() {\n+        //FIXME: potentially bad idiom?\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+        //FIXME: is this the best place to set response?\n+        response = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNTQ1NQ==", "bodyText": "as soon as you no longer need these System.outs (probably inserted for debugging?), please remove them.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401715455", "createdAt": "2020-04-01T15:42:52Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +114,184 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+                System.out.println(\"entryRemoved \" + event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMDQzMg==", "bodyText": "you can use the compile-time safe variant setValueCollectionType(ValueCollectionType valueCollectionType) (here + 3 more instances below).", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401720432", "createdAt": "2020-04-01T15:49:27Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +114,184 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+                System.out.println(\"entryRemoved \" + event);\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+                System.out.println(\"mapCleared \" + event);\n+            }\n+        };\n+    }\n+\n+    protected HazelcastInstance testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapList\")\n+                .setValueCollectionType(\"LIST\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjIyMA==", "bodyText": "don't catch exceptions here, you want them to be thrown and fail the test", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401722220", "createdAt": "2020-04-01T15:52:00Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +114,184 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+                System.out.println(\"entryRemoved \" + event);\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+                System.out.println(\"mapCleared \" + event);\n+            }\n+        };\n+    }\n+\n+    protected HazelcastInstance testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapList\")\n+                .setValueCollectionType(\"LIST\")\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapSet\")\n+                .setValueCollectionType(\"SET\")\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(\"LIST\")\n+                .setBinary(false);\n+        Config cfg = smallInstanceConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+        HazelcastInstance hz = createHazelcastInstanceFactory(1)\n+                .newInstances(cfg)[0];\n+\n+        return hz;\n+    }\n+\n+    public void testMultiMapPutAllTemplate(HazelcastInstance instance1,\n+                                           Map<String, Collection<? extends Integer>> expectedMultiMap1,\n+                                           MultiMap<String, Integer> expectedMultiMap2,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1) {\n+\n+        MultiMap<String, Integer> mmap1 = instance1.getMultiMap(\"testMultiMapPutAllMapList\");\n+        MultiMap<String, Integer> mmap2 = instance1.getMultiMap(\"testMultiMapPutAllMapSet\");\n+        Map<String, Collection<Integer>> resultMap1 = new HashMap<>();\n+        Map<String, Collection<Integer>> resultMap2 = new HashMap<>();\n+\n+        int totalItems = 0;\n+        Set<String> ks = expectedMultiMap1 != null\n+                ? expectedMultiMap1.keySet() : expectedMultiMap2.keySet();\n+        for (String s : ks) {\n+            Collection expectedCollection = expectedMultiMap1 != null\n+                    ? expectedMultiMap1.get(s) : expectedMultiMap2.get(s);\n+            totalItems += expectedCollection.size()\n+                    + ((Long) expectedCollection.stream().distinct().count()).intValue();\n+        }\n+\n+        final CountDownLatch latchAdded = new CountDownLatch(totalItems);\n+        mmap1.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap1.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap1.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap1.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+        mmap2.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap2.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap2.get(key);\n+                    }\n+                    c.add(value);\n+\n+                    resultMap2.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+        try {\n+            putAllOperation1.accept(mmap1);\n+            putAllOperation1.accept(mmap2);\n+            latchAdded.await(5, TimeUnit.MINUTES);\n+\n+            for (String s : ks) {\n+                Collection c1 = resultMap1.get(s);\n+                Collection c2 = resultMap2.get(s);\n+                Collection expectedCollection = expectedMultiMap1 != null\n+                        ? expectedMultiMap1.get(s) : expectedMultiMap2.get(s);\n+                assertEquals(expectedCollection.size(), c1.size());\n+                assertEquals(expectedCollection.stream().distinct().count(), c2.size());\n+            }\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDUyNA==", "bodyText": "this class needs some clean up to get rid of too many TODOs, eg anything related to a potential future implementation of batching can be completely removed", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401724524", "createdAt": "2020-04-01T15:55:08Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxySupport.java", "diffHunk": "@@ -16,54 +16,268 @@\n \n package com.hazelcast.multimap.impl;\n \n-import com.hazelcast.internal.locksupport.LockProxySupport;\n-import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.cluster.Address;\n import com.hazelcast.config.MultiMapConfig;\n import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.locksupport.LockProxySupport;\n+import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.internal.partition.IPartitionService;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.internal.util.ExceptionUtil;\n+import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.map.impl.MapEntries;\n import com.hazelcast.multimap.impl.operations.CountOperation;\n import com.hazelcast.multimap.impl.operations.DeleteOperation;\n import com.hazelcast.multimap.impl.operations.GetAllOperation;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.OperationFactoryType;\n+import com.hazelcast.multimap.impl.operations.MultiMapPutAllOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapResponse;\n import com.hazelcast.multimap.impl.operations.PutOperation;\n import com.hazelcast.multimap.impl.operations.RemoveAllOperation;\n import com.hazelcast.multimap.impl.operations.RemoveOperation;\n-import com.hazelcast.internal.serialization.Data;\n import com.hazelcast.spi.impl.AbstractDistributedObject;\n-import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.spi.impl.InternalCompletableFuture;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.operationservice.Operation;\n-import com.hazelcast.internal.util.ExceptionUtil;\n-import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.spi.impl.operationservice.OperationFactory;\n+import com.hazelcast.spi.impl.operationservice.OperationService;\n \n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n \n+import static com.hazelcast.internal.util.CollectionUtil.asIntegerList;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.CALLER_RUNS;\n+import static com.hazelcast.internal.util.ExceptionUtil.rethrow;\n import static com.hazelcast.internal.util.MapUtil.toIntSize;\n+import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_KEY_IS_NOT_ALLOWED;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_VALUE_IS_NOT_ALLOWED;\n+import static com.hazelcast.spi.impl.InternalCompletableFuture.newCompletedFuture;\n+import static java.lang.Math.ceil;\n+import static java.lang.Math.log10;\n+import static java.util.Collections.singletonMap;\n \n public abstract class MultiMapProxySupport extends AbstractDistributedObject<MultiMapService> {\n \n     protected final MultiMapConfig config;\n     protected final String name;\n     protected final LockProxySupport lockSupport;\n+    protected final SerializationService serializationService;\n+    protected final OperationService operationService;\n+    protected final IPartitionService partitionService;\n+    private final float putAllInitialSizeFactor;\n \n     protected MultiMapProxySupport(MultiMapConfig config, MultiMapService service, NodeEngine nodeEngine, String name) {\n         super(nodeEngine, service);\n         this.config = config;\n         this.name = name;\n \n+        this.partitionService = nodeEngine.getPartitionService();\n+        this.serializationService = nodeEngine.getSerializationService();\n+        this.operationService = nodeEngine.getOperationService();\n+\n         lockSupport = new LockProxySupport(new DistributedObjectNamespace(MultiMapService.SERVICE_NAME, name),\n                 LockSupportServiceImpl.getMaxLeaseTimeInMillis(nodeEngine.getProperties()));\n+\n+        //TODO: implement properties and properties.getFloat(MAP_PUT_ALL_INITIAL_SIZE_FACTOR);\n+        this.putAllInitialSizeFactor = 1;\n     }\n \n     @Override\n     public String getName() {\n         return name;\n     }\n \n+    //NB: this method is copied from MapProxySupport#getPutAllInitialSize\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    private int getPutAllInitialSize(boolean useBatching, int mapSize, int partitionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg1MQ==", "bodyText": "entry.getValue() is already Data here, no need to wrap it in toData()", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401725851", "createdAt": "2020-04-01T15:56:58Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxySupport.java", "diffHunk": "@@ -16,54 +16,268 @@\n \n package com.hazelcast.multimap.impl;\n \n-import com.hazelcast.internal.locksupport.LockProxySupport;\n-import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.cluster.Address;\n import com.hazelcast.config.MultiMapConfig;\n import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.locksupport.LockProxySupport;\n+import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.internal.partition.IPartitionService;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.internal.util.ExceptionUtil;\n+import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.map.impl.MapEntries;\n import com.hazelcast.multimap.impl.operations.CountOperation;\n import com.hazelcast.multimap.impl.operations.DeleteOperation;\n import com.hazelcast.multimap.impl.operations.GetAllOperation;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.OperationFactoryType;\n+import com.hazelcast.multimap.impl.operations.MultiMapPutAllOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapResponse;\n import com.hazelcast.multimap.impl.operations.PutOperation;\n import com.hazelcast.multimap.impl.operations.RemoveAllOperation;\n import com.hazelcast.multimap.impl.operations.RemoveOperation;\n-import com.hazelcast.internal.serialization.Data;\n import com.hazelcast.spi.impl.AbstractDistributedObject;\n-import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.spi.impl.InternalCompletableFuture;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.operationservice.Operation;\n-import com.hazelcast.internal.util.ExceptionUtil;\n-import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.spi.impl.operationservice.OperationFactory;\n+import com.hazelcast.spi.impl.operationservice.OperationService;\n \n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n \n+import static com.hazelcast.internal.util.CollectionUtil.asIntegerList;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.CALLER_RUNS;\n+import static com.hazelcast.internal.util.ExceptionUtil.rethrow;\n import static com.hazelcast.internal.util.MapUtil.toIntSize;\n+import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_KEY_IS_NOT_ALLOWED;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_VALUE_IS_NOT_ALLOWED;\n+import static com.hazelcast.spi.impl.InternalCompletableFuture.newCompletedFuture;\n+import static java.lang.Math.ceil;\n+import static java.lang.Math.log10;\n+import static java.util.Collections.singletonMap;\n \n public abstract class MultiMapProxySupport extends AbstractDistributedObject<MultiMapService> {\n \n     protected final MultiMapConfig config;\n     protected final String name;\n     protected final LockProxySupport lockSupport;\n+    protected final SerializationService serializationService;\n+    protected final OperationService operationService;\n+    protected final IPartitionService partitionService;\n+    private final float putAllInitialSizeFactor;\n \n     protected MultiMapProxySupport(MultiMapConfig config, MultiMapService service, NodeEngine nodeEngine, String name) {\n         super(nodeEngine, service);\n         this.config = config;\n         this.name = name;\n \n+        this.partitionService = nodeEngine.getPartitionService();\n+        this.serializationService = nodeEngine.getSerializationService();\n+        this.operationService = nodeEngine.getOperationService();\n+\n         lockSupport = new LockProxySupport(new DistributedObjectNamespace(MultiMapService.SERVICE_NAME, name),\n                 LockSupportServiceImpl.getMaxLeaseTimeInMillis(nodeEngine.getProperties()));\n+\n+        //TODO: implement properties and properties.getFloat(MAP_PUT_ALL_INITIAL_SIZE_FACTOR);\n+        this.putAllInitialSizeFactor = 1;\n     }\n \n     @Override\n     public String getName() {\n         return name;\n     }\n \n+    //NB: this method is copied from MapProxySupport#getPutAllInitialSize\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    private int getPutAllInitialSize(boolean useBatching, int mapSize, int partitionCount) {\n+        if (mapSize == 1) {\n+            return 1;\n+        }\n+        //TODO: implement batching\n+        /*\n+        if (useBatching) {\n+            return putAllBatchSize;\n+        }*/\n+        if (putAllInitialSizeFactor < 1) {\n+            // this is an educated guess for the initial size of the entries per partition, depending on the map size\n+            return (int) ceil(20f * mapSize / partitionCount / log10(mapSize));\n+        }\n+        return (int) ceil(putAllInitialSizeFactor * mapSize / partitionCount);\n+    }\n+\n+    //NB: this method is generally copied from MapProxySupport#putAllInternal\n+    @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:methodlength\"})\n+    protected void putAllInternal(Map<Data, Data> map,\n+                                  @Nullable InternalCompletableFuture<Void> future) {\n+\n+        //get partition to entries mapping\n+        try {\n+            int mapSize = map.size();\n+            if (mapSize == 0) {\n+                if (future != null) {\n+                    future.complete(null);\n+                }\n+                return;\n+            }\n+\n+            //TODO: implement batching\n+            //boolean useBatching = future == null && isPutAllUseBatching(mapSize);\n+            int partitionCount = partitionService.getPartitionCount();\n+            int initialSize = getPutAllInitialSize(false, mapSize, partitionCount);\n+\n+            //get node to partition mapping\n+            Map<Address, List<Integer>> memberPartitionsMap = partitionService.getMemberPartitionsMap();\n+\n+            //TODO: implement batching\n+            /*\n+            MutableLong[] counterPerMember = null;\n+            Address[] addresses = null;\n+            if (useBatching) {\n+                counterPerMember = new MutableLong[partitionCount];\n+                addresses = new Address[partitionCount];\n+                for (Map.Entry<Address, List<Integer>> addressListEntry : memberPartitionsMap.entrySet()) {\n+                    MutableLong counter = new MutableLong();\n+                    Address address = addressListEntry.getKey();\n+                    for (int partitionId : addressListEntry.getValue()) {\n+                        counterPerMember[partitionId] = counter;\n+                        addresses[partitionId] = address;\n+                    }\n+                }\n+            }\n+            */\n+\n+            // fill entriesPerPartition\n+            MapEntries[] entriesPerPartition = new MapEntries[partitionCount];\n+\n+            for (Map.Entry<Data, Data> entry : map.entrySet()) {\n+                checkNotNull(entry.getKey(), NULL_KEY_IS_NOT_ALLOWED);\n+                checkNotNull(entry.getValue(), NULL_VALUE_IS_NOT_ALLOWED);\n+\n+                //TODO: add and use PartitioningStrategy?\n+                Data keyData = entry.getKey();\n+\n+                int partitionId = partitionService.getPartitionId(keyData);\n+                MapEntries entries = entriesPerPartition[partitionId];\n+                if (entries == null) {\n+                    entries = new MapEntries(initialSize);\n+                    entriesPerPartition[partitionId] = entries;\n+                }\n+                entries.add(keyData, toData(entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNzMyNw==", "bodyText": "consider adding test for stats of putAllAsync in MultiMapContainerStatisticsTest", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401727327", "createdAt": "2020-04-01T15:58:55Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxySupport.java", "diffHunk": "@@ -16,54 +16,268 @@\n \n package com.hazelcast.multimap.impl;\n \n-import com.hazelcast.internal.locksupport.LockProxySupport;\n-import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.cluster.Address;\n import com.hazelcast.config.MultiMapConfig;\n import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.locksupport.LockProxySupport;\n+import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.internal.partition.IPartitionService;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.internal.util.ExceptionUtil;\n+import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.map.impl.MapEntries;\n import com.hazelcast.multimap.impl.operations.CountOperation;\n import com.hazelcast.multimap.impl.operations.DeleteOperation;\n import com.hazelcast.multimap.impl.operations.GetAllOperation;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.OperationFactoryType;\n+import com.hazelcast.multimap.impl.operations.MultiMapPutAllOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapResponse;\n import com.hazelcast.multimap.impl.operations.PutOperation;\n import com.hazelcast.multimap.impl.operations.RemoveAllOperation;\n import com.hazelcast.multimap.impl.operations.RemoveOperation;\n-import com.hazelcast.internal.serialization.Data;\n import com.hazelcast.spi.impl.AbstractDistributedObject;\n-import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.spi.impl.InternalCompletableFuture;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.operationservice.Operation;\n-import com.hazelcast.internal.util.ExceptionUtil;\n-import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.spi.impl.operationservice.OperationFactory;\n+import com.hazelcast.spi.impl.operationservice.OperationService;\n \n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n \n+import static com.hazelcast.internal.util.CollectionUtil.asIntegerList;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.CALLER_RUNS;\n+import static com.hazelcast.internal.util.ExceptionUtil.rethrow;\n import static com.hazelcast.internal.util.MapUtil.toIntSize;\n+import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_KEY_IS_NOT_ALLOWED;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_VALUE_IS_NOT_ALLOWED;\n+import static com.hazelcast.spi.impl.InternalCompletableFuture.newCompletedFuture;\n+import static java.lang.Math.ceil;\n+import static java.lang.Math.log10;\n+import static java.util.Collections.singletonMap;\n \n public abstract class MultiMapProxySupport extends AbstractDistributedObject<MultiMapService> {\n \n     protected final MultiMapConfig config;\n     protected final String name;\n     protected final LockProxySupport lockSupport;\n+    protected final SerializationService serializationService;\n+    protected final OperationService operationService;\n+    protected final IPartitionService partitionService;\n+    private final float putAllInitialSizeFactor;\n \n     protected MultiMapProxySupport(MultiMapConfig config, MultiMapService service, NodeEngine nodeEngine, String name) {\n         super(nodeEngine, service);\n         this.config = config;\n         this.name = name;\n \n+        this.partitionService = nodeEngine.getPartitionService();\n+        this.serializationService = nodeEngine.getSerializationService();\n+        this.operationService = nodeEngine.getOperationService();\n+\n         lockSupport = new LockProxySupport(new DistributedObjectNamespace(MultiMapService.SERVICE_NAME, name),\n                 LockSupportServiceImpl.getMaxLeaseTimeInMillis(nodeEngine.getProperties()));\n+\n+        //TODO: implement properties and properties.getFloat(MAP_PUT_ALL_INITIAL_SIZE_FACTOR);\n+        this.putAllInitialSizeFactor = 1;\n     }\n \n     @Override\n     public String getName() {\n         return name;\n     }\n \n+    //NB: this method is copied from MapProxySupport#getPutAllInitialSize\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    private int getPutAllInitialSize(boolean useBatching, int mapSize, int partitionCount) {\n+        if (mapSize == 1) {\n+            return 1;\n+        }\n+        //TODO: implement batching\n+        /*\n+        if (useBatching) {\n+            return putAllBatchSize;\n+        }*/\n+        if (putAllInitialSizeFactor < 1) {\n+            // this is an educated guess for the initial size of the entries per partition, depending on the map size\n+            return (int) ceil(20f * mapSize / partitionCount / log10(mapSize));\n+        }\n+        return (int) ceil(putAllInitialSizeFactor * mapSize / partitionCount);\n+    }\n+\n+    //NB: this method is generally copied from MapProxySupport#putAllInternal\n+    @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:methodlength\"})\n+    protected void putAllInternal(Map<Data, Data> map,\n+                                  @Nullable InternalCompletableFuture<Void> future) {\n+\n+        //get partition to entries mapping\n+        try {\n+            int mapSize = map.size();\n+            if (mapSize == 0) {\n+                if (future != null) {\n+                    future.complete(null);\n+                }\n+                return;\n+            }\n+\n+            //TODO: implement batching\n+            //boolean useBatching = future == null && isPutAllUseBatching(mapSize);\n+            int partitionCount = partitionService.getPartitionCount();\n+            int initialSize = getPutAllInitialSize(false, mapSize, partitionCount);\n+\n+            //get node to partition mapping\n+            Map<Address, List<Integer>> memberPartitionsMap = partitionService.getMemberPartitionsMap();\n+\n+            //TODO: implement batching\n+            /*\n+            MutableLong[] counterPerMember = null;\n+            Address[] addresses = null;\n+            if (useBatching) {\n+                counterPerMember = new MutableLong[partitionCount];\n+                addresses = new Address[partitionCount];\n+                for (Map.Entry<Address, List<Integer>> addressListEntry : memberPartitionsMap.entrySet()) {\n+                    MutableLong counter = new MutableLong();\n+                    Address address = addressListEntry.getKey();\n+                    for (int partitionId : addressListEntry.getValue()) {\n+                        counterPerMember[partitionId] = counter;\n+                        addresses[partitionId] = address;\n+                    }\n+                }\n+            }\n+            */\n+\n+            // fill entriesPerPartition\n+            MapEntries[] entriesPerPartition = new MapEntries[partitionCount];\n+\n+            for (Map.Entry<Data, Data> entry : map.entrySet()) {\n+                checkNotNull(entry.getKey(), NULL_KEY_IS_NOT_ALLOWED);\n+                checkNotNull(entry.getValue(), NULL_VALUE_IS_NOT_ALLOWED);\n+\n+                //TODO: add and use PartitioningStrategy?\n+                Data keyData = entry.getKey();\n+\n+                int partitionId = partitionService.getPartitionId(keyData);\n+                MapEntries entries = entriesPerPartition[partitionId];\n+                if (entries == null) {\n+                    entries = new MapEntries(initialSize);\n+                    entriesPerPartition[partitionId] = entries;\n+                }\n+                entries.add(keyData, toData(entry.getValue()));\n+\n+                //TODO:implement batching\n+                /*\n+                if (useBatching) {\n+                    long currentSize = ++counterPerMember[partitionId].value;\n+                    if (currentSize % putAllBatchSize == 0) {\n+                        List<Integer> partitions = memberPartitionsMap.get(addresses[partitionId]);\n+                        invokePutAllOperation(addresses[partitionId], partitions, entriesPerPartition)\n+                                .get();\n+                    }\n+                }\n+                */\n+            }\n+            // invoke operations for entriesPerPartition\n+            AtomicInteger counter = new AtomicInteger(memberPartitionsMap.size());\n+            InternalCompletableFuture<Void> resultFuture =\n+                    future != null ? future : new InternalCompletableFuture<>();\n+            BiConsumer<Void, Throwable> callback = (response, t) -> {\n+                if (t != null) {\n+                    resultFuture.completeExceptionally(t);\n+                }\n+\n+                if (counter.decrementAndGet() == 0) {\n+                    //FIXME: implement finalizePutAll(map);\n+                    if (!resultFuture.isDone()) {\n+                        resultFuture.complete(null);\n+                    }\n+                }\n+            };\n+            for (Map.Entry<Address, List<Integer>> entry : memberPartitionsMap.entrySet()) {\n+                invokePutAllOperation(entry.getKey(), entry.getValue(), entriesPerPartition).whenCompleteAsync(callback);\n+            }\n+            // if executing in sync mode, block for the responses\n+            if (future == null) {\n+                resultFuture.get();\n+            }\n+        } catch (Throwable e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    //NB: this method is generally copied from MapProxySupport#invokePutAllOperation\n+    private InternalCompletableFuture<Void> invokePutAllOperation(\n+            Address address,\n+            List<Integer> memberPartitions,\n+            MapEntries[] entriesPerPartition\n+    ) {\n+        int size = memberPartitions.size();\n+        int[] partitions = new int[size];\n+        int index = 0;\n+        for (Integer partitionId : memberPartitions) {\n+            if (entriesPerPartition[partitionId] != null) {\n+                partitions[index++] = partitionId;\n+            }\n+        }\n+        if (index == 0) {\n+            return newCompletedFuture(null);\n+        }\n+        // trim partition array to real size\n+        if (index < size) {\n+            partitions = Arrays.copyOf(partitions, index);\n+            size = index;\n+        }\n+\n+        index = 0;\n+        MapEntries[] entries = new MapEntries[size];\n+        long totalSize = 0;\n+        for (int partitionId : partitions) {\n+            int batchSize = entriesPerPartition[partitionId].size();\n+            //FIXME: implement batching\n+            //assert (putAllBatchSize == 0 || batchSize <= putAllBatchSize);\n+            entries[index++] = entriesPerPartition[partitionId];\n+            totalSize += batchSize;\n+            entriesPerPartition[partitionId] = null;\n+        }\n+        if (totalSize == 0) {\n+            return newCompletedFuture(null);\n+        }\n+\n+        OperationFactory factory = new MultiMapPutAllOperationFactory(name, partitions, entries);\n+        long startTimeNanos = System.nanoTime();\n+        CompletableFuture<Map<Integer, Object>> future =\n+                operationService.invokeOnPartitionsAsync(MultiMapService.SERVICE_NAME, factory,\n+                        singletonMap(address, asIntegerList(partitions)));\n+        InternalCompletableFuture<Void> resultFuture = new InternalCompletableFuture<>();\n+        long finalTotalSize = totalSize;\n+        future.whenCompleteAsync((response, t) -> {\n+            //TODO: implement putAllVisitSerializedKeys\n+            //putAllVisitSerializedKeys(entries);\n+\n+            if (t == null) {\n+                //TODO: verify stats\n+                getService().getLocalMultiMapStatsImpl(name).incrementPutLatencyNanos(finalTotalSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 261}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzI4NjU3", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-385728657", "createdAt": "2020-04-01T16:00:46Z", "commit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowMDo0NlrOF_HkgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowMDo0NlrOF_HkgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyODY0MQ==", "bodyText": "I think serializationService can be removed as it is not used", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r401728641", "createdAt": "2020-04-01T16:00:46Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxySupport.java", "diffHunk": "@@ -16,54 +16,268 @@\n \n package com.hazelcast.multimap.impl;\n \n-import com.hazelcast.internal.locksupport.LockProxySupport;\n-import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.cluster.Address;\n import com.hazelcast.config.MultiMapConfig;\n import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.locksupport.LockProxySupport;\n+import com.hazelcast.internal.locksupport.LockSupportServiceImpl;\n+import com.hazelcast.internal.partition.IPartitionService;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.internal.util.ExceptionUtil;\n+import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.map.impl.MapEntries;\n import com.hazelcast.multimap.impl.operations.CountOperation;\n import com.hazelcast.multimap.impl.operations.DeleteOperation;\n import com.hazelcast.multimap.impl.operations.GetAllOperation;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory.OperationFactoryType;\n+import com.hazelcast.multimap.impl.operations.MultiMapPutAllOperationFactory;\n import com.hazelcast.multimap.impl.operations.MultiMapResponse;\n import com.hazelcast.multimap.impl.operations.PutOperation;\n import com.hazelcast.multimap.impl.operations.RemoveAllOperation;\n import com.hazelcast.multimap.impl.operations.RemoveOperation;\n-import com.hazelcast.internal.serialization.Data;\n import com.hazelcast.spi.impl.AbstractDistributedObject;\n-import com.hazelcast.internal.services.DistributedObjectNamespace;\n+import com.hazelcast.spi.impl.InternalCompletableFuture;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.operationservice.Operation;\n-import com.hazelcast.internal.util.ExceptionUtil;\n-import com.hazelcast.internal.util.ThreadUtil;\n+import com.hazelcast.spi.impl.operationservice.OperationFactory;\n+import com.hazelcast.spi.impl.operationservice.OperationService;\n \n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n \n+import static com.hazelcast.internal.util.CollectionUtil.asIntegerList;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.CALLER_RUNS;\n+import static com.hazelcast.internal.util.ExceptionUtil.rethrow;\n import static com.hazelcast.internal.util.MapUtil.toIntSize;\n+import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_KEY_IS_NOT_ALLOWED;\n+import static com.hazelcast.multimap.impl.MultiMapProxyImpl.NULL_VALUE_IS_NOT_ALLOWED;\n+import static com.hazelcast.spi.impl.InternalCompletableFuture.newCompletedFuture;\n+import static java.lang.Math.ceil;\n+import static java.lang.Math.log10;\n+import static java.util.Collections.singletonMap;\n \n public abstract class MultiMapProxySupport extends AbstractDistributedObject<MultiMapService> {\n \n     protected final MultiMapConfig config;\n     protected final String name;\n     protected final LockProxySupport lockSupport;\n+    protected final SerializationService serializationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5eab935497c3e80d0e4201d684cae3adce677c7", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d5eab935497c3e80d0e4201d684cae3adce677c7", "committedDate": "2020-04-01T09:33:46Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove non async putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation\n\nFix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference.\n\nImplement Preconditions.checkTrue to take in class type."}, "afterCommit": {"oid": "1a6d23ce0fcc6cef2b790248a92f599f0d23e33c", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1a6d23ce0fcc6cef2b790248a92f599f0d23e33c", "committedDate": "2020-04-02T08:47:28Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove putAll(MultiMap) interfaces and related tests. Many other small code quality changes.\n\nAdd statistics tests for putAll. Preliminary PutBackupOperation implementation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a6d23ce0fcc6cef2b790248a92f599f0d23e33c", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1a6d23ce0fcc6cef2b790248a92f599f0d23e33c", "committedDate": "2020-04-02T08:47:28Z", "message": "Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n\nRemove putAll(MultiMap) interfaces and related tests. Many other small code quality changes.\n\nAdd statistics tests for putAll. Preliminary PutBackupOperation implementation."}, "afterCommit": {"oid": "7068f3bc7fd60a5373689601cf7cadcb1feaf9a6", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7068f3bc7fd60a5373689601cf7cadcb1feaf9a6", "committedDate": "2020-04-04T11:53:16Z", "message": "    Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n    Remove non async and MultiMap putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation. Many other small code quality changes.\n\n    Fix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference. Implement PutAllBackupOperation, parametrize MultiMapBackupTest and clean up MultiMapProxySupport.\n\n    Add statistics tests for putAll. Preliminary PutBackupOperation implementation.\n\n    Define UnsupportedException specific Preconditions checkTrue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7068f3bc7fd60a5373689601cf7cadcb1feaf9a6", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7068f3bc7fd60a5373689601cf7cadcb1feaf9a6", "committedDate": "2020-04-04T11:53:16Z", "message": "    Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n    Remove non async and MultiMap putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation. Many other small code quality changes.\n\n    Fix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference. Implement PutAllBackupOperation, parametrize MultiMapBackupTest and clean up MultiMapProxySupport.\n\n    Add statistics tests for putAll. Preliminary PutBackupOperation implementation.\n\n    Define UnsupportedException specific Preconditions checkTrue."}, "afterCommit": {"oid": "3badfce8976c15696c1c12128b9eafee2fbfcda1", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3badfce8976c15696c1c12128b9eafee2fbfcda1", "committedDate": "2020-04-07T02:05:20Z", "message": "fix checkstyle (#9079)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3badfce8976c15696c1c12128b9eafee2fbfcda1", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3badfce8976c15696c1c12128b9eafee2fbfcda1", "committedDate": "2020-04-07T02:05:20Z", "message": "fix checkstyle (#9079)"}, "afterCommit": {"oid": "13dc280e79f849bce8d255ac5660ae6c323cf568", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/13dc280e79f849bce8d255ac5660ae6c323cf568", "committedDate": "2020-04-07T07:43:40Z", "message": "    Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n    Remove non async and MultiMap putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation. Many other small code quality changes.\n\n    Fix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference. Implement PutAllBackupOperation, parametrize MultiMapBackupTest and clean up MultiMapProxySupport.\n\n    Add statistics tests for putAll. Preliminary PutBackupOperation implementation.\n\n    Define UnsupportedException specific Preconditions checkTrue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13dc280e79f849bce8d255ac5660ae6c323cf568", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/13dc280e79f849bce8d255ac5660ae6c323cf568", "committedDate": "2020-04-07T07:43:40Z", "message": "    Modify interface and implementations of MultiMap.putAllAsync and related classes (#9079)\n    Remove non async and MultiMap putAll interfaces. Modify MultiMap.putAllInternal interface to take in Data, Data. Amend MultiMap.putAllAsync javadoc. Remove streams implementation. Many other small code quality changes.\n\n    Fix PutAllOperation record saving implementation. Fix incorrect MultimapDataSerializerHook reference. Implement PutAllBackupOperation, parametrize MultiMapBackupTest and clean up MultiMapProxySupport.\n\n    Add statistics tests for putAll. Preliminary PutBackupOperation implementation.\n\n    Define UnsupportedException specific Preconditions checkTrue."}, "afterCommit": {"oid": "d37e0291cfa5dd30d362a20b327ae1068e3a30e3", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d37e0291cfa5dd30d362a20b327ae1068e3a30e3", "committedDate": "2020-04-08T03:59:48Z", "message": "Fix PutAllBackup serializer constant (#9079)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODI4Mzc2", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-389828376", "createdAt": "2020-04-08T10:00:23Z", "commit": {"oid": "d37e0291cfa5dd30d362a20b327ae1068e3a30e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDowMDoyM1rOGCoCWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDowMDoyM1rOGCoCWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwNjI5OA==", "bodyText": "Two things might go wrong here:\n\nthis is an async call; it is possible that the operation has not yet been completed by the time assertNewLastAccessTime below is executed.\nyou miss a sleepMillis() statement before this one (similarly to previous code blocks in the same test) to ensure that putAllAsync is not executed in the same millisecond as the previous operation.\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    multiMap.putAllAsync(key, expectedMultiMap1.get(key));\n          \n          \n            \n                    sleepMillis(10);\n          \n          \n            \n                    multiMap.putAllAsync(key, expectedMultiMap1.get(key)).toCompletableFuture().join();", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405406298", "createdAt": "2020-04-08T10:00:23Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapContainerStatisticsTest.java", "diffHunk": "@@ -143,6 +157,33 @@ public void testMultiMapContainerStats() {\n         assertNewLastAccessTime();\n         assertNewLastUpdateTime();\n \n+        Map<String, Collection<? extends String>> expectedMultiMap1 = new HashMap<>();\n+        // a successful putAll(Map) operation on a Hash backed mmap updates the lastAccessTime and lastUpdateTime\n+        expectedMultiMap1.put(key, new ArrayList<>(Arrays.asList(\"value\", \"value\", \"value\")));\n+        multiMap.putAllAsync(expectedMultiMap1);\n+        assertNewLastAccessTime();\n+        assertNewLastUpdateTime();\n+        // a successful clear operation updates the lastAccessTime and the lastUpdateTime\n+        sleepMillis(10);\n+        multiMap.clear();\n+        assertNewLastAccessTime();\n+        assertNewLastUpdateTime();\n+\n+        // a successful putAll(K,V) operation on a Hash backed mmap updates the lastAccessTime and lastUpdateTime\n+        multiMap.putAllAsync(key, expectedMultiMap1.get(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37e0291cfa5dd30d362a20b327ae1068e3a30e3"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDk2ODY1", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-390096865", "createdAt": "2020-04-08T15:41:24Z", "commit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0MToyNFrOGC1NZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyODowNVrOGC9ucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMjExOA==", "bodyText": "minor: currentIndex can be a local variable in run method", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405622118", "createdAt": "2020-04-08T15:41:24Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private transient int currentIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDE4NQ==", "bodyText": "no need to track each new value. We only care if something changed so the backup operation can be created and executed or avoid the backup in case nothing changed.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405624185", "createdAt": "2020-04-08T15:44:14Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+    }\n+\n+    @Override\n+    public final void run() {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection c = (Collection) toObject(dataValue);\n+        Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(dataKey).getCollection(false);\n+        Iterator it = c.iterator();\n+\n+        while (it.hasNext()) {\n+            Object o = it.next();\n+            //NB: the collection values are always passed in as unencoded objects\n+            MultiMapRecord record = new MultiMapRecord(container.nextId(), isBinary() ? toData(o) : o);\n+            if (coll.add(record)) {\n+                //NB: cant put htis in afterRun because we want to notify on each new value\n+                getOrCreateContainer().update();\n+                publishEvent(EntryEventType.ADDED, dataKey, o, null);\n+                //would it be worthwhile to track all the additions and have a response array?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNjQwOA==", "bodyText": "Sleeping for 10 seconds is a bit of a stretch for a QuickTest. Is this necessary?", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405626408", "createdAt": "2020-04-08T15:47:30Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/LocalMultiMapStatsTest.java", "diffHunk": "@@ -74,10 +99,65 @@ public void testPutAndHitsGenerated() {\n             map.get(i);\n         }\n         LocalMapStats localMapStats = getMultiMapStats();\n+\n         assertEquals(100, localMapStats.getPutOperationCount());\n         assertEquals(100, localMapStats.getHits());\n     }\n \n+    public void testPutAllAndHitsGeneratedTemplate(Map<Integer, Collection<? extends Integer>> expectedMultiMap1,\n+                                                   Consumer<MultiMap<Integer, Integer>> putAllOperation1) {\n+        MultiMap<Integer, Integer> mmap1 = getMultiMap();\n+        MultiMap<Integer, Integer> mmap2 = getMultiMap(mapNameSet);\n+        for (int i = 0; i < 100; i++) {\n+            expectedMultiMap1.put(i, new ArrayList<>(Arrays.asList(1, 1, 1)));\n+        }\n+\n+        putAllOperation1.accept(mmap1);\n+        putAllOperation1.accept(mmap2);\n+\n+        sleepMillis(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyOTUyOQ==", "bodyText": "minor: could use diamond operator instead of <Integer> (here and a few more places below)", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405629529", "createdAt": "2020-04-08T15:51:47Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +114,147 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected HazelcastInstance testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        Config cfg = smallInstanceConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+        HazelcastInstance hz = createHazelcastInstanceFactory(1)\n+                .newInstances(cfg)[0];\n+\n+        return hz;\n+    }\n+\n+    public void testMultiMapPutAllTemplate(HazelcastInstance instance1,\n+                                           Map<String, Collection<? extends Integer>> expectedMultiMap1,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1)\n+            throws InterruptedException {\n+\n+        MultiMap<String, Integer> mmap1 = instance1.getMultiMap(\"testMultiMapPutAllMapList\");\n+        MultiMap<String, Integer> mmap2 = instance1.getMultiMap(\"testMultiMapPutAllMapSet\");\n+        Map<String, Collection<Integer>> resultMap1 = new HashMap<>();\n+        Map<String, Collection<Integer>> resultMap2 = new HashMap<>();\n+\n+        int totalItems = 0;\n+        Set<String> ks = expectedMultiMap1.keySet();\n+        for (String s : ks) {\n+            Collection expectedCollection = expectedMultiMap1.get(s);\n+            totalItems += expectedCollection.size()\n+                    + ((Long) expectedCollection.stream().distinct().count()).intValue();\n+        }\n+\n+        final CountDownLatch latchAdded = new CountDownLatch(totalItems);\n+        mmap1.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap1.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap1.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap1.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+        mmap2.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap2.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap2.get(key);\n+                    }\n+                    c.add(value);\n+\n+                    resultMap2.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+\n+        putAllOperation1.accept(mmap1);\n+        putAllOperation1.accept(mmap2);\n+        latchAdded.await(5, TimeUnit.MINUTES);\n+        sleepMillis(10000);\n+\n+        for (String s : ks) {\n+            Collection c1 = resultMap1.get(s);\n+            Collection c2 = resultMap2.get(s);\n+            Collection expectedCollection = expectedMultiMap1.get(s);\n+            assertEquals(expectedCollection.size(), c1.size());\n+            assertEquals(expectedCollection.stream().distinct().count(), c2.size());\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiMapPutAllAsyncMap() throws InterruptedException {\n+        Map<String, Collection<? extends Integer>> expectedMultiMap1 = new HashMap<>();\n+        expectedMultiMap1.put(\"A\", new ArrayList<Integer>(Arrays.asList(1, 1, 1, 1, 2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1OTY4Nw==", "bodyText": "I just realized there is an issue with the serialization of the Collection<? extends V> value here:\n\nCollection<? extends V> is serialized to Data\nIt will then be passed on as value to MapEntries field of PutAllOperation\nIn PutAllOperation it is deserialized. The Data will be deserialized to Collection<? extends V>. The problem with this is that it requires that the collection's element class Class<? extends V> must be present on the server, even when the MultiMap stores items in binary format.\n\nThe solution is to first serialize each element, so the Collection<? extends V> is turned to a Collection<Data>, then perform the serialization of Collection<Data> to a single Data to be put in your dataMap:\nfor (Map.Entry e : m.entrySet()) {\n  Collection<Data> dataCollection = asDataCollection(e.getValue());\n  dataMap.put(toData(e.getKey()), toData(dataCollection));\n}\n...\nCollection<Data> asDataCollection(Collection<? extends V> values) {\n  // iterate values and serialize each\n}", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405759687", "createdAt": "2020-04-08T19:24:12Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +101,31 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrueUnsupportedOperation(isClusterVersionGreaterOrEqual(Versions.V4_1), MINIMUM_VERSION_ERROR_4_1);\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            dataMap.put(toData(e.getKey()), toData(e.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MDYzMA==", "bodyText": "This will be a Collection<Data> c (once you implement serialization as described in the comment in MultiMapProxyImpl)", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405760630", "createdAt": "2020-04-08T19:26:08Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+    }\n+\n+    @Override\n+    public final void run() {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection c = (Collection) toObject(dataValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MTY1MQ==", "bodyText": "o will be already Data, so instead of isBinary() ? toData(o) : o, change this to isBinary() ? o : toObject(o)\n(once you implement serialization as described in the comment in MultiMapProxyImpl).", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r405761651", "createdAt": "2020-04-08T19:28:05Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+    }\n+\n+    @Override\n+    public final void run() {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection c = (Collection) toObject(dataValue);\n+        Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(dataKey).getCollection(false);\n+        Iterator it = c.iterator();\n+\n+        while (it.hasNext()) {\n+            Object o = it.next();\n+            //NB: the collection values are always passed in as unencoded objects\n+            MultiMapRecord record = new MultiMapRecord(container.nextId(), isBinary() ? toData(o) : o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1a3464f2c64eea95c9944bf66fb530977a8fd2"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccc04219c377fd8ad50fb597ad882a57f2852423", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ccc04219c377fd8ad50fb597ad882a57f2852423", "committedDate": "2020-04-09T11:11:16Z", "message": "Pass in Collection<Data> to putAllOperation. (#9079)\nAllow for serializing and deserializing Data to Collections Serializer. Strip type info from Array and HashSet Serializer initially. Save and read isData flag during de/serialization."}, "afterCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/22d4bca64919908655498a18f8ac25e227ed4cbe", "committedDate": "2020-04-09T11:17:50Z", "message": "Pass in Collection<Data> to putAllOperation. (#9079)\nAllow for serializing and deserializing Data to Collections Serializer. Strip type info from Array and HashSet Serializer initially. Save and read isData flag during de/serialization."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDQ5NTcy", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-392049572", "createdAt": "2020-04-13T09:32:46Z", "commit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOTozMjo0N1rOGEhscA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOTozNjo0NlrOGEhx2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5OTUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        dataMap.put(toData(e.getKey()), toData(dataCollection));\n          \n          \n            \n                        dataMap.put(toData(e.getKey()), toData(new DataCollection(dataCollection)));", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407399536", "createdAt": "2020-04-13T09:32:47Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +102,37 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrueUnsupportedOperation(isClusterVersionGreaterOrEqual(Versions.V4_1), MINIMUM_VERSION_ERROR_4_1);\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            Collection<Data> dataCollection = CollectionUtil\n+                    .objectToDataCollection(((Collection<? extends V>) e.getValue()),\n+                            getNodeEngine().getSerializationService());\n+\n+            dataMap.put(toData(e.getKey()), toData(dataCollection));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5OTY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataMap.put(toData(key), toData(dataCollection));\n          \n          \n            \n                    dataMap.put(toData(key), toData(new DataCollection(dataCollection)));", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407399667", "createdAt": "2020-04-13T09:33:08Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapProxyImpl.java", "diffHunk": "@@ -92,6 +102,37 @@ public void initialize() {\n         }\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        checkTrueUnsupportedOperation(isClusterVersionGreaterOrEqual(Versions.V4_1), MINIMUM_VERSION_ERROR_4_1);\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            Collection<Data> dataCollection = CollectionUtil\n+                    .objectToDataCollection(((Collection<? extends V>) e.getValue()),\n+                            getNodeEngine().getSerializationService());\n+\n+            dataMap.put(toData(e.getKey()), toData(dataCollection));\n+        }\n+        putAllInternal(dataMap, future);\n+        return future;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull K key, @Nonnull Collection<? extends V> value) {\n+        checkTrueUnsupportedOperation(isClusterVersionGreaterOrEqual(Versions.V4_1), MINIMUM_VERSION_ERROR_4_1);\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        Collection<Data> dataCollection = CollectionUtil\n+                .objectToDataCollection(value, getNodeEngine().getSerializationService());\n+        dataMap.put(toData(key), toData(dataCollection));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<Data> c = (Collection<Data>) toObject(dataValue);\n          \n          \n            \n                    DataCollection c = (DataCollection) toObject(dataValue);", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407400006", "createdAt": "2020-04-13T09:34:07Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private MapEntries mapEntries;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+    }\n+\n+    @Override\n+    public final void run() {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        int currentIndex = 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection<Data> c = (Collection<Data>) toObject(dataValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator it = c.iterator();\n          \n          \n            \n                    Iterator<Data> it = c.getCollection().iterator();", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407400112", "createdAt": "2020-04-13T09:34:23Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllOperation.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.core.EntryEventType;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupAwareOperation;\n+import com.hazelcast.spi.impl.operationservice.MutatingOperation;\n+import com.hazelcast.spi.impl.operationservice.Operation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllOperation extends AbstractMultiMapOperation implements MutatingOperation, BackupAwareOperation {\n+    private MapEntries mapEntries;\n+\n+    public PutAllOperation() {\n+        super();\n+    }\n+\n+    public PutAllOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+        //NB: general structure copied from c.hz.map.impl.operation.PutAllOperation\n+    }\n+\n+    @Override\n+    public final void run() {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        int currentIndex = 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {\n+        MultiMapContainer container = getOrCreateContainer();\n+        Collection<Data> c = (Collection<Data>) toObject(dataValue);\n+        Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(dataKey).getCollection(false);\n+        Iterator it = c.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDkyMg==", "bodyText": "this method needs to be updated similarly to PutAllOperation to take into account serialization and also handle properly binary data.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407400922", "createdAt": "2020-04-13T09:36:46Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/operations/PutAllBackupOperation.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.multimap.impl.operations;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.map.impl.MapEntries;\n+import com.hazelcast.multimap.impl.MultiMapContainer;\n+import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;\n+import com.hazelcast.multimap.impl.MultiMapRecord;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.spi.impl.operationservice.BackupOperation;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+public class PutAllBackupOperation extends AbstractMultiMapOperation implements BackupOperation {\n+    private transient int currentIndex;\n+    private MapEntries mapEntries;\n+\n+    public PutAllBackupOperation() {\n+    }\n+\n+    public PutAllBackupOperation(String name, MapEntries mapEntries) {\n+        super(name);\n+        this.mapEntries = mapEntries;\n+    }\n+\n+    @Override\n+    public void run() throws Exception {\n+        int size = mapEntries != null ? mapEntries.size() : 0;\n+        while (currentIndex < size) {\n+            Data dataKey = mapEntries.getKey(currentIndex);\n+            Data value = mapEntries.getValue(currentIndex);\n+            put(dataKey, value);\n+            currentIndex++;\n+        }\n+    }\n+\n+    protected void put(Data dataKey, Data dataValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22d4bca64919908655498a18f8ac25e227ed4cbe", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/22d4bca64919908655498a18f8ac25e227ed4cbe", "committedDate": "2020-04-09T11:17:50Z", "message": "Pass in Collection<Data> to putAllOperation. (#9079)\nAllow for serializing and deserializing Data to Collections Serializer. Strip type info from Array and HashSet Serializer initially. Save and read isData flag during de/serialization."}, "afterCommit": {"oid": "bef680b72c90e574c2c9e125159b513e8a658bd9", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bef680b72c90e574c2c9e125159b513e8a658bd9", "committedDate": "2020-04-13T11:50:37Z", "message": "Reduce sleep time in ClientMultiMapTests (#9079)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTY3NjM3", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-392167637", "createdAt": "2020-04-13T14:10:34Z", "commit": {"oid": "0e306d8be0f2b1df2b5e1090802257629920ce1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoxMDozNVrOGEnrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoxMDozNVrOGEnrQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NzUzOA==", "bodyText": "I could not find a usage of this future with a null value.\n@vbekiaris Are we planning to implement sync versions of these methods ?\nIf there is no plan, can we make this @nonnull , and remove the null checks inside the method? Same goes for the MultiMapProxyImpl as well.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407497538", "createdAt": "2020-04-13T14:10:35Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMultiMapProxy.java", "diffHunk": "@@ -91,6 +105,98 @@ public ClientMultiMapProxy(String serviceName, String name, ClientContext contex\n         super(serviceName, name, context);\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            Collection<Data> dataCollection = CollectionUtil\n+                    .objectToDataCollection(((Collection<? extends V>) e.getValue()),\n+                            getSerializationService());\n+\n+            dataMap.put(toData(e.getKey()), toData(new DataCollection(dataCollection)));\n+        }\n+        putAllInternal(dataMap, future);\n+        return future;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull K key, Collection<? extends V> value) {\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        Collection<Data> dataCollection = CollectionUtil\n+                .objectToDataCollection(value, getSerializationService());\n+        dataMap.put(toData(key), toData(new DataCollection(dataCollection)));\n+        putAllInternal(dataMap, future);\n+        return future;\n+    }\n+\n+\n+    @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:methodlength\"})\n+    private void putAllInternal(@Nonnull Map<Data, Data> map,\n+                                @Nullable InternalCompletableFuture<Void> future) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e306d8be0f2b1df2b5e1090802257629920ce1a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjAzMjM0", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-392203234", "createdAt": "2020-04-13T15:05:16Z", "commit": {"oid": "0e306d8be0f2b1df2b5e1090802257629920ce1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNToxNlrOGEpavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNToxNlrOGEpavA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjA3Ng==", "bodyText": "A collection of objects should not be converted to Data. For details see my comment on protocol pr.\nhazelcast/hazelcast-client-protocol#313 (comment)\nNote that this is the case for Client only. For the member side, I believe it is ok the use DataCollection.\nFor the client, we have a protocol and it needs to be self descriptive. Details are on the protocol pr comment", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r407526076", "createdAt": "2020-04-13T15:05:16Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMultiMapProxy.java", "diffHunk": "@@ -91,6 +105,98 @@ public ClientMultiMapProxy(String serviceName, String name, ClientContext contex\n         super(serviceName, name, context);\n     }\n \n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull Map<? extends K, Collection<? extends V>> m) {\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        for (Map.Entry e : m.entrySet()) {\n+            Collection<Data> dataCollection = CollectionUtil\n+                    .objectToDataCollection(((Collection<? extends V>) e.getValue()),\n+                            getSerializationService());\n+\n+            dataMap.put(toData(e.getKey()), toData(new DataCollection(dataCollection)));\n+        }\n+        putAllInternal(dataMap, future);\n+        return future;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> putAllAsync(@Nonnull K key, Collection<? extends V> value) {\n+        InternalCompletableFuture<Void> future = new InternalCompletableFuture<>();\n+        Map<Data, Data> dataMap = new HashMap<>();\n+\n+        Collection<Data> dataCollection = CollectionUtil\n+                .objectToDataCollection(value, getSerializationService());\n+        dataMap.put(toData(key), toData(new DataCollection(dataCollection)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e306d8be0f2b1df2b5e1090802257629920ce1a"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e306d8be0f2b1df2b5e1090802257629920ce1a", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0e306d8be0f2b1df2b5e1090802257629920ce1a", "committedDate": "2020-04-13T13:04:31Z", "message": "Fix data conversion in PutAllOperation and PutAllBackupOperation (#9079)"}, "afterCommit": {"oid": "a7bf45a34a69a1f5c824f2f16ebb8ee5289cf5c7", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a7bf45a34a69a1f5c824f2f16ebb8ee5289cf5c7", "committedDate": "2020-04-17T12:21:21Z", "message": "Change ClientMultiMap PutAll entries param from Map<Data, Data> to Map<Data, Collection<Data>> (#9079)\nUpdate generated codecs and tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6f942fc1048041e8147fa557bad6d7b7c7044da", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d6f942fc1048041e8147fa557bad6d7b7c7044da", "committedDate": "2020-04-17T12:39:06Z", "message": "Make ClientMultiMapProxy.putAllInternal future @Nonnull and remove check (#9079)"}, "afterCommit": {"oid": "e6d09aae355ed6c67efd01b94c5d80d07cca42b7", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e6d09aae355ed6c67efd01b94c5d80d07cca42b7", "committedDate": "2020-04-17T12:44:32Z", "message": "Make ClientMultiMapProxy.putAllInternal future @Nonnull and remove check (#9079)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Mzk4ODgx", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396398881", "createdAt": "2020-04-20T12:18:06Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxODowN1rOGIRnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxODowN1rOGIRnOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzMDM2Mw==", "bodyText": "What is this configuration is used for ? Can you remove if it is redundant ?", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411330363", "createdAt": "2020-04-20T12:18:07Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/multimap/ClientMultiMapTest.java", "diffHunk": "@@ -65,6 +78,137 @@ public void testPut() {\n         assertTrue(mm.put(key, 1));\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected void testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDExMTY5", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396411169", "createdAt": "2020-04-20T12:35:48Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozNTo0OVrOGISRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozNTo0OVrOGISRhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MTE5MA==", "bodyText": "This access is not thread safe. You should use ConcurrentHashMap .", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411341190", "createdAt": "2020-04-20T12:35:49Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/multimap/ClientMultiMapTest.java", "diffHunk": "@@ -65,6 +78,137 @@ public void testPut() {\n         assertTrue(mm.put(key, 1));\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected void testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        client.getConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+    }\n+\n+    public void testMultiMapPutAllTemplate(Map<String, Collection<? extends Integer>> expectedMultiMap,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1) throws InterruptedException {\n+        MultiMap<String, Integer> mmap1 = client.getMultiMap(\"testMultiMapList\");\n+        MultiMap<String, Integer> mmap2 = client.getMultiMap(\"testMultiMapSet\");\n+        Map<String, Collection<Integer>> resultMap1 = new HashMap<>();\n+        Map<String, Collection<Integer>> resultMap2 = new HashMap<>();\n+\n+        int totalItems = 0;\n+        Set<String> ks = expectedMultiMap.keySet();\n+        for (String s : ks) {\n+            Collection expectedCollection = expectedMultiMap.get(s);\n+            totalItems += expectedCollection.size()\n+                    + ((Long) expectedCollection.stream().distinct().count()).intValue();\n+        }\n+\n+        final CountDownLatch latchAdded = new CountDownLatch(totalItems);\n+        mmap1.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap1.containsKey(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDEyNTE2", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396412516", "createdAt": "2020-04-20T12:37:47Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozNzo0OFrOGISV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozNzo0OFrOGISV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MjMxNw==", "bodyText": "Some naming suggestions to make the code a little bit more easy to understand\nPlease remove the numbers from the names where it is not necessary . (When there is a number, I automatically search for the second one. )\nlike putAllOperation1 -> putAllOperation\nexpectedMultiMap1 -> expectedMultiMap", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411342317", "createdAt": "2020-04-20T12:37:48Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/multimap/ClientMultiMapTest.java", "diffHunk": "@@ -65,6 +78,137 @@ public void testPut() {\n         assertTrue(mm.put(key, 1));\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected void testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        client.getConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+    }\n+\n+    public void testMultiMapPutAllTemplate(Map<String, Collection<? extends Integer>> expectedMultiMap,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDEzNDg0", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396413484", "createdAt": "2020-04-20T12:39:09Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozOTowOVrOGISZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozOTowOVrOGISZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MzE5MQ==", "bodyText": "Please use the standard one as follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    latchAdded.await(5, TimeUnit.MINUTES);\n          \n          \n            \n                    assertOpenEventually(latchAdded);", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411343191", "createdAt": "2020-04-20T12:39:09Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/multimap/ClientMultiMapTest.java", "diffHunk": "@@ -65,6 +78,137 @@ public void testPut() {\n         assertTrue(mm.put(key, 1));\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected void testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        client.getConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+    }\n+\n+    public void testMultiMapPutAllTemplate(Map<String, Collection<? extends Integer>> expectedMultiMap,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1) throws InterruptedException {\n+        MultiMap<String, Integer> mmap1 = client.getMultiMap(\"testMultiMapList\");\n+        MultiMap<String, Integer> mmap2 = client.getMultiMap(\"testMultiMapSet\");\n+        Map<String, Collection<Integer>> resultMap1 = new HashMap<>();\n+        Map<String, Collection<Integer>> resultMap2 = new HashMap<>();\n+\n+        int totalItems = 0;\n+        Set<String> ks = expectedMultiMap.keySet();\n+        for (String s : ks) {\n+            Collection expectedCollection = expectedMultiMap.get(s);\n+            totalItems += expectedCollection.size()\n+                    + ((Long) expectedCollection.stream().distinct().count()).intValue();\n+        }\n+\n+        final CountDownLatch latchAdded = new CountDownLatch(totalItems);\n+        mmap1.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap1.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap1.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap1.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+        mmap2.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap2.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap2.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap2.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+\n+        putAllOperation1.accept(mmap1);\n+        putAllOperation1.accept(mmap2);\n+        latchAdded.await(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDEzOTkz", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396413993", "createdAt": "2020-04-20T12:39:50Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozOTo1MFrOGISbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozOTo1MFrOGISbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MzY0Mw==", "bodyText": "A test should not rely on sleep. I believe this should not be necessary.", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411343643", "createdAt": "2020-04-20T12:39:50Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/multimap/ClientMultiMapTest.java", "diffHunk": "@@ -65,6 +78,137 @@ public void testPut() {\n         assertTrue(mm.put(key, 1));\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected void testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()\n+                .setName(\"expectedMultiMap1\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        client.getConfig()\n+                .addMultiMapConfig(multiMapConfig1)\n+                .addMultiMapConfig(multiMapConfig2)\n+                .addMultiMapConfig(multiMapConfig3);\n+    }\n+\n+    public void testMultiMapPutAllTemplate(Map<String, Collection<? extends Integer>> expectedMultiMap,\n+                                           Consumer<MultiMap<String, Integer>> putAllOperation1) throws InterruptedException {\n+        MultiMap<String, Integer> mmap1 = client.getMultiMap(\"testMultiMapList\");\n+        MultiMap<String, Integer> mmap2 = client.getMultiMap(\"testMultiMapSet\");\n+        Map<String, Collection<Integer>> resultMap1 = new HashMap<>();\n+        Map<String, Collection<Integer>> resultMap2 = new HashMap<>();\n+\n+        int totalItems = 0;\n+        Set<String> ks = expectedMultiMap.keySet();\n+        for (String s : ks) {\n+            Collection expectedCollection = expectedMultiMap.get(s);\n+            totalItems += expectedCollection.size()\n+                    + ((Long) expectedCollection.stream().distinct().count()).intValue();\n+        }\n+\n+        final CountDownLatch latchAdded = new CountDownLatch(totalItems);\n+        mmap1.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap1.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap1.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap1.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+        mmap2.addEntryListener(putAllEntryListenerBuilder((event) -> {\n+                    String key = (String) event.getKey();\n+                    Integer value = (Integer) event.getValue();\n+                    Collection<Integer> c;\n+                    if (!resultMap2.containsKey(key)) {\n+                        c = new ArrayList<>();\n+                    } else {\n+                        c = resultMap2.get(key);\n+                    }\n+                    c.add(value);\n+                    resultMap2.put(key, c);\n+                    latchAdded.countDown();\n+                }\n+        ), true);\n+\n+        putAllOperation1.accept(mmap1);\n+        putAllOperation1.accept(mmap2);\n+        latchAdded.await(5, TimeUnit.MINUTES);\n+        sleepMillis(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDE0OTM1", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-396414935", "createdAt": "2020-04-20T12:41:05Z", "commit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo0MTowNVrOGISeiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo0MTowNVrOGISeiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0NDUyMA==", "bodyText": "Is this also unused ?", "url": "https://github.com/hazelcast/hazelcast/pull/16698#discussion_r411344520", "createdAt": "2020-04-20T12:41:05Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/multimap/MultiMapTest.java", "diffHunk": "@@ -104,6 +114,147 @@ public void testMultiMapPutGetRemove() {\n         assertEquals(0, multiMap.size());\n     }\n \n+    protected <K, V> EntryListener<K, V> putAllEntryListenerBuilder(Consumer<EntryEvent<K, V>> f) {\n+        return new EntryAdapter<K, V>() {\n+            public void entryAdded(EntryEvent<K, V> event) {\n+                f.accept(event);\n+            }\n+\n+            public void entryRemoved(EntryEvent<K, V> event) {\n+            }\n+\n+            public void entryEvicted(EntryEvent<K, V> event) {\n+                entryRemoved(event);\n+            }\n+\n+            @Override\n+            public void mapEvicted(MapEvent event) {\n+            }\n+\n+            @Override\n+            public void mapCleared(MapEvent event) {\n+            }\n+        };\n+    }\n+\n+    protected HazelcastInstance testMultiMapPutAllSetup() {\n+        MultiMapConfig multiMapConfig1 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapList\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.LIST)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig2 = new MultiMapConfig()\n+                .setName(\"testMultiMapPutAllMapSet\")\n+                .setValueCollectionType(MultiMapConfig.ValueCollectionType.SET)\n+                .setBinary(false);\n+        MultiMapConfig multiMapConfig3 = new MultiMapConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd153bc2dd11f13d4f9835ba5eb31efa332d4884"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTcwMTQz", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-397170143", "createdAt": "2020-04-21T09:50:10Z", "commit": {"oid": "50e43b848a9eec50f857c83562a9d8391d6dcfcd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MzkxMzEy", "url": "https://github.com/hazelcast/hazelcast/pull/16698#pullrequestreview-397391312", "createdAt": "2020-04-21T14:32:25Z", "commit": {"oid": "50e43b848a9eec50f857c83562a9d8391d6dcfcd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83119aa4e73b0830a79c51992e7373d195046fb2", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/83119aa4e73b0830a79c51992e7373d195046fb2", "committedDate": "2020-04-21T15:50:43Z", "message": "New MultiMap bulk put feature request (#9079)\nAdd two new interfaces for MultiMap.putAllAsync and implement for MultiMapProxyImpl and ClientMultiMapProxy.\nAdd new operation classes, MultiMapPutAllOperationFactory, PutAllOperation and PutAllBackupOperation.\nAdd corresponding tests for bulk put, statistics and backup.\n\nAdd new client protocol codecs MultiMapPutAllCodec and ListDataCodec and new message handler MultiMapPutAllMessageTask. Update generated client protocol tests and resources.\nAdd new Preconditions.checkTrueUnsupportedOperation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50e43b848a9eec50f857c83562a9d8391d6dcfcd", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/50e43b848a9eec50f857c83562a9d8391d6dcfcd", "committedDate": "2020-04-21T01:34:52Z", "message": "Fix code quality issues (#9079)\nrename variables, remove unused variables, use assertEventually idiom, remove sleep in tests"}, "afterCommit": {"oid": "83119aa4e73b0830a79c51992e7373d195046fb2", "author": {"user": {"login": "abdulazizali77", "name": "abdul aziz ali"}}, "url": "https://github.com/hazelcast/hazelcast/commit/83119aa4e73b0830a79c51992e7373d195046fb2", "committedDate": "2020-04-21T15:50:43Z", "message": "New MultiMap bulk put feature request (#9079)\nAdd two new interfaces for MultiMap.putAllAsync and implement for MultiMapProxyImpl and ClientMultiMapProxy.\nAdd new operation classes, MultiMapPutAllOperationFactory, PutAllOperation and PutAllBackupOperation.\nAdd corresponding tests for bulk put, statistics and backup.\n\nAdd new client protocol codecs MultiMapPutAllCodec and ListDataCodec and new message handler MultiMapPutAllMessageTask. Update generated client protocol tests and resources.\nAdd new Preconditions.checkTrueUnsupportedOperation."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}