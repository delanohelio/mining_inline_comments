{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDk4NzYz", "number": 16684, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0MToxNlrODkoltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0Njo0MFrODkoskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzQwMzQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0MToxNlrOFxEL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxOToxOFrOFxndrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MzEzMA==", "bodyText": "I think the original was referring to a specific runtime environment (OSGi, Java EE) and not to execution time; so I would say that \"in a runtime\" was actually correct.", "url": "https://github.com/hazelcast/hazelcast/pull/16684#discussion_r386993130", "createdAt": "2020-03-03T12:41:16Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "diffHunk": "@@ -374,8 +374,8 @@ private boolean isDuplicate(Class<?> candidate) {\n         private void onClassNotFoundException(String className, ClassLoader classLoader, ClassNotFoundException e) {\n             if (className.startsWith(\"com.hazelcast\")) {\n                 LOGGER.fine(\"Failed to load \" + className + \" by \" + classLoader\n-                        + \". This indicates a classloading issue. It can happen in a runtime with \"\n-                        + \"a complicated classloading model. (OSGi, Java EE, etc);\");\n+                        + \". This indicates a classloading issue. It can happen at runtime with \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562b4c4ff75690a8de926c9f8a897258e7d7115c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTExOQ==", "bodyText": "I misunderstood your comment at first, I agree, I'll fix.", "url": "https://github.com/hazelcast/hazelcast/pull/16684#discussion_r387571119", "createdAt": "2020-03-04T10:19:18Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "diffHunk": "@@ -374,8 +374,8 @@ private boolean isDuplicate(Class<?> candidate) {\n         private void onClassNotFoundException(String className, ClassLoader classLoader, ClassNotFoundException e) {\n             if (className.startsWith(\"com.hazelcast\")) {\n                 LOGGER.fine(\"Failed to load \" + className + \" by \" + classLoader\n-                        + \". This indicates a classloading issue. It can happen in a runtime with \"\n-                        + \"a complicated classloading model. (OSGi, Java EE, etc);\");\n+                        + \". This indicates a classloading issue. It can happen at runtime with \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MzEzMA=="}, "originalCommit": {"oid": "562b4c4ff75690a8de926c9f8a897258e7d7115c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzQyMDk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo0Njo0MFrOFxEWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDozMzo0M1rOFxn99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NTkxOA==", "bodyText": "Minor: the three logging statements in this method use three different conventions when referring to interfaces: \"does not implement ...\" vs \"does not implement an interface with name ...\" vs \"does not implement the expected interface ...\" What about unifying this?", "url": "https://github.com/hazelcast/hazelcast/pull/16684#discussion_r386995918", "createdAt": "2020-03-03T12:46:40Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "diffHunk": "@@ -385,17 +385,22 @@ private void onNonAssignableClass(String className, Class candidate) {\n             if (expectedType.isInterface()) {\n                 if (ClassLoaderUtil.implementsInterfaceWithSameName(candidate, expectedType)) {\n                     // this can happen in application containers - different Hazelcast JARs are loaded\n-                    // by different classloaders.\n+                    // by different class loaders.\n                     LOGGER.fine(\"There appears to be a classloading conflict. \"\n                             + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" implements \"\n                             + expectedType.getName() + \" from its own class loader, but it does not implement \"\n                             + expectedType.getName() + \" loaded by \" + expectedType.getClassLoader());\n                 } else {\n-                    //the class does not implement interface with the expected name.\n-                    LOGGER.fine(\"There appears to be a classloading conflict. \"\n-                            + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" does not \"\n-                            + \"implement an interface with name \" + expectedType.getName() + \" in both class loaders.\"\n-                            + \"the interface currently loaded by \" + expectedType.getClassLoader());\n+                    if (candidate.getClassLoader() != expectedType.getClassLoader()) {\n+                        //the class does not implement interface with the expected name.\n+                        LOGGER.fine(\"There appears to be a classloading conflict. \"\n+                                + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" does not \"\n+                                + \"implement an interface with name \" + expectedType.getName() + \" in both class loaders.\"\n+                                + \" The interface currently loaded by \" + expectedType.getClassLoader());\n+                    } else {\n+                        LOGGER.fine(\"The class \" + candidate.getName() + \" does not implement the expected \" +\n+                                \"interface \" + expectedType.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562b4c4ff75690a8de926c9f8a897258e7d7115c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3OTM4MQ==", "bodyText": "The text is actually unchanged from previous version, just the third case is new. I think we don't need consistency. All messages are understandable when seen in isolation... I tweaked them a bit.", "url": "https://github.com/hazelcast/hazelcast/pull/16684#discussion_r387579381", "createdAt": "2020-03-04T10:33:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ServiceLoader.java", "diffHunk": "@@ -385,17 +385,22 @@ private void onNonAssignableClass(String className, Class candidate) {\n             if (expectedType.isInterface()) {\n                 if (ClassLoaderUtil.implementsInterfaceWithSameName(candidate, expectedType)) {\n                     // this can happen in application containers - different Hazelcast JARs are loaded\n-                    // by different classloaders.\n+                    // by different class loaders.\n                     LOGGER.fine(\"There appears to be a classloading conflict. \"\n                             + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" implements \"\n                             + expectedType.getName() + \" from its own class loader, but it does not implement \"\n                             + expectedType.getName() + \" loaded by \" + expectedType.getClassLoader());\n                 } else {\n-                    //the class does not implement interface with the expected name.\n-                    LOGGER.fine(\"There appears to be a classloading conflict. \"\n-                            + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" does not \"\n-                            + \"implement an interface with name \" + expectedType.getName() + \" in both class loaders.\"\n-                            + \"the interface currently loaded by \" + expectedType.getClassLoader());\n+                    if (candidate.getClassLoader() != expectedType.getClassLoader()) {\n+                        //the class does not implement interface with the expected name.\n+                        LOGGER.fine(\"There appears to be a classloading conflict. \"\n+                                + \"Class \" + className + \" loaded by \" + candidate.getClassLoader() + \" does not \"\n+                                + \"implement an interface with name \" + expectedType.getName() + \" in both class loaders.\"\n+                                + \" The interface currently loaded by \" + expectedType.getClassLoader());\n+                    } else {\n+                        LOGGER.fine(\"The class \" + candidate.getName() + \" does not implement the expected \" +\n+                                \"interface \" + expectedType.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NTkxOA=="}, "originalCommit": {"oid": "562b4c4ff75690a8de926c9f8a897258e7d7115c"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 713, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}