{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NDk5MTI2", "number": 18016, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1NDoxNlrOFJ0dQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODoxNTo1MFrOFNkQgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQwOTYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1NDoxNlrOIMTpEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1NDoxNlrOIMTpEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NTYzMw==", "bodyText": "The check for class should be performed only for operands of OBJECT type since for all other operand types, we know for sure that they are comparable, and of the same type.", "url": "https://github.com/hazelcast/hazelcast/pull/18016#discussion_r549775633", "createdAt": "2020-12-29T16:54:16Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "diffHunk": "@@ -77,6 +78,13 @@ public Boolean eval(Row row, ExpressionEvalContext context) {\n             return null;\n         }\n \n+        Class<?> leftClass = left.getClass();\n+        Class<?> rightClass = right.getClass();\n+\n+        if (!(left instanceof Comparable && leftClass.equals(rightClass))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3bc1a44a09267cf612d22d0eb95b7c43b32f70"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQyMjIyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1OToyOVrOIMTwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1OToyOVrOIMTwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NzQxMA==", "bodyText": "It is not very obvious from the message what does \"incomparable\" mean. Better messages could be (rough examples):\n\nIf the object is not comparable: Cannot compare OBJECT value because it doesn't implement Comparable interface\nIf objects are of different types: Cannot compare two OBJECT values, because they have different classes", "url": "https://github.com/hazelcast/hazelcast/pull/18016#discussion_r549777410", "createdAt": "2020-12-29T16:59:29Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "diffHunk": "@@ -77,6 +78,13 @@ public Boolean eval(Row row, ExpressionEvalContext context) {\n             return null;\n         }\n \n+        Class<?> leftClass = left.getClass();\n+        Class<?> rightClass = right.getClass();\n+\n+        if (!(left instanceof Comparable && leftClass.equals(rightClass))) {\n+            throw QueryException.error(\"trying to compare two incomparable objects\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3bc1a44a09267cf612d22d0eb95b7c43b32f70"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQyNjA2OnYy", "diffSide": "LEFT", "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicateIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzowMDozN1rOIMTyYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzowMDozN1rOIMTyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3ODAxNg==", "bodyText": "We now do not have tests for OBJECT vs non-OBJECT compares.", "url": "https://github.com/hazelcast/hazelcast/pull/18016#discussion_r549778016", "createdAt": "2020-12-29T17:00:37Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicateIntegrationTest.java", "diffHunk": "@@ -223,7 +224,51 @@ public void testUnsupported() {\n         checkUnsupportedColumnColumn(ExpressionTypes.LOCAL_TIME, ExpressionTypes.allExcept());\n         checkUnsupportedColumnColumn(ExpressionTypes.LOCAL_DATE_TIME, ExpressionTypes.allExcept());\n         checkUnsupportedColumnColumn(ExpressionTypes.OFFSET_DATE_TIME, ExpressionTypes.allExcept());\n-        checkUnsupportedColumnColumn(ExpressionTypes.OBJECT, ExpressionTypes.allExcept());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3bc1a44a09267cf612d22d0eb95b7c43b32f70"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzY5ODU5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODoxNTo1MFrOIR2HFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODoxNTo1MFrOIR2HFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU4MzI1Mw==", "bodyText": "consider printing the actual class.\nmore diagnostics could be very useful here. for example with Portable object it would be good to know its class/factory IDs.\notherwise it's hard to tell what actually went wrong and how to fix it.", "url": "https://github.com/hazelcast/hazelcast/pull/18016#discussion_r555583253", "createdAt": "2021-01-12T08:15:50Z", "author": {"login": "jerrinot"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicate.java", "diffHunk": "@@ -77,6 +79,20 @@ public Boolean eval(Row row, ExpressionEvalContext context) {\n             return null;\n         }\n \n+        if (this.operand1.getType().getTypeFamily() == QueryDataTypeFamily.OBJECT) {\n+            Class<?> leftClass = left.getClass();\n+            Class<?> rightClass = right.getClass();\n+\n+            if (!leftClass.equals(rightClass)) {\n+                throw QueryException.error(\"Cannot compare two OBJECT values, because they have different classes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204c10d84dfb1fdfeab435fbd765e45d045ad9ae"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 59, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}