{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODQ2NDYx", "number": 16894, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozNzo1MlrODy4mmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDoxOVrOD0ob_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjgyNzc3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozNzo1MlrOGHMPBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjoyNToxMFrOGI0mXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzY3MA==", "bodyText": "It's no longer Serializable :)", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r410193670", "createdAt": "2020-04-17T12:37:52Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression;\n+\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+\n+/**\n+ * Defines expression contract for SQL.\n+ *\n+ * <p>Java serialization is needed for Jet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4601b384de7e0c2a9ed549a64b6958a2922ed1cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzU4Mw==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r411903583", "createdAt": "2020-04-21T06:25:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression;\n+\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+\n+/**\n+ * Defines expression contract for SQL.\n+ *\n+ * <p>Java serialization is needed for Jet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzY3MA=="}, "originalCommit": {"oid": "4601b384de7e0c2a9ed549a64b6958a2922ed1cc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTEyODY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoyNTo0OVrOGJp9Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1OTo0MVrOGJ4BJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3Nzc1NQ==", "bodyText": "Typo: raeched", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r412777755", "createdAt": "2020-04-22T08:25:49Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.row.ListRowBatch;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.row.RowBatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract filter executor that removes rows from the output based on a condition.\n+ * <p>\n+ * Currently the executor batches rows, and reports progress only when the batch is full or when EOS has been raeched.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODE2NQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r413008165", "createdAt": "2020-04-22T13:59:41Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.row.ListRowBatch;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.row.RowBatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract filter executor that removes rows from the output based on a condition.\n+ * <p>\n+ * Currently the executor batches rows, and reports progress only when the batch is full or when EOS has been raeched.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3Nzc1NQ=="}, "originalCommit": {"oid": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE1MDY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/FilterExec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDoxOVrOGJqKSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDowMTowNFrOGJ4FfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTEyOQ==", "bodyText": "What the res == null means here?", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r412781129", "createdAt": "2020-04-22T08:30:19Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/FilterExec.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+/**\n+ * Filter executor.\n+ */\n+public class FilterExec extends AbstractFilterExec {\n+\n+    private final Expression<Boolean> filter;\n+\n+    public FilterExec(int id, Exec upstream, Expression<Boolean> filter) {\n+        super(id, upstream);\n+\n+        this.filter = filter;\n+    }\n+\n+    @Override\n+    protected boolean eval(Row row) {\n+        Boolean res = filter.eval(row, ctx);\n+\n+        return res != null && res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwOTI3Nw==", "bodyText": "SQL may have three outcomes of predicate evaluation: true, false, or null. An example is value OR null => null\nnull results should be filtered out.", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r413009277", "createdAt": "2020-04-22T14:01:04Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/FilterExec.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+/**\n+ * Filter executor.\n+ */\n+public class FilterExec extends AbstractFilterExec {\n+\n+    private final Expression<Boolean> filter;\n+\n+    public FilterExec(int id, Exec upstream, Expression<Boolean> filter) {\n+        super(id, upstream);\n+\n+        this.filter = filter;\n+    }\n+\n+    @Override\n+    protected boolean eval(Row row) {\n+        Boolean res = filter.eval(row, ctx);\n+\n+        return res != null && res;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTEyOQ=="}, "originalCommit": {"oid": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 672, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}