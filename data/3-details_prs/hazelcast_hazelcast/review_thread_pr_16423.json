{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDQwNDM0", "number": 16423, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo1MjozNVrODXKK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0ODoyMVrODXMVzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjEwNDU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo1MjozNVrOFcUp7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjoxNzozMlrOFcY-eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0Mjg2MA==", "bodyText": "Minor: can you use Data key = (Data) mergingEntry.getRawKey(); instead, same in com.hazelcast.map.impl.recordstore.DefaultRecordStore?", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365242860", "createdAt": "2020-01-10T13:52:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "diffHunk": "@@ -1750,22 +1751,24 @@ public CacheRecord merge(CacheMergeTypes mergingEntry,\n         injectDependencies(mergePolicy);\n \n         boolean merged = false;\n-        Data key = mergingEntry.getKey();\n+        assert mergingEntry instanceof CacheMergingEntryImpl;\n+        CacheMergingEntryImpl<Object, Object> mergingEntryImpl = (CacheMergingEntryImpl<Object, Object>) mergingEntry;\n+        Data key = mergingEntryImpl.getRawKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMzY1OA==", "bodyText": "Done.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365313658", "createdAt": "2020-01-10T16:17:32Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "diffHunk": "@@ -1750,22 +1751,24 @@ public CacheRecord merge(CacheMergeTypes mergingEntry,\n         injectDependencies(mergePolicy);\n \n         boolean merged = false;\n-        Data key = mergingEntry.getKey();\n+        assert mergingEntry instanceof CacheMergingEntryImpl;\n+        CacheMergingEntryImpl<Object, Object> mergingEntryImpl = (CacheMergingEntryImpl<Object, Object>) mergingEntry;\n+        Data key = mergingEntryImpl.getRawKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0Mjg2MA=="}, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ0MzI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingValue.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0MzoxNlrOFcX6Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjoyMjo1MFrOFcZIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjIyNw==", "bodyText": "naming this method as getValue can be clearer?", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365296227", "createdAt": "2020-01-10T15:43:16Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingValue.java", "diffHunk": "@@ -22,20 +22,19 @@\n  * @param <V> the type of the value\n  * @since 3.10\n  */\n-public interface MergingValue<V> {\n+public interface MergingValue<V> extends MergingView {\n \n     /**\n      * Returns the merging value in the in-memory format of the backing data structure.\n      *\n      * @return the merging value\n      */\n-    V getValue();\n+    Object getRawValue();\n \n     /**\n      * Returns the deserialized merging value.\n      *\n-     * @param <DV> the type of the deserialized value\n      * @return the deserialized merging value\n      */\n-    <DV> DV getDeserializedValue();\n+    V getDeserializedValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTE1Ng==", "bodyText": "Thanks for spotting this. The idea was to implement your suggestion in #16159 (comment) but I clearly remembered it wrong. I will change the method name.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365299156", "createdAt": "2020-01-10T15:48:45Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingValue.java", "diffHunk": "@@ -22,20 +22,19 @@\n  * @param <V> the type of the value\n  * @since 3.10\n  */\n-public interface MergingValue<V> {\n+public interface MergingValue<V> extends MergingView {\n \n     /**\n      * Returns the merging value in the in-memory format of the backing data structure.\n      *\n      * @return the merging value\n      */\n-    V getValue();\n+    Object getRawValue();\n \n     /**\n      * Returns the deserialized merging value.\n      *\n-     * @param <DV> the type of the deserialized value\n      * @return the deserialized merging value\n      */\n-    <DV> DV getDeserializedValue();\n+    V getDeserializedValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjIyNw=="}, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMzcxNg==", "bodyText": "Done.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365313716", "createdAt": "2020-01-10T16:17:40Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingValue.java", "diffHunk": "@@ -22,20 +22,19 @@\n  * @param <V> the type of the value\n  * @since 3.10\n  */\n-public interface MergingValue<V> {\n+public interface MergingValue<V> extends MergingView {\n \n     /**\n      * Returns the merging value in the in-memory format of the backing data structure.\n      *\n      * @return the merging value\n      */\n-    V getValue();\n+    Object getRawValue();\n \n     /**\n      * Returns the deserialized merging value.\n      *\n-     * @param <DV> the type of the deserialized value\n      * @return the deserialized merging value\n      */\n-    <DV> DV getDeserializedValue();\n+    V getDeserializedValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjIyNw=="}, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxNjI5NA==", "bodyText": "And did the same with MergingEntry#getDeserializedKey. It's getKey now.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365316294", "createdAt": "2020-01-10T16:22:50Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingValue.java", "diffHunk": "@@ -22,20 +22,19 @@\n  * @param <V> the type of the value\n  * @since 3.10\n  */\n-public interface MergingValue<V> {\n+public interface MergingValue<V> extends MergingView {\n \n     /**\n      * Returns the merging value in the in-memory format of the backing data structure.\n      *\n      * @return the merging value\n      */\n-    V getValue();\n+    Object getRawValue();\n \n     /**\n      * Returns the deserialized merging value.\n      *\n-     * @param <DV> the type of the deserialized value\n      * @return the deserialized merging value\n      */\n-    <DV> DV getDeserializedValue();\n+    V getDeserializedValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjIyNw=="}, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ2MDI5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0ODoyMVrOFcYE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjoxNzo1NFrOFcY_Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODkxOA==", "bodyText": "minor: using shorter column width makes javaDoc easy to read for me, as in above copyright text.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365298918", "createdAt": "2020-01-10T15:48:21Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingView.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.spi.merge;\n+\n+/**\n+ * Marker interface representing a read-only view of a data structure for the merging process after a split-brain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMzg0Mg==", "bodyText": "Done.", "url": "https://github.com/hazelcast/hazelcast/pull/16423#discussion_r365313842", "createdAt": "2020-01-10T16:17:54Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/merge/MergingView.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.spi.merge;\n+\n+/**\n+ * Marker interface representing a read-only view of a data structure for the merging process after a split-brain.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODkxOA=="}, "originalCommit": {"oid": "0d0caf9f63c038a87128afbf6d1e99cc959eb89f"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 837, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}