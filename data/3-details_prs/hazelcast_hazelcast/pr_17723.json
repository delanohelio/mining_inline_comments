{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzQwMjA5", "number": 17723, "title": "SQL: Cancel local queries on member shutdown", "bodyText": "Before the fix, we haven't canceled queries on the member that is being shut down, assuming that other members will notice the member leave, and cancel affected queries. This approach completely missed the fact that we must also cancel the queries on the stopped member. Otherwise, user cursors may hang forever (e.g. waiting for the remote batch that will never arrive, because sockets are already closed).\nTo mitigate the problem, the following changes were introduced:\n\nWhen member shutdown is initiated, a special shutdown flag is set to QueryStateRegistry. From now on, every attempt to add a new query handle will fail\nAfter the flag is set, all currently active queries are canceled. This new cancelation routine is different from other cancelations:  it doesn't send any messages to remote members because the current member is being shutdown\n\nIt is difficult to write the precise test for the original hang, because it depends on many internal moving pieces (partition distribution, flow control, etc). Even if written, it would be flaky should we change something in the engine. Instead, a single-member test is created, that ensures that a user cursor is canceled eagerly on member shutdown.\nThere is also an unrelated change to the SqlSecurityCallbackTest - added missing test annotations.\nFixes #17714", "createdAt": "2020-10-14T12:33:22Z", "url": "https://github.com/hazelcast/hazelcast/pull/17723", "merged": true, "mergeCommit": {"oid": "e4548c84e6be2bd224e80c495dc84dbcbd64d9f0"}, "closed": true, "closedAt": "2020-10-15T10:30:24Z", "author": {"login": "devozerov"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSbi_uAH2gAyNTAzMzQwMjA5OjQ3MzkzZjFmYTM3M2E1OGY3ZjliY2VlNzVlYWM4OTE2ZTFlM2E4MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSvO7dgFqTUwOTIzNzEwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47393f1fa373a58f7f9bcee75eac8916e1e3a806", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/47393f1fa373a58f7f9bcee75eac8916e1e3a806", "committedDate": "2020-10-14T11:33:32Z", "message": "The fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ef5fb22770116a3df40313cfd476644144829b6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4ef5fb22770116a3df40313cfd476644144829b6", "committedDate": "2020-10-14T12:09:39Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6e1907916eb1504f801e473fbc586cd8d3f2c2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d6e1907916eb1504f801e473fbc586cd8d3f2c2", "committedDate": "2020-10-14T12:10:15Z", "message": "Minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6199a61cbb39949d7ecd111b72ed3aa09856f5c6", "committedDate": "2020-10-14T12:29:45Z", "message": "Minor fix."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzAzNTU2", "url": "https://github.com/hazelcast/hazelcast/pull/17723#pullrequestreview-508303556", "createdAt": "2020-10-14T12:43:42Z", "commit": {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0Mzo0MlrOHhRFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0Mzo0MlrOHhRFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NTA1Ng==", "bodyText": "Shall we remove an empty test?", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504645056", "createdAt": "2020-10-14T12:43:42Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/misc/SqlCancelOnShutdownTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.misc;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlTestInstanceFactory;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test that ensures that queries are cancelled properly in the case of member shutdown.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlCancelOnShutdownTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int KEY_COUNT = 100_000;\n+\n+    private final SqlTestInstanceFactory factory = SqlTestInstanceFactory.create();\n+\n+    private HazelcastInstance instance;\n+\n+    @Before\n+    public void before() {\n+        instance = factory.newHazelcastInstance(smallInstanceConfig());\n+\n+        IMap<Integer, Integer> map = instance.getMap(MAP_NAME);\n+        Map<Integer, Integer> localMap = new HashMap<>();\n+\n+        for (int i = 0; i < KEY_COUNT; i++) {\n+            localMap.put(i, i);\n+        }\n+\n+        map.putAll(localMap);\n+    }\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+\n+        instance = null;\n+    }\n+\n+    @Test\n+    public void testShutdown_initiator() {\n+        QueryStateRegistry stateRegistry = sqlInternalService(instance).getStateRegistry();\n+\n+        try (SqlResult result = instance.getSql().execute(\"SELECT * FROM \" + MAP_NAME)) {\n+            try {\n+                boolean first = true;\n+\n+                for (SqlRow ignore : result) {\n+                    if (first) {\n+                        assertStateCount(stateRegistry, 1);\n+\n+                        instance.shutdown();\n+\n+                        first = false;\n+                    }\n+                }\n+\n+                fail(\"Must fail\");\n+            } catch (HazelcastSqlException e) {\n+                assertEquals(SqlErrorCode.GENERIC, e.getCode());\n+                assertEquals(\"SQL query has been cancelled due to member shutdown\", e.getMessage());\n+\n+                assertStateCount(stateRegistry, 0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testShutdown_participant() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzA5NDQy", "url": "https://github.com/hazelcast/hazelcast/pull/17723#pullrequestreview-508309442", "createdAt": "2020-10-14T12:50:30Z", "commit": {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1MDozMVrOHhRXxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1MDozMVrOHhRXxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0OTY3MA==", "bodyText": "Shall we create a test with the client to check that the fix works for remote client?", "url": "https://github.com/hazelcast/hazelcast/pull/17723#discussion_r504649670", "createdAt": "2020-10-14T12:50:31Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/misc/SqlCancelOnShutdownTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.misc;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlTestInstanceFactory;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test that ensures that queries are cancelled properly in the case of member shutdown.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlCancelOnShutdownTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int KEY_COUNT = 100_000;\n+\n+    private final SqlTestInstanceFactory factory = SqlTestInstanceFactory.create();\n+\n+    private HazelcastInstance instance;\n+\n+    @Before\n+    public void before() {\n+        instance = factory.newHazelcastInstance(smallInstanceConfig());\n+\n+        IMap<Integer, Integer> map = instance.getMap(MAP_NAME);\n+        Map<Integer, Integer> localMap = new HashMap<>();\n+\n+        for (int i = 0; i < KEY_COUNT; i++) {\n+            localMap.put(i, i);\n+        }\n+\n+        map.putAll(localMap);\n+    }\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+\n+        instance = null;\n+    }\n+\n+    @Test\n+    public void testShutdown_initiator() {\n+        QueryStateRegistry stateRegistry = sqlInternalService(instance).getStateRegistry();\n+\n+        try (SqlResult result = instance.getSql().execute(\"SELECT * FROM \" + MAP_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6199a61cbb39949d7ecd111b72ed3aa09856f5c6"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe5c71c31e74dfc5154a53d742e9d1991b15606", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9fe5c71c31e74dfc5154a53d742e9d1991b15606", "committedDate": "2020-10-14T13:31:50Z", "message": "Remove empty test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MDg4NzE3", "url": "https://github.com/hazelcast/hazelcast/pull/17723#pullrequestreview-509088717", "createdAt": "2020-10-15T07:25:52Z", "commit": {"oid": "9fe5c71c31e74dfc5154a53d742e9d1991b15606"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjM3MTA4", "url": "https://github.com/hazelcast/hazelcast/pull/17723#pullrequestreview-509237108", "createdAt": "2020-10-15T10:29:43Z", "commit": {"oid": "9fe5c71c31e74dfc5154a53d742e9d1991b15606"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3261, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}