{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NDk3ODM0", "number": 17532, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOEjLBrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOEjLBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE2MjcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/topic/ClientReliableTopicOnClusterRestartTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MDo0NlrOHRYSiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo1MTo1NVrOHRY0FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTgwMQ==", "bodyText": "Can we get rid of INVOCATION_TIMEOUT_SECONDS also? It does not seem to have any value anymore.", "url": "https://github.com/hazelcast/hazelcast/pull/17532#discussion_r487985801", "createdAt": "2020-09-14T14:40:46Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/topic/ClientReliableTopicOnClusterRestartTest.java", "diffHunk": "@@ -154,35 +155,36 @@ public void shouldContinue_OnClusterRestart_whenDataLoss_LossTolerant_afterInvoc\n     }\n \n     @Test\n-    public void shouldFail_OnClusterRestart_whenDataLoss_notLossTolerant() throws InterruptedException {\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(smallInstanceConfig());\n+    public void shouldFail_OnClusterRestart_whenDataLoss_notLossTolerant() {\n+        Config config = smallInstanceConfig();\n+        String topicName = \"topic\";\n+        config.getRingbufferConfig(topicName)\n+              .setCapacity(10);\n+\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(config);\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(Long.MAX_VALUE);\n         int invocationTimeoutSeconds = 2;\n         clientConfig.setProperty(ClientProperty.INVOCATION_TIMEOUT_SECONDS.getName(), String.valueOf(invocationTimeoutSeconds));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328e170ea5c4575a2869d7ae3baa2f848091a21e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5NDM4OQ==", "bodyText": "Sure, didn't notice it.", "url": "https://github.com/hazelcast/hazelcast/pull/17532#discussion_r487994389", "createdAt": "2020-09-14T14:51:55Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/client/topic/ClientReliableTopicOnClusterRestartTest.java", "diffHunk": "@@ -154,35 +155,36 @@ public void shouldContinue_OnClusterRestart_whenDataLoss_LossTolerant_afterInvoc\n     }\n \n     @Test\n-    public void shouldFail_OnClusterRestart_whenDataLoss_notLossTolerant() throws InterruptedException {\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(smallInstanceConfig());\n+    public void shouldFail_OnClusterRestart_whenDataLoss_notLossTolerant() {\n+        Config config = smallInstanceConfig();\n+        String topicName = \"topic\";\n+        config.getRingbufferConfig(topicName)\n+              .setCapacity(10);\n+\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(config);\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(Long.MAX_VALUE);\n         int invocationTimeoutSeconds = 2;\n         clientConfig.setProperty(ClientProperty.INVOCATION_TIMEOUT_SECONDS.getName(), String.valueOf(invocationTimeoutSeconds));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTgwMQ=="}, "originalCommit": {"oid": "328e170ea5c4575a2869d7ae3baa2f848091a21e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 217, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}