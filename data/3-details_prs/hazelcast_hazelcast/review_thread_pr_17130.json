{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDcxODg5", "number": 17130, "reviewThreads": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowMzozMFrOEJG5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNToxNFrOEKGZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg1NjQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowMzozMFrOGpeWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo1NzoyMVrOGqI73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MTk5MA==", "bodyText": "I think these are not meant to be public - seems we're conflating the public \"SQL service\" with the internal \"Hazelcast SQL Service Implementation\"", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446141990", "createdAt": "2020-06-26T12:03:30Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzOTc3NQ==", "bodyText": "Removed. This service name is only required by a client implementation (which is not ready yet). It will be located in a private class.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446839775", "createdAt": "2020-06-29T07:57:21Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MTk5MA=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg1ODYyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowNDoxNlrOGpeXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo0NjozN1rOGqKpMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MjMxNw==", "bodyText": "in Jet we have @Nonnull and @Nullable annotations for all public method return types and parameters, I think this is done in IMDG as well, seems to be missing here perhaps?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446142317", "createdAt": "2020-06-26T12:04:16Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";\n+\n+    /**\n+     * Execute query.\n+     *\n+     * @param sql SQL.\n+     * @param params Parameters.\n+     * @return Cursor.\n+     */\n+    default SqlResult query(String sql, Object... params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2Nzc2Mw==", "bodyText": "Added annotations to public API. Please double-check that it looks good now.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446867763", "createdAt": "2020-06-29T08:46:37Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";\n+\n+    /**\n+     * Execute query.\n+     *\n+     * @param sql SQL.\n+     * @param params Parameters.\n+     * @return Cursor.\n+     */\n+    default SqlResult query(String sql, Object... params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MjMxNw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg1OTYxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowNDo0MVrOGpeYDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMjo0OFrOGqRIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MjQ3Ng==", "bodyText": "how about some examples here, the javadoc seems too barren?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446142476", "createdAt": "2020-06-26T12:04:41Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";\n+\n+    /**\n+     * Execute query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDE0OA==", "bodyText": "Added example and general overview to the SqlService JavaDoc. Please let me know if you have any comments.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446974148", "createdAt": "2020-06-29T13:32:48Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * Service to execute SQL queries.\n+ */\n+public interface SqlService {\n+    /** Unique service name. */\n+    String SERVICE_NAME = \"hz:impl:sqlService\";\n+\n+    /**\n+     * Execute query.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MjQ3Ng=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg2NDQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowNjoyNFrOGpea6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMjo1OFrOGqJH4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MzIxMA==", "bodyText": "is it a good idea to use Java serialization here? Given this can be sent between different minor versions", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446143210", "createdAt": "2020-06-26T12:06:24Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0Mjg0OA==", "bodyText": "Agree. This was not part of the original proposal. I added it to provide some convenience to users but didn't think about compatibility.\nRemoved now.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446842848", "createdAt": "2020-06-29T08:02:58Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0MzIxMA=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg3MDcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowODo1OVrOGpeezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0NjozOVrOGqPPOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDIwNQ==", "bodyText": "would it make sense to provide getter for primitive types? or a method that supports generics so you don't need explicit casting? i.e  <T> T get(int index)", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446144205", "createdAt": "2020-06-26T12:08:59Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * SQL row.\n+ */\n+public interface SqlRow {\n+    /**\n+     * Gets the value of the column by index.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column.\n+     *\n+     * @see #getRowMetadata()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnIndex Column index, 0-based.\n+     * @return Value of the column.\n+     * @throws IndexOutOfBoundsException If column index is out of bounds.\n+     */\n+    Object getObject(int columnIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MzAzMw==", "bodyText": "Reverted back to <T> T getObject(...) approach, as it seems that the community is in agreement that it is more user-friendly.\nAlso, added <T> T getObject(String columnName) overload for convenience.\nThere will be no specialized methods in the first release (e.g. getInt(...)) because it requires additional considerations on the desired behavior (e.g. how to deal with nullability, whether to perform implicit conversions, etc).", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446943033", "createdAt": "2020-06-29T12:46:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+/**\n+ * SQL row.\n+ */\n+public interface SqlRow {\n+    /**\n+     * Gets the value of the column by index.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column.\n+     *\n+     * @see #getRowMetadata()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnIndex Column index, 0-based.\n+     * @return Value of the column.\n+     * @throws IndexOutOfBoundsException If column index is out of bounds.\n+     */\n+    Object getObject(int columnIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDIwNQ=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg3Mzc5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowOTo1OFrOGpegrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMzoxMFrOGqJIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDY4NA==", "bodyText": "See same concern about SqlQuery", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446144684", "createdAt": "2020-06-26T12:09:58Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0Mjk2NA==", "bodyText": "Removed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446842964", "createdAt": "2020-06-29T08:03:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDY4NA=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTEzNzExOnYy", "diffSide": "RIGHT", "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo0MDo1N1rOGprB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0NDozOVrOGqPKVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0OTc5MQ==", "bodyText": "Shouldn't we set the default value using default attribute in the xs:element tag?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446349791", "createdAt": "2020-06-26T18:40:57Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,54 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        Normally the value of this parameter should be equal to the number of CPU cores.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"operation-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for network operations processing.\n+                        When Hazelcast members execute a query, they send commands to each other over the network to coordinate\n+                        the execution. This includes requests to start or stop query execution, or a request to process a batch\n+                        of data. These commands are processed in a separate operation thread pool, to avoid frequent interruption\n+                        of running query fragments.\n+                        The default value should be good enough for the most workloads. You may want to increase the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTc4MA==", "bodyText": "Added the default value (-1)", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446941780", "createdAt": "2020-06-29T12:44:39Z", "author": {"login": "devozerov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,54 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        Normally the value of this parameter should be equal to the number of CPU cores.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"operation-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for network operations processing.\n+                        When Hazelcast members execute a query, they send commands to each other over the network to coordinate\n+                        the execution. This includes requests to start or stop query execution, or a request to process a batch\n+                        of data. These commands are processed in a separate operation thread pool, to avoid frequent interruption\n+                        of running query fragments.\n+                        The default value should be good enough for the most workloads. You may want to increase the default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0OTc5MQ=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTEzOTMyOnYy", "diffSide": "RIGHT", "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo0MTo0NFrOGprDSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0NDowMlrOGqPIzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDE1NA==", "bodyText": "We have similar setting in Jet and the default value is -1 and it means \"equal to cpu count\". You have the default in java code, this way you can't have a placeholder in hazelcast-default.xml/yaml. Btw, the settings are also missing there.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446350154", "createdAt": "2020-06-26T18:41:44Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,54 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        Normally the value of this parameter should be equal to the number of CPU cores.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTM4OQ==", "bodyText": "Applied the same approach as in Jet. Now, -1 is used as a default. Thanks for the suggestion.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446941389", "createdAt": "2020-06-29T12:44:02Z", "author": {"login": "devozerov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,54 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:unsignedInt\" minOccurs=\"0\" maxOccurs=\"1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        Normally the value of this parameter should be equal to the number of CPU cores.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDE1NA=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE1MDQxOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/SqlToQueryType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo0NTo1MVrOGprKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDowOTozNFrOGqLkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MTk5Mg==", "bodyText": "Why don't we use the same name for both?\nAlso intuitively, I would associate OBJECT with Java Object and ANY with Java ?, as in Collection<?>, not sure if in the SQL context these are the same.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446351992", "createdAt": "2020-06-26T18:45:51Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/SqlToQueryType.java", "diffHunk": "@@ -66,6 +66,9 @@\n         CALCITE_TO_HZ.put(SqlTypeName.DATE, QueryDataType.DATE);\n         CALCITE_TO_HZ.put(SqlTypeName.TIMESTAMP, QueryDataType.TIMESTAMP);\n         CALCITE_TO_HZ.put(SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, QueryDataType.TIMESTAMP_WITH_TZ_OFFSET_DATE_TIME);\n+\n+        HZ_TO_CALCITE.put(QueryDataTypeFamily.OBJECT, SqlTypeName.ANY);\n+        CALCITE_TO_HZ.put(SqlTypeName.ANY, QueryDataType.OBJECT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MjgyNw==", "bodyText": "This will be clarified as a part of the expressions PR. There are no expressions support in the current PR. It is harmless in the current PR.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446882827", "createdAt": "2020-06-29T10:09:34Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/SqlToQueryType.java", "diffHunk": "@@ -66,6 +66,9 @@\n         CALCITE_TO_HZ.put(SqlTypeName.DATE, QueryDataType.DATE);\n         CALCITE_TO_HZ.put(SqlTypeName.TIMESTAMP, QueryDataType.TIMESTAMP);\n         CALCITE_TO_HZ.put(SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, QueryDataType.TIMESTAMP_WITH_TZ_OFFSET_DATE_TIME);\n+\n+        HZ_TO_CALCITE.put(QueryDataTypeFamily.OBJECT, SqlTypeName.ANY);\n+        CALCITE_TO_HZ.put(SqlTypeName.ANY, QueryDataType.OBJECT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MTk5Mg=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE1ODA2OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/QueryConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo0ODo0MFrOGprPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MzoxNVrOGqPGwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzIzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // 5. Collect original field names.\n          \n          \n            \n                    List<String> fieldNames = new ArrayList<>(root.fields.size());\n          \n          \n            \n            \n          \n          \n            \n                    for (Pair<Integer, String> field : root.fields) {\n          \n          \n            \n                        fieldNames.add(field.right);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return new QueryConvertResult(relTrimmed, fieldNames);\n          \n          \n            \n                    return new QueryConvertResult(relTrimmed, Pair.right(root.fields));", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446353238", "createdAt": "2020-06-26T18:48:40Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/QueryConverter.java", "diffHunk": "@@ -85,7 +89,14 @@ public RelNode convert(SqlNode node) {\n         // primarily in projections. This steps removes unused fields from the tree.\n         RelNode relTrimmed = converter.trimUnusedFields(true, relDecorrelated);\n \n-        return relTrimmed;\n+        // 5. Collect original field names.\n+        List<String> fieldNames = new ArrayList<>(root.fields.size());\n+\n+        for (Pair<Integer, String> field : root.fields) {\n+            fieldNames.add(field.right);\n+        }\n+\n+        return new QueryConvertResult(relTrimmed, fieldNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDg2NQ==", "bodyText": "Applied.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446940865", "createdAt": "2020-06-29T12:43:15Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/QueryConverter.java", "diffHunk": "@@ -85,7 +89,14 @@ public RelNode convert(SqlNode node) {\n         // primarily in projections. This steps removes unused fields from the tree.\n         RelNode relTrimmed = converter.trimUnusedFields(true, relDecorrelated);\n \n-        return relTrimmed;\n+        // 5. Collect original field names.\n+        List<String> fieldNames = new ArrayList<>(root.fields.size());\n+\n+        for (Pair<Integer, String> field : root.fields) {\n+            fieldNames.add(field.right);\n+        }\n+\n+        return new QueryConvertResult(relTrimmed, fieldNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzIzOA=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTE5MDM0OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTowMDoyM1rOGprjwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0Mjo0NlrOGqPFmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1ODQ2NQ==", "bodyText": "This reduces the runtime form 60 to 40s on my machine:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (long i = 0; i < DATA_SET_SIZE; i++) {\n          \n          \n            \n                        map.put(i, i);\n          \n          \n            \n                    }\n          \n          \n            \n                    map.putAll(LongStream.range(0, dataSetSize).boxed().collect(Collectors.toMap(this::key, this::value)));", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446358465", "createdAt": "2020-06-26T19:00:23Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.exec.BlockingExec;\n+import com.hazelcast.sql.impl.exec.FaultyExec;\n+import com.hazelcast.sql.impl.exec.scan.MapScanExec;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Nonnull;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test for different error conditions.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlErrorTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int DATA_SET_SIZE = 100;\n+\n+    private final TestHazelcastInstanceFactory factory = new TestHazelcastInstanceFactory(2);\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+    }\n+\n+    @Test\n+    public void testTimeout() {\n+        // Start two instances and fill them with data\n+        HazelcastInstance instance1 = factory.newHazelcastInstance();\n+        HazelcastInstance instance2 = factory.newHazelcastInstance();\n+\n+        IMap<Long, Long> map = instance1.getMap(MAP_NAME);\n+\n+        for (long i = 0; i < DATA_SET_SIZE; i++) {\n+            map.put(i, i);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDU3MA==", "bodyText": "Applied batched putAll as suggested.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446940570", "createdAt": "2020-06-29T12:42:46Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.exec.BlockingExec;\n+import com.hazelcast.sql.impl.exec.FaultyExec;\n+import com.hazelcast.sql.impl.exec.scan.MapScanExec;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Nonnull;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test for different error conditions.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlErrorTest extends SqlTestSupport {\n+\n+    private static final String MAP_NAME = \"map\";\n+    private static final int DATA_SET_SIZE = 100;\n+\n+    private final TestHazelcastInstanceFactory factory = new TestHazelcastInstanceFactory(2);\n+\n+    @After\n+    public void after() {\n+        factory.shutdownAll();\n+    }\n+\n+    @Test\n+    public void testTimeout() {\n+        // Start two instances and fill them with data\n+        HazelcastInstance instance1 = factory.newHazelcastInstance();\n+        HazelcastInstance instance2 = factory.newHazelcastInstance();\n+\n+        IMap<Long, Long> map = instance1.getMap(MAP_NAME);\n+\n+        for (long i = 0; i < DATA_SET_SIZE; i++) {\n+            map.put(i, i);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1ODQ2NQ=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIxMzYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTowOToyMFrOGpryyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNzozNFrOGqtCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw==", "bodyText": "Same comment twice. Many more instances of this in this PR. To me it's just extra noise, no added value.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446362313", "createdAt": "2020-06-26T19:09:20Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMDg5OQ==", "bodyText": "I agree that these comments do not add any value. At the same time, JavaDoc without body or return tag may look aesthetically inconsistent in both IDE, or when converted to HTML. E.g. JDK chooses the approach with repetition. When you look at missing part of JavaDoc the question is whether this is a bug or an intentional omission. With explicit docs it is clear - there is just no more useful information to add.\nTherefore I'd prefer to keep it as is, given that we do not have any hard project-wide rules for one or the other approach, and both formatting options could be found in different parts of the API.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447020899", "createdAt": "2020-06-29T14:37:06Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MDA0NQ==", "bodyText": "given that this is the entry point to the API, I think it warrants more than a trivial comment? Perhaps a sentence or two about it wouldn't hurt.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447070045", "createdAt": "2020-06-29T15:44:14Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMjU4Ng==", "bodyText": "Rendered in IntelliJ, how aesthetically consistent is this?\n\nMaybe we could replace the @return with @see SqlService. That's also duplicate, one can click on the return type, but it suggests that there's something interesting and related in there.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447232586", "createdAt": "2020-06-29T20:25:49Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMzI0NQ==", "bodyText": "Also, should be marked with @NonNull.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447233245", "createdAt": "2020-06-29T20:27:07Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMTI1MA==", "bodyText": "We do not go into details in HazelcastInstance, because extended JavaDocs are provided in the returned objects. I added a reference to SqlService in the method's JavaDoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447431250", "createdAt": "2020-06-30T06:07:34Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,13 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns SQL service.\n+     *\n+     * @return SQL service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjMxMw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIyMzY0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMzowN1rOGpr5FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDozNzozMlrOGqUAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzkyNQ==", "bodyText": "Zero-value comment. It's impl class, it's not required by checkstyle. I'd rather remove all the comments in this class...", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446363925", "createdAt": "2020-06-26T19:13:07Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "diffHunk": "@@ -114,6 +115,13 @@\n      */\n     SplitBrainProtectionService getSplitBrainProtectionService();\n \n+    /**\n+     * Gets SQL service.\n+     *\n+     * @return the SQL service\n+     */\n+    SqlServiceImpl getSqlService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMTIyNQ==", "bodyText": "Resolving this to keep the discussion in a single place (see the comment above).", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447021225", "createdAt": "2020-06-29T14:37:32Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "diffHunk": "@@ -114,6 +115,13 @@\n      */\n     SplitBrainProtectionService getSplitBrainProtectionService();\n \n+    /**\n+     * Gets SQL service.\n+     *\n+     * @return the SQL service\n+     */\n+    SqlServiceImpl getSqlService();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzkyNQ=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDY1NzU1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoyMDowMFrOGqHwgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MjoyNlrOGqPEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMDQ4MQ==", "bodyText": "These checks are perfectly handled by the list implementation, throw the same type of exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (index < 0) {\n          \n          \n            \n                        throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    if (index >= columns.size()) {\n          \n          \n            \n                        throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return columns.get(index);\n          \n          \n            \n                    return columns.get(index);\n          \n      \n    \n    \n  \n\nWe should also document that we throw in case of and out-of-bounds index, some other methods return null.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446820481", "createdAt": "2020-06-29T07:20:00Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MDMzOQ==", "bodyText": "As discussed, these checks are intentional to make the API behavior stable irrespective of the underlying implementation.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446940339", "createdAt": "2020-06-29T12:42:26Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMDQ4MQ=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDY2NDA1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoyMjowNVrOGqH0Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MTo0NFrOGqPC_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMTQ2Ng==", "bodyText": "This can be simplified to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Integer index = nameToIndex.get(name);\n          \n          \n            \n            \n          \n          \n            \n                    return index != null ? index : COLUMN_NOT_FOUND;\n          \n          \n            \n                    return nameToIndex.getOrDefault(name, COLUMN_NOT_FOUND);\n          \n      \n    \n    \n  \n\nBut I'm not sure this is a good design. If one refers to a column by name, it's a programming error to use a name not present in the query. I don't expect people to use this method to probe for the existence of a column.\nThe SqlRow class only has index-based access to values, if one uses:\nint fooIndex = metadata.findColumn('foo_column');\nObject value = row.getObject(fooIndex);\nhe will get \"column index out of range: -1\" instead of \"column 'foo_column' doesn't exist\".", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446821466", "createdAt": "2020-06-29T07:22:05Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);\n+    }\n+\n+    /**\n+     * Find index of the column with the given name. Returned index can be used to get column value\n+     * from {@link SqlRow}.\n+     *\n+     * @see SqlRow\n+     * @param name Column name (case sensitive).\n+     * @return Column index or {@link #COLUMN_NOT_FOUND} if a column with the given name is not found.\n+     */\n+    public int findColumn(String name) {\n+        Integer index = nameToIndex.get(name);\n+\n+        return index != null ? index : COLUMN_NOT_FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzOTkwMQ==", "bodyText": "This is a common practice in Java. See String.indexOf or ResultSet.findColumn.\nAccess by column name has been added: SqlRow#getObject(String)", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446939901", "createdAt": "2020-06-29T12:41:44Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);\n+    }\n+\n+    /**\n+     * Find index of the column with the given name. Returned index can be used to get column value\n+     * from {@link SqlRow}.\n+     *\n+     * @see SqlRow\n+     * @param name Column name (case sensitive).\n+     * @return Column index or {@link #COLUMN_NOT_FOUND} if a column with the given name is not found.\n+     */\n+    public int findColumn(String name) {\n+        Integer index = nameToIndex.get(name);\n+\n+        return index != null ? index : COLUMN_NOT_FOUND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMTQ2Ng=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDY2NTU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoyMjozNlrOGqH1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MDowMlrOGqO-7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMTcwNw==", "bodyText": "We should specify here whether the name is case sensitive.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446821707", "createdAt": "2020-06-29T07:22:36Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);\n+    }\n+\n+    /**\n+     * Find index of the column with the given name. Returned index can be used to get column value\n+     * from {@link SqlRow}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzODg2MQ==", "bodyText": "It is specified in the parameter JavaDoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446938861", "createdAt": "2020-06-29T12:40:02Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata implements Serializable {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private static final long serialVersionUID = 1595632576318481583L;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.\n+     * @return Column metadata.\n+     */\n+    @Nonnull\n+    public SqlColumnMetadata getColumn(int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Column index cannot be negative: \" + index);\n+        }\n+\n+        if (index >= columns.size()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of bounds: \" + index);\n+        }\n+\n+        return columns.get(index);\n+    }\n+\n+    /**\n+     * Find index of the column with the given name. Returned index can be used to get column value\n+     * from {@link SqlRow}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMTcwNw=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDczNjYzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0NDowNlrOGqIfRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0MDoxMlrOGqO_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjQ1Mg==", "bodyText": "We could use the sql syntax name + ' ' + type. Also the [] suggest a collection, but it's a tuple, i'd just use none.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446832452", "createdAt": "2020-06-29T07:44:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata implements Serializable {\n+\n+    private static final long serialVersionUID = 1522422443380097801L;\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    public SqlColumnMetadata(String name, SqlColumnType type) {\n+        assert name != null;\n+        assert type != null;\n+\n+        this.name = name;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Get column name.\n+     *\n+     * @return Column name.\n+     */\n+    @Nonnull\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets column type.\n+     *\n+     * @return Column type.\n+     */\n+    @Nonnull\n+    public SqlColumnType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        SqlColumnMetadata that = (SqlColumnMetadata) o;\n+\n+        if (!name.equals(that.name)) {\n+            return false;\n+        }\n+\n+        return type == that.type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = name.hashCode();\n+\n+        result = 31 * result + type.hashCode();\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return '[' + name + ':' + type + ']';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzODk3Nw==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446938977", "createdAt": "2020-06-29T12:40:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.io.Serializable;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata implements Serializable {\n+\n+    private static final long serialVersionUID = 1522422443380097801L;\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    public SqlColumnMetadata(String name, SqlColumnType type) {\n+        assert name != null;\n+        assert type != null;\n+\n+        this.name = name;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Get column name.\n+     *\n+     * @return Column name.\n+     */\n+    @Nonnull\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets column type.\n+     *\n+     * @return Column type.\n+     */\n+    @Nonnull\n+    public SqlColumnType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        SqlColumnMetadata that = (SqlColumnMetadata) o;\n+\n+        if (!name.equals(that.name)) {\n+            return false;\n+        }\n+\n+        return type == that.type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = name.hashCode();\n+\n+        result = 31 * result + type.hashCode();\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return '[' + name + ':' + type + ']';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjQ1Mg=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc1NzgwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo1MDowM1rOGqIroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDoxMDoxNFrOGqLlGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTYxNg==", "bodyText": "The getObject method declares to throw IOOBE in this case.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446835616", "createdAt": "2020-06-29T07:50:03Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+/**\n+ * Default implementation of the SQL row which is exposed to users. We merely wrap the internal row, but add more checks which\n+ * is important for user-facing code, but which could cause performance degradation if implemented in the internal classes.\n+ */\n+public class SqlRowImpl implements SqlRow {\n+\n+    private final SqlRowMetadata rowMetadata;\n+    private final Row row;\n+\n+    public SqlRowImpl(SqlRowMetadata rowMetadata, Row row) {\n+        this.rowMetadata = rowMetadata;\n+        this.row = row;\n+    }\n+\n+    @Override\n+    public Object getObject(int columnIndex) {\n+        checkIndex(columnIndex);\n+\n+        return row.get(columnIndex);\n+    }\n+\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    private void checkIndex(int index) {\n+        if (index < 0 || index >= rowMetadata.getColumnCount()) {\n+            throw new IllegalArgumentException(\"Column index is out of range: \" + index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MzA5OQ==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446883099", "createdAt": "2020-06-29T10:10:14Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+/**\n+ * Default implementation of the SQL row which is exposed to users. We merely wrap the internal row, but add more checks which\n+ * is important for user-facing code, but which could cause performance degradation if implemented in the internal classes.\n+ */\n+public class SqlRowImpl implements SqlRow {\n+\n+    private final SqlRowMetadata rowMetadata;\n+    private final Row row;\n+\n+    public SqlRowImpl(SqlRowMetadata rowMetadata, Row row) {\n+        this.rowMetadata = rowMetadata;\n+        this.row = row;\n+    }\n+\n+    @Override\n+    public Object getObject(int columnIndex) {\n+        checkIndex(columnIndex);\n+\n+        return row.get(columnIndex);\n+    }\n+\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    private void checkIndex(int index) {\n+        if (index < 0 || index >= rowMetadata.getColumnCount()) {\n+            throw new IllegalArgumentException(\"Column index is out of range: \" + index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTYxNg=="}, "originalCommit": {"oid": "1d6cc1f85044ecba2e1b6ae8ea95c2397348e6cd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc5NDEyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo1OTo0M1rOGqJBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowMTo0OVrOGqSaRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MTEwMw==", "bodyText": "SqlErrorCode is not in this PR, but I think we should remove the OK constant from there. This was used in C-style APIs where a return value was used instead of exceptions. The constant is unused.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446841103", "createdAt": "2020-06-29T07:59:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.\n+ */\n+public class SqlException extends HazelcastException {\n+\n+    private final UUID originatingMemberId;\n+    private final int code;\n+\n+    public SqlException(UUID originatingMemberId, int code, String message, Throwable cause) {\n+        super(message, cause);\n+\n+        this.originatingMemberId = originatingMemberId;\n+        this.code = code;\n+    }\n+\n+    /**\n+     * @return ID of the member where the error occurred.\n+     */\n+    public UUID getOriginatingMemberId() {\n+        return originatingMemberId;\n+    }\n+\n+    /**\n+     * @return Error code from {@link SqlErrorCode}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09c02d52d9ef89cdedc657966b553adac0e036d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTAxNQ==", "bodyText": "Removed OK.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446995015", "createdAt": "2020-06-29T14:01:49Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.\n+ */\n+public class SqlException extends HazelcastException {\n+\n+    private final UUID originatingMemberId;\n+    private final int code;\n+\n+    public SqlException(UUID originatingMemberId, int code, String message, Throwable cause) {\n+        super(message, cause);\n+\n+        this.originatingMemberId = originatingMemberId;\n+        this.code = code;\n+    }\n+\n+    /**\n+     * @return ID of the member where the error occurred.\n+     */\n+    public UUID getOriginatingMemberId() {\n+        return originatingMemberId;\n+    }\n+\n+    /**\n+     * @return Error code from {@link SqlErrorCode}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MTEwMw=="}, "originalCommit": {"oid": "e09c02d52d9ef89cdedc657966b553adac0e036d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgwODE0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMzo1MlrOGqJJqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDozMzoyOFrOGqT0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MzMwNg==", "bodyText": "Not just during execution, but also parsing or anything that occurred in the sql subsystem.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446843306", "createdAt": "2020-06-29T08:03:52Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MDQ0OA==", "bodyText": "But parsing is a part of query execution, isn't it?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446980448", "createdAt": "2020-06-29T13:41:55Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MzMwNg=="}, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjgxOQ==", "bodyText": "Well, depends on how you look at it, but you can say so. I leave it up to you, this comment is very minor.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446986819", "createdAt": "2020-06-29T13:50:35Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MzMwNg=="}, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxODE0NQ==", "bodyText": "I propose to leave it as is since most users will not even aware of the parsing step as a separate internal execution stage.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447018145", "createdAt": "2020-06-29T14:33:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MzMwNg=="}, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg0NTAyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDozMlrOGqJgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDozMjoyOVrOGqTxyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.parameters = parameters;\n          \n          \n            \n                    this.parameters = new ArrayList<>(parameters);\n          \n      \n    \n    \n  \n\nOtherwise the copy will share the parameter list, and this is contrary to what setParameters says.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446849027", "createdAt": "2020-06-29T08:14:32Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNzQxNg==", "bodyText": "Fixed, thanks for spotting this.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447017416", "createdAt": "2020-06-29T14:32:29Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTAyNw=="}, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg4NTA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyNToyMFrOGqJ37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0NDoxMVrOGqRn0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTE0OQ==", "bodyText": "The main use case here is to cancel the query IMO. It's not even strictly necessary to close the result after it is fully iterated or after an exception in a finally clause. So I'd say that in the first sentence:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Release the resources associated with the query result.\n          \n          \n            \n                 * Cancel the query on the cluster and release the resources associated with the query result.\n          \n      \n    \n    \n  \n\nI think it might be also useful to say here that if the client or submitting member crashes, the query will be cancelled automatically on the cluster.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446855149", "createdAt": "2020-06-29T08:25:20Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+\n+/**\n+ * SQL query result. Represents a stream of rows.\n+ * <p>\n+ * Use {@link #iterator()} to iterate over rows. The iterator could be requested only once.\n+ * <p>\n+ * Use {@link #close()} to release the resources associated with the result.\n+ * <p>\n+ * Typical usage pattern:\n+ * <pre>\n+ * try (SqlResult result = hazelcastInstance.getSqlQuery().query(\"SELECT ...\")) {\n+ *     for (SqlRow row : result) {\n+ *         // Process the row.\n+ *     }\n+ * }\n+ * </pre>\n+ *\n+ * @see #iterator()\n+ * @see #close()\n+ */\n+public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+    /**\n+     * Gets row metadata.\n+     *\n+     * @return Row metadata.\n+     */\n+    SqlRowMetadata getRowMetadata();\n+\n+    /**\n+     * Returns the iterator over query rows.\n+     * <p>\n+     * The iterator may be requested only once.\n+     *\n+     * @return Iterator.\n+     * @throws IllegalStateException If the method is invoked more than once.\n+     * @throws SqlException In case of an SQL-related error condition.\n+     */\n+    @Override\n+    @Nonnull\n+    Iterator<SqlRow> iterator();\n+\n+    /**\n+     * Release the resources associated with the query result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MjA5Ng==", "bodyText": "Not really. Cancellation is not common use case. The aim of this docs is to stress out that the query result is stateful, and the state must be released via a call to close. That is, it is used to avoid resource leaks in the first place, no to do a cancellation. Moreover, a call to close may or may not trigger a cancellation. Therefore, the proposed change is not accurate.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446982096", "createdAt": "2020-06-29T13:44:11Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+\n+/**\n+ * SQL query result. Represents a stream of rows.\n+ * <p>\n+ * Use {@link #iterator()} to iterate over rows. The iterator could be requested only once.\n+ * <p>\n+ * Use {@link #close()} to release the resources associated with the result.\n+ * <p>\n+ * Typical usage pattern:\n+ * <pre>\n+ * try (SqlResult result = hazelcastInstance.getSqlQuery().query(\"SELECT ...\")) {\n+ *     for (SqlRow row : result) {\n+ *         // Process the row.\n+ *     }\n+ * }\n+ * </pre>\n+ *\n+ * @see #iterator()\n+ * @see #close()\n+ */\n+public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+    /**\n+     * Gets row metadata.\n+     *\n+     * @return Row metadata.\n+     */\n+    SqlRowMetadata getRowMetadata();\n+\n+    /**\n+     * Returns the iterator over query rows.\n+     * <p>\n+     * The iterator may be requested only once.\n+     *\n+     * @return Iterator.\n+     * @throws IllegalStateException If the method is invoked more than once.\n+     * @throws SqlException In case of an SQL-related error condition.\n+     */\n+    @Override\n+    @Nonnull\n+    Iterator<SqlRow> iterator();\n+\n+    /**\n+     * Release the resources associated with the query result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTE0OQ=="}, "originalCommit": {"oid": "753a610f8d690121195b06a65f8894117074ac70"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDk0OTMxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo0MTo0M1rOGqKd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDozMjoxMlrOGqTw_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NDg1NA==", "bodyText": "Wouldn't it be easier to have the field always non-null and avoid all the null checking? SqlServiceImpl converts it from null to an empty collection again..", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446864854", "createdAt": "2020-06-29T08:41:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query.\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query.\n+     * @return This instance for chaining.\n+     */\n+    public SqlQuery setSql(String sql) {\n+        if (sql == null || sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be null or empty.\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets query parameters.\n+     *\n+     * @return Query parameters.\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters != null ? parameters : Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d336d960ada0ebef7a550d117bfd62b31e126a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNzIxMw==", "bodyText": "Agree, fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447017213", "createdAt": "2020-06-29T14:32:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of the SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query.\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query.\n+     * @return This instance for chaining.\n+     */\n+    public SqlQuery setSql(String sql) {\n+        if (sql == null || sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be null or empty.\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets query parameters.\n+     *\n+     * @return Query parameters.\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters != null ? parameters : Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NDg1NA=="}, "originalCommit": {"oid": "c6d336d960ada0ebef7a550d117bfd62b31e126a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDk4OTc2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/extract/GenericFieldExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1MjozMlrOGqK2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0NTo1OVrOGqRtHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + path + \"\\\": \" + e.getMessage(), e);\n          \n          \n            \n                            + path + \"\\\": \" + e, e);\n          \n      \n    \n    \n  \n\nIf the e is a NPE, we'll say: Failed to extract map entry key field \"foo\": null. The exception class is as important as the message, the message often adds information to the name. Also the message of an index-out-of-bounds-exc is just index=n, size=m, which looks weird per se.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446871132", "createdAt": "2020-06-29T08:52:32Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/extract/GenericFieldExtractor.java", "diffHunk": "@@ -44,10 +45,14 @@ public GenericFieldExtractor(\n     @Override\n     public Object get() {\n         try {\n-            return type.convert(extractors.extract(getTarget(), path, null));\n+            return type.normalize(extractors.extract(getTarget(), path, null));\n+        } catch (QueryDataTypeMismatchException e) {\n+            throw QueryException.dataException(\"Failed to extract map entry \" + (key ? \"key\" : \"value\") + \" field \\\"\"\n+                + path + \"\\\" because of type mismatch [expectedClass=\" + e.getExpectedClass().getName()\n+                + \", actualClass=\" + e.getActualClass().getName() + ']');\n         } catch (Exception e) {\n-            throw QueryException.dataException(\"Cannot extract \" + (key ? \"key\" : \"value\") + \" field \\\"\" + path\n-                + \"\\\" of type \" + type + \": \" + e.getMessage(), e);\n+            throw QueryException.dataException(\"Failed to extract map entry \" + (key ? \"key\" : \"value\") + \" field \\\"\"\n+                + path + \"\\\": \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d336d960ada0ebef7a550d117bfd62b31e126a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MzQ1NA==", "bodyText": "The exception class is accessible from getCause().", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446983454", "createdAt": "2020-06-29T13:45:59Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/extract/GenericFieldExtractor.java", "diffHunk": "@@ -44,10 +45,14 @@ public GenericFieldExtractor(\n     @Override\n     public Object get() {\n         try {\n-            return type.convert(extractors.extract(getTarget(), path, null));\n+            return type.normalize(extractors.extract(getTarget(), path, null));\n+        } catch (QueryDataTypeMismatchException e) {\n+            throw QueryException.dataException(\"Failed to extract map entry \" + (key ? \"key\" : \"value\") + \" field \\\"\"\n+                + path + \"\\\" because of type mismatch [expectedClass=\" + e.getExpectedClass().getName()\n+                + \", actualClass=\" + e.getActualClass().getName() + ']');\n         } catch (Exception e) {\n-            throw QueryException.dataException(\"Cannot extract \" + (key ? \"key\" : \"value\") + \" field \\\"\" + path\n-                + \"\\\" of type \" + type + \": \" + e.getMessage(), e);\n+            throw QueryException.dataException(\"Failed to extract map entry \" + (key ? \"key\" : \"value\") + \" field \\\"\"\n+                + path + \"\\\": \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTEzMg=="}, "originalCommit": {"oid": "c6d336d960ada0ebef7a550d117bfd62b31e126a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIwOTUyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0MTo1MVrOGqM7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozMzoxMVrOGqRJqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTE4Nw==", "bodyText": "I think it's a good convention to use something like queryTimeoutMillis because if you're editing the config file, the unit is not  always obvious. I think this convention is followed in rest of the config.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446905187", "createdAt": "2020-06-29T11:41:51Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = Runtime.getRuntime().availableProcessors();\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = Math.min(8, Runtime.getRuntime().availableProcessors());\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeout = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * Normally the value of this parameter should be equal to the number of CPU cores.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@link #DEFAULT_EXECUTOR_POOL_SIZE}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        checkPositive(executorPoolSize, \"Executor pool size should be positive\");\n+\n+        this.executorPoolSize = executorPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of threads responsible for network operations processing.\n+     *\n+     * @return Number of threads responsible for network operations processing.\n+     */\n+    public int getOperationPoolSize() {\n+        return operationPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for network operations processing.\n+     * <p>\n+     * When Hazelcast members execute a query, they send commands to each other over the network to coordinate the execution.\n+     * This includes requests to start or stop query execution, or a request to process a batch of data. These commands are\n+     * processed in a separate operation thread pool, to avoid frequent interruption of running query fragments.\n+     * <p>\n+     * The default value should be good enough for the most workloads. You may want to increase the default value if you run\n+     * very small queries, or the machine has a big number of CPU cores.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     *\n+     * <p>\n+     * Defaults to {@link #DEFAULT_OPERATION_POOL_SIZE}.\n+     *\n+     * @param operationPoolSize Number of threads responsible for network operations processing.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setOperationPoolSize(int operationPoolSize) {\n+        checkPositive(operationPoolSize, \"Operation pool size should be positive\");\n+\n+        this.operationPoolSize = operationPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the timeout in milliseconds that is applied to queries without an explicit timeout.\n+     *\n+     * @return Timeout in milliseconds.\n+     */\n+    public long getQueryTimeout() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NDM3OQ==", "bodyText": "Applied the suggestion.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446974379", "createdAt": "2020-06-29T13:33:11Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = Runtime.getRuntime().availableProcessors();\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = Math.min(8, Runtime.getRuntime().availableProcessors());\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeout = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * Normally the value of this parameter should be equal to the number of CPU cores.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@link #DEFAULT_EXECUTOR_POOL_SIZE}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        checkPositive(executorPoolSize, \"Executor pool size should be positive\");\n+\n+        this.executorPoolSize = executorPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of threads responsible for network operations processing.\n+     *\n+     * @return Number of threads responsible for network operations processing.\n+     */\n+    public int getOperationPoolSize() {\n+        return operationPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for network operations processing.\n+     * <p>\n+     * When Hazelcast members execute a query, they send commands to each other over the network to coordinate the execution.\n+     * This includes requests to start or stop query execution, or a request to process a batch of data. These commands are\n+     * processed in a separate operation thread pool, to avoid frequent interruption of running query fragments.\n+     * <p>\n+     * The default value should be good enough for the most workloads. You may want to increase the default value if you run\n+     * very small queries, or the machine has a big number of CPU cores.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     *\n+     * <p>\n+     * Defaults to {@link #DEFAULT_OPERATION_POOL_SIZE}.\n+     *\n+     * @param operationPoolSize Number of threads responsible for network operations processing.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setOperationPoolSize(int operationPoolSize) {\n+        checkPositive(operationPoolSize, \"Operation pool size should be positive\");\n+\n+        this.operationPoolSize = operationPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the timeout in milliseconds that is applied to queries without an explicit timeout.\n+     *\n+     * @return Timeout in milliseconds.\n+     */\n+    public long getQueryTimeout() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTE4Nw=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIxNDA1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0MzowMlrOGqM97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Mzo1M1rOGqSDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTgzOQ==", "bodyText": "should make the class final as it's public", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446905839", "createdAt": "2020-06-29T11:43:02Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4OTE5Mw==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446989193", "createdAt": "2020-06-29T13:53:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTgzOQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIxNDk5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0MzoxNVrOGqM-cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Mzo0MFrOGqSC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTk3MA==", "bodyText": "missing annotations (it's public class).", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446905970", "createdAt": "2020-06-29T11:43:15Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata {\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    public SqlColumnMetadata(String name, SqlColumnType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMDM3Mg==", "bodyText": "Maybe we can mark this as @PrivateApi, it's not meant to be used by the users.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446920372", "createdAt": "2020-06-29T12:08:58Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata {\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    public SqlColumnMetadata(String name, SqlColumnType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTk3MA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4OTAzNQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446989035", "createdAt": "2020-06-29T13:53:40Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public class SqlColumnMetadata {\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    public SqlColumnMetadata(String name, SqlColumnType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNTk3MA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyMTAzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0NDozN1rOGqNB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyNTowNFrOGqTb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNjgzMw==", "bodyText": "does this qualify as standard Javadoc format so it's picked up by the generator?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446906833", "createdAt": "2020-06-29T11:44:37Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnType.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * SQL column type.\n+ */\n+public enum SqlColumnType {\n+    /** VARCHAR type, represented by {@link java.lang.String} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMTA0Ng==", "bodyText": "Of course...", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446921046", "createdAt": "2020-06-29T12:10:02Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnType.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * SQL column type.\n+ */\n+public enum SqlColumnType {\n+    /** VARCHAR type, represented by {@link java.lang.String} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNjgzMw=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NzI3NA==", "bodyText": "From the Oracle docs [1]:\n\nThis tag is valid in all documentation comments: overview, package, class, interface, constructor, method and field\n\n[1] https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDDIECH", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446977274", "createdAt": "2020-06-29T13:37:33Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnType.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * SQL column type.\n+ */\n+public enum SqlColumnType {\n+    /** VARCHAR type, represented by {@link java.lang.String} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNjgzMw=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMTgwMQ==", "bodyText": "Resolving for now. Please re-open the conversation if you foresee any problems with these JavaDocs.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447011801", "createdAt": "2020-06-29T14:25:04Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnType.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * SQL column type.\n+ */\n+public enum SqlColumnType {\n+    /** VARCHAR type, represented by {@link java.lang.String} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNjgzMw=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyMjYxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0NTowNFrOGqNCuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MzoyOFrOGqSCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzA2NA==", "bodyText": "missing annotations", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446907064", "createdAt": "2020-06-29T11:45:04Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import javax.annotation.Nonnull;\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.\n+ */\n+public class SqlException extends HazelcastException {\n+\n+    private final UUID originatingMemberId;\n+    private final int code;\n+\n+    public SqlException(UUID originatingMemberId, int code, String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODkwNg==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988906", "createdAt": "2020-06-29T13:53:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastException;\n+\n+import javax.annotation.Nonnull;\n+import java.util.UUID;\n+\n+/**\n+ * An exception occurred during SQL query execution.\n+ */\n+public class SqlException extends HazelcastException {\n+\n+    private final UUID originatingMemberId;\n+    private final int code;\n+\n+    public SqlException(UUID originatingMemberId, int code, String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzA2NA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyMzQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0NToxNlrOGqNDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MzoxOVrOGqSB_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzE4OQ==", "bodyText": "missing annotation", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446907189", "createdAt": "2020-06-29T11:45:16Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODc5OA==", "bodyText": "Done", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988798", "createdAt": "2020-06-29T13:53:19Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzE4OQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyODAyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0NjozNVrOGqNGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MzowOVrOGqSBmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzkxOQ==", "bodyText": "should also consider making this final", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446907919", "createdAt": "2020-06-29T11:46:35Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODY5Ng==", "bodyText": "Done.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988696", "createdAt": "2020-06-29T13:53:09Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzkxOQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyODU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0Njo0MlrOGqNGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Mjo1MlrOGqSAyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzk5OQ==", "bodyText": "missing annotation", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446907999", "createdAt": "2020-06-29T11:46:42Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODQ4OQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988489", "createdAt": "2020-06-29T13:52:52Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzk5OQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIzNDU2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlResultImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0ODoxOVrOGqNJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0MDoyOFrOGqRdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwODg4OA==", "bodyText": "no toString implementation for this class, is that intentional?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446908888", "createdAt": "2020-06-29T11:48:19Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlResultImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.state.QueryInitiatorState;\n+import com.hazelcast.sql.impl.state.QueryState;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Cursor implementation.\n+ */\n+public class SqlResultImpl implements SqlResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxOTI1OQ==", "bodyText": "You mean to produce some string view of the whole result? We can't iterate the iterator here because it's a mutating operation. Years ago I had an issue that displaying a variable in the debugger called the toString and it lazy-loaded the value and then I couldn't reproduce my issue. If we want to format the results somehow, it should be a special method where we could document it, not toString.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446919259", "createdAt": "2020-06-29T12:07:09Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlResultImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.state.QueryInitiatorState;\n+import com.hazelcast.sql.impl.state.QueryState;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Cursor implementation.\n+ */\n+public class SqlResultImpl implements SqlResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwODg4OA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3OTM1Nw==", "bodyText": "There is nothing to expose here. Row and row metadata do have toString implementations.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446979357", "createdAt": "2020-06-29T13:40:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlResultImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.state.QueryInitiatorState;\n+import com.hazelcast.sql.impl.state.QueryState;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Cursor implementation.\n+ */\n+public class SqlResultImpl implements SqlResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwODg4OA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIzNjM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0ODo1NFrOGqNK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowMjoxMlrOGqSbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTE3OA==", "bodyText": "might be nice to document this in the interface", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446909178", "createdAt": "2020-06-29T11:48:54Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlColumnMetadata;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Default implementation of the SQL row which is exposed to users. We merely wrap the internal row, but add more checks which\n+ * is important for user-facing code, but which could cause performance degradation if implemented in the internal classes.\n+ */\n+public class SqlRowImpl implements SqlRow {\n+\n+    private final SqlRowMetadata rowMetadata;\n+    private final Row row;\n+\n+    public SqlRowImpl(SqlRowMetadata rowMetadata, Row row) {\n+        this.rowMetadata = rowMetadata;\n+        this.row = row;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Object getObject(int columnIndex) {\n+        checkIndex(columnIndex);\n+\n+        return getObject0(columnIndex);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Object getObject(@Nonnull String columnName) {\n+        int columnIndex = resolveIndex(columnName);\n+\n+        return getObject0(columnIndex);\n+    }\n+\n+    private Object getObject0(int columnIndex) {\n+        return row.get(columnIndex);\n+    }\n+\n+    private int resolveIndex(String columnName) {\n+        int index = rowMetadata.findColumn(columnName);\n+\n+        if (index == SqlRowMetadata.COLUMN_NOT_FOUND) {\n+            throw new IllegalArgumentException(\"Column \\\"\" + columnName + \"\\\" doesn't exist\");\n+        }\n+\n+        return index;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    private void checkIndex(int index) {\n+        if (index < 0 || index >= rowMetadata.getColumnCount()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of range: \" + index);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NTI2NA==", "bodyText": "Could you please clarify what do you mean by this?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446995264", "createdAt": "2020-06-29T14:02:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlRowImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.sql.SqlColumnMetadata;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Default implementation of the SQL row which is exposed to users. We merely wrap the internal row, but add more checks which\n+ * is important for user-facing code, but which could cause performance degradation if implemented in the internal classes.\n+ */\n+public class SqlRowImpl implements SqlRow {\n+\n+    private final SqlRowMetadata rowMetadata;\n+    private final Row row;\n+\n+    public SqlRowImpl(SqlRowMetadata rowMetadata, Row row) {\n+        this.rowMetadata = rowMetadata;\n+        this.row = row;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Object getObject(int columnIndex) {\n+        checkIndex(columnIndex);\n+\n+        return getObject0(columnIndex);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Object getObject(@Nonnull String columnName) {\n+        int columnIndex = resolveIndex(columnName);\n+\n+        return getObject0(columnIndex);\n+    }\n+\n+    private Object getObject0(int columnIndex) {\n+        return row.get(columnIndex);\n+    }\n+\n+    private int resolveIndex(String columnName) {\n+        int index = rowMetadata.findColumn(columnName);\n+\n+        if (index == SqlRowMetadata.COLUMN_NOT_FOUND) {\n+            throw new IllegalArgumentException(\"Column \\\"\" + columnName + \"\\\" doesn't exist\");\n+        }\n+\n+        return index;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    private void checkIndex(int index) {\n+        if (index < 0 || index >= rowMetadata.getColumnCount()) {\n+            throw new IndexOutOfBoundsException(\"Column index is out of range: \" + index);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTE3OA=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI0NzQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MjowMVrOGqNRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyNTo1MlrOGqTeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDg2OQ==", "bodyText": "veery minor but typically the javadoc for @param statements start in lower case everywhere else", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446910869", "createdAt": "2020-06-29T11:52:01Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMjQ1Mg==", "bodyText": "Applied to @param, @return, @throws.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447012452", "createdAt": "2020-06-29T14:25:52Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    public SqlRowMetadata(List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return The number of columns in the row.\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.\n+     *\n+     * @param index Column index, 0-based.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDg2OQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI4MjA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjowMTo0NlrOGqNmfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MjoxMlrOGqR-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNjIyMQ==", "bodyText": "We should also create a constant for the value of 0.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446916221", "createdAt": "2020-06-29T12:01:46Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query.\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * The SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query.\n+     * @return This instance for chaining.\n+     * @throws NullPointerException If passed SQL query is null\n+     * @throws IllegalArgumentException If passed SQL query is empty\n+     */\n+    @Nonnull\n+    public SqlQuery setSql(@Nonnull String sql) {\n+        Preconditions.checkNotNull(sql, \"SQL cannot be null\");\n+\n+        if (sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be empty\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query parameters.\n+     *\n+     * @return Query parameters.\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters != null ? parameters : Collections.emptyList();\n+    }\n+\n+    /**\n+     * Sets the query parameters.\n+     * <p>\n+     * You may define parameter placeholders in the query with the {@code \"?\"} character. For every placeholder, a parameter\n+     * value must be provided.\n+     * <p>\n+     * When the method is called, the content of the parameters list is copied. Subsequent changes to the original list don't\n+     * change the query parameters.\n+     *\n+     * @see #addParameter(Object)\n+     * @see #clearParameters()\n+     * @param parameters Query parameters.\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery setParameters(List<Object> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            this.parameters = null;\n+        } else {\n+            this.parameters = new ArrayList<>(parameters);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a single parameter to the end of the parameters list.\n+     *\n+     * @see #setParameters(List)\n+     * @see #clearParameters()\n+     * @param parameter Parameter.\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery addParameter(Object parameter) {\n+        if (parameters == null) {\n+            parameters = new ArrayList<>(1);\n+        }\n+\n+        parameters.add(parameter);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Clear query parameters.\n+     *\n+     * @see #setParameters(List)\n+     * @see #addParameter(Object)\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery clearParameters() {\n+        this.parameters = null;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query timeout in milliseconds.\n+     *\n+     * @return Query timeout in milliseconds.\n+     */\n+    public long getTimeout() {\n+        return timeout;\n+    }\n+\n+    /**\n+     * Sets the query timeout in milliseconds.\n+     * <p>\n+     * If the timeout is reached for a running query, it will be cancelled forcefully.\n+     * <p>\n+     * Zero value means no timeout. {@value #TIMEOUT_NOT_SET} means that the value from {@link SqlConfig#getQueryTimeout()} will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODAxNg==", "bodyText": "Added a constant.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988016", "createdAt": "2020-06-29T13:52:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query.\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * The SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query.\n+     * @return This instance for chaining.\n+     * @throws NullPointerException If passed SQL query is null\n+     * @throws IllegalArgumentException If passed SQL query is empty\n+     */\n+    @Nonnull\n+    public SqlQuery setSql(@Nonnull String sql) {\n+        Preconditions.checkNotNull(sql, \"SQL cannot be null\");\n+\n+        if (sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be empty\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query parameters.\n+     *\n+     * @return Query parameters.\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters != null ? parameters : Collections.emptyList();\n+    }\n+\n+    /**\n+     * Sets the query parameters.\n+     * <p>\n+     * You may define parameter placeholders in the query with the {@code \"?\"} character. For every placeholder, a parameter\n+     * value must be provided.\n+     * <p>\n+     * When the method is called, the content of the parameters list is copied. Subsequent changes to the original list don't\n+     * change the query parameters.\n+     *\n+     * @see #addParameter(Object)\n+     * @see #clearParameters()\n+     * @param parameters Query parameters.\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery setParameters(List<Object> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            this.parameters = null;\n+        } else {\n+            this.parameters = new ArrayList<>(parameters);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a single parameter to the end of the parameters list.\n+     *\n+     * @see #setParameters(List)\n+     * @see #clearParameters()\n+     * @param parameter Parameter.\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery addParameter(Object parameter) {\n+        if (parameters == null) {\n+            parameters = new ArrayList<>(1);\n+        }\n+\n+        parameters.add(parameter);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Clear query parameters.\n+     *\n+     * @see #setParameters(List)\n+     * @see #addParameter(Object)\n+     * @return This instance for chaining.\n+     */\n+    @Nonnull\n+    public SqlQuery clearParameters() {\n+        this.parameters = null;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query timeout in milliseconds.\n+     *\n+     * @return Query timeout in milliseconds.\n+     */\n+    public long getTimeout() {\n+        return timeout;\n+    }\n+\n+    /**\n+     * Sets the query timeout in milliseconds.\n+     * <p>\n+     * If the timeout is reached for a running query, it will be cancelled forcefully.\n+     * <p>\n+     * Zero value means no timeout. {@value #TIMEOUT_NOT_SET} means that the value from {@link SqlConfig#getQueryTimeout()} will", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNjIyMQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI4NDU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjowMjoyNVrOGqNn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MjoyNFrOGqR_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNjU5MQ==", "bodyText": "We should also mark this argument as nonnull. Also elsewhere.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446916591", "createdAt": "2020-06-29T12:02:25Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4ODE0NQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446988145", "createdAt": "2020-06-29T13:52:24Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters;\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(String sql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNjU5MQ=="}, "originalCommit": {"oid": "a4bef99c99ede3024009a6202b6d254ad3593a68"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTYyOTcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyNjozNVrOGqQ3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1Nzo1M1rOGqSPBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2OTc1MA==", "bodyText": "What about adding this?\n@throws ClassCastException If the type of the column type isn't assignable to the type {@code T}.\n\nIt's not strictly correct because the CCE is not thrown by this method but when the result of this method is assigned, but it might help to understand the issue.\nIt also might help to put a blank line between the blocks of @see, @param and @throws lines, the javadoc renderer also groups it.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446969750", "createdAt": "2020-06-29T13:26:35Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * SQL row.\n+ */\n+public interface SqlRow {\n+    /**\n+     * Gets the value of the column by index.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column. No implicit conversions are performed on the value.\n+     *\n+     * @see #getMetadata()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnIndex Column index, 0-based.\n+     * @return Value of the column.\n+     * @throws IndexOutOfBoundsException If the column index is out of bounds.\n+     */\n+    @Nullable\n+    <T> T getObject(int columnIndex);\n+\n+    /**\n+     * Gets the value of the column by column name.\n+     * <p>\n+     * Column name should be one of those defined in {@link SqlRowMetadata}, case-sensitive. You may also use\n+     * {@link SqlRowMetadata#findColumn(String)} to test for column existence.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column. No implicit conversions are performed on the value.\n+     *\n+     * @see #getMetadata()\n+     * @see SqlRowMetadata#findColumn(String)\n+     * @see SqlColumnMetadata#getName()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnName Column name.\n+     * @return Value of the column\n+     * @throws NullPointerException If column name is null\n+     * @throws IllegalArgumentException If a column with the given name is not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2347ca7ae76d5827c01f8d15d05d4a910d4f95"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MjEzMg==", "bodyText": "Fixed, thanks for the suggestion.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446992132", "createdAt": "2020-06-29T13:57:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRow.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * SQL row.\n+ */\n+public interface SqlRow {\n+    /**\n+     * Gets the value of the column by index.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column. No implicit conversions are performed on the value.\n+     *\n+     * @see #getMetadata()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnIndex Column index, 0-based.\n+     * @return Value of the column.\n+     * @throws IndexOutOfBoundsException If the column index is out of bounds.\n+     */\n+    @Nullable\n+    <T> T getObject(int columnIndex);\n+\n+    /**\n+     * Gets the value of the column by column name.\n+     * <p>\n+     * Column name should be one of those defined in {@link SqlRowMetadata}, case-sensitive. You may also use\n+     * {@link SqlRowMetadata#findColumn(String)} to test for column existence.\n+     * <p>\n+     * The class of the returned value depends on the SQL type of the column. No implicit conversions are performed on the value.\n+     *\n+     * @see #getMetadata()\n+     * @see SqlRowMetadata#findColumn(String)\n+     * @see SqlColumnMetadata#getName()\n+     * @see SqlColumnMetadata#getType()\n+     * @param columnName Column name.\n+     * @return Value of the column\n+     * @throws NullPointerException If column name is null\n+     * @throws IllegalArgumentException If a column with the given name is not found", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2OTc1MA=="}, "originalCommit": {"oid": "9b2347ca7ae76d5827c01f8d15d05d4a910d4f95"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTY0NDQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyOTo1MFrOGqRAlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1NDo1NVrOGqSGVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjA1NA==", "bodyText": "This used to be Math.min(8, Runtime.getRuntime().availableProcessors()), was the change intentional?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446972054", "createdAt": "2020-06-29T13:29:50Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java", "diffHunk": "@@ -16,52 +16,79 @@\n \n package com.hazelcast.sql.impl;\n \n+import com.hazelcast.config.SqlConfig;\n import com.hazelcast.core.HazelcastException;\n import com.hazelcast.internal.nio.Packet;\n import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.internal.util.Preconditions;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlService;\n import com.hazelcast.sql.impl.optimizer.DisabledSqlOptimizer;\n import com.hazelcast.sql.impl.optimizer.OptimizationTask;\n import com.hazelcast.sql.impl.optimizer.SqlOptimizer;\n import com.hazelcast.sql.impl.optimizer.SqlPlan;\n import com.hazelcast.sql.impl.plan.Plan;\n import com.hazelcast.sql.impl.state.QueryState;\n \n+import javax.annotation.Nonnull;\n import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Consumer;\n import java.util.logging.Level;\n \n /**\n  * Base SQL service implementation that bridges optimizer implementation, public and private APIs.\n  */\n-public class SqlServiceImpl implements Consumer<Packet> {\n+public class SqlServiceImpl implements SqlService, Consumer<Packet> {\n     /** Outbox batch size in bytes. */\n     private static final int OUTBOX_BATCH_SIZE = 512 * 1024;\n \n     /** Default state check frequency. */\n-    private static final long STATE_CHECK_FREQUENCY = 10_000L;\n+    private static final long STATE_CHECK_FREQUENCY = 1_000L;\n \n     private static final String OPTIMIZER_CLASS_PROPERTY_NAME = \"hazelcast.sql.optimizerClass\";\n     private static final String SQL_MODULE_OPTIMIZER_CLASS = \"com.hazelcast.sql.impl.calcite.CalciteSqlOptimizer\";\n \n     private SqlOptimizer optimizer;\n     private final ILogger logger;\n     private final NodeEngineImpl nodeEngine;\n+    private final long queryTimeout;\n+\n+    private final NodeServiceProviderImpl nodeServiceProvider;\n \n     private volatile SqlInternalService internalService;\n \n     public SqlServiceImpl(NodeEngineImpl nodeEngine) {\n         this.nodeEngine = nodeEngine;\n         logger = nodeEngine.getLogger(getClass());\n \n-        // These two parameters will be taken from the config, when public API is ready.\n-        int operationThreadCount = Runtime.getRuntime().availableProcessors();\n-        int fragmentThreadCount = Runtime.getRuntime().availableProcessors();\n+        SqlConfig config = nodeEngine.getConfig().getSqlConfig();\n+\n+        int executorPoolSize = config.getExecutorPoolSize();\n+        int operationPoolSize = config.getOperationPoolSize();\n+        long queryTimeout = config.getQueryTimeoutMillis();\n \n-        NodeServiceProviderImpl nodeServiceProvider = new NodeServiceProviderImpl(nodeEngine);\n+        if (executorPoolSize == SqlConfig.DEFAULT_EXECUTOR_POOL_SIZE) {\n+            executorPoolSize = Runtime.getRuntime().availableProcessors();\n+        }\n+\n+        if (operationPoolSize == SqlConfig.DEFAULT_OPERATION_POOL_SIZE) {\n+            operationPoolSize = Runtime.getRuntime().availableProcessors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2347ca7ae76d5827c01f8d15d05d4a910d4f95"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4OTkwOQ==", "bodyText": "Math.min was very old heuristics with no proven value. It is simplified now.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446989909", "createdAt": "2020-06-29T13:54:55Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java", "diffHunk": "@@ -16,52 +16,79 @@\n \n package com.hazelcast.sql.impl;\n \n+import com.hazelcast.config.SqlConfig;\n import com.hazelcast.core.HazelcastException;\n import com.hazelcast.internal.nio.Packet;\n import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.internal.util.Preconditions;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlService;\n import com.hazelcast.sql.impl.optimizer.DisabledSqlOptimizer;\n import com.hazelcast.sql.impl.optimizer.OptimizationTask;\n import com.hazelcast.sql.impl.optimizer.SqlOptimizer;\n import com.hazelcast.sql.impl.optimizer.SqlPlan;\n import com.hazelcast.sql.impl.plan.Plan;\n import com.hazelcast.sql.impl.state.QueryState;\n \n+import javax.annotation.Nonnull;\n import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Consumer;\n import java.util.logging.Level;\n \n /**\n  * Base SQL service implementation that bridges optimizer implementation, public and private APIs.\n  */\n-public class SqlServiceImpl implements Consumer<Packet> {\n+public class SqlServiceImpl implements SqlService, Consumer<Packet> {\n     /** Outbox batch size in bytes. */\n     private static final int OUTBOX_BATCH_SIZE = 512 * 1024;\n \n     /** Default state check frequency. */\n-    private static final long STATE_CHECK_FREQUENCY = 10_000L;\n+    private static final long STATE_CHECK_FREQUENCY = 1_000L;\n \n     private static final String OPTIMIZER_CLASS_PROPERTY_NAME = \"hazelcast.sql.optimizerClass\";\n     private static final String SQL_MODULE_OPTIMIZER_CLASS = \"com.hazelcast.sql.impl.calcite.CalciteSqlOptimizer\";\n \n     private SqlOptimizer optimizer;\n     private final ILogger logger;\n     private final NodeEngineImpl nodeEngine;\n+    private final long queryTimeout;\n+\n+    private final NodeServiceProviderImpl nodeServiceProvider;\n \n     private volatile SqlInternalService internalService;\n \n     public SqlServiceImpl(NodeEngineImpl nodeEngine) {\n         this.nodeEngine = nodeEngine;\n         logger = nodeEngine.getLogger(getClass());\n \n-        // These two parameters will be taken from the config, when public API is ready.\n-        int operationThreadCount = Runtime.getRuntime().availableProcessors();\n-        int fragmentThreadCount = Runtime.getRuntime().availableProcessors();\n+        SqlConfig config = nodeEngine.getConfig().getSqlConfig();\n+\n+        int executorPoolSize = config.getExecutorPoolSize();\n+        int operationPoolSize = config.getOperationPoolSize();\n+        long queryTimeout = config.getQueryTimeoutMillis();\n \n-        NodeServiceProviderImpl nodeServiceProvider = new NodeServiceProviderImpl(nodeEngine);\n+        if (executorPoolSize == SqlConfig.DEFAULT_EXECUTOR_POOL_SIZE) {\n+            executorPoolSize = Runtime.getRuntime().availableProcessors();\n+        }\n+\n+        if (operationPoolSize == SqlConfig.DEFAULT_OPERATION_POOL_SIZE) {\n+            operationPoolSize = Runtime.getRuntime().availableProcessors();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjA1NA=="}, "originalCommit": {"oid": "9b2347ca7ae76d5827c01f8d15d05d4a910d4f95"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc3NDEzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1ODowNlrOGqSPrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1OTo0NlrOGqSUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MjMwMw==", "bodyText": "What about marking this constructor a @PrivateApi? It's not supposed to be used by the users, we might add more metadata to it.\nAlso SqlRowMetadata, maybe also SqlException.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446992303", "createdAt": "2020-06-29T13:58:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public final class SqlColumnMetadata {\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public SqlColumnMetadata(@Nonnull String name, @Nonnull SqlColumnType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea15c95c39da81b5f34a23cb22c46fd2280b758c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MzQ4Nw==", "bodyText": "Agreed, fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r446993487", "createdAt": "2020-06-29T13:59:46Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlColumnMetadata.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * SQL column metadata.\n+ */\n+public final class SqlColumnMetadata {\n+\n+    private final String name;\n+    private final SqlColumnType type;\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public SqlColumnMetadata(@Nonnull String name, @Nonnull SqlColumnType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MjMwMw=="}, "originalCommit": {"oid": "ea15c95c39da81b5f34a23cb22c46fd2280b758c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUxMDg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDowOTowNlrOGq1eiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTozMDo1NVrOGsI2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA==", "bodyText": "Shouldn't we also mark this method as @Beta?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447569544", "createdAt": "2020-06-30T10:09:06Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MTM4MQ==", "bodyText": "I think it is sufficient to mark the service itself as @Beta. The method HazelcastInstance.getSql is not in the beta state on its own. It is the service that it provides in the beta status. We used this pattern for all other @Beta usages.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447571381", "createdAt": "2020-06-30T10:12:31Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4MzEzMw==", "bodyText": "I agree it's technically sufficient, but we're trying to make it as clear as possible for the users. All APIs available through this method are beta, so even though if this method itself is not, there's nothing you can do with it if you want to avoid beta.\nI would even document the state of the development here or in the SqlService class docs. It will set expectations and reduce disillusionment.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447583133", "createdAt": "2020-06-30T10:33:30Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2ODIyNg==", "bodyText": "Ok, agree. Added @Beta annotation to HazelcastInstance.getSql. Regarding concrete capabilities - it is nearly impossible to list and maintain the list of supported features. In SQL this is the goal of documentation.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447668226", "createdAt": "2020-06-30T13:09:14Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNDA4NQ==", "bodyText": "I would add a statement like this:\n\nThe SQL module in the 4.1 release is in beta state. We might change details of the behavior in future releases or even change the API. The functionality is also limited, for example we don't yet support joins, aggregations or DML statements. We also don't support IMaps with NATIVE in-memory format (enterprise feature). However, the features that are implemented are of production quality and are safe to be used in production settings.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447824085", "createdAt": "2020-06-30T16:36:18Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNTUyNw==", "bodyText": "Added a note about the beta state.\nAs mentioned before, I am not keen to add a description of specific features to JavaDoc. This is a goal of documentation, not JavaDoc, to inform users about supported SQL features. Whatever we write in JavaDoc will be outdated almost immediately. Even the list of unsupported features in the sample snippet is not accurate already.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448935527", "createdAt": "2020-07-02T11:30:55Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/core/HazelcastInstance.java", "diffHunk": "@@ -452,6 +453,15 @@\n      */\n     @Nonnull CPSubsystem getCPSubsystem();\n \n+    /**\n+     * Returns a service to execute distributed SQL queries.\n+     *\n+     * @return SQL service\n+     *\n+     * @see SqlService\n+     */\n+    @Nonnull SqlService getSql();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2OTU0NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTk5OTExOnYy", "diffSide": "RIGHT", "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjozMjo0NVrOGq6H5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxMjo1NlrOGq7ptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0NTY2OA==", "bodyText": "What is the default value of this parameter? Shall we add it to the schema definition?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447645668", "createdAt": "2020-06-30T12:32:45Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,57 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\" default=\"-1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        The default value -1 sets the pool size equal to the number of CPU cores, and should be good enough\n+                        for the most workloads.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"operation-pool-size\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\" default=\"-1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for network operations processing.\n+                        When Hazelcast members execute a query, they send commands to each other over the network to coordinate\n+                        the execution. This includes requests to start or stop query execution, or a request to process a batch\n+                        of data. These commands are processed in a separate operation thread pool, to avoid frequent interruption\n+                        of running query fragments.\n+                        The default value -1 sets the pool size equal to the number of CPU cores, and should be good enough\n+                        for the most workloads.\n+                        Setting the value to less than the number of CPU cores may improve the overall performance on machines\n+                        with large CPU count, because it will decrease the number of context switches.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"query-timeout-millis\" type=\"xs:unsignedLong\" minOccurs=\"0\" maxOccurs=\"1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MDcwOA==", "bodyText": "Fixed in both XSD files.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447670708", "createdAt": "2020-06-30T13:12:56Z", "author": {"login": "devozerov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4937,6 +4938,57 @@\n         </xs:attribute>\n     </xs:complexType>\n \n+    <xs:complexType name=\"sql\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                SQL service configuration.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"executor-pool-size\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\" default=\"-1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for query execution.\n+                        The default value -1 sets the pool size equal to the number of CPU cores, and should be good enough\n+                        for the most workloads.\n+                        Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL\n+                        subsystem. This may be beneficial if you would like to prioritize other CPU-intensive workloads on the\n+                        same machine.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"operation-pool-size\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\" default=\"-1\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Sets the number of threads responsible for network operations processing.\n+                        When Hazelcast members execute a query, they send commands to each other over the network to coordinate\n+                        the execution. This includes requests to start or stop query execution, or a request to process a batch\n+                        of data. These commands are processed in a separate operation thread pool, to avoid frequent interruption\n+                        of running query fragments.\n+                        The default value -1 sets the pool size equal to the number of CPU cores, and should be good enough\n+                        for the most workloads.\n+                        Setting the value to less than the number of CPU cores may improve the overall performance on machines\n+                        with large CPU count, because it will decrease the number of context switches.\n+                        It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+                        may decrease the system's overall performance due to excessive context switches.\n+                    </xs:documentation>\n+                </xs:annotation>\n+            </xs:element>\n+            <xs:element name=\"query-timeout-millis\" type=\"xs:unsignedLong\" minOccurs=\"0\" maxOccurs=\"1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0NTY2OA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDAyMTg3OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjozODo0NFrOGq6WFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowOTozOFrOGq7hEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0OTMwMg==", "bodyText": "Shall we create a similar run for HD?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447649302", "createdAt": "2020-06-30T12:38:44Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "diffHunk": "@@ -0,0 +1,961 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.SerializationConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableReader;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * Test that covers basic column read operations through SQL.\n+ */\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+@SuppressWarnings(\"checkstyle:RedundantModifier\")\n+public class SqlBasicTest extends SqlTestSupport {\n+\n+    private static final int IDS_FACTORY_ID = 1;\n+    private static final int IDS_KEY_CLASS_ID = 2;\n+    private static final int IDS_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_FACTORY_ID = 1;\n+    private static final int PORTABLE_KEY_CLASS_ID = 2;\n+    private static final int PORTABLE_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_NESTED_CLASS_ID = 4;\n+\n+    private static final String MAP_OBJECT = \"map_object\";\n+    private static final String MAP_BINARY = \"map_binary\";\n+\n+    private static final int[] PAGE_SIZES = { 1, 16, 256, 4096 };\n+    private static final int[] DATA_SET_SIZES = { 1, 256, 4096 };\n+    private static final TestHazelcastInstanceFactory FACTORY = new TestHazelcastInstanceFactory(2);\n+\n+    private static HazelcastInstance instance;\n+\n+    @Parameter\n+    public int cursorBufferSize;\n+\n+    @Parameter(1)\n+    public int dataSetSize;\n+\n+    @Parameter(2)\n+    public SerializationMode serializationMode;\n+\n+    @Parameter(3)\n+    public InMemoryFormat inMemoryFormat;\n+\n+    @Parameters(name = \"cursorBufferSize:{0}, dataSetSize:{1}, serializationMode:{2}, inMemoryFormat:{3}\")\n+    public static Collection<Object[]> parameters() {\n+        List<Object[]> res = new ArrayList<>();\n+\n+        for (int pageSize : PAGE_SIZES) {\n+            for (int dataSetSize : DATA_SET_SIZES) {\n+                for (SerializationMode serializationMode : SerializationMode.values()) {\n+                    for (InMemoryFormat format : new InMemoryFormat[] { InMemoryFormat.OBJECT, InMemoryFormat.BINARY }) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2ODQ5Ng==", "bodyText": "HD is not supported in the scope of this PR", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447668496", "createdAt": "2020-06-30T13:09:38Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "diffHunk": "@@ -0,0 +1,961 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.SerializationConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableReader;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * Test that covers basic column read operations through SQL.\n+ */\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+@SuppressWarnings(\"checkstyle:RedundantModifier\")\n+public class SqlBasicTest extends SqlTestSupport {\n+\n+    private static final int IDS_FACTORY_ID = 1;\n+    private static final int IDS_KEY_CLASS_ID = 2;\n+    private static final int IDS_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_FACTORY_ID = 1;\n+    private static final int PORTABLE_KEY_CLASS_ID = 2;\n+    private static final int PORTABLE_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_NESTED_CLASS_ID = 4;\n+\n+    private static final String MAP_OBJECT = \"map_object\";\n+    private static final String MAP_BINARY = \"map_binary\";\n+\n+    private static final int[] PAGE_SIZES = { 1, 16, 256, 4096 };\n+    private static final int[] DATA_SET_SIZES = { 1, 256, 4096 };\n+    private static final TestHazelcastInstanceFactory FACTORY = new TestHazelcastInstanceFactory(2);\n+\n+    private static HazelcastInstance instance;\n+\n+    @Parameter\n+    public int cursorBufferSize;\n+\n+    @Parameter(1)\n+    public int dataSetSize;\n+\n+    @Parameter(2)\n+    public SerializationMode serializationMode;\n+\n+    @Parameter(3)\n+    public InMemoryFormat inMemoryFormat;\n+\n+    @Parameters(name = \"cursorBufferSize:{0}, dataSetSize:{1}, serializationMode:{2}, inMemoryFormat:{3}\")\n+    public static Collection<Object[]> parameters() {\n+        List<Object[]> res = new ArrayList<>();\n+\n+        for (int pageSize : PAGE_SIZES) {\n+            for (int dataSetSize : DATA_SET_SIZES) {\n+                for (SerializationMode serializationMode : SerializationMode.values()) {\n+                    for (InMemoryFormat format : new InMemoryFormat[] { InMemoryFormat.OBJECT, InMemoryFormat.BINARY }) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0OTMwMg=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDAzMTgwOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0MToyMFrOGq6cdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxMzowNVrOGq7qIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1MDkzMw==", "bodyText": "Maybe use assertNotNull() instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447650933", "createdAt": "2020-06-30T12:41:20Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "diffHunk": "@@ -0,0 +1,961 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.SerializationConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableReader;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * Test that covers basic column read operations through SQL.\n+ */\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+@SuppressWarnings(\"checkstyle:RedundantModifier\")\n+public class SqlBasicTest extends SqlTestSupport {\n+\n+    private static final int IDS_FACTORY_ID = 1;\n+    private static final int IDS_KEY_CLASS_ID = 2;\n+    private static final int IDS_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_FACTORY_ID = 1;\n+    private static final int PORTABLE_KEY_CLASS_ID = 2;\n+    private static final int PORTABLE_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_NESTED_CLASS_ID = 4;\n+\n+    private static final String MAP_OBJECT = \"map_object\";\n+    private static final String MAP_BINARY = \"map_binary\";\n+\n+    private static final int[] PAGE_SIZES = { 1, 16, 256, 4096 };\n+    private static final int[] DATA_SET_SIZES = { 1, 256, 4096 };\n+    private static final TestHazelcastInstanceFactory FACTORY = new TestHazelcastInstanceFactory(2);\n+\n+    private static HazelcastInstance instance;\n+\n+    @Parameter\n+    public int cursorBufferSize;\n+\n+    @Parameter(1)\n+    public int dataSetSize;\n+\n+    @Parameter(2)\n+    public SerializationMode serializationMode;\n+\n+    @Parameter(3)\n+    public InMemoryFormat inMemoryFormat;\n+\n+    @Parameters(name = \"cursorBufferSize:{0}, dataSetSize:{1}, serializationMode:{2}, inMemoryFormat:{3}\")\n+    public static Collection<Object[]> parameters() {\n+        List<Object[]> res = new ArrayList<>();\n+\n+        for (int pageSize : PAGE_SIZES) {\n+            for (int dataSetSize : DATA_SET_SIZES) {\n+                for (SerializationMode serializationMode : SerializationMode.values()) {\n+                    for (InMemoryFormat format : new InMemoryFormat[] { InMemoryFormat.OBJECT, InMemoryFormat.BINARY }) {\n+                        res.add(new Object[] {\n+                            pageSize,\n+                            dataSetSize,\n+                            serializationMode,\n+                            format\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        instance = FACTORY.newHazelcastInstance(config());\n+\n+        FACTORY.newHazelcastInstance(config());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        FACTORY.shutdownAll();\n+    }\n+\n+    @Before\n+    public void before() {\n+        instance.getMap(MAP_OBJECT).clear();\n+        instance.getMap(MAP_BINARY).clear();\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testSelect() {\n+        // Get proper map\n+        IMap<Object, AbstractPojo> map = instance.getMap(mapName());\n+\n+        // Populate map with values\n+        Map<Object, AbstractPojo> data = new HashMap<>();\n+\n+        for (long i = 0; i < dataSetSize; i++) {\n+            data.put(key(i), value(i));\n+        }\n+\n+        map.putAll(data);\n+\n+        assertEquals(dataSetSize, map.size());\n+\n+        // Execute query\n+        boolean portable = serializationMode == SerializationMode.PORTABLE;\n+\n+        try (SqlResult res = query()) {\n+            SqlRowMetadata rowMetadata = res.getRowMetadata();\n+\n+            checkRowMetadata(rowMetadata);\n+\n+            Set<Long> uniqueKeys = new HashSet<>();\n+\n+            Iterator<SqlRow> rowIterator = res.iterator();\n+\n+            while (rowIterator.hasNext()) {\n+                SqlRow row = rowIterator.next();\n+\n+                assertEquals(rowMetadata, res.getRowMetadata());\n+\n+                Long key0 = row.getObject(rowMetadata.findColumn(adjustFieldName(\"key\")));\n+                assert key0 != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MDgxNg==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447670816", "createdAt": "2020-06-30T13:13:05Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlBasicTest.java", "diffHunk": "@@ -0,0 +1,961 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.SerializationConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableReader;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * Test that covers basic column read operations through SQL.\n+ */\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+@SuppressWarnings(\"checkstyle:RedundantModifier\")\n+public class SqlBasicTest extends SqlTestSupport {\n+\n+    private static final int IDS_FACTORY_ID = 1;\n+    private static final int IDS_KEY_CLASS_ID = 2;\n+    private static final int IDS_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_FACTORY_ID = 1;\n+    private static final int PORTABLE_KEY_CLASS_ID = 2;\n+    private static final int PORTABLE_VALUE_CLASS_ID = 3;\n+    private static final int PORTABLE_NESTED_CLASS_ID = 4;\n+\n+    private static final String MAP_OBJECT = \"map_object\";\n+    private static final String MAP_BINARY = \"map_binary\";\n+\n+    private static final int[] PAGE_SIZES = { 1, 16, 256, 4096 };\n+    private static final int[] DATA_SET_SIZES = { 1, 256, 4096 };\n+    private static final TestHazelcastInstanceFactory FACTORY = new TestHazelcastInstanceFactory(2);\n+\n+    private static HazelcastInstance instance;\n+\n+    @Parameter\n+    public int cursorBufferSize;\n+\n+    @Parameter(1)\n+    public int dataSetSize;\n+\n+    @Parameter(2)\n+    public SerializationMode serializationMode;\n+\n+    @Parameter(3)\n+    public InMemoryFormat inMemoryFormat;\n+\n+    @Parameters(name = \"cursorBufferSize:{0}, dataSetSize:{1}, serializationMode:{2}, inMemoryFormat:{3}\")\n+    public static Collection<Object[]> parameters() {\n+        List<Object[]> res = new ArrayList<>();\n+\n+        for (int pageSize : PAGE_SIZES) {\n+            for (int dataSetSize : DATA_SET_SIZES) {\n+                for (SerializationMode serializationMode : SerializationMode.values()) {\n+                    for (InMemoryFormat format : new InMemoryFormat[] { InMemoryFormat.OBJECT, InMemoryFormat.BINARY }) {\n+                        res.add(new Object[] {\n+                            pageSize,\n+                            dataSetSize,\n+                            serializationMode,\n+                            format\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        instance = FACTORY.newHazelcastInstance(config());\n+\n+        FACTORY.newHazelcastInstance(config());\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        FACTORY.shutdownAll();\n+    }\n+\n+    @Before\n+    public void before() {\n+        instance.getMap(MAP_OBJECT).clear();\n+        instance.getMap(MAP_BINARY).clear();\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testSelect() {\n+        // Get proper map\n+        IMap<Object, AbstractPojo> map = instance.getMap(mapName());\n+\n+        // Populate map with values\n+        Map<Object, AbstractPojo> data = new HashMap<>();\n+\n+        for (long i = 0; i < dataSetSize; i++) {\n+            data.put(key(i), value(i));\n+        }\n+\n+        map.putAll(data);\n+\n+        assertEquals(dataSetSize, map.size());\n+\n+        // Execute query\n+        boolean portable = serializationMode == SerializationMode.PORTABLE;\n+\n+        try (SqlResult res = query()) {\n+            SqlRowMetadata rowMetadata = res.getRowMetadata();\n+\n+            checkRowMetadata(rowMetadata);\n+\n+            Set<Long> uniqueKeys = new HashSet<>();\n+\n+            Iterator<SqlRow> rowIterator = res.iterator();\n+\n+            while (rowIterator.hasNext()) {\n+                SqlRow row = rowIterator.next();\n+\n+                assertEquals(rowMetadata, res.getRowMetadata());\n+\n+                Long key0 = row.getObject(rowMetadata.findColumn(adjustFieldName(\"key\")));\n+                assert key0 != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1MDkzMw=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA1NDczOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0NzoyN1rOGq6qtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyMDowMFrOGsIiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NDU4Mw==", "bodyText": "Do we have HD counterpart for the test?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447654583", "createdAt": "2020-06-30T12:47:27Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.exec.BlockingExec;\n+import com.hazelcast.sql.impl.exec.FaultyExec;\n+import com.hazelcast.sql.impl.exec.scan.MapScanExec;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test for different error conditions.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlErrorTest extends SqlTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMDM4Mw==", "bodyText": "Same as in the comment above.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448930383", "createdAt": "2020-07-02T11:20:00Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlErrorTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.sql.impl.exec.BlockingExec;\n+import com.hazelcast.sql.impl.exec.FaultyExec;\n+import com.hazelcast.sql.impl.exec.scan.MapScanExec;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.fail;\n+\n+/**\n+ * Test for different error conditions.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlErrorTest extends SqlTestSupport {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NDU4Mw=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA3NzI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1MzoyMFrOGq64hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyMDo1MFrOGsIj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1ODExNw==", "bodyText": "Minor: executorPoolSize != DEFAULT_EXECUTOR_POOL_SIZE ?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447658117", "createdAt": "2020-06-30T12:53:20Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = -1;\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = -1;\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeoutMillis = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        if (executorPoolSize < DEFAULT_EXECUTOR_POOL_SIZE || executorPoolSize == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMDgwMA==", "bodyText": "This will not work for positive values. We need to exclude all negative values and zero, but leave positive values and -1.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448930800", "createdAt": "2020-07-02T11:20:50Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = -1;\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = -1;\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeoutMillis = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        if (executorPoolSize < DEFAULT_EXECUTOR_POOL_SIZE || executorPoolSize == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1ODExNw=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA3OTkxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1Mzo1NVrOGq66Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyMTowMlrOGsIkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1ODQ5OQ==", "bodyText": "The same?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447658499", "createdAt": "2020-06-30T12:53:55Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = -1;\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = -1;\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeoutMillis = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        if (executorPoolSize < DEFAULT_EXECUTOR_POOL_SIZE || executorPoolSize == 0) {\n+            checkPositive(executorPoolSize, \"Executor pool size should be positive or -1: \" + executorPoolSize);\n+        }\n+\n+        this.executorPoolSize = executorPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of threads responsible for network operations processing.\n+     *\n+     * @return Number of threads responsible for network operations processing.\n+     */\n+    public int getOperationPoolSize() {\n+        return operationPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for network operations processing.\n+     * <p>\n+     * When Hazelcast members execute a query, they send commands to each other over the network to coordinate the execution.\n+     * This includes requests to start or stop query execution, or a request to process a batch of data. These commands are\n+     * processed in a separate operation thread pool, to avoid frequent interruption of running query fragments.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores may improve the overall performance on machines\n+     * with large CPU count, because it will decrease the number of context switches.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+     * may decrease the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param operationPoolSize Number of threads responsible for network operations processing.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setOperationPoolSize(int operationPoolSize) {\n+        if (operationPoolSize < DEFAULT_OPERATION_POOL_SIZE || operationPoolSize == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMDg4OQ==", "bodyText": "Explained in the comment above.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448930889", "createdAt": "2020-07-02T11:21:02Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SqlConfig.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.sql.SqlQuery;\n+\n+import static com.hazelcast.internal.util.Preconditions.checkNotNegative;\n+import static com.hazelcast.internal.util.Preconditions.checkPositive;\n+\n+/**\n+ * SQL service configuration.\n+ */\n+public class SqlConfig {\n+    /** Default number of threads responsible for query execution. */\n+    public static final int DEFAULT_EXECUTOR_POOL_SIZE = -1;\n+\n+    /** Default number of threads responsible for network operations processing. */\n+    public static final int DEFAULT_OPERATION_POOL_SIZE = -1;\n+\n+    /** Default timeout in milliseconds that is applied to queries without explicit timeout. */\n+    public static final int DEFAULT_QUERY_TIMEOUT = 0;\n+\n+    /** Number of threads responsible for query execution. */\n+    private int executorPoolSize = DEFAULT_EXECUTOR_POOL_SIZE;\n+\n+    /** Number of threads responsible for network operations processing. */\n+    private int operationPoolSize = DEFAULT_OPERATION_POOL_SIZE;\n+\n+    /** Timeout in milliseconds that is applied to queries without an explicit timeout. */\n+    private long queryTimeoutMillis = DEFAULT_QUERY_TIMEOUT;\n+\n+    /**\n+     * Gets the number of threads responsible for query execution.\n+     *\n+     * @return Number of threads responsible for query execution.\n+     */\n+    public int getExecutorPoolSize() {\n+        return executorPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for query execution.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores will limit the degree of parallelism of the SQL subsystem. This\n+     * may be beneficial if you would like to prioritize other CPU-intensive workloads on the same machine.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it may decrease\n+     * the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param executorPoolSize Number of threads responsible for query execution.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setExecutorPoolSize(int executorPoolSize) {\n+        if (executorPoolSize < DEFAULT_EXECUTOR_POOL_SIZE || executorPoolSize == 0) {\n+            checkPositive(executorPoolSize, \"Executor pool size should be positive or -1: \" + executorPoolSize);\n+        }\n+\n+        this.executorPoolSize = executorPoolSize;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of threads responsible for network operations processing.\n+     *\n+     * @return Number of threads responsible for network operations processing.\n+     */\n+    public int getOperationPoolSize() {\n+        return operationPoolSize;\n+    }\n+\n+    /**\n+     * Sets the number of threads responsible for network operations processing.\n+     * <p>\n+     * When Hazelcast members execute a query, they send commands to each other over the network to coordinate the execution.\n+     * This includes requests to start or stop query execution, or a request to process a batch of data. These commands are\n+     * processed in a separate operation thread pool, to avoid frequent interruption of running query fragments.\n+     * <p>\n+     * The default value {@code -1} sets the pool size equal to the number of CPU cores, and should be good enough\n+     * for the most workloads.\n+     * <p>\n+     * Setting the value to less than the number of CPU cores may improve the overall performance on machines\n+     * with large CPU count, because it will decrease the number of context switches.\n+     * <p>\n+     * It is not recommended to set the value of this parameter greater than the number of CPU cores because it\n+     * may decrease the system's overall performance due to excessive context switches.\n+     * <p>\n+     * Defaults to {@code -1}.\n+     *\n+     * @param operationPoolSize Number of threads responsible for network operations processing.\n+     * @return This instance for chaining.\n+     */\n+    public SqlConfig setOperationPoolSize(int operationPoolSize) {\n+        if (operationPoolSize < DEFAULT_OPERATION_POOL_SIZE || operationPoolSize == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1ODQ5OQ=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDExOTU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNDowN1rOGq7S0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyMToyOFrOGsIlFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NDg1MA==", "bodyText": "AFAIU, this is a public class, shall we make it final ?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447664850", "createdAt": "2020-06-30T13:04:07Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMTA5Mg==", "bodyText": "Agree. Marked as final.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448931092", "createdAt": "2020-07-02T11:21:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NDg1MA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDEyNzQwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjowMFrOGq7XuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToxOTozNFrOGsIhfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwNQ==", "bodyText": "Not sure that I understand which page we are talking about? Maybe use \"portion\" instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447666105", "createdAt": "2020-06-30T13:06:00Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Value for the timeout that is disabled. */\n+    public static final long TIMEOUT_DISABLED = 0;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMDE3NQ==", "bodyText": "This is about \"cursorBufferSize\". Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448930175", "createdAt": "2020-07-02T11:19:34Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Value for the timeout that is disabled. */\n+    public static final long TIMEOUT_DISABLED = 0;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwNQ=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDE0MzE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowOTo1NVrOGq7huA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToxOTowMFrOGsIgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2ODY2NA==", "bodyText": "Minor: \"Clears query parameters\" to be consistent with the rest of the JavaDoc", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447668664", "createdAt": "2020-06-30T13:09:55Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Value for the timeout that is disabled. */\n+    public static final long TIMEOUT_DISABLED = 0;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters = new ArrayList<>();\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(@Nonnull String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * The SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query\n+     * @return this instance for chaining\n+     * @throws NullPointerException if passed SQL query is null\n+     * @throws IllegalArgumentException if passed SQL query is empty\n+     */\n+    @Nonnull\n+    public SqlQuery setSql(@Nonnull String sql) {\n+        Preconditions.checkNotNull(sql, \"SQL cannot be null\");\n+\n+        if (sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be empty\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query parameters.\n+     *\n+     * @return query parameters\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Sets the query parameters.\n+     * <p>\n+     * You may define parameter placeholders in the query with the {@code \"?\"} character. For every placeholder, a parameter\n+     * value must be provided.\n+     * <p>\n+     * When the method is called, the content of the parameters list is copied. Subsequent changes to the original list don't\n+     * change the query parameters.\n+     *\n+     * @param parameters query parameters\n+     * @return this instance for chaining\n+     *\n+     * @see #addParameter(Object)\n+     * @see #clearParameters()\n+     */\n+    @Nonnull\n+    public SqlQuery setParameters(List<Object> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            this.parameters = new ArrayList<>();\n+        } else {\n+            this.parameters = new ArrayList<>(parameters);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a single parameter to the end of the parameters list.\n+     *\n+     * @param parameter parameter\n+     * @return this instance for chaining\n+     *\n+     * @see #setParameters(List)\n+     * @see #clearParameters()\n+     */\n+    @Nonnull\n+    public SqlQuery addParameter(Object parameter) {\n+        parameters.add(parameter);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Clear query parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyOTkyOQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448929929", "createdAt": "2020-07-02T11:19:00Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlQuery.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.config.SqlConfig;\n+import com.hazelcast.internal.util.Preconditions;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Definition of a SQL query.\n+ * <p>\n+ * This object is mutable. Properties are read once before the execution is started.\n+ * Changes to properties do not affect the behavior of already running queries.\n+ */\n+public class SqlQuery {\n+    /** Value for the timeout that is not set. */\n+    public static final long TIMEOUT_NOT_SET = -1;\n+\n+    /** Value for the timeout that is disabled. */\n+    public static final long TIMEOUT_DISABLED = 0;\n+\n+    /** Default timeout. */\n+    public static final long DEFAULT_TIMEOUT = TIMEOUT_NOT_SET;\n+\n+    /** Default page size. */\n+    public static final int DEFAULT_CURSOR_BUFFER_SIZE = 4096;\n+\n+    private String sql;\n+    private List<Object> parameters = new ArrayList<>();\n+    private long timeout = DEFAULT_TIMEOUT;\n+    private int cursorBufferSize = DEFAULT_CURSOR_BUFFER_SIZE;\n+\n+    public SqlQuery(@Nonnull String sql) {\n+        setSql(sql);\n+    }\n+\n+    /**\n+     * Copying constructor.\n+     */\n+    private SqlQuery(String sql, List<Object> parameters, long timeout, int cursorBufferSize) {\n+        this.sql = sql;\n+        this.parameters = parameters;\n+        this.timeout = timeout;\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    /**\n+     * Gets the SQL query to be executed.\n+     *\n+     * @return SQL query\n+     */\n+    @Nonnull\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    /**\n+     * Sets the SQL query to be executed.\n+     * <p>\n+     * The SQL query cannot be null or empty.\n+     *\n+     * @param sql SQL query\n+     * @return this instance for chaining\n+     * @throws NullPointerException if passed SQL query is null\n+     * @throws IllegalArgumentException if passed SQL query is empty\n+     */\n+    @Nonnull\n+    public SqlQuery setSql(@Nonnull String sql) {\n+        Preconditions.checkNotNull(sql, \"SQL cannot be null\");\n+\n+        if (sql.length() == 0) {\n+            throw new IllegalArgumentException(\"SQL cannot be empty\");\n+        }\n+\n+        this.sql = sql;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the query parameters.\n+     *\n+     * @return query parameters\n+     */\n+    @Nonnull\n+    public List<Object> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Sets the query parameters.\n+     * <p>\n+     * You may define parameter placeholders in the query with the {@code \"?\"} character. For every placeholder, a parameter\n+     * value must be provided.\n+     * <p>\n+     * When the method is called, the content of the parameters list is copied. Subsequent changes to the original list don't\n+     * change the query parameters.\n+     *\n+     * @param parameters query parameters\n+     * @return this instance for chaining\n+     *\n+     * @see #addParameter(Object)\n+     * @see #clearParameters()\n+     */\n+    @Nonnull\n+    public SqlQuery setParameters(List<Object> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            this.parameters = new ArrayList<>();\n+        } else {\n+            this.parameters = new ArrayList<>(parameters);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a single parameter to the end of the parameters list.\n+     *\n+     * @param parameter parameter\n+     * @return this instance for chaining\n+     *\n+     * @see #setParameters(List)\n+     * @see #clearParameters()\n+     */\n+    @Nonnull\n+    public SqlQuery addParameter(Object parameter) {\n+        parameters.add(parameter);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Clear query parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2ODY2NA=="}, "originalCommit": {"oid": "4cc30bab01a1a89a2a7be31fb852236b124359d2"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDE2ODQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxNTo0OFrOGq7xNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToxODoxMlrOGsIe0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MjYyOQ==", "bodyText": "Typo: ff -> if", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447672629", "createdAt": "2020-06-30T13:15:48Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+\n+/**\n+ * SQL query result. Represents a stream of rows.\n+ * <p>\n+ * Use {@link #iterator()} to iterate over the rows. The iterator can be requested only once.\n+ * <p>\n+ * Use {@link #close()} to release the resources associated with the result.\n+ * <p>\n+ * Typical usage pattern:\n+ * <pre>\n+ * try (SqlResult result = hazelcastInstance.getSql().query(\"SELECT ...\")) {\n+ *     for (SqlRow row : result) {\n+ *         // Process the row.\n+ *     }\n+ * }\n+ * </pre>\n+ *\n+ * @see #iterator()\n+ * @see #close()\n+ */\n+public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+    /**\n+     * Gets row metadata.\n+     *\n+     * @return row metadata\n+     */\n+    @Nonnull\n+    SqlRowMetadata getRowMetadata();\n+\n+    /**\n+     * Returns the iterator over the result rows.\n+     * <p>\n+     * The iterator may be requested only once.\n+     *\n+     * @return iterator\n+     * @throws IllegalStateException ff the method is invoked more than once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyOTQ4OQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448929489", "createdAt": "2020-07-02T11:18:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n+\n+/**\n+ * SQL query result. Represents a stream of rows.\n+ * <p>\n+ * Use {@link #iterator()} to iterate over the rows. The iterator can be requested only once.\n+ * <p>\n+ * Use {@link #close()} to release the resources associated with the result.\n+ * <p>\n+ * Typical usage pattern:\n+ * <pre>\n+ * try (SqlResult result = hazelcastInstance.getSql().query(\"SELECT ...\")) {\n+ *     for (SqlRow row : result) {\n+ *         // Process the row.\n+ *     }\n+ * }\n+ * </pre>\n+ *\n+ * @see #iterator()\n+ * @see #close()\n+ */\n+public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+    /**\n+     * Gets row metadata.\n+     *\n+     * @return row metadata\n+     */\n+    @Nonnull\n+    SqlRowMetadata getRowMetadata();\n+\n+    /**\n+     * Returns the iterator over the result rows.\n+     * <p>\n+     * The iterator may be requested only once.\n+     *\n+     * @return iterator\n+     * @throws IllegalStateException ff the method is invoked more than once", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MjYyOQ=="}, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDE5MTgwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyMToxNFrOGq7_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToxODozNlrOGsIfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3NjMxNQ==", "bodyText": "Minor Get -> Gets", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447676315", "createdAt": "2020-06-30T13:21:14Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+import com.hazelcast.spi.annotation.PrivateApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public final class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    @PrivateApi\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public SqlRowMetadata(@Nonnull List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return the number of columns in the row\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyOTY4OA==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448929688", "createdAt": "2020-07-02T11:18:36Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlRowMetadata.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.internal.util.Preconditions;\n+import com.hazelcast.spi.annotation.PrivateApi;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SQL row metadata.\n+ */\n+public final class SqlRowMetadata {\n+    /** Constant indicating that the column is not found. */\n+    public static final int COLUMN_NOT_FOUND = -1;\n+\n+    private final List<SqlColumnMetadata> columns;\n+    private final Map<String, Integer> nameToIndex;\n+\n+    @PrivateApi\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public SqlRowMetadata(@Nonnull List<SqlColumnMetadata> columns) {\n+        assert columns != null && !columns.isEmpty();\n+\n+        this.columns = new ArrayList<>(columns);\n+\n+        nameToIndex = new HashMap<>(columns.size());\n+\n+        for (int i = 0; i < columns.size(); i++) {\n+            nameToIndex.put(columns.get(i).getName(), i);\n+        }\n+    }\n+\n+    /**\n+     * Gets the number of columns in the row.\n+     *\n+     * @return the number of columns in the row\n+     */\n+    public int getColumnCount() {\n+        return columns.size();\n+    }\n+\n+    /**\n+     * Get column metadata.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3NjMxNQ=="}, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI1MzI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzo0NlrOGq8kpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToxNzozN1rOGsIdwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTc5Nw==", "bodyText": "What if a user constantly not closing the SqlResult? Will this cause OOM on the member eventually?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447685797", "createdAt": "2020-06-30T13:33:46Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.spi.annotation.Beta;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Service to execute distributed SQL queries.\n+ * <h1>Overview</h1>\n+ * Hazelcast is able to execute distributed SQL queries over the following entities:\n+ * <ul>\n+ *     <li>IMap\n+ * </ul>\n+ * When a query is submitted to a member, it is parsed and optimized by the {@code hazelcast-sql} module, that is based on\n+ * <a href=\"https://calcite.apache.org\">Apache Calcite</a>. The {@code hazelcast-sql} must be in the classpath, otherwise\n+ * an exception will be thrown.\n+ * <p>\n+ * During optimization a query is converted into a directed acyclic graph (DAG) that is sent to cluster members for execution.\n+ * Query results are sent back to the originating member asynchronously and returned to the user via {@link SqlResult}.\n+ *\n+ * <h1>Querying an IMap</h1>\n+ * Every IMap instance is exposed as a table with the same name in the {@code partitioned} schema. The {@code partitioned}\n+ * schema is included into a default search path, therefore an IMap could be referenced in an SQL query with or without the\n+ * schema name.\n+ * <h2>Column resolution</h2>\n+ * Every table backed by an IMap has a set of columns that are resolved automatically. Column resolution uses IMap entries\n+ * located on the member that initiates the query. The engine extracts columns from a key and a value and then merges them\n+ * into a single column set. In case the key and the value have columns with the same name, the key takes precedence.\n+ * <p>\n+ * Columns are extracted from objects as follows:\n+ * <ul>\n+ *     <li>For non-Portable objects, public getters and fields are used to populate the column list. For getters, the first\n+ *     letter is converted to lower case. A getter takes precedence over a field in case of naming conflict\n+ *     <li>For {@link Portable} objects, field names used in the {@link Portable#writePortable(PortableWriter)} method\n+ *     are used to populate the column list\n+ * </ul>\n+ * The whole key and value objects could be accessed through a special fields {@code __key} and {@code this}, respectively. If\n+ * key (value) object has fields, then the whole key (value) field is exposed as a normal field. Otherwise the field is hidden.\n+ * Hidden fields can be accessed directly, but are not returned by {@code SELECT * FROM ...} queries.\n+ * <p>\n+ * If the member that initiates a query doesn't have local entries for the given IMap, the query fails.\n+ * <p>\n+ * Consider the following key/value model:\n+ * <pre>\n+ *     class PersonKey {\n+ *         private long personId;\n+ *         private long deptId;\n+ *\n+ *         public long getPersonId() { ... }\n+ *         public long getDepartmentId() { ... }\n+ *     }\n+ *\n+ *     class Person {\n+ *         public String name;\n+ *     }\n+ * </pre>\n+ * This model will be resolved to the following table columns:\n+ * <ul>\n+ *     <li>personId BIGINT\n+ *     <li>departmentId BIGINT\n+ *     <li>name VARCHAR\n+ *     <li>__key OBJECT (hidden)\n+ *     <li>this OBJECT (hidden)\n+ * </ul>\n+ * <h2>Consistency</h2>\n+ * Results returned from IMap query are weakly consistent:\n+ * <ul>\n+ *     <li>If an entry was not updated during iteration, it is guaranteed to be returned exactly once\n+ *     <li>If an entry was modified during iteration, it might be returned zero, one or several times\n+ * </ul>\n+ * <h1>Usage</h1>\n+ * When a query is executed, an {@link SqlResult} is returned. You may get row iterator from the result. The result must be closed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyOTIxNg==", "bodyText": "Yes, it will cause OOME on many members.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448929216", "createdAt": "2020-07-02T11:17:37Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.spi.annotation.Beta;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Service to execute distributed SQL queries.\n+ * <h1>Overview</h1>\n+ * Hazelcast is able to execute distributed SQL queries over the following entities:\n+ * <ul>\n+ *     <li>IMap\n+ * </ul>\n+ * When a query is submitted to a member, it is parsed and optimized by the {@code hazelcast-sql} module, that is based on\n+ * <a href=\"https://calcite.apache.org\">Apache Calcite</a>. The {@code hazelcast-sql} must be in the classpath, otherwise\n+ * an exception will be thrown.\n+ * <p>\n+ * During optimization a query is converted into a directed acyclic graph (DAG) that is sent to cluster members for execution.\n+ * Query results are sent back to the originating member asynchronously and returned to the user via {@link SqlResult}.\n+ *\n+ * <h1>Querying an IMap</h1>\n+ * Every IMap instance is exposed as a table with the same name in the {@code partitioned} schema. The {@code partitioned}\n+ * schema is included into a default search path, therefore an IMap could be referenced in an SQL query with or without the\n+ * schema name.\n+ * <h2>Column resolution</h2>\n+ * Every table backed by an IMap has a set of columns that are resolved automatically. Column resolution uses IMap entries\n+ * located on the member that initiates the query. The engine extracts columns from a key and a value and then merges them\n+ * into a single column set. In case the key and the value have columns with the same name, the key takes precedence.\n+ * <p>\n+ * Columns are extracted from objects as follows:\n+ * <ul>\n+ *     <li>For non-Portable objects, public getters and fields are used to populate the column list. For getters, the first\n+ *     letter is converted to lower case. A getter takes precedence over a field in case of naming conflict\n+ *     <li>For {@link Portable} objects, field names used in the {@link Portable#writePortable(PortableWriter)} method\n+ *     are used to populate the column list\n+ * </ul>\n+ * The whole key and value objects could be accessed through a special fields {@code __key} and {@code this}, respectively. If\n+ * key (value) object has fields, then the whole key (value) field is exposed as a normal field. Otherwise the field is hidden.\n+ * Hidden fields can be accessed directly, but are not returned by {@code SELECT * FROM ...} queries.\n+ * <p>\n+ * If the member that initiates a query doesn't have local entries for the given IMap, the query fails.\n+ * <p>\n+ * Consider the following key/value model:\n+ * <pre>\n+ *     class PersonKey {\n+ *         private long personId;\n+ *         private long deptId;\n+ *\n+ *         public long getPersonId() { ... }\n+ *         public long getDepartmentId() { ... }\n+ *     }\n+ *\n+ *     class Person {\n+ *         public String name;\n+ *     }\n+ * </pre>\n+ * This model will be resolved to the following table columns:\n+ * <ul>\n+ *     <li>personId BIGINT\n+ *     <li>departmentId BIGINT\n+ *     <li>name VARCHAR\n+ *     <li>__key OBJECT (hidden)\n+ *     <li>this OBJECT (hidden)\n+ * </ul>\n+ * <h2>Consistency</h2>\n+ * Results returned from IMap query are weakly consistent:\n+ * <ul>\n+ *     <li>If an entry was not updated during iteration, it is guaranteed to be returned exactly once\n+ *     <li>If an entry was modified during iteration, it might be returned zero, one or several times\n+ * </ul>\n+ * <h1>Usage</h1>\n+ * When a query is executed, an {@link SqlResult} is returned. You may get row iterator from the result. The result must be closed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTc5Nw=="}, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI1OTg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNToxNFrOGq8oyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyMjozN1rOGsInPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4Njg1OQ==", "bodyText": "I'd add a few words to explain - parameters for what?", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r447686859", "createdAt": "2020-06-30T13:35:14Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.spi.annotation.Beta;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Service to execute distributed SQL queries.\n+ * <h1>Overview</h1>\n+ * Hazelcast is able to execute distributed SQL queries over the following entities:\n+ * <ul>\n+ *     <li>IMap\n+ * </ul>\n+ * When a query is submitted to a member, it is parsed and optimized by the {@code hazelcast-sql} module, that is based on\n+ * <a href=\"https://calcite.apache.org\">Apache Calcite</a>. The {@code hazelcast-sql} must be in the classpath, otherwise\n+ * an exception will be thrown.\n+ * <p>\n+ * During optimization a query is converted into a directed acyclic graph (DAG) that is sent to cluster members for execution.\n+ * Query results are sent back to the originating member asynchronously and returned to the user via {@link SqlResult}.\n+ *\n+ * <h1>Querying an IMap</h1>\n+ * Every IMap instance is exposed as a table with the same name in the {@code partitioned} schema. The {@code partitioned}\n+ * schema is included into a default search path, therefore an IMap could be referenced in an SQL query with or without the\n+ * schema name.\n+ * <h2>Column resolution</h2>\n+ * Every table backed by an IMap has a set of columns that are resolved automatically. Column resolution uses IMap entries\n+ * located on the member that initiates the query. The engine extracts columns from a key and a value and then merges them\n+ * into a single column set. In case the key and the value have columns with the same name, the key takes precedence.\n+ * <p>\n+ * Columns are extracted from objects as follows:\n+ * <ul>\n+ *     <li>For non-Portable objects, public getters and fields are used to populate the column list. For getters, the first\n+ *     letter is converted to lower case. A getter takes precedence over a field in case of naming conflict\n+ *     <li>For {@link Portable} objects, field names used in the {@link Portable#writePortable(PortableWriter)} method\n+ *     are used to populate the column list\n+ * </ul>\n+ * The whole key and value objects could be accessed through a special fields {@code __key} and {@code this}, respectively. If\n+ * key (value) object has fields, then the whole key (value) field is exposed as a normal field. Otherwise the field is hidden.\n+ * Hidden fields can be accessed directly, but are not returned by {@code SELECT * FROM ...} queries.\n+ * <p>\n+ * If the member that initiates a query doesn't have local entries for the given IMap, the query fails.\n+ * <p>\n+ * Consider the following key/value model:\n+ * <pre>\n+ *     class PersonKey {\n+ *         private long personId;\n+ *         private long deptId;\n+ *\n+ *         public long getPersonId() { ... }\n+ *         public long getDepartmentId() { ... }\n+ *     }\n+ *\n+ *     class Person {\n+ *         public String name;\n+ *     }\n+ * </pre>\n+ * This model will be resolved to the following table columns:\n+ * <ul>\n+ *     <li>personId BIGINT\n+ *     <li>departmentId BIGINT\n+ *     <li>name VARCHAR\n+ *     <li>__key OBJECT (hidden)\n+ *     <li>this OBJECT (hidden)\n+ * </ul>\n+ * <h2>Consistency</h2>\n+ * Results returned from IMap query are weakly consistent:\n+ * <ul>\n+ *     <li>If an entry was not updated during iteration, it is guaranteed to be returned exactly once\n+ *     <li>If an entry was modified during iteration, it might be returned zero, one or several times\n+ * </ul>\n+ * <h1>Usage</h1>\n+ * When a query is executed, an {@link SqlResult} is returned. You may get row iterator from the result. The result must be closed\n+ * at the end. The code snippet below demonstrates a typical usage pattern:\n+ * <pre>\n+ *     HazelcastInstance instance = ...;\n+ *\n+ *     try (SqlResult result = instance.sql().query(\"SELECT * FROM person\")) {\n+ *         for (SqlRow row : result) {\n+ *             long personId = row.getObject(\"personId\");\n+ *             String name = row.getObject(\"name\");\n+ *             ...\n+ *         }\n+ *     }\n+ * </pre>\n+ */\n+@Beta\n+public interface SqlService {\n+    /**\n+     * Convenient method to execute a distributed query with the given parameters.\n+     * <p>\n+     * Converts passed SQL string and parameters into an {@link SqlQuery} object and invokes {@link #query(SqlQuery)}.\n+     *\n+     * @param sql SQL string\n+     * @param params parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMTY0NQ==", "bodyText": "Added explanation.", "url": "https://github.com/hazelcast/hazelcast/pull/17130#discussion_r448931645", "createdAt": "2020-07-02T11:22:37Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.nio.serialization.Portable;\n+import com.hazelcast.nio.serialization.PortableWriter;\n+import com.hazelcast.spi.annotation.Beta;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Service to execute distributed SQL queries.\n+ * <h1>Overview</h1>\n+ * Hazelcast is able to execute distributed SQL queries over the following entities:\n+ * <ul>\n+ *     <li>IMap\n+ * </ul>\n+ * When a query is submitted to a member, it is parsed and optimized by the {@code hazelcast-sql} module, that is based on\n+ * <a href=\"https://calcite.apache.org\">Apache Calcite</a>. The {@code hazelcast-sql} must be in the classpath, otherwise\n+ * an exception will be thrown.\n+ * <p>\n+ * During optimization a query is converted into a directed acyclic graph (DAG) that is sent to cluster members for execution.\n+ * Query results are sent back to the originating member asynchronously and returned to the user via {@link SqlResult}.\n+ *\n+ * <h1>Querying an IMap</h1>\n+ * Every IMap instance is exposed as a table with the same name in the {@code partitioned} schema. The {@code partitioned}\n+ * schema is included into a default search path, therefore an IMap could be referenced in an SQL query with or without the\n+ * schema name.\n+ * <h2>Column resolution</h2>\n+ * Every table backed by an IMap has a set of columns that are resolved automatically. Column resolution uses IMap entries\n+ * located on the member that initiates the query. The engine extracts columns from a key and a value and then merges them\n+ * into a single column set. In case the key and the value have columns with the same name, the key takes precedence.\n+ * <p>\n+ * Columns are extracted from objects as follows:\n+ * <ul>\n+ *     <li>For non-Portable objects, public getters and fields are used to populate the column list. For getters, the first\n+ *     letter is converted to lower case. A getter takes precedence over a field in case of naming conflict\n+ *     <li>For {@link Portable} objects, field names used in the {@link Portable#writePortable(PortableWriter)} method\n+ *     are used to populate the column list\n+ * </ul>\n+ * The whole key and value objects could be accessed through a special fields {@code __key} and {@code this}, respectively. If\n+ * key (value) object has fields, then the whole key (value) field is exposed as a normal field. Otherwise the field is hidden.\n+ * Hidden fields can be accessed directly, but are not returned by {@code SELECT * FROM ...} queries.\n+ * <p>\n+ * If the member that initiates a query doesn't have local entries for the given IMap, the query fails.\n+ * <p>\n+ * Consider the following key/value model:\n+ * <pre>\n+ *     class PersonKey {\n+ *         private long personId;\n+ *         private long deptId;\n+ *\n+ *         public long getPersonId() { ... }\n+ *         public long getDepartmentId() { ... }\n+ *     }\n+ *\n+ *     class Person {\n+ *         public String name;\n+ *     }\n+ * </pre>\n+ * This model will be resolved to the following table columns:\n+ * <ul>\n+ *     <li>personId BIGINT\n+ *     <li>departmentId BIGINT\n+ *     <li>name VARCHAR\n+ *     <li>__key OBJECT (hidden)\n+ *     <li>this OBJECT (hidden)\n+ * </ul>\n+ * <h2>Consistency</h2>\n+ * Results returned from IMap query are weakly consistent:\n+ * <ul>\n+ *     <li>If an entry was not updated during iteration, it is guaranteed to be returned exactly once\n+ *     <li>If an entry was modified during iteration, it might be returned zero, one or several times\n+ * </ul>\n+ * <h1>Usage</h1>\n+ * When a query is executed, an {@link SqlResult} is returned. You may get row iterator from the result. The result must be closed\n+ * at the end. The code snippet below demonstrates a typical usage pattern:\n+ * <pre>\n+ *     HazelcastInstance instance = ...;\n+ *\n+ *     try (SqlResult result = instance.sql().query(\"SELECT * FROM person\")) {\n+ *         for (SqlRow row : result) {\n+ *             long personId = row.getObject(\"personId\");\n+ *             String name = row.getObject(\"name\");\n+ *             ...\n+ *         }\n+ *     }\n+ * </pre>\n+ */\n+@Beta\n+public interface SqlService {\n+    /**\n+     * Convenient method to execute a distributed query with the given parameters.\n+     * <p>\n+     * Converts passed SQL string and parameters into an {@link SqlQuery} object and invokes {@link #query(SqlQuery)}.\n+     *\n+     * @param sql SQL string\n+     * @param params parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4Njg1OQ=="}, "originalCommit": {"oid": "2326f53ae2ba7769a99e07d76acc32b0558bab24"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 402, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}