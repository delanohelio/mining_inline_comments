{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNTY0NDUy", "number": 16440, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDozMlrODWw3Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDozMlrODWw3Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTk1ODc5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NDozMlrOFbtSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo1NzozMlrOFbusLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5Nzc5OA==", "bodyText": "I don't know why we assert this bit - as it's internal detail", "url": "https://github.com/hazelcast/hazelcast/pull/16440#discussion_r364597798", "createdAt": "2020-01-09T07:54:32Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java", "diffHunk": "@@ -130,24 +117,19 @@ public void whenLossTolerant_andOwnerCrashes_thenContinue() {\n         topic.publish(\"item1\");\n         topic.publish(\"item2\");\n \n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"item1\");\n-                assertContains(listener.objects, \"item2\");\n-            }\n+        assertTrueEventually(() -> {\n+            assertContains(listener.objects, \"item1\");\n+            assertContains(listener.objects, \"item2\");\n         });\n         TestUtil.terminateInstance(topicOwnerInstance);\n \n-        topic.publish(\"newItem\");\n-\n-\n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"newItem\");\n+        assertTrueEventually(() -> {\n+            String item = \"newItem \" + UUID.randomUUID();\n+            topic.publish(item);\n+            assertTrueEventually(() -> {\n+                assertContains(listener.objects, item);\n                 assertFalse(topic.runnersMap.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9584a09d12e0cd13a81d3391f982a4658333097a"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMDg0NA==", "bodyText": "True, I'll remove it.", "url": "https://github.com/hazelcast/hazelcast/pull/16440#discussion_r364620844", "createdAt": "2020-01-09T08:57:32Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java", "diffHunk": "@@ -130,24 +117,19 @@ public void whenLossTolerant_andOwnerCrashes_thenContinue() {\n         topic.publish(\"item1\");\n         topic.publish(\"item2\");\n \n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"item1\");\n-                assertContains(listener.objects, \"item2\");\n-            }\n+        assertTrueEventually(() -> {\n+            assertContains(listener.objects, \"item1\");\n+            assertContains(listener.objects, \"item2\");\n         });\n         TestUtil.terminateInstance(topicOwnerInstance);\n \n-        topic.publish(\"newItem\");\n-\n-\n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"newItem\");\n+        assertTrueEventually(() -> {\n+            String item = \"newItem \" + UUID.randomUUID();\n+            topic.publish(item);\n+            assertTrueEventually(() -> {\n+                assertContains(listener.objects, item);\n                 assertFalse(topic.runnersMap.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5Nzc5OA=="}, "originalCommit": {"oid": "9584a09d12e0cd13a81d3391f982a4658333097a"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 841, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}