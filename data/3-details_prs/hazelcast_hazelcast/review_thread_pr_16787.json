{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTkxODYy", "number": 16787, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowNjo0OFrODtE40g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxOTo0OVrODtgZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTkyNTk0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowNjo0OFrOF-SfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NTo0NVrOF-7CnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng==", "bodyText": "Do not concurrently mutate the given map. -> what does this mean? Should I as a user stop mutating the map during this call?", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400859056", "createdAt": "2020-03-31T12:06:48Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMTc1OA==", "bodyText": "For both of the comments, they are actually from putAll / putAllAsync that I follow.\nIMap#putAll inherits doc from Map#putAll which says The behavior of this operation is undefined if the specified map is modified while the operation is in progress\nIMap#putAllAsync says This version doesn't support batching. Don't mutate the given map until the future completes.\nSince we share the underlying implementation between putAll vs setAll, I would imagine their javadoc to be similar to each other. Do you think we need to change the wordings to make it clearer?", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400901758", "createdAt": "2020-03-31T13:12:56Z", "author": {"login": "pertsodian"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NjEyOA==", "bodyText": "Yes, I'd prefer removing the comment about not mutating the map from both methods since it's misleading and users may think they need to synchronise their entire application to perform a single putAll/setAll call.\nInstead, the guarantee is simple - the operation isn't atomic and concurrent operations may or may not be reflected in the results of the putAll/setAll call. That's it. The call will not block or hang, even if you call other operations on the map concurrently.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400946128", "createdAt": "2020-03-31T14:12:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NTkwOA==", "bodyText": "Got you. Should I remove Don't mutate the given map until the future completes. for putAllAsync as well, so that we are consistent?\nSame for This version doesn't support batching. in both setAllAsync and putAllAsync.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400955908", "createdAt": "2020-03-31T14:24:54Z", "author": {"login": "pertsodian"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNzg5MA==", "bodyText": "I think I would leave the This version doesn't support batching intact, since MapProxyImpl would try to apply batching according to hazelcast.map.put.all.batch.size for putAll / setAll. That comment specifically says batching is not supported for async version.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r401327890", "createdAt": "2020-04-01T02:56:13Z", "author": {"login": "pertsodian"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzM1Nw==", "bodyText": "Yes, you can remove the comment for not mutating from both and you're right, you can leave the batching comment on both.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r401523357", "createdAt": "2020-04-01T10:45:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTA1Ng=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTkzMDU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowODowNlrOF-Siaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowODowNlrOF-Siaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1OTc1NQ==", "bodyText": "This version doesn't support batching. -> it's an implementation detail, not relevant to the contract.\nDon't mutate the given map until the future completes. -> why? It's a pretty bad requirement, most multi-threaded applications won't be able to adhere to this rule.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400859755", "createdAt": "2020-03-31T12:08:06Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -1762,6 +1764,82 @@ void set(@Nonnull K key, @Nonnull V value,\n              long ttl, @Nonnull TimeUnit ttlUnit,\n              long maxIdle, @Nonnull TimeUnit maxIdleUnit);\n \n+    /**\n+     * Copies all of the mappings from the specified map to this map without loading\n+     * non-existing elements from map store (which is more efficient than {@code putAll()}).\n+     * Do not concurrently mutate the given map.\n+     * <p>\n+     * This method breaks the contract of EntryListener.\n+     * EntryEvent of all the updated entries will have null oldValue even if they exist previously.\n+     * <p>\n+     * No atomicity guarantees are given. It could be that in case of failure\n+     * some of the key/value-pairs get written, while others are not.\n+     *\n+     * <p><b>Interactions with the map store</b>\n+     * <p>\n+     * If write-through persistence mode is configured,\n+     * {@link MapStore#store(Object, Object)} is invoked for each element\n+     * before the element is added in memory, which may come at a\n+     * significant performance cost. Exceptions thrown by store fail the\n+     * operation and are propagated to the caller. The elements which\n+     * were added before the exception was thrown will remain in the map,\n+     * the rest will not be added.\n+     * <p>\n+     * If write-behind persistence mode is configured with\n+     * write-coalescing turned off,\n+     * {@link com.hazelcast.map.ReachedMaxSizeException} may be thrown\n+     * if the write-behind queue has reached its per-node maximum\n+     * capacity.\n+     */\n+    void setAll(@Nonnull Map<? extends K, ? extends V> map);\n+\n+    /**\n+     * Asynchronously copies all of the mappings from the specified map to this map\n+     * without loading non-existing elements from map store. This version doesn't", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTk4Njk5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PutAllOperation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoyMjowM1rOF-TEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0Nzo1OVrOF-7G9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2ODQzNg==", "bodyText": "We have a feature called \"rolling upgrade\" which means that at a certain point, a cluster may consist of members of different minor versions, one minor version apart. In another words, this operation and all other objects that are serialised and deserialised may be sent and received by members of different versions. In the case when this object was sent by a 4.0 member and received by a 4.1 member, this may cause an exception.\nThis is why we have to introduce additional safeguards. It starts by adding the Versioned interface to this class. After that, you can add checks in the writeInternal and readInternal methods, like:\n    @Override\n    protected void writeInternal(ObjectDataOutput out) throws IOException {\n        super.writeInternal(out);\n        out.writeObject(mapEntries);\n        if (out.getVersion().isGreaterOrEqual(Versions.V4_1)) {\n            out.writeBoolean(triggerMapLoader);\n        }\n    }\n\n    @Override\n    protected void readInternal(ObjectDataInput in) throws IOException {\n        super.readInternal(in);\n        mapEntries = in.readObject();\n        if (in.getVersion().isGreaterOrEqual(Versions.V4_1)) {\n            triggerMapLoader = in.readBoolean();\n        } else {\n            // old behaviour\n            triggerMapLoader = true;\n        }\n    }\nSame goes for PutAllPartitionAwareOperationFactory .", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400868436", "createdAt": "2020-03-31T12:22:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PutAllOperation.java", "diffHunk": "@@ -211,12 +214,14 @@ private List toBackupListByRemovingEvictedRecords() {\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n         out.writeObject(mapEntries);\n+        out.writeBoolean(triggerMapLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxMjUzNA==", "bodyText": "That makes sense. I have made this change accordingly. Do we need to test for this specifically?", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r400912534", "createdAt": "2020-03-31T13:27:45Z", "author": {"login": "pertsodian"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PutAllOperation.java", "diffHunk": "@@ -211,12 +214,14 @@ private List toBackupListByRemovingEvictedRecords() {\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n         out.writeObject(mapEntries);\n+        out.writeBoolean(triggerMapLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2ODQzNg=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDQ2OQ==", "bodyText": "Hm, yes, we have special \"compatibility tests\" but they are more complicated to write, to run and they don't allow introspecting some internals as they use classloading tricks to separate different instances. We write these tests in our private repository as rolling upgrade is an enterprise feature. So you don't need to be concerned with them.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r401524469", "createdAt": "2020-04-01T10:47:59Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PutAllOperation.java", "diffHunk": "@@ -211,12 +214,14 @@ private List toBackupListByRemovingEvictedRecords() {\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n         out.writeObject(mapEntries);\n+        out.writeBoolean(triggerMapLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2ODQzNg=="}, "originalCommit": {"oid": "29c09c6c2cdec9a4fbb1c621aad77e6b6aa6a7d5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQzMjY1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapPutAllMessageTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxOTo0OVrOF-99sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MTo1OVrOF--vxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTI0OA==", "bodyText": "After you regenerate the codec with correct since version. You will see an extra field parameters.isTriggerMapLoaderExists this should if the client is aware of the new field or not.\nif isTriggerMapLoaderExists is true then your field has two options as you did. But if it is false then, you should fall back to the old behavior and pass a true value into the triggerMapLoader parameter of the operation.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r401571248", "createdAt": "2020-04-01T12:19:49Z", "author": {"login": "asimarslan"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapPutAllMessageTask.java", "diffHunk": "@@ -47,7 +47,7 @@ public MapPutAllMessageTask(ClientMessage clientMessage, Node node, Connection c\n     protected Operation prepareOperation() {\n         MapEntries mapEntries = new MapEntries(parameters.entries);\n         MapOperationProvider operationProvider = getMapOperationProvider(parameters.name);\n-        return operationProvider.createPutAllOperation(parameters.name, mapEntries);\n+        return operationProvider.createPutAllOperation(parameters.name, mapEntries, parameters.triggerMapLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd5b107fe5a5fb541532b3064c46fc814831d56"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDA3MA==", "bodyText": "I have updated.", "url": "https://github.com/hazelcast/hazelcast/pull/16787#discussion_r401584070", "createdAt": "2020-04-01T12:41:59Z", "author": {"login": "pertsodian"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapPutAllMessageTask.java", "diffHunk": "@@ -47,7 +47,7 @@ public MapPutAllMessageTask(ClientMessage clientMessage, Node node, Connection c\n     protected Operation prepareOperation() {\n         MapEntries mapEntries = new MapEntries(parameters.entries);\n         MapOperationProvider operationProvider = getMapOperationProvider(parameters.name);\n-        return operationProvider.createPutAllOperation(parameters.name, mapEntries);\n+        return operationProvider.createPutAllOperation(parameters.name, mapEntries, parameters.triggerMapLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTI0OA=="}, "originalCommit": {"oid": "cbd5b107fe5a5fb541532b3064c46fc814831d56"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 766, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}