{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjA2NDg3", "number": 17769, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxMDo1ODoyNFrOFY12mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxMDo1ODoyNFrOFY12mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxNTkyNDcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/map/LocalListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxMDo1ODoyNFrOIjD0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxMToxMTo0N1rOIjEWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzYzMzY4MQ==", "bodyText": "you can omit <Throwable> here, it's not accurate anyway since we add all kinds of objects to the logCollector.", "url": "https://github.com/hazelcast/hazelcast/pull/17769#discussion_r573633681", "createdAt": "2021-02-10T10:58:24Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/map/LocalListenerTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.logging.AbstractLogger;\n+import com.hazelcast.logging.LogEvent;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.map.impl.MapServiceContext;\n+import com.hazelcast.map.impl.event.MapEventPublisher;\n+import com.hazelcast.map.listener.EntryRemovedListener;\n+import com.hazelcast.spi.impl.NodeEngineImpl;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Level;\n+\n+import static com.hazelcast.map.impl.event.MapEventPublisherImpl.PROP_LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES;\n+import static com.hazelcast.test.Accessors.getNodeEngineImpl;\n+import static com.hazelcast.test.starter.ReflectionUtils.setFieldValueReflectively;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class LocalListenerTest extends HazelcastTestSupport {\n+\n+    @Test\n+    public void no_exception_when_not_notifiable_listener() throws IllegalAccessException {\n+        Config config = getConfig()\n+                .setProperty(PROP_LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES, \"true\");\n+\n+        HazelcastInstance instance = createHazelcastInstance(config);\n+        IMap<String, String> map = instance.getMap(randomString());\n+\n+        MapEventPublisherLogger mapEventPublisherLogger = new MapEventPublisherLogger();\n+        injectLogger(instance, mapEventPublisherLogger);\n+\n+        // this entry-removed-listener is not notifiable,\n+        // since we expect entry added events.\n+        map.addLocalEntryListener((EntryRemovedListener<String, String>) event -> {\n+        });\n+\n+        // generate entry-added event\n+        map.put(\"key\", \"value\");\n+\n+        // no exception we expect (we use assertTrueAllTheTime\n+        // since event is fired after put return)\n+        assertTrueAllTheTime(() -> assertTrue(mapEventPublisherLogger.logCollector.toString(),\n+                mapEventPublisherLogger.logCollector.isEmpty()), 5);\n+\n+    }\n+\n+    private void injectLogger(HazelcastInstance instance,\n+                              MapEventPublisherLogger mapEventPublisherLogger) throws IllegalAccessException {\n+        NodeEngineImpl nodeEngine1 = getNodeEngineImpl(instance);\n+        MapService mapService = nodeEngine1.getService(MapService.SERVICE_NAME);\n+        MapServiceContext mapServiceContext = mapService.getMapServiceContext();\n+        MapEventPublisher mapEventPublisher = mapServiceContext.getMapEventPublisher();\n+        setFieldValueReflectively(mapEventPublisher, \"logger\", mapEventPublisherLogger);\n+    }\n+\n+    private class MapEventPublisherLogger extends AbstractLogger {\n+\n+        private final CopyOnWriteArrayList logCollector\n+                = new CopyOnWriteArrayList<Throwable>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5854b49236cb27d355eccd0c615e816481843a8c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY0MjI4Mg==", "bodyText": "fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17769#discussion_r573642282", "createdAt": "2021-02-10T11:11:47Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/test/java/com/hazelcast/map/LocalListenerTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.logging.AbstractLogger;\n+import com.hazelcast.logging.LogEvent;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.map.impl.MapServiceContext;\n+import com.hazelcast.map.impl.event.MapEventPublisher;\n+import com.hazelcast.map.listener.EntryRemovedListener;\n+import com.hazelcast.spi.impl.NodeEngineImpl;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.logging.Level;\n+\n+import static com.hazelcast.map.impl.event.MapEventPublisherImpl.PROP_LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES;\n+import static com.hazelcast.test.Accessors.getNodeEngineImpl;\n+import static com.hazelcast.test.starter.ReflectionUtils.setFieldValueReflectively;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class LocalListenerTest extends HazelcastTestSupport {\n+\n+    @Test\n+    public void no_exception_when_not_notifiable_listener() throws IllegalAccessException {\n+        Config config = getConfig()\n+                .setProperty(PROP_LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES, \"true\");\n+\n+        HazelcastInstance instance = createHazelcastInstance(config);\n+        IMap<String, String> map = instance.getMap(randomString());\n+\n+        MapEventPublisherLogger mapEventPublisherLogger = new MapEventPublisherLogger();\n+        injectLogger(instance, mapEventPublisherLogger);\n+\n+        // this entry-removed-listener is not notifiable,\n+        // since we expect entry added events.\n+        map.addLocalEntryListener((EntryRemovedListener<String, String>) event -> {\n+        });\n+\n+        // generate entry-added event\n+        map.put(\"key\", \"value\");\n+\n+        // no exception we expect (we use assertTrueAllTheTime\n+        // since event is fired after put return)\n+        assertTrueAllTheTime(() -> assertTrue(mapEventPublisherLogger.logCollector.toString(),\n+                mapEventPublisherLogger.logCollector.isEmpty()), 5);\n+\n+    }\n+\n+    private void injectLogger(HazelcastInstance instance,\n+                              MapEventPublisherLogger mapEventPublisherLogger) throws IllegalAccessException {\n+        NodeEngineImpl nodeEngine1 = getNodeEngineImpl(instance);\n+        MapService mapService = nodeEngine1.getService(MapService.SERVICE_NAME);\n+        MapServiceContext mapServiceContext = mapService.getMapServiceContext();\n+        MapEventPublisher mapEventPublisher = mapServiceContext.getMapEventPublisher();\n+        setFieldValueReflectively(mapEventPublisher, \"logger\", mapEventPublisherLogger);\n+    }\n+\n+    private class MapEventPublisherLogger extends AbstractLogger {\n+\n+        private final CopyOnWriteArrayList logCollector\n+                = new CopyOnWriteArrayList<Throwable>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzYzMzY4MQ=="}, "originalCommit": {"oid": "5854b49236cb27d355eccd0c615e816481843a8c"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 72, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}