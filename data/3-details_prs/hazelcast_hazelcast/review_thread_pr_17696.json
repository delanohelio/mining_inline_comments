{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTk5MDkz", "number": 17696, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo0MTo0NlrOErmEdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxMTo0OVrOEtAf-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTQ3OTU5OnYy", "diffSide": "RIGHT", "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/node-client-applicationContext-hazelcast.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo0MTo0NlrOHecorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTowMzoyNlrOHewUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw==", "bodyText": "If enabled flag is set to false, why do we still have the directory element underneath?", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501688493", "createdAt": "2020-10-08T12:41:46Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/node-client-applicationContext-hazelcast.xml", "diffHunk": "@@ -433,7 +433,7 @@\n                           min-block-size=\"10\"\n                           page-size=\"20\">\n             <hz:size unit=\"GIGABYTES\" value=\"256\"/>\n-            <hz:persistent-memory>\n+            <hz:persistent-memory enabled=\"false\" mode=\"MOUNTED\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MjA5NA==", "bodyText": "We need to test parsing regardless of the value of enabled. Probably it would be better to set it to true instead since false is the default.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501962094", "createdAt": "2020-10-08T19:28:15Z", "author": {"login": "blazember"}, "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/node-client-applicationContext-hazelcast.xml", "diffHunk": "@@ -433,7 +433,7 @@\n                           min-block-size=\"10\"\n                           page-size=\"20\">\n             <hz:size unit=\"GIGABYTES\" value=\"256\"/>\n-            <hz:persistent-memory>\n+            <hz:persistent-memory enabled=\"false\" mode=\"MOUNTED\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw=="}, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMDk1OQ==", "bodyText": "I kept false instead, this way we have cases both for enabled and disabled persistent memory config.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r502010959", "createdAt": "2020-10-08T21:03:26Z", "author": {"login": "blazember"}, "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/node-client-applicationContext-hazelcast.xml", "diffHunk": "@@ -433,7 +433,7 @@\n                           min-block-size=\"10\"\n                           page-size=\"20\">\n             <hz:size unit=\"GIGABYTES\" value=\"256\"/>\n-            <hz:persistent-memory>\n+            <hz:persistent-memory enabled=\"false\" mode=\"MOUNTED\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4ODQ5Mw=="}, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTQ4NTQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo0MzoxN1rOHecsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyOTo1MVrOHetY6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4OTQyMg==", "bodyText": "If enabledNode is false, shall we go through the directories?", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501689422", "createdAt": "2020-10-08T12:43:17Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "diffHunk": "@@ -558,7 +559,24 @@ protected void handleNativeMemory(Node node) {\n             configBuilder.addPropertyValue(\"nativeMemoryConfig\", beanDefinition);\n         }\n \n-        private void handlePersistentMemoryConfig(Node pmemNode, ManagedList<BeanDefinition> directoriesList) {\n+        private void handlePersistentMemoryConfig(Node pmemNode, BeanDefinitionBuilder pmemConfigBuilder,\n+                                                  ManagedList<BeanDefinition> directoriesList) {\n+            Node enabledNode = pmemNode.getAttributes().getNamedItem(\"enabled\");\n+            if (enabledNode != null) {\n+                boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+                pmemConfigBuilder.addPropertyValue(\"enabled\", enabled);\n+            }\n+\n+            Node mode = pmemNode.getAttributes().getNamedItem(\"mode\");\n+            if (mode != null) {\n+                String modeValue = getTextContent(mode);\n+                try {\n+                    pmemConfigBuilder.addPropertyValue(\"mode\", PersistentMemoryMode.valueOf(modeValue));\n+                } catch (Exception ex) {\n+                    throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeValue);\n+                }\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2Mjk4NQ==", "bodyText": "I think yes. We need to build a config object hierarchy matching the declarative config.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501962985", "createdAt": "2020-10-08T19:29:51Z", "author": {"login": "blazember"}, "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "diffHunk": "@@ -558,7 +559,24 @@ protected void handleNativeMemory(Node node) {\n             configBuilder.addPropertyValue(\"nativeMemoryConfig\", beanDefinition);\n         }\n \n-        private void handlePersistentMemoryConfig(Node pmemNode, ManagedList<BeanDefinition> directoriesList) {\n+        private void handlePersistentMemoryConfig(Node pmemNode, BeanDefinitionBuilder pmemConfigBuilder,\n+                                                  ManagedList<BeanDefinition> directoriesList) {\n+            Node enabledNode = pmemNode.getAttributes().getNamedItem(\"enabled\");\n+            if (enabledNode != null) {\n+                boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+                pmemConfigBuilder.addPropertyValue(\"enabled\", enabled);\n+            }\n+\n+            Node mode = pmemNode.getAttributes().getNamedItem(\"mode\");\n+            if (mode != null) {\n+                String modeValue = getTextContent(mode);\n+                try {\n+                    pmemConfigBuilder.addPropertyValue(\"mode\", PersistentMemoryMode.valueOf(modeValue));\n+                } catch (Exception ex) {\n+                    throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeValue);\n+                }\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4OTQyMg=="}, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTQ5NjM5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo0NTo1M1rOHecy8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTowMzozNFrOHewUlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MTEyMw==", "bodyText": "Javadoc would be useful.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r501691123", "createdAt": "2020-10-08T12:45:53Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "diffHunk": "@@ -28,11 +28,18 @@\n  * Configuration class for persistent memory devices (e.g. Intel Optane).\n  */\n public class PersistentMemoryConfig {\n+    private boolean enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMTAyOA==", "bodyText": "Added", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r502011028", "createdAt": "2020-10-08T21:03:34Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "diffHunk": "@@ -28,11 +28,18 @@\n  * Configuration class for persistent memory devices (e.g. Intel Optane).\n  */\n public class PersistentMemoryConfig {\n+    private boolean enabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MTEyMw=="}, "originalCommit": {"oid": "928fdfbbbc055a5a720504f20c17ba4426259d2e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjI5NTYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxMTo0OVrOHgjjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozODo0OFrOHg4osQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTAyMw==", "bodyText": "Looks like this method and none of the overriden methods use the mode argument.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r503899023", "createdAt": "2020-10-13T12:11:49Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "diffHunk": "@@ -312,33 +315,63 @@ protected void fillNativeMemoryConfig(Node node, NativeMemoryConfig nativeMemory\n                 String value = getTextContent(n);\n                 nativeMemoryConfig.setMetadataSpacePercentage(Float.parseFloat(value));\n             } else if (matches(\"persistent-memory-directory\", nodeName)) {\n-                nativeMemoryConfig.getPersistentMemoryConfig()\n-                                  .addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                PersistentMemoryConfig pmemConfig = nativeMemoryConfig.getPersistentMemoryConfig();\n+                pmemConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                // we enable the persistent memory configuration for legacy reasons\n+                pmemConfig.setEnabled(true);\n             } else if (matches(\"persistent-memory\", nodeName)) {\n                 handlePersistentMemoryConfig(nativeMemoryConfig.getPersistentMemoryConfig(), n);\n             }\n         }\n     }\n \n-    protected void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+    private void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+        Node enabledNode = getNamedItemNode(node, \"enabled\");\n+            if (enabledNode != null) {\n+            boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+            persistentMemoryConfig.setEnabled(enabled);\n+        }\n+\n+        final Node modeNode = getNamedItemNode(node, \"mode\");\n+        final String modeStr = getTextContent(modeNode);\n+        PersistentMemoryMode mode = PersistentMemoryMode.MOUNTED;\n+        if (!StringUtil.isNullOrEmptyAfterTrim(modeStr)) {\n+            try {\n+                mode = PersistentMemoryMode.valueOf(modeStr);\n+                persistentMemoryConfig.setMode(mode);\n+            } catch (Exception ex) {\n+                throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeStr);\n+            }\n+        }\n+\n         for (Node parent : childElements(node)) {\n             final String nodeName = cleanNodeName(parent);\n             if (matches(\"directories\", nodeName)) {\n+                if (PersistentMemoryMode.SYSTEM_MEMORY == mode) {\n+                    throw new InvalidConfigurationException(\"Directories for 'persistent-memory' should only be\"\n+                            + \" defined if the 'mode' is set to '\" + PersistentMemoryMode.MOUNTED.name() + \"'\");\n+                }\n+\n                 for (Node dirNode : childElements(parent)) {\n-                    final String childNodeName = cleanNodeName(dirNode);\n-                    if (matches(\"directory\", childNodeName)) {\n-                        Node numaNodeIdNode = getNamedItemNode(dirNode, \"numa-node\");\n-                        int numaNodeId = numaNodeIdNode != null\n-                                ? getIntegerValue(\"numa-node\", getTextContent(numaNodeIdNode))\n-                                : -1;\n-                        String directory = getTextContent(dirNode).trim();\n-                        persistentMemoryConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(directory, numaNodeId));\n-                    }\n+                    handlePersistentMemoryDirectory(persistentMemoryConfig, mode, dirNode);\n                 }\n             }\n         }\n     }\n \n+    protected void handlePersistentMemoryDirectory(PersistentMemoryConfig persistentMemoryConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b877bc503e23cef30f90d87cea12627fdab2169"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDQwMQ==", "bodyText": "Good catch, removed.", "url": "https://github.com/hazelcast/hazelcast/pull/17696#discussion_r504244401", "createdAt": "2020-10-13T20:38:48Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "diffHunk": "@@ -312,33 +315,63 @@ protected void fillNativeMemoryConfig(Node node, NativeMemoryConfig nativeMemory\n                 String value = getTextContent(n);\n                 nativeMemoryConfig.setMetadataSpacePercentage(Float.parseFloat(value));\n             } else if (matches(\"persistent-memory-directory\", nodeName)) {\n-                nativeMemoryConfig.getPersistentMemoryConfig()\n-                                  .addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                PersistentMemoryConfig pmemConfig = nativeMemoryConfig.getPersistentMemoryConfig();\n+                pmemConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(getTextContent(n).trim()));\n+                // we enable the persistent memory configuration for legacy reasons\n+                pmemConfig.setEnabled(true);\n             } else if (matches(\"persistent-memory\", nodeName)) {\n                 handlePersistentMemoryConfig(nativeMemoryConfig.getPersistentMemoryConfig(), n);\n             }\n         }\n     }\n \n-    protected void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+    private void handlePersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig, Node node) {\n+        Node enabledNode = getNamedItemNode(node, \"enabled\");\n+            if (enabledNode != null) {\n+            boolean enabled = getBooleanValue(getTextContent(enabledNode));\n+            persistentMemoryConfig.setEnabled(enabled);\n+        }\n+\n+        final Node modeNode = getNamedItemNode(node, \"mode\");\n+        final String modeStr = getTextContent(modeNode);\n+        PersistentMemoryMode mode = PersistentMemoryMode.MOUNTED;\n+        if (!StringUtil.isNullOrEmptyAfterTrim(modeStr)) {\n+            try {\n+                mode = PersistentMemoryMode.valueOf(modeStr);\n+                persistentMemoryConfig.setMode(mode);\n+            } catch (Exception ex) {\n+                throw new InvalidConfigurationException(\"Invalid 'mode' for 'persistent-memory': \" + modeStr);\n+            }\n+        }\n+\n         for (Node parent : childElements(node)) {\n             final String nodeName = cleanNodeName(parent);\n             if (matches(\"directories\", nodeName)) {\n+                if (PersistentMemoryMode.SYSTEM_MEMORY == mode) {\n+                    throw new InvalidConfigurationException(\"Directories for 'persistent-memory' should only be\"\n+                            + \" defined if the 'mode' is set to '\" + PersistentMemoryMode.MOUNTED.name() + \"'\");\n+                }\n+\n                 for (Node dirNode : childElements(parent)) {\n-                    final String childNodeName = cleanNodeName(dirNode);\n-                    if (matches(\"directory\", childNodeName)) {\n-                        Node numaNodeIdNode = getNamedItemNode(dirNode, \"numa-node\");\n-                        int numaNodeId = numaNodeIdNode != null\n-                                ? getIntegerValue(\"numa-node\", getTextContent(numaNodeIdNode))\n-                                : -1;\n-                        String directory = getTextContent(dirNode).trim();\n-                        persistentMemoryConfig.addDirectoryConfig(new PersistentMemoryDirectoryConfig(directory, numaNodeId));\n-                    }\n+                    handlePersistentMemoryDirectory(persistentMemoryConfig, mode, dirNode);\n                 }\n             }\n         }\n     }\n \n+    protected void handlePersistentMemoryDirectory(PersistentMemoryConfig persistentMemoryConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTAyMw=="}, "originalCommit": {"oid": "1b877bc503e23cef30f90d87cea12627fdab2169"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 175, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}