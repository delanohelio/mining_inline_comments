{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Mjc5ODk2", "number": 16901, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowODoyN1rODzmafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMTozNlrODzmfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDMzMzQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowODoyN1rOGIISsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowODoyN1rOGIISsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3NzY0OQ==", "bodyText": "How about calling it something like ClientConsoleAppIntegrationTest or just ClientConsoleTest? It tests actually not only the configuration, but E2E scenario of connecting to the member. Also, it's the only test for the ClientConsoleApp we have. The same with the method name, I'd generalize it to something like: connectsToHazelcastCluster().\nThe same to ConsoleAppConfigTest.", "url": "https://github.com/hazelcast/hazelcast/pull/16901#discussion_r411177649", "createdAt": "2020-04-20T08:08:27Z", "author": {"login": "leszko"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppConfigTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import static com.hazelcast.test.AbstractHazelcastClassRunner.getTestMethodName;\n+import static com.hazelcast.test.Accessors.getAddress;\n+import static com.hazelcast.test.HazelcastTestSupport.assertTrueEventually;\n+import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestAwareInstanceFactory;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+/**\n+ * Tests a possibility to use a custom YAML client configuration file with the demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({ QuickTest.class })\n+public class ClientConsoleAppConfigTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3d96e044a7ab6e034030a9ef7d2d5f20d769f3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDM0NjkxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppConfigTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMTozNlrOGIIabg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowMjo1NVrOGIlYnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3OTYzMA==", "bodyText": "Consider removing this assertion. In general it's not a good practice to have assertions in the middle of the test, because you distract attention from what you'd like to test. And break the usual test pattern: // given // when // then.\nThe same to ConsoleAppConfigTest.connectsWhenYamlConfigSpecified().", "url": "https://github.com/hazelcast/hazelcast/pull/16901#discussion_r411179630", "createdAt": "2020-04-20T08:11:36Z", "author": {"login": "leszko"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppConfigTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import static com.hazelcast.test.AbstractHazelcastClassRunner.getTestMethodName;\n+import static com.hazelcast.test.Accessors.getAddress;\n+import static com.hazelcast.test.HazelcastTestSupport.assertTrueEventually;\n+import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestAwareInstanceFactory;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+/**\n+ * Tests a possibility to use a custom YAML client configuration file with the demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({ QuickTest.class })\n+public class ClientConsoleAppConfigTest {\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @Rule\n+    public OverridePropertyRule propertyClientConfig = OverridePropertyRule.clear(\"hazelcast.client.config\");\n+\n+    private final TestAwareInstanceFactory factory = new TestAwareInstanceFactory();\n+\n+    @After\n+    public void after() {\n+        factory.terminateAll();\n+    }\n+\n+    @Test\n+    public void connectsWhenYamlConfigSpecified() throws IOException {\n+        HazelcastInstance hz = factory.newHazelcastInstance(smallInstanceConfig());\n+        Address address = getAddress(hz);\n+        File cfgFile = tempFolder.newFile(\"hazelcast-config.yml\");\n+        try (BufferedWriter writer = Files.newBufferedWriter(cfgFile.toPath())) {\n+            writer.write(\"hazelcast-client:\\n\"\n+                    + \"  cluster-name: \" + getTestMethodName() + \"\\n\"\n+                    + \"  network:\\n\"\n+                    + \"    cluster-members:\\n\"\n+                    + \"      - \" + address.getHost() + \":\" + address.getPort() + \"\\n\");\n+        }\n+        propertyClientConfig.setOrClearProperty(cfgFile.getAbsolutePath());\n+        assertTrue(hz.getClientService().getConnectedClients().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3d96e044a7ab6e034030a9ef7d2d5f20d769f3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDMwMQ==", "bodyText": "The assertion here is to avoid potential false positives. You can think about it as a part of the \"given\" clause. So I would rather keep it here.", "url": "https://github.com/hazelcast/hazelcast/pull/16901#discussion_r411654301", "createdAt": "2020-04-20T20:02:55Z", "author": {"login": "kwart"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppConfigTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import static com.hazelcast.test.AbstractHazelcastClassRunner.getTestMethodName;\n+import static com.hazelcast.test.Accessors.getAddress;\n+import static com.hazelcast.test.HazelcastTestSupport.assertTrueEventually;\n+import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestAwareInstanceFactory;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+/**\n+ * Tests a possibility to use a custom YAML client configuration file with the demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({ QuickTest.class })\n+public class ClientConsoleAppConfigTest {\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @Rule\n+    public OverridePropertyRule propertyClientConfig = OverridePropertyRule.clear(\"hazelcast.client.config\");\n+\n+    private final TestAwareInstanceFactory factory = new TestAwareInstanceFactory();\n+\n+    @After\n+    public void after() {\n+        factory.terminateAll();\n+    }\n+\n+    @Test\n+    public void connectsWhenYamlConfigSpecified() throws IOException {\n+        HazelcastInstance hz = factory.newHazelcastInstance(smallInstanceConfig());\n+        Address address = getAddress(hz);\n+        File cfgFile = tempFolder.newFile(\"hazelcast-config.yml\");\n+        try (BufferedWriter writer = Files.newBufferedWriter(cfgFile.toPath())) {\n+            writer.write(\"hazelcast-client:\\n\"\n+                    + \"  cluster-name: \" + getTestMethodName() + \"\\n\"\n+                    + \"  network:\\n\"\n+                    + \"    cluster-members:\\n\"\n+                    + \"      - \" + address.getHost() + \":\" + address.getPort() + \"\\n\");\n+        }\n+        propertyClientConfig.setOrClearProperty(cfgFile.getAbsolutePath());\n+        assertTrue(hz.getClientService().getConnectedClients().isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3OTYzMA=="}, "originalCommit": {"oid": "7e3d96e044a7ab6e034030a9ef7d2d5f20d769f3"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 674, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}