{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTIwMDQ0", "number": 17575, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1MToyNFrOEl_GLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1NDoyM1rOEl_Kpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjY2NTQyOnYy", "diffSide": "LEFT", "path": "hazelcast/src/test/java/com/hazelcast/internal/usercodedeployment/impl/filter/UserCodeDeploymentBasicTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1MToyNFrOHVwTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1MjozOFrOHVwWkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MzY0Ng==", "bodyText": "UserCodeDeploymentAbstractTest class is used by EE repo, so we should probably keep it.", "url": "https://github.com/hazelcast/hazelcast/pull/17575#discussion_r492573646", "createdAt": "2020-09-22T08:51:24Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/usercodedeployment/impl/filter/UserCodeDeploymentBasicTest.java", "diffHunk": "@@ -19,28 +19,41 @@\n import com.hazelcast.config.Config;\n import com.hazelcast.config.UserCodeDeploymentConfig;\n import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.internal.util.FilteringClassLoader;\n+import com.hazelcast.map.EntryProcessor;\n import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.HazelcastTestSupport;\n import com.hazelcast.test.TestHazelcastInstanceFactory;\n import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n-import com.hazelcast.internal.util.FilteringClassLoader;\n+import org.junit.After;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import usercodedeployment.ClassWithTwoInnerClasses;\n+import usercodedeployment.DomainClassWithInnerClass;\n+import usercodedeployment.EntryProcessorWithAnonymousAndInner;\n+import usercodedeployment.IncrementingEntryProcessor;\n+import usercodedeployment.blacklisted.BlacklistedEP;\n+import usercodedeployment.whitelisted.WhitelistedEP;\n \n import java.util.Collection;\n \n+import static com.hazelcast.test.starter.HazelcastStarterUtils.assertInstanceOfByClassName;\n import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n \n @RunWith(Parameterized.class)\n @Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n-public class UserCodeDeploymentBasicTest extends UserCodeDeploymentAbstractTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a1bc17c0f6375cf8ed0bc4cc69f50308b6d0e8f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3NDM1NQ==", "bodyText": "Did see the note in the PR description. My bad. Resolving this one.", "url": "https://github.com/hazelcast/hazelcast/pull/17575#discussion_r492574355", "createdAt": "2020-09-22T08:52:38Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/usercodedeployment/impl/filter/UserCodeDeploymentBasicTest.java", "diffHunk": "@@ -19,28 +19,41 @@\n import com.hazelcast.config.Config;\n import com.hazelcast.config.UserCodeDeploymentConfig;\n import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.internal.util.FilteringClassLoader;\n+import com.hazelcast.map.EntryProcessor;\n import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.HazelcastTestSupport;\n import com.hazelcast.test.TestHazelcastInstanceFactory;\n import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n-import com.hazelcast.internal.util.FilteringClassLoader;\n+import org.junit.After;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import usercodedeployment.ClassWithTwoInnerClasses;\n+import usercodedeployment.DomainClassWithInnerClass;\n+import usercodedeployment.EntryProcessorWithAnonymousAndInner;\n+import usercodedeployment.IncrementingEntryProcessor;\n+import usercodedeployment.blacklisted.BlacklistedEP;\n+import usercodedeployment.whitelisted.WhitelistedEP;\n \n import java.util.Collection;\n \n+import static com.hazelcast.test.starter.HazelcastStarterUtils.assertInstanceOfByClassName;\n import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n \n @RunWith(Parameterized.class)\n @Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n-public class UserCodeDeploymentBasicTest extends UserCodeDeploymentAbstractTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MzY0Ng=="}, "originalCommit": {"oid": "2a1bc17c0f6375cf8ed0bc4cc69f50308b6d0e8f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjY3Njg3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/usercodedeployment/DomainClassWithInnerClass.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1NDoyM1rOHVwaxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1NDoyM1rOHVwaxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3NTQyOA==", "bodyText": "nit: redundant new line", "url": "https://github.com/hazelcast/hazelcast/pull/17575#discussion_r492575428", "createdAt": "2020-09-22T08:54:23Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/usercodedeployment/DomainClassWithInnerClass.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package usercodedeployment;\n+\n+import java.io.Serializable;\n+\n+public class DomainClassWithInnerClass implements Serializable {\n+\n+    public final InnerClass innerObject;\n+\n+    public DomainClassWithInnerClass(InnerClass enumVal) {\n+        this.innerObject = enumVal;\n+    }\n+\n+    public static class InnerClass implements Serializable {\n+        public final int value;\n+\n+        public InnerClass(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a1bc17c0f6375cf8ed0bc4cc69f50308b6d0e8f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 251, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}