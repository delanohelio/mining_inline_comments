{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTU1ODcy", "number": 17030, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1MzowM1rOECkpcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOToyMjoxMFrOEJEK9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTMzMDQwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1MzowM1rOGfHE6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1MzowM1rOGfHE6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NDk4NQ==", "bodyText": "Minor: add some javadoc and the @since tag.", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r435274985", "createdAt": "2020-06-04T13:53:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class ComputeEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b0b58a773eb4c9db7b90242386c1b59edd09d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTQwNzU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOToyMToyNlrOGpZ-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTozMTo0OVrOGpaSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ==", "bodyText": "I can't say I'm crazy about this approach because there is no guarantee for fairness and you could be stuck in this method for a long time.", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446070281", "createdAt": "2020-06-26T09:21:26Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2057,4 +2057,40 @@ private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mapping\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeLocally(key, remappingFunction);\n+    }\n+\n+    private V computeLocally(K key,\n+                             BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MjUwMA==", "bodyText": "True, it can suffer from livelock but we need to update the value atomically by computing the new value locally. Do you think we should give up after some time?", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446072500", "createdAt": "2020-06-26T09:25:39Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2057,4 +2057,40 @@ private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mapping\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeLocally(key, remappingFunction);\n+    }\n+\n+    private V computeLocally(K key,\n+                             BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ=="}, "originalCommit": {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3NTU5Mg==", "bodyText": "There's even a description of this problem in the javadoc and it mentions using serializable mapping functions instead - https://github.com/hazelcast/hazelcast/pull/17030/files#diff-881ec66ec2a01669cfd1f0952225df34R3101", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446075592", "createdAt": "2020-06-26T09:31:49Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2057,4 +2057,40 @@ private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mapping\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeLocally(key, remappingFunction);\n+    }\n+\n+    private V computeLocally(K key,\n+                             BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ=="}, "originalCommit": {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTQwOTgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOToyMjoxMFrOGpZ_bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOToyNjozNVrOGpaIkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDYzNg==", "bodyText": "Unbound looping.", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446070636", "createdAt": "2020-06-26T09:22:10Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java", "diffHunk": "@@ -1124,4 +1125,46 @@ public void forEach(@Nonnull BiConsumer<? super K, ? super V> action) {\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        if (SerializationUtil.isClassStaticAndSerializable(remappingFunction)\n+                && isClusterVersionGreaterOrEqual(Versions.V4_1)) {\n+            ComputeEntryProcessor<K, V> ep = new ComputeEntryProcessor<>(remappingFunction);\n+            return executeOnKey(key, ep);\n+        } else {\n+            return computeLocally(key, remappingFunction);\n+        }\n+    }\n+\n+    private V computeLocally(K key,\n+                                      BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3Mjk3OA==", "bodyText": "Same comment - not sure how we can replace the value without retrying indefinitely. That's always going to be a problem if the mapping function is not serializable.", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446072978", "createdAt": "2020-06-26T09:26:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java", "diffHunk": "@@ -1124,4 +1125,46 @@ public void forEach(@Nonnull BiConsumer<? super K, ? super V> action) {\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        if (SerializationUtil.isClassStaticAndSerializable(remappingFunction)\n+                && isClusterVersionGreaterOrEqual(Versions.V4_1)) {\n+            ComputeEntryProcessor<K, V> ep = new ComputeEntryProcessor<>(remappingFunction);\n+            return executeOnKey(key, ep);\n+        } else {\n+            return computeLocally(key, remappingFunction);\n+        }\n+    }\n+\n+    private V computeLocally(K key,\n+                                      BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDYzNg=="}, "originalCommit": {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 552, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}