{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzc3MTgx", "number": 17917, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyMjo0OVrOFA2Xig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODowM1rOFA2hYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDM1MDgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ExternalMemberConfigurationOverrideEnvTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyMjo0OVrOH_Vnfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyNjowM1rOH_Vwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3NjUxMQ==", "bodyText": "I think we need a test for a non-existent config as well. We rely on getting a non-null config for config.getSplitBrainProtectionConfig(name) in MemberDomConfigProcessor, but it's not tested.", "url": "https://github.com/hazelcast/hazelcast/pull/17917#discussion_r536176511", "createdAt": "2020-12-04T15:22:49Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ExternalMemberConfigurationOverrideEnvTest.java", "diffHunk": "@@ -142,6 +144,22 @@ public void shouldHandleUserCodeDeploymentConfig() throws Exception {\n         assertEquals(UserCodeDeploymentConfig.ClassCacheMode.OFF, config.getUserCodeDeploymentConfig().getClassCacheMode());\n     }\n \n+    @Test\n+    public void shouldHandleSplitBrainProtectionConfig() throws Exception {\n+        Config config = new Config();\n+        config.getSplitBrainProtectionConfig(\"foo\")\n+          .setEnabled(true)\n+          .setProtectOn(SplitBrainProtectionOn.READ);\n+\n+        withEnvironmentVariable(\"HZ_SPLITBRAINPROTECTION_FOO_ENABLED\", \"true\")\n+          .and(\"HZ_SPLITBRAINPROTECTION_FOO_FUNCTIONCLASSNAME\", \"com.foo.SomeClass\")\n+          .execute(() -> new ExternalConfigurationOverride().overwriteMemberConfig(config));\n+\n+        assertTrue(config.getSplitBrainProtectionConfig(\"foo\").isEnabled());\n+        assertSame(SplitBrainProtectionOn.READ, config.getSplitBrainProtectionConfig(\"foo\").getProtectOn());\n+        assertEquals(\"com.foo.SomeClass\", config.getSplitBrainProtectionConfig(\"foo\").getFunctionClassName());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dbe40197d1cb86ba0515e5563cbef3750b3b60"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3ODE3NA==", "bodyText": "There are no non-existent configs. They get instantiated on get (just like our data structures).\n /**\n  * Returns a config for the given name, creating one\n  * if necessary and adding it to the collection of known configurations.\n  * (...)\n  */\n\nNotice that this test actually fetches a non-existing \"foo\" config at the beginning", "url": "https://github.com/hazelcast/hazelcast/pull/17917#discussion_r536178174", "createdAt": "2020-12-04T15:25:07Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ExternalMemberConfigurationOverrideEnvTest.java", "diffHunk": "@@ -142,6 +144,22 @@ public void shouldHandleUserCodeDeploymentConfig() throws Exception {\n         assertEquals(UserCodeDeploymentConfig.ClassCacheMode.OFF, config.getUserCodeDeploymentConfig().getClassCacheMode());\n     }\n \n+    @Test\n+    public void shouldHandleSplitBrainProtectionConfig() throws Exception {\n+        Config config = new Config();\n+        config.getSplitBrainProtectionConfig(\"foo\")\n+          .setEnabled(true)\n+          .setProtectOn(SplitBrainProtectionOn.READ);\n+\n+        withEnvironmentVariable(\"HZ_SPLITBRAINPROTECTION_FOO_ENABLED\", \"true\")\n+          .and(\"HZ_SPLITBRAINPROTECTION_FOO_FUNCTIONCLASSNAME\", \"com.foo.SomeClass\")\n+          .execute(() -> new ExternalConfigurationOverride().overwriteMemberConfig(config));\n+\n+        assertTrue(config.getSplitBrainProtectionConfig(\"foo\").isEnabled());\n+        assertSame(SplitBrainProtectionOn.READ, config.getSplitBrainProtectionConfig(\"foo\").getProtectOn());\n+        assertEquals(\"com.foo.SomeClass\", config.getSplitBrainProtectionConfig(\"foo\").getFunctionClassName());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3NjUxMQ=="}, "originalCommit": {"oid": "70dbe40197d1cb86ba0515e5563cbef3750b3b60"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3ODgzOA==", "bodyText": "Ignore this comment, it is tested by the existing config builder tests.", "url": "https://github.com/hazelcast/hazelcast/pull/17917#discussion_r536178838", "createdAt": "2020-12-04T15:26:03Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ExternalMemberConfigurationOverrideEnvTest.java", "diffHunk": "@@ -142,6 +144,22 @@ public void shouldHandleUserCodeDeploymentConfig() throws Exception {\n         assertEquals(UserCodeDeploymentConfig.ClassCacheMode.OFF, config.getUserCodeDeploymentConfig().getClassCacheMode());\n     }\n \n+    @Test\n+    public void shouldHandleSplitBrainProtectionConfig() throws Exception {\n+        Config config = new Config();\n+        config.getSplitBrainProtectionConfig(\"foo\")\n+          .setEnabled(true)\n+          .setProtectOn(SplitBrainProtectionOn.READ);\n+\n+        withEnvironmentVariable(\"HZ_SPLITBRAINPROTECTION_FOO_ENABLED\", \"true\")\n+          .and(\"HZ_SPLITBRAINPROTECTION_FOO_FUNCTIONCLASSNAME\", \"com.foo.SomeClass\")\n+          .execute(() -> new ExternalConfigurationOverride().overwriteMemberConfig(config));\n+\n+        assertTrue(config.getSplitBrainProtectionConfig(\"foo\").isEnabled());\n+        assertSame(SplitBrainProtectionOn.READ, config.getSplitBrainProtectionConfig(\"foo\").getProtectOn());\n+        assertEquals(\"com.foo.SomeClass\", config.getSplitBrainProtectionConfig(\"foo\").getFunctionClassName());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3NjUxMQ=="}, "originalCommit": {"oid": "70dbe40197d1cb86ba0515e5563cbef3750b3b60"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDM3NjAxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/SplitBrainProtectionConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODowM1rOH_V2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODowM1rOH_V2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDMxMA==", "bodyText": "I see that the merge introduced some empty lines here. Will remove them in the next change.", "url": "https://github.com/hazelcast/hazelcast/pull/17917#discussion_r536180310", "createdAt": "2020-12-04T15:28:03Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/config/SplitBrainProtectionConfig.java", "diffHunk": "@@ -71,7 +71,9 @@\n     private String name;\n     private boolean enabled;\n     private int minimumClusterSize = 2;\n-    private List<SplitBrainProtectionListenerConfig> listenerConfigs = new ArrayList<SplitBrainProtectionListenerConfig>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dbe40197d1cb86ba0515e5563cbef3750b3b60"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4987, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}