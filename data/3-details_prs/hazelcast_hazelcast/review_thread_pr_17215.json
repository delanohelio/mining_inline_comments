{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MDE5MTk5", "number": 17215, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo1ODowMFrOEQXm3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxNzozOFrOEQX-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTk5NDUzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientScheduledExecutorProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo1ODowMFrOG0fCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo1ODowMFrOG0fCKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NzU5Mg==", "bodyText": "I like what you did here, but unfortunately the NamedTask marker is public, meaning anyone can implement it directly without the use of our helper. In this case, the AbstractTaskDecorator inheritance expectation is not going to be valid.", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r457687592", "createdAt": "2020-07-20T20:58:00Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientScheduledExecutorProxy.java", "diffHunk": "@@ -382,12 +394,19 @@ private int getTaskOrKeyPartitionId(Runnable task, Object key) {\n     }\n \n     private String extractNameOrGenerateOne(Object command) {\n-        String name = null;\n-        if (command instanceof NamedTask) {\n-            name = ((NamedTask) command).getName();\n-        }\n+        String taskName = getNamedTaskName(command);\n+        return taskName != null ? taskName : UuidUtil.newUnsecureUuidString();\n+    }\n \n-        return name != null ? name : UuidUtil.newUnsecureUuidString();\n+    private String getNamedTaskName(Object command) {\n+        if (command instanceof AbstractTaskDecorator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTk5OTA5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientScheduledExecutorProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDo1OToyNVrOG0fE9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoxMDowM1rOG0hA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4ODMwOQ==", "bodyText": "Same here.", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r457688309", "createdAt": "2020-07-20T20:59:25Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientScheduledExecutorProxy.java", "diffHunk": "@@ -433,4 +452,11 @@ private String extractNameOrGenerateOne(Object command) {\n             throw rethrow(e);\n         }\n     }\n+\n+    private boolean isAutoDisposable(Object command) {\n+        if (command instanceof AbstractTaskDecorator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMDA0MA==", "bodyText": "I think in that case this is handled at line 460", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r457720040", "createdAt": "2020-07-20T22:10:03Z", "author": {"login": "peterjot"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientScheduledExecutorProxy.java", "diffHunk": "@@ -433,4 +452,11 @@ private String extractNameOrGenerateOne(Object command) {\n             throw rethrow(e);\n         }\n     }\n+\n+    private boolean isAutoDisposable(Object command) {\n+        if (command instanceof AbstractTaskDecorator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4ODMwOQ=="}, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjAzNTI3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/ScheduledExecutorServiceProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxMToxN1rOG0fbTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1ODowM1rOG1BTVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDAzMA==", "bodyText": "Same concerns as client proxy", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r457694030", "createdAt": "2020-07-20T21:11:17Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/ScheduledExecutorServiceProxy.java", "diffHunk": "@@ -493,11 +503,10 @@ private String extractNameOrGenerateOne(Object command) {\n         return createFutureProxy(uuid, taskName);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     private <T> T initializeManagedContext(Object object) {\n         ManagedContext context = getNodeEngine().getSerializationService().getManagedContext();\n-        if (object instanceof NamedTaskDecorator) {\n-            ((NamedTaskDecorator) object).initializeContext(context);\n+        if (object instanceof AbstractTaskDecorator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0OTA0NA==", "bodyText": "It seems to me that an object implementing NamedTask is handled by the else block. As it worked before.", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r458249044", "createdAt": "2020-07-21T16:58:03Z", "author": {"login": "peterjot"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/ScheduledExecutorServiceProxy.java", "diffHunk": "@@ -493,11 +503,10 @@ private String extractNameOrGenerateOne(Object command) {\n         return createFutureProxy(uuid, taskName);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     private <T> T initializeManagedContext(Object object) {\n         ManagedContext context = getNodeEngine().getSerializationService().getManagedContext();\n-        if (object instanceof NamedTaskDecorator) {\n-            ((NamedTaskDecorator) object).initializeContext(context);\n+        if (object instanceof AbstractTaskDecorator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDAzMA=="}, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjA1NDkzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/impl/ScheduledExecutorServiceBasicTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxNzozOFrOG0fnUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxNzozOFrOG0fnUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NzEwNg==", "bodyText": "Thread.sleep as you already mentioned is prone to cause flakiness. See assertTrueEventually which works with the maximum test waiting time.", "url": "https://github.com/hazelcast/hazelcast/pull/17215#discussion_r457697106", "createdAt": "2020-07-20T21:17:38Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/impl/ScheduledExecutorServiceBasicTest.java", "diffHunk": "@@ -874,6 +904,49 @@ public void schedule_thenCancelAndGet() throws Exception {\n         first.get();\n     }\n \n+    @Test\n+    public void schedule_whenAutoDisposable_thenGet() throws Exception {\n+        HazelcastInstance[] instances = createClusterWithCount(2);\n+        IScheduledExecutorService executorService = getScheduledExecutor(instances, \"s\");\n+\n+        IScheduledFuture<Double> future = executorService.schedule(autoDisposable(new PlainCallableTask()), 1, SECONDS);\n+\n+        expected.expect(ExecutionException.class);\n+        expected.expectCause(isA(StaleTaskException.class));\n+        Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502a4cfa5a4d0d225c7ebc26be680f4b47775e87"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 480, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}