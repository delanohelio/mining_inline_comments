{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTUxNjI5", "number": 17556, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo1OTo0OVrOEpuWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODoxMFrOEpz3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTg2Mzk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientExceptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo1OTo0OVrOHbkbyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMToyOTo0OVrOHbqPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MDUzNg==", "bodyText": "Question: should we create a test that would verify that each error code is registered in both ClientExceptions and ClientExceptionFactory? The process of adding a new code seems to be error-prone and leads to missing registrations like this one.", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498670536", "createdAt": "2020-10-02T07:59:49Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientExceptions.java", "diffHunk": "@@ -209,6 +209,11 @@ public ClientExceptions(boolean jcacheAvailable) {\n         register(ClientProtocolErrorCodes.STALE_APPEND_REQUEST_EXCEPTION, StaleAppendRequestException.class);\n         register(ClientProtocolErrorCodes.NOT_LEADER_EXCEPTION, NotLeaderException.class);\n         register(ClientProtocolErrorCodes.VERSION_MISMATCH_EXCEPTION, VersionMismatchException.class);\n+        register(ClientProtocolErrorCodes.NO_SUCH_METHOD_ERROR, NoSuchMethodError.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4MzcwOQ==", "bodyText": "Actually, I have better refactoring in my head that I keep postponing. CleintExceptions and ClientExceptionFactory are two separate classes because we had a separate client module before. We can simply merge them so that there can not be a problem like this again. Let me work on that on this pr.", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498683709", "createdAt": "2020-10-02T08:27:19Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientExceptions.java", "diffHunk": "@@ -209,6 +209,11 @@ public ClientExceptions(boolean jcacheAvailable) {\n         register(ClientProtocolErrorCodes.STALE_APPEND_REQUEST_EXCEPTION, StaleAppendRequestException.class);\n         register(ClientProtocolErrorCodes.NOT_LEADER_EXCEPTION, NotLeaderException.class);\n         register(ClientProtocolErrorCodes.VERSION_MISMATCH_EXCEPTION, VersionMismatchException.class);\n+        register(ClientProtocolErrorCodes.NO_SUCH_METHOD_ERROR, NoSuchMethodError.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MDUzNg=="}, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NTc1Mw==", "bodyText": "Merging these classes in a separate PR would be awesome. I'm marking this one as resolved then.", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498765753", "createdAt": "2020-10-02T11:29:49Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientExceptions.java", "diffHunk": "@@ -209,6 +209,11 @@ public ClientExceptions(boolean jcacheAvailable) {\n         register(ClientProtocolErrorCodes.STALE_APPEND_REQUEST_EXCEPTION, StaleAppendRequestException.class);\n         register(ClientProtocolErrorCodes.NOT_LEADER_EXCEPTION, NotLeaderException.class);\n         register(ClientProtocolErrorCodes.VERSION_MISMATCH_EXCEPTION, VersionMismatchException.class);\n+        register(ClientProtocolErrorCodes.NO_SUCH_METHOD_ERROR, NoSuchMethodError.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MDUzNg=="}, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTg3NzU2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODowNDozOFrOHbkkbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODowNDozOFrOHbkkbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3Mjc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion\n          \n          \n            \n                 * @return {@code null} if can not find a constructor as described above, otherwise returns newly constructed exception", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498672751", "createdAt": "2020-10-02T08:04:38Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +208,49 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)\n+     * new Throwable(String message, Throwable cause)\n+     * new Throwable(Throwable cause)\n+     * new Throwable(String message)\n+     * new Throwable()\n+     *\n+     * @param exceptionClass class of the exception\n+     * @param message        message to be pass to constructor of the exception\n+     * @param cause          cause to be set to the exception\n+     * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTg4MDg2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODowNTo1MFrOHbkmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODowNTo1MFrOHbkmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MzMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In all cases the cause is set(via constructor or via initCause)\n          \n          \n            \n                 * In all cases the cause is set (via constructor or via {@code initCause})", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498673308", "createdAt": "2020-10-02T08:05:50Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +208,49 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTkwODU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/testsubjects/CustomExceptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODoxNTowOFrOHbk37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToxODo0MVrOHbm0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3Nzc0Mg==", "bodyText": "Probably it makes sense to add an exception class with non-matching signature and check that it leads to a UndefinedErrorCodeException. Or we could simply keep ClientProtocolErrorCodesTest#testUndefinedException (and modify it slightly). WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498677742", "createdAt": "2020-10-02T08:15:08Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/testsubjects/CustomExceptions.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package testsubjects;\n+\n+public class CustomExceptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcwOTY3NA==", "bodyText": "testUndefinedException does not work anymore.\nWhen you put it this way, I have just realized that the meaning of UndefinedErrorCodeException has changed also. The Javadoc says\nThis exception is thrown when an exception that is coming from the server is not recognized by the protocol.\n * Class name of the original exception is included in the exception\n\nwhich is not correct anymore.\nI will change to\n * This exception is thrown when an exception that is coming from server is not recognized by the protocol and\n * it can not be constructed by the client via reflection.\n * For the client to be able to recreate original exception it should be available on the classpath and\n * it should have one of the following constructors publicly.\n * new Throwable(String message, Throwable cause)\n * new Throwable(Throwable cause)\n * new Throwable(String message)\n * new Throwable()\n * <p>\n * Class name of the original exception is included in the exception.\n\nAnd I can add an exception class with a non-matching signature as you suggested to verify the behavior.", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498709674", "createdAt": "2020-10-02T09:18:41Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/testsubjects/CustomExceptions.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package testsubjects;\n+\n+public class CustomExceptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3Nzc0Mg=="}, "originalCommit": {"oid": "18dd1ddac9db67a1cfe6d044166b7e61b55ccb20"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjc2ODgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/UndefinedErrorCodeException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODoxMFrOHbtQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODoxMFrOHbtQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTE4OA==", "bodyText": "nit: a list (ul/li) + code blocks could be used here to make this part of the javadoc more readable", "url": "https://github.com/hazelcast/hazelcast/pull/17556#discussion_r498815188", "createdAt": "2020-10-02T13:18:10Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/UndefinedErrorCodeException.java", "diffHunk": "@@ -20,8 +20,16 @@\n import com.hazelcast.spi.impl.operationservice.WrappableException;\n \n /**\n- * This exception is thrown when an exception that is coming from server is not recognized by the protocol.\n- * Class name of the original exception is included in the exception\n+ * This exception is thrown when an exception that is coming from server is not recognized by the protocol and\n+ * it can not be constructed by the client via reflection.\n+ * For the client to be able to recreate original exception it should be available on the classpath and\n+ * it should have one of the following constructors publicly.\n+ * new Throwable(String message, Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a8111398f442c2a20d3efeb2e86dd0753f08203"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 235, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}