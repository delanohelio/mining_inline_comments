{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTg5NTE1", "number": 16568, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1NjoxMVrODbi8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoxOTo1M1rODbzv5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjEwNzAwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1NjoxMVrOFjF28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzozOToxNVrOFjIpYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDQ2Ng==", "bodyText": "What if an IN (null) predicate is applied to a sequences of attribute values, where the first one is non-null and the second is null? The first call will result in initialising set which will cause the second iteration to use set.contains() - shouldn't it use isNull() for null items in the set?", "url": "https://github.com/hazelcast/hazelcast/pull/16568#discussion_r372340466", "createdAt": "2020-01-29T11:56:11Z", "author": {"login": "vojtechtoman"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "diffHunk": "@@ -68,11 +69,23 @@ public Predicate accept(Visitor visitor, Indexes indexes) {\n \n     @Override\n     protected boolean applyForSingleAttributeValue(Comparable attributeValue) {\n-        if (attributeValue == null) {\n+        Set<Comparable> set = convertedInValues;\n+\n+        if (attributeValue == null && set == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53b1c62f286585a67646e683c0cb01368964f53"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NTM5Mg==", "bodyText": "Good point, fixing...", "url": "https://github.com/hazelcast/hazelcast/pull/16568#discussion_r372345392", "createdAt": "2020-01-29T12:07:27Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "diffHunk": "@@ -68,11 +69,23 @@ public Predicate accept(Visitor visitor, Indexes indexes) {\n \n     @Override\n     protected boolean applyForSingleAttributeValue(Comparable attributeValue) {\n-        if (attributeValue == null) {\n+        Set<Comparable> set = convertedInValues;\n+\n+        if (attributeValue == null && set == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDQ2Ng=="}, "originalCommit": {"oid": "d53b1c62f286585a67646e683c0cb01368964f53"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4NjE0Nw==", "bodyText": "As it turned out, isNull is not really required here, == null is enough. AbstractIndex.NULL is produced while downgrading from index-based evaluation, see CompositeEqualPredicate.apply for instance, but there is no such downgrading for InPredicate. But still I decided to keep it for consistency with other predicates and added null normalization: 8c9f5a3", "url": "https://github.com/hazelcast/hazelcast/pull/16568#discussion_r372386147", "createdAt": "2020-01-29T13:39:15Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "diffHunk": "@@ -68,11 +69,23 @@ public Predicate accept(Visitor visitor, Indexes indexes) {\n \n     @Override\n     protected boolean applyForSingleAttributeValue(Comparable attributeValue) {\n-        if (attributeValue == null) {\n+        Set<Comparable> set = convertedInValues;\n+\n+        if (attributeValue == null && set == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDQ2Ng=="}, "originalCommit": {"oid": "d53b1c62f286585a67646e683c0cb01368964f53"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg1OTg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoxOTo1M1rOFjga5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1ODozMFrOFjlORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NTY1Mw==", "bodyText": "MInor comment: the presence of null values could be cached in a separate Boolean variable so that \"brute force\" is needed at most once.", "url": "https://github.com/hazelcast/hazelcast/pull/16568#discussion_r372775653", "createdAt": "2020-01-30T06:19:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "diffHunk": "@@ -68,15 +69,32 @@ public Predicate accept(Visitor visitor, Indexes indexes) {\n \n     @Override\n     protected boolean applyForSingleAttributeValue(Comparable attributeValue) {\n-        if (attributeValue == null) {\n+        Set<Comparable> set = convertedInValues;\n+\n+        if (attributeValue == null && set == null) {\n+            // Conversion of the values given to the predicate is possible only\n+            // if the passed attribute value is non-null, otherwise we are\n+            // unable to infer a proper converter. Postpone the conversion and\n+            // do a brute-force comparison.\n+\n+            for (Comparable value : values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "514360e39f2303f42b4e77928f9c738edf08b32b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NDM0MQ==", "bodyText": "Fixed in ba8d175", "url": "https://github.com/hazelcast/hazelcast/pull/16568#discussion_r372854341", "createdAt": "2020-01-30T09:58:30Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/predicates/InPredicate.java", "diffHunk": "@@ -68,15 +69,32 @@ public Predicate accept(Visitor visitor, Indexes indexes) {\n \n     @Override\n     protected boolean applyForSingleAttributeValue(Comparable attributeValue) {\n-        if (attributeValue == null) {\n+        Set<Comparable> set = convertedInValues;\n+\n+        if (attributeValue == null && set == null) {\n+            // Conversion of the values given to the predicate is possible only\n+            // if the passed attribute value is non-null, otherwise we are\n+            // unable to infer a proper converter. Postpone the conversion and\n+            // do a brute-force comparison.\n+\n+            for (Comparable value : values) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NTY1Mw=="}, "originalCommit": {"oid": "514360e39f2303f42b4e77928f9c738edf08b32b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 791, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}