{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMzExODMz", "number": 17612, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0NToxMFrOEnXYHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo1MTowMVrOEnaBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzEyOTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/plan/Plan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0NToxMFrOHX6pfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo1ODoyMFrOHX7Hlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0MDE5MQ==", "bodyText": "Have you considered using a builder pattern?\nI know it's an \"impl\" class, but it would make the initializations more readable.", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494840191", "createdAt": "2020-09-25T08:45:10Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/plan/Plan.java", "diffHunk": "@@ -77,7 +81,8 @@ public Plan(\n         SqlRowMetadata rowMetadata,\n         QueryParameterMetadata parameterMetadata,\n         PlanCacheKey planKey,\n-        Set<PlanObjectKey> objectIds\n+        Set<PlanObjectKey> objectIds,\n+        List<String> mapNames", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e41d2cb7c6efce63f8359e5f272e05014f12d4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0Nzg5NA==", "bodyText": "I would say that both approaches (direct ctor and builder) have their own problems. With the builder, there is more code, and more ways to construct an inconsistent state. So I would prefer to leave it as is.", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494847894", "createdAt": "2020-09-25T08:58:20Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/plan/Plan.java", "diffHunk": "@@ -77,7 +81,8 @@ public Plan(\n         SqlRowMetadata rowMetadata,\n         QueryParameterMetadata parameterMetadata,\n         PlanCacheKey planKey,\n-        Set<PlanObjectKey> objectIds\n+        Set<PlanObjectKey> objectIds,\n+        List<String> mapNames", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0MDE5MQ=="}, "originalCommit": {"oid": "c2e41d2cb7c6efce63f8359e5f272e05014f12d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzQ3NTIwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/security/SqlSecurityContextImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoyMjozMFrOHX97jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo1MDo0OVrOHYAb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5Mzk2Ng==", "bodyText": "Wouldn't it be cleaner to put this class to the EE repo and make it available through some new method in the SecurityContext class? E.g. SecurityContext.createSqlSecurityContext(Subject)", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494893966", "createdAt": "2020-09-25T10:22:30Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/security/SqlSecurityContextImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.security;\n+\n+import com.hazelcast.security.SecurityContext;\n+\n+import javax.security.auth.Subject;\n+import java.security.Permission;\n+\n+public class SqlSecurityContextImpl implements SqlSecurityContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7abc5382532e31edad1619e706541de81c172bd9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNTAwOA==", "bodyText": "Agree. Moved SqlSecurityContextImpl to enterprise. Now it is created from the SecurityContextImpl.", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494935008", "createdAt": "2020-09-25T11:50:49Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/security/SqlSecurityContextImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.security;\n+\n+import com.hazelcast.security.SecurityContext;\n+\n+import javax.security.auth.Subject;\n+import java.security.Permission;\n+\n+public class SqlSecurityContextImpl implements SqlSecurityContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5Mzk2Ng=="}, "originalCommit": {"oid": "7abc5382532e31edad1619e706541de81c172bd9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzU2MjY0OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo1MTowMVrOHX-wAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo1MDowN1rOHYAajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwNzM5NQ==", "bodyText": "Not used.", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494907395", "createdAt": "2020-09-25T10:51:01Z", "author": {"login": "mmedenjak"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -444,4 +428,16 @@ private static PlanNodeSchema getScanSchemaBeforeProject(AbstractMapTable table)\n     private PlanFragmentMapping dataMemberMapping() {\n         return new PlanFragmentMapping(memberIds, true);\n     }\n+\n+    private List<Permission> createPermissions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7abc5382532e31edad1619e706541de81c172bd9"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNDY3MQ==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17612#discussion_r494934671", "createdAt": "2020-09-25T11:50:07Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -444,4 +428,16 @@ private static PlanNodeSchema getScanSchemaBeforeProject(AbstractMapTable table)\n     private PlanFragmentMapping dataMemberMapping() {\n         return new PlanFragmentMapping(memberIds, true);\n     }\n+\n+    private List<Permission> createPermissions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwNzM5NQ=="}, "originalCommit": {"oid": "7abc5382532e31edad1619e706541de81c172bd9"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}