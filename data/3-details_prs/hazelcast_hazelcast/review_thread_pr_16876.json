{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTM3MjU2", "number": 16876, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzozMzoxNlrODwrC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1MDoxN1rODyFLjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzYzNTA5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/ClockProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzozMzoxNlrOGDzZ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1Njo0MVrOGDz5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MTEzNA==", "bodyText": "Minor: \"since\"", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406641134", "createdAt": "2020-04-10T07:33:16Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/ClockProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+/**\n+ * Clock provider.\n+ */\n+public interface ClockProvider {\n+    /**\n+     * @return Current time sinct epoch in millis.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100bf7b6a2ce5e4d0cffb0ff4c65a10e29576892"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTEwNw==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406649107", "createdAt": "2020-04-10T07:56:41Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/ClockProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+/**\n+ * Clock provider.\n+ */\n+public interface ClockProvider {\n+    /**\n+     * @return Current time sinct epoch in millis.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MTEzNA=="}, "originalCommit": {"oid": "100bf7b6a2ce5e4d0cffb0ff4c65a10e29576892"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzg1OTcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOToxMDo1MVrOGD1erg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDozOTo1MVrOGEjCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA==", "bodyText": "Not sure, what condition absence of a member in the member list indicates?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406675118", "createdAt": "2020-04-10T09:10:51Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NzIwNw==", "bodyText": "The EXPLICIT mapping means that we defined the list of nodes where a fragment should be executed. If the member is not in the list, then the fragment should not be executed on it. We indicate the condition \"do not execute that fragment on that node\" via node == null.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406677207", "createdAt": "2020-04-10T09:16:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MDAzNw==", "bodyText": "In 4.1 we will have only one example of such a fragment - root fragment.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406680037", "createdAt": "2020-04-10T09:24:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NzEyNA==", "bodyText": "Probably I'm getting something wrong, but the only thing we do with fragments having null plan is skipping them: https://github.com/hazelcast/hazelcast/pull/16876/files#diff-a72004010c5a07d55b4d36beeb25828bR184, should we just skip their creation?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406687124", "createdAt": "2020-04-10T09:45:36Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MTc4MQ==", "bodyText": "The fragment is defined by a node to be executed and target members. In order to set up streams between send and receive fragments, we need to know the number of inputs and outputs for every edge. E.g. a Receiver[member1, member2] must know that it communicates with Sender[member1, member2, member3], and therefore it should wait for 3 end markers. So we use the QueryExecuteOperationFragment not only to pass the PlanNode but mapping information as well, that is needed by IO nodes.\nYou may see it in action in the usages of CreateExecPlanNodeVisitor.getFragmentMembers - sender gets information about receiver and vice versa.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406691781", "createdAt": "2020-04-10T09:59:16Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzOTk4NA==", "bodyText": "I see, probably that worth a mention somewhere in QueryExecuteOperationFragment javadoc, so one can easily understand that fragments having nothing to execute (PlanNode is null) are valid and what their purpose is.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r407339984", "createdAt": "2020-04-13T06:31:57Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMTYzOQ==", "bodyText": "Added JavaDoc.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r407421639", "createdAt": "2020-04-13T10:39:51Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.plan.PlanFragmentMapping;\n+import com.hazelcast.sql.impl.plan.node.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.DATA_MEMBERS;\n+import static com.hazelcast.sql.impl.operation.QueryExecuteOperationFragmentMapping.EXPLICIT;\n+\n+/**\n+ * Factory to create query execute operations.\n+ */\n+public class QueryExecuteOperationFactory {\n+\n+    private final Plan plan;\n+    private final List<Object> args;\n+    private final Map<Integer, Long> edgeInitialMemoryMap;\n+\n+    public QueryExecuteOperationFactory(\n+        Plan plan,\n+        List<Object> args,\n+        Map<Integer, Long> edgeInitialMemoryMap\n+    ) {\n+        this.plan = plan;\n+        this.args = args;\n+        this.edgeInitialMemoryMap = edgeInitialMemoryMap;\n+    }\n+\n+    public QueryExecuteOperation create(QueryId queryId, UUID targetMemberId) {\n+        int fragmentCount = plan.getFragmentCount();\n+\n+        // Prepare descriptors.\n+        List<QueryExecuteOperationFragment> fragments = new ArrayList<>(fragmentCount);\n+\n+        for (int i = 0; i < fragmentCount; i++) {\n+            PlanFragmentMapping planMapping = plan.getFragmentMapping(i);\n+\n+            QueryExecuteOperationFragmentMapping mapping;\n+            Collection<UUID> memberIds;\n+            PlanNode node;\n+\n+            if (planMapping.isDataMembers()) {\n+                mapping = DATA_MEMBERS;\n+                memberIds = null;\n+                node = plan.getFragment(i);\n+            } else {\n+                mapping = EXPLICIT;\n+                memberIds = planMapping.getMemberIds();\n+                node = memberIds.contains(targetMemberId) ? plan.getFragment(i) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NTExOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDQ0OTIwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/nio/Packet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo0Mjo0OFrOGD61Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowMToyOVrOGD86vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2MjgzOA==", "bodyText": "Something for consideration in this or further PRs: sending a packet of a new type to a mixed version cluster (eg during rolling upgrade from 4.0 to 4.1 while cluster is still operating at cluster version 4.0) will result in 4.0 members logging SEVERE entries (from PacketDispatcher's default case). So whenever new-SQL packets are involved, we should always gate logic on cluster version being at least equal to 4.1.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406762838", "createdAt": "2020-04-10T13:42:48Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/nio/Packet.java", "diffHunk": "@@ -309,11 +309,11 @@ public String describeFlags(char flags) {\n          */\n         MEMBER_HANDSHAKE,\n         /**\n-         * Unused packet type. Available for future use.\n+         * The type of an SQL packet.\n          * <p>\n          * {@code ordinal = 5}\n          */\n-        UNDEFINED5,\n+        SQL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Njk4OQ==", "bodyText": "We are going to implement compatibility checks separately. How it is going to work:\n\nAfter an SQL query is received we create the plan for it (or get it from cache)\nA plan has a fixed list of members where it is supposed to be executed (Plan.getMemberIds())\nWhen a plan is created we will check whether members' version is valid for the plan. If not - an exception will be thrown\n\nThe problem is that we do not have the code that creates the plan yet. It is part of Calcite integration, which is yet to be merged.\nSo our plan is to add this validation logic during Calcite integration.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406796989", "createdAt": "2020-04-10T15:01:29Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/nio/Packet.java", "diffHunk": "@@ -309,11 +309,11 @@ public String describeFlags(char flags) {\n          */\n         MEMBER_HANDSHAKE,\n         /**\n-         * Unused packet type. Available for future use.\n+         * The type of an SQL packet.\n          * <p>\n          * {@code ordinal = 5}\n          */\n-        UNDEFINED5,\n+        SQL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2MjgzOA=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDU0NjEwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxODoyN1rOGD7v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NTo0M1rOGD8wwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NzgxMQ==", "bodyText": "nit: Proxy in general is used to describe remote objects' implementation (eg. IMap -> MapProxyImpl, ITopic -> ReliableTopicProxy). Also, consider extracting an interface for SqlService, it will be a lot easier to run compatibility tests, if those tests need access to the SqlService.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406777811", "createdAt": "2020-04-10T14:18:27Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "diffHunk": "@@ -114,6 +115,13 @@\n      */\n     SplitBrainProtectionService getSplitBrainProtectionService();\n \n+    /**\n+     * Gets SQL service.\n+     *\n+     * @return the SQL service\n+     */\n+    SqlServiceProxy getSqlService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDQzMg==", "bodyText": "SqlServiceProxy is renamed to SqlServiceImpl\nThe interface part of this service is public API, which is going to be implemented in a separate ticket. So we cannot extract anything at the moment, otherwise, it will be an empty interface in the public API package. So instead I removed the method from NodeEngine, because we simply do not need it before the public API is implemented.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r406794432", "createdAt": "2020-04-10T14:55:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/NodeEngine.java", "diffHunk": "@@ -114,6 +115,13 @@\n      */\n     SplitBrainProtectionService getSplitBrainProtectionService();\n \n+    /**\n+     * Gets SQL service.\n+     *\n+     * @return the SQL service\n+     */\n+    SqlServiceProxy getSqlService();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NzgxMQ=="}, "originalCommit": {"oid": "09f0c58b2f5a6994ae2a9cc07a37ae06efbd1275"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODIxOTE0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/LocalMemberIdProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzowODo1OVrOGF42vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1ODozM1rOGF7DHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNzU4Mg==", "bodyText": "And -> An ?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408827582", "createdAt": "2020-04-15T13:08:59Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/LocalMemberIdProvider.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import java.util.UUID;\n+\n+/**\n+ * And interface to get local member ID. We use it to avoid passing {@link com.hazelcast.spi.impl.NodeEngine} everywhere.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MzUxNg==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408863516", "createdAt": "2020-04-15T13:58:33Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/LocalMemberIdProvider.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import java.util.UUID;\n+\n+/**\n+ * And interface to get local member ID. We use it to avoid passing {@link com.hazelcast.spi.impl.NodeEngine} everywhere.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNzU4Mg=="}, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODI3MDYxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoyMTo0MVrOGF5Xhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1NTozOVrOGF650g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNTk3NQ==", "bodyText": "Do we plan to handle such sort of exceptions somewhere on the higher level to hide it from the user?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408835975", "createdAt": "2020-04-15T13:21:41Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.internal.nio.Packet;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControlFactory;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.simple.SimpleFlowControlFactory;\n+import com.hazelcast.sql.impl.exec.root.BlockingRootResultConsumer;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperation;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperationFactory;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandlerImpl;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.state.QueryState;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.sql.impl.state.QueryStateRegistryUpdater;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Proxy for SQL service. Backed by either Calcite-based or no-op implementation.\n+ */\n+public class SqlInternalService {\n+    /** Memory assigned to a single edge mailbox. Will be reworked to dynamic mode when memory manager is implemented. */\n+    private static final long MEMORY_PER_EDGE_MAILBOX = 512 * 1024;\n+\n+    /** Default flow control factory. */\n+    private static final FlowControlFactory FLOW_CONTROL_FACTORY = SimpleFlowControlFactory.INSTANCE;\n+\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** Registry for running queries. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation manager. */\n+    private final QueryOperationHandlerImpl operationHandler;\n+\n+    /** State registry updater. */\n+    private final QueryStateRegistryUpdater stateRegistryUpdater;\n+\n+    public SqlInternalService(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        InternalSerializationService serializationService,\n+        int operationThreadCount,\n+        int fragmentThreadCount,\n+        int outboxBatchSize,\n+        long stateCheckFrequency\n+    ) {\n+        this.nodeServiceProvider = nodeServiceProvider;\n+\n+        // Create state registries since they do not depend on anything.\n+        stateRegistry = new QueryStateRegistry(nodeServiceProvider);\n+\n+        // Operation handler depends on state registry.\n+        operationHandler = new QueryOperationHandlerImpl(\n+            instanceName,\n+            nodeServiceProvider,\n+            serializationService,\n+            stateRegistry,\n+            outboxBatchSize,\n+            FLOW_CONTROL_FACTORY,\n+            fragmentThreadCount,\n+            operationThreadCount\n+        );\n+\n+        // State checker depends on state registries and operation handler.\n+        stateRegistryUpdater = new QueryStateRegistryUpdater(\n+            instanceName,\n+            nodeServiceProvider,\n+            stateRegistry,\n+            operationHandler,\n+            stateCheckFrequency\n+        );\n+    }\n+\n+    public void start() {\n+        stateRegistryUpdater.start();\n+    }\n+\n+    public void reset() {\n+        stateRegistry.reset();\n+    }\n+\n+    public void shutdown() {\n+        stateRegistryUpdater.stop();\n+        operationHandler.stop();\n+\n+        reset();\n+    }\n+\n+    /**\n+     * Internal query execution routine.\n+     *\n+     * @return Query state.\n+     */\n+    public QueryState execute(Plan plan, List<Object> params, long timeout, int pageSize) {\n+        // Get local member ID and check if it is still part of the plan.\n+        UUID localMemberId = nodeServiceProvider.getLocalMemberId();\n+\n+        if (!plan.getPartitionMap().containsKey(localMemberId)) {\n+            throw QueryException.memberLeave(localMemberId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MTEzOA==", "bodyText": "Yes, all exceptions are propagated upwards and will be handled similarly in two places - API entry point and cursor returned from API. You may see it in action in the prototype branch. This is not part of the current PR, because we do not have API yet.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408861138", "createdAt": "2020-04-15T13:55:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.internal.nio.Packet;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControlFactory;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.simple.SimpleFlowControlFactory;\n+import com.hazelcast.sql.impl.exec.root.BlockingRootResultConsumer;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperation;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperationFactory;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandlerImpl;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.state.QueryState;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.sql.impl.state.QueryStateRegistryUpdater;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Proxy for SQL service. Backed by either Calcite-based or no-op implementation.\n+ */\n+public class SqlInternalService {\n+    /** Memory assigned to a single edge mailbox. Will be reworked to dynamic mode when memory manager is implemented. */\n+    private static final long MEMORY_PER_EDGE_MAILBOX = 512 * 1024;\n+\n+    /** Default flow control factory. */\n+    private static final FlowControlFactory FLOW_CONTROL_FACTORY = SimpleFlowControlFactory.INSTANCE;\n+\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** Registry for running queries. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation manager. */\n+    private final QueryOperationHandlerImpl operationHandler;\n+\n+    /** State registry updater. */\n+    private final QueryStateRegistryUpdater stateRegistryUpdater;\n+\n+    public SqlInternalService(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        InternalSerializationService serializationService,\n+        int operationThreadCount,\n+        int fragmentThreadCount,\n+        int outboxBatchSize,\n+        long stateCheckFrequency\n+    ) {\n+        this.nodeServiceProvider = nodeServiceProvider;\n+\n+        // Create state registries since they do not depend on anything.\n+        stateRegistry = new QueryStateRegistry(nodeServiceProvider);\n+\n+        // Operation handler depends on state registry.\n+        operationHandler = new QueryOperationHandlerImpl(\n+            instanceName,\n+            nodeServiceProvider,\n+            serializationService,\n+            stateRegistry,\n+            outboxBatchSize,\n+            FLOW_CONTROL_FACTORY,\n+            fragmentThreadCount,\n+            operationThreadCount\n+        );\n+\n+        // State checker depends on state registries and operation handler.\n+        stateRegistryUpdater = new QueryStateRegistryUpdater(\n+            instanceName,\n+            nodeServiceProvider,\n+            stateRegistry,\n+            operationHandler,\n+            stateCheckFrequency\n+        );\n+    }\n+\n+    public void start() {\n+        stateRegistryUpdater.start();\n+    }\n+\n+    public void reset() {\n+        stateRegistry.reset();\n+    }\n+\n+    public void shutdown() {\n+        stateRegistryUpdater.stop();\n+        operationHandler.stop();\n+\n+        reset();\n+    }\n+\n+    /**\n+     * Internal query execution routine.\n+     *\n+     * @return Query state.\n+     */\n+    public QueryState execute(Plan plan, List<Object> params, long timeout, int pageSize) {\n+        // Get local member ID and check if it is still part of the plan.\n+        UUID localMemberId = nodeServiceProvider.getLocalMemberId();\n+\n+        if (!plan.getPartitionMap().containsKey(localMemberId)) {\n+            throw QueryException.memberLeave(localMemberId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNTk3NQ=="}, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODI3OTU1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoyMzo1MlrOGF5dUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1NjozOVrOGF69Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNzQ1Nw==", "bodyText": "Shall we log the exception here?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408837457", "createdAt": "2020-04-15T13:23:52Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.internal.nio.Packet;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControlFactory;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.simple.SimpleFlowControlFactory;\n+import com.hazelcast.sql.impl.exec.root.BlockingRootResultConsumer;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperation;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperationFactory;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandlerImpl;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.state.QueryState;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.sql.impl.state.QueryStateRegistryUpdater;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Proxy for SQL service. Backed by either Calcite-based or no-op implementation.\n+ */\n+public class SqlInternalService {\n+    /** Memory assigned to a single edge mailbox. Will be reworked to dynamic mode when memory manager is implemented. */\n+    private static final long MEMORY_PER_EDGE_MAILBOX = 512 * 1024;\n+\n+    /** Default flow control factory. */\n+    private static final FlowControlFactory FLOW_CONTROL_FACTORY = SimpleFlowControlFactory.INSTANCE;\n+\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** Registry for running queries. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation manager. */\n+    private final QueryOperationHandlerImpl operationHandler;\n+\n+    /** State registry updater. */\n+    private final QueryStateRegistryUpdater stateRegistryUpdater;\n+\n+    public SqlInternalService(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        InternalSerializationService serializationService,\n+        int operationThreadCount,\n+        int fragmentThreadCount,\n+        int outboxBatchSize,\n+        long stateCheckFrequency\n+    ) {\n+        this.nodeServiceProvider = nodeServiceProvider;\n+\n+        // Create state registries since they do not depend on anything.\n+        stateRegistry = new QueryStateRegistry(nodeServiceProvider);\n+\n+        // Operation handler depends on state registry.\n+        operationHandler = new QueryOperationHandlerImpl(\n+            instanceName,\n+            nodeServiceProvider,\n+            serializationService,\n+            stateRegistry,\n+            outboxBatchSize,\n+            FLOW_CONTROL_FACTORY,\n+            fragmentThreadCount,\n+            operationThreadCount\n+        );\n+\n+        // State checker depends on state registries and operation handler.\n+        stateRegistryUpdater = new QueryStateRegistryUpdater(\n+            instanceName,\n+            nodeServiceProvider,\n+            stateRegistry,\n+            operationHandler,\n+            stateCheckFrequency\n+        );\n+    }\n+\n+    public void start() {\n+        stateRegistryUpdater.start();\n+    }\n+\n+    public void reset() {\n+        stateRegistry.reset();\n+    }\n+\n+    public void shutdown() {\n+        stateRegistryUpdater.stop();\n+        operationHandler.stop();\n+\n+        reset();\n+    }\n+\n+    /**\n+     * Internal query execution routine.\n+     *\n+     * @return Query state.\n+     */\n+    public QueryState execute(Plan plan, List<Object> params, long timeout, int pageSize) {\n+        // Get local member ID and check if it is still part of the plan.\n+        UUID localMemberId = nodeServiceProvider.getLocalMemberId();\n+\n+        if (!plan.getPartitionMap().containsKey(localMemberId)) {\n+            throw QueryException.memberLeave(localMemberId);\n+        }\n+\n+        // Prepare mappings.\n+        QueryExecuteOperationFactory operationFactory = new QueryExecuteOperationFactory(\n+            plan,\n+            params,\n+            createEdgeInitialMemoryMapForPlan(plan)\n+        );\n+\n+        // Register the state.\n+        BlockingRootResultConsumer consumer = new BlockingRootResultConsumer();\n+\n+        QueryState state = stateRegistry.onInitiatorQueryStarted(\n+            localMemberId,\n+            timeout,\n+            plan,\n+            consumer,\n+            operationHandler,\n+            true\n+        );\n+\n+        try {\n+            // Start execution on local member.\n+            QueryExecuteOperation localOp = operationFactory.create(state.getQueryId(), localMemberId);\n+\n+            localOp.setRootConsumer(consumer, pageSize);\n+\n+            operationHandler.submitLocal(localMemberId, localOp);\n+\n+            // Start execution on remote members.\n+            for (UUID memberId : plan.getMemberIds()) {\n+                if (memberId.equals(localMemberId)) {\n+                    continue;\n+                }\n+\n+                QueryExecuteOperation remoteOp = operationFactory.create(state.getQueryId(), memberId);\n+\n+                if (!operationHandler.submit(localMemberId, memberId, remoteOp)) {\n+                    throw QueryException.memberConnection(memberId);\n+                }\n+            }\n+\n+            return state;\n+        } catch (Exception e) {\n+            state.cancel(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MTk1NA==", "bodyText": "The exception will be propagated to the user through API, so there is no serious need to log it.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408861954", "createdAt": "2020-04-15T13:56:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlInternalService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.hazelcast.internal.nio.Packet;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControlFactory;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.simple.SimpleFlowControlFactory;\n+import com.hazelcast.sql.impl.exec.root.BlockingRootResultConsumer;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperation;\n+import com.hazelcast.sql.impl.operation.QueryExecuteOperationFactory;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandlerImpl;\n+import com.hazelcast.sql.impl.plan.Plan;\n+import com.hazelcast.sql.impl.state.QueryState;\n+import com.hazelcast.sql.impl.state.QueryStateRegistry;\n+import com.hazelcast.sql.impl.state.QueryStateRegistryUpdater;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Proxy for SQL service. Backed by either Calcite-based or no-op implementation.\n+ */\n+public class SqlInternalService {\n+    /** Memory assigned to a single edge mailbox. Will be reworked to dynamic mode when memory manager is implemented. */\n+    private static final long MEMORY_PER_EDGE_MAILBOX = 512 * 1024;\n+\n+    /** Default flow control factory. */\n+    private static final FlowControlFactory FLOW_CONTROL_FACTORY = SimpleFlowControlFactory.INSTANCE;\n+\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** Registry for running queries. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation manager. */\n+    private final QueryOperationHandlerImpl operationHandler;\n+\n+    /** State registry updater. */\n+    private final QueryStateRegistryUpdater stateRegistryUpdater;\n+\n+    public SqlInternalService(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        InternalSerializationService serializationService,\n+        int operationThreadCount,\n+        int fragmentThreadCount,\n+        int outboxBatchSize,\n+        long stateCheckFrequency\n+    ) {\n+        this.nodeServiceProvider = nodeServiceProvider;\n+\n+        // Create state registries since they do not depend on anything.\n+        stateRegistry = new QueryStateRegistry(nodeServiceProvider);\n+\n+        // Operation handler depends on state registry.\n+        operationHandler = new QueryOperationHandlerImpl(\n+            instanceName,\n+            nodeServiceProvider,\n+            serializationService,\n+            stateRegistry,\n+            outboxBatchSize,\n+            FLOW_CONTROL_FACTORY,\n+            fragmentThreadCount,\n+            operationThreadCount\n+        );\n+\n+        // State checker depends on state registries and operation handler.\n+        stateRegistryUpdater = new QueryStateRegistryUpdater(\n+            instanceName,\n+            nodeServiceProvider,\n+            stateRegistry,\n+            operationHandler,\n+            stateCheckFrequency\n+        );\n+    }\n+\n+    public void start() {\n+        stateRegistryUpdater.start();\n+    }\n+\n+    public void reset() {\n+        stateRegistry.reset();\n+    }\n+\n+    public void shutdown() {\n+        stateRegistryUpdater.stop();\n+        operationHandler.stop();\n+\n+        reset();\n+    }\n+\n+    /**\n+     * Internal query execution routine.\n+     *\n+     * @return Query state.\n+     */\n+    public QueryState execute(Plan plan, List<Object> params, long timeout, int pageSize) {\n+        // Get local member ID and check if it is still part of the plan.\n+        UUID localMemberId = nodeServiceProvider.getLocalMemberId();\n+\n+        if (!plan.getPartitionMap().containsKey(localMemberId)) {\n+            throw QueryException.memberLeave(localMemberId);\n+        }\n+\n+        // Prepare mappings.\n+        QueryExecuteOperationFactory operationFactory = new QueryExecuteOperationFactory(\n+            plan,\n+            params,\n+            createEdgeInitialMemoryMapForPlan(plan)\n+        );\n+\n+        // Register the state.\n+        BlockingRootResultConsumer consumer = new BlockingRootResultConsumer();\n+\n+        QueryState state = stateRegistry.onInitiatorQueryStarted(\n+            localMemberId,\n+            timeout,\n+            plan,\n+            consumer,\n+            operationHandler,\n+            true\n+        );\n+\n+        try {\n+            // Start execution on local member.\n+            QueryExecuteOperation localOp = operationFactory.create(state.getQueryId(), localMemberId);\n+\n+            localOp.setRootConsumer(consumer, pageSize);\n+\n+            operationHandler.submitLocal(localMemberId, localOp);\n+\n+            // Start execution on remote members.\n+            for (UUID memberId : plan.getMemberIds()) {\n+                if (memberId.equals(localMemberId)) {\n+                    continue;\n+                }\n+\n+                QueryExecuteOperation remoteOp = operationFactory.create(state.getQueryId(), memberId);\n+\n+                if (!operationHandler.submit(localMemberId, memberId, remoteOp)) {\n+                    throw QueryException.memberConnection(memberId);\n+                }\n+            }\n+\n+            return state;\n+        } catch (Exception e) {\n+            state.cancel(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNzQ1Nw=="}, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODM0Nzc2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryDistributedState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozODo1MFrOGF6H2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1ODoyNVrOGF7CuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0ODM0NQ==", "bodyText": "True-> true", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408848345", "createdAt": "2020-04-15T13:38:50Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryDistributedState.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.sql.impl.worker.QueryFragmentExecutable;\n+import com.hazelcast.sql.impl.operation.QueryAbstractExchangeOperation;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * State of a distributed query execution.\n+ */\n+public class QueryDistributedState {\n+    /** Pending batches. */\n+    private final ConcurrentLinkedDeque<QueryAbstractExchangeOperation> pendingOperations = new ConcurrentLinkedDeque<>();\n+\n+    /** Lock to prevent conflicts on initialization and batch arrival. */\n+    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n+\n+    /** Initialized state. */\n+    private volatile InitializedState initializedState;\n+\n+    public boolean isStarted() {\n+        return initializedState != null;\n+    }\n+\n+    /**\n+     * Initialization routine which is called when query start task is executed.\n+     *\n+     * @param fragments Fragment executables.\n+     */\n+    public void onStart(List<QueryFragmentExecutable> fragments) {\n+        lock.writeLock().lock();\n+\n+        try {\n+            // Initialize the state.\n+            initializedState = new InitializedState(fragments);\n+\n+            // Unwind pending batches if needed.\n+            boolean hadPendingBatches = false;\n+\n+            for (QueryAbstractExchangeOperation pendingOperation : pendingOperations) {\n+                onOperation0(pendingOperation);\n+\n+                if (!hadPendingBatches) {\n+                    hadPendingBatches = true;\n+                }\n+            }\n+\n+            if (hadPendingBatches) {\n+                pendingOperations.clear();\n+            }\n+        } finally {\n+            lock.writeLock().unlock();\n+        }\n+    }\n+\n+    public QueryFragmentExecutable onOperation(QueryAbstractExchangeOperation operation) {\n+        lock.readLock().lock();\n+\n+        try {\n+            if (initializedState != null) {\n+                return onOperation0(operation);\n+            } else {\n+                pendingOperations.add(operation);\n+\n+                return null;\n+            }\n+        } finally {\n+            lock.readLock().unlock();\n+        }\n+    }\n+\n+    private QueryFragmentExecutable onOperation0(QueryAbstractExchangeOperation operation) {\n+        assert initializedState != null;\n+\n+        QueryFragmentExecutable fragment = initializedState.getFragment(operation.isInbound(), operation.getEdgeId());\n+\n+        assert fragment != null : operation;\n+\n+        fragment.addOperation(operation);\n+\n+        return fragment;\n+    }\n+\n+    /**\n+     * Callback executed when the fragment is finished.\n+     *\n+     * @return {@code True} if execution of the last fragment finished.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MzQxNg==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408863416", "createdAt": "2020-04-15T13:58:25Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryDistributedState.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.sql.impl.worker.QueryFragmentExecutable;\n+import com.hazelcast.sql.impl.operation.QueryAbstractExchangeOperation;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * State of a distributed query execution.\n+ */\n+public class QueryDistributedState {\n+    /** Pending batches. */\n+    private final ConcurrentLinkedDeque<QueryAbstractExchangeOperation> pendingOperations = new ConcurrentLinkedDeque<>();\n+\n+    /** Lock to prevent conflicts on initialization and batch arrival. */\n+    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n+\n+    /** Initialized state. */\n+    private volatile InitializedState initializedState;\n+\n+    public boolean isStarted() {\n+        return initializedState != null;\n+    }\n+\n+    /**\n+     * Initialization routine which is called when query start task is executed.\n+     *\n+     * @param fragments Fragment executables.\n+     */\n+    public void onStart(List<QueryFragmentExecutable> fragments) {\n+        lock.writeLock().lock();\n+\n+        try {\n+            // Initialize the state.\n+            initializedState = new InitializedState(fragments);\n+\n+            // Unwind pending batches if needed.\n+            boolean hadPendingBatches = false;\n+\n+            for (QueryAbstractExchangeOperation pendingOperation : pendingOperations) {\n+                onOperation0(pendingOperation);\n+\n+                if (!hadPendingBatches) {\n+                    hadPendingBatches = true;\n+                }\n+            }\n+\n+            if (hadPendingBatches) {\n+                pendingOperations.clear();\n+            }\n+        } finally {\n+            lock.writeLock().unlock();\n+        }\n+    }\n+\n+    public QueryFragmentExecutable onOperation(QueryAbstractExchangeOperation operation) {\n+        lock.readLock().lock();\n+\n+        try {\n+            if (initializedState != null) {\n+                return onOperation0(operation);\n+            } else {\n+                pendingOperations.add(operation);\n+\n+                return null;\n+            }\n+        } finally {\n+            lock.readLock().unlock();\n+        }\n+    }\n+\n+    private QueryFragmentExecutable onOperation0(QueryAbstractExchangeOperation operation) {\n+        assert initializedState != null;\n+\n+        QueryFragmentExecutable fragment = initializedState.getFragment(operation.isInbound(), operation.getEdgeId());\n+\n+        assert fragment != null : operation;\n+\n+        fragment.addOperation(operation);\n+\n+        return fragment;\n+    }\n+\n+    /**\n+     * Callback executed when the fragment is finished.\n+     *\n+     * @return {@code True} if execution of the last fragment finished.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0ODM0NQ=="}, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQwMjY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1MDoxN1rOGF6psA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1ODoyMlrOGF7CiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NzAwOA==", "bodyText": "thread is protected by the startMux. Why do we need volatile?", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408857008", "createdAt": "2020-04-15T13:50:17Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.sql.impl.NodeServiceProvider;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.operation.QueryCheckOperation;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.QueryUtils.WORKER_TYPE_STATE_CHECKER;\n+\n+/**\n+ * Class performing periodic query state check.\n+ */\n+public class QueryStateRegistryUpdater {\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** State to be checked. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation handler. */\n+    private final QueryOperationHandler operationHandler;\n+\n+    /** State check frequency. */\n+    private final long stateCheckFrequency;\n+\n+    /** Worker performing periodic state check. */\n+    private final Worker worker;\n+\n+    public QueryStateRegistryUpdater(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        QueryStateRegistry stateRegistry,\n+        QueryOperationHandler operationHandler,\n+        long stateCheckFrequency\n+    ) {\n+        if (stateCheckFrequency <= 0) {\n+            throw new IllegalArgumentException(\"State check frequency must be positive: \" + stateCheckFrequency);\n+        }\n+\n+        this.nodeServiceProvider = nodeServiceProvider;\n+        this.stateRegistry = stateRegistry;\n+        this.operationHandler = operationHandler;\n+        this.stateCheckFrequency = stateCheckFrequency;\n+\n+        worker = new Worker(instanceName);\n+    }\n+\n+    public void start() {\n+        worker.start();\n+    }\n+\n+    public void stop() {\n+        worker.stop();\n+    }\n+\n+    private final class Worker implements Runnable {\n+        private final Object startMux = new Object();\n+        private final String instanceName;\n+        private volatile Thread thread;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MzM2OA==", "bodyText": "You are right, we do not need it. Removed.", "url": "https://github.com/hazelcast/hazelcast/pull/16876#discussion_r408863368", "createdAt": "2020-04-15T13:58:22Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.sql.impl.NodeServiceProvider;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.operation.QueryCheckOperation;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.hazelcast.sql.impl.QueryUtils.WORKER_TYPE_STATE_CHECKER;\n+\n+/**\n+ * Class performing periodic query state check.\n+ */\n+public class QueryStateRegistryUpdater {\n+    /** Node service provider. */\n+    private final NodeServiceProvider nodeServiceProvider;\n+\n+    /** State to be checked. */\n+    private final QueryStateRegistry stateRegistry;\n+\n+    /** Operation handler. */\n+    private final QueryOperationHandler operationHandler;\n+\n+    /** State check frequency. */\n+    private final long stateCheckFrequency;\n+\n+    /** Worker performing periodic state check. */\n+    private final Worker worker;\n+\n+    public QueryStateRegistryUpdater(\n+        String instanceName,\n+        NodeServiceProvider nodeServiceProvider,\n+        QueryStateRegistry stateRegistry,\n+        QueryOperationHandler operationHandler,\n+        long stateCheckFrequency\n+    ) {\n+        if (stateCheckFrequency <= 0) {\n+            throw new IllegalArgumentException(\"State check frequency must be positive: \" + stateCheckFrequency);\n+        }\n+\n+        this.nodeServiceProvider = nodeServiceProvider;\n+        this.stateRegistry = stateRegistry;\n+        this.operationHandler = operationHandler;\n+        this.stateCheckFrequency = stateCheckFrequency;\n+\n+        worker = new Worker(instanceName);\n+    }\n+\n+    public void start() {\n+        worker.start();\n+    }\n+\n+    public void stop() {\n+        worker.stop();\n+    }\n+\n+    private final class Worker implements Runnable {\n+        private final Object startMux = new Object();\n+        private final String instanceName;\n+        private volatile Thread thread;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NzAwOA=="}, "originalCommit": {"oid": "47f15d094f7890021186f01248d279746819a94b"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 651, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}