{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTk1NDY1", "number": 16877, "title": "Added support for Map.forEach() #14913", "bodyText": "", "createdAt": "2020-04-11T14:11:09Z", "url": "https://github.com/hazelcast/hazelcast/pull/16877", "merged": true, "mergeCommit": {"oid": "75dcd99e9c90ebba78c28d420538e41e554a49e7"}, "closed": true, "closedAt": "2020-04-17T08:34:00Z", "author": {"login": "webashutosh"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWmSdJAH2gAyNDAyMTk1NDY1Ojc1NTQ2ZTJiOWFhMTkyYWMzYmRkZmY4N2FlNGFmNzQ5OGU3NDQ0MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX4xFLAFqTM5MzgxNTYwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "75546e2b9aa192ac3bddff87ae4af7498e74442c", "author": {"user": {"login": "webashutosh", "name": "Ashutosh Agrawal"}}, "url": "https://github.com/hazelcast/hazelcast/commit/75546e2b9aa192ac3bddff87ae4af7498e74442c", "committedDate": "2020-04-11T14:08:58Z", "message": "Added support for Map.forEach() #14913"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd3606677f82bfdd14951beab67deff6fec3dfc", "author": {"user": {"login": "webashutosh", "name": "Ashutosh Agrawal"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2fd3606677f82bfdd14951beab67deff6fec3dfc", "committedDate": "2020-04-11T14:24:40Z", "message": "Added javadoc #14913"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a73b0c2c8b1953dddc203830eb712d3964e20cf", "author": {"user": {"login": "webashutosh", "name": "Ashutosh Agrawal"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2a73b0c2c8b1953dddc203830eb712d3964e20cf", "committedDate": "2020-04-12T11:49:16Z", "message": "Added javadoc #14913"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "author": {"user": {"login": "webashutosh", "name": "Ashutosh Agrawal"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f9622ba846e9b9f8df3bd1bba05298409d2f95b7", "committedDate": "2020-04-13T17:13:16Z", "message": "Fixed checkstyle errors #14913"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzU3ODQ4", "url": "https://github.com/hazelcast/hazelcast/pull/16877#pullrequestreview-392757848", "createdAt": "2020-04-14T09:30:45Z", "commit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozMDo0NVrOGFGKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozMTo1OVrOGFGNMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NzA1OA==", "bodyText": "You may also add that the implementation will pull in all of the map data onto the local member in this case because it uses IMap#entrySet() to iterate over the entries.", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r407997058", "createdAt": "2020-04-14T09:30:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -2978,4 +2980,29 @@ default void addIndex(IndexType type, String... attributes) {\n      */\n     V computeIfAbsent(@Nonnull K key, @Nonnull Function<? super K, ? extends V> mappingFunction);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * <p> </p>\n+     * <p>\n+     *     If the supplied {@code action} is a lambda, anonymous class or an inner class,\n+     *     it would be executed locally. Same would happen if it is not serializable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5Nzc0NA==", "bodyText": "In this case, I'd propose the user to simply use IMap#executeOnEntries(com.hazelcast.map.EntryProcessor<K,V,R>) directly, since it can change the value by calling java.util.Map.Entry#setValue from within the entry processor.", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r407997744", "createdAt": "2020-04-14T09:31:59Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -2978,4 +2980,29 @@ default void addIndex(IndexType type, String... attributes) {\n      */\n     V computeIfAbsent(@Nonnull K key, @Nonnull Function<? super K, ? extends V> mappingFunction);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * <p> </p>\n+     * <p>\n+     *     If the supplied {@code action} is a lambda, anonymous class or an inner class,\n+     *     it would be executed locally. Same would happen if it is not serializable.\n+     *     This may result in multiple round-trips between hazelcast nodes.\n+     *</p>\n+     * <p>\n+     *     Otherwise (i.e. if it is a top-level class or a member class, and it is serializable), the function <i>may be</i> sent\n+     *     to the servers which own the partitions/keys. This results in a much less number of remote calls.\n+     *     Note that in this case, side effects of the {@code action} may not be visible to the local JVM\n+     *     If users intend to install the changed value in the map entry, the {@code action} must do so itself (e.g. by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzYyOTc5", "url": "https://github.com/hazelcast/hazelcast/pull/16877#pullrequestreview-392762979", "createdAt": "2020-04-14T09:37:35Z", "commit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNzozNlrOGFGa7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNzozNlrOGFGa7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTI2Mg==", "bodyText": "Since forEach doesn't use these values, maybe we can avoid sending them back to the caller by simply returning null.", "url": "https://github.com/hazelcast/hazelcast/pull/16877#discussion_r408001262", "createdAt": "2020-04-14T09:37:36Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/KeyValueConsumingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+public class KeyValueConsumingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiConsumer<? super K, ? super V> action;\n+\n+    public KeyValueConsumingEntryProcessor() {\n+    }\n+\n+    public KeyValueConsumingEntryProcessor(BiConsumer<? super K, ? super V> action) {\n+        this.action = action;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        action.accept(entry.getKey(), entry.getValue());\n+        return entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9622ba846e9b9f8df3bd1bba05298409d2f95b7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd9ae5d3ab6926677814478b56bf93c11bee3ee", "author": {"user": {"login": "webashutosh", "name": "Ashutosh Agrawal"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1fd9ae5d3ab6926677814478b56bf93c11bee3ee", "committedDate": "2020-04-14T14:15:20Z", "message": "Addressed review comments and refactored a test #14913"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjQwMTQ0", "url": "https://github.com/hazelcast/hazelcast/pull/16877#pullrequestreview-393640144", "createdAt": "2020-04-15T10:15:12Z", "commit": {"oid": "1fd9ae5d3ab6926677814478b56bf93c11bee3ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODE1NjA5", "url": "https://github.com/hazelcast/hazelcast/pull/16877#pullrequestreview-393815609", "createdAt": "2020-04-15T14:14:38Z", "commit": {"oid": "1fd9ae5d3ab6926677814478b56bf93c11bee3ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}