{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDc3NDY4", "number": 17780, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozNTo0NlrOE2vkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozNzozOFrOE2vmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODM3ODM2OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/InferTypesTestSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozNTo0NlrOHvsg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoxMDoxOFrOHvuATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NDQyNw==", "bodyText": "What about naming this MockCatalogReader?", "url": "https://github.com/hazelcast/hazelcast/pull/17780#discussion_r519774427", "createdAt": "2020-11-09T12:35:46Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/InferTypesTestSupport.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastSqlConformance;\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastSqlValidator;\n+import com.hazelcast.sql.impl.calcite.validate.operators.HazelcastSqlTrimFunction;\n+import org.apache.calcite.config.CalciteConnectionConfig;\n+import org.apache.calcite.jdbc.CalciteSchema;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.sql.SqlBasicCall;\n+import org.apache.calcite.sql.SqlCall;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.calcite.sql.validate.SqlMoniker;\n+import org.apache.calcite.sql.validate.SqlNameMatcher;\n+import org.apache.calcite.sql.validate.SqlNameMatchers;\n+import org.apache.calcite.sql.validate.SqlValidatorCatalogReader;\n+import org.apache.calcite.sql.validate.SqlValidatorTable;\n+\n+import java.util.List;\n+\n+public class InferTypesTestSupport {\n+    protected static RelDataType type(SqlTypeName typeName) {\n+        return HazelcastTypeFactory.INSTANCE.createSqlType(typeName);\n+    }\n+\n+    protected static RelDataType typeUnknown() {\n+        return HazelcastTypeFactory.INSTANCE.createUnknownType();\n+    }\n+\n+    protected static SqlCallBinding createBinding() {\n+        SqlParserPos parserPos = new SqlParserPos(0, 0);\n+        SqlCall call = new SqlBasicCall(new HazelcastSqlTrimFunction(), new SqlNode[0], parserPos);\n+\n+        HazelcastSqlValidator validator = new HazelcastSqlValidator(\n+            new CatalogReader(),\n+            HazelcastTypeFactory.INSTANCE,\n+            HazelcastSqlConformance.INSTANCE\n+        );\n+\n+        return new SqlCallBinding(validator, null, call);\n+    }\n+\n+    private static class CatalogReader implements SqlValidatorCatalogReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8479ec04bf58f05bfb50987a2df3b7eedd74b7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc5ODg2MA==", "bodyText": "Renamed", "url": "https://github.com/hazelcast/hazelcast/pull/17780#discussion_r519798860", "createdAt": "2020-11-09T13:10:18Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/InferTypesTestSupport.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastSqlConformance;\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastSqlValidator;\n+import com.hazelcast.sql.impl.calcite.validate.operators.HazelcastSqlTrimFunction;\n+import org.apache.calcite.config.CalciteConnectionConfig;\n+import org.apache.calcite.jdbc.CalciteSchema;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.sql.SqlBasicCall;\n+import org.apache.calcite.sql.SqlCall;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.calcite.sql.validate.SqlMoniker;\n+import org.apache.calcite.sql.validate.SqlNameMatcher;\n+import org.apache.calcite.sql.validate.SqlNameMatchers;\n+import org.apache.calcite.sql.validate.SqlValidatorCatalogReader;\n+import org.apache.calcite.sql.validate.SqlValidatorTable;\n+\n+import java.util.List;\n+\n+public class InferTypesTestSupport {\n+    protected static RelDataType type(SqlTypeName typeName) {\n+        return HazelcastTypeFactory.INSTANCE.createSqlType(typeName);\n+    }\n+\n+    protected static RelDataType typeUnknown() {\n+        return HazelcastTypeFactory.INSTANCE.createUnknownType();\n+    }\n+\n+    protected static SqlCallBinding createBinding() {\n+        SqlParserPos parserPos = new SqlParserPos(0, 0);\n+        SqlCall call = new SqlBasicCall(new HazelcastSqlTrimFunction(), new SqlNode[0], parserPos);\n+\n+        HazelcastSqlValidator validator = new HazelcastSqlValidator(\n+            new CatalogReader(),\n+            HazelcastTypeFactory.INSTANCE,\n+            HazelcastSqlConformance.INSTANCE\n+        );\n+\n+        return new SqlCallBinding(validator, null, call);\n+    }\n+\n+    private static class CatalogReader implements SqlValidatorCatalogReader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NDQyNw=="}, "originalCommit": {"oid": "9c8479ec04bf58f05bfb50987a2df3b7eedd74b7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODM4NTE4OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/ReplaceUnknownOperandTypeInferenceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjozNzozOVrOHvsk-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1Njo1NlrOHwQEuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NTQ4MQ==", "bodyText": "Might be better to use InferTypesTestSupport as a utility rather than as a superclass.", "url": "https://github.com/hazelcast/hazelcast/pull/17780#discussion_r519775481", "createdAt": "2020-11-09T12:37:39Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/ReplaceUnknownOperandTypeInferenceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import static junit.framework.TestCase.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ReplaceUnknownOperandTypeInferenceTest extends InferTypesTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8479ec04bf58f05bfb50987a2df3b7eedd74b7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgwMDgxNg==", "bodyText": "This is a common pattern that we use throughout IMDG - define \"*Support\" class and then extend it. I think both approaches are roughly equal - no big win, no big harm wrt each other.", "url": "https://github.com/hazelcast/hazelcast/pull/17780#discussion_r519800816", "createdAt": "2020-11-09T13:12:00Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/ReplaceUnknownOperandTypeInferenceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import static junit.framework.TestCase.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ReplaceUnknownOperandTypeInferenceTest extends InferTypesTestSupport {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NTQ4MQ=="}, "originalCommit": {"oid": "9c8479ec04bf58f05bfb50987a2df3b7eedd74b7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NzA1MQ==", "bodyText": "It will show if you try to use a method from another support class. Utility classes are more flexible.", "url": "https://github.com/hazelcast/hazelcast/pull/17780#discussion_r520357051", "createdAt": "2020-11-10T07:56:56Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/ReplaceUnknownOperandTypeInferenceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.types;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import static junit.framework.TestCase.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ReplaceUnknownOperandTypeInferenceTest extends InferTypesTestSupport {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NTQ4MQ=="}, "originalCommit": {"oid": "9c8479ec04bf58f05bfb50987a2df3b7eedd74b7"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 76, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}