{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzAwNjc4", "number": 16860, "title": "Kerberos authentication method added.", "bodyText": "OS part of Kerberos authentication.\nEE PR: hazelcast/hazelcast-enterprise#3574\nThis PR introduces Kerberos ticket authentication support into Hazelcast. This OS part only helps with the configuration. The main Kerberos related logic is part of the Hazelcast Enterprise.\nMain configuration changes:\n\nadded 'kerberos' identity (clients & members)\nadded 'kerberos' authentication (members)\nadded limited security realm configuration to client-side - allows specifying named JAAS authentication\n\nImplementation:\n\nadded new credentials factory, which is able to retrieve a Kerberos service ticket: com.hazelcast.security.impl.KerberosCredentialsFactory\nadded new login module, which accepts/verifies the Kerberos service tickets: com.hazelcast.security.loginimpl.GssApiLoginModule\n\nKerberos Identity\nThe Kerberos identity configures a credentials factory to provide Kerberos service tickets.\nDefault Service principal names for Hazelcast members are in the form hz/address@REALM (e.g. hz/192.168.1.1@ACME.COM). The security-ream configuration allows delegating Kerberos authentication to another realm configured within the Hazelcast configuration.\n<realm name=\"kerberosRealm\">\n    <identity>\n        <kerberos>\n            <realm>ACME.COM</realm>\n            <security-realm>krb5Initiator</security-realm>\n        </kerberos>\n    </identity>\n</realm>\n<realm name=\"krb5Initiator\">\n    <authentication>\n        <jaas>\n            <login-module class-name=\"com.sun.security.auth.module.Krb5LoginModule\" usage=\"REQUIRED\">\n                <properties>\n                    <property name=\"useTicketCache\">true</property>\n                    <property name=\"doNotPrompt\">true</property>\n                </properties>\n            </login-module>\n        </jaas>\n    </authentication>\n</realm>\nProperties of Kerberos identity\nThe KerberosCredentialsFactory has the following properties, which can be specified in the configuration:\n\n\n\nProperty name\nDefault value\nDescription\n\n\n\n\nspn\n\nAllows configuring static service principal name (SPN). It's meant for use-cases where all members share a single Kerberos identity.\n\n\nserviceNamePrefix\n\"hz/\"\nDefines prefix of the Service Principal Name. By default the member's principal name (for which this credentials factory asks the service ticket) is in form \"[servicePrefix][memberIpAddress]@[REALM]\" (e.g. \"hz/192.168.1.1@ACME.COM\").\n\n\nrealm\n\nKerberos realm name (e.g. \"ACME.COM\")\n\n\nsecurityRealm\n\nSecurity realm name in Hazelcast configuration used for Kerberos authentication. The authentication configuration in the referenced security realm will be used to fill the Subject with Kerberos credentials (e.g. TGT).\n\n\n\nKerberos Authentication\nThe corresponding authenticating part on the server-side is able to accept the Kerberos tickets and verify them. Again the Kerberos authentication is delegated to another realm with Kerberos login module configured.\n<realm name=\"kerberosRealm\">\n    <authentication>\n        <kerberos>\n            <security-realm>krb5Acceptor</security-realm>\n        </kerberos>\n    </authentication>\n</realm>\n<realm name=\"krb5Acceptor\">\n    <authentication>\n        <jaas>\n            <login-module class-name=\"com.sun.security.auth.module.Krb5LoginModule\" usage=\"REQUIRED\">\n                <properties>\n                    <property name=\"isInitiator\">false</property>\n                    <property name=\"useTicketCache\">false</property>\n                    <property name=\"doNotPrompt\">true</property>\n                    <property name=\"useKeyTab\">true</property>\n                    <property name=\"storeKey\">true</property>\n                    <property name=\"principal\">hz/192.168.1.1@ACME.COM</property>\n                    <property name=\"keyTab\">/opt/member1.keytab</property>\n                </properties>\n            </login-module>\n        </jaas>\n    </authentication>\n</realm>\nThis configuration only loads Kerberos secrets from the keytab file and it doesn't authenticate against the Kerberos KDC.\nProperties of Kerberos authentication\nThe GssApiLoginModule derives from the abstract ClusterLoginModule so it supports its options (skipIdentity, skipEndpoint and skipRole). It introduces also its own options:\n\n\n\nProperty name\nDefault value\nDescription\n\n\n\n\nrelaxFlagsCheck\nfalse\nAllows disabling some of the checks on the incoming token (e.g. passes authentication even if the mutual authentication is required by the token).\n\n\nsecurityRealm\n\nSecurity realm name in Hazelcast configuration used for Kerberos authentication. The authentication configuration in the referenced security realm will be used to fill the Subject with Kerberos credentials (e.g. Keytab).\n\n\n\nLDAP integration\nThe Kerberos authentication allows loading role mapping information from an LDAP server (usually the one backing the Kerberos KDC server too).\n<realm name=\"kerberosRealm\">\n    <authentication>\n        <kerberos>\n            <skip-role>true</skip-role>\n            <security-realm>krb5Acceptor</security-realm>\n            <ldap>\n                <url>ldap://127.0.0.1/</url>\n                <system-user-dn>uid=admin,ou=system</system-user-dn>\n                <system-user-password>secret</system-user-password>\n                <skip-authentication>true</skip-authentication>\n                <user-filter>(krb5PrincipalName={login})</user-filter>\n                <role-mapping-attribute>cn</role-mapping-attribute>\n            </ldap>\n        </kerberos>\n    </authentication>\n</realm>\nNew Property in LdapLoginModule\nLDAP login modules in Hazelcast were used to verify the credentials till now. Integrating it with Kerberos we don't want to verify (again) the credentials, but rather load roles for the Kerberos identity.\nTherefore a new option is introduced, which allows proceeding without credentials verification:\n\n\n\nProperty name\nDefault value\nDescription\n\n\n\n\nskipAuthentication\nfalse\nAllows disabling password verification and only takes care about filling HazelcastPrincipal instances into the Subject.\n\n\n\nSecurity realms on client-side\nSecurity realms configuration was introduced on the client-side too. It allows specifying JAAS login modules which can be referenced from Kerberos identity configuration.\n<security>\n    <kerberos>\n        <realm>ACME.COM</realm>\n        <security-realm>krb5Initiator</security-realm>\n    </kerberos>\n    <realms>\n        <realm name=\"krb5Initiator\">\n            <authentication>\n                <jaas>\n                    <login-module class-name=\"com.sun.security.auth.module.Krb5LoginModule\" usage=\"REQUIRED\">\n                        <properties>\n                            <property name=\"isInitiator\">true</property>\n                            <property name=\"useTicketCache\">false</property>\n                            <property name=\"doNotPrompt\">true</property>\n                            <property name=\"useKeyTab\">true</property>\n                            <property name=\"storeKey\">true</property>\n                            <property name=\"principal\">jduke@HAZELCAST.COM</property>\n                            <property name=\"keyTab\">/opt/jduke.keytab</property>\n                        </properties>\n                    </login-module>\n                </jaas>\n            </authentication>\n        </realm>\n    </realms>\n</security>\nHazelcast security realms and JGSS\nIt's also possible to use a direct JGSS approach, where we don't specify 2 extra security realms in Hazelcast configuration. Users in such case provide a path to the JAAS login configuration file as the -Djava.security.auth.login.config argument. The login configurations have to be named according to JGSS implementation naming:\ncom.sun.security.jgss.initiate {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useTicketCache=true\n  doNotPrompt=true\n  debug=true\n  ;\n};\n \ncom.sun.security.jgss.accept {\n  com.sun.security.auth.module.Krb5LoginModule required\n  storeKey=true\n  doNotPrompt=true\n  debug=true\n  useKeyTab=true\n  keyTab=\"c:/hazelcast/member1.keytab\"\n  principal=\"hazelcast/member1.acme.com@ACME.COM\"\n  isInitiator=false\n  ;\n};\n\nLimitations\n\nThis Kerberos authentication is only able to validate connections on the server-side. It doesn't support mutual authentication.\nThe GSS-API is not used for protecting (wrapping) messages after authentication (e.g. encryption, integrity checks). It's only used for accepting tokens.\nThe token itself is not protected against Man-in-the-Middle attacks. If an attacker is able to eavesdrop the token and use it before the original sender, then the attacker succeeds with the authentication but the original sender won't.\n\nThere is replay protection in Java which caches already used tokens.\nJava Kerberos implementation accepts the token for 5min  (by default) from its creation.\n\n\nTime has to be synchronized on the machines where the Kerberos is used.\n\nIf you are running Hazelcast in an untrusted network with a MITM attack risk, then enable encryption on Hazelcast protocols to prevent stealing the token.", "createdAt": "2020-04-07T14:24:17Z", "url": "https://github.com/hazelcast/hazelcast/pull/16860", "merged": true, "mergeCommit": {"oid": "eb8ffc40b2e2d7ccfa21e2acfd663bfff1496c6b"}, "closed": true, "closedAt": "2020-04-22T09:33:27Z", "author": {"login": "kwart"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV5xTcAH2gAyNDAwMzAwNjc4OmQ5YzBkMjNkY2QwZDlkM2MyOTIxZjhkMzBiODY3ZmFiZTAxNzczNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX4yLfAFqTM5MzgxNjc5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9c0d23dcd0d9d3c2921f8d30b867fabe0177379", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d9c0d23dcd0d9d3c2921f8d30b867fabe0177379", "committedDate": "2020-04-09T10:16:56Z", "message": "Kerberos authentication method added."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73f9b2d7942b4704afbff2b71b12e09de9fdb922", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/73f9b2d7942b4704afbff2b71b12e09de9fdb922", "committedDate": "2020-04-09T07:58:22Z", "message": "Fix keytab path to match in XML and YAML config"}, "afterCommit": {"oid": "d9c0d23dcd0d9d3c2921f8d30b867fabe0177379", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d9c0d23dcd0d9d3c2921f8d30b867fabe0177379", "committedDate": "2020-04-09T10:16:56Z", "message": "Kerberos authentication method added."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da25d9967f286683a4254c5db89e1ea09da4ef31", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da25d9967f286683a4254c5db89e1ea09da4ef31", "committedDate": "2020-04-09T10:51:39Z", "message": "Unrelated checkstyle fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9e0cecc273e3722fbebcdd1eec1d8e4e422f006", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e9e0cecc273e3722fbebcdd1eec1d8e4e422f006", "committedDate": "2020-04-09T10:45:42Z", "message": "Unrelated checkstyle fix"}, "afterCommit": {"oid": "da25d9967f286683a4254c5db89e1ea09da4ef31", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da25d9967f286683a4254c5db89e1ea09da4ef31", "committedDate": "2020-04-09T10:51:39Z", "message": "Unrelated checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDQyNjc4", "url": "https://github.com/hazelcast/hazelcast/pull/16860#pullrequestreview-392042678", "createdAt": "2020-04-13T09:16:19Z", "commit": {"oid": "da25d9967f286683a4254c5db89e1ea09da4ef31"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNjoxOVrOGEhUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxNjoxOVrOGEhUiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MzQxNg==", "bodyText": "Why do we print a secret systemUserPassword here?", "url": "https://github.com/hazelcast/hazelcast/pull/16860#discussion_r407393416", "createdAt": "2020-04-13T09:16:19Z", "author": {"login": "galibey"}, "path": "hazelcast/src/main/java/com/hazelcast/config/security/LdapAuthenticationConfig.java", "diffHunk": "@@ -228,85 +232,85 @@ public LdapAuthenticationConfig setUserSearchScope(LdapSearchScope userSearchSco\n         setIfConfigured(props, \"roleSearchScope\", roleSearchScope);\n         setIfConfigured(props, \"userNameAttribute\", userNameAttribute);\n \n-        if (useSystemUser) {\n+        if (!isNullOrEmpty(systemUserDn)) {\n             props.setProperty(Context.SECURITY_AUTHENTICATION, \"simple\");\n             props.setProperty(Context.SECURITY_PRINCIPAL, systemUserDn);\n             setIfConfigured(props, Context.SECURITY_CREDENTIALS, systemUserPassword);\n             setIfConfigured(props, \"passwordAttribute\", passwordAttribute);\n             setIfConfigured(props, \"userContext\", userContext);\n             setIfConfigured(props, \"userFilter\", userFilter);\n             setIfConfigured(props, \"userSearchScope\", userSearchScope);\n+            setIfConfigured(props, \"skipAuthentication\", skipAuthentication);\n         }\n+        return props;\n+    }\n+\n+    @Override\n+    public LoginModuleConfig[] asLoginModuleConfigs() {\n+        boolean useSystemUser = !isNullOrEmpty(systemUserDn);\n+        LoginModuleConfig loginModuleConfig = new LoginModuleConfig(\n+                useSystemUser ? \"com.hazelcast.security.loginimpl.LdapLoginModule\"\n+                        : \"com.hazelcast.security.loginimpl.BasicLdapLoginModule\",\n+                LoginModuleUsage.REQUIRED);\n+\n+        loginModuleConfig.setProperties(initLoginModuleProperties());\n \n         return new LoginModuleConfig[] { loginModuleConfig };\n     }\n \n     @Override\n     public String toString() {\n-        return \"LdapAuthenticationConfig [url=\" + url + \", socketFactoryClassName=\" + socketFactoryClassName + \", systemUserDN=\"\n-                + systemUserDn + \", systemUserPassword=***, parseDN=\" + parseDn + \", roleContext=\"\n+        return \"LdapAuthenticationConfig [url=\" + url + \", socketFactoryClassName=\" + socketFactoryClassName + \", systemUserDn=\"\n+                + systemUserDn + \", systemUserPassword=\" + systemUserPassword + \", parseDn=\" + parseDn + \", roleContext=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da25d9967f286683a4254c5db89e1ea09da4ef31"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzU1MjA2", "url": "https://github.com/hazelcast/hazelcast/pull/16860#pullrequestreview-393755206", "createdAt": "2020-04-15T13:08:12Z", "commit": {"oid": "da25d9967f286683a4254c5db89e1ea09da4ef31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e456d75dc527260f502e3fca0a2ff4fcb87cda5", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1e456d75dc527260f502e3fca0a2ff4fcb87cda5", "committedDate": "2020-04-15T13:32:02Z", "message": "Fix password masking in LdapAuthenticationConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODE2Nzkx", "url": "https://github.com/hazelcast/hazelcast/pull/16860#pullrequestreview-393816791", "createdAt": "2020-04-15T14:15:50Z", "commit": {"oid": "1e456d75dc527260f502e3fca0a2ff4fcb87cda5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3753, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}