{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTg0MzA2", "number": 17239, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozNzoyM1rOEQJ0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowOTozMlrOE-q4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzczNTUyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozNzoyM1rOG0KBug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozNzoyM1rOG0KBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0MzQxOA==", "bodyText": "Use HashUtils.hashToIndex instead.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r457343418", "createdAt": "2020-07-20T12:37:23Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -586,6 +593,10 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n         }\n     }\n \n+    private Object getLockObject(InetSocketAddress inetSocketAddress) {\n+        return mutexes[Math.abs(inetSocketAddress.hashCode() % mutexes.length)];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22070ed713abbc1dd59ff465dc6424c2616ff8b2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc3NTYzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjo1OTowOVrOHApsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0MDowNlrOHAqtYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTE2MA==", "bodyText": "drawback: with little probability if hashes to the same mutex, even if the other threads are available, will wait for the mutex.\nalternative solution: putIfAbsent into concurrent hash map {inetSocketAddress, mutex} and lock on that mutex. (implementing a similar aproach at dev branch: https://github.com/ihsandemir/hazelcast-cpp-client/blob/protocol/hazelcast/src/hazelcast/client/network.cpp#L218)", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r470445160", "createdAt": "2020-08-14T06:59:09Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -586,6 +594,10 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n         }\n     }\n \n+    private Object getLockObject(InetSocketAddress inetSocketAddress) {\n+        return mutexes[HashUtil.hashToIndex(inetSocketAddress.hashCode(), mutexes.length)];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e36fca17a22c6a1e61e355a8d09acf6a93f402"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2MTc5Mg==", "bodyText": "changing it with putIfAbsent", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r470461792", "createdAt": "2020-08-14T07:40:06Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -586,6 +594,10 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n         }\n     }\n \n+    private Object getLockObject(InetSocketAddress inetSocketAddress) {\n+        return mutexes[HashUtil.hashToIndex(inetSocketAddress.hashCode(), mutexes.length)];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTE2MA=="}, "originalCommit": {"oid": "e9e36fca17a22c6a1e61e355a8d09acf6a93f402"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc4MDUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzowMTowMlrOHApvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo1NjoyNlrOHArKSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTkzNw==", "bodyText": "you can pass parameter connectionsEmpty  to this method.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r470445937", "createdAt": "2020-08-14T07:01:02Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -824,18 +834,19 @@ private void handleSuccessfulAuth(TcpClientConnection connection, ClientAuthenti\n                 logger.fine(\"Checking the cluster: \" + newClusterId + \", current cluster: \" + this.clusterId);\n             }\n \n-            boolean initialConnection = activeConnections.isEmpty();\n-            boolean changedCluster = initialConnection && this.clusterId != null && !newClusterId.equals(this.clusterId);\n-            if (changedCluster) {\n+            boolean connectionsEmpty = activeConnections.isEmpty();\n+            boolean clusterIdChanged = this.clusterId != null && !newClusterId.equals(this.clusterId);\n+            if (clusterIdChanged) {\n+                checkClientStateOnClusterIdChange(connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e36fca17a22c6a1e61e355a8d09acf6a93f402"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2OTE5NQ==", "bodyText": "isEmpty is not an expensive call. I would rather leave it this way.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r470469195", "createdAt": "2020-08-14T07:56:26Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -824,18 +834,19 @@ private void handleSuccessfulAuth(TcpClientConnection connection, ClientAuthenti\n                 logger.fine(\"Checking the cluster: \" + newClusterId + \", current cluster: \" + this.clusterId);\n             }\n \n-            boolean initialConnection = activeConnections.isEmpty();\n-            boolean changedCluster = initialConnection && this.clusterId != null && !newClusterId.equals(this.clusterId);\n-            if (changedCluster) {\n+            boolean connectionsEmpty = activeConnections.isEmpty();\n+            boolean clusterIdChanged = this.clusterId != null && !newClusterId.equals(this.clusterId);\n+            if (clusterIdChanged) {\n+                checkClientStateOnClusterIdChange(connection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTkzNw=="}, "originalCommit": {"oid": "e9e36fca17a22c6a1e61e355a8d09acf6a93f402"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTc0NDM4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyOTo0M1rOHdmF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDo0Nzo0MFrOHdtdqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NDg3Nw==", "bodyText": "I'm not sure about the speed at which these objects are created.\nThe problem with creating (and destroying) objects with a potentially inflated monitor, is that it can be a huge performance hog when doing GC. For example, our initial future used the same approach; later we replaced it by lock support to get rid of this inflated monitor and performance increased and latencies became a lot better.\nFor such situations, I would suggest using a striped lock.\nApart from that.. I see you are synchronizing while communicating with external systems. You create the connection, which needs to go through a 3-way handshake (and potentially a few extra steps due to TLS) and then you have authentication. Which is another set of remote steps.\nIf for whatever reason such remote interaction stalls, this thread stalls and this can lead to serious problems in the system. Also, any other thread that hits the same address, could also block indefinitely.\nI think a better approach needs to be found than synchronization.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r500794877", "createdAt": "2020-10-07T07:29:43Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -571,18 +571,24 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n             return connection;\n         }\n \n-        synchronized (resolveAddress(address)) {\n-            // this critical section is used for making a single connection\n-            // attempt to the given address at a time.\n-            connection = getConnection(address);\n-            if (connection != null) {\n+        InetSocketAddress inetSocketAddress = resolveAddress(address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4c56fe83f375b4f9e809737634c2610038a386"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNTYyNQ==", "bodyText": "I had the striped lock approach in the first commit. See\ne9e36fc#r500794877\nThis comment was the reason I switched to putIfAbsent\n#17239 (comment)\nNot sure which one is more important. Wdyt?\n\nI'm not sure about the speed at which these objects are created.\n\nThese objects will not be created on a stable cluster. They will be created when there is a disconnection, and the client tries to connect back.\n\nAlso, any other thread that hits the same address, could also block indefinitely.\n\nAbout accessing remote under lock. All the remote invocations are given up with a timeout. It can block other threads but it will not block indefinitely.\n\nI think a better approach needs to be found than synchronization.\n\nI am open to suggestions.\nWe may allow opening connections concurrently and clean them up later when we detect they are not used. Seems more complicated to me.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r500915625", "createdAt": "2020-10-07T10:47:40Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -571,18 +571,24 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n             return connection;\n         }\n \n-        synchronized (resolveAddress(address)) {\n-            // this critical section is used for making a single connection\n-            // attempt to the given address at a time.\n-            connection = getConnection(address);\n-            if (connection != null) {\n+        InetSocketAddress inetSocketAddress = resolveAddress(address);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NDg3Nw=="}, "originalCommit": {"oid": "2e4c56fe83f375b4f9e809737634c2610038a386"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTU1NTc0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODo1NTo1OVrOHh9RMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODo1ODo1NlrOHh9dvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODg4MQ==", "bodyText": "I'm thinking out loud.\nWhat you could do is to create a CHM with address as key and a Future as value.\nThe future will either block if no value is set, or will return the correct connection.\nYou could add this future using e.g. a putIfAbsent. so that only 1 thread will wait for a connection and then set that value on the future.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r505368881", "createdAt": "2020-10-15T08:55:59Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -571,18 +571,24 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n             return connection;\n         }\n \n-        synchronized (resolveAddress(address)) {\n-            // this critical section is used for making a single connection\n-            // attempt to the given address at a time.\n-            connection = getConnection(address);\n-            if (connection != null) {\n+        InetSocketAddress inetSocketAddress = resolveAddress(address);\n+        try {\n+            Object mutex = ConcurrencyUtil.getOrPutIfAbsent(mutexes, inetSocketAddress, key -> new Object());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4c56fe83f375b4f9e809737634c2610038a386"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3MjA5NQ==", "bodyText": "This way you prevent concurrent connection creations to the same address.\nAnd you can use a CompletableFuture. Which also doesn't suffer from the monitor inflation problem.\nAnd in theory a caller could timeut future.get with a timeout if needs to be.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r505372095", "createdAt": "2020-10-15T08:58:56Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -571,18 +571,24 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n             return connection;\n         }\n \n-        synchronized (resolveAddress(address)) {\n-            // this critical section is used for making a single connection\n-            // attempt to the given address at a time.\n-            connection = getConnection(address);\n-            if (connection != null) {\n+        InetSocketAddress inetSocketAddress = resolveAddress(address);\n+        try {\n+            Object mutex = ConcurrencyUtil.getOrPutIfAbsent(mutexes, inetSocketAddress, key -> new Object());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODg4MQ=="}, "originalCommit": {"oid": "2e4c56fe83f375b4f9e809737634c2610038a386"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTYxNjMzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowNzoxOFrOHh94gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowNzoxOFrOHh94gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3ODk0NA==", "bodyText": "I had a closer look at the code and this is on the ConnectionManager. I don't see a problem if another thread blocks on acquring a concurrent connection. He can't do anything useful anyway since the method itself is blocking.\nSo using a lock isn't that much of a problem.\nI would be careful with using an intrinsic lock due to inflation/GC problems as I already indicated in my first comment. It will not immediately cause problems since connections will not be created and destroyed in a very high rate. But eventually you could still run into some GC issues.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r505378944", "createdAt": "2020-10-15T09:07:18Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -571,18 +571,24 @@ TcpClientConnection getOrConnect(@Nonnull Address address) {\n             return connection;\n         }\n \n-        synchronized (resolveAddress(address)) {\n-            // this critical section is used for making a single connection\n-            // attempt to the given address at a time.\n-            connection = getConnection(address);\n-            if (connection != null) {\n+        InetSocketAddress inetSocketAddress = resolveAddress(address);\n+        try {\n+            Object mutex = ConcurrencyUtil.getOrPutIfAbsent(mutexes, inetSocketAddress, key -> new Object());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4c56fe83f375b4f9e809737634c2610038a386"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTM3MTEwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MDoyMVrOH77h3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoxMToxOVrOH8kTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMzM1OA==", "bodyText": "Assume that,\n\nFailover config is enabled\nClient connects the first cluster configured\nCluster restarts and the client loses all of its connections\nClient tries to reconnect through doConnectToCandidateCluster. It will first try to connect to the current cluster without setting switchingToNextCluster to true. Now, since the cluster is restarted, I assume that the client should connect to it on the first try (Old code also does this). But that won't happen since switchingToNextCluster is false. We will throw ClientNotAllowedInClusterException here and try to connect alternative clusters. Isn't that a behavior change?", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r532603358", "createdAt": "2020-11-30T13:40:21Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzI2Nw==", "bodyText": "It is a behavior change, and it is actually a fix on the behavior.\nWhen this path is run there are two possibilities that happened in the cluster.\n\nThere was a single cluster and it restarted.\nThere were two clusters and the first one is closed.\n\nNote that there is no way for us to differentiate these two. In the second scenario, it could be the case that the same hostnames are used for both clusters and the user changed the hostname resolution before closing the first cluster. So even the addresses of the two clusters are the same for the client.\nThere is no problem with the first case. And the behavior change for that looks unnecessary. But, it is an important fix for the second case.\nThe problem of the second case is as follows.\n\nFailover is configured. Now assume that two clusters have the same cluster name/credentials, meaning a client can switch between these two and will not notice any authentication failure.\nFirst cluster has shutdown.\nAlso keep in mind that in failover config, users can provide different configurations for clusters.\nThe client is will connect to the second cluster in the first attempt with the configuration of the first cluster. If we don't fail the connection, it will continue with the wrong configuration. We need to make sure that when failover config is provided, the client will remain connected to a cluster only if it is connected with the correct configuration.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533123267", "createdAt": "2020-12-01T07:31:16Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMzM1OA=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3MTQyNg==", "bodyText": "I see the problem with the second scenario. That makes sense then", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533271426", "createdAt": "2020-12-01T10:11:19Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMzM1OA=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQ0OTEzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1ODo0MlrOH78RQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo0NTozOFrOH8bppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNTQ4OQ==", "bodyText": "nit: could be simplified to if (activeConnections.isEmpty()) {", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r532615489", "createdAt": "2020-11-30T13:58:42Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -876,18 +873,18 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n                 logger.fine(\"Checking the cluster: \" + newClusterId + \", current cluster: \" + this.clusterId);\n             }\n \n-            boolean initialConnection = activeConnections.isEmpty();\n-            boolean changedCluster = initialConnection && this.clusterId != null && !newClusterId.equals(this.clusterId);\n-            if (changedCluster) {\n+            boolean clusterIdChanged = this.clusterId != null && !newClusterId.equals(this.clusterId);\n+            if (clusterIdChanged) {\n+                checkClientStateOnClusterIdChange(connection);\n                 logger.warning(\"Switching from current cluster: \" + this.clusterId + \" to new cluster: \" + newClusterId);\n                 client.onClusterRestart();\n             }\n \n+            boolean connectionsEmpty = activeConnections.isEmpty();\n             activeConnections.put(response.memberUuid, connection);\n-\n-            if (initialConnection) {\n+            if (connectionsEmpty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMjAwNw==", "bodyText": "We can't. I want to check if the connections were empty before the current connection is put to active connections.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533112007", "createdAt": "2020-12-01T07:02:48Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -876,18 +873,18 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n                 logger.fine(\"Checking the cluster: \" + newClusterId + \", current cluster: \" + this.clusterId);\n             }\n \n-            boolean initialConnection = activeConnections.isEmpty();\n-            boolean changedCluster = initialConnection && this.clusterId != null && !newClusterId.equals(this.clusterId);\n-            if (changedCluster) {\n+            boolean clusterIdChanged = this.clusterId != null && !newClusterId.equals(this.clusterId);\n+            if (clusterIdChanged) {\n+                checkClientStateOnClusterIdChange(connection);\n                 logger.warning(\"Switching from current cluster: \" + this.clusterId + \" to new cluster: \" + newClusterId);\n                 client.onClusterRestart();\n             }\n \n+            boolean connectionsEmpty = activeConnections.isEmpty();\n             activeConnections.put(response.memberUuid, connection);\n-\n-            if (initialConnection) {\n+            if (connectionsEmpty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNTQ4OQ=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyOTYzOA==", "bodyText": "Yeah, my bad. Please ignore this comment.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533129638", "createdAt": "2020-12-01T07:45:38Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -876,18 +873,18 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n                 logger.fine(\"Checking the cluster: \" + newClusterId + \", current cluster: \" + this.clusterId);\n             }\n \n-            boolean initialConnection = activeConnections.isEmpty();\n-            boolean changedCluster = initialConnection && this.clusterId != null && !newClusterId.equals(this.clusterId);\n-            if (changedCluster) {\n+            boolean clusterIdChanged = this.clusterId != null && !newClusterId.equals(this.clusterId);\n+            if (clusterIdChanged) {\n+                checkClientStateOnClusterIdChange(connection);\n                 logger.warning(\"Switching from current cluster: \" + this.clusterId + \" to new cluster: \" + newClusterId);\n                 client.onClusterRestart();\n             }\n \n+            boolean connectionsEmpty = activeConnections.isEmpty();\n             activeConnections.put(response.memberUuid, connection);\n-\n-            if (initialConnection) {\n+            if (connectionsEmpty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNTQ4OQ=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQ2NTMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowMjoxNVrOH78bDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowMjoxNVrOH78bDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNzk5OA==", "bodyText": "nit: missing space (//We -> // We) here and in other comments below.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r532617998", "createdAt": "2020-11-30T14:02:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQ5NzE4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowOTozMlrOH78ujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozODo0NlrOH8h2JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjk5MQ==", "bodyText": "What if there are other connections, but they're not yet closed by the HeartbeatManager (consider a situation when a cluster restarted fast enough)? Is it ok to close the connection in this case?", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r532622991", "createdAt": "2020-11-30T14:09:32Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {\n+                    String reason = \"Force to hard cluster switch\";\n+                    connection.close(reason, null);\n+                    throw new ClientNotAllowedInClusterException(reason);\n+                }\n+            }\n+        } else {\n+            //If there are other connections that means we have a connection to wrong cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzMTAxNg==", "bodyText": "Not sure if I understand the scenario correctly.  Let me try:\n\nThere were 2 members.\nThe client is connected to the first one.\nWhile the client is trying to open the second connection, both members are restarted.\nIn this case we will close the connection to the second member first thinking that it is not part of the cluster we think we are in.\nThe connection to the first cluster will be gone after that and we will initiate a reconnect to the cluster.\n\nYes, you are right. It seems unfortunate that we close the connection to the second member at step 4.\nBut there seems to be no way around this. It does not make sense to check if the connections on the active connections are closed or not. Because they can be closed right after we check them.\nDo you have a suggestion to avoid that?", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533131016", "createdAt": "2020-12-01T07:48:44Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {\n+                    String reason = \"Force to hard cluster switch\";\n+                    connection.close(reason, null);\n+                    throw new ClientNotAllowedInClusterException(reason);\n+                }\n+            }\n+        } else {\n+            //If there are other connections that means we have a connection to wrong cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjk5MQ=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzOTEzNA==", "bodyText": "Yes, that scenario describes the problem. It could be also slightly different, but with the same outcome:\n\nThere were 2 members.\nThe client is connected to both members.\nBoth members are restarted in slightly different time and HeartbeatManager detects that for the connection to the first one. Then the re-connect logic kicks in.\nIn this case we will close the connection to the first member thinking that it is not part of the cluster we think we are in.\nAfter a while we're going to start re-connect procedure for the second member.\n\nDo you find this scenario possible?\nAs for the ways to avoid it, both scenarios may be not that critical critical, since we're going to keep trying to re-connect to all members in ConnectToAllClusterMembersTask. So, for the very last re-connection attempt (i.e. when activeConnections.isEmpty() == true) we should be able to connect to the new cluster. WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533139134", "createdAt": "2020-12-01T08:05:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {\n+                    String reason = \"Force to hard cluster switch\";\n+                    connection.close(reason, null);\n+                    throw new ClientNotAllowedInClusterException(reason);\n+                }\n+            }\n+        } else {\n+            //If there are other connections that means we have a connection to wrong cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjk5MQ=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzMTE0MA==", "bodyText": "After further discussion we came to a conclusion that both described scenarios shouldn't be a problem as the client should recover and connect to all members eventually.", "url": "https://github.com/hazelcast/hazelcast/pull/17239#discussion_r533231140", "createdAt": "2020-12-01T09:38:46Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -914,6 +911,30 @@ private TcpClientConnection onAuthenticated(TcpClientConnection connection,\n         return connection;\n     }\n \n+    private void checkClientStateOnClusterIdChange(TcpClientConnection connection) {\n+        if (activeConnections.isEmpty()) {\n+            //We only have single connection established\n+            if (failoverConfigProvided) {\n+                //If failover is provided, and this single connection is established after failover logic kicks in\n+                // (checked via `switchingToNextCluster`), then it is OK to continue. Otherwise, we force the failover logic\n+                // to be used by throwing `ClientNotAllowedInClusterException`\n+                if (switchingToNextCluster) {\n+                    switchingToNextCluster = false;\n+                } else {\n+                    String reason = \"Force to hard cluster switch\";\n+                    connection.close(reason, null);\n+                    throw new ClientNotAllowedInClusterException(reason);\n+                }\n+            }\n+        } else {\n+            //If there are other connections that means we have a connection to wrong cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjk5MQ=="}, "originalCommit": {"oid": "6bd2412320a35c408cc4cd30b7713fa5d8ba4403"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 487, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}