{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzU0ODgx", "number": 17411, "title": "Adds Nullable and Nonnull annotations to GenericRecord", "bodyText": "Add more javadoc for cloneWithBuilder to clarify how to update a field", "createdAt": "2020-08-26T08:49:35Z", "url": "https://github.com/hazelcast/hazelcast/pull/17411", "merged": true, "mergeCommit": {"oid": "d2cc299cc8ebbb2db07bc95040d777dcd82f57d6"}, "closed": true, "closedAt": "2020-08-26T14:50:48Z", "author": {"login": "sancar"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCn90LABqjM2OTM3NDk4NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCrndTABqjM2OTQ3NDI5MTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5d282475229634c1daa850c5d292a472fc4fc4d", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a5d282475229634c1daa850c5d292a472fc4fc4d", "committedDate": "2020-08-26T08:46:47Z", "message": "Add more javadoc for cloneWithBuilder"}, "afterCommit": {"oid": "1491954f15784fce672c5e41c23d6ae19fc1a684", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1491954f15784fce672c5e41c23d6ae19fc1a684", "committedDate": "2020-08-26T08:58:43Z", "message": "Add more javadoc for cloneWithBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjkxOTA5", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475291909", "createdAt": "2020-08-26T09:00:25Z", "commit": {"oid": "1491954f15784fce672c5e41c23d6ae19fc1a684"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowMDoyNVrOHHCttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowMDoyNVrOHHCttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjU0OQ==", "bodyText": "javax.annotation.Nonnull?", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477146549", "createdAt": "2020-08-26T09:00:25Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -22,6 +22,7 @@\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491954f15784fce672c5e41c23d6ae19fc1a684"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzA5MDYz", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475309063", "createdAt": "2020-08-26T09:21:18Z", "commit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMToxOFrOHHDmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMToxOFrOHHDmgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTA5MQ==", "bodyText": "Do we need to duplicate these annotations in implementations? They're already present in the interface.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477161091", "createdAt": "2020-08-26T09:21:18Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -41,123 +41,125 @@ public ClassDefinition getClassDefinition() {\n         return classDefinition;\n     }\n \n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzI0NTU5", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475324559", "createdAt": "2020-08-26T09:41:53Z", "commit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MTo1M1rOHHEW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MTo1M1rOHHEW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzQ1Ng==", "bodyText": "still missing here in return type", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477173456", "createdAt": "2020-08-26T09:41:53Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -269,13 +296,14 @@\n          * @param classDefinition of the portable that we will create\n          * @return GenericRecordBuilder for Portable format\n          */\n-        static Builder portable(ClassDefinition classDefinition) {\n+        static Builder portable(@Nonnull ClassDefinition classDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzUyNjkz", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475352693", "createdAt": "2020-08-26T10:20:54Z", "commit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMDo1NVrOHHFr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNjowOFrOHHF2Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTIyNA==", "bodyText": "these are still missing :)", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477195224", "createdAt": "2020-08-26T10:20:55Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -292,7 +327,7 @@ static Builder portable(ClassDefinition classDefinition) {\n          *                                         Same field is trying to be overwritten without using\n          *                                         {@link GenericRecord#cloneWithBuilder()}.\n          */\n-        Builder writeBoolean(String fieldName, boolean value);\n+        Builder writeBoolean(@Nonnull String fieldName, boolean value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTg3OQ==", "bodyText": "I don't see any method named createGenericRecordBuilder ? I think it's newBuilder?", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477195879", "createdAt": "2020-08-26T10:22:14Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NjYyMQ==", "bodyText": "I would shorthand this method to just builder()", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477196621", "createdAt": "2020-08-26T10:23:44Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NzMyMQ==", "bodyText": "builderWithCopy()", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197321", "createdAt": "2020-08-26T10:25:03Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()\n+     *                         .writeUTF(\"name\", genericRecord.readUTF(\"name\"))\n+     *                         .writeLong(\"id\", 4)\n+     *                         .writeUTF(\"surname\", genericRecord.readUTF(\"surname\"))\n+     *                         .writeInt(\"age\", genericRecord.readInt(\"age\")).build();\n+     * </pre>\n+     * `cloneWithBuilder` used as follows:\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.cloneWithBuilder().writeInt(\"id\", 4).build();\n+     * </pre>\n      *\n      * @return a generic record builder with same class definition as this one and populated with same values.\n      */\n+    @Nonnull\n     Builder cloneWithBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NzczNw==", "bodyText": "put instead of write , as write implies you have to do it sequentially.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197737", "createdAt": "2020-08-26T10:25:51Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -345,7 +380,7 @@ static Builder portable(ClassDefinition classDefinition) {\n          *                                         Same field is trying to be overwritten without using\n          *                                         {@link GenericRecord#cloneWithBuilder()}.\n          */\n-        Builder writeFloat(String fieldName, float value);\n+        Builder writeFloat(@Nonnull String fieldName, float value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5Nzg4Mw==", "bodyText": "get instead of read, as read implies sequential access rather than random access", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197883", "createdAt": "2020-08-26T10:26:08Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()\n+     *                         .writeUTF(\"name\", genericRecord.readUTF(\"name\"))\n+     *                         .writeLong(\"id\", 4)\n+     *                         .writeUTF(\"surname\", genericRecord.readUTF(\"surname\"))\n+     *                         .writeInt(\"age\", genericRecord.readInt(\"age\")).build();\n+     * </pre>\n+     * `cloneWithBuilder` used as follows:\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.cloneWithBuilder().writeInt(\"id\", 4).build();\n+     * </pre>\n      *\n      * @return a generic record builder with same class definition as this one and populated with same values.\n      */\n+    @Nonnull\n     Builder cloneWithBuilder();\n \n-    FieldType getFieldType(String fieldName);\n+    /**\n+     * @param fieldName the name of the field\n+     * @return field type for the given field name\n+     * @throws IllegalArgumentException if the field name does not exist in the class definition\n+     */\n+    @Nonnull\n+    FieldType getFieldType(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return true if field exists in the definition of the class. Note that returns true even if the field is null.\n      */\n-    boolean hasField(String fieldName);\n+    boolean hasField(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    boolean readBoolean(String fieldName);\n+    boolean readBoolean(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    byte readByte(String fieldName);\n+    byte readByte(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    char readChar(String fieldName);\n+    char readChar(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    double readDouble(String fieldName);\n+    double readDouble(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    float readFloat(String fieldName);\n+    float readFloat(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    int readInt(String fieldName);\n+    int readInt(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    long readLong(String fieldName);\n+    long readLong(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    short readShort(String fieldName);\n+    short readShort(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    String readUTF(String fieldName);\n+    @Nullable\n+    String readUTF(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    GenericRecord readGenericRecord(String fieldName);\n+    @Nullable\n+    GenericRecord readGenericRecord(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    boolean[] readBooleanArray(String fieldName);\n+    @Nullable\n+    boolean[] readBooleanArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    byte[] readByteArray(String fieldName);\n+    @Nullable\n+    byte[] readByteArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    char[] readCharArray(String fieldName);\n+    @Nullable\n+    char[] readCharArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    double[] readDoubleArray(String fieldName);\n+    @Nullable\n+    double[] readDoubleArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    float[] readFloatArray(String fieldName);\n+    @Nullable\n+    float[] readFloatArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    int[] readIntArray(String fieldName);\n+    @Nullable\n+    int[] readIntArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    long[] readLongArray(String fieldName);\n+    @Nullable\n+    long[] readLongArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    short[] readShortArray(String fieldName);\n+    @Nullable\n+    short[] readShortArray(@Nonnull String fieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Mzg1NjY1", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475385665", "createdAt": "2020-08-26T11:12:07Z", "commit": {"oid": "088f8026fc7e64df220e6a4d0dfad4123990d5bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDUyNTQ0", "url": "https://github.com/hazelcast/hazelcast/pull/17411#pullrequestreview-475452544", "createdAt": "2020-08-26T12:48:56Z", "commit": {"oid": "088f8026fc7e64df220e6a4d0dfad4123990d5bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21b9535ad5b5bae693e8fe59309a38f1cd59265", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d21b9535ad5b5bae693e8fe59309a38f1cd59265", "committedDate": "2020-08-26T13:13:04Z", "message": "Adds Nullable and Nonnull annotations to GenericRecord"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a313c3d20c3fb29c344eee7f6293a3ce3129574", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5a313c3d20c3fb29c344eee7f6293a3ce3129574", "committedDate": "2020-08-26T13:13:05Z", "message": "Add more javadoc for cloneWithBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969d25850755cb4e4ea7fe9a18085717c43b925f", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/969d25850755cb4e4ea7fe9a18085717c43b925f", "committedDate": "2020-08-26T13:13:23Z", "message": "Replace NotNull with NonNull"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04856fa610f41bc1c9cb122a2dd0a8281fa97fb", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f04856fa610f41bc1c9cb122a2dd0a8281fa97fb", "committedDate": "2020-08-26T13:13:23Z", "message": "add more nonnull annotations and javadoc to getFieldType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901b5c087a82f5e52ebd379a7fd87ee030965d55", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/901b5c087a82f5e52ebd379a7fd87ee030965d55", "committedDate": "2020-08-26T13:13:23Z", "message": "more javadoc and javadoc fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "088f8026fc7e64df220e6a4d0dfad4123990d5bf", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/088f8026fc7e64df220e6a4d0dfad4123990d5bf", "committedDate": "2020-08-26T11:06:02Z", "message": "more javadoc and javadoc fix"}, "afterCommit": {"oid": "901b5c087a82f5e52ebd379a7fd87ee030965d55", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/901b5c087a82f5e52ebd379a7fd87ee030965d55", "committedDate": "2020-08-26T13:13:23Z", "message": "more javadoc and javadoc fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}