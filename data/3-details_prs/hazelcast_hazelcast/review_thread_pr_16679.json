{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODA0Nzk2", "number": 16679, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowNDoyOVrODiehYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozODozOFrODjZGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc4MjQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowNDoyOVrOFtvyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxMzozM1rOFuCLPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMzE5Mg==", "bodyText": "Can't we simply pass the tag to this metrod from the caller and do the following without the need for the handler?\nString key = cleanNodeName(n, !tag.equals(\"eureka\"));\n\n[...]\n\npublic static String cleanNodeName(final Node node, final boolean shouldLowerCase) {\n[...]\n}\n\nThis seems we put a \"local\" boolean to a hashmap that we lookup for a few lines later in the same cycle, so the handler and the map feel unnecessary here.", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383513192", "createdAt": "2020-02-24T21:04:29Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1332,18 +1332,25 @@ private void handleAliasedDiscoveryStrategy(WanBatchPublisherConfig publisherCon\n     private void updateConfig(AliasedDiscoveryConfig config, Node node) {\n         NamedNodeMap attributes = node.getAttributes();\n         for (int a = 0; a < attributes.getLength(); a++) {\n-            Node att = attributes.item(a);\n+            Node att = attributes.item(a);            \n             String value = getTextContent(att).trim();\n             if (\"enabled\".equals(lowerCaseInternal(att.getNodeName()))) {\n                 config.setEnabled(getBooleanValue(value));\n             } else if (att.getNodeName().equals(\"connection-timeout-seconds\")) {\n                 config.setProperty(\"connection-timeout-seconds\", value);\n             }\n         }\n+        LowercaseHandler lowerCaseHandler = new LowercaseHandler();\n         for (Node n : childElements(node)) {\n+        \tlowerCaseHandler.put(n.getLocalName(), \"eureka\".equals(n.getParentNode().getLocalName()));\n             String key = cleanNodeName(n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODIwNQ==", "bodyText": "cleanNodeName is being used in a lot of places I wanted to have less impact in the codebase", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383618205", "createdAt": "2020-02-25T01:55:31Z", "author": {"login": "omidp"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1332,18 +1332,25 @@ private void handleAliasedDiscoveryStrategy(WanBatchPublisherConfig publisherCon\n     private void updateConfig(AliasedDiscoveryConfig config, Node node) {\n         NamedNodeMap attributes = node.getAttributes();\n         for (int a = 0; a < attributes.getLength(); a++) {\n-            Node att = attributes.item(a);\n+            Node att = attributes.item(a);            \n             String value = getTextContent(att).trim();\n             if (\"enabled\".equals(lowerCaseInternal(att.getNodeName()))) {\n                 config.setEnabled(getBooleanValue(value));\n             } else if (att.getNodeName().equals(\"connection-timeout-seconds\")) {\n                 config.setProperty(\"connection-timeout-seconds\", value);\n             }\n         }\n+        LowercaseHandler lowerCaseHandler = new LowercaseHandler();\n         for (Node n : childElements(node)) {\n+        \tlowerCaseHandler.put(n.getLocalName(), \"eureka\".equals(n.getParentNode().getLocalName()));\n             String key = cleanNodeName(n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMzE5Mg=="}, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwMTQxNw==", "bodyText": "I see your point @omidp. You can keep the change local with overriding the cleanNodeName method like\n    public static String cleanNodeName(final Node node) {\n        return cleanNodeName(node, true);\n    }\n\n    public static String cleanNodeName(final Node node, final boolean shouldLowerCase) {\n        final String nodeName = node.getLocalName();\n        if (nodeName == null) {\n            throw new HazelcastException(\"Local node name is null for \" + node);\n        }\n        return shouldLowerCase ? StringUtil.lowerCaseInternal(nodeName) : nodeName;\n    }\n\nSo no other code needs to be modified and we follow the common logic for eureka config processing as well. I'd prefer this over introducing a helper class and a map.", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383801417", "createdAt": "2020-02-25T10:48:07Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1332,18 +1332,25 @@ private void handleAliasedDiscoveryStrategy(WanBatchPublisherConfig publisherCon\n     private void updateConfig(AliasedDiscoveryConfig config, Node node) {\n         NamedNodeMap attributes = node.getAttributes();\n         for (int a = 0; a < attributes.getLength(); a++) {\n-            Node att = attributes.item(a);\n+            Node att = attributes.item(a);            \n             String value = getTextContent(att).trim();\n             if (\"enabled\".equals(lowerCaseInternal(att.getNodeName()))) {\n                 config.setEnabled(getBooleanValue(value));\n             } else if (att.getNodeName().equals(\"connection-timeout-seconds\")) {\n                 config.setProperty(\"connection-timeout-seconds\", value);\n             }\n         }\n+        LowercaseHandler lowerCaseHandler = new LowercaseHandler();\n         for (Node n : childElements(node)) {\n+        \tlowerCaseHandler.put(n.getLocalName(), \"eureka\".equals(n.getParentNode().getLocalName()));\n             String key = cleanNodeName(n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMzE5Mg=="}, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDQ2MQ==", "bodyText": "Ok done", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383814461", "createdAt": "2020-02-25T11:13:33Z", "author": {"login": "omidp"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1332,18 +1332,25 @@ private void handleAliasedDiscoveryStrategy(WanBatchPublisherConfig publisherCon\n     private void updateConfig(AliasedDiscoveryConfig config, Node node) {\n         NamedNodeMap attributes = node.getAttributes();\n         for (int a = 0; a < attributes.getLength(); a++) {\n-            Node att = attributes.item(a);\n+            Node att = attributes.item(a);            \n             String value = getTextContent(att).trim();\n             if (\"enabled\".equals(lowerCaseInternal(att.getNodeName()))) {\n                 config.setEnabled(getBooleanValue(value));\n             } else if (att.getNodeName().equals(\"connection-timeout-seconds\")) {\n                 config.setProperty(\"connection-timeout-seconds\", value);\n             }\n         }\n+        LowercaseHandler lowerCaseHandler = new LowercaseHandler();\n         for (Node n : childElements(node)) {\n+        \tlowerCaseHandler.put(n.getLocalName(), \"eureka\".equals(n.getParentNode().getLocalName()));\n             String key = cleanNodeName(n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMzE5Mg=="}, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc4ODI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/XMLConfigBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowNjozN1rOFtv2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo1NDowN1rOFt2LMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNDE1OQ==", "bodyText": "Could you please add an assertion for the two added properties and do the same changes in the YamlConfigBuilderTest too?", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383514159", "createdAt": "2020-02-24T21:06:37Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XMLConfigBuilderTest.java", "diffHunk": "@@ -407,6 +407,8 @@ public void readEurekaConfig() {\n                 + \"            <eureka enabled=\\\"true\\\">\\n\"\n                 + \"                <use-public-ip>true</use-public-ip>\\n\"\n                 + \"                <namespace>hazelcast</namespace>\\n\"\n+                + \"                <shouldUseDns>false</shouldUseDns>\\n\"\n+                + \"\t\t\t\t   <serviceUrl.default>http://localhost:8082/eureka</serviceUrl.default>\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNzg0Mw==", "bodyText": "Done", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r383617843", "createdAt": "2020-02-25T01:54:07Z", "author": {"login": "omidp"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XMLConfigBuilderTest.java", "diffHunk": "@@ -407,6 +407,8 @@ public void readEurekaConfig() {\n                 + \"            <eureka enabled=\\\"true\\\">\\n\"\n                 + \"                <use-public-ip>true</use-public-ip>\\n\"\n                 + \"                <namespace>hazelcast</namespace>\\n\"\n+                + \"                <shouldUseDns>false</shouldUseDns>\\n\"\n+                + \"\t\t\t\t   <serviceUrl.default>http://localhost:8082/eureka</serviceUrl.default>\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNDE1OQ=="}, "originalCommit": {"oid": "034cb4646a1fce4d3ce4ddbb5442e4823f45801e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDM3MjA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/XMLConfigBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozNjo0NVrOFvLFlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozNjo0NVrOFvLFlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwOTA0NQ==", "bodyText": "Could you please add assertion for serviceUrl.default too?", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r385009045", "createdAt": "2020-02-27T09:36:45Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XMLConfigBuilderTest.java", "diffHunk": "@@ -419,6 +421,7 @@ public void readEurekaConfig() {\n         assertTrue(eurekaConfig.isEnabled());\n         assertTrue(eurekaConfig.isUsePublicIp());\n         assertEquals(\"hazelcast\", eurekaConfig.getProperty(\"namespace\"));\n+        assertEquals(\"false\", eurekaConfig.getProperty(\"shouldUseDns\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddda9c4c205e8c1c89650e8369f2b85ac1529191"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDM3OTMyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/DomConfigHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozODozOFrOFvLJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozODozOFrOFvLJ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAxMDEzNw==", "bodyText": "You can call this method from cleanNodeName(Node) with true, so the duplication can be removed.", "url": "https://github.com/hazelcast/hazelcast/pull/16679#discussion_r385010137", "createdAt": "2020-02-27T09:38:38Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/DomConfigHelper.java", "diffHunk": "@@ -98,6 +98,14 @@ public static String cleanNodeName(final Node node) {\n         }\n         return StringUtil.lowerCaseInternal(nodeName);\n     }\n+    \n+    public static String cleanNodeName(final Node node, final boolean shouldLowercase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddda9c4c205e8c1c89650e8369f2b85ac1529191"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 700, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}