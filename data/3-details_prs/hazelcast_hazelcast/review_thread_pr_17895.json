{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjUwMjI3", "number": 17895, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNjoyM1rOE-uoxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MToxMFrOFBpEoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjExMjcwOnYy", "diffSide": "RIGHT", "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNjoyM1rOH8CkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTozNDoxN1rOH9SDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxODcyNA==", "bodyText": "minor: I guess changing this has no real effect, but does it make sense to change 4.1 XSD in 4.2 dev branch?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r532718724", "createdAt": "2020-11-30T16:16:23Z", "author": {"login": "vbekiaris"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4593,7 +4593,7 @@\n             </xs:element>\n             <xs:element name=\"socket-options\" type=\"endpoint-socket-options\" minOccurs=\"0\"/>\n         </xs:all>\n-        <xs:attribute name=\"name\" type=\"xs:string\" use=\"optional\" default=\"\"/>\n+        <xs:attribute name=\"name\" type=\"xs:string\" use=\"optional\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAyMDk2Mw==", "bodyText": "The purpose was to change the one that was released next but I got confused because the failing test was using an XML(\"advancedNetworkConfig-applicationContext-hazelcast.xml\") which points to 4.1 xsd. I will update the test and do the change on 4.2 xsd only.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534020963", "createdAt": "2020-12-02T09:34:17Z", "author": {"login": "sancar"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -4593,7 +4593,7 @@\n             </xs:element>\n             <xs:element name=\"socket-options\" type=\"endpoint-socket-options\" minOccurs=\"0\"/>\n         </xs:all>\n-        <xs:attribute name=\"name\" type=\"xs:string\" use=\"optional\" default=\"\"/>\n+        <xs:attribute name=\"name\" type=\"xs:string\" use=\"optional\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxODcyNA=="}, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjI0MzIwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/ClientClusterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0Mzo1N1rOH8D0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0Mzo1N1rOH8D0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczOTIyMg==", "bodyText": "nit: Returns {@code true} ...", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r532739222", "createdAt": "2020-11-30T16:43:57Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/ClientClusterService.java", "diffHunk": "@@ -82,6 +82,13 @@\n      */\n     long getClusterTime();\n \n+    /**\n+     * Returns if member internal address should be translated into its public address.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjM0MDU4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNDoyNFrOH8EwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1OTozNFrOH9M49w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NDUwOQ==", "bodyText": "DISCOVERY_SPI_PUBLIC_IP_ENABLED now operates like a tri-state boolean:\n\nexplicitly true -> performs address translation\nexplicitly false -> does not perform address translation\ndefault null or any other explicit value -> decides based on address matching logic below\n\nIn case someone changes the default null value back to false, TranslateToPublicAddress#membersReachableOnlyViaPublicAddress will fail, which is good. Maybe this non-standard treatment of the property is worth a mention in code comment here or in ClientProperty?\nAlso, a nit: in HazelcastProperties#getBoolean, the \"any other explicit value\" bucket results in a false outcome. Would it be more consistent to arrange this as:\n\ndefault null -> decides based on address matching logic below\nexplicitly true -> performs address translation\nexplicitly any other value (false or anything explicitly set) -> does not perform address translation", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r532754509", "createdAt": "2020-11-30T17:04:24Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNjM3NQ==", "bodyText": "Makes sense. I will document in the code comment that null is intentional.\nAlso, I will rearrange the code so that we will be consistent with HazelcastProperties#getBoolean", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r533936375", "createdAt": "2020-12-02T06:59:34Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NDUwOQ=="}, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjM0NDY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNToxNFrOH8Eywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNToxNFrOH8Eywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NTEzOA==", "bodyText": "typo: \"... the client is\"", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r532755138", "createdAt": "2020-11-30T17:05:14Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (\"true\".equalsIgnoreCase(publicIpEnabledProperty)) {\n+            return true;\n+        } else if (\"false\".equalsIgnoreCase(publicIpEnabledProperty)) {\n+            return false;\n+        }\n+\n+        if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+            return false;\n+        }\n+\n+        return membersReachableOnlyViaPublicAddress(members);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that tje client is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f5f9e252d8ee7f5fec3203a6882b130743cd5e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTIyNzE1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozMzo0MlrOH9Y1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozMzo0MlrOH9Y1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzMjEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // we will try to decide if we should use private/public address automatically int that case.\n          \n          \n            \n                    // we will try to decide if we should use private/public address automatically in that case.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534132128", "createdAt": "2020-12-02T12:33:42Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQxMTI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMDoxNVrOH9ak5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMDoxNVrOH9ak5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDYxNA==", "bodyText": "nit: EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\") creates a new object on each call. It could be avoided with a static field const. The same consideration applies to similar server-side usages.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534160614", "createdAt": "2020-12-02T13:20:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -679,6 +680,17 @@ protected TcpClientConnection createSocketConnection(Address target) {\n         }\n     }\n \n+    private Address translate(Member member) {\n+        if (client.getClientClusterService().translateToPublicAddress()) {\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQzODMyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientClusterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyNjo0NlrOH9a1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyNjo0NlrOH9a1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NDg4Mg==", "bodyText": "nit: this field could be final", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534164882", "createdAt": "2020-12-02T13:26:46Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientClusterServiceImpl.java", "diffHunk": "@@ -86,6 +85,8 @@\n     //read and written under clusterViewLock\n     private CountDownLatch initialListFetchedLatch = new CountDownLatch(1);\n \n+    private TranslateToPublicAddressProvider translateToPublicAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ1MDU2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyOTo1OVrOH9a9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyOTo1OVrOH9a9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2Njg1OQ==", "bodyText": "nit: _MILLIS suffix won't hurt here and in NON_REACHABLE_ADDRESS_TIMEOUT", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534166859", "createdAt": "2020-12-02T13:29:59Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ1ODQ3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozMTo1NVrOH9bCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozMTo1NVrOH9bCMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2ODExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n          \n          \n            \n                    // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534168113", "createdAt": "2020-12-02T13:31:55Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ4NTk1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/properties/ClientProperty.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozODozNlrOH9bSxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDoyMzoxNVrOH9dQCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3MjM1OQ==", "bodyText": "Shouldn't we update the javadoc for this property? The current one duplicates member-side prop's javadoc and doesn't seem to be correct.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534172359", "createdAt": "2020-12-02T13:38:36Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/properties/ClientProperty.java", "diffHunk": "@@ -118,7 +118,7 @@\n      * <p>Discovery SPI is <b>disabled</b> by default</p>\n      */\n     public static final HazelcastProperty DISCOVERY_SPI_PUBLIC_IP_ENABLED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MzI0Mg==", "bodyText": "Why do you think that it is not correct?\nFrom the discovery spi perspective, we did not change the behavior. The null results with false there. But we are using this as a hint in a new implementation.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534193242", "createdAt": "2020-12-02T14:08:22Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/properties/ClientProperty.java", "diffHunk": "@@ -118,7 +118,7 @@\n      * <p>Discovery SPI is <b>disabled</b> by default</p>\n      */\n     public static final HazelcastProperty DISCOVERY_SPI_PUBLIC_IP_ENABLED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3MjM1OQ=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNDQyNQ==", "bodyText": "Why do you think that it is not correct?\n\nI've double checked current usage and it seems to be correct. For some reasons I didn't see how it's used in ClusterDiscoveryServiceBuilder.\n\nBut we are using this as a hint in a new implementation.\n\nDoes it make sense to describe this hint behavior? Otherwise, this change seems to be totally uncovered in built-in documentation of the client.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534204425", "createdAt": "2020-12-02T14:23:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/properties/ClientProperty.java", "diffHunk": "@@ -118,7 +118,7 @@\n      * <p>Discovery SPI is <b>disabled</b> by default</p>\n      */\n     public static final HazelcastProperty DISCOVERY_SPI_PUBLIC_IP_ENABLED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3MjM1OQ=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTUxNTAzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0NTowMlrOH9bkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0Mjo1NFrOIAYFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA==", "bodyText": "I didn't experiment with the code, but will java.net.Socket work in case of secure connections? I'd expect an exception in this case, but I may be wrong.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534176824", "createdAt": "2020-12-02T13:45:02Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyNjcwOA==", "bodyText": "Update. I did some experiments and this approach seems to be working with an EE member which has TLS enabled. The only minor issue is that the member logs some warnings on connection attempt, like the following one:\njavax.net.ssl.SSLException: Remote socket closed during SSL/TLS handshake.  This is probably caused by a SSL/TLS authentication problem resulting in the remote side closing the socket.\n\tat com.hazelcast.internal.nio.ssl.TLSHandshakeDecoder.newSSLException(TLSHandshakeDecoder.java:68) ~[classes/:?]\n\tat com.hazelcast.internal.nio.ssl.TLSHandshakeDecoder.interceptError(TLSHandshakeDecoder.java:63) ~[classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioPipeline.onError(NioPipeline.java:271) ~[classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioPipeline.lambda$start$0(NioPipeline.java:129) ~[classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioThread.processTaskQueue(NioThread.java:355) [classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioThread.selectLoop(NioThread.java:290) [classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioThread.executeRun(NioThread.java:249) [classes/:?]\n\tat com.hazelcast.internal.util.executor.HazelcastManagedThread.run(HazelcastManagedThread.java:102) [classes/:?]\nCaused by: java.io.EOFException: Remote socket closed!\n\tat com.hazelcast.internal.networking.nio.NioInboundPipeline.process(NioInboundPipeline.java:122) ~[classes/:?]\n\tat com.hazelcast.internal.networking.nio.NioPipeline.lambda$start$0(NioPipeline.java:127) ~[classes/:?]\n\t... 4 more", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534226708", "createdAt": "2020-12-02T14:50:55Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyNjMyNA==", "bodyText": "I was not sure and tried the following code, and it is working.\nThe client is able to connect without a problem. As soon as it makes write/read it fails.\nchar[] passphrase = \"123456\".toCharArray();\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        KeyStore ks = KeyStore.getInstance(\"JKS\");\n        ks.load(new FileInputStream(\"/Users/sancar/projects/hazelcast-enterprise/hazelcast-enterprise/src/test/resources/com/hazelcast/nio/ssl/hazelcast.keystore\"), passphrase);\n        kmf.init(ks, passphrase);\n        ctx.init(kmf.getKeyManagers(), null, null);\n        SSLServerSocketFactory ssf = ctx.getServerSocketFactory();\n        SSLServerSocket ss = (SSLServerSocket) ssf.createServerSocket(5701);\n        ss.setNeedClientAuth(true);\n\n        new Thread(() -> {\n            while (true) {\n                try {\n                    Socket accept = ss.accept();\n                    System.out.println(\"ACCEPTED\" + accept);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }).start();\n        \n        try (Socket s = new Socket()) {\n            s.connect(new InetSocketAddress(\"127.0.0.1\", 5701), 5000);\n            System.out.println(\"CONNECTED\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534426324", "createdAt": "2020-12-02T19:28:43Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMzYyNg==", "bodyText": "I already did an experiment with a IMDG EE member which has TLS enabled. See #17895 (comment)", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534703626", "createdAt": "2020-12-03T06:01:29Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NjI2MQ==", "bodyText": "So the logs on the server side do not look nice. To avoid the logs,\n\n\nwe may open an SSL connection and close it after the initial handshake. The downside is this heuristic will slowdown the startup more.\nI have tried to use SSL here but porting SSL connection and configuration does not seem simple to me. Maybe @pveentjer can handle it better than me?\nMost of the SSL related connections are not in this repo. And the ClientExtension seems to be for only channels. I could not figure out how to simply open a connection and closed it back after the initial handshake.\n\n\nWe can lower the SSLException log level from WARNING to FINE when the initial PROTOCOL bytes are not sent. It would mean that if normal member/client connections will also be suppressed when the connection is closed before bytes are sent.\n\n\n@jerrinot @mmedenjak Dear colleagues, can we get your ideas ? :)\nAnd to give more context, we are trying to decide if a member is reachable by opening a connection from the client-side to make a decision whether to use internal or public address of the member.\nSecondly, if we leave it like this and allow the Warning logs will be once in a lifetime of the client(and also when they switch cluster). But if you have hundreds of clients, we will see hundreds of logs in the server.\nAlso, we discussed ICMP port 7 pings with @puzpuzpuz . It does not show if a member is there but shows if the machine is reachable. It might be enough but, it is not always enabled.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535886261", "createdAt": "2020-12-04T07:20:02Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwNzg2MA==", "bodyText": "An update after getting a valid point from @leszko\nWe have decided to go with checking config.getNetworkConfig().getSSLConfig().isEnabled()\nIf it is enabled we will not run this heuristic to decide automatically.\nThe reasoning is that if the user enables SSL, s/he already has lots of configs, it is not an out-of-the-box experience anymore. The user can put one more property, DISCOVERY_SPI_PUBLIC_IP_ENABLED true/false.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535907860", "createdAt": "2020-12-04T08:05:52Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzI2MA==", "bodyText": "I'm ok with the proposed solution, but we really need to document this fancy logic, otherwise users will get confused.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535917260", "createdAt": "2020-12-04T08:23:27Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0MzI3Mw==", "bodyText": "One more note on this one. We should add more logging around this detection mechanism to simplify diagnostics in case of reported issues.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535943273", "createdAt": "2020-12-04T09:06:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NTUxNQ==", "bodyText": "I have added logs.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537265515", "createdAt": "2020-12-07T06:42:54Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjgyNA=="}, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTUxODg1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0NTo1NFrOH9bmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0NTo1NFrOH9bmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NzM5Mw==", "bodyText": "nit: would be nice to add a meaningful message for the log entry.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534177393", "createdAt": "2020-12-02T13:45:54Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // if DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically int that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"));\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isReachable(Address address, int timeoutMs) {\n+        try (Socket s = new Socket()) {\n+            s.connect(new InetSocketAddress(address.getHost(), address.getPort()), timeoutMs);\n+        } catch (Exception e) {\n+            logger.fine(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a6b55029471cb951e686194872090d59f216da"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTU1MTgwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cluster/impl/MemberImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1MzoxM1rOH9b6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1MzoxM1rOH9b6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4MjQ4Mw==", "bodyText": "nit: newAddressMap may be a better name for this method.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534182483", "createdAt": "2020-12-02T13:53:13Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/cluster/impl/MemberImpl.java", "diffHunk": "@@ -217,4 +217,10 @@ public MemberImpl build() {\n                     attributes, liteMember, memberListJoinVersion, instance);\n         }\n     }\n+\n+    private static Map<EndpointQualifier, Address> newHashMap(EndpointQualifier member, Address address) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTU2MDI1OnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NDo1N1rOH9b_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzozNDowMlrOH-Clzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4Mzc4Mg==", "bodyText": "Why do we need this change in this PR? Seems that it only affects WAN protocol type.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534183782", "createdAt": "2020-12-02T13:54:57Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java", "diffHunk": "@@ -85,10 +85,6 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        // Single instance types - identifier doesn't matter\n-        if (type.getServerSocketCardinality() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgwMjI0Mw==", "bodyText": "@leszko we were not checking the identifier for equality when getServerSocketCardinality is 1 before\nbecause the only one with a different identifier was WAN. Now the CLIENT can have a different identifier and its cardinality is one. That is why we needed to remove this.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534802243", "createdAt": "2020-12-03T07:25:36Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java", "diffHunk": "@@ -85,10 +85,6 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        // Single instance types - identifier doesn't matter\n-        if (type.getServerSocketCardinality() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4Mzc4Mg=="}, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxNjIwNg==", "bodyText": "I see. Then this change shouldn't break any WAN-related code.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534816206", "createdAt": "2020-12-03T07:34:02Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java", "diffHunk": "@@ -85,10 +85,6 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        // Single instance types - identifier doesn't matter\n-        if (type.getServerSocketCardinality() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4Mzc4Mg=="}, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTU2NDU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultAddressPicker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NTo1MlrOH9cB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NTo1MlrOH9cB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NDQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<EndpointQualifier, Address> publicAddressMap = new HashMap<>();\n          \n          \n            \n                    Map<EndpointQualifier, Address> publicAddressMap = new HashMap<>();", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534184433", "createdAt": "2020-12-02T13:55:52Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultAddressPicker.java", "diffHunk": "@@ -436,7 +437,9 @@ public ServerSocketChannel getServerSocketChannel(EndpointQualifier qualifier) {\n \n     @Override\n     public Map<EndpointQualifier, Address> getPublicAddressMap() {\n-        return Collections.singletonMap(MEMBER, publicAddress);\n+        HashMap<EndpointQualifier, Address> publicAddressMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTYyMDk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDowODozN1rOH9clJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODo1MDo1OFrOH-Kq8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MzQ0NA==", "bodyText": "Is it ok to remove volatile modifier for this field?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534193444", "createdAt": "2020-12-02T14:08:37Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "diffHunk": "@@ -72,9 +71,124 @@ public void teardown() {\n         Hazelcast.shutdownAll();\n     }\n \n+    @Test(expected = Exception.class)\n+    public void testTranslateIsUsed() {\n+        // given\n+        ClientConfig config = new ClientConfig();\n+        config.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(1000);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(new TestAddressProvider(true), config);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        // when\n+        clientConnectionManager.start();\n+\n+        // then\n+        // throws exception because it can't connect to the cluster using translated public unreachable address\n+    }\n+\n+    @Test\n+    public void testTranslateIsNotUsedOnGettingExistingConnection() {\n+        // given\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, new ClientConfig());\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        clientConnectionManager.start();\n+        clientConnectionManager.reset();\n+\n+        clientConnectionManager.getOrConnectToAddress(privateAddress);\n+        provider.shouldTranslate = true;\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToAddress(privateAddress);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test\n+    public void testTranslateIsUsedWhenMemberHasPublicClientAddress() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is unreachable\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false, UUID.randomUUID());\n+        // public member address is reachable\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateIsNotUsedWhenPublicIpDisabled() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"false\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is incorrect\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"), new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect member address\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateFromMemberIsNotUsedWhenAlreadyTranslatedByAddressProvider() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+        provider.shouldTranslate = true;\n+        privateAddress = new Address(\"192.168.0.1\", 5702);\n+\n+        // private member address is correct\n+        Member member = new MemberImpl(privateAddress, VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect address\n+    }\n+\n     private class TestAddressProvider implements AddressProvider {\n \n-        volatile boolean shouldTranslate = false;\n+        private boolean shouldTranslate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0ODU5Mw==", "bodyText": "It should not cause any harm as far as I see. We set this field before starting the instance. All threads start after this.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534948593", "createdAt": "2020-12-03T08:50:58Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "diffHunk": "@@ -72,9 +71,124 @@ public void teardown() {\n         Hazelcast.shutdownAll();\n     }\n \n+    @Test(expected = Exception.class)\n+    public void testTranslateIsUsed() {\n+        // given\n+        ClientConfig config = new ClientConfig();\n+        config.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(1000);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(new TestAddressProvider(true), config);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        // when\n+        clientConnectionManager.start();\n+\n+        // then\n+        // throws exception because it can't connect to the cluster using translated public unreachable address\n+    }\n+\n+    @Test\n+    public void testTranslateIsNotUsedOnGettingExistingConnection() {\n+        // given\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, new ClientConfig());\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        clientConnectionManager.start();\n+        clientConnectionManager.reset();\n+\n+        clientConnectionManager.getOrConnectToAddress(privateAddress);\n+        provider.shouldTranslate = true;\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToAddress(privateAddress);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test\n+    public void testTranslateIsUsedWhenMemberHasPublicClientAddress() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is unreachable\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false, UUID.randomUUID());\n+        // public member address is reachable\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateIsNotUsedWhenPublicIpDisabled() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"false\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is incorrect\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"), new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect member address\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateFromMemberIsNotUsedWhenAlreadyTranslatedByAddressProvider() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+        provider.shouldTranslate = true;\n+        privateAddress = new Address(\"192.168.0.1\", 5702);\n+\n+        // private member address is correct\n+        Member member = new MemberImpl(privateAddress, VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect address\n+    }\n+\n     private class TestAddressProvider implements AddressProvider {\n \n-        volatile boolean shouldTranslate = false;\n+        private boolean shouldTranslate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MzQ0NA=="}, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTY2MzI3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/DiscoveryJoiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDoxNzo1NVrOH9c_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDoyNTozOVrOH9dXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMDE1Mg==", "bodyText": "As MC uses address map for advanced networking support and matching some metrics, this change may affect it.\n@emre-aydin it may be a good idea to double check if this change doesn't break anything in MC. WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534200152", "createdAt": "2020-12-02T14:17:55Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/DiscoveryJoiner.java", "diffHunk": "@@ -76,10 +78,29 @@ public DiscoveryJoiner(Node node, DiscoveryService discoveryService, boolean use\n         for (DiscoveryNode discoveryNode : discoveredNodes) {\n             Address discoveredAddress = usePublicAddress ? discoveryNode.getPublicAddress() : discoveryNode.getPrivateAddress();\n             if (localAddress.equals(discoveredAddress)) {\n+                if (!usePublicAddress && discoveryNode.getPublicAddress() != null) {\n+                    // enrich member with client public address\n+                    localMember.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNjQxMQ==", "bodyText": "Funny thing that you mention it right when I am troubleshooting a bug in this area and was just about to use Member#getSocketAddress(EndpointQualifier.CLIENT) for fixing it \ud83d\ude04\nGood idea to try changes in this branch with MC. Will add to my todo. Thanks for the ping.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534206411", "createdAt": "2020-12-02T14:25:39Z", "author": {"login": "emre-aydin"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/DiscoveryJoiner.java", "diffHunk": "@@ -76,10 +78,29 @@ public DiscoveryJoiner(Node node, DiscoveryService discoveryService, boolean use\n         for (DiscoveryNode discoveryNode : discoveredNodes) {\n             Address discoveredAddress = usePublicAddress ? discoveryNode.getPublicAddress() : discoveryNode.getPrivateAddress();\n             if (localAddress.equals(discoveredAddress)) {\n+                if (!usePublicAddress && discoveryNode.getPublicAddress() != null) {\n+                    // enrich member with client public address\n+                    localMember.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMDE1Mg=="}, "originalCommit": {"oid": "b10bf9d4bf231b8ad7f2c44c6decff7d00118dc5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTQyNzkzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoyMToxM1rOH-BR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMjo1OFrOH-Fjpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5NDc0Nw==", "bodyText": "@leszko It looks like we are retrying some members twice if the number of members is less than REACHABLE_CHECK_NUMBER.  If so, I think we should not. Am I missing something?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534794747", "createdAt": "2020-12-03T07:21:13Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d879bb29513dc69d554ebdbc67b0ddf4b9419ac8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NDgwNw==", "bodyText": "My reasoning was that, for example, if we have just 1 member, we should anyway retry a few times, because otherwise, we risk that there was some random network congestion for just one moment and we take a decision based on that. So, in my opinion, I would retry a few times even if we only have 1 member.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r534864807", "createdAt": "2020-12-03T08:02:58Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        Iterator<MemberInfo> iter = members.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = members.iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5NDc0Nw=="}, "originalCommit": {"oid": "d879bb29513dc69d554ebdbc67b0ddf4b9419ac8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjM0MTQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoxMDoxMlrOH_Dpqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo1NDoyMlrOIAYWXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA==", "bodyText": "Current implementation forces detection of unreachable internal address and reachable public address for 3 members in public client-server comms scenario. It follows what's written in the TDD, but it may be a bit too pessimistic. We could change this check to the following:\n            if (isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n                return true;\n            }\n        }\n        return false;\nLet's consider the success path, i.e. situation when all members are up and running and network works as expected. With this check we would return early in the public client-server comm scenario, once we detect the situation for the first member. In scenario when a member is not reachable, it shouldn't change anything. When the client and members are located in the same private network and members have configured public address (which seems to be a rare case), we're going to do only one check, just like before. So, the change should only reduce the number of attempts done in the public client-server comms scenario.\n@leszko did you consider this logic? If you did what are the benefits of the current implementation?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535882154", "createdAt": "2020-12-04T07:10:12Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2ODY5OA==", "bodyText": "Hmm, I'd keep it as it is. Here's my reasoning. Let's take AWS as an example.\n\nYou start 3 EC2 Instances (by default they have both private and public addresses)\nThis mechanism checks first the private address, so it should be fine. But if there is some random lag in the network, then\nThis mechanism checks the public address and decide to use the public address for the communication\n\nThe outcome is wrong. And it can happen, because of some random network congestion. So, I'd prefer to always check 3 times. The performance impact is not high in my option, because it affects only the case when you will actually use the public address for communication.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536068698", "createdAt": "2020-12-04T12:35:49Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4ODEyMA==", "bodyText": "I didn't get the scenario. On which step the network starts misbehaving?\n\nThe performance impact is not high in my option\n\nIt's not about performance, it's about client start time. Current implementation leads to +3s in the public client-server comms scenario (success path, i.e. when the network is healthy). The proposed change will turn it into +1s.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536088120", "createdAt": "2020-12-04T13:09:58Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5MTA4MA==", "bodyText": "I didn't get the scenario. On which step the network starts misbehaving?\n\nMy point is just that making a decision based on just one network call is risky. And the scenario that Hazelcast has both private and public address is a common scenario.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536091080", "createdAt": "2020-12-04T13:14:55Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NDY0Nw==", "bodyText": "My point is just that making a decision based on just one network call is risky\n\nIn fact, the decision is made based on two network checks: the first one is supposed to fail, while the second should succeed. And current implementation makes 6 networks calls.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536094647", "createdAt": "2020-12-04T13:20:55Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMjcxNQ==", "bodyText": "Yes, but it's very common that both addresses (private and public) are reachable. Then, one false negative (of private address) gives us the wrong decision. That is why I think it's risky.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536102715", "createdAt": "2020-12-04T13:34:20Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMTk2NA==", "bodyText": "I'm certainly fine with leaving the logic as is, but we just need to decide if it's ok to add 3 seconds to client startup time (smart and non-async start modes - which are the default). @sancar WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536111964", "createdAt": "2020-12-04T13:49:10Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3NjE0Mw==", "bodyText": "Hard to decide really. There is one point that might make the decision easier.\nWe have one more check before the time-consuming part. We are checking if configured addresses on the client-side are the same as the member's private(internal) addresses. If matches, then we avoid time-consuming connection attempts.\nSo the setups without where clients can connect internal addresses will be fast by default most of the time. I should note that there could be still slow cases like client applications prefer to use a different network interface address than members even though both are in the same LAN(I am skipping this since it is not common).\nThis also means that cloud use cases will have an additional slow startup when the client is far. In this case, with zero configuration, we are choosing between not-working and slow startup. I would like to prefer slow startup over not-working. Users can always set it explicitly to avoid slow startup as a workaround.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537076143", "createdAt": "2020-12-06T16:46:02Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2OTg1Mg==", "bodyText": "We have one more check before the time-consuming part. We are checking if configured addresses on the client-side are the same as the member's private(internal) addresses.\n\nIn fact, we do another check before doing the network check. I'm talking about addressMap check based on the data reported by particular member. If the check is successful, it means that the member was available through member-to-member comms and reported this state some time ago.\n\nThis also means that cloud use cases will have an additional slow startup when the client is far. In this case, with zero configuration, we are choosing between not-working and slow startup. I would like to prefer slow startup over not-working.\n\nNo, we're choosing between slightly slower startup with a (probably?) less reliable detection mechanism and significantly slower startup with a more reliable mechanism.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537269852", "createdAt": "2020-12-07T06:54:22Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            if (members.isEmpty() || memberInternalAddressAsDefinedInClientConfig(members)) {\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getNetworkConfig().getAddresses();\n+        return members.stream()\n+                .map(MemberInfo::getAddress)\n+                .anyMatch(a -> addresses.contains(a.getHost())\n+                        || addresses.contains(String.format(\"%s:%s\", a.getHost(), a.getPort())));\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            if (publicAddress == null) {\n+                return false;\n+            }\n+            Address internalAddress = member.getAddress();\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjE1NA=="}, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg5MTAxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzo1OFrOH_Iedg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzo1OFrOH_Iedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MTIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            asList(member(REACHABLE_HOST, UNREACHABLE_HOST), member(UNREACHABLE_HOST, UNREACHABLE_HOST)));\n          \n          \n            \n                            asList(member(REACHABLE_HOST, UNREACHABLE_HOST), member(REACHABLE_HOST, UNREACHABLE_HOST)));", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r535961206", "createdAt": "2020-12-04T09:33:58Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProviderTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.impl.connection.Addresses;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.instance.BuildInfoProvider;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.version.MemberVersion;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.net.UnknownHostException;\n+import java.util.UUID;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category(QuickTest.class)\n+public class TranslateToPublicAddressProviderTest {\n+    private static final MemberVersion VERSION = MemberVersion.of(BuildInfoProvider.getBuildInfo().getVersion());\n+    public static final String REACHABLE_HOST = \"127.0.0.1\";\n+    public static final String UNREACHABLE_HOST = \"192.168.0.1\";\n+\n+    private final ClientConfig config = new ClientConfig();\n+\n+    @After\n+    public void teardown() {\n+        Hazelcast.shutdownAll();\n+    }\n+\n+    @Test\n+    public void nonDefaultAddressProvider() {\n+        // given\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(new TestAddressProvider(), null);\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void propertyTrue() {\n+        // given\n+        config.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.toString(), \"true\");\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(), null);\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void propertyFalse() {\n+        // given\n+        config.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.toString(), \"false\");\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(), null);\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void emptyMemberList() {\n+        // given\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(), emptyList());\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void memberInternalAddressAsDefinedInClientConfig() {\n+        // given\n+        config.getNetworkConfig().addAddress(\"127.0.0.1\");\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(), asList(member(\"192.168.0.1\"), member(\"127.0.0.1\")));\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void membersWithoutPublicAddresses() {\n+        // given\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(), asList(member(\"127.0.0.1\")));\n+        boolean result = translateProvider.get();\n+\n+        // then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void membersReachableViaInternalAddress() {\n+        // given\n+        Hazelcast.newHazelcastInstance();\n+        TranslateToPublicAddressProvider translateProvider = createTranslateProvider();\n+\n+        // when\n+        translateProvider.refresh(defaultAddressProvider(),\n+                asList(member(REACHABLE_HOST, UNREACHABLE_HOST), member(UNREACHABLE_HOST, UNREACHABLE_HOST)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237e87732e0e1ffb06354b29f76288f11acb013e"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzcyOTM0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzowMjoyNFrOH_P9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MjoxOFrOIAYEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4Mzc5MA==", "bodyText": "This test leads to a NPE (because member.getUuid() is null) which doesn't seems to be what it's supposed to be testing. Same story with testTranslateIsNotUsedWhenPublicIpDisabled.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r536083790", "createdAt": "2020-12-04T13:02:24Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "diffHunk": "@@ -72,9 +71,124 @@ public void teardown() {\n         Hazelcast.shutdownAll();\n     }\n \n+    @Test(expected = Exception.class)\n+    public void testTranslateIsUsed() {\n+        // given\n+        ClientConfig config = new ClientConfig();\n+        config.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(1000);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(new TestAddressProvider(true), config);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        // when\n+        clientConnectionManager.start();\n+\n+        // then\n+        // throws exception because it can't connect to the cluster using translated public unreachable address\n+    }\n+\n+    @Test\n+    public void testTranslateIsNotUsedOnGettingExistingConnection() {\n+        // given\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, new ClientConfig());\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        clientConnectionManager.start();\n+        clientConnectionManager.reset();\n+\n+        clientConnectionManager.getOrConnectToAddress(privateAddress);\n+        provider.shouldTranslate = true;\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToAddress(privateAddress);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test\n+    public void testTranslateIsUsedWhenMemberHasPublicClientAddress() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is unreachable\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false, UUID.randomUUID());\n+        // public member address is reachable\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateIsNotUsedWhenPublicIpDisabled() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"false\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is incorrect\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"), new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect member address\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateFromMemberIsNotUsedWhenAlreadyTranslatedByAddressProvider() throws UnknownHostException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e81997aa7804a461ae665e3dbef08a6df1a4b60"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NTI5NA==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537265294", "createdAt": "2020-12-07T06:42:18Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManagerTranslateTest.java", "diffHunk": "@@ -72,9 +71,124 @@ public void teardown() {\n         Hazelcast.shutdownAll();\n     }\n \n+    @Test(expected = Exception.class)\n+    public void testTranslateIsUsed() {\n+        // given\n+        ClientConfig config = new ClientConfig();\n+        config.getConnectionStrategyConfig().getConnectionRetryConfig().setClusterConnectTimeoutMillis(1000);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(new TestAddressProvider(true), config);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        // when\n+        clientConnectionManager.start();\n+\n+        // then\n+        // throws exception because it can't connect to the cluster using translated public unreachable address\n+    }\n+\n+    @Test\n+    public void testTranslateIsNotUsedOnGettingExistingConnection() {\n+        // given\n+        TestAddressProvider provider = new TestAddressProvider(false);\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(provider, new ClientConfig());\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+\n+        clientConnectionManager.start();\n+        clientConnectionManager.reset();\n+\n+        clientConnectionManager.getOrConnectToAddress(privateAddress);\n+        provider.shouldTranslate = true;\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToAddress(privateAddress);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test\n+    public void testTranslateIsUsedWhenMemberHasPublicClientAddress() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"true\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is unreachable\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false, UUID.randomUUID());\n+        // public member address is reachable\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"),\n+                new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        Connection connection = clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        assertNotNull(connection);\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateIsNotUsedWhenPublicIpDisabled() throws UnknownHostException {\n+        // given\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(), \"false\");\n+\n+        HazelcastInstance client = HazelcastClientUtil.newHazelcastClient(null, clientConfig);\n+        TcpClientConnectionManager clientConnectionManager =\n+                new TcpClientConnectionManager(getHazelcastClientInstanceImpl(client));\n+        clientConnectionManager.start();\n+\n+        // private member address is incorrect\n+        Member member = new MemberImpl(new Address(\"192.168.0.1\", 5701), VERSION, false);\n+        // public member address is correct\n+        member.getAddressMap().put(EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\"), new Address(\"127.0.0.1\", 5701));\n+\n+        // when\n+        clientConnectionManager.getOrConnectToMember(member);\n+\n+        // then\n+        // throws exception because it can't connect to the incorrect member address\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void testTranslateFromMemberIsNotUsedWhenAlreadyTranslatedByAddressProvider() throws UnknownHostException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4Mzc5MA=="}, "originalCommit": {"oid": "4e81997aa7804a461ae665e3dbef08a6df1a4b60"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjUwNzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzowNTowN1rOIAYl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzoyNDo1N1rOIAZGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3Mzg0Nw==", "bodyText": "This check looks incorrect, as further logging is done with info level.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537273847", "createdAt": "2020-12-07T07:05:07Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientNetworkConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.config.SSLConfig;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.internal.util.AddressUtil;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientNetworkConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientNetworkConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            SSLConfig sslConfig = config.getSSLConfig();\n+            if (sslConfig != null && sslConfig.isEnabled()) {\n+                if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2752792cffc4a364488156627f5d432c857dc17f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3NTQ0OQ==", "bodyText": "Ups. It should have been fine level. I don't want to log these in info level. I think it is too internal for the user to see by default.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537275449", "createdAt": "2020-12-07T07:09:14Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientNetworkConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.config.SSLConfig;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.internal.util.AddressUtil;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientNetworkConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientNetworkConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            SSLConfig sslConfig = config.getSSLConfig();\n+            if (sslConfig != null && sslConfig.isEnabled()) {\n+                if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3Mzg0Nw=="}, "originalCommit": {"oid": "2752792cffc4a364488156627f5d432c857dc17f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4MjIzNA==", "bodyText": "I would rather use info level. This may help users and support to understand what's going on under the hood.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537282234", "createdAt": "2020-12-07T07:24:57Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientNetworkConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.config.SSLConfig;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.internal.util.AddressUtil;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientNetworkConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientNetworkConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            SSLConfig sslConfig = config.getSSLConfig();\n+            if (sslConfig != null && sslConfig.isEnabled()) {\n+                if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3Mzg0Nw=="}, "originalCommit": {"oid": "2752792cffc4a364488156627f5d432c857dc17f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjY0MDAxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NTo1N1rOIAZtOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NTo1N1rOIAZtOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5MjA5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * able to connect to members via configured address. No need to use make any address translation.\n          \n          \n            \n                 * able to connect to members via configured address. No need to use any address translation.", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537292090", "createdAt": "2020-12-07T07:45:57Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientNetworkConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.config.SSLConfig;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.internal.util.AddressUtil;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientNetworkConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientNetworkConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            SSLConfig sslConfig = config.getSSLConfig();\n+            if (sslConfig != null && sslConfig.isEnabled()) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"SSL is configured. The client will use internal addresses to communicate with the cluster. If \"\n+                            + \"members are not reachable via private addresses, \"\n+                            + \"please set \\\"hazelcast.discovery.public.ip.enabled\\\" to true \");\n+                }\n+                return false;\n+            }\n+\n+            if (memberInternalAddressAsDefinedInClientConfig(members)) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"There are internal addresses of members used in the config.\"\n+                            + \" The client will use internal addresses\");\n+                }\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31da1e40c468854f17a845687636f366f98b9a81"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjY1ODI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MToxMFrOIAZ3RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MToxMFrOIAZ3RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"  is not reachable. The client will use internal addresses\");\n          \n          \n            \n                                        + \" is not reachable. The client will use internal addresses\");", "url": "https://github.com/hazelcast/hazelcast/pull/17895#discussion_r537294661", "createdAt": "2020-12-07T07:51:10Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/TranslateToPublicAddressProvider.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi.impl;\n+\n+import com.hazelcast.client.config.ClientNetworkConfig;\n+import com.hazelcast.client.impl.connection.AddressProvider;\n+import com.hazelcast.client.properties.ClientProperty;\n+import com.hazelcast.cluster.Address;\n+import com.hazelcast.config.SSLConfig;\n+import com.hazelcast.instance.EndpointQualifier;\n+import com.hazelcast.instance.ProtocolType;\n+import com.hazelcast.internal.cluster.MemberInfo;\n+import com.hazelcast.internal.util.AddressUtil;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.properties.HazelcastProperties;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+class TranslateToPublicAddressProvider {\n+    private static final int REACHABLE_ADDRESS_TIMEOUT_MILLIS = 1000;\n+    private static final int NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS = 3000;\n+    private static final int REACHABLE_CHECK_NUMBER = 3;\n+    private static final EndpointQualifier CLIENT_PUBLIC_ENDPOINT_QUALIFIER =\n+            EndpointQualifier.resolve(ProtocolType.CLIENT, \"public\");\n+    private final ClientNetworkConfig config;\n+    private final HazelcastProperties properties;\n+    private final ILogger logger;\n+\n+    private volatile boolean translateToPublicAddress;\n+\n+    TranslateToPublicAddressProvider(ClientNetworkConfig config, HazelcastProperties properties, ILogger logger) {\n+        this.config = config;\n+        this.properties = properties;\n+        this.logger = logger;\n+    }\n+\n+    void refresh(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        translateToPublicAddress = resolve(addressProvider, members);\n+    }\n+\n+    private boolean resolve(AddressProvider addressProvider, Collection<MemberInfo> members) {\n+        if (!(addressProvider instanceof DefaultAddressProvider)) {\n+            return false;\n+        }\n+\n+        // Default value of DISCOVERY_SPI_PUBLIC_IP_ENABLED is `null` intentionally.\n+        // If DISCOVERY_SPI_PUBLIC_IP_ENABLED is not set to true/false, we don't know the intention of the user,\n+        // we will try to decide if we should use private/public address automatically in that case.\n+        String publicIpEnabledProperty = properties.getString(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+        if (publicIpEnabledProperty == null) {\n+            SSLConfig sslConfig = config.getSSLConfig();\n+            if (sslConfig != null && sslConfig.isEnabled()) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"SSL is configured. The client will use internal addresses to communicate with the cluster. If \"\n+                            + \"members are not reachable via private addresses, \"\n+                            + \"please set \\\"hazelcast.discovery.public.ip.enabled\\\" to true \");\n+                }\n+                return false;\n+            }\n+\n+            if (memberInternalAddressAsDefinedInClientConfig(members)) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"There are internal addresses of members used in the config.\"\n+                            + \" The client will use internal addresses\");\n+                }\n+                return false;\n+            }\n+\n+            return membersReachableOnlyViaPublicAddress(members);\n+        }\n+        return properties.getBoolean(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED);\n+    }\n+\n+    /**\n+     * Checks if any member has its internal address as configured in ClientConfig.\n+     * <p>\n+     * If any member has its internal/private address the same as configured in ClientConfig, then it means that the client is\n+     * able to connect to members via configured address. No need to use make any address translation.\n+     */\n+    boolean memberInternalAddressAsDefinedInClientConfig(Collection<MemberInfo> members) {\n+        List<String> addresses = config.getAddresses();\n+        List<String> resolvedHosts = addresses.stream().map(s -> {\n+            try {\n+                return InetAddress.getByName(AddressUtil.getAddressHolder(s, -1).getAddress()).getHostAddress();\n+            } catch (UnknownHostException e) {\n+                return null;\n+            }\n+        }).filter(Objects::nonNull).collect(Collectors.toList());\n+        return members.stream()\n+                .map(memberInfo -> {\n+                    try {\n+                        return memberInfo.getAddress().getInetAddress().getHostAddress();\n+                    } catch (UnknownHostException e) {\n+                        return null;\n+                    }\n+                }).anyMatch(resolvedHosts::contains);\n+    }\n+\n+    /**\n+     * Checks if members are reachable via public addresses, but not reachable via internal addresses.\n+     * <p>\n+     * We check only limited number of random members to reduce the slowdown of the startup.\n+     */\n+    private boolean membersReachableOnlyViaPublicAddress(Collection<MemberInfo> members) {\n+        List<MemberInfo> shuffledList = new ArrayList<>(members);\n+        Collections.shuffle(shuffledList);\n+        Iterator<MemberInfo> iter = shuffledList.iterator();\n+        for (int i = 0; i < REACHABLE_CHECK_NUMBER; i++) {\n+            if (!iter.hasNext()) {\n+                iter = shuffledList.iterator();\n+            }\n+            MemberInfo member = iter.next();\n+            Address publicAddress = member.getAddressMap().get(CLIENT_PUBLIC_ENDPOINT_QUALIFIER);\n+            Address internalAddress = member.getAddress();\n+            if (publicAddress == null) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"The public address is not available on the member. The client will use internal addresses\");\n+                }\n+                return false;\n+            }\n+            if (isReachable(internalAddress, REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"The internal address is reachable. The client will use the internal addresses\");\n+                }\n+                return false;\n+            }\n+            if (!isReachable(publicAddress, NON_REACHABLE_ADDRESS_TIMEOUT_MILLIS)) {\n+                if (logger.isFineEnabled()) {\n+                    logger.fine(\"Public address + \" + publicAddress\n+                            + \"  is not reachable. The client will use internal addresses\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31da1e40c468854f17a845687636f366f98b9a81"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}