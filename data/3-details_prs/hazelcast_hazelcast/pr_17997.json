{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTExMDI2", "number": 17997, "title": "SQL remainder operation [IMDG-147]", "bodyText": "This PR introduces the remainder (mod), operator:\n\nThe operator coerces both operands to the type with the higher precedence without extending the bit width (unlike division) because it seems that there could be no overflow.\nThe return type is the same as the operand type. Alternatively, we may have reduced it to the second operand (e.g. BIGINT % SMALLINT => SMALLINT), but this would complicate the implementation of the operator because we would have many more combinations. We may leave it as a future optimization, but meanwhile, I prefer to keep things simple.\nInexact types (float, double) are not supported, like in major databases (e.g., Postgres, SQL Server).\n\nCloses #17334", "createdAt": "2020-12-22T13:05:33Z", "url": "https://github.com/hazelcast/hazelcast/pull/17997", "merged": true, "mergeCommit": {"oid": "6fa873c3103ff5f2abb10e8cf477e01d4ca777fa"}, "closed": true, "closedAt": "2021-01-19T09:08:01Z", "author": {"login": "devozerov"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdop0Q6AH2gAyNTQ0MTExMDI2OjE4OTY2ODI2MDZiYTdiYzIyNWY4ZTQ5MjA5OTU1MDUwZGU0Mjc2ZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxX4itAFqTU3MDU1Njk1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1896682606ba7bc225f8e49209955050de4276d8", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1896682606ba7bc225f8e49209955050de4276d8", "committedDate": "2020-12-22T12:37:24Z", "message": "SQL remainder operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ef4f65b66eef7e4abe3eab3130308258932fce", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/29ef4f65b66eef7e4abe3eab3130308258932fce", "committedDate": "2020-12-22T13:05:25Z", "message": "Disallow inexact types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c025e9d7310ed9f7b6c95fdd74706930399ebf7", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6c025e9d7310ed9f7b6c95fdd74706930399ebf7", "committedDate": "2020-12-22T13:06:41Z", "message": "Revert method rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87533828d203f5b69520f41c31889c2e06c719a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b87533828d203f5b69520f41c31889c2e06c719a", "committedDate": "2020-12-22T13:07:51Z", "message": "Minors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzQyMDc5", "url": "https://github.com/hazelcast/hazelcast/pull/17997#pullrequestreview-557742079", "createdAt": "2020-12-23T09:20:29Z", "commit": {"oid": "b87533828d203f5b69520f41c31889c2e06c719a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMDoyOVrOIKd5iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMDoyOVrOIKd5iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NjUzOQ==", "bodyText": "As I understand from code the test checks when left operand is TINYINT type and the right is one of \"everything else\" types.\nI'd suggest either rename testTinyint into testLeftTinyint_rightOtherTypes or split into separate test methods per each case like.\n\ntestTinyintAndNull\ntestTinyintAndTinyint\n... and so on.\nsecond approach adds readability of what tests check but number of methods will blow", "url": "https://github.com/hazelcast/hazelcast/pull/17997#discussion_r547846539", "createdAt": "2020-12-23T09:20:29Z", "author": {"login": "alex-dukhno"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/math/RemainderOperatorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.math;\n+\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import static com.hazelcast.sql.SqlColumnType.BIGINT;\n+import static com.hazelcast.sql.SqlColumnType.BOOLEAN;\n+import static com.hazelcast.sql.SqlColumnType.DATE;\n+import static com.hazelcast.sql.SqlColumnType.DECIMAL;\n+import static com.hazelcast.sql.SqlColumnType.DOUBLE;\n+import static com.hazelcast.sql.SqlColumnType.INTEGER;\n+import static com.hazelcast.sql.SqlColumnType.NULL;\n+import static com.hazelcast.sql.SqlColumnType.OBJECT;\n+import static com.hazelcast.sql.SqlColumnType.REAL;\n+import static com.hazelcast.sql.SqlColumnType.SMALLINT;\n+import static com.hazelcast.sql.SqlColumnType.TIME;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.hazelcast.sql.SqlColumnType.TINYINT;\n+import static com.hazelcast.sql.SqlColumnType.VARCHAR;\n+import static com.hazelcast.sql.impl.SqlErrorCode.DATA_EXCEPTION;\n+import static com.hazelcast.sql.impl.expression.ConstantExpression.create;\n+import static com.hazelcast.sql.impl.type.QueryDataType.INT;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class RemainderOperatorIntegrationTest extends ArithmeticOperatorIntegrationTest {\n+    @Override\n+    protected String operator() {\n+        return \"%\";\n+    }\n+\n+    @Test\n+    public void testTinyint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87533828d203f5b69520f41c31889c2e06c719a"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "424392ac8baa8dc8a1c54f7049dbcc54578cc2a2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/424392ac8baa8dc8a1c54f7049dbcc54578cc2a2", "committedDate": "2020-12-28T10:42:59Z", "message": "Test naming."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MDkxMjQz", "url": "https://github.com/hazelcast/hazelcast/pull/17997#pullrequestreview-559091243", "createdAt": "2020-12-28T10:46:38Z", "commit": {"oid": "424392ac8baa8dc8a1c54f7049dbcc54578cc2a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNTU2OTU2", "url": "https://github.com/hazelcast/hazelcast/pull/17997#pullrequestreview-570556956", "createdAt": "2021-01-18T14:49:06Z", "commit": {"oid": "424392ac8baa8dc8a1c54f7049dbcc54578cc2a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3049, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}