{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTUyMTk2", "number": 17320, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyODo1OFrOEWIKRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyODo1OFrOEWIKRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjM3ODMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/HazelcastCachingProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyODo1OFrOG9RQTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODozMzozOVrOG9RZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5OTAyMw==", "bodyText": "Doesn't this break the backward compatibility?", "url": "https://github.com/hazelcast/hazelcast/pull/17320#discussion_r466899023", "createdAt": "2020-08-07T08:28:58Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/HazelcastCachingProvider.java", "diffHunk": "@@ -106,15 +108,15 @@\n  * <h3>Examples</h3>\n  * <p><b>Obtain a member-side caching provider backed by an existing HazelcastInstance.</b>\n  * In this example the member-side caching provider is selected by setting the value of\n- * system property {@code hazelcast.jcache.provider.type} to value \"{@code server}\". An existing\n+ * system property {@code hazelcast.jcache.provider.type} to value \"{@code member}\". An existing\n  * {@code HazelcastInstance} is referenced by instance name in the {@code Properties} provided as\n  * argument to {@link CachingProvider#getCacheManager(URI, ClassLoader, Properties)}.\n  * <blockquote><pre>\n  * Config config = new Config();\n  * config.setInstanceName(\"hz-jcache\");\n  * HazelcastInstance member = Hazelcast.newHazelcastInstance(config);\n  *\n- * System.setProperty(\"hazelcast.jcache.provider.type\", \"server\");\n+ * System.setProperty(\"hazelcast.jcache.provider.type\", \"member\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff5549bdf125b2ca8f3a7e8d3ec8294cadb5e80"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwMTM1Ng==", "bodyText": "\"server\" still works, see https://github.com/hazelcast/hazelcast/pull/17320/files#diff-0041c466c89dab74d5d3d0ade5b97e63R56 and https://github.com/hazelcast/hazelcast/pull/17320/files#diff-0041c466c89dab74d5d3d0ade5b97e63R200", "url": "https://github.com/hazelcast/hazelcast/pull/17320#discussion_r466901356", "createdAt": "2020-08-07T08:33:39Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/HazelcastCachingProvider.java", "diffHunk": "@@ -106,15 +108,15 @@\n  * <h3>Examples</h3>\n  * <p><b>Obtain a member-side caching provider backed by an existing HazelcastInstance.</b>\n  * In this example the member-side caching provider is selected by setting the value of\n- * system property {@code hazelcast.jcache.provider.type} to value \"{@code server}\". An existing\n+ * system property {@code hazelcast.jcache.provider.type} to value \"{@code member}\". An existing\n  * {@code HazelcastInstance} is referenced by instance name in the {@code Properties} provided as\n  * argument to {@link CachingProvider#getCacheManager(URI, ClassLoader, Properties)}.\n  * <blockquote><pre>\n  * Config config = new Config();\n  * config.setInstanceName(\"hz-jcache\");\n  * HazelcastInstance member = Hazelcast.newHazelcastInstance(config);\n  *\n- * System.setProperty(\"hazelcast.jcache.provider.type\", \"server\");\n+ * System.setProperty(\"hazelcast.jcache.provider.type\", \"member\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5OTAyMw=="}, "originalCommit": {"oid": "7ff5549bdf125b2ca8f3a7e8d3ec8294cadb5e80"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 274, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}