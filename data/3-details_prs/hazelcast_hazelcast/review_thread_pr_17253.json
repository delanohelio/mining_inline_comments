{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTY3Mzcx", "number": 17253, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzowNDowN1rOEZCV1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNzozOFrOEcD2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njg4MjE0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientDynamicClusterConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzowNDowN1rOHBn3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxM1rOHDKllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MzcwOQ==", "bodyText": "Leftover TODOs?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r471463709", "createdAt": "2020-08-17T13:04:07Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientDynamicClusterConfig.java", "diffHunk": "@@ -288,6 +288,7 @@ public Config addExecutorConfig(ExecutorConfig executorConfig) {\n         return this;\n     }\n \n+    // TODO stats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNDk3OA==", "bodyText": "Realised it's about the client protocol. Can you add it regardless?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473014978", "createdAt": "2020-08-19T13:08:05Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientDynamicClusterConfig.java", "diffHunk": "@@ -288,6 +288,7 @@ public Config addExecutorConfig(ExecutorConfig executorConfig) {\n         return this;\n     }\n \n+    // TODO stats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MzcwOQ=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTIzOA==", "bodyText": "will address in a later PR.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473081238", "createdAt": "2020-08-19T14:39:13Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientDynamicClusterConfig.java", "diffHunk": "@@ -288,6 +288,7 @@ public Config addExecutorConfig(ExecutorConfig executorConfig) {\n         return this;\n     }\n \n+    // TODO stats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MzcwOQ=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjY3NDUxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoxMDozN1rOHDGo_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxNlrOHDKltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNjU3Mw==", "bodyText": "Better use something like Returns {@code true} if. Maybe you can omit the @return then if they will be the same.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473016573", "createdAt": "2020-08-19T13:10:37Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -182,13 +187,36 @@ public DurableExecutorConfig setSplitBrainProtectionName(String splitBrainProtec\n         return this;\n     }\n \n+    /**\n+     * Gets if statistics gathering is enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTI2OA==", "bodyText": "fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473081268", "createdAt": "2020-08-19T14:39:16Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -182,13 +187,36 @@ public DurableExecutorConfig setSplitBrainProtectionName(String splitBrainProtec\n         return this;\n     }\n \n+    /**\n+     * Gets if statistics gathering is enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNjU3Mw=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjY4MDc4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/ScheduledExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoxMjoxMVrOHDGs4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxOVrOHDKl5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNzU3MA==", "bodyText": "Same comment as in other config", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473017570", "createdAt": "2020-08-19T13:12:11Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/ScheduledExecutorConfig.java", "diffHunk": "@@ -248,6 +261,29 @@ public ScheduledExecutorConfig setMergePolicyConfig(MergePolicyConfig mergePolic\n         return this;\n     }\n \n+    /**\n+     * Gets if statistics gathering is enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTMxNg==", "bodyText": "fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473081316", "createdAt": "2020-08-19T14:39:19Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/config/ScheduledExecutorConfig.java", "diffHunk": "@@ -248,6 +261,29 @@ public ScheduledExecutorConfig setMergePolicyConfig(MergePolicyConfig mergePolic\n         return this;\n     }\n \n+    /**\n+     * Gets if statistics gathering is enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNzU3MA=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjcwNDIxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoxNzowM1rOHDG6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToyMVrOHDKmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyMTEyNQ==", "bodyText": "I see we're missing this config in other places like XSD, YAML, XML and spring config (https://github.com/hazelcast/hazelcast/wiki/Checklist-for-Hazelcast-config-changes). Can you add it?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473021125", "createdAt": "2020-08-19T13:17:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -57,6 +60,8 @@\n \n     private String splitBrainProtectionName;\n \n+    private boolean statisticsEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTM1Mg==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473081352", "createdAt": "2020-08-19T14:39:21Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -57,6 +60,8 @@\n \n     private String splitBrainProtectionName;\n \n+    private boolean statisticsEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyMTEyNQ=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc1NzUxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoyOToyMlrOHDHb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMjo1OFrOHFgGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyOTU4Ng==", "bodyText": "Should this be under executors instead? I see other internal executors like executor.durable.internal.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473029586", "createdAt": "2020-08-19T13:29:22Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -199,6 +207,7 @@\n     public static final String MAP_PREFIX = \"map\";\n     public static final String MAP_PREFIX_INDEX = \"map.index\";\n     public static final String MAP_PREFIX_NEARCACHE = \"map.nearcache\";\n+    public static final String MAP_PREFIX_ENTRY_PROCESSOR_OFFLOADABLE_EXECUTOR = \"map.entry.processor.offloadable.executor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjIwMA==", "bodyText": "Statistics collection for that is enabled/disabled per map, this was the reason i did it like this. WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473082200", "createdAt": "2020-08-19T14:40:31Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -199,6 +207,7 @@\n     public static final String MAP_PREFIX = \"map\";\n     public static final String MAP_PREFIX_INDEX = \"map.index\";\n     public static final String MAP_PREFIX_NEARCACHE = \"map.nearcache\";\n+    public static final String MAP_PREFIX_ENTRY_PROCESSOR_OFFLOADABLE_EXECUTOR = \"map.entry.processor.offloadable.executor\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyOTU4Ng=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMDc3Mw==", "bodyText": "Ok, let's keep it here but maybe just change it to map.entryprocessor.offloadable.executor or change it even to map.offloadable.executor because:\n\u2022 we have other prefixes that don't separate words with dots (e.g. nearcache)\n\u2022 maybe we will use that executor for other tasks so we can remove mention of EP", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475530773", "createdAt": "2020-08-24T11:22:58Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -199,6 +207,7 @@\n     public static final String MAP_PREFIX = \"map\";\n     public static final String MAP_PREFIX_INDEX = \"map.index\";\n     public static final String MAP_PREFIX_NEARCACHE = \"map.nearcache\";\n+    public static final String MAP_PREFIX_ENTRY_PROCESSOR_OFFLOADABLE_EXECUTOR = \"map.entry.processor.offloadable.executor\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyOTU4Ng=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc2NDcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ExecutorStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMTowMlrOHDHgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MDozNlrOHDKpoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMDcyMQ==", "bodyText": "Can you add javadoc on the class and methods for future maintenance?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473030721", "createdAt": "2020-08-19T13:31:02Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ExecutorStats.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.internal.monitor.impl.LocalExecutorStatsImpl;\n+import com.hazelcast.internal.util.ConcurrencyUtil;\n+import com.hazelcast.internal.util.ConstructorFunction;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public final class ExecutorStats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjI3Mg==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r473082272", "createdAt": "2020-08-19T14:40:36Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ExecutorStats.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.internal.monitor.impl.LocalExecutorStatsImpl;\n+import com.hazelcast.internal.util.ConcurrencyUtil;\n+import com.hazelcast.internal.util.ConstructorFunction;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public final class ExecutorStats {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMDcyMQ=="}, "originalCommit": {"oid": "9e6e440613849ccb7ebaaf7e8b87128ff0a80414"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjcyMTQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoxNTo1MVrOHFd22Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDozMVrOHFtG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NDEwNQ==", "bodyText": "Missing changes in ConfigXmlGenerator, ConfigXmlGeneratorTest and ConfigCompatibilityChecker, same for other config.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475494105", "createdAt": "2020-08-24T10:15:51Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -57,28 +60,32 @@\n \n     private String splitBrainProtectionName;\n \n+    private boolean statisticsEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0Mzk3NQ==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743975", "createdAt": "2020-08-24T16:34:31Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/config/DurableExecutorConfig.java", "diffHunk": "@@ -57,28 +60,32 @@\n \n     private String splitBrainProtectionName;\n \n+    private boolean statisticsEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NDEwNQ=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjczMDIwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-default.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoxODoyN1rOHFd7yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoyOVrOHFtGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NTM3MA==", "bodyText": "Can you add the default for the statistics here and in the YAML file?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475495370", "createdAt": "2020-08-24T10:18:27Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzkzOQ==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743939", "createdAt": "2020-08-24T16:34:29Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NTM3MA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg1MDMzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddDurableExecutorConfigMessageTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo0OToxMVrOHFfHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzoyNlrOHGRVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDgyNw==", "bodyText": "Minor: I know that the default values for newly added booleans are false by default, hence statisticsEnabled can be used like this but I think it would be better if we don't rely on this fact and use something like parameters.isStatisticsEnabledExists && parameters.statisticsEnabled", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475514827", "createdAt": "2020-08-24T10:49:11Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddDurableExecutorConfigMessageTask.java", "diffHunk": "@@ -44,7 +44,7 @@ protected ClientMessage encodeResponse(Object response) {\n     @Override\n     protected IdentifiedDataSerializable getConfig() {\n         DurableExecutorConfig config = new DurableExecutorConfig(parameters.name, parameters.poolSize,\n-                parameters.durability, parameters.capacity);\n+                parameters.durability, parameters.capacity, parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzY5OA==", "bodyText": "Default value is true. But i wonder in what scenario client doesn't send statisticsEnabled to server?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743698", "createdAt": "2020-08-24T16:34:18Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddDurableExecutorConfigMessageTask.java", "diffHunk": "@@ -44,7 +44,7 @@ protected ClientMessage encodeResponse(Object response) {\n     @Override\n     protected IdentifiedDataSerializable getConfig() {\n         DurableExecutorConfig config = new DurableExecutorConfig(parameters.name, parameters.poolSize,\n-                parameters.durability, parameters.capacity);\n+                parameters.durability, parameters.capacity, parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDgyNw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyMzUxOQ==", "bodyText": "isStatisticsEnabledExists will be false for old clients (v4.0 series)(statisticsEnabled will have the default value for its type in this case, but I think we shouldn't rely on this fact and consider statisticsEnabled as something undefined) and will be true otherwise. (>=v4.1). statisticsEnabled will only have a valid value when the isStatisticsEnabledExists is true.\nSo, if we want to also enable statistics when the v4.0 client adds an executor config, something like !parameters.isStatisticsEnabledExists || parameters.statisticsEnabled would be enough. I initially thought that we would disable statistics when the old client adds an executor config. If that is the case, the snippet in my first comment would work.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476323519", "createdAt": "2020-08-25T09:48:56Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddDurableExecutorConfigMessageTask.java", "diffHunk": "@@ -44,7 +44,7 @@ protected ClientMessage encodeResponse(Object response) {\n     @Override\n     protected IdentifiedDataSerializable getConfig() {\n         DurableExecutorConfig config = new DurableExecutorConfig(parameters.name, parameters.poolSize,\n-                parameters.durability, parameters.capacity);\n+                parameters.durability, parameters.capacity, parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDgyNw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzQ2Mg==", "bodyText": "Thanks for the explanation. It should have been fixed now.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476337462", "createdAt": "2020-08-25T10:13:26Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddDurableExecutorConfigMessageTask.java", "diffHunk": "@@ -44,7 +44,7 @@ protected ClientMessage encodeResponse(Object response) {\n     @Override\n     protected IdentifiedDataSerializable getConfig() {\n         DurableExecutorConfig config = new DurableExecutorConfig(parameters.name, parameters.poolSize,\n-                parameters.durability, parameters.capacity);\n+                parameters.durability, parameters.capacity, parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDgyNw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg1MTk5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddScheduledExecutorConfigMessageTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo0OTozOVrOHFfIqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMjo1NFrOHGRUFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTA1MA==", "bodyText": "Same comment as the AddDurableExecutorConfigMessageTask", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475515050", "createdAt": "2020-08-24T10:49:39Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddScheduledExecutorConfigMessageTask.java", "diffHunk": "@@ -49,6 +49,7 @@ protected IdentifiedDataSerializable getConfig() {\n         config.setDurability(parameters.durability);\n         config.setCapacity(parameters.capacity);\n         config.setName(parameters.name);\n+        config.setStatisticsEnabled(parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzE3NQ==", "bodyText": "fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476337175", "createdAt": "2020-08-25T10:12:54Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/dynamicconfig/AddScheduledExecutorConfigMessageTask.java", "diffHunk": "@@ -49,6 +49,7 @@ protected IdentifiedDataSerializable getConfig() {\n         config.setDurability(parameters.durability);\n         config.setCapacity(parameters.capacity);\n         config.setName(parameters.name);\n+        config.setStatisticsEnabled(parameters.statisticsEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTA1MA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg4NjU4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMDozOFrOHFfdbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoyOFrOHFtGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDM2Ng==", "bodyText": "Will this wrap the exception? Do we have tests for this case?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475520366", "createdAt": "2020-08-24T11:00:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "diffHunk": "@@ -17,49 +17,81 @@\n package com.hazelcast.durableexecutor.impl;\n \n import com.hazelcast.durableexecutor.impl.operations.PutResultOperation;\n+import com.hazelcast.internal.util.Clock;\n+import com.hazelcast.internal.util.ExceptionUtil;\n import com.hazelcast.logging.ILogger;\n+import com.hazelcast.map.impl.ExecutorStats;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n import com.hazelcast.spi.impl.executionservice.ExecutionService;\n import com.hazelcast.spi.impl.operationservice.Operation;\n import com.hazelcast.spi.impl.operationservice.OperationService;\n \n import java.util.concurrent.Callable;\n import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n \n import static com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.SERVICE_NAME;\n \n public class DurableExecutorContainer {\n \n-    private final String name;\n-\n-    private final NodeEngineImpl nodeEngine;\n-\n-    private final ExecutionService executionService;\n-\n-    private final ILogger logger;\n-\n-    private final int partitionId;\n-\n     private final int durability;\n+    private final int partitionId;\n+    private final boolean statisticsEnabled;\n \n+    private final String name;\n+    private final ILogger logger;\n     private final TaskRingBuffer ringBuffer;\n+    private final NodeEngineImpl nodeEngine;\n+    private final ExecutorStats executorStats;\n+    private final ExecutionService executionService;\n \n     public DurableExecutorContainer(NodeEngineImpl nodeEngine, String name, int partitionId,\n-                                    int durability, TaskRingBuffer ringBuffer) {\n+                                    int durability, boolean statisticsEnabled, TaskRingBuffer ringBuffer) {\n         this.name = name;\n         this.nodeEngine = nodeEngine;\n         this.executionService = nodeEngine.getExecutionService();\n         this.partitionId = partitionId;\n         this.logger = nodeEngine.getLogger(DurableExecutorContainer.class);\n         this.durability = durability;\n         this.ringBuffer = ringBuffer;\n+        this.statisticsEnabled = statisticsEnabled;\n+        this.executorStats = ((DistributedDurableExecutorService) nodeEngine.getService(SERVICE_NAME)).getExecutorStats();\n     }\n \n     public int execute(Callable callable) {\n-        int sequence = ringBuffer.add(callable);\n-        TaskProcessor processor = new TaskProcessor(sequence, callable);\n-        executionService.executeDurable(name, processor);\n-        return sequence;\n+        try {\n+            int sequence = ringBuffer.add(callable);\n+            TaskProcessor processor = new TaskProcessor(sequence, callable);\n+            executionService.executeDurable(name, processor);\n+            return sequence;\n+        } catch (RejectedExecutionException e) {\n+            if (statisticsEnabled) {\n+                executorStats.rejectExecution(name);\n+            }\n+            throw ExceptionUtil.rethrow(e);\n+        }\n+    }\n+\n+    void executeAll() {\n+        try {\n+            TaskRingBuffer.DurableIterator iterator = ringBuffer.iterator();\n+            while (iterator.hasNext()) {\n+                Object item = iterator.next();\n+                boolean isCallable = iterator.isTask();\n+                if (!isCallable) {\n+                    continue;\n+                }\n+                Callable callable = (Callable) item;\n+                int sequence = iterator.getSequence();\n+                TaskProcessor processor = new TaskProcessor(sequence, callable);\n+                executionService.executeDurable(name, processor);\n+            }\n+        } catch (RejectedExecutionException e) {\n+            if (statisticsEnabled) {\n+                executorStats.rejectExecution(name);\n+            }\n+            throw ExceptionUtil.rethrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzkxNQ==", "bodyText": "removed wrapping.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743915", "createdAt": "2020-08-24T16:34:28Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "diffHunk": "@@ -17,49 +17,81 @@\n package com.hazelcast.durableexecutor.impl;\n \n import com.hazelcast.durableexecutor.impl.operations.PutResultOperation;\n+import com.hazelcast.internal.util.Clock;\n+import com.hazelcast.internal.util.ExceptionUtil;\n import com.hazelcast.logging.ILogger;\n+import com.hazelcast.map.impl.ExecutorStats;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n import com.hazelcast.spi.impl.executionservice.ExecutionService;\n import com.hazelcast.spi.impl.operationservice.Operation;\n import com.hazelcast.spi.impl.operationservice.OperationService;\n \n import java.util.concurrent.Callable;\n import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RejectedExecutionException;\n \n import static com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService.SERVICE_NAME;\n \n public class DurableExecutorContainer {\n \n-    private final String name;\n-\n-    private final NodeEngineImpl nodeEngine;\n-\n-    private final ExecutionService executionService;\n-\n-    private final ILogger logger;\n-\n-    private final int partitionId;\n-\n     private final int durability;\n+    private final int partitionId;\n+    private final boolean statisticsEnabled;\n \n+    private final String name;\n+    private final ILogger logger;\n     private final TaskRingBuffer ringBuffer;\n+    private final NodeEngineImpl nodeEngine;\n+    private final ExecutorStats executorStats;\n+    private final ExecutionService executionService;\n \n     public DurableExecutorContainer(NodeEngineImpl nodeEngine, String name, int partitionId,\n-                                    int durability, TaskRingBuffer ringBuffer) {\n+                                    int durability, boolean statisticsEnabled, TaskRingBuffer ringBuffer) {\n         this.name = name;\n         this.nodeEngine = nodeEngine;\n         this.executionService = nodeEngine.getExecutionService();\n         this.partitionId = partitionId;\n         this.logger = nodeEngine.getLogger(DurableExecutorContainer.class);\n         this.durability = durability;\n         this.ringBuffer = ringBuffer;\n+        this.statisticsEnabled = statisticsEnabled;\n+        this.executorStats = ((DistributedDurableExecutorService) nodeEngine.getService(SERVICE_NAME)).getExecutorStats();\n     }\n \n     public int execute(Callable callable) {\n-        int sequence = ringBuffer.add(callable);\n-        TaskProcessor processor = new TaskProcessor(sequence, callable);\n-        executionService.executeDurable(name, processor);\n-        return sequence;\n+        try {\n+            int sequence = ringBuffer.add(callable);\n+            TaskProcessor processor = new TaskProcessor(sequence, callable);\n+            executionService.executeDurable(name, processor);\n+            return sequence;\n+        } catch (RejectedExecutionException e) {\n+            if (statisticsEnabled) {\n+                executorStats.rejectExecution(name);\n+            }\n+            throw ExceptionUtil.rethrow(e);\n+        }\n+    }\n+\n+    void executeAll() {\n+        try {\n+            TaskRingBuffer.DurableIterator iterator = ringBuffer.iterator();\n+            while (iterator.hasNext()) {\n+                Object item = iterator.next();\n+                boolean isCallable = iterator.isTask();\n+                if (!isCallable) {\n+                    continue;\n+                }\n+                Callable callable = (Callable) item;\n+                int sequence = iterator.getSequence();\n+                TaskProcessor processor = new TaskProcessor(sequence, callable);\n+                executionService.executeDurable(name, processor);\n+            }\n+        } catch (RejectedExecutionException e) {\n+            if (statisticsEnabled) {\n+                executorStats.rejectExecution(name);\n+            }\n+            throw ExceptionUtil.rethrow(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDM2Ng=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg4ODY3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMToxOVrOHFfeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoyNVrOHFtGaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDY5OQ==", "bodyText": "Does the \"execution time\" include the queueing time in all of the uses of the executor stats?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475520699", "createdAt": "2020-08-24T11:01:19Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "diffHunk": "@@ -138,6 +166,9 @@ public void run() {\n             } finally {\n                 if (!isCancelled()) {\n                     setResponse(response);\n+                    if (statisticsEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0Mzg0OQ==", "bodyText": "No, it's meaning is aligned with executor service and it is the execution time in thread without queueing time.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743849", "createdAt": "2020-08-24T16:34:25Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorContainer.java", "diffHunk": "@@ -138,6 +166,9 @@ public void run() {\n             } finally {\n                 if (!isCancelled()) {\n                     setResponse(response);\n+                    if (statisticsEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDY5OQ=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkxMjAwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowOToxMVrOHFfs0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoyM1rOHFtGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDMwNA==", "bodyText": "Minor: I see none of the other names of the keys have With in them.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475524304", "createdAt": "2020-08-24T11:09:11Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -302,6 +312,8 @@ public JsonObject toJson() {\n         serializeAsMap(root, \"reliableTopicStats\", reliableTopicsWithStats);\n         serializeAsMap(root, \"pnCounterStats\", pnCountersWithStats);\n         serializeAsMap(root, \"executorStats\", executorsWithStats);\n+        serializeAsMap(root, \"scheduledExecutorsWithStats\", scheduledExecutorsWithStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0Mzc4Mw==", "bodyText": "removed with", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743783", "createdAt": "2020-08-24T16:34:23Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -302,6 +312,8 @@ public JsonObject toJson() {\n         serializeAsMap(root, \"reliableTopicStats\", reliableTopicsWithStats);\n         serializeAsMap(root, \"pnCounterStats\", pnCountersWithStats);\n         serializeAsMap(root, \"executorStats\", executorsWithStats);\n+        serializeAsMap(root, \"scheduledExecutorsWithStats\", scheduledExecutorsWithStats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDMwNA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkxNTIyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxMDoxNlrOHFfuxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoyMVrOHFtGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDgwNA==", "bodyText": "Again, can this wrap the exception that was previously not wrapped?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475524804", "createdAt": "2020-08-24T11:10:16Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperation.java", "diffHunk": "@@ -407,6 +411,22 @@ private void executeMutatingEntryProcessor(final Object oldValue, String executo\n             }\n         }\n \n+        private void doExecute(String executorName, Runnable runnable) {\n+            boolean statisticsEnabled = mapContainer.getMapConfig().isStatisticsEnabled();\n+            ExecutorStats executorStats = mapServiceContext.getOffloadedEntryProcessorExecutorStats();\n+            try {\n+                Runnable command = statisticsEnabled\n+                        ? new StatsAwareRunnable(runnable, executorName, executorStats) : runnable;\n+                executionService.execute(executorName, command);\n+            } catch (RejectedExecutionException e) {\n+                if (statisticsEnabled) {\n+                    executorStats.rejectExecution(executorName);\n+                }\n+\n+                throw ExceptionUtil.rethrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0Mzc0NQ==", "bodyText": "removed wrapping.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743745", "createdAt": "2020-08-24T16:34:21Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOperation.java", "diffHunk": "@@ -407,6 +411,22 @@ private void executeMutatingEntryProcessor(final Object oldValue, String executo\n             }\n         }\n \n+        private void doExecute(String executorName, Runnable runnable) {\n+            boolean statisticsEnabled = mapContainer.getMapConfig().isStatisticsEnabled();\n+            ExecutorStats executorStats = mapServiceContext.getOffloadedEntryProcessorExecutorStats();\n+            try {\n+                Runnable command = statisticsEnabled\n+                        ? new StatsAwareRunnable(runnable, executorName, executorStats) : runnable;\n+                executionService.execute(executorName, command);\n+            } catch (RejectedExecutionException e) {\n+                if (statisticsEnabled) {\n+                    executorStats.rejectExecution(executorName);\n+                }\n+\n+                throw ExceptionUtil.rethrow(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDgwNA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkxNzM2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToxMTowM1rOHFfwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDoxMlrOHFtFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTE2Mg==", "bodyText": "Minor: Would it be better to rename those as scheduledExecutorStats and durableExecutorStats to be consistent with others?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475525162", "createdAt": "2020-08-24T11:11:03Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -302,6 +312,8 @@ public JsonObject toJson() {\n         serializeAsMap(root, \"reliableTopicStats\", reliableTopicsWithStats);\n         serializeAsMap(root, \"pnCounterStats\", pnCountersWithStats);\n         serializeAsMap(root, \"executorStats\", executorsWithStats);\n+        serializeAsMap(root, \"scheduledExecutorsWithStats\", scheduledExecutorsWithStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzU1Mw==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743553", "createdAt": "2020-08-24T16:34:12Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -302,6 +312,8 @@ public JsonObject toJson() {\n         serializeAsMap(root, \"reliableTopicStats\", reliableTopicsWithStats);\n         serializeAsMap(root, \"pnCounterStats\", pnCountersWithStats);\n         serializeAsMap(root, \"executorStats\", executorsWithStats);\n+        serializeAsMap(root, \"scheduledExecutorsWithStats\", scheduledExecutorsWithStats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTE2Mg=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk2ODUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyNzo0NVrOHFgOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyNzo0NVrOHFgOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMjkzMg==", "bodyText": "Minor: Maybe we could rename nearCacheDescriptor to something else?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475532932", "createdAt": "2020-08-24T11:27:45Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapService.java", "diffHunk": "@@ -321,6 +323,19 @@ public void provideDynamicMetrics(MetricDescriptor descriptor, MetricsCollection\n                         .withDiscriminator(MAP_DISCRIMINATOR_NAME, mapName);\n                 context.collect(nearCacheDescriptor, nearCacheStats);\n             }\n+\n+        }\n+        // stats of offloaded-entry-processor's executor\n+        ExecutorStats executorStats = mapServiceContext.getOffloadedEntryProcessorExecutorStats();\n+        if (executorStats.hasStats()) {\n+            Iterable<? extends Map.Entry<String, LocalExecutorStatsImpl>> entries = executorStats.entrySet();\n+            for (Map.Entry<String, LocalExecutorStatsImpl> entry : entries) {\n+                MetricDescriptor nearCacheDescriptor = descriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjk5MjE1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNDoyM1rOHFgcmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMjo0MlrOHGRTsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjUzOA==", "bodyText": "Missing value for the statistics-enabled for this and executor-service. Also, I couldn't find an entry for the durable-executor-service in this file. Maybe we could add those", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475536538", "createdAt": "2020-08-24T11:34:23Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -108,6 +108,12 @@ hazelcast:\n       # Queue capacity. 0 means Integer.MAX_VALUE.\n       queue-capacity: 0\n \n+  scheduled-executor-service:\n+    default:\n+      capacity: 100\n+      durability: 1\n+      pool-size: 16\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzQzMQ==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743431", "createdAt": "2020-08-24T16:34:07Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -108,6 +108,12 @@ hazelcast:\n       # Queue capacity. 0 means Integer.MAX_VALUE.\n       queue-capacity: 0\n \n+  scheduled-executor-service:\n+    default:\n+      capacity: 100\n+      durability: 1\n+      pool-size: 16\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjUzOA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyNTkzOQ==", "bodyText": "statistics-enabled: true is still missing for the executor-service element", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476325939", "createdAt": "2020-08-25T09:52:53Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -108,6 +108,12 @@ hazelcast:\n       # Queue capacity. 0 means Integer.MAX_VALUE.\n       queue-capacity: 0\n \n+  scheduled-executor-service:\n+    default:\n+      capacity: 100\n+      durability: 1\n+      pool-size: 16\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjUzOA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzA3NA==", "bodyText": "should be fixed now.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476337074", "createdAt": "2020-08-25T10:12:42Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -108,6 +108,12 @@ hazelcast:\n       # Queue capacity. 0 means Integer.MAX_VALUE.\n       queue-capacity: 0\n \n+  scheduled-executor-service:\n+    default:\n+      capacity: 100\n+      durability: 1\n+      pool-size: 16\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjUzOA=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzAwMDA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-default.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNzowNFrOHFghZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMjowOFrOHGRSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzc2Nw==", "bodyText": "Similar comments for the hazelcast-default.yaml", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475537767", "createdAt": "2020-08-24T11:37:04Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzM1Nw==", "bodyText": "done.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743357", "createdAt": "2020-08-24T16:34:04Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzc2Nw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyNjgxNA==", "bodyText": "<statistics-enabled>true</statistics-enabled> is missing fot the <executor-service name=\"default\">", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476326814", "createdAt": "2020-08-25T09:54:27Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzc2Nw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNjc2MA==", "bodyText": "i hope it is fixed now.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476336760", "createdAt": "2020-08-25T10:12:08Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/resources/hazelcast-default.xml", "diffHunk": "@@ -116,6 +116,12 @@\n         <!--Queue capacity. 0 means Integer.MAX_VALUE.-->\n         <queue-capacity>0</queue-capacity>\n     </executor-service>\n+    <scheduled-executor-service name=\"default\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzc2Nw=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzIwNTc3OnYy", "diffSide": "RIGHT", "path": "docs/design/executors/01-executor-service-stats.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MTowMFrOHFic1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDowMlrOHFtEQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2OTM2NQ==", "bodyText": "By the way, if I am not missing something, the canceled task count is only incremented for ExecutorService. For these two, does this metric mean anything?", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475569365", "createdAt": "2020-08-24T12:41:00Z", "author": {"login": "mdumandag"}, "path": "docs/design/executors/01-executor-service-stats.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Scheduled and Durable Executor Service Statistics\n+\n+|\u2139\ufe0f Since: 4.1|\n+|-------------|\n+\n+## Background\n+\n+### Description\n+\n+Hazelcast has 3 different executor service implementations exposed with \n+public api. These three different types of executor services are called\n+as executor service, scheduled executor service and durable executor \n+service. Only executor type which has statistics available \n+among these is executor service. Statistics collection is not done for \n+scheduled and durable ones.\n+\n+\n+## Design\n+\n+In this design, we make same statistics with executor service available \n+for the other executor types. These statistics are only available for\n+monitoring from management center. The statistics we have currently is \n+represented with class `LocalExecutorStats`.\n+\n+```\n+public interface LocalExecutorStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the number of pending operations on the executor service.\n+     *\n+     * @return the number of pending operations on the executor service\n+     */\n+    long getPendingTaskCount();\n+\n+    /**\n+     * Returns the number of started operations on the executor service.\n+     *\n+     * @return the number of started operations on the executor service\n+     */\n+    long getStartedTaskCount();\n+\n+    /**\n+     * Returns the number of completed operations on the executor service.\n+     *\n+     * @return the number of completed operations on the executor service\n+     */\n+    long getCompletedTaskCount();\n+\n+    /**\n+     * Returns the number of cancelled operations on the executor service.\n+     *\n+     * @return the number of cancelled operations on the executor service\n+     */\n+    long getCancelledTaskCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MzI5OQ==", "bodyText": "good catch, i have added it to scheduled one, not sure about durable one leaving it as TODO for now.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r475743299", "createdAt": "2020-08-24T16:34:02Z", "author": {"login": "ahmetmircik"}, "path": "docs/design/executors/01-executor-service-stats.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Scheduled and Durable Executor Service Statistics\n+\n+|\u2139\ufe0f Since: 4.1|\n+|-------------|\n+\n+## Background\n+\n+### Description\n+\n+Hazelcast has 3 different executor service implementations exposed with \n+public api. These three different types of executor services are called\n+as executor service, scheduled executor service and durable executor \n+service. Only executor type which has statistics available \n+among these is executor service. Statistics collection is not done for \n+scheduled and durable ones.\n+\n+\n+## Design\n+\n+In this design, we make same statistics with executor service available \n+for the other executor types. These statistics are only available for\n+monitoring from management center. The statistics we have currently is \n+represented with class `LocalExecutorStats`.\n+\n+```\n+public interface LocalExecutorStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the number of pending operations on the executor service.\n+     *\n+     * @return the number of pending operations on the executor service\n+     */\n+    long getPendingTaskCount();\n+\n+    /**\n+     * Returns the number of started operations on the executor service.\n+     *\n+     * @return the number of started operations on the executor service\n+     */\n+    long getStartedTaskCount();\n+\n+    /**\n+     * Returns the number of completed operations on the executor service.\n+     *\n+     * @return the number of completed operations on the executor service\n+     */\n+    long getCompletedTaskCount();\n+\n+    /**\n+     * Returns the number of cancelled operations on the executor service.\n+     *\n+     * @return the number of cancelled operations on the executor service\n+     */\n+    long getCancelledTaskCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2OTM2NQ=="}, "originalCommit": {"oid": "abb233f88b7773280640326186c58e889871ded5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODQzMjU1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorServiceProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjoyOTowM1rOHGVu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyNzo1OFrOHGaz1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwOTU4MA==", "bodyText": "IMHO TODO's rarely get fixed (check out how many we already have). Either add the stats, or open a GH issue, or just conclude it's not worth the hassle and remove the TODO.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476409580", "createdAt": "2020-08-25T12:29:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorServiceProxy.java", "diffHunk": "@@ -277,6 +271,7 @@ protected void throwNotActiveException() {\n             InternalCompletableFuture<T> completedFuture = completedExceptionally(t.getCause());\n             return new DurableExecutorServiceDelegateFuture<T>(completedFuture, serializationService, null, -1);\n         } catch (CancellationException e) {\n+            // TODO add cancellation stats?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a9be2d1e9453e8a1d42518b8c424f6bcd6d587"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Mjc1Ng==", "bodyText": "Removed TODO. I have learned cancellation is not supported for durable executor. Added this to TDD.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476492756", "createdAt": "2020-08-25T14:27:58Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/durableexecutor/impl/DurableExecutorServiceProxy.java", "diffHunk": "@@ -277,6 +271,7 @@ protected void throwNotActiveException() {\n             InternalCompletableFuture<T> completedFuture = completedExceptionally(t.getCause());\n             return new DurableExecutorServiceDelegateFuture<T>(completedFuture, serializationService, null, -1);\n         } catch (CancellationException e) {\n+            // TODO add cancellation stats?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwOTU4MA=="}, "originalCommit": {"oid": "a4a9be2d1e9453e8a1d42518b8c424f6bcd6d587"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODU1MTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo1ODo0MFrOHGW3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1Nzo1MFrOHGZZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyODIwNw==", "bodyText": "Remove With", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476428207", "createdAt": "2020-08-25T12:58:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -495,6 +515,8 @@ public String toString() {\n                 + \", reliableTopicsWithStats=\" + reliableTopicsWithStats\n                 + \", pnCountersWithStats=\" + pnCountersWithStats\n                 + \", executorsWithStats=\" + executorsWithStats\n+                + \", scheduledExecutorsWithStats=\" + scheduledExecutorsWithStats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1e6eff8768c255028a0cb2a9ef346ab0961d12"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2OTUwNw==", "bodyText": "kept it aligned with others.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476469507", "createdAt": "2020-08-25T13:57:50Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -495,6 +515,8 @@ public String toString() {\n                 + \", reliableTopicsWithStats=\" + reliableTopicsWithStats\n                 + \", pnCountersWithStats=\" + pnCountersWithStats\n                 + \", executorsWithStats=\" + executorsWithStats\n+                + \", scheduledExecutorsWithStats=\" + scheduledExecutorsWithStats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyODIwNw=="}, "originalCommit": {"oid": "fa1e6eff8768c255028a0cb2a9ef346ab0961d12"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODU4NzQ0OnYy", "diffSide": "RIGHT", "path": "docs/design/executors/02-offloaded-entry-processor-executor-stats.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzowNzozOFrOHGXNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1Nzo1M1rOHGZZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzg0OQ==", "bodyText": "Update these lines if you update the metric name.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476433849", "createdAt": "2020-08-25T13:07:38Z", "author": {"login": "mmedenjak"}, "path": "docs/design/executors/02-offloaded-entry-processor-executor-stats.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Offloaded Entry Processor Executor Statistics\n+\n+|\u2139\ufe0f Since: 4.1|\n+|-------------|\n+\n+## Background\n+\n+### Description\n+\n+Offloaded entry processors are not executed by regular operation threads.\n+As its name suggests, they offloaded to a different pool of threads and \n+executed by them. But the executor of these offloaded entry processors\n+has no statistics available.\n+\n+\n+## Design\n+\n+In this design, we collect statistics for offloaded entry processor executors. \n+We use same `LocalExecutorStats` with other executors in Hazelcast.\n+\n+```\n+public interface LocalExecutorStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the number of pending operations on the executor service.\n+     *\n+     * @return the number of pending operations on the executor service\n+     */\n+    long getPendingTaskCount();\n+\n+    /**\n+     * Returns the number of started operations on the executor service.\n+     *\n+     * @return the number of started operations on the executor service\n+     */\n+    long getStartedTaskCount();\n+\n+    /**\n+     * Returns the number of completed operations on the executor service.\n+     *\n+     * @return the number of completed operations on the executor service\n+     */\n+    long getCompletedTaskCount();\n+\n+    /**\n+     * Returns the number of cancelled operations on the executor service.\n+     *\n+     * @return the number of cancelled operations on the executor service\n+     */\n+    long getCancelledTaskCount();\n+\n+    /**\n+     * Returns the total start latency of operations started.\n+     *\n+     * @return the total start latency of operations started\n+     */\n+    long getTotalStartLatency();\n+\n+    /**\n+     * Returns the total execution time of operations finished.\n+     *\n+     * @return the total execution time of operations finished\n+     */\n+    long getTotalExecutionLatency();\n+}\n+```\n+\n+On submit of each offloadable entry processor, we start to collect the statistics and\n+with metrics subsystem, we made these available to management center.\n+In `MapService` we have `DynamicMetricsProvider` interface implementation\n+and offloaded executor stats are added there too. Statistics are available by default,\n+they can be disabled via `MapConfig`.\n+ \n+### Metrics Prefixes\n+`map.entry.processor.offloadable.executor` prefix is used for offloaded executor.\n+\n+### Example Output\n+```\n+[name=STATS_OFFLOADED_EXECUTOR,unit=ms,metric=map.entry.processor.offloadable.executor.creationTime]=1598017099308", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1e6eff8768c255028a0cb2a9ef346ab0961d12"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2OTU0OQ==", "bodyText": "Left it as is.", "url": "https://github.com/hazelcast/hazelcast/pull/17253#discussion_r476469549", "createdAt": "2020-08-25T13:57:53Z", "author": {"login": "ahmetmircik"}, "path": "docs/design/executors/02-offloaded-entry-processor-executor-stats.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Offloaded Entry Processor Executor Statistics\n+\n+|\u2139\ufe0f Since: 4.1|\n+|-------------|\n+\n+## Background\n+\n+### Description\n+\n+Offloaded entry processors are not executed by regular operation threads.\n+As its name suggests, they offloaded to a different pool of threads and \n+executed by them. But the executor of these offloaded entry processors\n+has no statistics available.\n+\n+\n+## Design\n+\n+In this design, we collect statistics for offloaded entry processor executors. \n+We use same `LocalExecutorStats` with other executors in Hazelcast.\n+\n+```\n+public interface LocalExecutorStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the number of pending operations on the executor service.\n+     *\n+     * @return the number of pending operations on the executor service\n+     */\n+    long getPendingTaskCount();\n+\n+    /**\n+     * Returns the number of started operations on the executor service.\n+     *\n+     * @return the number of started operations on the executor service\n+     */\n+    long getStartedTaskCount();\n+\n+    /**\n+     * Returns the number of completed operations on the executor service.\n+     *\n+     * @return the number of completed operations on the executor service\n+     */\n+    long getCompletedTaskCount();\n+\n+    /**\n+     * Returns the number of cancelled operations on the executor service.\n+     *\n+     * @return the number of cancelled operations on the executor service\n+     */\n+    long getCancelledTaskCount();\n+\n+    /**\n+     * Returns the total start latency of operations started.\n+     *\n+     * @return the total start latency of operations started\n+     */\n+    long getTotalStartLatency();\n+\n+    /**\n+     * Returns the total execution time of operations finished.\n+     *\n+     * @return the total execution time of operations finished\n+     */\n+    long getTotalExecutionLatency();\n+}\n+```\n+\n+On submit of each offloadable entry processor, we start to collect the statistics and\n+with metrics subsystem, we made these available to management center.\n+In `MapService` we have `DynamicMetricsProvider` interface implementation\n+and offloaded executor stats are added there too. Statistics are available by default,\n+they can be disabled via `MapConfig`.\n+ \n+### Metrics Prefixes\n+`map.entry.processor.offloadable.executor` prefix is used for offloaded executor.\n+\n+### Example Output\n+```\n+[name=STATS_OFFLOADED_EXECUTOR,unit=ms,metric=map.entry.processor.offloadable.executor.creationTime]=1598017099308", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzg0OQ=="}, "originalCommit": {"oid": "fa1e6eff8768c255028a0cb2a9ef346ab0961d12"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 495, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}