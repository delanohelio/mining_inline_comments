{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzgyMjE1", "number": 17118, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNDowMlrOEH64JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNzo1MlrOEIwIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQwMTMyOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNDowMlrOGnkOvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzozNDo0NlrOGnpg2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MTI0Ng==", "bodyText": "This check should be performed in the rule pattern, rather than the rule's body.\nAn example of how to add a custom predicate to rule patterns could be found in the ProjectIntoScanLogicalRule constructor.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444141246", "createdAt": "2020-06-23T11:04:02Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java", "diffHunk": "@@ -37,6 +39,11 @@ private MapScanLogicalRule() {\n     @Override\n     public RelNode convert(RelNode rel) {\n         LogicalTableScan scan = (LogicalTableScan) rel;\n+        HazelcastTable table = scan.getTable().unwrap(HazelcastTable.class);\n+        if (!(table.getTarget() instanceof AbstractMapTable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNzgwMQ==", "bodyText": "fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444227801", "createdAt": "2020-06-23T13:34:46Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java", "diffHunk": "@@ -37,6 +39,11 @@ private MapScanLogicalRule() {\n     @Override\n     public RelNode convert(RelNode rel) {\n         LogicalTableScan scan = (LogicalTableScan) rel;\n+        HazelcastTable table = scan.getTable().unwrap(HazelcastTable.class);\n+        if (!(table.getTarget() instanceof AbstractMapTable)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MTI0Ng=="}, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQyMDg5OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMToxMDo0N1rOGnka-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNjo0NVrOGo5zng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA==", "bodyText": "We do not pass NodeEngine for a reason - we do not want to leak internals everywhere, because it breaks decomposition and makes testing harder. Moreover, this refactoring will make merge with master harder, because PlanCreateVisitor is already in master.\nIn general, we should avoid refactorings for now unless there are strong reasons to do so, to minimize wasted work. If refactoring is needed, then it should be performed through pr -> master -> sql flow.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444144378", "createdAt": "2020-06-23T11:10:47Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -159,21 +164,33 @@\n     /** Row metadata. */\n     private SqlRowMetadata rowMetadata;\n \n+    /**\n+     * @param rootColumnNames Root column names. They are null when called from\n+     *     Jet for a sub-relNode and the row metadata aren't needed\n+     */\n     public PlanCreateVisitor(\n-        UUID localMemberId,\n-        Map<UUID, PartitionIdSet> partMap,\n+        NodeEngine nodeEngine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNzI3Nw==", "bodyText": "There are already changes to PlanCreateVisitor in sql that I needed to change, 3 arguments are added to the constructor: sql, parameterMetadata and rootColumnNames. Will these go to 4.1? If not, then I can do my change against master. If yes, then it's probably better to do them to sql.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444227277", "createdAt": "2020-06-23T13:34:02Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -159,21 +164,33 @@\n     /** Row metadata. */\n     private SqlRowMetadata rowMetadata;\n \n+    /**\n+     * @param rootColumnNames Root column names. They are null when called from\n+     *     Jet for a sub-relNode and the row metadata aren't needed\n+     */\n     public PlanCreateVisitor(\n-        UUID localMemberId,\n-        Map<UUID, PartitionIdSet> partMap,\n+        NodeEngine nodeEngine,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA=="}, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MzMyNg==", "bodyText": "sql is not really used at the moment, so it can be deleted safely from PlanCreateVisitor in the sql branch.\nRegarding, parameterMetadata and rootColumnNames, these changes will be merged to master soon as a part of public API PR.\nMy point is that changes to PlanCreateVisitor appear to be a small refactoring that doesn't change anything from the IMDG perspective. In this case, we should either avoid them altogether or make them through a master branch to minimize engineering time spent on conflict resolution.\nBut as I mentioned before, not passing NodeEngine to classes when possible was a conscious decision - we do not like such objects to leak without a strong reason, because it promotes bad class design in the longer perspective. AFAIU the reason for this change - to avoid duplication of partition map calculation. In this case, we may just move the method that calculates partition map to a separate utility method and invoke it from Jet. This way we will avoid both code duplication in Jet and NodeEngine leak.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r445543326", "createdAt": "2020-06-25T13:06:45Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -159,21 +164,33 @@\n     /** Row metadata. */\n     private SqlRowMetadata rowMetadata;\n \n+    /**\n+     * @param rootColumnNames Root column names. They are null when called from\n+     *     Jet for a sub-relNode and the row metadata aren't needed\n+     */\n     public PlanCreateVisitor(\n-        UUID localMemberId,\n-        Map<UUID, PartitionIdSet> partMap,\n+        NodeEngine nodeEngine,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA=="}, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQzMTc1OnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/row/ListRowBatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMToxNDo0OFrOGnkiLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1MDo1NVrOGnnrlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NjIyMg==", "bodyText": "What was the reason to remove this assertion?", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444146222", "createdAt": "2020-06-23T11:14:48Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/row/ListRowBatch.java", "diffHunk": "@@ -42,8 +42,6 @@ public ListRowBatch(List<Row> rows) {\n \n     @Override\n     public Row getRow(int index) {\n-        assert index >= 0 && index < rows.size() : index;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Nzc4Mg==", "bodyText": "It's superfluous, the next line does the same check anyway.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444197782", "createdAt": "2020-06-23T12:50:55Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/row/ListRowBatch.java", "diffHunk": "@@ -42,8 +42,6 @@ public ListRowBatch(List<Row> rows) {\n \n     @Override\n     public Row getRow(int index) {\n-        assert index >= 0 && index < rows.size() : index;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NjIyMg=="}, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQ0NjE4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMToxOTo1MlrOGnkrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMToxOTo1MlrOGnkrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0ODU3Mw==", "bodyText": "Previously I reverted all changes from this class related to external tables for a reason - to keep a single responsibility principle in place.\nThe goal of PartitionedMapTableResolver is to expose existing maps through a predefined schema. We should not add external fields handling here. The same is applicable to ReplicatedMapTableResolver.\nIf there are some static methods that are common for both internal and external resolvers, let's factor them out, instead of mixing unrelated concepts inside a single class.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444148573", "createdAt": "2020-06-23T11:19:52Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -101,103 +101,129 @@ public PartitionedMapTableResolver(NodeEngine nodeEngine) {\n         return res;\n     }\n \n-    // TODO: VO: Abstract out Jet stuff in a clean way.\n-    @SuppressWarnings({\"rawtypes\", \"checkstyle:MethodLength\", \"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n+    /**\n+     * @param explicitRequest True, if the table was requested explicitly\n+     *     through DDL. In this case the result is non-null and the returned\n+     *     table never contains an exception. If false, might return null or a\n+     *     table with an exception.\n+     */\n+    @Nullable\n+    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n     public static PartitionedMapTable createTable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjEyNzA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNzo1MlrOGo52ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNzo1MlrOGo52ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NDA0Mg==", "bodyText": "We may move methods from this class to MapTableUtils, because the latter was created exactly to host static helpers for metadata resolution.", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r445544042", "createdAt": "2020-06-25T13:07:52Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.map.impl.MapContainer;\n+import com.hazelcast.map.impl.MapServiceContext;\n+import com.hazelcast.map.impl.PartitionContainer;\n+import com.hazelcast.map.impl.record.Record;\n+import com.hazelcast.map.impl.recordstore.RecordStore;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.extract.QueryTargetDescriptor;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadata;\n+import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadataResolver;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class ResolverUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4b09646a50f8767356f311292eae2e69075251"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 610, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}