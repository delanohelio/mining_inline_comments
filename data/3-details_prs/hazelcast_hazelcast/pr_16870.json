{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzgwMzMz", "number": 16870, "title": "Connection manager simplification", "bodyText": "Simplified the ConnectionManager logic:\n1: Deleted AggregateEndpointManager and corresponding subclasses. Methods have been added to the Server and implementation directly on the TcpServer. On the TcpServer we already switch between the 2 different forms of logic; so instead of having part of the methods switched with an if else, and another part of the methods with AggregateEndpointManager subclasses, they now all use the same mechanism.\nApart from that the AggregateEndpointManager isn't an endpoint manager since it doesn't manage anything. So its meaning is very unclear. Adding the methods to the Server makes more sense.\n2: Flattened the whole ServerConnectionManager hierarchy. Most of these classes don't do anything useful apart from delegating. Flattening the class hierarchy makes the code easier to understand because there are less meaningless abstractions.\nFor EE see https://github.com/hazelcast/hazelcast-enterprise/pull/3585", "createdAt": "2020-04-09T11:53:56Z", "url": "https://github.com/hazelcast/hazelcast/pull/16870", "merged": true, "mergeCommit": {"oid": "dcf90c0378726e6da006e9fe9e6d77c0b8e0f66e"}, "closed": true, "closedAt": "2020-04-24T03:02:42Z", "author": {"login": "pveentjer"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV78PCgBqjMyMTgxNTMyMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaezi7AFqTM5OTIyOTMxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22e899687d6b109d2e5148b7c4df28c75e66ff51", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/22e899687d6b109d2e5148b7c4df28c75e66ff51", "committedDate": "2020-04-09T11:52:45Z", "message": "WIP"}, "afterCommit": {"oid": "3d98a75ef4848b4e3231b36a80f266b363874828", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d98a75ef4848b4e3231b36a80f266b363874828", "committedDate": "2020-04-09T12:48:22Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d98a75ef4848b4e3231b36a80f266b363874828", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d98a75ef4848b4e3231b36a80f266b363874828", "committedDate": "2020-04-09T12:48:22Z", "message": "WIP"}, "afterCommit": {"oid": "4e4f1d3b855fa6831dabc9d85b1a57265662cdae", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4e4f1d3b855fa6831dabc9d85b1a57265662cdae", "committedDate": "2020-04-10T04:21:48Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e4f1d3b855fa6831dabc9d85b1a57265662cdae", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4e4f1d3b855fa6831dabc9d85b1a57265662cdae", "committedDate": "2020-04-10T04:21:48Z", "message": "WIP"}, "afterCommit": {"oid": "6c54e5702f9fadc050f4cce8bcbb6710c9ce7681", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6c54e5702f9fadc050f4cce8bcbb6710c9ce7681", "committedDate": "2020-04-10T06:15:06Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d78dae97e9060fff0839e28aa6af8390ee9b514c", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d78dae97e9060fff0839e28aa6af8390ee9b514c", "committedDate": "2020-04-10T07:12:24Z", "message": "WIP"}, "afterCommit": {"oid": "0dd4cc5fda80c22f87d466d26e912e3fb4a82fa2", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0dd4cc5fda80c22f87d466d26e912e3fb4a82fa2", "committedDate": "2020-04-10T12:54:34Z", "message": "ConnectionManager class simplification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dd4cc5fda80c22f87d466d26e912e3fb4a82fa2", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0dd4cc5fda80c22f87d466d26e912e3fb4a82fa2", "committedDate": "2020-04-10T12:54:34Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "c016bd3e09aa182420413ff43e02da408b3d70ad", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c016bd3e09aa182420413ff43e02da408b3d70ad", "committedDate": "2020-04-14T08:48:11Z", "message": "ConnectionManager class simplification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c016bd3e09aa182420413ff43e02da408b3d70ad", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c016bd3e09aa182420413ff43e02da408b3d70ad", "committedDate": "2020-04-14T08:48:11Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/57841f20d6f831cd1e74b70f639a384a0120548b", "committedDate": "2020-04-15T12:21:11Z", "message": "ConnectionManager class simplification"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTc1MTQx", "url": "https://github.com/hazelcast/hazelcast/pull/16870#pullrequestreview-397175141", "createdAt": "2020-04-21T09:56:29Z", "commit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNDo0OVrOGI-XeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowNzoxMlrOGJHruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2MzYwOA==", "bodyText": "Is this todo meant to be addressed in this PR?", "url": "https://github.com/hazelcast/hazelcast/pull/16870#discussion_r412063608", "createdAt": "2020-04-21T10:24:49Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/Server.java", "diffHunk": "@@ -17,44 +17,51 @@\n package com.hazelcast.internal.server;\n \n import com.hazelcast.instance.EndpointQualifier;\n-import com.hazelcast.internal.server.tcp.ClientViewUnifiedEndpointManager;\n-import com.hazelcast.internal.server.tcp.MemberViewUnifiedServerConnectionManager;\n-import com.hazelcast.internal.server.tcp.TextViewUnifiedServerConnectionManager;\n+import com.hazelcast.internal.nio.ConnectionListenable;\n+\n+import java.util.Collection;\n+import java.util.Map;\n \n /**\n  * The Server is responsible for managing {@link ServerConnection} instances.\n  *\n  * Given an {@link EndpointQualifier} an {@link ServerConnectionManager} can be retrieved\n  * by {@link #getConnectionManager(EndpointQualifier)} to create or get connections on that end.\n  */\n-public interface Server {\n+public interface Server extends ConnectionListenable<ServerConnection> {\n \n     /**\n      * Returns the ServerContext.\n      */\n     ServerContext getContext();\n \n     /**\n-     * Return an aggregate endpoint which acts as a view of all endpoints merged together for reporting purposes\n-     * eg. Read total-connections\n+     * Returns the relevant {@link ServerConnectionManager} given an {@link EndpointQualifier}\n      */\n-    AggregateServerConnectionManager getAggregateConnectionManager();\n+    ServerConnectionManager getConnectionManager(EndpointQualifier qualifier);\n \n     /**\n-     * Returns the relevant {@link ServerConnectionManager} given an {@link EndpointQualifier}\n-     * On single-endpoint setups (legacy mode), then a View relevant to the requested Endpoint is returned which purely acts\n-     * as a facade to hide the API differences and maintain common signatures.\n-     * eg.\n-     * {@link com.hazelcast.instance.ProtocolType#MEMBER} -&gt;\n-     * {@link MemberViewUnifiedServerConnectionManager}\n-     * {@link com.hazelcast.instance.ProtocolType#CLIENT} -&gt;\n-     * {@link ClientViewUnifiedEndpointManager}\n-     * {@link com.hazelcast.instance.ProtocolType#REST} -&gt;\n-     * {@link TextViewUnifiedServerConnectionManager}\n-     * {@link com.hazelcast.instance.ProtocolType#MEMCACHE} -&gt;\n-     * {@link TextViewUnifiedServerConnectionManager}\n+     * Returns all connections that have been successfully established.\n+     *\n+     * @return active connections\n      */\n-    ServerConnectionManager getConnectionManager(EndpointQualifier qualifier);\n+    Collection<ServerConnection> getConnections();\n+\n+    // todo: probably we want to get rid of this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzA5MA==", "bodyText": "Accessing directly Node#server field can potentially break future compatibility tests, could we use the accessor instead?", "url": "https://github.com/hazelcast/hazelcast/pull/16870#discussion_r412153090", "createdAt": "2020-04-21T12:46:51Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/AbstractJoiner.java", "diffHunk": "@@ -238,7 +239,7 @@ private SplitBrainJoinMessage sendSplitBrainJoinMessage(Address target, SplitBra\n             logger.fine(\"Sending SplitBrainJoinMessage to \" + target);\n         }\n \n-        Connection conn = node.getConnectionManager(MEMBER).getOrConnect(target, true);\n+        Connection conn = node.server.getConnectionManager(MEMBER).getOrConnect(target, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxNjI0OQ==", "bodyText": "The purpose of the [Client|Member|...]ViewUnifiedConnectionManagers was to present the corresponding view of the unified connection manager with the ConnectionManager API. So client code using getConnectionManager(CLIENT) would get a ConnectionManager presenting a view of CLIENT connections backed by the unified connection manager.\nAssuming 2 members with single-socket configuration (advancedNetworkConfig#enabled == false) + 1 client connected, then\nmember1Node.getServer().getConnectionManager(CLIENT).getActiveConnections(); previously returned just 1 connection with CLIENT protocol type. With this PR, this will return the unifiedConnectionManager itself -> getActiveConnections() will return 2 connections (1 to the other cluster member + 1 to the client) which does not make sense from the point of view of an API client requesting getConnectionManager(CLIENT).", "url": "https://github.com/hazelcast/hazelcast/pull/16870#discussion_r412216249", "createdAt": "2020-04-21T14:07:12Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServer.java", "diffHunk": "@@ -233,48 +182,87 @@ public synchronized void shutdown() {\n         if (unifiedConnectionManager != null) {\n             unifiedConnectionManager.reset(true);\n         } else {\n-            for (ServerConnectionManager connectionManager : connectionManagers.values()) {\n-                ((TcpServerConnectionManager) connectionManager).reset(true);\n+            connectionManagers.values().forEach(connectionManager -> connectionManager.reset(true));\n+        }\n+    }\n+\n+    @Override\n+    public Collection<ServerConnection> getConnections() {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager.getConnections();\n+        }\n+\n+        Set<ServerConnection> connections = null;\n+        for (TcpServerConnectionManager connectionManager : connectionManagers.values()) {\n+            Collection<ServerConnection> endpointConnections = connectionManager.getConnections();\n+            if (endpointConnections != null && !endpointConnections.isEmpty()) {\n+                if (connections == null) {\n+                    connections = new HashSet<>();\n+                }\n+\n+                connections.addAll(endpointConnections);\n             }\n         }\n+\n+        return connections == null ? Collections.emptySet() : connections;\n     }\n \n-    /**\n-     * The aggregate endpoint manager acts as a composite of all configured endpoints.\n-     * This is never null. In an environment with multiple endpoints, this is a super endpoint\n-     * that wraps them all and reports total connections or registers listeners to all separate endpoints.\n-     * Note: You can't create a connection through it, you will have to access the respective endpoint for that.\n-     *\n-     * In an environment with a unified endpoint, this will also act as a wrapper on the views of the unified endpoint\n-     * (see {@link MemberViewUnifiedServerConnectionManager} and the others).\n-     *\n-     * @return\n-     */\n     @Override\n-    public AggregateServerConnectionManager getAggregateConnectionManager() {\n-        return aggregateConnectionManager;\n+    public Collection<ServerConnection> getActiveConnections() {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager.getActiveConnections();\n+        }\n+\n+        Set<ServerConnection> connections = null;\n+        for (TcpServerConnectionManager connectionManager : connectionManagers.values()) {\n+            Collection<ServerConnection> endpointConnections = connectionManager.getActiveConnections();\n+            if (endpointConnections != null && !endpointConnections.isEmpty()) {\n+                if (connections == null) {\n+                    connections = new HashSet<>();\n+                }\n+\n+                connections.addAll(endpointConnections);\n+            }\n+        }\n+        return connections == null ? Collections.emptySet() : connections;\n     }\n \n-    /**\n-     * Returns the respective endpoint manager based on the qualifier.\n-     * Under unified endpoint environments, this will return the respective view of the {@link UnifiedServerConnectionManager}\n-     * eg. {@link MemberViewUnifiedServerConnectionManager} or {@link ClientViewUnifiedEndpointManager} which report\n-     * connections based on the qualifier, but they register/create connection directly on the Unified manager.\n-     *\n-     * @param qualifier\n-     * @return\n-     */\n-    public ServerConnectionManager getConnectionManager(EndpointQualifier qualifier) {\n-        ServerConnectionManager mgr = connectionManagers.get(qualifier);\n-        if (mgr == null) {\n-            logger.finest(\"An connection manager for qualifier \" + qualifier + \" was never registered.\");\n+    @Override\n+    public Map<EndpointQualifier, NetworkStats> getNetworkStats() {\n+        if (unifiedConnectionManager != null) {\n+            return emptyMap();\n         }\n \n-        return mgr;\n+        Map<EndpointQualifier, NetworkStats> stats = null;\n+        for (Map.Entry<EndpointQualifier, TcpServerConnectionManager> entry : connectionManagers.entrySet()) {\n+            if (stats == null) {\n+                stats = new HashMap<>();\n+            }\n+            stats.put(entry.getKey(), entry.getValue().getNetworkStats());\n+        }\n+        return stats == null ? emptyMap() : stats;\n     }\n \n-    ServerConnectionManager getUnifiedOrDedicatedEndpointManager(EndpointQualifier qualifier) {\n-        return unifiedConnectionManager != null ? unifiedConnectionManager : connectionManagers.get(qualifier);\n+    @Override\n+    public void addConnectionListener(ConnectionListener<ServerConnection> listener) {\n+        if (unifiedConnectionManager != null) {\n+            unifiedConnectionManager.addConnectionListener(listener);\n+        } else {\n+            connectionManagers.values().forEach(manager -> manager.addConnectionListener(listener));\n+        }\n+    }\n+\n+    @Override\n+    public TcpServerConnectionManager getConnectionManager(EndpointQualifier qualifier) {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b"}, "originalPosition": 278}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/57841f20d6f831cd1e74b70f639a384a0120548b", "committedDate": "2020-04-15T12:21:11Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "0937394b312c28c3d80a4f9f3db3bd9de112757c", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0937394b312c28c3d80a4f9f3db3bd9de112757c", "committedDate": "2020-04-22T10:53:55Z", "message": "ConnectionManager class simplification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0937394b312c28c3d80a4f9f3db3bd9de112757c", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0937394b312c28c3d80a4f9f3db3bd9de112757c", "committedDate": "2020-04-22T10:53:55Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "2c113c47f74ea0b07beff3be4da5dd5ace640530", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2c113c47f74ea0b07beff3be4da5dd5ace640530", "committedDate": "2020-04-22T11:07:39Z", "message": "ConnectionManager class simplification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c113c47f74ea0b07beff3be4da5dd5ace640530", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2c113c47f74ea0b07beff3be4da5dd5ace640530", "committedDate": "2020-04-22T11:07:39Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "c4aa925e27ddd7d9a7ae4550a02f148afb766125", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c4aa925e27ddd7d9a7ae4550a02f148afb766125", "committedDate": "2020-04-22T11:53:23Z", "message": "ConnectionManager class simplification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea975f8bec3cd27a87631b692392fc323f720115", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ea975f8bec3cd27a87631b692392fc323f720115", "committedDate": "2020-04-23T04:03:49Z", "message": "ConnectionManager class simplification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4aa925e27ddd7d9a7ae4550a02f148afb766125", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c4aa925e27ddd7d9a7ae4550a02f148afb766125", "committedDate": "2020-04-22T11:53:23Z", "message": "ConnectionManager class simplification"}, "afterCommit": {"oid": "ea975f8bec3cd27a87631b692392fc323f720115", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ea975f8bec3cd27a87631b692392fc323f720115", "committedDate": "2020-04-23T04:03:49Z", "message": "ConnectionManager class simplification"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODEyOTg3", "url": "https://github.com/hazelcast/hazelcast/pull/16870#pullrequestreview-398812987", "createdAt": "2020-04-23T07:04:21Z", "commit": {"oid": "ea975f8bec3cd27a87631b692392fc323f720115"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzowNDoyMVrOGKZ35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMjo0MVrOGKcHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2Mjg1NQ==", "bodyText": "to be fixed in a further PR", "url": "https://github.com/hazelcast/hazelcast/pull/16870#discussion_r413562855", "createdAt": "2020-04-23T07:04:21Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/TextCommandServiceImpl.java", "diffHunk": "@@ -174,13 +173,12 @@ public Stats getStats() {\n         stats.setIncrMisses(incrementMisses.get());\n         stats.setDecrHits(decrementHits.get());\n         stats.setDecrMisses(decrementMisses.get());\n-        Server server = node.server;\n+        Server server = node.getServer();\n         ServerConnectionManager cm = server.getConnectionManager(MEMCACHE);\n         int totalText = (cm != null ? cm.getActiveConnections().size() : 0);\n \n-        AggregateServerConnectionManager aem = server.getAggregateConnectionManager();\n         stats.setCurrConnections(totalText);\n-        stats.setTotalConnections(aem.getActiveConnections().size());\n+        stats.setTotalConnections(server.getActiveConnections().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea975f8bec3cd27a87631b692392fc323f720115"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5OTYxMA==", "bodyText": "As discussed, the getConnectionManager(EndpointQualifier) API purpose is now clarified in javadoc. Wrong stats due to missing connection filtering will be addressed in a further PR, along with cleanup of getConnections / getActiveConnections", "url": "https://github.com/hazelcast/hazelcast/pull/16870#discussion_r413599610", "createdAt": "2020-04-23T08:02:41Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServer.java", "diffHunk": "@@ -233,48 +182,87 @@ public synchronized void shutdown() {\n         if (unifiedConnectionManager != null) {\n             unifiedConnectionManager.reset(true);\n         } else {\n-            for (ServerConnectionManager connectionManager : connectionManagers.values()) {\n-                ((TcpServerConnectionManager) connectionManager).reset(true);\n+            connectionManagers.values().forEach(connectionManager -> connectionManager.reset(true));\n+        }\n+    }\n+\n+    @Override\n+    public Collection<ServerConnection> getConnections() {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager.getConnections();\n+        }\n+\n+        Set<ServerConnection> connections = null;\n+        for (TcpServerConnectionManager connectionManager : connectionManagers.values()) {\n+            Collection<ServerConnection> endpointConnections = connectionManager.getConnections();\n+            if (endpointConnections != null && !endpointConnections.isEmpty()) {\n+                if (connections == null) {\n+                    connections = new HashSet<>();\n+                }\n+\n+                connections.addAll(endpointConnections);\n             }\n         }\n+\n+        return connections == null ? Collections.emptySet() : connections;\n     }\n \n-    /**\n-     * The aggregate endpoint manager acts as a composite of all configured endpoints.\n-     * This is never null. In an environment with multiple endpoints, this is a super endpoint\n-     * that wraps them all and reports total connections or registers listeners to all separate endpoints.\n-     * Note: You can't create a connection through it, you will have to access the respective endpoint for that.\n-     *\n-     * In an environment with a unified endpoint, this will also act as a wrapper on the views of the unified endpoint\n-     * (see {@link MemberViewUnifiedServerConnectionManager} and the others).\n-     *\n-     * @return\n-     */\n     @Override\n-    public AggregateServerConnectionManager getAggregateConnectionManager() {\n-        return aggregateConnectionManager;\n+    public Collection<ServerConnection> getActiveConnections() {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager.getActiveConnections();\n+        }\n+\n+        Set<ServerConnection> connections = null;\n+        for (TcpServerConnectionManager connectionManager : connectionManagers.values()) {\n+            Collection<ServerConnection> endpointConnections = connectionManager.getActiveConnections();\n+            if (endpointConnections != null && !endpointConnections.isEmpty()) {\n+                if (connections == null) {\n+                    connections = new HashSet<>();\n+                }\n+\n+                connections.addAll(endpointConnections);\n+            }\n+        }\n+        return connections == null ? Collections.emptySet() : connections;\n     }\n \n-    /**\n-     * Returns the respective endpoint manager based on the qualifier.\n-     * Under unified endpoint environments, this will return the respective view of the {@link UnifiedServerConnectionManager}\n-     * eg. {@link MemberViewUnifiedServerConnectionManager} or {@link ClientViewUnifiedEndpointManager} which report\n-     * connections based on the qualifier, but they register/create connection directly on the Unified manager.\n-     *\n-     * @param qualifier\n-     * @return\n-     */\n-    public ServerConnectionManager getConnectionManager(EndpointQualifier qualifier) {\n-        ServerConnectionManager mgr = connectionManagers.get(qualifier);\n-        if (mgr == null) {\n-            logger.finest(\"An connection manager for qualifier \" + qualifier + \" was never registered.\");\n+    @Override\n+    public Map<EndpointQualifier, NetworkStats> getNetworkStats() {\n+        if (unifiedConnectionManager != null) {\n+            return emptyMap();\n         }\n \n-        return mgr;\n+        Map<EndpointQualifier, NetworkStats> stats = null;\n+        for (Map.Entry<EndpointQualifier, TcpServerConnectionManager> entry : connectionManagers.entrySet()) {\n+            if (stats == null) {\n+                stats = new HashMap<>();\n+            }\n+            stats.put(entry.getKey(), entry.getValue().getNetworkStats());\n+        }\n+        return stats == null ? emptyMap() : stats;\n     }\n \n-    ServerConnectionManager getUnifiedOrDedicatedEndpointManager(EndpointQualifier qualifier) {\n-        return unifiedConnectionManager != null ? unifiedConnectionManager : connectionManagers.get(qualifier);\n+    @Override\n+    public void addConnectionListener(ConnectionListener<ServerConnection> listener) {\n+        if (unifiedConnectionManager != null) {\n+            unifiedConnectionManager.addConnectionListener(listener);\n+        } else {\n+            connectionManagers.values().forEach(manager -> manager.addConnectionListener(listener));\n+        }\n+    }\n+\n+    @Override\n+    public TcpServerConnectionManager getConnectionManager(EndpointQualifier qualifier) {\n+        if (unifiedConnectionManager != null) {\n+            return unifiedConnectionManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxNjI0OQ=="}, "originalCommit": {"oid": "57841f20d6f831cd1e74b70f639a384a0120548b"}, "originalPosition": 278}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjI5MzE5", "url": "https://github.com/hazelcast/hazelcast/pull/16870#pullrequestreview-399229319", "createdAt": "2020-04-23T15:41:34Z", "commit": {"oid": "ea975f8bec3cd27a87631b692392fc323f720115"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3764, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}