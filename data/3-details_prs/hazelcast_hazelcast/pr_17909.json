{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTUyNzky", "number": 17909, "title": "Method removal and unifications", "bodyText": "Removed merge method, it was only used in tests. No real need to keep it.\nUnified putter methods under putInternal method.", "createdAt": "2020-12-01T09:20:01Z", "url": "https://github.com/hazelcast/hazelcast/pull/17909", "merged": true, "mergeCommit": {"oid": "1b869bd50cdfdf0cfd8812d7c50ab80ee09be550"}, "closed": true, "closedAt": "2020-12-04T11:11:52Z", "author": {"login": "ahmetmircik"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiBl9xABqjQwNTk1MDEwMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi1UrggFqTU0NDg0MjIxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31cda1e175c2688ddd0b01ae4f206172027d3f40", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/31cda1e175c2688ddd0b01ae4f206172027d3f40", "committedDate": "2020-12-01T22:18:50Z", "message": "wip"}, "afterCommit": {"oid": "454028f32fca1340db5efda6d377b854adbe1d15", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/454028f32fca1340db5efda6d377b854adbe1d15", "committedDate": "2020-12-01T22:21:54Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38fecde9dbb797c303d6fca39a9e8b5567678697", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/38fecde9dbb797c303d6fca39a9e8b5567678697", "committedDate": "2020-12-02T10:46:34Z", "message": "putIfAbsent method"}, "afterCommit": {"oid": "565f6bb5071a910588985e25d5b5f5cb5c5cafaf", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/565f6bb5071a910588985e25d5b5f5cb5c5cafaf", "committedDate": "2020-12-02T13:22:57Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzU2MTQx", "url": "https://github.com/hazelcast/hazelcast/pull/17909#pullrequestreview-542756141", "createdAt": "2020-12-02T11:47:06Z", "commit": {"oid": "38fecde9dbb797c303d6fca39a9e8b5567678697"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTo0NzowNlrOH9XOPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozMzoyMFrOH9Y03A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwNTY2MA==", "bodyText": "I think if we take this unified putInternal() way, we should consider introducing a parameter type for it. It's a bit hard to follow which boolean means what in the PR. I mean something like\nprivate static class PutControl {\n  private static final PutControl PUT_IF_ABSENT = PutControl.of().putIfAbsent().putIfExists().putIfEqual()...;\n\n  boolean putIfAbsent;\n  boolean putIfExists;\n  ...\n}\n\nThen, we can call from putIfAbsent() something like putInternal(key, value, ttl, maxIdle, getNow(), PutControl.PUT_IF_ABSENT)\nWDYT?\nOn the other hand, I'm not sure that merging multiple methods into a single one loaded with branches is better for readability/understandability/performance. What gain do we expect here? Can't we just extract parts of this method into primitive building blocks and use those blocks directly in the callers?", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534105660", "createdAt": "2020-12-02T11:47:06Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java", "diffHunk": "@@ -746,66 +738,158 @@ private void addEventToQueryCache(Data dataKey, Record record) {\n \n     @Override\n     public boolean setTtl(Data key, long ttl, boolean backup) {\n-        long now = getNow();\n-        Record record = getRecordOrNull(key, now, false);\n-        Object existingValue = record == null ? loadValueOf(key) : record.getValue();\n-        if (existingValue == null) {\n-            return false;\n-        }\n-        if (record == null) {\n-            createRecord(key, existingValue, ttl, UNSET, now);\n-            mutationObserver.onPutRecord(key, null, existingValue, false);\n-        } else {\n-            updateRecord(key, record, existingValue, existingValue, now, true, ttl,\n-                    UNSET, true, null, backup);\n-        }\n-        markRecordStoreExpirable(ttl, UNSET);\n-        return true;\n+        Object oldValue = putInternal(key, null, ttl, UNSET, getNow(),\n+                true, true, false, true, false,\n+                false, null, true, true,\n+                null, null, true, backup);\n+        return oldValue != null;\n     }\n \n     @Override\n     public Object set(Data dataKey, Object value, long ttl, long maxIdle) {\n-        return putInternal(dataKey, value, ttl, maxIdle, null, false, true);\n+        return putInternal(dataKey, value, ttl, maxIdle, getNow(),\n+                false, true, false, false, false,\n+                false, null, false, true,\n+                null, null, true, false);\n     }\n \n     @Override\n     public Object setTxn(Data dataKey, Object value, long ttl, long maxIdle, UUID transactionId) {\n-        return putInternal(dataKey, value, ttl, maxIdle, transactionId, false, true);\n+        return putInternal(dataKey, value, ttl, maxIdle, getNow(),\n+                false, true, false, false, false,\n+                false, null, false, true,\n+                transactionId, null, true, false);\n     }\n \n     @Override\n     public Object put(Data key, Object value, long ttl, long maxIdle) {\n-        return putInternal(key, value, ttl, maxIdle, null, true, true);\n+        return putInternal(key, value, ttl, maxIdle, getNow(),\n+                true, true, false, false, false,\n+                false, null, false, true,\n+                null, null, true, false);\n     }\n \n-    protected Object putInternal(Data key, Object newValue, long ttl,\n-                                 long maxIdle, @Nullable UUID transactionId,\n-                                 boolean loadFromStore, boolean countAsAccess) {\n-        checkIfLoaded();\n-\n-        long now = getNow();\n-        markRecordStoreExpirable(ttl, maxIdle);\n-\n-        Record record = getRecordOrNull(key, now, false);\n-        Object oldValue = record == null\n-                ? (loadFromStore ? loadValueOf(key) : null) : record.getValue();\n-        newValue = mapServiceContext.interceptPut(interceptorRegistry, oldValue, newValue);\n-        onStore(record);\n+    /**\n+     * Core put method for all variants of puts/updates.\n+     * @return old value if this is an update operations, otherwise returns null\n+     */\n+    @SuppressWarnings({\"checkstyle:npathcomplexity\",\n+            \"checkstyle:parameternumber\", \"checkstyle:cyclomaticcomplexity\"})\n+    private Object putInternal(Data key, Object newValue, long ttl,\n+                               long maxIdle, long now, boolean load, boolean store,\n+                               boolean putIfAbsent, boolean putIfExists, boolean putIfEqual,\n+                               boolean putFromLoad, Object expectedValue, boolean useOldValueIfNoNewValue,\n+                               boolean checkIfLoaded, @Nullable UUID transactionId,\n+                               Address callerAddress, boolean countAsAccess, boolean backup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fecde9dbb797c303d6fca39a9e8b5567678697"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzMTkzMg==", "bodyText": "Can't we use record here instead of getRecord()?", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534131932", "createdAt": "2020-12-02T12:33:20Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java", "diffHunk": "@@ -410,13 +404,11 @@ public Record loadRecordOrNull(Data key, boolean backup, Address callerAddress)\n             value = loaderEntry.getValue();\n             ttl = proposedTtl;\n         }\n-        Record record = createRecord(key, value, ttl, UNSET, getNow());\n-        markRecordStoreExpirable(ttl, UNSET);\n-        storage.put(key, record);\n-        mutationObserver.onLoadRecord(key, record, backup);\n-        if (!backup) {\n+        Record record = putNewRecord(key, null, value, ttl, UNSET, getNow(),\n+                null, LOADED, false, backup);\n+        if (!backup && mapEventPublisher.hasEventListener(name)) {\n             mapEventPublisher.publishEvent(callerAddress, name, EntryEventType.LOADED,\n-                    key, null, value, null);\n+                    key, null, getRecord(key).getValue(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fecde9dbb797c303d6fca39a9e8b5567678697"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTkyMDg0", "url": "https://github.com/hazelcast/hazelcast/pull/17909#pullrequestreview-542992084", "createdAt": "2020-12-02T16:05:52Z", "commit": {"oid": "190d6f247b2e8fe5464e503d997536714fa358c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cfafd80082eda63b7d010b442bd0f0a1c9aa5f6", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4cfafd80082eda63b7d010b442bd0f0a1c9aa5f6", "committedDate": "2020-12-02T19:02:52Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd30f682d72eab6c2b8bac3dcb4ace9ed2261063", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dd30f682d72eab6c2b8bac3dcb4ace9ed2261063", "committedDate": "2020-12-02T19:02:52Z", "message": "address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241a09c89e5c14c80806ae82c9a05370c5fac334", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/241a09c89e5c14c80806ae82c9a05370c5fac334", "committedDate": "2020-12-02T19:02:53Z", "message": "address review comment 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e550eb0ee14b7051bd4dc031b45b2565e11e07", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/40e550eb0ee14b7051bd4dc031b45b2565e11e07", "committedDate": "2020-12-02T19:02:53Z", "message": "address review comment 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede592ede8570af98a3af2eae404397f5df7c8fa", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ede592ede8570af98a3af2eae404397f5df7c8fa", "committedDate": "2020-12-02T19:02:53Z", "message": "test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4449c9f95249411f13449a84e1162a7ebc9cf9ad", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4449c9f95249411f13449a84e1162a7ebc9cf9ad", "committedDate": "2020-12-02T19:06:07Z", "message": "test fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4af3711baa3e32626302d51d3fb1f8303bdd554c", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4af3711baa3e32626302d51d3fb1f8303bdd554c", "committedDate": "2020-12-02T18:11:30Z", "message": "test fix"}, "afterCommit": {"oid": "4449c9f95249411f13449a84e1162a7ebc9cf9ad", "author": {"user": {"login": "ahmetmircik", "name": "Ahmet Mircik"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4449c9f95249411f13449a84e1162a7ebc9cf9ad", "committedDate": "2020-12-02T19:06:07Z", "message": "test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODQyMjE0", "url": "https://github.com/hazelcast/hazelcast/pull/17909#pullrequestreview-544842214", "createdAt": "2020-12-04T10:38:13Z", "commit": {"oid": "4449c9f95249411f13449a84e1162a7ebc9cf9ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}