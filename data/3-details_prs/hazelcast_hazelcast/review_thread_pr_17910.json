{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTYzNjQ3", "number": 17910, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNTo0OVrOE_K3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTo0MlrOE_u-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjczNjk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/LoggingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNTo0OVrOH8uhlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNTo0OVrOH8uhlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzODg2OQ==", "bodyText": "Should be removeLogger", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533438869", "createdAt": "2020-12-01T14:15:49Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/LoggingService.java", "diffHunk": "@@ -28,4 +28,8 @@\n     @Nonnull ILogger getLogger(@Nonnull String name);\n \n     @Nonnull ILogger getLogger(@Nonnull Class type);\n+\n+    void reoveLogger(@Nonnull String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f655b9fb743d89f69409f1c2253881005fb97a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjczNzQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/LoggingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNTo1NlrOH8uh6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNTo1NlrOH8uh6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzODk1Mg==", "bodyText": "Should be removeLogger", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533438952", "createdAt": "2020-12-01T14:15:56Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/LoggingService.java", "diffHunk": "@@ -28,4 +28,8 @@\n     @Nonnull ILogger getLogger(@Nonnull String name);\n \n     @Nonnull ILogger getLogger(@Nonnull Class type);\n+\n+    void reoveLogger(@Nonnull String name);\n+\n+    void reoveLogger(@Nonnull Class type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f655b9fb743d89f69409f1c2253881005fb97a7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Njc0MTQwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/impl/LoggingServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNjo0M1rOH8ukPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNjo0M1rOH8ukPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzOTU0OA==", "bodyText": "javax.annotation.Nonnull should be used instead of this one", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533439548", "createdAt": "2020-12-01T14:16:43Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/impl/LoggingServiceImpl.java", "diffHunk": "@@ -27,6 +27,7 @@\n import com.hazelcast.logging.Logger;\n import com.hazelcast.logging.LoggerFactory;\n import com.hazelcast.logging.LoggingService;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f655b9fb743d89f69409f1c2253881005fb97a7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzU0OTkyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1NToyOVrOH82dsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1NToyOVrOH82dsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2ODk0NA==", "bodyText": "nit: I think the old javadoc was closer to the truth, as clazz is not the class of the logger, but the class for which the logger is created/obtained.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533568944", "createdAt": "2020-12-01T16:55:29Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "diffHunk": "@@ -57,7 +57,7 @@ private Logger() {\n     /**\n      * Obtains a {@link ILogger logger} for the given {@code clazz}.\n      *\n-     * @param clazz the class to obtain the logger for.\n+     * @param clazz the class of the logger to obtain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729e75f8403722265c918f5e3e8232dcfc8a6851"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzU1ODM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1NzoyMlrOH82jCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1NzoyMlrOH82jCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3MDMxMw==", "bodyText": "We can get a NPE because of this change as if statement checks loggerFactory, but the internal block operates on existingFactory. The old code seems to be correct to me as it was reading a volatile fields into a local variable and then operating on it.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533570313", "createdAt": "2020-12-01T16:57:22Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "diffHunk": "@@ -71,16 +71,40 @@ public static ILogger getLogger(Class clazz) {\n      * @return the obtained logger.\n      */\n     public static ILogger getLogger(String name) {\n-        // try the fast path first\n         LoggerFactory existingFactory = loggerFactory;\n-        if (existingFactory != null) {\n+        if (loggerFactory != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729e75f8403722265c918f5e3e8232dcfc8a6851"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg2NjgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMDoxMlrOH85iCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMDoxMlrOH85iCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxOTIwOA==", "bodyText": "nit: it would be nice to have input validation (e.g. checkNotNull(clazz, \"class must not be null\");) in this and other public methods of this class.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533619208", "createdAt": "2020-12-01T18:10:12Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "diffHunk": "@@ -71,16 +71,40 @@ public static ILogger getLogger(Class clazz) {\n      * @return the obtained logger.\n      */\n     public static ILogger getLogger(String name) {\n-        // try the fast path first\n         LoggerFactory existingFactory = loggerFactory;\n-        if (existingFactory != null) {\n+        if (loggerFactory != null) {\n             return existingFactory.getLogger(name);\n         }\n+        return createFactoryInternal(name).getLogger(name);\n+    }\n \n+    /**\n+     * Removes the {@link ILogger logger} for the given {@code clazz}.\n+     *\n+     * @param clazz the class of the logger to remove.\n+     */\n+    public static void removeLogger(Class clazz) {\n+        removeLogger(clazz.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729e75f8403722265c918f5e3e8232dcfc8a6851"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDA0MzQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientLoggingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoyOToxN1rOH9NoyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoyOToxN1rOH9NoyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0ODYxNw==", "bodyText": "Should be javax.annotation.Nonnull", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533948617", "createdAt": "2020-12-02T07:29:17Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientLoggingService.java", "diffHunk": "@@ -18,14 +18,15 @@\n \n import com.hazelcast.instance.BuildInfo;\n import com.hazelcast.instance.JetBuildInfo;\n+import com.hazelcast.internal.util.ConstructorFunction;\n import com.hazelcast.logging.AbstractLogger;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.logging.LogEvent;\n import com.hazelcast.logging.LogListener;\n import com.hazelcast.logging.Logger;\n import com.hazelcast.logging.LoggerFactory;\n import com.hazelcast.logging.LoggingService;\n-import com.hazelcast.internal.util.ConstructorFunction;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe9905945804e4cca1a7a2ef54b97d1bf5ebc9f0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDA1MDI2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozMTozMVrOH9NsxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozMTozMVrOH9NsxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0OTYzNg==", "bodyText": "String name seems to be unused.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r533949636", "createdAt": "2020-12-02T07:31:31Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/Logger.java", "diffHunk": "@@ -70,17 +75,52 @@ public static ILogger getLogger(Class clazz) {\n      * @param name the name of the logger to obtain.\n      * @return the obtained logger.\n      */\n-    public static ILogger getLogger(String name) {\n-        // try the fast path first\n+    public static ILogger getLogger(@Nonnull String name) {\n+        checkNotNull(name, \"name must not be null\");\n+        return getLoggerInternal(name);\n+    }\n+\n+    private static ILogger getLoggerInternal(String name) {\n         LoggerFactory existingFactory = loggerFactory;\n         if (existingFactory != null) {\n             return existingFactory.getLogger(name);\n         }\n+        return createFactoryInternal(name).getLogger(name);\n+    }\n+\n+    /**\n+     * Removes the {@link ILogger logger} for the given {@code clazz}.\n+     *\n+     * @param clazz the class to remove the logger for.\n+     */\n+    public static void removeLogger(Class clazz) {\n+        checkNotNull(clazz, \"class must not be null\");\n+        removeLoggerInternal(clazz.getName());\n+    }\n+\n+    /**\n+     * Removes the {@link ILogger logger} for the given {@code name}.\n+     *\n+     * @param name the name of the logger to remove.\n+     */\n+    public static void removeLogger(String name) {\n+        checkNotNull(name, \"name must not be null\");\n+        removeLoggerInternal(name);\n+    }\n+\n+    private static void removeLoggerInternal(String name) {\n+        LoggerFactory existingFactory = loggerFactory;\n+        if (existingFactory != null) {\n+            existingFactory.removeLogger(name);\n+        }\n+        createFactoryInternal(name).removeLogger(name);\n+    }\n \n+    private static LoggerFactory createFactoryInternal(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe9905945804e4cca1a7a2ef54b97d1bf5ebc9f0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjY0MTcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientLoggingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozNjo1MFrOH9meIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo1OTowMFrOH97lLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NTQ5MA==", "bodyText": "Does this need to be synchronized with concurrent calls to getLogger? I can see all calls to getLogger are thread-safe as they use striped locks but removeLogger here does not coordinate with methods adding loggers.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r534355490", "createdAt": "2020-12-02T17:36:50Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientLoggingService.java", "diffHunk": "@@ -86,6 +86,21 @@ public ILogger getLogger(@Nonnull Class clazz) {\n         return getOrPutIfAbsent(mapLoggers, clazz.getName(), loggerConstructor);\n     }\n \n+    @Override\n+    public void removeLogger(@Nonnull String name) {\n+        checkNotNull(name, \"name must not be null\");\n+        loggerFactory.removeLogger(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c8daf1619956dd2e615860f96024520934c2b7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMTM1Nw==", "bodyText": "Good catch.\nI think, the simplest way to fix this problem is to use the fact that loggerFactory accesses are guarded with CHM (mapLoggers) operations and we could use CHM's atomicity guarantees for the deletion:\n    @Override\n    public void removeLogger(@Nonnull String name) {\n        checkNotNull(name, \"name must not be null\");\n        mapLoggers.computeIfPresent(name, (k, v) -> {\n            loggerFactory.removeLogger(name);\n            // delete the entry\n            return null;\n        });        \n    }", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r534701357", "createdAt": "2020-12-03T05:59:00Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClientLoggingService.java", "diffHunk": "@@ -86,6 +86,21 @@ public ILogger getLogger(@Nonnull Class clazz) {\n         return getOrPutIfAbsent(mapLoggers, clazz.getName(), loggerConstructor);\n     }\n \n+    @Override\n+    public void removeLogger(@Nonnull String name) {\n+        checkNotNull(name, \"name must not be null\");\n+        loggerFactory.removeLogger(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NTQ5MA=="}, "originalCommit": {"oid": "62c8daf1619956dd2e615860f96024520934c2b7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjY1MzY0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/logging/impl/LoggingServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTo0MlrOH9mluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTo0MlrOH9mluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NzQzMg==", "bodyText": "Same as in client logging service.", "url": "https://github.com/hazelcast/hazelcast/pull/17910#discussion_r534357432", "createdAt": "2020-12-02T17:39:42Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/logging/impl/LoggingServiceImpl.java", "diffHunk": "@@ -83,6 +83,21 @@ public ILogger getLogger(@Nonnull Class clazz) {\n         return getOrPutIfAbsent(mapLoggers, clazz.getName(), loggerConstructor);\n     }\n \n+    @Override\n+    public void removeLogger(@Nonnull String name) {\n+        checkNotNull(name, \"name must not be null\");\n+        loggerFactory.removeLogger(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c8daf1619956dd2e615860f96024520934c2b7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4982, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}