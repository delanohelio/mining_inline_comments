{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Mjg5NTM4", "number": 16759, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTozMjozNFrODopM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoxNTo1MlrODoqJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQ0Njk3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTozMjozNFrOF3UNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTozMjozNFrOF3UNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NzA2MQ==", "bodyText": "nit: typo - Child classes which implements should be Child classes which implement", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r393547061", "createdAt": "2020-03-17T09:32:34Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java", "diffHunk": "@@ -336,4 +343,15 @@ protected Throwable peelIfNeeded(Throwable t) {\n \n         return peel(t);\n     }\n+\n+\n+    /**\n+     * The default implementation returns false. Child classes which implements a logic related to a management operation should", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTU2OTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNjowNVrOF3VaWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowODoyOFrOF4wEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA==", "bodyText": "I'm not sure if we need to mark \"read metrics\" task as an MC operation and restrict the access to it when trusted interfaces config option is in use. Potentially, we may use it elsewhere, say, build a Jet source that reads IMDG metrics.\n@emre-aydin @blazember WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r393566810", "createdAt": "2020-03-17T10:06:05Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwOTk4Mg==", "bodyText": "I think we should be able to change it if we do use it elsewhere later but currently it is used by MC only and I don't see a reason to make it a non-management task. Just my 2c. I wouldn't object to making it a non-management task either.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r393609982", "createdAt": "2020-03-17T11:26:31Z", "author": {"login": "emre-aydin"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxOTkwNA==", "bodyText": "It could be that my understanding of the requirements is wrong, but isn't the differentiation between the connections and the private APIs in the requirements is to treat this task differently than the other MC tasks? (read: shouldn't this method return false?)", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r394019904", "createdAt": "2020-03-17T23:02:54Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MjQzMw==", "bodyText": "The thing is that MC connection (the one with MCJVM connection type) is not not reliable marker for security restrictions. That's why this PR implements restrictions on per operation basis.\nAs for marking \"read metrics\" task as a non-MC one (thus, removing the whitelist restriction), I don't see this clearly stated in requirements. But as it may make some sense in future, I decided to start this discussion.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r394152433", "createdAt": "2020-03-18T07:37:57Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDk4Mg==", "bodyText": "I think, we can split it in the future when the need comes. For now, I would leave the metrics-reading as a management task as it's not available in our official clients.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r395024982", "createdAt": "2020-03-19T13:30:18Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjE2Mg==", "bodyText": "Sounds good. Marking this one as resolved.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r395052162", "createdAt": "2020-03-19T14:08:28Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/metrics/ReadMetricsMessageTask.java", "diffHunk": "@@ -97,5 +97,11 @@ public String getMethodName() {\n     public Object[] getParameters() {\n         return new Object[] {parameters.uuid, parameters.fromSequence};\n     }\n+\n+    @Override\n+    public boolean isManagementTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjgxMA=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTU3MjQ3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/AddressChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNzoxMVrOF3VchQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNzoxMVrOF3VchQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NzM2NQ==", "bodyText": "nit: write a javadoc instead of this empty stub.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r393567365", "createdAt": "2020-03-17T10:07:11Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/AddressChecker.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.cluster;\n+\n+import com.hazelcast.cluster.Address;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTYwMDgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/security/ICredentialsFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoxNTo1MlrOF3VvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MToyMFrOF4vUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MjEyMw==", "bodyText": "Is this change related with the purpose of the PR? Probably, it's used somewhere, but I'd like to double check.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r393572123", "createdAt": "2020-03-17T10:15:52Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/security/ICredentialsFactory.java", "diffHunk": "@@ -50,6 +51,16 @@ default void init(Properties properties) {\n      */\n     Credentials newCredentials();\n \n+    /**\n+     * Creates new {@link Credentials} object for given target {@link Address}.\n+     *\n+     * @param address Target {@link Address} (may be {@code null})\n+     * @return\n+     */\n+    default Credentials newCredentials(Address address) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzOTg0OA==", "bodyText": "Ah, nice catch. This change probably sneaked in from my Kerberos related work.", "url": "https://github.com/hazelcast/hazelcast/pull/16759#discussion_r395039848", "createdAt": "2020-03-19T13:51:20Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/security/ICredentialsFactory.java", "diffHunk": "@@ -50,6 +51,16 @@ default void init(Properties properties) {\n      */\n     Credentials newCredentials();\n \n+    /**\n+     * Creates new {@link Credentials} object for given target {@link Address}.\n+     *\n+     * @param address Target {@link Address} (may be {@code null})\n+     * @return\n+     */\n+    default Credentials newCredentials(Address address) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MjEyMw=="}, "originalCommit": {"oid": "f9e59b616c0090b64427b5bf4f64114998dd4a4e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 751, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}