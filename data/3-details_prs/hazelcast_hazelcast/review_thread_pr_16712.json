{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjM1Nzkz", "number": 16712, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyMTowN1rODkMWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyMTowN1rODkMWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjc3NjI2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyMTowN1rOFwYUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNTo0NFrOFx625w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NDQ4MA==", "bodyText": "Will this set the stdout for all other tests that may be running in parallel in the same JVM?", "url": "https://github.com/hazelcast/hazelcast/pull/16712#discussion_r386274480", "createdAt": "2020-03-02T09:21:07Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+/**\n+ * Tests for demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class})\n+public class ClientConsoleAppTest extends HazelcastTestSupport {\n+\n+    private static final PrintStream systemOutOrig = System.out;\n+\n+    private static ByteArrayOutputStream baos;\n+\n+    private  HazelcastInstance hazelcastInstance;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        baos = new ByteArrayOutputStream();\n+        try {\n+            System.setOut(new PrintStream(baos, true, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never happen for the UTF-8\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setOut(systemOutOrig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2c3818edd042ba49e85b757ef010a3628fc7a8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyODEzMQ==", "bodyText": "yes - that is global property, i assumed that it is ok to use that approach because ConsoleAppTest also do it ( i had doubts but :D ), do we want to redesign it ?", "url": "https://github.com/hazelcast/hazelcast/pull/16712#discussion_r386528131", "createdAt": "2020-03-02T17:10:48Z", "author": {"login": "KowalczykBartek"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+/**\n+ * Tests for demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class})\n+public class ClientConsoleAppTest extends HazelcastTestSupport {\n+\n+    private static final PrintStream systemOutOrig = System.out;\n+\n+    private static ByteArrayOutputStream baos;\n+\n+    private  HazelcastInstance hazelcastInstance;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        baos = new ByteArrayOutputStream();\n+        try {\n+            System.setOut(new PrintStream(baos, true, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never happen for the UTF-8\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setOut(systemOutOrig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NDQ4MA=="}, "originalCommit": {"oid": "0f2c3818edd042ba49e85b757ef010a3628fc7a8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNDU3MA==", "bodyText": "I would suggest redesign so that it is not globally set not to affect other tests. I see that it is used by ConsoleAppTest as well but I think it is not a good design, do you have a better alternative design for testing?", "url": "https://github.com/hazelcast/hazelcast/pull/16712#discussion_r387704570", "createdAt": "2020-03-04T14:34:01Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+/**\n+ * Tests for demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class})\n+public class ClientConsoleAppTest extends HazelcastTestSupport {\n+\n+    private static final PrintStream systemOutOrig = System.out;\n+\n+    private static ByteArrayOutputStream baos;\n+\n+    private  HazelcastInstance hazelcastInstance;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        baos = new ByteArrayOutputStream();\n+        try {\n+            System.setOut(new PrintStream(baos, true, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never happen for the UTF-8\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setOut(systemOutOrig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NDQ4MA=="}, "originalCommit": {"oid": "0f2c3818edd042ba49e85b757ef010a3628fc7a8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTM0MA==", "bodyText": "I will play around that at home.", "url": "https://github.com/hazelcast/hazelcast/pull/16712#discussion_r387705340", "createdAt": "2020-03-04T14:35:15Z", "author": {"login": "KowalczykBartek"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+/**\n+ * Tests for demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class})\n+public class ClientConsoleAppTest extends HazelcastTestSupport {\n+\n+    private static final PrintStream systemOutOrig = System.out;\n+\n+    private static ByteArrayOutputStream baos;\n+\n+    private  HazelcastInstance hazelcastInstance;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        baos = new ByteArrayOutputStream();\n+        try {\n+            System.setOut(new PrintStream(baos, true, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never happen for the UTF-8\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setOut(systemOutOrig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NDQ4MA=="}, "originalCommit": {"oid": "0f2c3818edd042ba49e85b757ef010a3628fc7a8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODg3MQ==", "bodyText": "@ihsandemir fixed (at least i think so) - I am passing output buffer explicitly, no more sharing global state.", "url": "https://github.com/hazelcast/hazelcast/pull/16712#discussion_r387888871", "createdAt": "2020-03-04T19:35:44Z", "author": {"login": "KowalczykBartek"}, "path": "hazelcast/src/test/java/com/hazelcast/client/console/ClientConsoleAppTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.console;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+/**\n+ * Tests for demo client console application.\n+ */\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class})\n+public class ClientConsoleAppTest extends HazelcastTestSupport {\n+\n+    private static final PrintStream systemOutOrig = System.out;\n+\n+    private static ByteArrayOutputStream baos;\n+\n+    private  HazelcastInstance hazelcastInstance;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        baos = new ByteArrayOutputStream();\n+        try {\n+            System.setOut(new PrintStream(baos, true, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            // Should never happen for the UTF-8\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setOut(systemOutOrig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NDQ4MA=="}, "originalCommit": {"oid": "0f2c3818edd042ba49e85b757ef010a3628fc7a8"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 726, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}