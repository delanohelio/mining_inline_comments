{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzU0ODgx", "number": 17411, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowMDoyNVrOEce1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNjowOFrOEcg0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzAwODUyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowMDoyNVrOHHCttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTowMzo1N1rOHHC14A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjU0OQ==", "bodyText": "javax.annotation.Nonnull?", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477146549", "createdAt": "2020-08-26T09:00:25Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -22,6 +22,7 @@\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491954f15784fce672c5e41c23d6ae19fc1a684"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0ODY0MA==", "bodyText": "Interesting. I have added javax.annotation.Nonnull to GenericRecord and then IDE put the annotations to subclasses automatically. It seems I should not trust the IDE. Correcting right away.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477148640", "createdAt": "2020-08-26T09:03:57Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -22,6 +22,7 @@\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjU0OQ=="}, "originalCommit": {"oid": "1491954f15784fce672c5e41c23d6ae19fc1a684"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA5ODg0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMToxOFrOHHDmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0ODoxNVrOHHElaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTA5MQ==", "bodyText": "Do we need to duplicate these annotations in implementations? They're already present in the interface.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477161091", "createdAt": "2020-08-26T09:21:18Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -41,123 +41,125 @@ public ClassDefinition getClassDefinition() {\n         return classDefinition;\n     }\n \n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2NzYyMw==", "bodyText": "IDE gives a warning if you don't. I think it is good to see it also here.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477167623", "createdAt": "2020-08-26T09:32:07Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -41,123 +41,125 @@ public ClassDefinition getClassDefinition() {\n         return classDefinition;\n     }\n \n+    @Nonnull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTA5MQ=="}, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3NzE5NQ==", "bodyText": "I see. Thanks for the clarification.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477177195", "createdAt": "2020-08-26T09:48:15Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -41,123 +41,125 @@ public ClassDefinition getClassDefinition() {\n         return classDefinition;\n     }\n \n+    @Nonnull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTA5MQ=="}, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE3ODQ1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MTo1M1rOHHEW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoxNDoxNlrOHHFegA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzQ1Ng==", "bodyText": "still missing here in return type", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477173456", "createdAt": "2020-08-26T09:41:53Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -269,13 +296,14 @@\n          * @param classDefinition of the portable that we will create\n          * @return GenericRecordBuilder for Portable format\n          */\n-        static Builder portable(ClassDefinition classDefinition) {\n+        static Builder portable(@Nonnull ClassDefinition classDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5MTgwOA==", "bodyText": "@cangencer I  updated the pr accordingly", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477191808", "createdAt": "2020-08-26T10:14:16Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -269,13 +296,14 @@\n          * @param classDefinition of the portable that we will create\n          * @return GenericRecordBuilder for Portable format\n          */\n-        static Builder portable(ClassDefinition classDefinition) {\n+        static Builder portable(@Nonnull ClassDefinition classDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzQ1Ng=="}, "originalCommit": {"oid": "6519d31529a8bbb83e8330cab8e7f9b8cf9d162b"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMxNDk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMDo1NVrOHHFr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTowMjo1MFrOHHG8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTIyNA==", "bodyText": "these are still missing :)", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477195224", "createdAt": "2020-08-26T10:20:55Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -292,7 +327,7 @@ static Builder portable(ClassDefinition classDefinition) {\n          *                                         Same field is trying to be overwritten without using\n          *                                         {@link GenericRecord#cloneWithBuilder()}.\n          */\n-        Builder writeBoolean(String fieldName, boolean value);\n+        Builder writeBoolean(@Nonnull String fieldName, boolean value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxNTkyOQ==", "bodyText": "I just didn't want to add NonNullable for obvious chaining pattern.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477215929", "createdAt": "2020-08-26T11:02:50Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -292,7 +327,7 @@ static Builder portable(ClassDefinition classDefinition) {\n          *                                         Same field is trying to be overwritten without using\n          *                                         {@link GenericRecord#cloneWithBuilder()}.\n          */\n-        Builder writeBoolean(String fieldName, boolean value);\n+        Builder writeBoolean(@Nonnull String fieldName, boolean value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTIyNA=="}, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMxOTExOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMjoxNFrOHHFuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMjoxNFrOHHFuZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTg3OQ==", "bodyText": "I don't see any method named createGenericRecordBuilder ? I think it's newBuilder?", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477195879", "createdAt": "2020-08-26T10:22:14Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMyMzY2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMzo0NFrOHHFxTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyMzo0NFrOHHFxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NjYyMQ==", "bodyText": "I would shorthand this method to just builder()", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477196621", "createdAt": "2020-08-26T10:23:44Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMyODMxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNTowM1rOHHF0CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNTowM1rOHHF0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NzMyMQ==", "bodyText": "builderWithCopy()", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197321", "createdAt": "2020-08-26T10:25:03Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()\n+     *                         .writeUTF(\"name\", genericRecord.readUTF(\"name\"))\n+     *                         .writeLong(\"id\", 4)\n+     *                         .writeUTF(\"surname\", genericRecord.readUTF(\"surname\"))\n+     *                         .writeInt(\"age\", genericRecord.readInt(\"age\")).build();\n+     * </pre>\n+     * `cloneWithBuilder` used as follows:\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.cloneWithBuilder().writeInt(\"id\", 4).build();\n+     * </pre>\n      *\n      * @return a generic record builder with same class definition as this one and populated with same values.\n      */\n+    @Nonnull\n     Builder cloneWithBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMzMTEwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNTo1MVrOHHF1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNTo1MVrOHHF1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NzczNw==", "bodyText": "put instead of write , as write implies you have to do it sequentially.", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197737", "createdAt": "2020-08-26T10:25:51Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -345,7 +380,7 @@ static Builder portable(ClassDefinition classDefinition) {\n          *                                         Same field is trying to be overwritten without using\n          *                                         {@link GenericRecord#cloneWithBuilder()}.\n          */\n-        Builder writeFloat(String fieldName, float value);\n+        Builder writeFloat(@Nonnull String fieldName, float value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzMzMjA5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNjowOFrOHHF2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyNjowOFrOHHF2Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5Nzg4Mw==", "bodyText": "get instead of read, as read implies sequential access rather than random access", "url": "https://github.com/hazelcast/hazelcast/pull/17411#discussion_r477197883", "createdAt": "2020-08-26T10:26:08Z", "author": {"login": "cangencer"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/GenericRecord.java", "diffHunk": "@@ -70,183 +71,215 @@\n      *\n      * @return an empty generic record builder with same class definition as this one\n      */\n+    @Nonnull\n     Builder newBuilder();\n \n     /**\n      * Returned {@link Builder} can be used to have exact copy and also just to update a couple of fields. By default,\n      * it will copy all the fields.\n+     * So instead of following where only the `id` field is updated,\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.createGenericRecordBuilder()\n+     *                         .writeUTF(\"name\", genericRecord.readUTF(\"name\"))\n+     *                         .writeLong(\"id\", 4)\n+     *                         .writeUTF(\"surname\", genericRecord.readUTF(\"surname\"))\n+     *                         .writeInt(\"age\", genericRecord.readInt(\"age\")).build();\n+     * </pre>\n+     * `cloneWithBuilder` used as follows:\n+     * <pre>\n+     *     GenericRecord modifiedGenericRecord = genericRecord.cloneWithBuilder().writeInt(\"id\", 4).build();\n+     * </pre>\n      *\n      * @return a generic record builder with same class definition as this one and populated with same values.\n      */\n+    @Nonnull\n     Builder cloneWithBuilder();\n \n-    FieldType getFieldType(String fieldName);\n+    /**\n+     * @param fieldName the name of the field\n+     * @return field type for the given field name\n+     * @throws IllegalArgumentException if the field name does not exist in the class definition\n+     */\n+    @Nonnull\n+    FieldType getFieldType(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return true if field exists in the definition of the class. Note that returns true even if the field is null.\n      */\n-    boolean hasField(String fieldName);\n+    boolean hasField(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    boolean readBoolean(String fieldName);\n+    boolean readBoolean(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    byte readByte(String fieldName);\n+    byte readByte(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    char readChar(String fieldName);\n+    char readChar(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    double readDouble(String fieldName);\n+    double readDouble(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    float readFloat(String fieldName);\n+    float readFloat(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    int readInt(String fieldName);\n+    int readInt(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    long readLong(String fieldName);\n+    long readLong(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    short readShort(String fieldName);\n+    short readShort(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    String readUTF(String fieldName);\n+    @Nullable\n+    String readUTF(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    GenericRecord readGenericRecord(String fieldName);\n+    @Nullable\n+    GenericRecord readGenericRecord(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    boolean[] readBooleanArray(String fieldName);\n+    @Nullable\n+    boolean[] readBooleanArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    byte[] readByteArray(String fieldName);\n+    @Nullable\n+    byte[] readByteArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    char[] readCharArray(String fieldName);\n+    @Nullable\n+    char[] readCharArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    double[] readDoubleArray(String fieldName);\n+    @Nullable\n+    double[] readDoubleArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    float[] readFloatArray(String fieldName);\n+    @Nullable\n+    float[] readFloatArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    int[] readIntArray(String fieldName);\n+    @Nullable\n+    int[] readIntArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    long[] readLongArray(String fieldName);\n+    @Nullable\n+    long[] readLongArray(@Nonnull String fieldName);\n \n     /**\n      * @param fieldName the name of the field\n      * @return the value of the field\n      * @throws HazelcastSerializationException if the field name does not exist in the class definition or\n      *                                         the type of the field does not match the one in the class definition.\n      */\n-    short[] readShortArray(String fieldName);\n+    @Nullable\n+    short[] readShortArray(@Nonnull String fieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8614f1e6d524e0d0bcb5b4fc800956945d98071"}, "originalPosition": 222}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 343, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}