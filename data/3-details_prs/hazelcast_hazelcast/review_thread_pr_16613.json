{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzM5NTU2", "number": 16613, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjoxMTo0OFrODex7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjoxMTo0OFrODex7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjAxODUyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/cache/eviction/ExtendedCacheExpirationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjoxMTo0OFrOFoGrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjoxNzozMVrOFoG1AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NjgxNg==", "bodyText": "lambda style would be less verbose?", "url": "https://github.com/hazelcast/hazelcast/pull/16613#discussion_r377596816", "createdAt": "2020-02-11T12:11:48Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/eviction/ExtendedCacheExpirationTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache.eviction;\n+\n+import com.hazelcast.cache.CacheTestSupport;\n+import com.hazelcast.cache.HazelcastExpiryPolicy;\n+import com.hazelcast.cache.ICache;\n+import com.hazelcast.config.CacheConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.AssertTask;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.test.backup.BackupAccessor;\n+import com.hazelcast.test.backup.TestBackupUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.expiry.Duration;\n+import javax.cache.expiry.ExpiryPolicy;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.cache.impl.eviction.CacheClearExpiredRecordsTask.PROP_TASK_PERIOD_SECONDS;\n+import static com.hazelcast.test.OverridePropertyRule.set;\n+import static java.lang.String.valueOf;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelTest.class})\n+public class ExtendedCacheExpirationTest extends CacheTestSupport {\n+\n+    @Rule\n+    public final OverridePropertyRule overrideTaskSecondsRule = set(PROP_TASK_PERIOD_SECONDS,\n+            valueOf(Integer.MAX_VALUE));\n+\n+    @Parameterized.Parameters(name = \"useSyncBackups:{0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(new Object[][]{\n+                {true},\n+                {false}\n+        });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public boolean useSyncBackups;\n+\n+    private static final int CLUSTER_SIZE = 2;\n+    private final Duration THREE_SECONDS = new Duration(TimeUnit.SECONDS, 3);\n+\n+    protected TestHazelcastInstanceFactory factory;\n+    protected HazelcastInstance[] instances = new HazelcastInstance[3];\n+\n+    @Override\n+    protected HazelcastInstance getHazelcastInstance() {\n+        return instances[0];\n+    }\n+\n+    @Override\n+    protected void onSetup() {\n+        factory = createHazelcastInstanceFactory(CLUSTER_SIZE);\n+        for (int i = 0; i < CLUSTER_SIZE; i++) {\n+            instances[i] = factory.newHazelcastInstance(getConfig());\n+        }\n+    }\n+\n+    @Override\n+    protected Config getConfig() {\n+        return smallInstanceConfig();\n+    }\n+\n+    @Override\n+    protected void onTearDown() {\n+        factory.shutdownAll();\n+    }\n+\n+    @Test\n+    public void test_backupOperationAppliesDefaultExpiryPolicy() {\n+        HazelcastExpiryPolicy defaultExpiryPolicy = new HazelcastExpiryPolicy(THREE_SECONDS,\n+                Duration.ZERO, Duration.ZERO);\n+\n+        CacheConfig cacheConfig = createCacheConfig(defaultExpiryPolicy);\n+        final ICache cache = createCache(cacheConfig);\n+\n+        final int keyCount = 100;\n+\n+        for (int i = 0; i < keyCount; i++) {\n+            cache.put(i, i);\n+        }\n+\n+        // Check if all backup entries have applied the default expiry policy\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            BackupAccessor backupAccessor = TestBackupUtils.newCacheAccessor(instances, cache.getName(), i);\n+            for (int j = 0; j < keyCount; j++) {\n+                TestBackupUtils.assertExpirationTimeExistsEventually(j, backupAccessor);\n+            }\n+        }\n+\n+        // terminate other nodes than number zero to cause backup promotion at the 0th member\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            getNode(instances[i]).shutdown(true);\n+        }\n+\n+        assertTrueEventually(new AssertTask() {\n+            @Override\n+            public void run() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6835431a60227193a219bef1b87c8b9b4beaa69"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NzkwOQ==", "bodyText": "3.12.z doesn't support lambda style.", "url": "https://github.com/hazelcast/hazelcast/pull/16613#discussion_r377597909", "createdAt": "2020-02-11T12:14:26Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/eviction/ExtendedCacheExpirationTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache.eviction;\n+\n+import com.hazelcast.cache.CacheTestSupport;\n+import com.hazelcast.cache.HazelcastExpiryPolicy;\n+import com.hazelcast.cache.ICache;\n+import com.hazelcast.config.CacheConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.AssertTask;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.test.backup.BackupAccessor;\n+import com.hazelcast.test.backup.TestBackupUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.expiry.Duration;\n+import javax.cache.expiry.ExpiryPolicy;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.cache.impl.eviction.CacheClearExpiredRecordsTask.PROP_TASK_PERIOD_SECONDS;\n+import static com.hazelcast.test.OverridePropertyRule.set;\n+import static java.lang.String.valueOf;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelTest.class})\n+public class ExtendedCacheExpirationTest extends CacheTestSupport {\n+\n+    @Rule\n+    public final OverridePropertyRule overrideTaskSecondsRule = set(PROP_TASK_PERIOD_SECONDS,\n+            valueOf(Integer.MAX_VALUE));\n+\n+    @Parameterized.Parameters(name = \"useSyncBackups:{0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(new Object[][]{\n+                {true},\n+                {false}\n+        });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public boolean useSyncBackups;\n+\n+    private static final int CLUSTER_SIZE = 2;\n+    private final Duration THREE_SECONDS = new Duration(TimeUnit.SECONDS, 3);\n+\n+    protected TestHazelcastInstanceFactory factory;\n+    protected HazelcastInstance[] instances = new HazelcastInstance[3];\n+\n+    @Override\n+    protected HazelcastInstance getHazelcastInstance() {\n+        return instances[0];\n+    }\n+\n+    @Override\n+    protected void onSetup() {\n+        factory = createHazelcastInstanceFactory(CLUSTER_SIZE);\n+        for (int i = 0; i < CLUSTER_SIZE; i++) {\n+            instances[i] = factory.newHazelcastInstance(getConfig());\n+        }\n+    }\n+\n+    @Override\n+    protected Config getConfig() {\n+        return smallInstanceConfig();\n+    }\n+\n+    @Override\n+    protected void onTearDown() {\n+        factory.shutdownAll();\n+    }\n+\n+    @Test\n+    public void test_backupOperationAppliesDefaultExpiryPolicy() {\n+        HazelcastExpiryPolicy defaultExpiryPolicy = new HazelcastExpiryPolicy(THREE_SECONDS,\n+                Duration.ZERO, Duration.ZERO);\n+\n+        CacheConfig cacheConfig = createCacheConfig(defaultExpiryPolicy);\n+        final ICache cache = createCache(cacheConfig);\n+\n+        final int keyCount = 100;\n+\n+        for (int i = 0; i < keyCount; i++) {\n+            cache.put(i, i);\n+        }\n+\n+        // Check if all backup entries have applied the default expiry policy\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            BackupAccessor backupAccessor = TestBackupUtils.newCacheAccessor(instances, cache.getName(), i);\n+            for (int j = 0; j < keyCount; j++) {\n+                TestBackupUtils.assertExpirationTimeExistsEventually(j, backupAccessor);\n+            }\n+        }\n+\n+        // terminate other nodes than number zero to cause backup promotion at the 0th member\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            getNode(instances[i]).shutdown(true);\n+        }\n+\n+        assertTrueEventually(new AssertTask() {\n+            @Override\n+            public void run() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NjgxNg=="}, "originalCommit": {"oid": "c6835431a60227193a219bef1b87c8b9b4beaa69"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5OTIzMg==", "bodyText": "Ahh, sorry, didn't notice that this is 3.x.", "url": "https://github.com/hazelcast/hazelcast/pull/16613#discussion_r377599232", "createdAt": "2020-02-11T12:17:31Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/eviction/ExtendedCacheExpirationTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache.eviction;\n+\n+import com.hazelcast.cache.CacheTestSupport;\n+import com.hazelcast.cache.HazelcastExpiryPolicy;\n+import com.hazelcast.cache.ICache;\n+import com.hazelcast.config.CacheConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.AssertTask;\n+import com.hazelcast.test.HazelcastParallelParametersRunnerFactory;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.test.backup.BackupAccessor;\n+import com.hazelcast.test.backup.TestBackupUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.expiry.Duration;\n+import javax.cache.expiry.ExpiryPolicy;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.hazelcast.cache.impl.eviction.CacheClearExpiredRecordsTask.PROP_TASK_PERIOD_SECONDS;\n+import static com.hazelcast.test.OverridePropertyRule.set;\n+import static java.lang.String.valueOf;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n+@Category({QuickTest.class, ParallelTest.class})\n+public class ExtendedCacheExpirationTest extends CacheTestSupport {\n+\n+    @Rule\n+    public final OverridePropertyRule overrideTaskSecondsRule = set(PROP_TASK_PERIOD_SECONDS,\n+            valueOf(Integer.MAX_VALUE));\n+\n+    @Parameterized.Parameters(name = \"useSyncBackups:{0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(new Object[][]{\n+                {true},\n+                {false}\n+        });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public boolean useSyncBackups;\n+\n+    private static final int CLUSTER_SIZE = 2;\n+    private final Duration THREE_SECONDS = new Duration(TimeUnit.SECONDS, 3);\n+\n+    protected TestHazelcastInstanceFactory factory;\n+    protected HazelcastInstance[] instances = new HazelcastInstance[3];\n+\n+    @Override\n+    protected HazelcastInstance getHazelcastInstance() {\n+        return instances[0];\n+    }\n+\n+    @Override\n+    protected void onSetup() {\n+        factory = createHazelcastInstanceFactory(CLUSTER_SIZE);\n+        for (int i = 0; i < CLUSTER_SIZE; i++) {\n+            instances[i] = factory.newHazelcastInstance(getConfig());\n+        }\n+    }\n+\n+    @Override\n+    protected Config getConfig() {\n+        return smallInstanceConfig();\n+    }\n+\n+    @Override\n+    protected void onTearDown() {\n+        factory.shutdownAll();\n+    }\n+\n+    @Test\n+    public void test_backupOperationAppliesDefaultExpiryPolicy() {\n+        HazelcastExpiryPolicy defaultExpiryPolicy = new HazelcastExpiryPolicy(THREE_SECONDS,\n+                Duration.ZERO, Duration.ZERO);\n+\n+        CacheConfig cacheConfig = createCacheConfig(defaultExpiryPolicy);\n+        final ICache cache = createCache(cacheConfig);\n+\n+        final int keyCount = 100;\n+\n+        for (int i = 0; i < keyCount; i++) {\n+            cache.put(i, i);\n+        }\n+\n+        // Check if all backup entries have applied the default expiry policy\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            BackupAccessor backupAccessor = TestBackupUtils.newCacheAccessor(instances, cache.getName(), i);\n+            for (int j = 0; j < keyCount; j++) {\n+                TestBackupUtils.assertExpirationTimeExistsEventually(j, backupAccessor);\n+            }\n+        }\n+\n+        // terminate other nodes than number zero to cause backup promotion at the 0th member\n+        for (int i = 1; i < CLUSTER_SIZE; i++) {\n+            getNode(instances[i]).shutdown(true);\n+        }\n+\n+        assertTrueEventually(new AssertTask() {\n+            @Override\n+            public void run() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NjgxNg=="}, "originalCommit": {"oid": "c6835431a60227193a219bef1b87c8b9b4beaa69"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 802, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}