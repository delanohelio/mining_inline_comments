{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDY3Njc4", "number": 16618, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMDo1MFrODdqIKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMDo1MFrODdqIKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDI1NTEzOnYy", "diffSide": "LEFT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TransactionalMapProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMDo1MFrOFmYsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozNzoyNlrOFmbQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDg5MQ==", "bodyText": "If some exceptions happen in this block, we still call invalidation in the finally. We don't do this in the new code. Is it OK if we have an exceptional scenario? It seems in the new implementation we handle failures only on commit.", "url": "https://github.com/hazelcast/hazelcast/pull/16618#discussion_r375794891", "createdAt": "2020-02-06T12:00:50Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TransactionalMapProxy.java", "diffHunk": "@@ -143,19 +145,19 @@ public Object put(Object key, Object value, long ttl, TimeUnit timeUnit) {\n         checkNotNull(key, \"key can't be null\");\n         checkNotNull(value, \"value can't be null\");\n \n-        Object nearCacheKey = toNearCacheKeyWithStrategy(key);\n-        try {\n-            Data keyData = mapServiceContext.toData(nearCacheKey, partitionStrategy);\n-            Object valueBeforeTxn = toObjectIfNeeded(putInternal(keyData, mapServiceContext.toData(value), ttl, timeUnit));\n-\n-            TxnValueWrapper currentValue = txMap.get(keyData);\n-            Type type = valueBeforeTxn == null ? Type.NEW : Type.UPDATED;\n-            TxnValueWrapper wrapper = new TxnValueWrapper(value, type);\n-            txMap.put(keyData, wrapper);\n-            return currentValue == null ? valueBeforeTxn : checkIfRemoved(currentValue);\n-        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8ecbc7dce7ecd6a2e6b70ad04a28e51fe3d535"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNjczNw==", "bodyText": "Yes it is ok not to have that finally block. The right place to apply invalidations is commit phase. Depending on the failure or success near cache interaction should happen in there.", "url": "https://github.com/hazelcast/hazelcast/pull/16618#discussion_r375836737", "createdAt": "2020-02-06T13:37:26Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TransactionalMapProxy.java", "diffHunk": "@@ -143,19 +145,19 @@ public Object put(Object key, Object value, long ttl, TimeUnit timeUnit) {\n         checkNotNull(key, \"key can't be null\");\n         checkNotNull(value, \"value can't be null\");\n \n-        Object nearCacheKey = toNearCacheKeyWithStrategy(key);\n-        try {\n-            Data keyData = mapServiceContext.toData(nearCacheKey, partitionStrategy);\n-            Object valueBeforeTxn = toObjectIfNeeded(putInternal(keyData, mapServiceContext.toData(value), ttl, timeUnit));\n-\n-            TxnValueWrapper currentValue = txMap.get(keyData);\n-            Type type = valueBeforeTxn == null ? Type.NEW : Type.UPDATED;\n-            TxnValueWrapper wrapper = new TxnValueWrapper(value, type);\n-            txMap.put(keyData, wrapper);\n-            return currentValue == null ? valueBeforeTxn : checkIfRemoved(currentValue);\n-        } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDg5MQ=="}, "originalCommit": {"oid": "3b8ecbc7dce7ecd6a2e6b70ad04a28e51fe3d535"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 814, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}