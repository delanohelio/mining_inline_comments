{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDc4OTU0", "number": 16795, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoyMFrODq38Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1NTo0MlrODrvYqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjgzMzIyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoyMFrOF649vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1ODo1MVrOF8Q35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTAzOQ==", "bodyText": "I think we should rather report it as nanos and change the unit to NS too, similarly to the map counterpart: \n  \n    \n      hazelcast/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.java\n    \n    \n         Line 71\n      in\n      97ff57b\n    \n    \n    \n    \n\n        \n          \n           .incrementGetLatencyNanos(System.nanoTime() - startTimeNanos); \n        \n    \n  \n\n\nI'd expect with reporting as millis, we typically report 0.\nThe same fields in the map are not metrics though \ud83e\udd14 This seems to be an error, I send a PR to fix this.\n\n  \n    \n      hazelcast/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.java\n    \n    \n         Line 140\n      in\n      296aac5\n    \n    \n    \n    \n\n        \n          \n           private volatile long totalGetLatenciesNanos;", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r397295039", "createdAt": "2020-03-24T16:34:20Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -59,7 +60,7 @@ protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8dd843137600284a9ef28651b337f7712e28ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMDM0Ng==", "bodyText": "After taking another look, we do have metrics for maps' total get latency, but we do it a bit different:\n\n  \n    \n      hazelcast/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.java\n    \n    \n        Lines 311 to 315\n      in\n      296aac5\n    \n    \n    \n    \n\n        \n          \n           @Probe(name = MAP_METRIC_TOTAL_GET_LATENCY, unit = MS) \n        \n\n        \n          \n           @Override \n        \n\n        \n          \n           public long getTotalGetLatency() { \n        \n\n        \n          \n               return convertNanosToMillis(totalGetLatenciesNanos); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nSo we accumulate nanos, but convert it to millis for the metrics collector. I believe this is the right way to do.\n@alex-dukhno @puzpuzpuz \u261d\ufe0f", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r397300346", "createdAt": "2020-03-24T16:41:21Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -59,7 +60,7 @@ protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTAzOQ=="}, "originalCommit": {"oid": "cf8dd843137600284a9ef28651b337f7712e28ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMzM1OQ==", "bodyText": "I believe this is the right way to do.\n\nI agree. We should do the same here.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r397323359", "createdAt": "2020-03-24T17:12:42Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -59,7 +60,7 @@ protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTAzOQ=="}, "originalCommit": {"oid": "cf8dd843137600284a9ef28651b337f7712e28ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxODM4NA==", "bodyText": "@blazember how about MAX_*_LATENCY? they are collected in the same methods as total*Latencies\ne.g. \n  \n    \n      hazelcast/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java\n    \n    \n        Lines 238 to 242\n      in\n      296aac5\n    \n    \n    \n    \n\n        \n          \n           public void incrementPuts(long latency) { \n        \n\n        \n          \n               PUT_COUNT.incrementAndGet(this); \n        \n\n        \n          \n               TOTAL_PUT_LATENCIES.addAndGet(this, latency); \n        \n\n        \n          \n               setMax(this, MAX_PUT_LATENCY, latency); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nedit: I meant how they should be reported? NS?", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r397418384", "createdAt": "2020-03-24T19:48:13Z", "author": {"login": "alex-dukhno"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -59,7 +60,7 @@ protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTAzOQ=="}, "originalCommit": {"oid": "cf8dd843137600284a9ef28651b337f7712e28ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNTMzNQ==", "bodyText": "I think MS is good, the max is very likely to be in the MS range anyways. Also, the map stats report it as MS, the best is to be consistent across the structures.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398735335", "createdAt": "2020-03-26T16:58:51Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -59,7 +60,7 @@ protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTAzOQ=="}, "originalCommit": {"oid": "cf8dd843137600284a9ef28651b337f7712e28ef"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzNjk3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NzoyMFrOF7OFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NzoyMFrOF7OFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTAzMA==", "bodyText": "Changes in this class seem to be unrelated. #16781 is meant to address the problem across the whole code base.\nIf these changes are aimed to make operation latency probes for LocalReplicatedMapStats consistent, PR description has to updated at least.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r397641030", "createdAt": "2020-03-25T06:57:20Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -75,7 +75,7 @@ public Object removeWithVersion(Object key, long version) {\n     @SuppressWarnings(\"unchecked\")\n     private Object remove(InternalReplicatedMapStorage<K, V> storage, Object key) {\n         isNotNull(key, \"key\");\n-        long time = Clock.currentTimeMillis();\n+        long time = System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c6241fcdd7f799d43e31b85508a6030960a75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTU4NjA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoyMjo0M1rOF75_vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoyMjo0M1rOF75_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MDUwOA==", "bodyText": "nit: extract this and the following one methods into a common module (say, TimeUtil) and reuse them here and in LocalMapStats.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398360508", "createdAt": "2020-03-26T07:22:43Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java", "diffHunk": "@@ -400,14 +405,22 @@ public void fromJson(JsonObject json) {\n         ownedEntryCount = getLong(json, \"ownedEntryCount\", -1L);\n         ownedEntryMemoryCost = getLong(json, \"ownedEntryMemoryCost\", -1L);\n         creationTime = getLong(json, \"creationTime\", -1L);\n-        totalGetLatencies = getLong(json, \"totalGetLatencies\", -1L);\n-        totalPutLatencies = getLong(json, \"totalPutLatencies\", -1L);\n-        totalRemoveLatencies = getLong(json, \"totalRemoveLatencies\", -1L);\n+        totalGetLatenciesNanos = convertMillisToNanos(getLong(json, \"totalGetLatencies\", -1L));\n+        totalPutLatenciesNanos = convertMillisToNanos(getLong(json, \"totalPutLatencies\", -1L));\n+        totalRemoveLatenciesNanos = convertMillisToNanos(getLong(json, \"totalRemoveLatencies\", -1L));\n         maxGetLatency = getLong(json, \"maxGetLatency\", -1L);\n         maxPutLatency = getLong(json, \"maxPutLatency\", -1L);\n         maxRemoveLatency = getLong(json, \"maxRemoveLatency\", -1L);\n     }\n \n+    private static long convertNanosToMillis(long nanos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c6241fcdd7f799d43e31b85508a6030960a75"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTYxMjYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzozMjoxOFrOF76PTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzozMjoxOFrOF76PTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2NDQ5NQ==", "bodyText": "This call with nanos instead of millis as the argument automatically changes unit for maxRemoveLatency (and other max*Latency fields) in LocalReplicatedMapStatsImpl to nanos. Thus, they should be converted when reading the probe and when serializing stats to JSON, like it's done in LocalMapStatsImpl.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398364495", "createdAt": "2020-03-26T07:32:18Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -86,7 +86,7 @@ private Object remove(InternalReplicatedMapStorage<K, V> storage, Object key) {\n             storage.remove(marshalledKey, current);\n         }\n         if (replicatedMapConfig.isStatisticsEnabled()) {\n-            getStats().incrementRemoves(Clock.currentTimeMillis() - time);\n+            getStats().incrementRemoves(System.nanoTime() - time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c6241fcdd7f799d43e31b85508a6030960a75"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTYxODAxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzozNDoyMFrOF76SiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzozNDoyMFrOF76SiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2NTMyMQ==", "bodyText": "nit: rename argument of #incrementRemoves() to latencyNanos and, optionally, rename the method itself to #incrementRemovesLatencyNanos (see LocalMapStatsImpl for example). The same consideration applies to other #increment*() methods.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398365321", "createdAt": "2020-03-26T07:34:20Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -86,7 +86,7 @@ private Object remove(InternalReplicatedMapStorage<K, V> storage, Object key) {\n             storage.remove(marshalledKey, current);\n         }\n         if (replicatedMapConfig.isStatisticsEnabled()) {\n-            getStats().incrementRemoves(Clock.currentTimeMillis() - time);\n+            getStats().incrementRemoves(System.nanoTime() - time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c6241fcdd7f799d43e31b85508a6030960a75"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTkxNzIxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1NTo0MlrOF8Qu8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxNTozMVrOF8UPgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczMzA0MA==", "bodyText": "These should be converted to MS too.", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398733040", "createdAt": "2020-03-26T16:55:42Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java", "diffHunk": "@@ -235,62 +232,68 @@ public long getPutOperationCount() {\n         return putCount;\n     }\n \n-    public void incrementPuts(long latency) {\n+    public void incrementPutsNanos(long latencyNanos) {\n         PUT_COUNT.incrementAndGet(this);\n-        TOTAL_PUT_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_PUT_LATENCY, latency);\n+        TOTAL_PUT_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_PUT_LATENCY, latencyNanos);\n     }\n \n     @Override\n     public long getGetOperationCount() {\n         return getCount;\n     }\n \n-    public void incrementGets(long latency) {\n+    public void incrementGetsNanos(long latencyNanos) {\n         GET_COUNT.incrementAndGet(this);\n-        TOTAL_GET_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_GET_LATENCY, latency);\n+        TOTAL_GET_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_GET_LATENCY, latencyNanos);\n     }\n \n     @Override\n     public long getRemoveOperationCount() {\n         return removeCount;\n     }\n \n-    public void incrementRemoves(long latency) {\n+    public void incrementRemovesNanos(long latencyNanos) {\n         REMOVE_COUNT.incrementAndGet(this);\n-        TOTAL_REMOVE_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_REMOVE_LATENCY, latency);\n+        TOTAL_REMOVE_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_REMOVE_LATENCY, latencyNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_PUT_LATENCIES, unit = MS)\n     @Override\n     public long getTotalPutLatency() {\n-        return totalPutLatencies;\n+        return convertNanosToMillis(totalPutLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_GET_LATENCIES, unit = MS)\n     @Override\n     public long getTotalGetLatency() {\n-        return totalGetLatencies;\n+        return convertNanosToMillis(totalGetLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_REMOVE_LATENCIES, unit = MS)\n     @Override\n     public long getTotalRemoveLatency() {\n-        return totalRemoveLatencies;\n+        return convertNanosToMillis(totalRemoveLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_MAX_GET_LATENCY, unit = MS)\n     @Override\n     public long getMaxPutLatency() {\n-        return maxPutLatency;\n+        return maxPutLatencyNanos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "518f0bd2dcc6981e8db9601e457eca2864209de5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MDUzMA==", "bodyText": "Nice catch. I don't know why I didn't notice this. \ud83d\ude05", "url": "https://github.com/hazelcast/hazelcast/pull/16795#discussion_r398790530", "createdAt": "2020-03-26T18:15:31Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalReplicatedMapStatsImpl.java", "diffHunk": "@@ -235,62 +232,68 @@ public long getPutOperationCount() {\n         return putCount;\n     }\n \n-    public void incrementPuts(long latency) {\n+    public void incrementPutsNanos(long latencyNanos) {\n         PUT_COUNT.incrementAndGet(this);\n-        TOTAL_PUT_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_PUT_LATENCY, latency);\n+        TOTAL_PUT_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_PUT_LATENCY, latencyNanos);\n     }\n \n     @Override\n     public long getGetOperationCount() {\n         return getCount;\n     }\n \n-    public void incrementGets(long latency) {\n+    public void incrementGetsNanos(long latencyNanos) {\n         GET_COUNT.incrementAndGet(this);\n-        TOTAL_GET_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_GET_LATENCY, latency);\n+        TOTAL_GET_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_GET_LATENCY, latencyNanos);\n     }\n \n     @Override\n     public long getRemoveOperationCount() {\n         return removeCount;\n     }\n \n-    public void incrementRemoves(long latency) {\n+    public void incrementRemovesNanos(long latencyNanos) {\n         REMOVE_COUNT.incrementAndGet(this);\n-        TOTAL_REMOVE_LATENCIES.addAndGet(this, latency);\n-        setMax(this, MAX_REMOVE_LATENCY, latency);\n+        TOTAL_REMOVE_LATENCIES.addAndGet(this, latencyNanos);\n+        setMax(this, MAX_REMOVE_LATENCY, latencyNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_PUT_LATENCIES, unit = MS)\n     @Override\n     public long getTotalPutLatency() {\n-        return totalPutLatencies;\n+        return convertNanosToMillis(totalPutLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_GET_LATENCIES, unit = MS)\n     @Override\n     public long getTotalGetLatency() {\n-        return totalGetLatencies;\n+        return convertNanosToMillis(totalGetLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_METRIC_TOTAL_REMOVE_LATENCIES, unit = MS)\n     @Override\n     public long getTotalRemoveLatency() {\n-        return totalRemoveLatencies;\n+        return convertNanosToMillis(totalRemoveLatenciesNanos);\n     }\n \n+    @Probe(name = REPLICATED_MAP_MAX_GET_LATENCY, unit = MS)\n     @Override\n     public long getMaxPutLatency() {\n-        return maxPutLatency;\n+        return maxPutLatencyNanos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczMzA0MA=="}, "originalCommit": {"oid": "518f0bd2dcc6981e8db9601e457eca2864209de5"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 769, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}