{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MzcyODIw", "number": 17644, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0MTowNlrOEo86_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyNDowMVrOEqaa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzc2NjM3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0MTowNlrOHaVjqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDozMjowN1rOHaXVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3ODIxOQ==", "bodyText": "Shouldn't this be out of else block? What if this is on local member?", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r497378219", "createdAt": "2020-09-30T09:41:06Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -367,6 +367,7 @@ private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo, Member\n                 member = clusterService.promoteAndGetLocalMember();\n             } else {\n                 member = createMember(newMemberInfo, member.getAttributes());\n+                node.partitionService.memberAdded(member);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3362c711db0de10598187c347162ac59cb779705"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MjYwOA==", "bodyText": "On the local member the  node.partitionService.memberAdded(member); is doing update only when the node is not local. For local case, it issues a special task only when the node is a master. But the master is notified about promotion without this change. This is why I decided that it is enough to put it in the else.", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r497382608", "createdAt": "2020-09-30T09:48:19Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -367,6 +367,7 @@ private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo, Member\n                 member = clusterService.promoteAndGetLocalMember();\n             } else {\n                 member = createMember(newMemberInfo, member.getAttributes());\n+                node.partitionService.memberAdded(member);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3ODIxOQ=="}, "originalCommit": {"oid": "3362c711db0de10598187c347162ac59cb779705"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzQ0Mg==", "bodyText": "Also, the problem is when the member is not aware of other  members being promoted. That case is covered in the else branch", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r497383442", "createdAt": "2020-09-30T09:49:39Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -367,6 +367,7 @@ private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo, Member\n                 member = clusterService.promoteAndGetLocalMember();\n             } else {\n                 member = createMember(newMemberInfo, member.getAttributes());\n+                node.partitionService.memberAdded(member);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3ODIxOQ=="}, "originalCommit": {"oid": "3362c711db0de10598187c347162ac59cb779705"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwNzQzMg==", "bodyText": "I think issue is a non-master member is not aware of any member being promoted, including itself. So maybe we should modify node.partitionService.memberAdded(member) to update `memberGroupSize even with local member.\nSee this modified test:\n    @org.junit.Test\n    public void lite_member_promotion_data_loss() throws InterruptedException {\n        int entryCount = 1000;\n\n        TestHazelcastInstanceFactory factory = new TestHazelcastInstanceFactory();\n        Config config = new Config().setLiteMember(true);\n\n        // start first hazelcast instance as a lite member\n        HazelcastInstance firstHazelcastInstance = factory.newHazelcastInstance(config);\n\n        // start second hazelcast instance as a lite member\n        HazelcastInstance secondHazelcastInstance = factory.newHazelcastInstance(config);\n\n        // promote all instances to data members\n        firstHazelcastInstance.getCluster().promoteLocalLiteMember();\n        secondHazelcastInstance.getCluster().promoteLocalLiteMember();\n\n        // check if cluster is in a good shape\n        assertTrueEventually(() -> assertTrue(firstHazelcastInstance.getPartitionService().isClusterSafe()));\n\n        // insert some dummy data into the testing map\n        String mapName = randomMapName();\n        IMap<String, String> testMap = firstHazelcastInstance.getMap(mapName);\n        for (int i = 0; i < entryCount; ++i) {\n            testMap.put(\"key\" + i, \"value\" + i);\n        }\n\n        // check all data is correctly inserted\n        assertEquals(entryCount, testMap.size());\n\n        // kill second instance\n        secondHazelcastInstance.getLifecycleService().terminate();\n\n        // backup count for the map is set to 1\n        // even with 1 node down, no data loss is expected\n        assertTrueEventually(() -> assertEquals(entryCount, firstHazelcastInstance.getMap(mapName).size()));\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r497407432", "createdAt": "2020-09-30T10:32:07Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -367,6 +367,7 @@ private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo, Member\n                 member = clusterService.promoteAndGetLocalMember();\n             } else {\n                 member = createMember(newMemberInfo, member.getAttributes());\n+                node.partitionService.memberAdded(member);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3ODIxOQ=="}, "originalCommit": {"oid": "3362c711db0de10598187c347162ac59cb779705"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU0ODcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo1OTo0MVrOHcX5_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo1OTo0MVrOHcX5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMzg1Mg==", "bodyText": "Not needed anymore?", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r499513852", "createdAt": "2020-10-05T10:59:41Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -368,6 +376,7 @@ private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo, Member\n             } else {\n                 member = createMember(newMemberInfo, member.getAttributes());\n             }\n+            node.partitionService.memberAdded(member);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336f25081a7becba81d896423a6a950ddc46daeb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODkyNzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/cluster/impl/PromoteLiteMemberTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozOToyNVrOHclKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozOToyNVrOHclKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTEwOA==", "bodyText": "same here.", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r499731108", "createdAt": "2020-10-05T16:39:25Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/cluster/impl/PromoteLiteMemberTest.java", "diffHunk": "@@ -323,6 +326,86 @@ public void promotion_shouldFail_whenMasterIsSuspected_duringPromotion() throws\n         }\n     }\n \n+    @Test\n+    public void lite_member_promotion_data_loss() throws InterruptedException {\n+        int entryCount = 1000;\n+\n+        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory();\n+        Config config = new Config().setLiteMember(true);\n+\n+        // start first hazelcast instance as a lite member\n+        HazelcastInstance firstHazelcastInstance = factory.newHazelcastInstance(config);\n+\n+        // start second and third hazelcast instances as a lite member\n+        HazelcastInstance secondHazelcastInstance = factory.newHazelcastInstance(config);\n+        HazelcastInstance thirdHazelcastInstance = factory.newHazelcastInstance(config);\n+\n+        // promote all instances to data members\n+        firstHazelcastInstance.getCluster().promoteLocalLiteMember();\n+        secondHazelcastInstance.getCluster().promoteLocalLiteMember();\n+        thirdHazelcastInstance.getCluster().promoteLocalLiteMember();\n+\n+        // check if cluster is in a good shape\n+        assertTrueEventually(() -> assertTrue(firstHazelcastInstance.getPartitionService().isClusterSafe()));\n+\n+        // insert some dummy data into the testing map\n+        String mapName = randomMapName();\n+        IMap<String, String> testMap = firstHazelcastInstance.getMap(mapName);\n+        for (int i = 0; i < entryCount; ++i) {\n+            testMap.put(\"key\" + i, \"value\" + i);\n+        }\n+\n+        // check all data is correctly inserted\n+        assertEquals(entryCount, testMap.size());\n+\n+        // kill second instance\n+        secondHazelcastInstance.getLifecycleService().terminate();\n+\n+        // backup count for the map is set to 1\n+        // even with 1 node down, no data loss is expected\n+        assertTrueEventually(() -> assertEquals(entryCount, firstHazelcastInstance.getMap(mapName).size()));\n+        assertTrueEventually(() -> assertEquals(entryCount, thirdHazelcastInstance.getMap(mapName).size()));\n+    }\n+\n+    @Test\n+    public void lite_member_promotion_data_loss2() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0509105f07b4a645459cb82b5156481ad884604"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODkyNzQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/cluster/impl/PromoteLiteMemberTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozOToyN1rOHclKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozOToyN1rOHclKtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTEyNA==", "bodyText": "can we give a better name to test? Seeing the state tested against and expected behavior in test method name would be helpful for the future readers.", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r499731124", "createdAt": "2020-10-05T16:39:27Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/cluster/impl/PromoteLiteMemberTest.java", "diffHunk": "@@ -323,6 +326,86 @@ public void promotion_shouldFail_whenMasterIsSuspected_duringPromotion() throws\n         }\n     }\n \n+    @Test\n+    public void lite_member_promotion_data_loss() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0509105f07b4a645459cb82b5156481ad884604"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA3NDA1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMDo0NFrOHcmmAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMDo0NFrOHcmmAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NDQ5Nw==", "bodyText": "it is hard to to follow similar named methods maybe we can make updateMemberGroupsSize() method public and can call it here: node.partitionService.getPartitionStateManager().updateMemberGroupsSize()", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r499754497", "createdAt": "2020-10-05T17:20:44Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -342,6 +346,10 @@ void updateMembers(MembersView membersView) {\n \n         setMembers(MemberMap.createNew(membersView.getVersion(), members));\n \n+        if (updatedLiteMember) {\n+            updateMembersGroupSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0509105f07b4a645459cb82b5156481ad884604"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA4NDk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyNDowMVrOHcmtFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyNDowMVrOHcmtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjMwOQ==", "bodyText": "can you please add a short comment to the code to explain the meaning of updatedLiteMember?", "url": "https://github.com/hazelcast/hazelcast/pull/17644#discussion_r499756309", "createdAt": "2020-10-05T17:24:01Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -305,11 +305,15 @@ void updateMembers(MembersView membersView) {\n \n         MemberImpl[] members = new MemberImpl[membersView.size()];\n         int memberIndex = 0;\n+        boolean updatedLiteMember = false;\n         for (MemberInfo memberInfo : membersView.getMembers()) {\n             Address address = memberInfo.getAddress();\n             MemberImpl member = currentMemberMap.getMember(address);\n \n             if (member != null && member.getUuid().equals(memberInfo.getUuid())) {\n+                if (member.isLiteMember()) {\n+                    updatedLiteMember = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0509105f07b4a645459cb82b5156481ad884604"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}