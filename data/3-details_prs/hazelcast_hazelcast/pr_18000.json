{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDA5MTI2", "number": 18000, "title": "Fixes read of generic record", "bodyText": "Position of BufferObjectDataInput is corrected so that\nsubsequent items can be read correctly after reading a\ngeneric record.", "createdAt": "2020-12-23T20:10:25Z", "url": "https://github.com/hazelcast/hazelcast/pull/18000", "merged": true, "mergeCommit": {"oid": "7452eb96aefdcfff4919f6f82ca607edcd64bd3e"}, "closed": true, "closedAt": "2020-12-25T11:03:12Z", "author": {"login": "sancar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpOQnagFqTU1ODM3MjM3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpjh9ZAFqTU1ODc3NzkyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzcyMzc2", "url": "https://github.com/hazelcast/hazelcast/pull/18000#pullrequestreview-558372376", "createdAt": "2020-12-24T06:42:41Z", "commit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjo0Mjo0MVrOILAuBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMzo1MlrOILBCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA==", "bodyText": "Should be javax.annotation.Nonnull", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548417028", "createdAt": "2020-12-24T06:42:41Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -16,17 +16,20 @@\n \n package com.hazelcast.internal.serialization.impl.portable;\n \n+import com.hazelcast.internal.serialization.impl.AbstractGenericRecord;\n import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.nio.serialization.FieldDefinition;\n import com.hazelcast.nio.serialization.FieldType;\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxODcyNA==", "bodyText": "Should probably use Objects#hashCode, as Objects#hash is nothing more than Arrays#hashCode called on varargs array.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548418724", "createdAt": "2020-12-24T06:49:24Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTA4MA==", "bodyText": "nit: could be renamed to fieldNames", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419080", "createdAt": "2020-12-24T06:50:46Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());\n+        Set<String> thisFieldNames = getFieldNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg==", "bodyText": "This method looks like something specific to Portables. How it will work for, say, the new serialization format?", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419306", "createdAt": "2020-12-24T06:51:45Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTI2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashcode implementation\n          \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashCode implementations.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421261", "createdAt": "2020-12-24T06:59:27Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTQzOA==", "bodyText": "Should be javax.annotation.Nonnull", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421438", "createdAt": "2020-12-24T07:00:18Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableInternalGenericRecord.java", "diffHunk": "@@ -26,9 +27,11 @@\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import com.hazelcast.nio.serialization.Portable;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMjI4Mw==", "bodyText": "nit: looks like a leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548422283", "createdAt": "2020-12-24T07:03:52Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/AbstractGenericRecordTest.java", "diffHunk": "@@ -134,6 +134,8 @@ public void testPutWithoutFactory_readAsPortable() throws IOException {\n         IMap<Object, Object> clusterMap = instances[0].getMap(\"test\");\n         clusterMap.put(1, expected);\n \n+        System.out.println(expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b457d201635740af365976c2e9de9eff0e3295be"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Njc2MjE1", "url": "https://github.com/hazelcast/hazelcast/pull/18000#pullrequestreview-558676215", "createdAt": "2020-12-24T16:11:38Z", "commit": {"oid": "5458b2b9e19624050808c0fede84858285bceaf8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "committedDate": "2020-12-24T19:36:56Z", "message": "Fixes read of generic record\n\nPosition of BufferObjectDataInput is corrected so that\nsubsequent items can be read correctly after reading a\ngeneric record."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5458b2b9e19624050808c0fede84858285bceaf8", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5458b2b9e19624050808c0fede84858285bceaf8", "committedDate": "2020-12-24T15:01:12Z", "message": "addressing review comments"}, "afterCommit": {"oid": "f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "committedDate": "2020-12-24T19:36:56Z", "message": "Fixes read of generic record\n\nPosition of BufferObjectDataInput is corrected so that\nsubsequent items can be read correctly after reading a\ngeneric record."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Nzc3OTIz", "url": "https://github.com/hazelcast/hazelcast/pull/18000#pullrequestreview-558777923", "createdAt": "2020-12-25T07:51:54Z", "commit": {"oid": "f5bc94ac7bd6e2939b9c4b420df719ee85dce41a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3056, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}