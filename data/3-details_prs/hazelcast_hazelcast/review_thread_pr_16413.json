{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODg2ODQ0", "number": 16413, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1NjoxMlrODWL4YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMjowMjo0NlrODWOq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg5OTIxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/EchoTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1NjoxMlrOFazODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1NjoxMlrOFazODQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NjQ3Nw==", "bodyText": "Will be removed from final PR", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363646477", "createdAt": "2020-01-07T08:56:12Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/EchoTask.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1437112935129ac50e58ffdc85b8a987e6bff72"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTg5OTcxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/Main.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1NjoyM1rOFazOTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwODo1NjoyM1rOFazOTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NjU0Mg==", "bodyText": "Will be removed in final PR", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363646542", "createdAt": "2020-01-07T08:56:23Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/Main.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1437112935129ac50e58ffdc85b8a987e6bff72"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjA2NDgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDowMDoyOFrOFa0zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDowMDoyOFrOFa0zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY3MjQ4Nw==", "bodyText": "Minor^2: redundant empty line.", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363672487", "createdAt": "2020-01-07T10:00:28Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "diffHunk": "@@ -359,4 +375,60 @@ private void sendBatch(int partitionId, String name, List<ScheduledExecutorMerge\n             invoke(SERVICE_NAME, operation, partitionId);\n         }\n     }\n+\n+    private class StatsLoggerThread extends HazelcastManagedThread {\n+        private final Map<String, MutableInteger> tasksSizes = new HashMap<String, MutableInteger>();\n+        private final ILogger logger = nodeEngine.getLogger(DistributedScheduledExecutorService.class);\n+        private final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        private final long logDelayMillis;\n+        private volatile boolean shutdown;\n+\n+        public StatsLoggerThread(int logDelaySeconds) {\n+            this.logDelayMillis = TimeUnit.SECONDS.toMillis(logDelaySeconds);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc29637ad63f8bc21952d7163662e6297fab5e76"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjA3MTY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDowMjo1OFrOFa03zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDowMjo1OFrOFa03zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY3MzU1MA==", "bodyText": "This can be replaced with partition.isLocal(). Also, it might deserve a note somewhere that the reported sizes might be inaccurate during a migration.", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363673550", "createdAt": "2020-01-07T10:02:58Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "diffHunk": "@@ -359,4 +375,60 @@ private void sendBatch(int partitionId, String name, List<ScheduledExecutorMerge\n             invoke(SERVICE_NAME, operation, partitionId);\n         }\n     }\n+\n+    private class StatsLoggerThread extends HazelcastManagedThread {\n+        private final Map<String, MutableInteger> tasksSizes = new HashMap<String, MutableInteger>();\n+        private final ILogger logger = nodeEngine.getLogger(DistributedScheduledExecutorService.class);\n+        private final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        private final long logDelayMillis;\n+        private volatile boolean shutdown;\n+\n+        public StatsLoggerThread(int logDelaySeconds) {\n+            this.logDelayMillis = TimeUnit.SECONDS.toMillis(logDelaySeconds);\n+        }\n+\n+\n+        private void shutdown() {\n+            shutdown = true;\n+            interrupt();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!shutdown) {\n+                try {\n+                    Thread.sleep(logDelayMillis);\n+                } catch (InterruptedException e) {\n+                    continue;\n+                }\n+\n+                tasksSizes.clear();\n+                for (ScheduledExecutorPartition partition : partitions) {\n+                    if (partition == null) {\n+                        continue;\n+                    }\n+\n+                    if (partitionService.getPartitionOwner(partition.partitionId()) != nodeEngine.getThisAddress()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc29637ad63f8bc21952d7163662e6297fab5e76"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjM1NjIyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMjowMjo0NlrOFa3jGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMzo0NzoxOVrOFa5yug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxNzQwMA==", "bodyText": "Why old_value + current_value? If it was 1 task in the previous log, and now we have two tasks in the container, we will log 3?", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363717400", "createdAt": "2020-01-07T12:02:46Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "diffHunk": "@@ -359,4 +375,60 @@ private void sendBatch(int partitionId, String name, List<ScheduledExecutorMerge\n             invoke(SERVICE_NAME, operation, partitionId);\n         }\n     }\n+\n+    private class StatsLoggerThread extends HazelcastManagedThread {\n+        private final Map<String, MutableInteger> tasksSizes = new HashMap<String, MutableInteger>();\n+        private final ILogger logger = nodeEngine.getLogger(DistributedScheduledExecutorService.class);\n+        private final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        private final long logDelayMillis;\n+        private volatile boolean shutdown;\n+\n+        public StatsLoggerThread(int logDelaySeconds) {\n+            this.logDelayMillis = TimeUnit.SECONDS.toMillis(logDelaySeconds);\n+        }\n+\n+\n+        private void shutdown() {\n+            shutdown = true;\n+            interrupt();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!shutdown) {\n+                try {\n+                    Thread.sleep(logDelayMillis);\n+                } catch (InterruptedException e) {\n+                    continue;\n+                }\n+\n+                tasksSizes.clear();\n+                for (ScheduledExecutorPartition partition : partitions) {\n+                    if (partition == null) {\n+                        continue;\n+                    }\n+\n+                    if (partitionService.getPartitionOwner(partition.partitionId()) != nodeEngine.getThisAddress()) {\n+                        // skip non primary partitions.\n+                        continue;\n+                    }\n+\n+                    for (Map.Entry<String, ScheduledExecutorContainer> entry : partition.containers.entrySet()) {\n+                        String name = entry.getKey();\n+                        ScheduledExecutorContainer container = entry.getValue();\n+                        MutableInteger tasksSize = tasksSizes.get(name);\n+                        if (tasksSize == null) {\n+                            tasksSize = new MutableInteger();\n+                            tasksSizes.put(name, tasksSize);\n+                        }\n+                        tasksSize.value += container.tasks.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc29637ad63f8bc21952d7163662e6297fab5e76"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1NDE3MA==", "bodyText": "An iteration over all the partitions is needed and for the same ScheduledExecutor we could run into multiple ScheduledExecutorContainer instances (for each partition would see one).", "url": "https://github.com/hazelcast/hazelcast/pull/16413#discussion_r363754170", "createdAt": "2020-01-07T13:47:19Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/DistributedScheduledExecutorService.java", "diffHunk": "@@ -359,4 +375,60 @@ private void sendBatch(int partitionId, String name, List<ScheduledExecutorMerge\n             invoke(SERVICE_NAME, operation, partitionId);\n         }\n     }\n+\n+    private class StatsLoggerThread extends HazelcastManagedThread {\n+        private final Map<String, MutableInteger> tasksSizes = new HashMap<String, MutableInteger>();\n+        private final ILogger logger = nodeEngine.getLogger(DistributedScheduledExecutorService.class);\n+        private final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        private final long logDelayMillis;\n+        private volatile boolean shutdown;\n+\n+        public StatsLoggerThread(int logDelaySeconds) {\n+            this.logDelayMillis = TimeUnit.SECONDS.toMillis(logDelaySeconds);\n+        }\n+\n+\n+        private void shutdown() {\n+            shutdown = true;\n+            interrupt();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!shutdown) {\n+                try {\n+                    Thread.sleep(logDelayMillis);\n+                } catch (InterruptedException e) {\n+                    continue;\n+                }\n+\n+                tasksSizes.clear();\n+                for (ScheduledExecutorPartition partition : partitions) {\n+                    if (partition == null) {\n+                        continue;\n+                    }\n+\n+                    if (partitionService.getPartitionOwner(partition.partitionId()) != nodeEngine.getThisAddress()) {\n+                        // skip non primary partitions.\n+                        continue;\n+                    }\n+\n+                    for (Map.Entry<String, ScheduledExecutorContainer> entry : partition.containers.entrySet()) {\n+                        String name = entry.getKey();\n+                        ScheduledExecutorContainer container = entry.getValue();\n+                        MutableInteger tasksSize = tasksSizes.get(name);\n+                        if (tasksSize == null) {\n+                            tasksSize = new MutableInteger();\n+                            tasksSizes.put(name, tasksSize);\n+                        }\n+                        tasksSize.value += container.tasks.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxNzQwMA=="}, "originalCommit": {"oid": "cc29637ad63f8bc21952d7163662e6297fab5e76"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 833, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}