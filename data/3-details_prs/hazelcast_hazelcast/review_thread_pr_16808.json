{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDU5Mjc3", "number": 16808, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1Njo0N1rODs_Tbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1NTo0OFrODtGHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTAxMTAzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1Njo0N1rOF-Jlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0OTozMlrOF-Liyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzExNQ==", "bodyText": "Should the actual logic not be done on the server side?\nIt seems you are first getting the value, then convert it and try to set it.\nIf it is all done remotely, less remote calls are involved.", "url": "https://github.com/hazelcast/hazelcast/pull/16808#discussion_r400713115", "createdAt": "2020-03-31T07:56:47Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2014,4 +2015,32 @@ private V computeIfPresentLocally(K key,\n             }\n         }\n     }\n+\n+    @Override\n+    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(mappingFunction, NULL_FUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeIfAbsentLocally(key, mappingFunction);\n+    }\n+\n+    private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mappingFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5aee61cbd9f66b04aad8b9838caaa737d6716"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTE2Mg==", "bodyText": "Hi Peter,\nFor the client, it was decided to execute the function locally -\n#16636 (comment)", "url": "https://github.com/hazelcast/hazelcast/pull/16808#discussion_r400745162", "createdAt": "2020-03-31T08:49:32Z", "author": {"login": "webashutosh"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2014,4 +2015,32 @@ private V computeIfPresentLocally(K key,\n             }\n         }\n     }\n+\n+    @Override\n+    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(mappingFunction, NULL_FUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeIfAbsentLocally(key, mappingFunction);\n+    }\n+\n+    private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mappingFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzExNQ=="}, "originalCommit": {"oid": "eef5aee61cbd9f66b04aad8b9838caaa737d6716"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjEyNjY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1NTo0OFrOF-UZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1NTo0OFrOF-UZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MDE2MA==", "bodyText": "Now that I see it, can you add @Nonnull annotations to all parameters here, to computeIfPresent and all of the implementations?", "url": "https://github.com/hazelcast/hazelcast/pull/16808#discussion_r400890160", "createdAt": "2020-03-31T12:55:48Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/IMap.java", "diffHunk": "@@ -2955,4 +2956,26 @@ default void addIndex(IndexType type, String... attributes) {\n      */\n     V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * <p> </p>\n+     * <p>\n+     *     If the supplied {@code mappingFunction} is a lambda, anonymous class or an inner class,\n+     *     it would be executed locally. Same would happen if it is not serializable.\n+     *     This may result in two round-trips between hazelcast nodes.\n+     *</p>\n+     * <p>\n+     *     Otherwise (i.e. if it is a top-level class or a member class, and it is serializable), the function <i>may be</i> sent\n+     *     to the server which owns the key. This results in a single remote call. Also, the function would have exclusive\n+     *     access to the map entry during its execution.\n+     *     Note that in this case, the function class must be deployed on all the servers (either physically\n+     *     or via user-code-deployment).\n+     * </p>\n+     * <p>\n+     *     When this method is invoked using a hazelcast-client instance, the {@code mappingFunction} is always executed locally\n+     * </p>\n+     */\n+    V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef5aee61cbd9f66b04aad8b9838caaa737d6716"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 777, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}