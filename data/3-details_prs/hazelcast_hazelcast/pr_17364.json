{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Nzk2NTkw", "number": 17364, "title": "Add metric to check cloud used for deployment", "bodyText": "", "createdAt": "2020-08-17T12:20:19Z", "url": "https://github.com/hazelcast/hazelcast/pull/17364", "merged": true, "mergeCommit": {"oid": "c915cffbf02dfe7585b6c0fca17835f3ab68ba71"}, "closed": true, "closedAt": "2020-08-25T12:41:39Z", "author": {"login": "chanmol1999"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_xbjIgH2gAyNDY4Nzk2NTkwOjFjOTQ2M2VlNjJlOWUyOWRkNGU5MzI2MWNlNWIzYjRlZDEwZDk3NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCWikMgFqTQ3NDQzOTAyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c9463ee62e9e29dd4e93261ce5b3b4ed10d9752", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1c9463ee62e9e29dd4e93261ce5b3b4ed10d9752", "committedDate": "2020-08-17T12:18:45Z", "message": "Add metric to check cloud used for deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ea12bc931589bf934396d79e5d287d0c444afb74", "committedDate": "2020-08-18T07:42:55Z", "message": "Used Path Interface for Hard Coded Paths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTYzOTgx", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-469163981", "createdAt": "2020-08-18T09:44:49Z", "commit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo0NDo0OVrOHCL2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1Mzo1NFrOHCMLEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MzQyMg==", "bodyText": "I think we can get by here without calling toFile() so that you don't have to go into that cumbersome mocking with PowerMockito. Path has a toRealPath() method which throws an IOException if the file doesn't exist. You can catch and use that exception.\nSame for the DOCKER_FILE_PATH existence check.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472053422", "createdAt": "2020-08-18T09:44:49Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.io.File;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.hazelcast.internal.util.EmptyStatement.ignore;\n+\n+public class CloudInfoCollector implements MetricsCollector {\n+    private static final int TIMEOUT = 1000;\n+    private static final int RESPONSE_OK = 200;\n+\n+    private static final Path KUBERNETES_TOKEN_PATH = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n+    private static final Path DOCKER_FILE_PATH = Paths.get(\"/.dockerenv\");\n+    private String awsEndPoint;\n+    private String azureEndPoint;\n+    private String gcpEndPoint;\n+\n+    public CloudInfoCollector(String awsEndpoint, String azureEndpoint, String gcpEndpoint) {\n+        awsEndPoint = awsEndpoint;\n+        azureEndPoint = azureEndpoint;\n+        gcpEndPoint = gcpEndpoint;\n+    }\n+\n+    public void modifyEndPoints(String awsEndpoint, String azureEndpoint, String gcpEndpoint) {\n+        awsEndPoint = awsEndpoint;\n+        azureEndPoint = azureEndpoint;\n+        gcpEndPoint = gcpEndpoint;\n+    }\n+\n+    public Map<PhoneHomeMetrics, String> computeMetrics(Node hazelcastNode) {\n+\n+        Map<PhoneHomeMetrics, String> environmentInfo = new HashMap<>();\n+\n+        if (check(awsEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"A\");\n+        } else if (check(azureEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"Z\");\n+        } else if (check(gcpEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"G\");\n+        } else {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"-1\");\n+        }\n+\n+\n+        File dockerFile =DOCKER_FILE_PATH.toFile();\n+        if (dockerFile.exists()) {\n+            File kubernetesToken = KUBERNETES_TOKEN_PATH.toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTQ0NQ==", "bodyText": "It would make more sense to define TIMEOUT as 2000 instead of multiplying 1000 at two places. Also, isn't it a duplicate of PhoneHome#fetchWebService() ? Please resolve the duplication, it isn't complicated in this case.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472055445", "createdAt": "2020-08-18T09:48:16Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.io.File;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.hazelcast.internal.util.EmptyStatement.ignore;\n+\n+public class CloudInfoCollector implements MetricsCollector {\n+    private static final int TIMEOUT = 1000;\n+    private static final int RESPONSE_OK = 200;\n+\n+    private static final Path KUBERNETES_TOKEN_PATH = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n+    private static final Path DOCKER_FILE_PATH = Paths.get(\"/.dockerenv\");\n+    private String awsEndPoint;\n+    private String azureEndPoint;\n+    private String gcpEndPoint;\n+\n+    public CloudInfoCollector(String awsEndpoint, String azureEndpoint, String gcpEndpoint) {\n+        awsEndPoint = awsEndpoint;\n+        azureEndPoint = azureEndpoint;\n+        gcpEndPoint = gcpEndpoint;\n+    }\n+\n+    public void modifyEndPoints(String awsEndpoint, String azureEndpoint, String gcpEndpoint) {\n+        awsEndPoint = awsEndpoint;\n+        azureEndPoint = azureEndpoint;\n+        gcpEndPoint = gcpEndpoint;\n+    }\n+\n+    public Map<PhoneHomeMetrics, String> computeMetrics(Node hazelcastNode) {\n+\n+        Map<PhoneHomeMetrics, String> environmentInfo = new HashMap<>();\n+\n+        if (check(awsEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"A\");\n+        } else if (check(azureEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"Z\");\n+        } else if (check(gcpEndPoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"G\");\n+        } else {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"-1\");\n+        }\n+\n+\n+        File dockerFile =DOCKER_FILE_PATH.toFile();\n+        if (dockerFile.exists()) {\n+            File kubernetesToken = KUBERNETES_TOKEN_PATH.toFile();\n+            if (kubernetesToken.exists() && !kubernetesToken.isDirectory()) {\n+                environmentInfo.put(PhoneHomeMetrics.DOCKER, \"K\");\n+            } else {\n+                environmentInfo.put(PhoneHomeMetrics.DOCKER, \"D\");\n+            }\n+        } else {\n+            environmentInfo.put(PhoneHomeMetrics.DOCKER, \"N\");\n+        }\n+        return environmentInfo;\n+    }\n+\n+    private boolean check(String urlStr) {\n+        HttpURLConnection conn = null;\n+        boolean response;\n+        try {\n+            URL url = new URL(urlStr);\n+            conn = (HttpURLConnection) url.openConnection();\n+            conn.setConnectTimeout(TIMEOUT * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzIwMw==", "bodyText": "Are you sure about the 400 status code? Can we somehow stub a \"connection refused\" scenario with wiremock? if we need to return a status code, it should be 404 anyway. But it would be better to cover the network error and the 4xx status code scenarios separately.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472057203", "createdAt": "2020-08-18T09:51:22Z", "author": {"login": "erosb"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeIntegrationTest.java", "diffHunk": "@@ -87,10 +108,7 @@ public void testMapMetrics() {\n         node.getConfig().getMapConfig(\"hazelcast\").getEvictionConfig().setEvictionPolicy(EvictionPolicy.LRU);\n         node.getConfig().getMapConfig(\"hazelcast\").setInMemoryFormat(InMemoryFormat.NATIVE);\n \n-        stubFor(get(urlPathEqualTo(\"/ping\"))\n-                .willReturn(aResponse()\n-                        .withStatus(200)));\n-\n+        stubUrls(200, 400, 400, 400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1ODY0Mw==", "bodyText": "Can we please avoid making the collector mutable? It would be one step better if we would not add it to the initial list (I mean line 56), but we would instantiate CloudInfoCollector only here, and add it to the metricsCollectorList.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472058643", "createdAt": "2020-08-18T09:53:54Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java", "diffHunk": "@@ -43,24 +43,29 @@\n \n     private static final String FALSE = \"false\";\n     private static final String DEFAULT_BASE_PHONE_HOME_URL = \"http://phonehome.hazelcast.com/ping\";\n+    private static final String AWS_ENDPOINT = \"http://169.254.169.254/latest/meta-data\";\n+    private static final String AZURE_ENDPOINT = \" http://169.254.169.254/metadata/instance/compute?api-version=2018-02-01\";\n+    private static final String GCP_ENDPOINT = \" http://metadata.google.internal\";\n \n     volatile ScheduledFuture<?> phoneHomeFuture;\n     private final ILogger logger;\n     private final String basePhoneHomeUrl;\n \n     private final Node hazelcastNode;\n+    private final CloudInfoCollector cloudInfoCollector = new CloudInfoCollector(AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT);\n     private final List<MetricsCollector> metricsCollectorList = Arrays.asList(new BuildInfoCollector(),\n             new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(),\n-            new OSInfoCollector(), new DistributedObjectCounterCollector(), new CacheInfoCollector());\n+            new OSInfoCollector(), new DistributedObjectCounterCollector(), new CacheInfoCollector(), cloudInfoCollector);\n \n     public PhoneHome(Node node) {\n-        this(node, DEFAULT_BASE_PHONE_HOME_URL);\n+        this(node, DEFAULT_BASE_PHONE_HOME_URL, AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT);\n     }\n \n-    PhoneHome(Node node, String baseurl) {\n+    PhoneHome(Node node, String baseUrl, String awsEndPoint, String azureEndPoint, String gcpEndPoint) {\n         hazelcastNode = node;\n         logger = hazelcastNode.getLogger(com.hazelcast.internal.util.phonehome.PhoneHome.class);\n-        basePhoneHomeUrl = baseurl;\n+        basePhoneHomeUrl = baseUrl;\n+        cloudInfoCollector.modifyEndPoints(awsEndPoint, azureEndPoint, gcpEndPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea12bc931589bf934396d79e5d287d0c444afb74"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "698a87984f7c8b02ae2ec68af906464373d19471", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/698a87984f7c8b02ae2ec68af906464373d19471", "committedDate": "2020-08-19T05:19:25Z", "message": "Improve the methods:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjQ4OTM2", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-470248936", "createdAt": "2020-08-19T08:45:04Z", "commit": {"oid": "698a87984f7c8b02ae2ec68af906464373d19471"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NTowNFrOHC9aZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToxNjoxMVrOHC-mUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NTM4MA==", "bodyText": "One design smell here is that awsEndPoint, azureEndPoint and gcpEndPoint are not exactly the dependencies of PhoneHome. They are dependencies of the CloudInfoCollector. So instead of passing these 3 arguments, a MetricsCollector ...additionalCollectors would be better (mind the varargs), so you pass a CloudInfoCollector instance directly. And that instance can be instantiated by the test and pass the testing endpoints. Also, once you make this change, you don't have to use PowerMockito magic to mock the Path instances: just parameterize the CloudInfoCollector, add 2 more Path parameters to its constructor, and then you can pass whatever Path mock you want from your test. Please let me know if it is unclear.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472865380", "createdAt": "2020-08-19T08:45:04Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java", "diffHunk": "@@ -43,24 +38,29 @@\n \n     private static final String FALSE = \"false\";\n     private static final String DEFAULT_BASE_PHONE_HOME_URL = \"http://phonehome.hazelcast.com/ping\";\n+    private static final String AWS_ENDPOINT = \"http://169.254.169.254/latest/meta-data\";\n+    private static final String AZURE_ENDPOINT = \" http://169.254.169.254/metadata/instance/compute?api-version=2018-02-01\";\n+    private static final String GCP_ENDPOINT = \" http://metadata.google.internal\";\n \n     volatile ScheduledFuture<?> phoneHomeFuture;\n     private final ILogger logger;\n     private final String basePhoneHomeUrl;\n \n     private final Node hazelcastNode;\n-    private final List<MetricsCollector> metricsCollectorList = Arrays.asList(new BuildInfoCollector(),\n-            new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(),\n-            new OSInfoCollector(), new DistributedObjectCounterCollector(), new CacheInfoCollector());\n+    private final List<MetricsCollector> metricsCollectorList = new ArrayList<>(Arrays.asList(new BuildInfoCollector(),\n+            new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(), new OSInfoCollector(),\n+            new DistributedObjectCounterCollector(), new CacheInfoCollector()));\n \n     public PhoneHome(Node node) {\n-        this(node, DEFAULT_BASE_PHONE_HOME_URL);\n+        this(node, DEFAULT_BASE_PHONE_HOME_URL, AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT);\n     }\n \n-    PhoneHome(Node node, String baseurl) {\n+    PhoneHome(Node node, String baseUrl, String awsEndPoint, String azureEndPoint, String gcpEndPoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698a87984f7c8b02ae2ec68af906464373d19471"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NjQxNw==", "bodyText": "Please document in javadoc what possible values (under what conditions) these metrics can take.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472866417", "createdAt": "2020-08-19T08:46:43Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeMetrics.java", "diffHunk": "@@ -74,7 +74,11 @@\n     COUNT_OF_REPLICATED_MAPS(\"rpct\"),\n     COUNT_OF_CARDINALITY_ESTIMATORS(\"cect\"),\n     COUNT_OF_PN_COUNTERS(\"pncct\"),\n-    COUNT_OF_FLAKE_ID_GENERATORS(\"figct\");\n+    COUNT_OF_FLAKE_ID_GENERATORS(\"figct\"),\n+\n+    //CLOUD METRICS\n+    CLOUD(\"cld\"),\n+    DOCKER(\"dck\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698a87984f7c8b02ae2ec68af906464373d19471"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4NDgxOQ==", "bodyText": "Please resolve these duplicate conditionals. Also, the method is called at 6 places, at 5 of them the parameter lists are the same - this is an other code smell. Please think about how to resolve these.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r472884819", "createdAt": "2020-08-19T09:16:11Z", "author": {"login": "erosb"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeIntegrationTest.java", "diffHunk": "@@ -70,7 +71,32 @@\n     public void initialise() {\n         HazelcastInstance hz = createHazelcastInstance();\n         node = getNode(hz);\n-        phoneHome = new PhoneHome(node, \"http://localhost:8080/ping\");\n+        phoneHome = new PhoneHome(node,\n+                \"http://localhost:8080/ping\",\n+                \"http://localhost:8080/latest/meta-data\",\n+                \"http://localhost:8080/metadata/instance/compute?api-version=2018-02-01\",\n+                \"http://localhost:8080/metadata.google.internal\");\n+    }\n+\n+    public void stubUrls(String phoneHomeStatus, String awsStatus, String azureStatus, String gcpStatus) {\n+\n+        stubFor(get(urlPathEqualTo(\"/ping\"))\n+                .willReturn(phoneHomeStatus.equals(\"200\")\n+                        ? aResponse().withStatus(200)\n+                        : aResponse().withFault(Fault.CONNECTION_RESET_BY_PEER)));\n+        stubFor(get(urlPathEqualTo(\"/latest/meta-data\"))\n+                .willReturn(awsStatus.equals(\"200\")\n+                        ? aResponse().withStatus(200)\n+                        : aResponse().withFault(Fault.CONNECTION_RESET_BY_PEER)));\n+        stubFor(get(urlPathEqualTo(\"/metadata/instance/compute\"))\n+                .withQueryParam(\"api-version\", equalTo(\"2018-02-01\"))\n+                .willReturn(azureStatus.equals(\"200\")\n+                        ? aResponse().withStatus(200)\n+                        : aResponse().withFault(Fault.CONNECTION_RESET_BY_PEER)));\n+        stubFor(get(urlPathEqualTo(\"/metadata.google.internal\"))\n+                .willReturn(gcpStatus.equals(\"200\")\n+                        ? aResponse().withStatus(200)\n+                        : aResponse().withFault(Fault.CONNECTION_RESET_BY_PEER)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698a87984f7c8b02ae2ec68af906464373d19471"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e05d219a214d241b10357a12288e22d5aeb6495", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8e05d219a214d241b10357a12288e22d5aeb6495", "committedDate": "2020-08-19T12:30:52Z", "message": "Improve the methods using metric collector object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNDE4Njc0", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-470418674", "createdAt": "2020-08-19T12:44:58Z", "commit": {"oid": "8e05d219a214d241b10357a12288e22d5aeb6495"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo0NDo1OFrOHDFoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo1NDoyMVrOHDF-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwMDA3Mw==", "bodyText": "Let's denote the no-cloud case with N , please, so that it is in sync with the notation of dck below.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r473000073", "createdAt": "2020-08-19T12:44:58Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@SuppressFBWarnings\n+public class CloudInfoCollector implements MetricsCollector {\n+\n+    private static final String AWS_ENDPOINT = \"http://169.254.169.254/latest/meta-data\";\n+    private static final String AZURE_ENDPOINT = \" http://169.254.169.254/metadata/instance/compute?api-version=2018-02-01\";\n+    private static final String GCP_ENDPOINT = \" http://metadata.google.internal\";\n+    private static final Path KUBERNETES_TOKEN_PATH = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n+    private static final Path DOCKER_FILE_PATH = Paths.get(\"/.dockerenv\");\n+\n+    private final String awsEndpoint;\n+    private final String azureEndpoint;\n+    private final String gcpEndpoint;\n+    private final Path kubernetesTokenPath;\n+    private final Path dockerFilePath;\n+\n+    public CloudInfoCollector() {\n+        this(AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT, KUBERNETES_TOKEN_PATH, DOCKER_FILE_PATH);\n+    }\n+\n+    public CloudInfoCollector(String awsEndPoint, String azureEndPoint, String gcpEndPoint, Path kubernetesTokenpath,\n+                              Path dockerFilepath) {\n+        awsEndpoint = awsEndPoint;\n+        azureEndpoint = azureEndPoint;\n+        gcpEndpoint = gcpEndPoint;\n+        kubernetesTokenPath = kubernetesTokenpath;\n+        dockerFilePath = dockerFilepath;\n+    }\n+\n+    public Map<PhoneHomeMetrics, String> computeMetrics(Node hazelcastNode) {\n+\n+        Map<PhoneHomeMetrics, String> environmentInfo = new HashMap<>();\n+        if (MetricsCollector.fetchWebService(awsEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"A\");\n+        } else if (MetricsCollector.fetchWebService(azureEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"Z\");\n+        } else if (MetricsCollector.fetchWebService(gcpEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"G\");\n+        } else {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e05d219a214d241b10357a12288e22d5aeb6495"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNTgxNA==", "bodyText": "It would be good to improve this class so that it determines the environment only once. I mean, once a node is started, I think we can assume that it always runs in the same environment. That means there is no need to call these HTTP endpoints every time when the phonehome service runs (which means once per day). It is sufficient to determine this metric only once, and return the same value when the service is called next time. Can you please add this memoization as an improvement?", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r473005814", "createdAt": "2020-08-19T12:54:21Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@SuppressFBWarnings\n+public class CloudInfoCollector implements MetricsCollector {\n+\n+    private static final String AWS_ENDPOINT = \"http://169.254.169.254/latest/meta-data\";\n+    private static final String AZURE_ENDPOINT = \" http://169.254.169.254/metadata/instance/compute?api-version=2018-02-01\";\n+    private static final String GCP_ENDPOINT = \" http://metadata.google.internal\";\n+    private static final Path KUBERNETES_TOKEN_PATH = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n+    private static final Path DOCKER_FILE_PATH = Paths.get(\"/.dockerenv\");\n+\n+    private final String awsEndpoint;\n+    private final String azureEndpoint;\n+    private final String gcpEndpoint;\n+    private final Path kubernetesTokenPath;\n+    private final Path dockerFilePath;\n+\n+    public CloudInfoCollector() {\n+        this(AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT, KUBERNETES_TOKEN_PATH, DOCKER_FILE_PATH);\n+    }\n+\n+    public CloudInfoCollector(String awsEndPoint, String azureEndPoint, String gcpEndPoint, Path kubernetesTokenpath,\n+                              Path dockerFilepath) {\n+        awsEndpoint = awsEndPoint;\n+        azureEndpoint = azureEndPoint;\n+        gcpEndpoint = gcpEndPoint;\n+        kubernetesTokenPath = kubernetesTokenpath;\n+        dockerFilePath = dockerFilepath;\n+    }\n+\n+    public Map<PhoneHomeMetrics, String> computeMetrics(Node hazelcastNode) {\n+\n+        Map<PhoneHomeMetrics, String> environmentInfo = new HashMap<>();\n+        if (MetricsCollector.fetchWebService(awsEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"A\");\n+        } else if (MetricsCollector.fetchWebService(azureEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"Z\");\n+        } else if (MetricsCollector.fetchWebService(gcpEndpoint)) {\n+            environmentInfo.put(PhoneHomeMetrics.CLOUD, \"G\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e05d219a214d241b10357a12288e22d5aeb6495"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20efcba4c1a317f8739e654a060627304f27f3c", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a20efcba4c1a317f8739e654a060627304f27f3c", "committedDate": "2020-08-19T14:26:03Z", "message": "Improve the environment info using memoisation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTk0ODcz", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-470594873", "createdAt": "2020-08-19T15:50:33Z", "commit": {"oid": "a20efcba4c1a317f8739e654a060627304f27f3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1MDozM1rOHDNuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1MDozM1rOHDNuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMjU5OQ==", "bodyText": "Please make this class package-private (including its constructors). Also please double-check if all Collector implementations are package-private", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r473132599", "createdAt": "2020-08-19T15:50:33Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@SuppressFBWarnings\n+public class CloudInfoCollector implements MetricsCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20efcba4c1a317f8739e654a060627304f27f3c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01cef8c9c8d4bce404993f25f4429746b59e81f5", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/01cef8c9c8d4bce404993f25f4429746b59e81f5", "committedDate": "2020-08-19T15:54:08Z", "message": "Make collector implementations package private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjA5NDI5", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-470609429", "createdAt": "2020-08-19T16:06:45Z", "commit": {"oid": "01cef8c9c8d4bce404993f25f4429746b59e81f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjowNjo0NlrOHDOXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjowNjo0NlrOHDOXpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MzIwNA==", "bodyText": "This is overcomplicated. It would be much simpler if the environmentInfo would be null on intialization, so you would only have to do a null check here, and assign a value to the field only after this check.", "url": "https://github.com/hazelcast/hazelcast/pull/17364#discussion_r473143204", "createdAt": "2020-08-19T16:06:46Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CloudInfoCollector.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.instance.impl.Node;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@SuppressFBWarnings\n+class CloudInfoCollector implements MetricsCollector {\n+\n+    private static final String AWS_ENDPOINT = \"http://169.254.169.254/latest/meta-data\";\n+    private static final String AZURE_ENDPOINT = \" http://169.254.169.254/metadata/instance/compute?api-version=2018-02-01\";\n+    private static final String GCP_ENDPOINT = \" http://metadata.google.internal\";\n+    private static final Path KUBERNETES_TOKEN_PATH = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n+    private static final Path DOCKER_FILE_PATH = Paths.get(\"/.dockerenv\");\n+\n+    private final String awsEndpoint;\n+    private final String azureEndpoint;\n+    private final String gcpEndpoint;\n+    private final Path kubernetesTokenPath;\n+    private final Path dockerFilePath;\n+\n+    private final Map<PhoneHomeMetrics, String> environmentInfo = new HashMap<>();\n+\n+    public CloudInfoCollector() {\n+        this(AWS_ENDPOINT, AZURE_ENDPOINT, GCP_ENDPOINT, KUBERNETES_TOKEN_PATH, DOCKER_FILE_PATH);\n+    }\n+\n+    public CloudInfoCollector(String awsEndPoint, String azureEndPoint, String gcpEndPoint, Path kubernetesTokenpath,\n+                              Path dockerFilepath) {\n+        awsEndpoint = awsEndPoint;\n+        azureEndpoint = azureEndPoint;\n+        gcpEndpoint = gcpEndPoint;\n+        kubernetesTokenPath = kubernetesTokenpath;\n+        dockerFilePath = dockerFilepath;\n+    }\n+\n+    public Map<PhoneHomeMetrics, String> computeMetrics(Node hazelcastNode) {\n+\n+        if (environmentInfo.containsKey(PhoneHomeMetrics.CLOUD) && environmentInfo.containsKey(PhoneHomeMetrics.DOCKER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cef8c9c8d4bce404993f25f4429746b59e81f5"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c5019a9b28e842ea1a4ce4af3e8a02d71ba2b6", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/08c5019a9b28e842ea1a4ce4af3e8a02d71ba2b6", "committedDate": "2020-08-19T18:33:25Z", "message": "Add null initialisation to map\n\ncorrected the initialisation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9953dca0996afcd84552ab0cc4938924dcae8566", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9953dca0996afcd84552ab0cc4938924dcae8566", "committedDate": "2020-08-19T18:32:41Z", "message": "corrected the initialisation"}, "afterCommit": {"oid": "08c5019a9b28e842ea1a4ce4af3e8a02d71ba2b6", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/08c5019a9b28e842ea1a4ce4af3e8a02d71ba2b6", "committedDate": "2020-08-19T18:33:25Z", "message": "Add null initialisation to map\n\ncorrected the initialisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c02f6104d626dcc2885d353352b439ecca03811", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9c02f6104d626dcc2885d353352b439ecca03811", "committedDate": "2020-08-24T16:14:35Z", "message": "Removed thread and concurrency issues along with code refacor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3e9b4e8d832b261d8f82a882f93a8f5fc78545", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fc3e9b4e8d832b261d8f82a882f93a8f5fc78545", "committedDate": "2020-08-24T17:42:17Z", "message": "Made global map to be volatile for synchronistaion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414369dc464eae47d05b675ab99a25dcbb346359", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/414369dc464eae47d05b675ab99a25dcbb346359", "committedDate": "2020-08-24T18:28:11Z", "message": "Removed empty lines from methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a15ee5ce3327043d851c29d5e15fd22ecb7b6f", "author": {"user": {"login": "chanmol1999", "name": "Anmol Chaddha"}}, "url": "https://github.com/hazelcast/hazelcast/commit/71a15ee5ce3327043d851c29d5e15fd22ecb7b6f", "committedDate": "2020-08-25T03:41:37Z", "message": "Used varargs in constructor of Phonehome"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM5MDI1", "url": "https://github.com/hazelcast/hazelcast/pull/17364#pullrequestreview-474439025", "createdAt": "2020-08-25T12:40:45Z", "commit": {"oid": "71a15ee5ce3327043d851c29d5e15fd22ecb7b6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3390, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}