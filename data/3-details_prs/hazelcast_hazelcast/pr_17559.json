{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjMwMTQx", "number": 17559, "title": "State tracking for configuration overrides", "bodyText": "Introduces a state-tracking mechanics for the external config(ExternalConfigurationOverride) parser so that it's possible to log all mismatched/unapplied config entries coming from environment variables/system properties.\nFor example, if someone provides the following configuration as environment variables:\nHZ_CLUSTERNAME=foo-2\nHZ_CLUSTER_FOO_BAR=foo\nHZ_NETWORK_PORT=5702\n\nThat's what they will see in logs:\nINFO: Detected external configuration overrides in environment variables: [hazelcast.clustername=foo-2,hazelcast.network.port=5702,hazelcast.cluster.foo.bar=foo]\n\nThis might be misleading since it contains invalid entries that did not really impact the configuration.\nInstead, this is what they will see in logs:\nINFO: Detected external configuration entries in environment variables: [hazelcast.clustername=foo-2]\n...\nWARNING: Unrecognized environment variables configuration entries: [hazelcast.network.port, hazelcast.cluster.foo.bar]\n\nBesides the above, it introduces the main configuration parser changes to make sure that config values are never read eagerly.\n\ncontinuation of: #17348", "createdAt": "2020-09-16T20:33:33Z", "url": "https://github.com/hazelcast/hazelcast/pull/17559", "merged": true, "mergeCommit": {"oid": "90d2e3770be7f4a3791b0f898eabb0eb3a7ddc2b"}, "closed": true, "closedAt": "2020-10-05T10:43:24Z", "author": {"login": "pivovarit"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJtaTsgH2gAyNDg4MjMwMTQxOmM2MDFmNmE5YzUzOWNlOWQyNDNjOTQ4ZGYxZWE3Nzk2MGY2MWJjODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPhR9bgFqTUwMTkyMzU3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c601f6a9c539ce9d243c948df1ea77960f61bc84", "committedDate": "2020-09-17T09:17:01Z", "message": "State tracking for configuration overrides"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81d8ce7acfafc9502f30cffe02eea80cb7e950a1", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/81d8ce7acfafc9502f30cffe02eea80cb7e950a1", "committedDate": "2020-09-17T08:03:00Z", "message": "Represent configs as maps and not strings"}, "afterCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c601f6a9c539ce9d243c948df1ea77960f61bc84", "committedDate": "2020-09-17T09:17:01Z", "message": "State tracking for configuration overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDc0NzYy", "url": "https://github.com/hazelcast/hazelcast/pull/17559#pullrequestreview-490474762", "createdAt": "2020-09-17T10:57:30Z", "commit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1NzozMFrOHTclVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowMjozMVrOHTcvjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzMwMw==", "bodyText": "I guess here's this \"eager\" change you mentioned in the description. Why is it better to read it lazily here?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490153303", "createdAt": "2020-09-17T10:57:30Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/AbstractQueryCacheConfigBuilderHelper.java", "diffHunk": "@@ -60,32 +60,29 @@ protected String getTextContent(Node node) {\n     }\n \n     protected void populateQueryCacheConfig(QueryCacheConfig queryCacheConfig,\n-                                            Node childNode, String textContent, String nodeName) {\n+                                            Node childNode, String nodeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NDc5MQ==", "bodyText": "Isn't the .trim() executed already in getTextContent() method?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490154791", "createdAt": "2020-09-17T11:00:19Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1736,21 +1707,20 @@ protected void handleMap(Node parentNode) throws Exception {\n     void handleMapNode(Node parentNode, final MapConfig mapConfig) throws Exception {\n         for (Node node : childElements(parentNode)) {\n             String nodeName = cleanNodeName(node);\n-            String value = getTextContent(node).trim();\n             if (matches(\"backup-count\", nodeName)) {\n-                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", value));\n+                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", getTextContent(node).trim()));\n             } else if (matches(\"metadata-policy\", nodeName)) {\n-                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(value)));\n+                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(getTextContent(node).trim())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 564}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NTkxNw==", "bodyText": "nit: maybe the opposite isRead?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490155917", "createdAt": "2020-09-17T11:02:31Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -31,6 +31,7 @@\n     private final String name;\n     private final Map<String, ConfigNode> children = new LinkedHashMap<>();\n     private String value;\n+    private boolean unread = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTI4NjA5", "url": "https://github.com/hazelcast/hazelcast/pull/17559#pullrequestreview-490528609", "createdAt": "2020-09-17T12:13:55Z", "commit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dad4416820edf259579aab753e01e05db1ebd869", "committedDate": "2020-09-17T12:36:41Z", "message": "Remove redundant .trim() calls and invert 'unread' ConfigNode property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTMxMTg1", "url": "https://github.com/hazelcast/hazelcast/pull/17559#pullrequestreview-500131185", "createdAt": "2020-10-01T08:44:15Z", "commit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NDoxNVrOHbAc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NzoyNFrOHbAkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg==", "bodyText": "In the edge case when properties.size() == unprocessed.size() I'd consider logging at WARN with a specific message saying that there are override properties defined, but we did not apply any of them.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498081006", "createdAt": "2020-10-01T08:44:15Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4Mjg3Ng==", "bodyText": "Do we have this mechanism for the failover client config as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498082876", "createdAt": "2020-10-01T08:47:24Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ConfigNodeStateTrackerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class ConfigNodeStateTrackerTest {\n+\n+    @Test\n+    public void shouldDetectUnappliedMemberConfigEntries() throws Exception {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZ_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZ_CLUSTRNAME\", \"foo\");\n+        entries.put(\"HZ_NETWORK_PORT\", \"5702\");\n+        entries.put(\"HZ_NETWORK_JOIN_TCPIP_BLE\", \"false\");\n+        entries.put(\"HZ_NETWORK_JOIN_MULTCAST_ENABLED\", \"false\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.member().parse(entries));\n+\n+        new YamlMemberDomConfigProcessor(true, new Config(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.port\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.clustrname\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.tcpip.ble\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.multcast.enabled\"));\n+    }\n+\n+    @Test\n+    public void shouldDetectUnappliedClientConfigEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_FOO\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_SOCKETINTERCEPTOR_ENABLE\", \"true\");\n+        entries.put(\"HZCLIENT_NETWORK_SMARTROUTING\", \"true\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.client().parse(entries));\n+\n+        new YamlClientDomConfigProcessor(true, new ClientConfig(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.foo\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.network.socketinterceptor.enable\"));\n+        assertFalse(unprocessed.containsKey(\"hazelcast-client.network.smartrouting\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTIzNTcx", "url": "https://github.com/hazelcast/hazelcast/pull/17559#pullrequestreview-501923571", "createdAt": "2020-10-05T10:32:35Z", "commit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3318, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}