{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjU5NTYw", "number": 17201, "title": "Feature/priority queue support", "bodyText": "@mmedenjak\nI have deleted previous priority queue proof of concept branch and create a new one which consolidates your earlier reviews suggestions and previous commits.\nThanks for your support\nClient protocol PR: hazelcast/hazelcast-client-protocol#331", "createdAt": "2020-07-10T06:48:50Z", "url": "https://github.com/hazelcast/hazelcast/pull/17201", "merged": true, "mergeCommit": {"oid": "b992fa46d74762af832f0b1fede039bc590d13c7"}, "closed": true, "closedAt": "2020-08-31T14:59:35Z", "author": {"login": "wangumer"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczh08dgFqTQ0NjMyMzY0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdENPDAABqjM3MDg0OTAxNTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzIzNjQ4", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446323648", "createdAt": "2020-07-10T11:20:55Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMDo1NVrOGvzthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMDo1NVrOGvzthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MzQ5NA==", "bodyText": "This doesn't seem very intuitive. Because a comparator is set, it becomes a priority queue.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452783494", "createdAt": "2020-07-10T11:20:55Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/config/QueueConfig.java", "diffHunk": "@@ -323,6 +327,57 @@ public QueueConfig setMergePolicyConfig(MergePolicyConfig mergePolicyConfig) {\n         return this;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzI0MTQ1", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446324145", "createdAt": "2020-07-10T11:21:53Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMTo1M1rOGvzu-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMTo1M1rOGvzu-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4Mzg2NQ==", "bodyText": "This seems to be very use case specific. I'm not sure we want to have this in the codebase.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452783865", "createdAt": "2020-07-10T11:21:53Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/config/QueueConfig.java", "diffHunk": "@@ -323,6 +327,57 @@ public QueueConfig setMergePolicyConfig(MergePolicyConfig mergePolicyConfig) {\n         return this;\n     }\n \n+    /**\n+     * Check if underlying implementation is a {@code PriorityQueue}. Otherwise it is a FIFO queue\n+     *\n+     * @return {@code true} if priority queue has been configured, {@code false} otherwise\n+     */\n+    public boolean isPriorityQueue() {\n+        return comparatorClassName != null;\n+    }\n+\n+    /**\n+     * Returns the class name of the configured {@link Comparator} implementation.\n+     *\n+     * @return the class name of the configured {@link Comparator} implementation\n+     */\n+    public String getComparatorClassName() {\n+        return comparatorClassName;\n+    }\n+\n+    /**\n+     * Sets the class name of the configured {@link Comparator} implementation.\n+     *\n+     * @param comparatorClassName the class name of the\n+     *                            configured {@link Comparator} implementation\n+     * @return this QueueConfig instance\n+     */\n+    public QueueConfig setComparatorClassName(String comparatorClassName) {\n+        this.comparatorClassName = comparatorClassName;\n+        return this;\n+    }\n+\n+    /**\n+     * Check if duplicates are allowed for this queue.\n+     *\n+     * @return {@code true} if duplicates are allowed, {@code false} otherwise\n+     */\n+    public boolean isDuplicateAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzI1MjE5", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446325219", "createdAt": "2020-07-10T11:24:01Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyNDowMlrOGvzyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyNDowMlrOGvzyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDY1Mw==", "bodyText": "What is the advantage of using a getter here?", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452784653", "createdAt": "2020-07-10T11:24:02Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueItem.java", "diffHunk": "@@ -96,10 +96,10 @@ public void readData(ObjectDataInput in) throws IOException {\n     }\n \n     @Override\n-    public int compareTo(QueueItem o) {\n-        if (itemId < o.getItemId()) {\n+    public int compareTo(QueueItem other) {\n+        if (getItemId() < other.getItemId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzI2ODc5", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446326879", "createdAt": "2020-07-10T11:27:08Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyNzowOFrOGvz3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyNzowOFrOGvz3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTk3MA==", "bodyText": "The NoDuplicatePriorityQueue is stored in a single partition and as a consequence will not be accessed concurrently. There should not be any need to synchronize.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452785970", "createdAt": "2020-07-10T11:27:08Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/NoDuplicatePriorityQueue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\r\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package com.hazelcast.collection.impl.queue;\r\n+\r\n+import com.hazelcast.internal.serialization.Data;\r\n+\r\n+import java.util.Comparator;\r\n+import java.util.HashSet;\r\n+import java.util.PriorityQueue;\r\n+import java.util.Set;\r\n+import java.util.concurrent.locks.Lock;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+\r\n+/**\r\n+ * A {@link PriorityQueue} which did not allowed duplicate values.\r\n+ * Duplicate check is not done on QueueItem but on {@link QueueItem#getData()}\r\n+ */\r\n+public final class NoDuplicatePriorityQueue extends PriorityQueue<QueueItem> {\r\n+    private Set<Data> dataSet = new HashSet();\r\n+    private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\r\n+\r\n+    /**\r\n+     * Constructs an instance of {@code NoDuplicatePriorityQueue}\r\n+     *\r\n+     * @param comparator supplied comparator to be used by this priority queue\r\n+     */\r\n+    public NoDuplicatePriorityQueue(Comparator<QueueItem> comparator) {\r\n+        super(comparator);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean offer(QueueItem e) {\r\n+        Lock lock = this.readWriteLock.writeLock();\r\n+        Data otherData = e.getData();\r\n+        if (dataSet.contains(otherData)) {\r\n+            return false;\r\n+        }\r\n+        lock.lock();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzI3NzQ4", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446327748", "createdAt": "2020-07-10T11:28:46Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyODo0NlrOGvz52g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyODo0NlrOGvz52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NjY1MA==", "bodyText": "This add a constant memory overhead per item stored. I can't say I'm too excited about that.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452786650", "createdAt": "2020-07-10T11:28:46Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/NoDuplicatePriorityQueue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\r\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package com.hazelcast.collection.impl.queue;\r\n+\r\n+import com.hazelcast.internal.serialization.Data;\r\n+\r\n+import java.util.Comparator;\r\n+import java.util.HashSet;\r\n+import java.util.PriorityQueue;\r\n+import java.util.Set;\r\n+import java.util.concurrent.locks.Lock;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+\r\n+/**\r\n+ * A {@link PriorityQueue} which did not allowed duplicate values.\r\n+ * Duplicate check is not done on QueueItem but on {@link QueueItem#getData()}\r\n+ */\r\n+public final class NoDuplicatePriorityQueue extends PriorityQueue<QueueItem> {\r\n+    private Set<Data> dataSet = new HashSet();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzMyNDcy", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-446332472", "createdAt": "2020-07-10T11:38:00Z", "commit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTozODowMFrOGv0IUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1NToxOVrOGv0i2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MDM1Mg==", "bodyText": "The complexity to add an item to the priority is O(Log(N)) because the priority queue is based on a binary heap.\nBut now the value that is added, is deserialized very every value it needs to be compared with.\nSo with N items, the total number of deserializations is 2Log(N)). If there are many items in the priority queue or when the items take a long time to deserialize, this can be a serious performance problem. So I would at least optimize is so that Log(N)+1 deserialization are needed instead of 2Log(N))", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452790352", "createdAt": "2020-07-10T11:38:00Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/ForwardingQueueItemComparator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\r\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package com.hazelcast.collection.impl.queue;\r\n+\r\n+import com.hazelcast.internal.serialization.SerializationService;\r\n+\r\n+import java.util.Comparator;\r\n+import java.util.Objects;\r\n+\r\n+/**\r\n+ * A comparator which forwards its {@link Comparator#compare(Object, Object)} to another supplied comparator.\r\n+ * If {@code comparator} is {@code null}, then {@link Comparator#compare(Object, Object)}\r\n+ * uses {@link QueueItem#compareTo(QueueItem)}\r\n+ *\r\n+ * @param <T> the type of objects that may be compared by the delegated comparator\r\n+ *           as defined by the supplied comparator instance in {QueueConfig}\r\n+ */\r\n+public final class ForwardingQueueItemComparator<T> implements Comparator<QueueItem> {\r\n+\r\n+    private final Comparator<T> customComparator;\r\n+    private final SerializationService serializationService;\r\n+\r\n+    public ForwardingQueueItemComparator(final Comparator<T> customComparator,\r\n+                                         final SerializationService serializationService) {\r\n+        Objects.requireNonNull(customComparator, \"Custom comparator cannot be null.\");\r\n+        this.customComparator = customComparator;\r\n+        this.serializationService = serializationService;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compare(QueueItem o1, QueueItem o2) {\r\n+        T object1 = (T) serializationService.toObject(o1.getData());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjY1Ng==", "bodyText": "I don't see any change in the 'constructors' array", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452796656", "createdAt": "2020-07-10T11:54:04Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueDataSerializerHook.java", "diffHunk": "@@ -127,6 +127,8 @@\n     public static final int MERGE = 44;\n     public static final int MERGE_BACKUP = 45;\n \n+    public static final int PRIORITY_QUEUE_COMPARATOR = 46;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NzE0Nw==", "bodyText": "I don't believe we need an explicit serializer for this logic. It can just piggyback on whatever kind of serialization is in place. So let it implement the appropriate serialization interface.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r452797147", "createdAt": "2020-07-10T11:55:19Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueDataSerializerHook.java", "diffHunk": "@@ -127,6 +127,8 @@\n     public static final int MERGE = 44;\n     public static final int MERGE_BACKUP = 45;\n \n+    public static final int PRIORITY_QUEUE_COMPARATOR = 46;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjY1Ng=="}, "originalCommit": {"oid": "58af35720bb7aa554539c48c8fad696bf74f6619"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTkwMzg0", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-454190384", "createdAt": "2020-07-23T14:30:08Z", "commit": {"oid": "bb78280dd0b5f3224a038329ce47809dde1e5ddc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozMDowOFrOG2NQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozMDowOFrOG2NQMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MzQyNQ==", "bodyText": "This is not going to work. The issue is that the same data might be serialized differently from time to time; so the same instance is not guaranteed to give the same Data.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r459493425", "createdAt": "2020-07-23T14:30:08Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/NoDuplicatePriorityQueue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\r\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package com.hazelcast.collection.impl.queue;\r\n+\r\n+import com.hazelcast.internal.serialization.BinaryInterface;\r\n+import com.hazelcast.internal.serialization.Data;\r\n+import java.util.Comparator;\r\n+import java.util.HashSet;\r\n+import java.util.PriorityQueue;\r\n+import java.util.Set;\r\n+\r\n+/**\r\n+ * A {@link PriorityQueue} which did not allowed duplicate values.\r\n+ * Duplicate check is not done on QueueItem but on {@link QueueItem#getData()}\r\n+ */\r\n+@BinaryInterface\r\n+public final class NoDuplicatePriorityQueue extends PriorityQueue<QueueItem> {\r\n+\r\n+    private Set<Data> dataSet = new HashSet();\r\n+\r\n+    /**\r\n+     * Constructs an instance of {@code NoDuplicatePriorityQueue}\r\n+     *\r\n+     * @param comparator supplied comparator to be used by this priority queue\r\n+     */\r\n+    public NoDuplicatePriorityQueue(Comparator<QueueItem> comparator) {\r\n+        super(comparator);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean offer(QueueItem e) {\r\n+        Data otherData = e.getData();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb78280dd0b5f3224a038329ce47809dde1e5ddc"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17c41dbd4b9c43951b75bbd6c22b894a8c44302a", "author": {"user": {"login": "kuba72ch", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/17c41dbd4b9c43951b75bbd6c22b894a8c44302a", "committedDate": "2020-08-12T08:40:57Z", "message": "revert no duplicate queue support"}, "afterCommit": {"oid": "2cf6f41f2e86d502ebfdc1ea43df85c83e7527a3", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2cf6f41f2e86d502ebfdc1ea43df85c83e7527a3", "committedDate": "2020-08-14T10:06:40Z", "message": "Cleanup\n\n- fix imports\n- reformat config class and add nullability annotations\n- remove unused class\n- add rolling upgrade checks\n- add missing config infrastructure and test code\n- minor typos\n- regenerate client codecs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTg4ODQ4", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-474188848", "createdAt": "2020-08-25T07:03:20Z", "commit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDA3MjQ2", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-475407246", "createdAt": "2020-08-26T11:45:09Z", "commit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDM3MzYz", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-475437363", "createdAt": "2020-08-26T12:29:24Z", "commit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjoyOToyNFrOHHJvEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowODowM1rOHHLNXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2MTU4Nw==", "bodyText": "I would consider caching config.isPriorityQueue() in a final field. If the config changes - that is shouldn't, but still - for any reason, we get a funky behavior.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477261587", "createdAt": "2020-08-26T12:29:24Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueContainer.java", "diffHunk": "@@ -430,22 +446,32 @@ public QueueItem txnPeek(long offerId, UUID transactionId) {\n     // TX Methods Ends\n \n     public long offer(Data data) {\n-        QueueItem item = new QueueItem(this, nextId(), null);\n+        Data itemData = shouldKeepItemData() ? data : null;\n+        QueueItem item = new QueueItem(this, nextId(), itemData);\n         if (store.isEnabled()) {\n             try {\n                 store.store(item.getItemId(), data);\n             } catch (Exception e) {\n                 throw new HazelcastException(e);\n             }\n         }\n-        if (!store.isEnabled() || store.getMemoryLimit() > getItemQueue().size()) {\n-            item.setData(data);\n-        }\n         getItemQueue().offer(item);\n         cancelEvictionIfExists();\n         return item.getItemId();\n     }\n \n+    /**\n+     * Returns {@code true} if we should keep queue item data in-memory. This is\n+     * the case if the queue store is disabled, we have not yet hit the in-memory\n+     * limit or we are using a priority queue which needs item values to sort the\n+     * queue items.\n+     */\n+    private boolean shouldKeepItemData() {\n+        return !store.isEnabled() || store.getMemoryLimit() > getItemQueue().size()\n+                || config.isPriorityQueue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3MTc2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477271762", "createdAt": "2020-08-26T12:45:52Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/queue/QueueStoreWrapper.java", "diffHunk": "@@ -78,24 +66,29 @@ private QueueStoreWrapper(String name) {\n      * @param serializationService serialization service.\n      * @return returns a new instance of {@link QueueStoreWrapper}\n      */\n-    public static QueueStoreWrapper create(String name, QueueStoreConfig storeConfig\n-            , SerializationService serializationService, ClassLoader classLoader) {\n+    public static QueueStoreWrapper create(@Nonnull String name,\n+                                           @Nullable QueueStoreConfig storeConfig,\n+                                           @Nonnull SerializationService serializationService,\n+                                           @Nullable ClassLoader classLoader) {\n         checkNotNull(name, \"name should not be null\");\n         checkNotNull(serializationService, \"serializationService should not be null\");\n \n-        final QueueStoreWrapper storeWrapper = new QueueStoreWrapper(name);\n+        QueueStoreWrapper storeWrapper = new QueueStoreWrapper(name);\n         storeWrapper.setSerializationService(serializationService);\n         if (storeConfig == null || !storeConfig.isEnabled()) {\n             return storeWrapper;\n         }\n         // create queue store.\n-        final QueueStore queueStore = createQueueStore(name, storeConfig, classLoader);\n+        QueueStore queueStore = createQueueStore(name, storeConfig, classLoader);\n         if (queueStore != null) {\n-            storeWrapper.setEnabled(storeConfig.isEnabled());\n-            storeWrapper.setBinary(Boolean.parseBoolean(storeConfig.getProperty(STORE_BINARY)));\n-            storeWrapper.setMemoryLimit(parseInt(STORE_MEMORY_LIMIT, DEFAULT_MEMORY_LIMIT, storeConfig));\n-            storeWrapper.setBulkLoad(parseInt(STORE_BULK_LOAD, DEFAULT_BULK_LOAD, storeConfig));\n-            storeWrapper.setStore(queueStore);\n+            boolean isBinary = Boolean.parseBoolean(storeConfig.getProperty(QueueStoreConfig.STORE_BINARY));\n+            int memoryLimit = parseInt(QueueStoreConfig.STORE_MEMORY_LIMIT, DEFAULT_MEMORY_LIMIT, storeConfig);\n+            int bulkLoad = parseInt(QueueStoreConfig.STORE_BULK_LOAD, DEFAULT_BULK_LOAD, storeConfig);\n+            storeWrapper.setEnabled(storeConfig.isEnabled())\n+                        .setBinary(isBinary)\n+                        .setMemoryLimit(memoryLimit)\n+                        .setBulkLoad(bulkLoad)\n+                        .setStore(queueStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NTkzNg==", "bodyText": "I'd consider adding a check here that warns if queueStoreConfig#memoryLimit is set together with comparatorClassName. I'd even consider treating this situation an invalid configuration since we ignore memoryLimit in the implementation, which is against the user's intention.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477275936", "createdAt": "2020-08-26T12:52:36Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/config/QueueConfig.java", "diffHunk": "@@ -207,7 +217,7 @@ public QueueStoreConfig getQueueStoreConfig() {\n      * @param queueStoreConfig set the QueueStore configuration to this configuration\n      * @return the QueueStore configuration\n      */\n-    public QueueConfig setQueueStoreConfig(QueueStoreConfig queueStoreConfig) {\n+    public QueueConfig setQueueStoreConfig(@Nullable QueueStoreConfig queueStoreConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NjcxMQ==", "bodyText": "I would add that setting this to non-null also makes the store's memory limit setting ignored.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477276711", "createdAt": "2020-08-26T12:53:56Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/config/QueueConfig.java", "diffHunk": "@@ -318,11 +328,44 @@ public MergePolicyConfig getMergePolicyConfig() {\n      *\n      * @return the updated queue configuration\n      */\n-    public QueueConfig setMergePolicyConfig(MergePolicyConfig mergePolicyConfig) {\n+    public QueueConfig setMergePolicyConfig(@Nonnull MergePolicyConfig mergePolicyConfig) {\n         this.mergePolicyConfig = checkNotNull(mergePolicyConfig, \"mergePolicyConfig cannot be null\");\n         return this;\n     }\n \n+    /**\n+     * Check if underlying implementation is a {@code PriorityQueue}. Otherwise\n+     * it is a FIFO queue.\n+     *\n+     * @return {@code true} if priority queue has been configured, {@code false}\n+     * otherwise\n+     */\n+    public boolean isPriorityQueue() {\n+        return !StringUtil.isNullOrEmptyAfterTrim(priorityComparatorClassName);\n+    }\n+\n+    /**\n+     * Returns the class name that will be used to compare queue items.\n+     * If the returned class name is non-empty, the queue will behave as a priority\n+     * queue, otherwise it behaves as a FIFO queue.\n+     */\n+    public @Nullable String getPriorityComparatorClassName() {\n+        return priorityComparatorClassName;\n+    }\n+\n+    /**\n+     * Sets the class name that will be used to compare queue items.\n+     * If the provided class name is non-empty, the queue will behave as a priority\n+     * queue, otherwise it behaves as a FIFO queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTQ0NQ==", "bodyText": "I would add it here as well that setting this makes the store's memory limit ignored.", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477279445", "createdAt": "2020-08-26T12:58:11Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/resources/hazelcast-config-4.1.xsd", "diffHunk": "@@ -556,6 +556,14 @@\n \n     <xs:complexType name=\"queue\">\n         <xs:all>\n+        \t<xs:element name=\"priority-comparator-class-name\" type=\"non-space-string\" minOccurs=\"0\" maxOccurs=\"1\" >\n+\t            <xs:annotation>\n+\t                <xs:documentation>\n+\t                    Fully-qualified comparator's class name to be used for the priority queue.\n+\t                    If nothing is provided, then queue behaves as a FIFO queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NTcyNw==", "bodyText": "Already queueTriple \ud83d\ude04", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r477285727", "createdAt": "2020-08-26T13:08:03Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueuePriorityWithDuplicateCheckTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\r\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package com.hazelcast.collection.impl.queue;\r\n+\r\n+import com.hazelcast.collection.IQueue;\r\n+import com.hazelcast.collection.impl.queue.model.PriorityElement;\r\n+import com.hazelcast.collection.impl.queue.model.PriorityElementComparator;\r\n+import com.hazelcast.config.Config;\r\n+import com.hazelcast.core.HazelcastInstance;\r\n+import com.hazelcast.logging.ILogger;\r\n+import com.hazelcast.logging.Logger;\r\n+import com.hazelcast.map.IMap;\r\n+import com.hazelcast.test.HazelcastParallelClassRunner;\r\n+import com.hazelcast.test.HazelcastTestSupport;\r\n+import com.hazelcast.test.annotation.ParallelJVMTest;\r\n+import com.hazelcast.test.annotation.QuickTest;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+import org.junit.experimental.categories.Category;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import java.util.concurrent.ConcurrentSkipListSet;\r\n+import java.util.concurrent.ExecutorService;\r\n+import java.util.concurrent.Executors;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.atomic.AtomicInteger;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+@RunWith(HazelcastParallelClassRunner.class)\r\n+@Category({QuickTest.class, ParallelJVMTest.class})\r\n+public class QueuePriorityWithDuplicateCheckTest extends HazelcastTestSupport {\r\n+\r\n+    private static final ILogger LOG = Logger.getLogger(QueuePriorityWithDuplicateCheckTest.class);\r\n+    private PriorityElementTaskQueueImpl queue;\r\n+\r\n+    @Before\r\n+    public void before() {\r\n+        Config config = smallInstanceConfig();\r\n+        String queueName = randomName();\r\n+        String mapName = randomName();\r\n+\r\n+        config.getQueueConfig(queueName)\r\n+              .setPriorityComparatorClassName(\"com.hazelcast.collection.impl.queue.model.PriorityElementComparator\");\r\n+        HazelcastInstance hz = createHazelcastInstance(config);\r\n+        queue = new PriorityElementTaskQueueImpl(hz.getQueue(queueName), hz.getMap(mapName));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void queue() {\r\n+        PriorityElement element = new PriorityElement(false, 1);\r\n+        queue.enqueue(element);\r\n+        assertEquals(element, queue.dequeue());\r\n+        assertNull(queue.dequeue());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void queueDouble() {\r\n+        PriorityElement element = new PriorityElement(false, 1);\r\n+        queue.enqueue(element);\r\n+        queue.enqueue(element);\r\n+        queue.enqueue(element);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edbdf8c06041a210c4b9636f6b740ba8167683ed", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/edbdf8c06041a210c4b9636f6b740ba8167683ed", "committedDate": "2020-08-21T13:41:40Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "0d90fb075a7d66efb647c05f7b754176a74fd81e", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0d90fb075a7d66efb647c05f7b754176a74fd81e", "committedDate": "2020-08-27T10:13:30Z", "message": "Fix compilation issue after rebase and regenerate protocol"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NjIyNTc2", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-476622576", "createdAt": "2020-08-27T11:23:39Z", "commit": {"oid": "0d90fb075a7d66efb647c05f7b754176a74fd81e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToyMzozOVrOHILySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToyMzozOVrOHILySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0Mzc1Mg==", "bodyText": "Shall we shutdown the executor in the end of the test to avoid leak?", "url": "https://github.com/hazelcast/hazelcast/pull/17201#discussion_r478343752", "createdAt": "2020-08-27T11:23:39Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueuePriorityTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl.queue;\n+\n+import com.hazelcast.collection.IQueue;\n+import com.hazelcast.collection.impl.queue.model.PriorityElement;\n+import com.hazelcast.collection.impl.queue.model.PriorityElementComparator;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.TestHazelcastInstanceFactory;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class QueuePriorityTest extends HazelcastTestSupport {\n+    private IQueue<PriorityElement> queue;\n+\n+    @Before\n+    public void before() {\n+        Config config = smallInstanceConfig();\n+        config.getQueueConfig(\"default\")\n+              .setPriorityComparatorClassName(\"com.hazelcast.collection.impl.queue.model.PriorityElementComparator\");\n+        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n+        HazelcastInstance[] instances = factory.newInstances(config);\n+        queue = instances[0].getQueue(generateKeyOwnedBy(instances[1]));\n+    }\n+\n+    @Test\n+    public void testPriorityQueue_whenHighestOfferedSecond_thenTakeHighest() {\n+\n+        PriorityElement elementLow = new PriorityElement(false, 1);\n+        PriorityElement elementHigh = new PriorityElement(true, 1);\n+\n+        assertTrue(queue.offer(elementLow));\n+        assertTrue(queue.offer(elementHigh));\n+        assertEquals(2, queue.size());\n+        assertTrue(queue.poll().isHighPriority());\n+        assertFalse(queue.poll().isHighPriority());\n+        assertEquals(0, queue.size());\n+    }\n+\n+    @Test\n+    public void testPriorityQueue_whenHighestOfferedFirst_thenTakeHighest() {\n+\n+        PriorityElement elementLow = new PriorityElement(false, 1);\n+        PriorityElement elementHigh = new PriorityElement(true, 1);\n+\n+        assertTrue(queue.offer(elementHigh));\n+        assertTrue(queue.offer(elementLow));\n+        assertEquals(2, queue.size());\n+        assertTrue(queue.poll().isHighPriority());\n+        assertFalse(queue.poll().isHighPriority());\n+        assertEquals(0, queue.size());\n+    }\n+\n+    @Test\n+    public void testPriorityQueue_whenTwoHighest_thenTakeFirstVersion() {\n+        PriorityElement elementHigh1 = new PriorityElement(true, 1);\n+        PriorityElement elementHigh2 = new PriorityElement(true, 2);\n+\n+        assertTrue(queue.offer(elementHigh1));\n+        assertTrue(queue.offer(elementHigh2));\n+        assertEquals(2, queue.size());\n+        assertEquals(1, queue.poll().getVersion());\n+        assertEquals(2, queue.poll().getVersion());\n+        assertEquals(0, queue.size());\n+    }\n+\n+    @Test\n+    public void testPriorityQueue_whenTwoHighest_thenTakeFirstVersionAgain() {\n+\n+        PriorityElement elementHigh1 = new PriorityElement(true, 1);\n+        PriorityElement elementHigh2 = new PriorityElement(true, 2);\n+\n+        assertTrue(queue.offer(elementHigh2));\n+        assertTrue(queue.offer(elementHigh1));\n+        assertEquals(2, queue.size());\n+        assertEquals(1, queue.poll().getVersion());\n+        assertEquals(2, queue.poll().getVersion());\n+        assertEquals(0, queue.size());\n+    }\n+\n+    @Test\n+    public void queue() {\n+        PriorityElement element = new PriorityElement(false, 1);\n+        queue.offer(element);\n+        assertEquals(element, queue.poll());\n+        assertNull(queue.poll());\n+    }\n+\n+    @Test\n+    public void queuePrioritizing() {\n+        int count = 0;\n+        int elementCount = 100;\n+        for (int i = 0; i < elementCount; i++) {\n+            queue.offer(new PriorityElement(false, count));\n+            queue.offer(new PriorityElement(true, count));\n+            count++;\n+        }\n+\n+        for (int i = 0; i < elementCount; i++) {\n+            PriorityElement dequeue = queue.poll();\n+            assertTrue(\"High priority first\", dequeue.isHighPriority());\n+            assertEquals(i, dequeue.getVersion());\n+        }\n+        for (int i = 0; i < elementCount; i++) {\n+            PriorityElement dequeue = queue.poll();\n+            assertFalse(\"Low priority afterwards\", dequeue.isHighPriority());\n+            assertEquals(i, dequeue.getVersion());\n+        }\n+        assertNull(queue.poll());\n+    }\n+\n+    @Test\n+    public void queueConsistency() throws InterruptedException {\n+        int count = 0;\n+        for (int i = 0; i < 500; i++) {\n+            queue.offer(new PriorityElement(false, count));\n+            queue.offer(new PriorityElement(true, count));\n+            count++;\n+        }\n+        ExecutorService threadPool = Executors.newCachedThreadPool();\n+        ConcurrentSkipListSet<PriorityElement> tasks = new ConcurrentSkipListSet<>(new PriorityElementComparator());\n+        Semaphore sem = new Semaphore(-99);\n+        for (int i = 0; i < 100; i++) {\n+            threadPool.execute(() -> {\n+                PriorityElement task;\n+                while ((task = queue.poll()) != null) {\n+                    tasks.add(task);\n+                }\n+                sem.release();\n+            });\n+        }\n+        sem.acquire();\n+        assertEquals(500 * 2, tasks.size());\n+        assertNull(queue.poll());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d90fb075a7d66efb647c05f7b754176a74fd81e"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzI0Mzg4", "url": "https://github.com/hazelcast/hazelcast/pull/17201#pullrequestreview-476724388", "createdAt": "2020-08-27T13:33:19Z", "commit": {"oid": "ed0d114e6209020a1183c3a794ff48986a7929e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64a0c59ea0e987b415bf5a1b35d1e12d899aeef", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/f64a0c59ea0e987b415bf5a1b35d1e12d899aeef", "committedDate": "2020-08-31T06:54:34Z", "message": "Proof of concept for priority queue support\n\nDefined comparator class name in QueueConfig which can be queried to set user defined comparator for PriorityQueue in QueueContainer\n\nDefine a comparator attribute in config xsd queue element\n\nProcess and supply value to QueueConfig for server XML configuration\n\nDefine a comparator holder which deserializes queueItem data before comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f2a630c4240e48c402621a6888a6776b350868", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/39f2a630c4240e48c402621a6888a6776b350868", "committedDate": "2020-08-31T06:54:35Z", "message": "Configuration attribute to for queue without duplicates\n\nImplementation of a priority queue which get rid of duplicates\nProvide additional javadocs\n\nProvide configuration for new priority queue\n\nImprove javadocs and provide additional tests\n\nAdd configuration for PriorityQueue in QueueConfig\n\nFollow steps defined in https://github.com/hazelcast/hazelcast/wiki/Checklist-for-Hazelcast-config-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a969644cfee4acec14e8de3059e2016e774f246b", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/a969644cfee4acec14e8de3059e2016e774f246b", "committedDate": "2020-08-31T06:54:35Z", "message": "Take into account new concerns on queue migration,\n\nqueue backup within a cluster,\ntransaction rollback on timeout.\nAll those changes are related to itemQueue datastructure change\nin QueueContainer from LinkedList to PriorityQueue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b475ba187e9a3dd5182bcb0db68768eb0c26f304", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/b475ba187e9a3dd5182bcb0db68768eb0c26f304", "committedDate": "2020-08-31T06:54:35Z", "message": "Use Queue interface in QueueContainer\n\nProvide Priority Queue specialization alongside the LinkedList to support both queue types depending on queue configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0181c8cfae11317110ba771c362ec7a044809e2", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/d0181c8cfae11317110ba771c362ec7a044809e2", "committedDate": "2020-08-31T06:54:35Z", "message": "Forbid a cluster version less than 4.1 to be used with priority queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304e70382d36ef159c701d5b58543a06c6acac6d", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/304e70382d36ef159c701d5b58543a06c6acac6d", "committedDate": "2020-08-31T06:54:35Z", "message": "Apply pull request suggestions and fix unittest failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe50978439ebc3ba010616a3a6a4ecaa2a2e124", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/dfe50978439ebc3ba010616a3a6a4ecaa2a2e124", "committedDate": "2020-08-31T06:54:35Z", "message": "Cache deserialized data to improve PriorityQueue item comparison performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fbd975fee93d58b695211f562eac756eb707e4", "author": {"user": {"login": "wangumer", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/97fbd975fee93d58b695211f562eac756eb707e4", "committedDate": "2020-08-31T06:54:35Z", "message": "Priority queue configuration now defined as attributes of queue element"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85417ad906b8b0f03b34f983427107baf129b125", "author": {"user": {"login": "kuba72ch", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/85417ad906b8b0f03b34f983427107baf129b125", "committedDate": "2020-08-31T06:54:35Z", "message": "revert no duplicate queue support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34eb5b1f90102bc04cb7e44b5387ed3dab8733c8", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/34eb5b1f90102bc04cb7e44b5387ed3dab8733c8", "committedDate": "2020-08-31T06:54:36Z", "message": "Cleanup\n\n- fix imports\n- reformat config class and add nullability annotations\n- remove unused class\n- add rolling upgrade checks\n- add missing config infrastructure and test code\n- minor typos\n- regenerate client codecs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e3299e0ba801af1126a8296c8ae0a4529b0b36", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c7e3299e0ba801af1126a8296c8ae0a4529b0b36", "committedDate": "2020-08-31T06:54:36Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a139c70bd95a1e0be5acc823079f16e6a803eb5", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3a139c70bd95a1e0be5acc823079f16e6a803eb5", "committedDate": "2020-08-31T06:54:36Z", "message": "Further cleanup\n\n- remove guava\n- remove unnecessary import reordering\n- align code with master to avoid unnecessary code changes\n- cleanup generics\n- remove unnecessary instance creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b151e002a5851ee4127ecdfbb19765d1973ba7", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a3b151e002a5851ee4127ecdfbb19765d1973ba7", "committedDate": "2020-08-31T06:54:36Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7918383af8ca730454decc2a1bf12b648528911", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e7918383af8ca730454decc2a1bf12b648528911", "committedDate": "2020-08-31T06:54:36Z", "message": "Attempt at caching deserialized values for queue items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1323ebf0c3e4ef3833fdcda3897b6c53d3f575d", "author": {"user": {"login": "kuba72ch", "name": null}}, "url": "https://github.com/hazelcast/hazelcast/commit/f1323ebf0c3e4ef3833fdcda3897b6c53d3f575d", "committedDate": "2020-08-31T06:54:36Z", "message": "test cases added for priority queue behavior, incl. duplicate check test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82c80fec08dc389de9a8a548dfb24cbc35a6588", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a82c80fec08dc389de9a8a548dfb24cbc35a6588", "committedDate": "2020-08-31T06:54:36Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5643082e1c643f0a1bbe01eb7a0581fa5aa6757d", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5643082e1c643f0a1bbe01eb7a0581fa5aa6757d", "committedDate": "2020-08-31T06:54:36Z", "message": "Cleanup tests and add migration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1c4ff103e4c5917957440e7bc47fe86bc6f3dc7", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e1c4ff103e4c5917957440e7bc47fe86bc6f3dc7", "committedDate": "2020-08-31T06:54:36Z", "message": "Add more tests for priority queue, fix minor issues\n\n- parametrize existing queue tests\n- fix issues found during testing\n- add javadoc to config class and move properties which are meant for configuration\n- minor cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5937d2be0bd3bba8e502b9a790bbbc7a2bf9c63", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b5937d2be0bd3bba8e502b9a790bbbc7a2bf9c63", "committedDate": "2020-08-31T06:54:36Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8d0446d9ba2503cc7c4b4f397cb2c2b012fb399", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a8d0446d9ba2503cc7c4b4f397cb2c2b012fb399", "committedDate": "2020-08-31T06:54:53Z", "message": "Fix compilation issue after rebase and regenerate protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58229dd09fb98040f26bf7e6f0ac279e521bb572", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/58229dd09fb98040f26bf7e6f0ac279e521bb572", "committedDate": "2020-08-31T06:54:53Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b50cca0034b86ec8b12c53b58e3c3f8e8aa96fd", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7b50cca0034b86ec8b12c53b58e3c3f8e8aa96fd", "committedDate": "2020-08-31T06:54:53Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18004752044ca1d690da6fa84f1a0e844b7da0c", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c18004752044ca1d690da6fa84f1a0e844b7da0c", "committedDate": "2020-08-31T06:54:53Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4028b0f37a76a4c1ffec76091900d16a20d25e2", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f4028b0f37a76a4c1ffec76091900d16a20d25e2", "committedDate": "2020-08-31T06:57:03Z", "message": "Regenerate client protocol"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed0d114e6209020a1183c3a794ff48986a7929e7", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ed0d114e6209020a1183c3a794ff48986a7929e7", "committedDate": "2020-08-27T11:50:44Z", "message": "Checkstyle"}, "afterCommit": {"oid": "f4028b0f37a76a4c1ffec76091900d16a20d25e2", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f4028b0f37a76a4c1ffec76091900d16a20d25e2", "committedDate": "2020-08-31T06:57:03Z", "message": "Regenerate client protocol"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3559, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}