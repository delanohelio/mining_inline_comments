{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDk1NDEw", "number": 17600, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODoyMFrOEmdBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODoyMFrOEmdBsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzU2OTEzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODoyMFrOHWe6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMDowNlrOHW6P7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzA4OA==", "bodyText": "I think we should simply not override this method to execute the same on the backup replicas.", "url": "https://github.com/hazelcast/hazelcast/pull/17600#discussion_r493337088", "createdAt": "2020-09-23T08:58:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class MapEntryReplacingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiFunction<? super K, ? super V, ? extends V> function;\n+\n+    public MapEntryReplacingEntryProcessor() {\n+    }\n+\n+    public MapEntryReplacingEntryProcessor(BiFunction<? super K, ? super V, ? extends V> function) {\n+        this.function = function;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        V newValue = function.apply(entry.getKey(), entry.getValue());\n+        entry.setValue(newValue);\n+        return null;\n+    }\n+\n+    @Override\n+    public int getFactoryId() {\n+        return MapDataSerializerHook.F_ID;\n+    }\n+\n+    @Override\n+    public int getClassId() {\n+        return MapDataSerializerHook.MAP_ENTRY_REPLACING_PROCESSOR;\n+    }\n+\n+    @Override\n+    public void writeData(ObjectDataOutput out) throws IOException {\n+        out.writeObject(function);\n+    }\n+\n+    @Override\n+    public void readData(ObjectDataInput in) throws IOException {\n+        function = in.readObject();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public EntryProcessor<K, V, V> getBackupProcessor() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406f6b9c2fb5a0bf95d601929857af71aa115be0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0Njc1Mw==", "bodyText": "@mmedenjak - I guess I should do the same for KeyValueConsumingEntryProcessor (used in forEach() implementation) - can you please confirm?\nhttps://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java#L1123", "url": "https://github.com/hazelcast/hazelcast/pull/17600#discussion_r493346753", "createdAt": "2020-09-23T09:08:40Z", "author": {"login": "webashutosh"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class MapEntryReplacingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiFunction<? super K, ? super V, ? extends V> function;\n+\n+    public MapEntryReplacingEntryProcessor() {\n+    }\n+\n+    public MapEntryReplacingEntryProcessor(BiFunction<? super K, ? super V, ? extends V> function) {\n+        this.function = function;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        V newValue = function.apply(entry.getKey(), entry.getValue());\n+        entry.setValue(newValue);\n+        return null;\n+    }\n+\n+    @Override\n+    public int getFactoryId() {\n+        return MapDataSerializerHook.F_ID;\n+    }\n+\n+    @Override\n+    public int getClassId() {\n+        return MapDataSerializerHook.MAP_ENTRY_REPLACING_PROCESSOR;\n+    }\n+\n+    @Override\n+    public void writeData(ObjectDataOutput out) throws IOException {\n+        out.writeObject(function);\n+    }\n+\n+    @Override\n+    public void readData(ObjectDataInput in) throws IOException {\n+        function = in.readObject();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public EntryProcessor<K, V, V> getBackupProcessor() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzA4OA=="}, "originalCommit": {"oid": "406f6b9c2fb5a0bf95d601929857af71aa115be0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2ODYyOA==", "bodyText": "I've checked the others. Since we don't set the new value, means we're not mutating the entry, which means it's read-only.\nNow that I think about it, it may be the case that some users use IMap.forEach to mutate the value. We have two options then:\n\u2022 we continue supporting only read-only use of forEach. This way, users mutating the values may get surprised but they can always switch to using regular EPs. Also, this way we don't introduce a massive overhead for read-only uses of forEach, meaning we don't create defensive copies, serialize after the lambda has been invoked, invoke entry listeners, WAN replication, etc. for every single value\n\u2022 we defensively act as if the value was mutated. That means both read-only and mutating lambdas will work correctly.\nBetween the two, I'd go with option 1. It's a bit surprising but users can always simply switch to a regular EP to mutate the values and we avoid the prohibitively expensive overhead of defensively copying, serializing, notifying listeners, etc. for read-only uses of forEach.\nIn other words, you can leave that one as-is.", "url": "https://github.com/hazelcast/hazelcast/pull/17600#discussion_r493368628", "createdAt": "2020-09-23T09:30:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class MapEntryReplacingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiFunction<? super K, ? super V, ? extends V> function;\n+\n+    public MapEntryReplacingEntryProcessor() {\n+    }\n+\n+    public MapEntryReplacingEntryProcessor(BiFunction<? super K, ? super V, ? extends V> function) {\n+        this.function = function;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        V newValue = function.apply(entry.getKey(), entry.getValue());\n+        entry.setValue(newValue);\n+        return null;\n+    }\n+\n+    @Override\n+    public int getFactoryId() {\n+        return MapDataSerializerHook.F_ID;\n+    }\n+\n+    @Override\n+    public int getClassId() {\n+        return MapDataSerializerHook.MAP_ENTRY_REPLACING_PROCESSOR;\n+    }\n+\n+    @Override\n+    public void writeData(ObjectDataOutput out) throws IOException {\n+        out.writeObject(function);\n+    }\n+\n+    @Override\n+    public void readData(ObjectDataInput in) throws IOException {\n+        function = in.readObject();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public EntryProcessor<K, V, V> getBackupProcessor() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzA4OA=="}, "originalCommit": {"oid": "406f6b9c2fb5a0bf95d601929857af71aa115be0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3ODA1OQ==", "bodyText": "Agree with you. forEach() is a bit subjective one!", "url": "https://github.com/hazelcast/hazelcast/pull/17600#discussion_r493378059", "createdAt": "2020-09-23T09:40:20Z", "author": {"login": "webashutosh"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class MapEntryReplacingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiFunction<? super K, ? super V, ? extends V> function;\n+\n+    public MapEntryReplacingEntryProcessor() {\n+    }\n+\n+    public MapEntryReplacingEntryProcessor(BiFunction<? super K, ? super V, ? extends V> function) {\n+        this.function = function;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        V newValue = function.apply(entry.getKey(), entry.getValue());\n+        entry.setValue(newValue);\n+        return null;\n+    }\n+\n+    @Override\n+    public int getFactoryId() {\n+        return MapDataSerializerHook.F_ID;\n+    }\n+\n+    @Override\n+    public int getClassId() {\n+        return MapDataSerializerHook.MAP_ENTRY_REPLACING_PROCESSOR;\n+    }\n+\n+    @Override\n+    public void writeData(ObjectDataOutput out) throws IOException {\n+        out.writeObject(function);\n+    }\n+\n+    @Override\n+    public void readData(ObjectDataInput in) throws IOException {\n+        function = in.readObject();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public EntryProcessor<K, V, V> getBackupProcessor() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzA4OA=="}, "originalCommit": {"oid": "406f6b9c2fb5a0bf95d601929857af71aa115be0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTA3MA==", "bodyText": "I guess there's also the marker interface of ReadOnly which can be added to the lambda but... I'm not sure if everyone is aware of it and I'd rather keep this for another PR if we decide to change the current behaviour.", "url": "https://github.com/hazelcast/hazelcast/pull/17600#discussion_r493785070", "createdAt": "2020-09-23T18:00:06Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapEntryReplacingEntryProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class MapEntryReplacingEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n+\n+    BiFunction<? super K, ? super V, ? extends V> function;\n+\n+    public MapEntryReplacingEntryProcessor() {\n+    }\n+\n+    public MapEntryReplacingEntryProcessor(BiFunction<? super K, ? super V, ? extends V> function) {\n+        this.function = function;\n+    }\n+\n+    @Override\n+    public V process(Map.Entry<K, V> entry) {\n+        V newValue = function.apply(entry.getKey(), entry.getValue());\n+        entry.setValue(newValue);\n+        return null;\n+    }\n+\n+    @Override\n+    public int getFactoryId() {\n+        return MapDataSerializerHook.F_ID;\n+    }\n+\n+    @Override\n+    public int getClassId() {\n+        return MapDataSerializerHook.MAP_ENTRY_REPLACING_PROCESSOR;\n+    }\n+\n+    @Override\n+    public void writeData(ObjectDataOutput out) throws IOException {\n+        out.writeObject(function);\n+    }\n+\n+    @Override\n+    public void readData(ObjectDataInput in) throws IOException {\n+        function = in.readObject();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public EntryProcessor<K, V, V> getBackupProcessor() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzA4OA=="}, "originalCommit": {"oid": "406f6b9c2fb5a0bf95d601929857af71aa115be0"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 257, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}