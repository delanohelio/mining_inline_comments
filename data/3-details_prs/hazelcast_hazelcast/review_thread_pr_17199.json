{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODk0ODQy", "number": 17199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTo1Njo1NVrOENsUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMDozNVrOENwJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzkzMTI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTo1Njo1NVrOGwcYGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozMDozNFrOGweSBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0OTc1Mw==", "bodyText": "Broadening RuntimeExceptionFactory#create to return Throwable may mislead future implementations. Instead we can keep its signature as RuntimeException create(Throwable t, String m) and change the new usage in peelAsNeeded to do a sneakyThrow(throwable). WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453449753", "createdAt": "2020-07-13T05:56:55Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -44,7 +44,7 @@\n      * Interface used by rethrow/peel to wrap the peeled exception\n      */\n     public interface RuntimeExceptionFactory {\n-        RuntimeException create(Throwable throwable, String message);\n+        Throwable create(Throwable throwable, String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MDk2NA==", "bodyText": "I could not follow. We don't need a throw. We will write the exception to the socket. Not sure how sneaky how will help me here?\nI may rename RuntimeExceptionFactory  to something like ExceptionWrapper which actually what it does. So that the name of the class does not clash with the return type. How does that sound?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453480964", "createdAt": "2020-07-13T08:30:34Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -44,7 +44,7 @@\n      * Interface used by rethrow/peel to wrap the peeled exception\n      */\n     public interface RuntimeExceptionFactory {\n-        RuntimeException create(Throwable throwable, String message);\n+        Throwable create(Throwable throwable, String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0OTc1Mw=="}, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODU1NTY2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMDowMVrOGwiCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToxODo0OVrOGwkOmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjU4Mw==", "bodyText": "this increment is only server side, right? is it serialized back to the client and the client sends it back to the server so that the second time it will be incremented to 2?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453542583", "createdAt": "2020-07-13T10:10:01Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3ODM5Mw==", "bodyText": "Since runCount is a static field. The change is visible to everyone inside same JVM.", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453578393", "createdAt": "2020-07-13T11:18:49Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjU4Mw=="}, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODU1NzY3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMDozNVrOGwiD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyNTozM1rOGwkbpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjkwNQ==", "bodyText": "did you want to shutdown member1 in this test?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453542905", "createdAt": "2020-07-13T10:10:35Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {\n+                throw new RetryableIOException();\n+            }\n+            return \"SUCCESS\";\n+        }\n+    }\n+\n+    @Test\n+    public void testRetriableIOException() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+        assertEquals(\"SUCCESS\", executorService.submitToMember(new SecondTimeSuccessCallable(), member2).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MTczMw==", "bodyText": "No, I don't but I understand the confusion. Let me rewrite the test by using a single member. The second member is actually not needed for this test.", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453581733", "createdAt": "2020-07-13T11:25:33Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {\n+                throw new RetryableIOException();\n+            }\n+            return \"SUCCESS\";\n+        }\n+    }\n+\n+    @Test\n+    public void testRetriableIOException() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+        assertEquals(\"SUCCESS\", executorService.submitToMember(new SecondTimeSuccessCallable(), member2).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjkwNQ=="}, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 462, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}