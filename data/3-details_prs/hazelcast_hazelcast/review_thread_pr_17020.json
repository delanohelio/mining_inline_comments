{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjQ5OTM2", "number": 17020, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDo0OVrOECLqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoyMTo0M1rOEC9AbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzIzNjk1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDo0OVrOGee1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDo0OVrOGee1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTYzOA==", "bodyText": "This test would fail with IllegalStateException because the response thread that completes the setAsync stage is not allowed to make the getAsync remote call. Changing the default dependent action executor to DEFAULT_ASYNC_EXECUTOR fixes this.", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r434615638", "createdAt": "2020-06-03T14:34:49Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java", "diffHunk": "@@ -917,6 +918,14 @@ public void testGetPutRemoveAsync() {\n         }\n     }\n \n+    @Test\n+    public void testAsyncMethodChaining() {\n+        IMap<Integer, Integer> map = getInstance().getMap(\"testGetPutRemoveAsync\");\n+        CompletionStage<Integer> setThenGet = map.setAsync(1, 1)\n+                                              .thenCompose(v -> map.getAsync(1));\n+        assertEquals(1L, (long) setThenGet.toCompletableFuture().join());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f996889305738665f8b1c250531337c78086de"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTMyMTQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientDelegatingFuture.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoyMTo0M1rOGfuOCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxODoyMVrOGfyxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw==", "bodyText": "Minor: why do we not want the parent to listen to the future completion instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435916297", "createdAt": "2020-06-05T13:21:43Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientDelegatingFuture.java", "diffHunk": "@@ -54,14 +54,18 @@\n \n     final boolean deserializeResponse;\n     private final ClientMessageDecoder clientMessageDecoder;\n-    private volatile Object decodedResponse = VOID;\n+    private volatile Object decodedResponse;\n \n     public ClientDelegatingFuture(ClientInvocationFuture clientInvocationFuture,\n                                   SerializationService serializationService,\n                                   ClientMessageDecoder clientMessageDecoder, V defaultValue, boolean deserializeResponse) {\n-        super(serializationService, clientInvocationFuture, defaultValue);\n+        super(serializationService, clientInvocationFuture, defaultValue, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a15cf9e1de5c771c2a7026b853c2797dea67299"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NzA3NQ==", "bodyText": "We want to ensure that decodedResponse is initialized to VOID before the dependent action in whenComplete is executed. If the delegate future (clientInvocationFuture) is completed concurrently, it may be the case that the dependent action is executed before the constructor is done -> if the dependent was already registered in super constructor it might observe decodedResponse as null instead of VOID and break the value resolution logic (client message decoding, deserialized value caching etc).", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435987075", "createdAt": "2020-06-05T15:12:18Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientDelegatingFuture.java", "diffHunk": "@@ -54,14 +54,18 @@\n \n     final boolean deserializeResponse;\n     private final ClientMessageDecoder clientMessageDecoder;\n-    private volatile Object decodedResponse = VOID;\n+    private volatile Object decodedResponse;\n \n     public ClientDelegatingFuture(ClientInvocationFuture clientInvocationFuture,\n                                   SerializationService serializationService,\n                                   ClientMessageDecoder clientMessageDecoder, V defaultValue, boolean deserializeResponse) {\n-        super(serializationService, clientInvocationFuture, defaultValue);\n+        super(serializationService, clientInvocationFuture, defaultValue, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw=="}, "originalCommit": {"oid": "6a15cf9e1de5c771c2a7026b853c2797dea67299"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDkyNQ==", "bodyText": "Cool, thanks!", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435990925", "createdAt": "2020-06-05T15:18:21Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientDelegatingFuture.java", "diffHunk": "@@ -54,14 +54,18 @@\n \n     final boolean deserializeResponse;\n     private final ClientMessageDecoder clientMessageDecoder;\n-    private volatile Object decodedResponse = VOID;\n+    private volatile Object decodedResponse;\n \n     public ClientDelegatingFuture(ClientInvocationFuture clientInvocationFuture,\n                                   SerializationService serializationService,\n                                   ClientMessageDecoder clientMessageDecoder, V defaultValue, boolean deserializeResponse) {\n-        super(serializationService, clientInvocationFuture, defaultValue);\n+        super(serializationService, clientInvocationFuture, defaultValue, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw=="}, "originalCommit": {"oid": "6a15cf9e1de5c771c2a7026b853c2797dea67299"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 549, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}