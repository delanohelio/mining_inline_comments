{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjQyNDM4", "number": 17155, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoxOTozNVrOEdMiow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoxOTozNVrOEdMiow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDQ5NjM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoxOTozNVrOHINtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDozNjoyOVrOHITX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NTMyNw==", "bodyText": "What did we gain with this change? When was it an issue?", "url": "https://github.com/hazelcast/hazelcast/pull/17155#discussion_r478375327", "createdAt": "2020-08-27T12:19:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "diffHunk": "@@ -483,17 +485,22 @@ public PartitionIdSet getOwnedPartitions() {\n      */\n     @Override\n     public void reloadOwnedPartitions() {\n-        final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        IPartitionService partitionService = nodeEngine.getPartitionService();\n         for (; ; ) {\n-            final PartitionIdSet expected = ownedPartitions.get();\n-            final Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n-            final PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n+            PartitionIdSet expected = ownedPartitions.get();\n+            Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n+            PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n             if (ownedPartitions.compareAndSet(expected, newSet)) {\n                 return;\n             }\n         }\n     }\n \n+    @Override\n+    public void nullifyOwnedPartitions() {\n+        ownedPartitions.set(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787057f06b2e6745d50d39566df35840010d2aa4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5MTUyNQ==", "bodyText": "owned partition list is only needed for map loader. But in current codebase, every partition change triggers owned-partition-list update. This PR makes this update lazy.", "url": "https://github.com/hazelcast/hazelcast/pull/17155#discussion_r478391525", "createdAt": "2020-08-27T12:46:53Z", "author": {"login": "ahmetmircik"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "diffHunk": "@@ -483,17 +485,22 @@ public PartitionIdSet getOwnedPartitions() {\n      */\n     @Override\n     public void reloadOwnedPartitions() {\n-        final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        IPartitionService partitionService = nodeEngine.getPartitionService();\n         for (; ; ) {\n-            final PartitionIdSet expected = ownedPartitions.get();\n-            final Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n-            final PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n+            PartitionIdSet expected = ownedPartitions.get();\n+            Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n+            PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n             if (ownedPartitions.compareAndSet(expected, newSet)) {\n                 return;\n             }\n         }\n     }\n \n+    @Override\n+    public void nullifyOwnedPartitions() {\n+        ownedPartitions.set(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NTMyNw=="}, "originalCommit": {"oid": "787057f06b2e6745d50d39566df35840010d2aa4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNzEwNQ==", "bodyText": "It's also used in the old query engine, hence this fix -  #11471. Is the PartitionIdSet large in heap consumption?", "url": "https://github.com/hazelcast/hazelcast/pull/17155#discussion_r478427105", "createdAt": "2020-08-27T13:40:37Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "diffHunk": "@@ -483,17 +485,22 @@ public PartitionIdSet getOwnedPartitions() {\n      */\n     @Override\n     public void reloadOwnedPartitions() {\n-        final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        IPartitionService partitionService = nodeEngine.getPartitionService();\n         for (; ; ) {\n-            final PartitionIdSet expected = ownedPartitions.get();\n-            final Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n-            final PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n+            PartitionIdSet expected = ownedPartitions.get();\n+            Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n+            PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n             if (ownedPartitions.compareAndSet(expected, newSet)) {\n                 return;\n             }\n         }\n     }\n \n+    @Override\n+    public void nullifyOwnedPartitions() {\n+        ownedPartitions.set(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NTMyNw=="}, "originalCommit": {"oid": "787057f06b2e6745d50d39566df35840010d2aa4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NjA2Mw==", "bodyText": "A PartitionIdSet wraps a JDK BitSet exposing a Set<Integer> interface along with primitive int methods to avoid (un-)boxing. Its size grows with partition count (1 long is required per 64 partitions -- not taking into account constant overhead of one int + one reference), so:\n\nfor default 271 partitions, size is 40 bytes. For comparison, a HashSet contains a HashMap whose size when empty is 44 bytes (assuming compressed OOPS - 64 bytes otherwise).\nfor 2000 partitions, size is 256 bytes.\nfor 20000 partitions, cost is 2,504 bytes.\n\nAt higher partition counts, a sparse Set<Integer> will be better in terms of memory cost than the current JDK BitSet. We should look into replacing the JDK BitSet with a better variant for high partition counts.", "url": "https://github.com/hazelcast/hazelcast/pull/17155#discussion_r478446063", "createdAt": "2020-08-27T14:06:38Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "diffHunk": "@@ -483,17 +485,22 @@ public PartitionIdSet getOwnedPartitions() {\n      */\n     @Override\n     public void reloadOwnedPartitions() {\n-        final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        IPartitionService partitionService = nodeEngine.getPartitionService();\n         for (; ; ) {\n-            final PartitionIdSet expected = ownedPartitions.get();\n-            final Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n-            final PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n+            PartitionIdSet expected = ownedPartitions.get();\n+            Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n+            PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n             if (ownedPartitions.compareAndSet(expected, newSet)) {\n                 return;\n             }\n         }\n     }\n \n+    @Override\n+    public void nullifyOwnedPartitions() {\n+        ownedPartitions.set(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NTMyNw=="}, "originalCommit": {"oid": "787057f06b2e6745d50d39566df35840010d2aa4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2ODA3Nw==", "bodyText": "\ud83d\ude47", "url": "https://github.com/hazelcast/hazelcast/pull/17155#discussion_r478468077", "createdAt": "2020-08-27T14:36:29Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapServiceContextImpl.java", "diffHunk": "@@ -483,17 +485,22 @@ public PartitionIdSet getOwnedPartitions() {\n      */\n     @Override\n     public void reloadOwnedPartitions() {\n-        final IPartitionService partitionService = nodeEngine.getPartitionService();\n+        IPartitionService partitionService = nodeEngine.getPartitionService();\n         for (; ; ) {\n-            final PartitionIdSet expected = ownedPartitions.get();\n-            final Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n-            final PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n+            PartitionIdSet expected = ownedPartitions.get();\n+            Collection<Integer> partitions = partitionService.getMemberPartitions(nodeEngine.getThisAddress());\n+            PartitionIdSet newSet = immutablePartitionIdSet(partitionService.getPartitionCount(), partitions);\n             if (ownedPartitions.compareAndSet(expected, newSet)) {\n                 return;\n             }\n         }\n     }\n \n+    @Override\n+    public void nullifyOwnedPartitions() {\n+        ownedPartitions.set(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NTMyNw=="}, "originalCommit": {"oid": "787057f06b2e6745d50d39566df35840010d2aa4"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 415, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}