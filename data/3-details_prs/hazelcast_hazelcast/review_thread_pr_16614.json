{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDE0OTk1", "number": 16614, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyODoyMlrODdla1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDo0NToxOVrODdtQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ4MzczOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyODoyMlrOFmRXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyODoyMlrOFmRXJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NDY2Mw==", "bodyText": "What if Clock.currentTimeMillis() + timeoutMs overflows?", "url": "https://github.com/hazelcast/hazelcast/pull/16614#discussion_r375674663", "createdAt": "2020-02-06T07:28:22Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "diffHunk": "@@ -110,12 +116,12 @@ private void checkNotDestroyed(String name) {\n     }\n \n     protected final void addWaitKey(String name, W key, long timeoutMs) {\n+        long deadline = timeoutMs > 0 ? Clock.currentTimeMillis() + timeoutMs : NO_WAIT_KEY_DEADLINE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dead3b0b7af55dfca34818f98b523998697c4b6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ4NjA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyOTozNlrOFmRYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoyOTozNlrOFmRYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NTAzMw==", "bodyText": "I think it's better to use Long.MAX as NO_WAIT_KEY_DEADLINE. That way, there'll be no need to check deadline == NO_WAIT_KEY_DEADLINE equality.", "url": "https://github.com/hazelcast/hazelcast/pull/16614#discussion_r375675033", "createdAt": "2020-02-06T07:29:36Z", "author": {"login": "mdogan"}, "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "diffHunk": "@@ -57,7 +57,10 @@\n  * @param <R> concrete type of the resource\n  */\n public abstract class ResourceRegistry<W extends WaitKey, R extends BlockingResource<W>>\n-        implements LiveOperationsTracker, DataSerializable {\n+        implements DataSerializable {\n+\n+    private static final long OPERATION_TIMEOUT_EXTENSION_MS = TimeUnit.SECONDS.toMillis(5);\n+    private static final long NO_WAIT_KEY_DEADLINE = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dead3b0b7af55dfca34818f98b523998697c4b6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDA2MDMxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDo0OTo1MVrOFmW2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDo0OTo1MVrOFmW2Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2NDUyMg==", "bodyText": "Can we add a comment why we need this extension?", "url": "https://github.com/hazelcast/hazelcast/pull/16614#discussion_r375764522", "createdAt": "2020-02-06T10:49:51Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "diffHunk": "@@ -57,7 +57,10 @@\n  * @param <R> concrete type of the resource\n  */\n public abstract class ResourceRegistry<W extends WaitKey, R extends BlockingResource<W>>\n-        implements LiveOperationsTracker, DataSerializable {\n+        implements DataSerializable {\n+\n+    private static final long OPERATION_TIMEOUT_EXTENSION_MS = TimeUnit.SECONDS.toMillis(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bd7bb10b09461f0a1ddf068545c0824fa4c0cc1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDA3MTU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDo1MzoyM1rOFmW8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDo1MzoyM1rOFmW8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2NjIxOQ==", "bodyText": "else deadline = Long.MAX_VALUE ?", "url": "https://github.com/hazelcast/hazelcast/pull/16614#discussion_r375766219", "createdAt": "2020-02-06T10:53:23Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "diffHunk": "@@ -217,29 +228,42 @@ public final CPGroupId getGroupId() {\n         return indices;\n     }\n \n-    @Override\n-    public void populate(LiveOperations liveOperations) {\n-        for (BiTuple<Address, Long> t : liveOperationsSet) {\n-            liveOperations.add(t.element1, t.element2);\n+    public void populate(LiveOperations liveOperations, long now) {\n+        Iterator<Entry<BiTuple<Address, Long>, Long>> it = liveOperationMap.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Entry<BiTuple<Address, Long>, Long> e = it.next();\n+            long deadline = e.getValue();\n+            if (deadline >= now) {\n+                BiTuple<Address, Long> t = e.getKey();\n+                liveOperations.add(t.element1, t.element2);\n+            } else {\n+                it.remove();\n+            }\n         }\n     }\n \n-    private void addLiveOperation(W key) {\n-        liveOperationsSet.add(BiTuple.of(key.callerAddress(), key.callId()));\n+    private void addLiveOperation(W key, long deadline) {\n+        if (Long.MAX_VALUE - deadline >= OPERATION_TIMEOUT_EXTENSION_MS) {\n+            deadline += OPERATION_TIMEOUT_EXTENSION_MS;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bd7bb10b09461f0a1ddf068545c0824fa4c0cc1"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDc2Njg1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDo0NToxOVrOFmdk4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDo0NToxOVrOFmdk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NDc4NQ==", "bodyText": "typo cloud -> could", "url": "https://github.com/hazelcast/hazelcast/pull/16614#discussion_r375874785", "createdAt": "2020-02-06T14:45:19Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/datastructures/spi/blocking/ResourceRegistry.java", "diffHunk": "@@ -57,11 +57,31 @@\n  * @param <R> concrete type of the resource\n  */\n public abstract class ResourceRegistry<W extends WaitKey, R extends BlockingResource<W>>\n-        implements LiveOperationsTracker, DataSerializable {\n+        implements DataSerializable {\n+\n+    // If the wait key of a blocking call times out, it is still reported\n+    // as a live operation. This cloud lead to hang the caller side when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da2d660df976201ae6fcc556545a6b2bc80a9ec"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 805, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}