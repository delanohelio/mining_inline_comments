{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTM2ODc0", "number": 17348, "title": "Environment variables/system properties config override mechanism", "bodyText": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\nRules for environment variables conversion:\n\neach entry needs to be prefixed with either HZ_ or HZCLIENT_\neach configuration key needs to be uppercased\n_ introduces a new configuration level\neach - needs to be ignored\n\nRules for system properties conversion:\n\neach entry needs to be prefixed with hz. or hz-client.\neach configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised.\n\nHZ_CLUSTERNAME=foo;\nHZ_NETWORK_JOIN_TCPIP_ENABLED=false;\nHZ_NETWORK_JOIN_MULTICAST_ENABLED=false\n\nThe above gets translated into a config patch equal to the following:\nINFO: Detected external configuration overrides in environment variables: \nhazelcast.network.join.multicast.enabled=false\nhazelcast.network.join.tcpip.enabled=false\nhazelcast.clustername=foo\n\nConfiguration can be also overridden by using system properties so -Dhz.cluster-name=foo results in:\nINFO: Detected external configuration overrides in system properties: [hazelcast.clustername=foo]\n\n\ndepends on: #17402", "createdAt": "2020-08-14T11:40:01Z", "url": "https://github.com/hazelcast/hazelcast/pull/17348", "merged": true, "mergeCommit": {"oid": "410e2e7be56832bd0658b66197242dfc15d8fc05"}, "closed": true, "closedAt": "2020-09-02T20:56:37Z", "author": {"login": "pivovarit"}, "timelineItems": {"totalCount": 75, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-zPgegBqjM2NTU5MzEyMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFBeSxgH2gAyNDY3OTM2ODc0OjMyMjkzOTJiY2YxYmE2YjQ5MDNkNTZjMjkyZDY3NDRkNDcyY2RlNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cc68ee7c0c3294238a9dc6e48eec8324d45bc0a", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2cc68ee7c0c3294238a9dc6e48eec8324d45bc0a", "committedDate": "2020-08-14T11:47:44Z", "message": "Remove unused imports"}, "afterCommit": {"oid": "5097b821478d752d453629dfae93bde35c2fcfcc", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5097b821478d752d453629dfae93bde35c2fcfcc", "committedDate": "2020-08-14T11:51:20Z", "message": "Introduce env-based config overrides"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08b3d3a1a916d2790fdbf5195c1cfee2326bb2c0", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/08b3d3a1a916d2790fdbf5195c1cfee2326bb2c0", "committedDate": "2020-08-14T12:16:45Z", "message": "Return value as optional"}, "afterCommit": {"oid": "16021d749fa875746bd81d3d1b679fdb2659ab36", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/16021d749fa875746bd81d3d1b679fdb2659ab36", "committedDate": "2020-08-14T12:23:54Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16021d749fa875746bd81d3d1b679fdb2659ab36", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/16021d749fa875746bd81d3d1b679fdb2659ab36", "committedDate": "2020-08-14T12:23:54Z", "message": "Return value as optional"}, "afterCommit": {"oid": "90329547cba2de2c5f568c64a5856935ef7a19ff", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/90329547cba2de2c5f568c64a5856935ef7a19ff", "committedDate": "2020-08-14T12:43:11Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90329547cba2de2c5f568c64a5856935ef7a19ff", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/90329547cba2de2c5f568c64a5856935ef7a19ff", "committedDate": "2020-08-14T12:43:11Z", "message": "Return value as optional"}, "afterCommit": {"oid": "188187a6b631cea36ffc51cceb404ccdae0000f2", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/188187a6b631cea36ffc51cceb404ccdae0000f2", "committedDate": "2020-08-14T13:27:28Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "188187a6b631cea36ffc51cceb404ccdae0000f2", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/188187a6b631cea36ffc51cceb404ccdae0000f2", "committedDate": "2020-08-14T13:27:28Z", "message": "Return value as optional"}, "afterCommit": {"oid": "4a4d970913c38359be46b4db48df977719206fa1", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4a4d970913c38359be46b4db48df977719206fa1", "committedDate": "2020-08-14T13:56:04Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a4d970913c38359be46b4db48df977719206fa1", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4a4d970913c38359be46b4db48df977719206fa1", "committedDate": "2020-08-14T13:56:04Z", "message": "Return value as optional"}, "afterCommit": {"oid": "9d1a18205506b138720c2b5e48d8293ad574f04c", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9d1a18205506b138720c2b5e48d8293ad574f04c", "committedDate": "2020-08-14T14:11:28Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d1a18205506b138720c2b5e48d8293ad574f04c", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9d1a18205506b138720c2b5e48d8293ad574f04c", "committedDate": "2020-08-14T14:11:28Z", "message": "Return value as optional"}, "afterCommit": {"oid": "cc24e257e5bb707183fc2ac017824014b33b59e8", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/cc24e257e5bb707183fc2ac017824014b33b59e8", "committedDate": "2020-08-14T14:21:59Z", "message": "Return value as optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc24e257e5bb707183fc2ac017824014b33b59e8", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/cc24e257e5bb707183fc2ac017824014b33b59e8", "committedDate": "2020-08-14T14:21:59Z", "message": "Return value as optional"}, "afterCommit": {"oid": "1ba48aa52f13ea4b4c359e8ce5627015ce27f2e4", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1ba48aa52f13ea4b4c359e8ce5627015ce27f2e4", "committedDate": "2020-08-14T14:37:39Z", "message": "Introduce env-based config overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjY1Njg3", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-468265687", "createdAt": "2020-08-17T08:28:03Z", "commit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyODowNFrOHBfNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjo0N1rOHBgh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMjAwMA==", "bodyText": "Consider making it less generic, like to have two methods overwrite(Config config) and overwriteClient(ClientConfig clientConfig). Then, you'd not need these clientConfigProcessor() and memberConfigProcessor() which IMO complicate understanding of the code.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471322000", "createdAt": "2020-08-17T08:28:04Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNzcwMg==", "bodyText": "I wonder if it's not a too strong assumption that every variable starting from HZ_ is a Hazelcast Configuration. Not sure it's good enough. Maybe we need to parse and check which env variables are really a part of Hazelcast Configuration.\n3 scenarios to consider:\n\nRandom env variable.\n\nStart with a variable: HZ_BLA_BLA=false. You get the following log:\nINFO: Detected external configuration overrides in environment variables:\nbla.bla=false\n\nWhich is later ignored. It can be confusing to users.\n\nOur Docker image default environment variables\nYou don't define any env variables, but you still get the following logs.\n\n$ docker run test\n...\nAug 17, 2020 8:53:31 AM com.hazelcast.internal.config.override.ExternalConfigurationOverride\nINFO: Detected external configuration overrides in environment variables:\nhome=/opt/hazelcast\n\n\nWe currently use HZ_LICENSE_KEY for the Hazelcast Enterprise Docker image\nCheck this: https://github.com/hazelcast/hazelcast-docker#hazelcast-enterprise", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471337702", "createdAt": "2020-08-17T08:56:03Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {\n+        ConfigValidator.validate(configProviders);\n+\n+        for (ConfigProvider configProvider : configProviders) {\n+            Map<String, String> properties = configProvider.properties();\n+\n+            if (properties.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzU5MQ==", "bodyText": "Consider changing the name, two options:\n\nName it the same the same as in the *.yaml.* package: ElementAdapter.\nRename it to ConfigOverrideElementAdapter (and maybe rename also ElementAdapter to YamlElementAdapter).\n\nBecause it gets congusing imo.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471343591", "createdAt": "2020-08-17T09:06:47Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNodeElementAdapter.java", "diffHunk": "@@ -0,0 +1,382 @@\n+package com.hazelcast.internal.config.override;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.TypeInfo;\n+import org.w3c.dom.UserDataHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+class ConfigNodeElementAdapter implements Element {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cf1f1f8fba49d0e701367a3c2dc83a7589b3c63", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0cf1f1f8fba49d0e701367a3c2dc83a7589b3c63", "committedDate": "2020-08-21T08:49:53Z", "message": "Simplify ExternalConfigurationOverride"}, "afterCommit": {"oid": "ee1c2fb540902c3e1127d2e979b0425165df8cbc", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ee1c2fb540902c3e1127d2e979b0425165df8cbc", "committedDate": "2020-08-21T08:52:36Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee1c2fb540902c3e1127d2e979b0425165df8cbc", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ee1c2fb540902c3e1127d2e979b0425165df8cbc", "committedDate": "2020-08-21T08:52:36Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "20ea1a4b22bd9fecba24384ff33496bc948ed4af", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/20ea1a4b22bd9fecba24384ff33496bc948ed4af", "committedDate": "2020-08-21T09:53:22Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20ea1a4b22bd9fecba24384ff33496bc948ed4af", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/20ea1a4b22bd9fecba24384ff33496bc948ed4af", "committedDate": "2020-08-21T09:53:22Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "dfea0e403e5674acd235f8cc069e58a2cd5cb868", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dfea0e403e5674acd235f8cc069e58a2cd5cb868", "committedDate": "2020-08-21T10:04:36Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfea0e403e5674acd235f8cc069e58a2cd5cb868", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dfea0e403e5674acd235f8cc069e58a2cd5cb868", "committedDate": "2020-08-21T10:04:36Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "1262f4d61a99271578757c4dcae8931c569286a6", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1262f4d61a99271578757c4dcae8931c569286a6", "committedDate": "2020-08-21T10:12:08Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1262f4d61a99271578757c4dcae8931c569286a6", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1262f4d61a99271578757c4dcae8931c569286a6", "committedDate": "2020-08-21T10:12:08Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "c2c082ab2d44181578747785519c8dee535dde8b", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c2c082ab2d44181578747785519c8dee535dde8b", "committedDate": "2020-08-21T10:29:09Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c082ab2d44181578747785519c8dee535dde8b", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c2c082ab2d44181578747785519c8dee535dde8b", "committedDate": "2020-08-21T10:29:09Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "3715d4bef7a7316dd52f5701c5bf6cc6be6a5c28", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3715d4bef7a7316dd52f5701c5bf6cc6be6a5c28", "committedDate": "2020-08-21T10:54:06Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3715d4bef7a7316dd52f5701c5bf6cc6be6a5c28", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3715d4bef7a7316dd52f5701c5bf6cc6be6a5c28", "committedDate": "2020-08-21T10:54:06Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "50cd4e095bb2ebb915bd7109988f4d5058c8a666", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/50cd4e095bb2ebb915bd7109988f4d5058c8a666", "committedDate": "2020-08-21T11:23:42Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50cd4e095bb2ebb915bd7109988f4d5058c8a666", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/50cd4e095bb2ebb915bd7109988f4d5058c8a666", "committedDate": "2020-08-21T11:23:42Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "a3ac4bb9415112c12600f5043de4f411bbf895ef", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a3ac4bb9415112c12600f5043de4f411bbf895ef", "committedDate": "2020-08-21T14:28:04Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3ac4bb9415112c12600f5043de4f411bbf895ef", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a3ac4bb9415112c12600f5043de4f411bbf895ef", "committedDate": "2020-08-21T14:28:04Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}, "afterCommit": {"oid": "114586c217223379355c41d9046d06dbbdd29e08", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/114586c217223379355c41d9046d06dbbdd29e08", "committedDate": "2020-08-21T15:08:30Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7b28d35403acf9e43e6924d943f6bc1b258a9af", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a7b28d35403acf9e43e6924d943f6bc1b258a9af", "committedDate": "2020-08-24T05:53:05Z", "message": "Use Yaml processors"}, "afterCommit": {"oid": "1302d5f0ca2f8420d9b59bbab81640badae873cd", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1302d5f0ca2f8420d9b59bbab81640badae873cd", "committedDate": "2020-08-24T06:22:14Z", "message": "Use Yaml processors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1302d5f0ca2f8420d9b59bbab81640badae873cd", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1302d5f0ca2f8420d9b59bbab81640badae873cd", "committedDate": "2020-08-24T06:22:14Z", "message": "Use Yaml processors"}, "afterCommit": {"oid": "3a7c00d0964496776344faf75ba545a41d464645", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3a7c00d0964496776344faf75ba545a41d464645", "committedDate": "2020-08-24T06:29:23Z", "message": "Use Yaml processors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8a695b92c95e792f527863d7f7362d6cdb4fb2d", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c8a695b92c95e792f527863d7f7362d6cdb4fb2d", "committedDate": "2020-08-24T07:39:01Z", "message": "Extra DiscoveryServicePropertiesUtil tests"}, "afterCommit": {"oid": "a85b5b6e175f36d4415568dab35e3499ac93a3e3", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a85b5b6e175f36d4415568dab35e3499ac93a3e3", "committedDate": "2020-08-24T09:08:28Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a85b5b6e175f36d4415568dab35e3499ac93a3e3", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a85b5b6e175f36d4415568dab35e3499ac93a3e3", "committedDate": "2020-08-24T09:08:28Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}, "afterCommit": {"oid": "a4be7f7fdc6e4f734b69d0e5dafc8a1b4155b61a", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a4be7f7fdc6e4f734b69d0e5dafc8a1b4155b61a", "committedDate": "2020-08-24T09:22:52Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91c6e0a32fcbc2c744731c98899e32eab636512", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d91c6e0a32fcbc2c744731c98899e32eab636512", "committedDate": "2020-08-24T10:18:32Z", "message": "Simplify ExternalConfigurationOverride"}, "afterCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/aba2757fbc7e945b165f5e264eb55bb0b032cb34", "committedDate": "2020-08-24T10:30:06Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNDM1ODYz", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-473435863", "createdAt": "2020-08-24T12:53:37Z", "commit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1MzozN1rOHFi8FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxODo0MVrOHFnK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NzM2NA==", "bodyText": "Is the license of this dependency ok for hazelcast?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475577364", "createdAt": "2020-08-24T12:53:37Z", "author": {"login": "leszko"}, "path": "hazelcast/pom.xml", "diffHunk": "@@ -350,6 +350,12 @@\n             <version>${hamcrest.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.stefanbirkner</groupId>\n+            <artifactId>system-rules</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA==", "bodyText": "Does this change mean that from now on the configuration with - and without - is the same. For example, can you now define the following hazelcast.yaml?\nhazelcast:\n  clustername: mycluster\n\nAnd is it exactly the same as:\nhazelcast:\n  cluster-name: mycluster", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475582074", "createdAt": "2020-08-24T12:59:29Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MzgwNA==", "bodyText": "Why don't you use matches here (as in all other cases)?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475583804", "createdAt": "2020-08-24T13:02:33Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -256,7 +257,8 @@ public void buildConfig(Node rootNode) throws Exception {\n             }\n         }\n \n-        if (occurrenceSet.contains(\"network\") && occurrenceSet.contains(\"advanced-network\")\n+        if (occurrenceSet.contains(\"network\")\n+          && (occurrenceSet.contains(\"advanced-network\") || occurrenceSet.contains(\"advancednetwork\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4Nzg2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A representation of a single configuration node\n          \n          \n            \n             * A representation of a single configuration node.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475587867", "createdAt": "2020-08-24T13:09:54Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A representation of a single configuration node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0Mjg5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Validation mechanism used to make sure that external configuration features is legal\n          \n          \n            \n             * Validation mechanism used to make sure that external configuration features is legal.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475642898", "createdAt": "2020-08-24T14:13:17Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NDk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An interface representing a generic configuration source\n          \n          \n            \n             * An interface representing a generic configuration source.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475644981", "createdAt": "2020-08-24T14:16:06Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NTA4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns an immutable set of key-value configuration entries\n          \n          \n            \n                 * Returns an immutable set of key-value configuration entries.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475645084", "createdAt": "2020-08-24T14:16:15Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NjY5Mg==", "bodyText": "When would you have whitespace inside an env variable name?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475646692", "createdAt": "2020-08-24T14:18:41Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/EnvVariablesConfigParser.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+/**\n+ * A utility class converting raw input properties into valid config entries\n+ */\n+class EnvVariablesConfigParser {\n+    private static final List<String> EXCLUDED_ENTRIES = Arrays.asList(\n+      \"HZ_HOME\", \"HZ_LICENSE_KEY\");\n+\n+    private final String prefix;\n+    private final String rootNode;\n+\n+    EnvVariablesConfigParser(String prefix, String rootNode) {\n+        this.prefix = prefix;\n+        this.rootNode = rootNode;\n+    }\n+\n+    static EnvVariablesConfigParser client() {\n+        return new EnvVariablesConfigParser(\"HZCLIENT_\", \"hazelcast-client\");\n+    }\n+\n+    static EnvVariablesConfigParser member() {\n+        return new EnvVariablesConfigParser(\"HZ_\", \"hazelcast\");\n+    }\n+\n+    Map<String, String> parse(Map<String, String> env) {\n+        return env.entrySet()\n+          .stream()\n+          .filter(e -> !EXCLUDED_ENTRIES.contains(e.getKey().replace(\" \", \"\")))\n+          .filter(e -> e.getKey().startsWith(prefix))\n+          .collect(toMap(this::processKey, Map.Entry::getValue));\n+    }\n+\n+    private String processKey(Map.Entry<String, String> e) {\n+        return e.getKey()\n+          .replaceFirst(prefix, rootNode + \".\")\n+          .replace(\"_\", \".\")\n+          .replace(\" \", \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1433369e1765ea7bb228fcef58d33dac92958066", "committedDate": "2020-08-24T15:40:18Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/aba2757fbc7e945b165f5e264eb55bb0b032cb34", "committedDate": "2020-08-24T10:30:06Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}, "afterCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1433369e1765ea7bb228fcef58d33dac92958066", "committedDate": "2020-08-24T15:40:18Z", "message": "Introduces a mechanism allowing overriding config entries by using system properties or environment variables.\n\nRules for environment variables conversion:\n- each entry needs to be prefixed with either `HZ_` or `HZCLIENT_`\n- each configuration key needs to be uppercased\n- `_` introduces a new configuration level\n- each `-` needs to be ignored\n\nRules for system properties conversion:\n- each entry needs to be prefixed with `hz.` or `hz-client.`\n- each configuration key needs to be lowercased\n\nIf the same configuration key is duplicated, an exception is raised."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjExOTk0", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-474211994", "createdAt": "2020-08-25T07:38:20Z", "commit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozODoyMFrOHGLY5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozODoyMFrOHGLY5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDEwMg==", "bodyText": "Can you also check getEvictionConfig, handleUserCodeDeployment, handleBackupAckToClient, getNearCachePreloaderConfig and handleConnectionStrategy?\nAlso, check out methods in AbstractDomConfigProcessor, there's more there to be covered. Feel free to simplify the code a bit if it makes your life easier.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476240102", "createdAt": "2020-08-25T07:38:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -198,7 +200,7 @@ private void handleConnectionStrategy(Node node) {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1fbacd1593bc73fb346526557ed1748ec364eb9", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c1fbacd1593bc73fb346526557ed1748ec364eb9", "committedDate": "2020-08-25T07:59:18Z", "message": "Cover configuration lookups in AbstractDomConfigProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c2ea767d1777539261ded3b97ca1dd16f71bded", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6c2ea767d1777539261ded3b97ca1dd16f71bded", "committedDate": "2020-08-25T07:58:45Z", "message": "Cover configuration lookups in"}, "afterCommit": {"oid": "c1fbacd1593bc73fb346526557ed1748ec364eb9", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c1fbacd1593bc73fb346526557ed1748ec364eb9", "committedDate": "2020-08-25T07:59:18Z", "message": "Cover configuration lookups in AbstractDomConfigProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ec81a253b46ad01436f66c7e0ff8c75b03546d", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c8ec81a253b46ad01436f66c7e0ff8c75b03546d", "committedDate": "2020-08-25T08:09:11Z", "message": "Ignore dashes when looking attributes up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e87e77028aad6d87d7b915ed441e9a2fac4b925b", "committedDate": "2020-08-25T08:24:57Z", "message": "Introduce helper DomConfigHelper.getNamedItemNode() and replace direct getNamedItemNode calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjY5MzAx", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-474269301", "createdAt": "2020-08-25T08:49:05Z", "commit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0OTowNVrOHGOGQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1Njo1N1rOHGOaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDQ4MQ==", "bodyText": "Consider refactoring this to something like:\noverwriteWithProvider(new EnvConfigProvider(EnvVariablesConfigParser.member()), config);\noverwriteWithProvider(new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member())), config);\n\nYou'd get rid of this generic method and passing function, which imo makes the code less readable. Plus your function may seem like pure, but I guess it's not since it modifies the config object.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476284481", "createdAt": "2020-08-25T08:49:05Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA==", "bodyText": "I discovered a weird thing. I tried to run in on Kubernetes and defined the following env variables:\nkubectl run hazelcast --image leszko/hazelcast:ext-config --env=\"HZ_NETWORK_JOIN_KUBERNETES_ENABLED=true\" --env=\"HZ_NETWORK_JOIN_MULTICAST_ENABLED=false\"\n\nAnd I expected it would work exactly the same as if I defined hazelcast.yaml with the following content:\nhazelcast:\n  network:\n    join:\n      kubernetes:\n        enabled: true\n      multicast:\n        enabled: false\n\nHowever, that was not the case. It seems that the config override set some other kubernetes parameters as well, because I got the following exception:\nCaused by: com.hazelcast.config.InvalidConfigurationException: Properties 'service-name' and 'service-label-name' cannot be defined at the same time\n\nLike the config override changed kubernetes.* properties to empty strings instead of passing nulls.\nCould you check?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476288800", "createdAt": "2020-08-25T08:55:43Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4OTU5Nw==", "bodyText": "What is this class for?\n\nCould you add javadoc with some explanation?\nCould you add a unit test?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476289597", "createdAt": "2020-08-25T08:56:57Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4b2c67939f9d93d1ba17e27a747ce5d58806bb", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7e4b2c67939f9d93d1ba17e27a747ce5d58806bb", "committedDate": "2020-08-25T10:45:25Z", "message": "Interpret child nodes as attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzA4NzU2", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-474308756", "createdAt": "2020-08-25T09:36:38Z", "commit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNjozOFrOHGQA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0NzoyMlrOHGSZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNTg5Ng==", "bodyText": "Minor: maybe some javadoc here for future maintainers.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476315896", "createdAt": "2020-08-25T09:36:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNjY1OQ==", "bodyText": "Do we have anywhere the definition of \"legal\"? Maybe add some here as javadoc as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476316659", "createdAt": "2020-08-25T09:37:58Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzA4NA==", "bodyText": "Can we throw InvalidConfigurationException instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476317084", "createdAt": "2020-08-25T09:38:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal.\n+ */\n+final class ConfigOverrideValidator {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ConfigOverrideValidator.class);\n+\n+    private ConfigOverrideValidator() {\n+    }\n+\n+    static void validate(Set<ConfigProvider> providers) {\n+        Set<String> sharedKeys = findDuplicateEntries(providers);\n+        if (!sharedKeys.isEmpty()) {\n+            LOGGER.severe(\"Discovered conflicting entries: \" + String.join(\",\", sharedKeys));\n+            throw new IllegalStateException(\"Discovered conflicting configuration entries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzQ5Mg==", "bodyText": "Javadoc", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476317492", "createdAt": "2020-08-25T09:39:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source.\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries.\n+     */\n+    Map<String, String> properties();\n+\n+    String name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyOTIyOQ==", "bodyText": "Can name be null? If not, maybe some Nonnull annotation and check.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476329229", "createdAt": "2020-08-25T09:58:32Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A representation of a single generic configuration node.\n+ */\n+class ConfigNode {\n+    private final ConfigNode parent;\n+    private final String name;\n+    private final Map<String, ConfigNode> children = new LinkedHashMap<>();\n+    private String value;\n+\n+    ConfigNode(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMzk5OQ==", "bodyText": "RuntimeException seems a bit generic. Can we throw InvalidConfigurationException instead or something extending HazelcastException?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476333999", "createdAt": "2020-08-25T10:06:57Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzY3Mw==", "bodyText": "Can we print one log statement instead with all of the overrides instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476337673", "createdAt": "2020-08-25T10:13:52Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n+\n+        for (ConfigProvider configProvider : providers) {\n+            Map<String, String> properties = configProvider.properties();\n+            properties.forEach((k, v) -> {\n+                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzOTAwNA==", "bodyText": "InvalidConfigurationException? Same in rest of class. Also, maybe you can include the conflicting names.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476339004", "createdAt": "2020-08-25T10:16:23Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);\n+        }\n+        return root;\n+    }\n+\n+    private static String findRootNode(Map<String, String> properties) {\n+        Set<String> rootNodeNames = properties.keySet().stream()\n+          .map(key -> key.split(\"\\\\.\")[0])\n+          .collect(Collectors.toSet());\n+\n+        if (rootNodeNames.size() > 1) {\n+            throw new IllegalStateException(\"parsed config entries have conflicting root node names\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0MjI4MA==", "bodyText": "Minor - maybe this instead?\n .map(key -> {\n              int dotIndex = key.indexOf(\".\");\n              return key.substring(0, dotIndex > 0? dotIndex : key.length());\n          })\n          ```", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476342280", "createdAt": "2020-08-25T10:22:42Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);\n+        }\n+        return root;\n+    }\n+\n+    private static String findRootNode(Map<String, String> properties) {\n+        Set<String> rootNodeNames = properties.keySet().stream()\n+          .map(key -> key.split(\"\\\\.\")[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0Mzk2Mg==", "bodyText": "No need to create an entry as a parameter, I think it can be:\n    private static void parseEntry(String key, String value, ConfigNode root) {\n        ConfigNode last = root;\n        for (String s : key.toLowerCase().split(\"\\\\.\")) {\n            ConfigNode node = last.getChildren().get(s);\n            if (node == null) {\n                node = new ConfigNode(s, last);\n                last.getChildren().put(s, node);\n            }\n            last = node;\n        }\n\n        last.setValue(value);\n    }\n\nAnother alternative is this:\nstatic ConfigNode propsToNode(Map<String, String> properties) {\n        Map<String, List<BiTuple<String[], String>>> propsByRootNode =\n                properties.entrySet().stream()\n                          .map(entry -> BiTuple.of(entry.getKey().split(\"\\\\.\"), entry.getValue()))\n                          .collect(Collectors.groupingBy(e -> e.element1()[0]));\n\n        if (propsByRootNode.size() > 1) {\n            throw new IllegalStateException(\"parsed config entries have conflicting root node names\");\n        }\n        if (propsByRootNode.size() == 0){\n            throw new IllegalStateException(\"No parsed entries found\");\n        }\n\n        Entry<String, List<BiTuple<String[], String>>> rootNodeEntry = propsByRootNode.entrySet().iterator().next();\n\n        ConfigNode root = new ConfigNode(rootNodeEntry.getKey());\n        for (BiTuple<String[], String> e : rootNodeEntry.getValue()) {\n            parseEntry(e.element1, e.element2, root);\n        }\n        return root;\n    }\n\n    private static void parseEntry(String[] keyPath, String value, ConfigNode root) {\n        ConfigNode last = root;\n        for (int i = 1; i < keyPath.length; i++) {\n            ConfigNode node = last.getChildren().get(keyPath[i]);\n            if (node == null) {\n                node = new ConfigNode(keyPath[i], last);\n                last.getChildren().put(keyPath[i], node);\n            }\n            last = node;\n        }\n\n        last.setValue(value);\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476343962", "createdAt": "2020-08-25T10:26:13Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0NTA4OQ==", "bodyText": "If it can't be null, maybe annotation and check.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476345089", "createdAt": "2020-08-25T10:28:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideElementAdapter.java", "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.TypeInfo;\n+import org.w3c.dom.UserDataHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class adapting {@link ConfigNode}s to {@link Element}.\n+ * <p>\n+ * Used for processing external configuration overrides.\n+ */\n+@SuppressWarnings({\"checkstyle:methodcount\"})\n+class ConfigOverrideElementAdapter implements Element {\n+    private final ConfigNode configNode;\n+\n+    ConfigOverrideElementAdapter(ConfigNode yamlNode) {\n+        this.configNode = yamlNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDg4OQ==", "bodyText": "Minor: maybe you can join the \"parser\" and \"provider\" as right now the providers are rather simple. Right now, it looks like you might use different parsers with a single provider but it's not really needed. The provider implementation could both fetch the properties and parse them.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476354889", "createdAt": "2020-08-25T10:47:22Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source.\n+ */\n+interface ConfigProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59be116e6a8f6034197d4bbee3980fae1a30716c", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/59be116e6a8f6034197d4bbee3980fae1a30716c", "committedDate": "2020-08-25T11:41:48Z", "message": "Review improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4782341d3d83eb712c1e4982e64e58bc0f66125e", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4782341d3d83eb712c1e4982e64e58bc0f66125e", "committedDate": "2020-08-31T05:50:14Z", "message": "Merge branch 'master' of github.com:hazelcast/hazelcast into config-override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a5ce3ba6a800966700dc9752be61792e54f667", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/56a5ce3ba6a800966700dc9752be61792e54f667", "committedDate": "2020-08-31T07:20:54Z", "message": "Expand Javadoc documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc45ad0bfb69ca2a194f892cbc07b11877f9f34", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bcc45ad0bfb69ca2a194f892cbc07b11877f9f34", "committedDate": "2020-08-31T07:53:31Z", "message": "PropertiesToNodeConverterTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dce043ad18c24437baed4789ee1cf310d722ae1", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3dce043ad18c24437baed4789ee1cf310d722ae1", "committedDate": "2020-08-31T07:56:39Z", "message": "Remove redundant vars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "824cda386aa900ba0415cc8b607e2fcf977ad5bc", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/824cda386aa900ba0415cc8b607e2fcf977ad5bc", "committedDate": "2020-08-31T08:02:31Z", "message": "Simplify validateNetworkConfig()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaeb344c77f6edc1648655c23314c83b22cc8d07", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/eaeb344c77f6edc1648655c23314c83b22cc8d07", "committedDate": "2020-08-31T08:02:43Z", "message": "Remove extra line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17fc85a743a02b8f206d4564087b63ec65a3e8c7", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/17fc85a743a02b8f206d4564087b63ec65a3e8c7", "committedDate": "2020-08-31T08:38:46Z", "message": "Use namedNode helpers in YamlMemberDomConfigProcessors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8e17f603a0382944a331cb4e3c4828a83752c8", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2e8e17f603a0382944a331cb4e3c4828a83752c8", "committedDate": "2020-08-31T08:40:54Z", "message": "Remove unused lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716782a53c483328990558c51ea084989e10d63c", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/716782a53c483328990558c51ea084989e10d63c", "committedDate": "2020-08-31T09:15:11Z", "message": "Expect different exception in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50c41ef44b456c85fd6570a7befee9ae0483050a", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/50c41ef44b456c85fd6570a7befee9ae0483050a", "committedDate": "2020-08-31T09:51:39Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e807f11b29e16156147c72abf14e3aa207709a15", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e807f11b29e16156147c72abf14e3aa207709a15", "committedDate": "2020-08-31T09:59:27Z", "message": "JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654b14470bb5bcc1cad2dcc1a22a164534adf04e", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/654b14470bb5bcc1cad2dcc1a22a164534adf04e", "committedDate": "2020-08-31T10:17:27Z", "message": "Refactor PropertiesToNodeConverter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4807a47651ed74791ff8e6a9b995784d2437241", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e4807a47651ed74791ff8e6a9b995784d2437241", "committedDate": "2020-08-31T10:18:42Z", "message": "Enforce no nulls in ConfigOverrideElementAdapter constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db8f45c91b092286f1f14c3ac5c3cdd8e8fc11ca", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/db8f45c91b092286f1f14c3ac5c3cdd8e8fc11ca", "committedDate": "2020-08-31T10:31:20Z", "message": "Unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NTMxNjA4", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-478531608", "createdAt": "2020-08-31T11:20:56Z", "commit": {"oid": "db8f45c91b092286f1f14c3ac5c3cdd8e8fc11ca"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyMDo1NlrOHJ03QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToyOVrOHJ2-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NTM0NA==", "bodyText": "Hmm, I wonder if it's not an issue when it comes to maintenance and backward-compatibility. Like, this becomes now a valid Hazelcast configuration:\nhazelcast:\n  cluster--name: mycluster\n\nIt's weird, but ok, we can say it's incorrect, but we just didn't validate it. However, these two configurations above, at first glance, both look correct. People may start using them and then at some point... booom, we introduce JSON schema validation.\nWhat do you think? @mmedenjak @jerrinot @Holmistr", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480065344", "createdAt": "2020-08-31T11:20:56Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3MTk4Mg==", "bodyText": "Yeah, this PR [1] should fix it for kubernetes, but what about all other hazelcast-default.xml configuration parts? In some sense, we may think it's unrelated to this PR, because we just pass whatever was the default. On the other hand, from the user perspective, we introduce a feature that works different that what they may expect.\nFor example, you use the following configuration:\nhazelcast:\n  network:\n    join:\n      multicast:\n        enabled: true\n\nFrom the user's perspective, it should be exactly the same as: HZ_NETWORK_JOIN_MULTICAST_ENABLED=true. But it's not, because the former one has some other attributes predefined. IMO that's not the right behavior.\n#17402", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480071982", "createdAt": "2020-08-31T11:37:03Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODQ4OQ==", "bodyText": "Check out this.\n    public Config overwriteMemberConfig(Config config) {\n        Map<String, String> properties = prepareProperties(\n                new EnvConfigProvider(EnvVariablesConfigParser.member()),\n                new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member())\n        );\n\n        if (!properties.isEmpty()) {\n            try {\n                new YamlMemberDomConfigProcessor(true, config)\n                        .buildConfig(new ConfigOverrideElementAdapter(propsToNode(properties)));\n            } catch (Exception e) {\n                throw new InvalidConfigurationException(\"failed to overwrite configuration\", e);\n            }\n        }\n\n        return config;\n    }\n\n\n\n\n    public ClientConfig overwriteClientConfig(ClientConfig config) {\n        Map<String, String> properties = prepareProperties(\n                new EnvConfigProvider(EnvVariablesConfigParser.client()),\n                new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client())\n        );\n\n        if (!properties.isEmpty()) {\n            try {\n                new YamlClientDomConfigProcessor(true, config)\n                        .buildConfig(new ConfigOverrideElementAdapter(propsToNode(properties)));\n            } catch (Exception e) {\n                throw new InvalidConfigurationException(\"failed to overwrite configuration\", e);\n            }\n        }\n\n        return config;\n    }\n\n    private Map<String, String> prepareProperties(ConfigProvider... providers) {\n        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n\n        Map<String, String> properties = new HashMap<>();\n        for (ConfigProvider configProvider : providers) {\n            configProvider.properties().forEach((k, v) -> {\n                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n                        configProvider.name(),\n                        k + \"=\" + v));\n                properties.put(k, v);\n            });\n        }\n\n        return properties;\n    }\n\nBut you can keep your version, up to you. I'm fine with both.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480098489", "createdAt": "2020-08-31T12:32:27Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDQ4MQ=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODY2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name());\n          \n          \n            \n                              throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480098668", "createdAt": "2020-08-31T12:32:50Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InvalidConfigurationException;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration.\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db8f45c91b092286f1f14c3ac5c3cdd8e8fc11ca"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwMDAwNg==", "bodyText": "Thanks. Consider adding also some javadocs to private methods. Since they are complex, it may help to understand what they are about. For example, findBootNode(), how does it find the root element? And what is the root element here?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480100006", "createdAt": "2020-08-31T12:35:29Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4OTU5Nw=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17d84dddd4c16022f8ba637e1c92bfeff38a638", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e17d84dddd4c16022f8ba637e1c92bfeff38a638", "committedDate": "2020-08-31T13:35:59Z", "message": "Update hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java\n\nCo-authored-by: Rafa\u0142 Leszko <rafal@hazelcast.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e59f945ad0262cdc47b46d5d87c157657fcf7c3", "author": {"user": {"login": "mmedenjak", "name": "Matko Medenjak"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5e59f945ad0262cdc47b46d5d87c157657fcf7c3", "committedDate": "2020-08-31T15:28:30Z", "message": "Merge branch 'master' into config-override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "714ebf03434fe6ab4f9785cffe7310fe499d2863", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/714ebf03434fe6ab4f9785cffe7310fe499d2863", "committedDate": "2020-08-31T16:30:39Z", "message": "Handle null attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8144d376de94d16ed739027993576d582dbec93f", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8144d376de94d16ed739027993576d582dbec93f", "committedDate": "2020-08-31T16:30:47Z", "message": "Merge branch 'config-override' of github.com:pivovarit/hazelcast into config-override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ee4a695730b977d4a9970787a5dc30b5d37a06", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/40ee4a695730b977d4a9970787a5dc30b5d37a06", "committedDate": "2020-09-01T06:00:36Z", "message": "Ensure env set in shouldDisallowConflictingEntries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157a08d78460e259bd3b2087aa092e5576f9920d", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/157a08d78460e259bd3b2087aa092e5576f9920d", "committedDate": "2020-09-01T06:19:34Z", "message": "Log overrides at once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e7a80bdd425b71eee8d157621266029d188e9c5", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6e7a80bdd425b71eee8d157621266029d188e9c5", "committedDate": "2020-09-01T07:55:48Z", "message": "Replace getNamedItem() calls with a helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de17085128e2de2bf42e29072bfd0e01e56c9acc", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/de17085128e2de2bf42e29072bfd0e01e56c9acc", "committedDate": "2020-09-01T07:57:15Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4644d555d9ee156c8ba354e36c8f6fdfb587f906", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4644d555d9ee156c8ba354e36c8f6fdfb587f906", "committedDate": "2020-09-01T08:49:40Z", "message": "Merge branch 'master' into config-override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a667a6c67ce618f225b02fb318664ef2e507cf8", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8a667a6c67ce618f225b02fb318664ef2e507cf8", "committedDate": "2020-09-01T09:05:44Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ca11c96248ef86010b14f5d3a18f6133664170d9", "committedDate": "2020-09-01T09:25:22Z", "message": "Unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTgwMjYy", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-479580262", "createdAt": "2020-09-01T09:55:16Z", "commit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjIyMTMx", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-479622131", "createdAt": "2020-09-01T10:47:44Z", "commit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0Nzo0NFrOHKwzwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODo0M1rOHKw1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0NzQ5MA==", "bodyText": "Should there be a test for the case where the env variable name contains \"-\"?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481047490", "createdAt": "2020-09-01T10:47:44Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0Nzk3Nw==", "bodyText": "Question: Do we change anything on the value? For example a value like this: com.hazelcast.listeners.my-listener-class-with-dash", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481047977", "createdAt": "2020-09-01T10:48:43Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjM1OTU1", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-479635955", "createdAt": "2020-09-01T11:09:48Z", "commit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5Njg2NjU5", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-479686659", "createdAt": "2020-09-01T12:25:44Z", "commit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ff672c4dcdcacbb25267199b12cb46c55884f4e", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0ff672c4dcdcacbb25267199b12cb46c55884f4e", "committedDate": "2020-09-02T07:23:36Z", "message": "Add extra test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb8ab1922be1bcaef1689adfc2e311fcc0314e1", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3bb8ab1922be1bcaef1689adfc2e311fcc0314e1", "committedDate": "2020-09-02T12:08:02Z", "message": "Introduce a strict mode for config parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6b42a81b67ebcb27d95e80a3a9383386cb157ac5", "committedDate": "2020-09-02T12:56:04Z", "message": "Add YamlMemberDomConfigProcessor strictness tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODcxMzYy", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-480871362", "createdAt": "2020-09-02T14:22:04Z", "commit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODc1MTYz", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-480875163", "createdAt": "2020-09-02T14:25:33Z", "commit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODY5Njgz", "url": "https://github.com/hazelcast/hazelcast/pull/17348#pullrequestreview-480869683", "createdAt": "2020-09-02T14:20:27Z", "commit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMDoyN1rOHLxepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMzozM1rOHLzmbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzA0Ng==", "bodyText": "Can you also check handleQueryCache and getCacheMapName, handleEntryListeners and the rest of the class?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482107046", "createdAt": "2020-09-02T14:20:27Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/QueryCacheXmlConfigBuilderHelper.java", "diffHunk": "@@ -81,7 +81,7 @@ protected void queryCachePredicateHandler(Node childNode, QueryCacheConfig query\n     protected void queryCacheIndexesHandle(Node n, QueryCacheConfig queryCacheConfig) {\n         for (Node indexNode : childElements(n)) {\n             if (\"index\".equals(cleanNodeName(indexNode))) {\n-                IndexConfig indexConfig = IndexUtils.getIndexConfigFromXml(indexNode, domLevel3);\n+                IndexConfig indexConfig = IndexUtils.getIndexConfigFromXml(indexNode, domLevel3, strict);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0MTgwNw==", "bodyText": "The priority-comparator-class-name is a leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482141807", "createdAt": "2020-09-02T15:03:33Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1538,27 +1529,27 @@ void handleQueueNode(Node node, final QueueConfig qConfig) {\n         for (Node n : childElements(node)) {\n             String nodeName = cleanNodeName(n);\n             String value = getTextContent(n).trim();\n-            if (\"max-size\".equals(nodeName)) {\n+            if (matches(\"max-size\", nodeName)) {\n                 qConfig.setMaxSize(getIntegerValue(\"max-size\", value));\n-            } else if (\"backup-count\".equals(nodeName)) {\n+            } else if (matches(\"backup-count\", nodeName)) {\n                 qConfig.setBackupCount(getIntegerValue(\"backup-count\", value));\n-            } else if (\"async-backup-count\".equals(nodeName)) {\n+            } else if (matches(\"async-backup-count\", nodeName)) {\n                 qConfig.setAsyncBackupCount(getIntegerValue(\"async-backup-count\", value));\n-            } else if (\"item-listeners\".equals(nodeName)) {\n+            } else if (matches(\"item-listeners\", nodeName)) {\n                 handleItemListeners(n, itemListenerConfig -> {\n                     qConfig.addItemListenerConfig(itemListenerConfig);\n                     return null;\n                 });\n-            } else if (\"statistics-enabled\".equals(nodeName)) {\n+            } else if (matches(\"statistics-enabled\", nodeName)) {\n                 qConfig.setStatisticsEnabled(getBooleanValue(value));\n-            } else if (\"queue-store\".equals(nodeName)) {\n+            } else if (matches(\"queue-store\", nodeName)) {\n                 QueueStoreConfig queueStoreConfig = createQueueStoreConfig(n);\n                 qConfig.setQueueStoreConfig(queueStoreConfig);\n-            } else if (\"split-brain-protection-ref\".equals(nodeName)) {\n+            } else if (matches(\"split-brain-protection-ref\", nodeName)) {\n                 qConfig.setSplitBrainProtectionName(value);\n-            } else if (\"empty-queue-ttl\".equals(nodeName)) {\n+            } else if (matches(\"empty-queue-ttl\", nodeName)) {\n                 qConfig.setEmptyQueueTtl(getIntegerValue(\"empty-queue-ttl\", value));\n-            } else if (\"merge-policy\".equals(nodeName)) {\n+            } else if (matches(\"merge-policy\", nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "originalPosition": 1079}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bea241eb654473b0585ef2df942d876472fc8e8", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8bea241eb654473b0585ef2df942d876472fc8e8", "committedDate": "2020-09-02T19:15:37Z", "message": "fix QueryCacheXmlConfigBuilderHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b18fef4a2984482687411a6e3c3527c075e2db4a", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b18fef4a2984482687411a6e3c3527c075e2db4a", "committedDate": "2020-09-02T19:22:49Z", "message": "fix QueryCacheYamlConfigBuilderHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8819819d1834a2ea15a04da34c23501d97f18690", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8819819d1834a2ea15a04da34c23501d97f18690", "committedDate": "2020-09-02T19:47:57Z", "message": "fix MemberDomConfigProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3229392bcf1ba6b4903d56c292d6744d472cde77", "author": {"user": {"login": "pivovarit", "name": "Grzegorz Piwowarek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3229392bcf1ba6b4903d56c292d6744d472cde77", "committedDate": "2020-09-02T19:49:51Z", "message": "fix MemberDomConfigProcessor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}