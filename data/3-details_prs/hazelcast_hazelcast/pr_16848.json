{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjI0NTIw", "number": 16848, "title": "SQL: Send/receive operators (#16838)", "bodyText": "Implementation of send/receive operators.\nThe PR is pretty straightforward except for the following classes:\n\nCreateExecPlanNodeVisitor - create executors and their mailboxes from plan nodes\nAbstractSender - submits batches to outboxes, tracking the pending stage\nOutbox - sends batches over the wire, performing selective row filtering (we do not need it now but will use it for partitioned operators)\n\nNOTE: current flow control is very simplistic. It is likely to be inefficient. However, we do not have the full infrastructure yet, so we cannot benchmark different implementations. We will investigate better flow control algorithms during the benchmarking stage.\nCloses #16838", "createdAt": "2020-04-03T15:00:12Z", "url": "https://github.com/hazelcast/hazelcast/pull/16848", "merged": true, "mergeCommit": {"oid": "253b515b1b443a2035cec75d0b576fa3ee7f8667"}, "closed": true, "closedAt": "2020-04-07T13:10:59Z", "author": {"login": "devozerov"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUCKJwAH2gAyMzk4MjI0NTIwOjRkZjRjYjBhNTc5YWM4Zjc2OWZhZjliZjYwOGNkYjllOTljZDU3NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVSPgNgH2gAyMzk4MjI0NTIwOjFiMTczYjU0NTMzZTMwZTgxZmQ0MTNiNGQxOGVmMTAzYWE0NGYxODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4df4cb0a579ac8f769faf9bf608cdb9e99cd5770", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4df4cb0a579ac8f769faf9bf608cdb9e99cd5770", "committedDate": "2020-04-03T14:55:28Z", "message": "Implemented IO."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d499959ed41bcfa3e4b18c305cc9772187e76834", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d499959ed41bcfa3e4b18c305cc9772187e76834", "committedDate": "2020-04-03T17:44:36Z", "message": "Spotbugs errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fb96b8adf08d6ce0cbc972cf102362f0c86742", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d5fb96b8adf08d6ce0cbc972cf102362f0c86742", "committedDate": "2020-04-03T18:18:25Z", "message": "Minor refactoring to tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjY0ODU2", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-388264856", "createdAt": "2020-04-06T13:46:54Z", "commit": {"oid": "d5fb96b8adf08d6ce0cbc972cf102362f0c86742"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0Njo1NFrOGBYflA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0Njo1NFrOGBYflA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMzA2MA==", "bodyText": "true?", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404103060", "createdAt": "2020-04-06T13:46:54Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+/**\n+ * Abstract inbox implementation.\n+ */\n+public abstract class AbstractInbox extends AbstractMailbox implements InboundHandler {\n+    /** Number of enqueued batches. */\n+    protected int enqueuedBatches;\n+\n+    /** Remaining active sources. */\n+    private int remainingStreams;\n+\n+    /** Parent service. */\n+    private final QueryOperationHandler operationHandler;\n+\n+    /** Backpressure control. */\n+    private final FlowControl flowControl;\n+\n+    protected AbstractInbox(\n+        QueryId queryId,\n+        int edgeId,\n+        int rowWidth,\n+        QueryOperationHandler operationHandler,\n+        int remainingStreams,\n+        FlowControl flowControl\n+    ) {\n+        super(queryId, edgeId, rowWidth);\n+\n+        this.operationHandler = operationHandler;\n+        this.remainingStreams = remainingStreams;\n+        this.flowControl = flowControl;\n+    }\n+\n+    public void setup() {\n+        flowControl.setup(queryId, edgeId, operationHandler);\n+    }\n+\n+    @Override\n+    public final void onBatch(InboundBatch batch, long remainingMemory) {\n+        onBatch0(batch);\n+\n+        // Track done condition\n+        enqueuedBatches++;\n+\n+        if (batch.isLast()) {\n+            remainingStreams--;\n+        }\n+\n+        // Track backpressure.\n+        flowControl.onBatchAdded(\n+            batch.getSenderId(),\n+            getBatchSize(batch),\n+            batch.isLast(),\n+            remainingMemory\n+        );\n+    }\n+\n+    protected abstract void onBatch0(InboundBatch batch);\n+\n+    protected void onBatchPolled(InboundBatch batch) {\n+        if (batch == null) {\n+            return;\n+        }\n+\n+        // Track done condition\n+        enqueuedBatches--;\n+\n+        // Track backpressure.\n+        flowControl.onBatchRemoved(\n+            batch.getSenderId(),\n+            getBatchSize(batch),\n+            batch.isLast()\n+        );\n+    }\n+\n+    @Override\n+    public void onFragmentExecutionCompleted() {\n+        flowControl.onFragmentExecutionCompleted();\n+    }\n+\n+    /**\n+     * @return {@code True} if no more incoming batches are expected.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5fb96b8adf08d6ce0cbc972cf102362f0c86742"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcf20e41b549eb6c2516db9dc7253804b61ec454", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bcf20e41b549eb6c2516db9dc7253804b61ec454", "committedDate": "2020-04-06T13:55:29Z", "message": "Merge branch 'master' into issues/16838"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f20bab36a8a19634a93a6cd8f5c25c406377f18", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0f20bab36a8a19634a93a6cd8f5c25c406377f18", "committedDate": "2020-04-06T13:56:31Z", "message": "Fixed typos and unrelated checkstyle issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8981ce0dfee45d57748ea8b9516ecabc21db4865", "committedDate": "2020-04-07T07:14:09Z", "message": "Merge branch 'master' into issues/16838\n\n# Conflicts:\n#\thazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapPutAllMessageTask.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODYxMTY5", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-388861169", "createdAt": "2020-04-07T07:42:33Z", "commit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTMzMzIw", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-388933320", "createdAt": "2020-04-07T09:16:56Z", "commit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNjo1NlrOGB6hcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNjo1NlrOGB6hcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDU5NQ==", "bodyText": "It took me a couple of minutes to decipher that \"LWM\" means \"low water mark\". I'm not strongly against abbreviations/contractions: for instance, while implementing some algorithm or data structure it's better to keep the established terminology used in the original source. But I'm not a big fan of them because with IDEs it takes the same time to type the full versions as the shortened ones. It might make sense to introduce abbreviations somewhere in class/method javadoc before using them.", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404660595", "createdAt": "2020-04-07T09:16:56Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io.flowcontrol.simple;\n+\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryFlowControlExchangeOperation;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * Simple implementation of a flow control. The flow control message is sent when the remote end thinks that local end is low\n+ * on memory, while this is no longer the case for the local end.\n+ */\n+public class SimpleFlowControl implements FlowControl {\n+    /** Constant LWM threashold. */\n+    static final double LWM_PERCENTAGE = 0.25f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODQ2MDM1", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-388846035", "createdAt": "2020-04-07T07:20:34Z", "commit": {"oid": "0f20bab36a8a19634a93a6cd8f5c25c406377f18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMTowMFrOGB2Kuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMTowMFrOGB2Kuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4OTI0Mw==", "bodyText": "Not sure that the comment 'Parent service' clearly explains the operationHandler variable.", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404589243", "createdAt": "2020-04-07T07:21:00Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+/**\n+ * Abstract inbox implementation.\n+ */\n+public abstract class AbstractInbox extends AbstractMailbox implements InboundHandler {\n+    /** Number of enqueued batches. */\n+    protected int enqueuedBatches;\n+\n+    /** Remaining active sources. */\n+    private int remainingStreams;\n+\n+    /** Parent service. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1efccb7f2762026945206f7dd3030c5ded983d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5e1efccb7f2762026945206f7dd3030c5ded983d", "committedDate": "2020-04-07T10:27:51Z", "message": "Review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDAyOTMx", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-389002931", "createdAt": "2020-04-07T10:53:57Z", "commit": {"oid": "5e1efccb7f2762026945206f7dd3030c5ded983d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1Mzo1N1rOGB-BEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1Mzo1N1rOGB-BEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzg0Mw==", "bodyText": "It's better to cache the values(), a new array is allocated on every invocation.", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404717843", "createdAt": "2020-04-07T10:53:57Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+/**\n+ * Fragment mapping.\n+ */\n+public enum QueryExecuteOperationFragmentMapping {\n+    /** Fragment members are defined explicitly. */\n+    EXPLICIT(1),\n+\n+    /** Fragment members are data members. */\n+    DATA_MEMBERS(2);\n+\n+    private final int id;\n+\n+    QueryExecuteOperationFragmentMapping(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public static QueryExecuteOperationFragmentMapping getById(final int id) {\n+        for (QueryExecuteOperationFragmentMapping type : values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e1efccb7f2762026945206f7dd3030c5ded983d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDE1MTE5", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-389015119", "createdAt": "2020-04-07T11:12:53Z", "commit": {"oid": "5e1efccb7f2762026945206f7dd3030c5ded983d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6eb0999969cacd606ad5c7cd3340e361a934c61", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a6eb0999969cacd606ad5c7cd3340e361a934c61", "committedDate": "2020-04-07T11:39:50Z", "message": "Renamed LWM."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDQ4MTcz", "url": "https://github.com/hazelcast/hazelcast/pull/16848#pullrequestreview-389048173", "createdAt": "2020-04-07T12:04:36Z", "commit": {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8786a374a0ba4b6de52f689058ee1e6889d9f89", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b8786a374a0ba4b6de52f689058ee1e6889d9f89", "committedDate": "2020-04-07T12:12:40Z", "message": "Cached value() of enum."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b173b54533e30e81fd413b4d18ef103aa44f180", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1b173b54533e30e81fd413b4d18ef103aa44f180", "committedDate": "2020-04-07T12:13:43Z", "message": "Removed remaining LWM mentions."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3747, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}