{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY1NDUy", "number": 16910, "title": "Adv netw addressmap clientside", "bodyText": "Fixing client-view of Member#getAddressMap()\nContext\nDuring fixing advanced networking support in MC, we want to use Member#getAddressMap() to associate member-to-member addresses to client-to-member addresses. @puzpuzpuz found that on the client side this method returns an incorrect value:\n\nI can see that the addressMap contains a single entry with EndpointQualifier.MEMBER key and client-to-member address (which seems to be really weird and looks a lot like a bug in Java client).\n\nChange description\n\nThe Member#getAddressMap() value is populated by ClientClusterServiceImpl which didn't pass the addressMap from memberInfo to MemberImpl#Builder, so we fix it\nmemberInfo.getAddressMap() was an empty mpa, because the protocol definition didn't cover this attribute, so it is added in the corresponding client-protocol PR, and the generated codecs are included here\non the member side, before encoding MemberInfo into a ClientMessage, we need to copy the addressMap from the Member into the MemberInfo instance, that happens in ClusterViewListenerService\npreviously, when called from the client, Member#getAddress() returned the client-to-member address. However, AbstractMember assumes that if it receives an addressMap in its constructor, then it should look up its address attribute in the map by key EndpointQualifier#MEMBER. This isn't true anymore, since when used on the client side, it should look it up by the EndpointQualifier#CLIENTkey, to retain the previous behavior. Therefore we add a new constructor toMemberImplandAbstractMemberto make the used lookup key parameterizable, and call it withCLIENTkey from a new builder methodMemberImpl#Builder#buildForClientView()`.\nintegration test added\n\nRelated PRs and issues\n\nclient protocol change PR: hazelcast/hazelcast-client-protocol#316\noriginal problem: hazelcast/management-center#2971\nPR comment explaining why do we need correct Member#getAddressMap() values: hazelcast/management-center#3037 (comment)", "createdAt": "2020-04-21T16:26:15Z", "url": "https://github.com/hazelcast/hazelcast/pull/16910", "merged": true, "mergeCommit": {"oid": "09c01f859c6b807763c5b76c082286b246c8c223"}, "closed": true, "closedAt": "2020-04-28T19:43:14Z", "author": {"login": "erosb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcarzl5gFqTM5OTY4MTYwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHMcEgBqjMyODEzMzk1NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjgxNjAz", "url": "https://github.com/hazelcast/hazelcast/pull/16910#pullrequestreview-399681603", "createdAt": "2020-04-24T06:50:22Z", "commit": {"oid": "949f53241ddc313b4957954979d8b08bcc2f0739"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1MDoyMlrOGLJHTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1MDoyMlrOGLJHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNjg0Nw==", "bodyText": "When this memberInfo is coming from 4.0 cluster, it will be null. The constructor will throw NullPointerException.\nI prefer not to put buildForClientView to MemberImpl.Builder for the client. The client logic should be handled in client packages.\nCan we check if the addressMap is null, and create the builder with address if it is there.\nOtherwise,\nCan we also put a backward compatibility test with 4.1 client against 4.0 cluster to make sure ?", "url": "https://github.com/hazelcast/hazelcast/pull/16910#discussion_r414336847", "createdAt": "2020-04-24T06:50:22Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientClusterServiceImpl.java", "diffHunk": "@@ -233,11 +233,12 @@ private void applyInitialState(int version, Collection<MemberInfo> memberInfos)\n     private MemberListSnapshot createSnapshot(int memberListVersion, Collection<MemberInfo> memberInfos) {\n         LinkedHashMap<UUID, Member> newMembers = new LinkedHashMap<>();\n         for (MemberInfo memberInfo : memberInfos) {\n-            MemberImpl member = new MemberImpl.Builder(memberInfo.getAddress()).version(memberInfo.getVersion())\n+            MemberImpl member = new MemberImpl.Builder(memberInfo.getAddressMap())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949f53241ddc313b4957954979d8b08bcc2f0739"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTAxODg3", "url": "https://github.com/hazelcast/hazelcast/pull/16910#pullrequestreview-401101887", "createdAt": "2020-04-27T16:04:56Z", "commit": {"oid": "4521d6dcd38f464fba6b67f4d2b7a7faf8d9c622"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowNDo1NlrOGMrPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowNDo1NlrOGMrPDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0NDQ2Mw==", "bodyText": "Can you change the ordinal value to 2 at the protocol side to use ProtocolType.WAN ? Because the binary encoder is encoding localhost as the identifier string for the EndpointQualifier. I see that we can specify a custom identifier using EndpointQualifier#resolve with the protocol type of WAN but it is not an option for other protocol types.\nWe can configure binary generator to encode custom values for fix sized types(as you did with ordinal), but there is no way to do so for var sized types in the protocol code generator. I think we should also provide an option for var sized types. I will create an issue for that.", "url": "https://github.com/hazelcast/hazelcast/pull/16910#discussion_r415944463", "createdAt": "2020-04-27T16:04:56Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/test/java/com/hazelcast/client/protocol/compatibility/ReferenceObjects.java", "diffHunk": "@@ -782,7 +785,9 @@ private static boolean isEqualStackTrace(StackTraceElement stackTraceElement1, S\n             aBoolean, aBoolean, aBoolean, aBoolean, aHotRestartConfig, anEventJournalConfig, aString, aListOfData,\n             aMergePolicyConfig, aBoolean, aListOfListenerConfigHolders);\n     private static MemberVersion aMemberVersion = new MemberVersion(aByte, aByte, aByte);\n-    public static Collection<MemberInfo> aListOfMemberInfos = Collections.singletonList(new MemberInfo(anAddress, aUUID, aMapOfStringToString, aBoolean, aMemberVersion));\n+    public static Collection<MemberInfo> aListOfMemberInfos = Collections.singletonList(new MemberInfo(anAddress, aUUID, aMapOfStringToString, aBoolean, aMemberVersion,\n+            ImmutableMap.of(EndpointQualifier.MEMBER, anAddress)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4521d6dcd38f464fba6b67f4d2b7a7faf8d9c622"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODI1Njk2", "url": "https://github.com/hazelcast/hazelcast/pull/16910#pullrequestreview-401825696", "createdAt": "2020-04-28T13:19:29Z", "commit": {"oid": "394706913f3e361224bcb0820aca7c4e86e5ccf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODcyMDE2", "url": "https://github.com/hazelcast/hazelcast/pull/16910#pullrequestreview-401872016", "createdAt": "2020-04-28T14:07:32Z", "commit": {"oid": "394706913f3e361224bcb0820aca7c4e86e5ccf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba93f61eabb363bfff3f0666eaa581b1bcca329", "author": {"user": {"login": "erosb", "name": "Bence Eros"}}, "url": "https://github.com/hazelcast/hazelcast/commit/aba93f61eabb363bfff3f0666eaa581b1bcca329", "committedDate": "2020-04-28T17:05:50Z", "message": "WIP - client-side handling of Member#getAddressMap()\n\nrestoring previous Member#getAddress() behavior\n\ncode cleanup\n\ncheckstyle fixes\n\ncheckstyle fix\n\nfixing failing tests\n\ncheckstyle fix\n\ntest fixes\n\nfixing checkstyle error in generated code (?)\n\nbetter fixing prev. commit (fixing template in client-protocol code template)\n\nre-generated compatibility tests\n\nencoding ProtocolType by its ordinal\n\nupdating ReferenceObjects to use ProtocolType#WAN in EndpointQualifier (fixes failing tests)\n\naddressing PR comment, removing MemberImpl#Builder#buildForClient()\n\nfixing test failures\n\nfixing failing test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "394706913f3e361224bcb0820aca7c4e86e5ccf3", "author": {"user": {"login": "erosb", "name": "Bence Eros"}}, "url": "https://github.com/hazelcast/hazelcast/commit/394706913f3e361224bcb0820aca7c4e86e5ccf3", "committedDate": "2020-04-28T12:27:09Z", "message": "Merge branch 'master' into adv-netw-addressmap-clientside"}, "afterCommit": {"oid": "aba93f61eabb363bfff3f0666eaa581b1bcca329", "author": {"user": {"login": "erosb", "name": "Bence Eros"}}, "url": "https://github.com/hazelcast/hazelcast/commit/aba93f61eabb363bfff3f0666eaa581b1bcca329", "committedDate": "2020-04-28T17:05:50Z", "message": "WIP - client-side handling of Member#getAddressMap()\n\nrestoring previous Member#getAddress() behavior\n\ncode cleanup\n\ncheckstyle fixes\n\ncheckstyle fix\n\nfixing failing tests\n\ncheckstyle fix\n\ntest fixes\n\nfixing checkstyle error in generated code (?)\n\nbetter fixing prev. commit (fixing template in client-protocol code template)\n\nre-generated compatibility tests\n\nencoding ProtocolType by its ordinal\n\nupdating ReferenceObjects to use ProtocolType#WAN in EndpointQualifier (fixes failing tests)\n\naddressing PR comment, removing MemberImpl#Builder#buildForClient()\n\nfixing test failures\n\nfixing failing test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3798, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}