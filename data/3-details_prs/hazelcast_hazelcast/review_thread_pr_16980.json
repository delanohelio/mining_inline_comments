{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzA5MDc0", "number": 16980, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyNjozMlrOD9UDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMjoxM1rOD9aHGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjE4Mjg4OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyNjozMlrOGWu34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoxNzo1OVrOGW0hwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA==", "bodyText": "Not directly related to the PR: why we have QueryDataTypeFamily mapping for SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, but no similar family/mapping for SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE?", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426489824", "createdAt": "2020-05-18T09:26:32Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.QueryDataTypeFamily;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.calcite.rel.type.StructKind;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.schema.impl.AbstractTable;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base class for all tables in the Calcite integration:\n+ * <ul>\n+ *     <li>Maps field types defined in the {@code core} module to Calcite types</li>\n+ *     <li>Provides access to the underlying table and statistics</li>\n+ * </ul>\n+ */\n+public class HazelcastTable extends AbstractTable {\n+\n+    private static final Map<QueryDataTypeFamily, SqlTypeName> QUERY_TO_SQL_TYPE = new HashMap<>();\n+\n+    static {\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.VARCHAR, SqlTypeName.VARCHAR);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BOOLEAN, SqlTypeName.BOOLEAN);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TINYINT, SqlTypeName.TINYINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.SMALLINT, SqlTypeName.SMALLINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.INT, SqlTypeName.INTEGER);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BIGINT, SqlTypeName.BIGINT);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DECIMAL, SqlTypeName.DECIMAL);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.REAL, SqlTypeName.REAL);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DOUBLE, SqlTypeName.DOUBLE);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TIME, SqlTypeName.TIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODkzMg==", "bodyText": "It is explained to some extent in the 01-type-system.md, line 45. In short, time with timezone is difficult to deal with because timezone without a concrete date make it hard to apply daylight savings. For this reason, some vendors decide not to support it at all.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426518932", "createdAt": "2020-05-18T10:14:33Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.QueryDataTypeFamily;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.calcite.rel.type.StructKind;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.schema.impl.AbstractTable;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base class for all tables in the Calcite integration:\n+ * <ul>\n+ *     <li>Maps field types defined in the {@code core} module to Calcite types</li>\n+ *     <li>Provides access to the underlying table and statistics</li>\n+ * </ul>\n+ */\n+public class HazelcastTable extends AbstractTable {\n+\n+    private static final Map<QueryDataTypeFamily, SqlTypeName> QUERY_TO_SQL_TYPE = new HashMap<>();\n+\n+    static {\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.VARCHAR, SqlTypeName.VARCHAR);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BOOLEAN, SqlTypeName.BOOLEAN);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TINYINT, SqlTypeName.TINYINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.SMALLINT, SqlTypeName.SMALLINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.INT, SqlTypeName.INTEGER);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BIGINT, SqlTypeName.BIGINT);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DECIMAL, SqlTypeName.DECIMAL);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.REAL, SqlTypeName.REAL);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DOUBLE, SqlTypeName.DOUBLE);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TIME, SqlTypeName.TIME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDI2NQ==", "bodyText": "In the code base we still have some support for TIME_WITH_LOCAL_TIME_ZONE, is it safe to assume we always treat it as TIME [WITHOUT TIME ZONE]?", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426524265", "createdAt": "2020-05-18T10:24:25Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.QueryDataTypeFamily;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.calcite.rel.type.StructKind;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.schema.impl.AbstractTable;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base class for all tables in the Calcite integration:\n+ * <ul>\n+ *     <li>Maps field types defined in the {@code core} module to Calcite types</li>\n+ *     <li>Provides access to the underlying table and statistics</li>\n+ * </ul>\n+ */\n+public class HazelcastTable extends AbstractTable {\n+\n+    private static final Map<QueryDataTypeFamily, SqlTypeName> QUERY_TO_SQL_TYPE = new HashMap<>();\n+\n+    static {\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.VARCHAR, SqlTypeName.VARCHAR);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BOOLEAN, SqlTypeName.BOOLEAN);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TINYINT, SqlTypeName.TINYINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.SMALLINT, SqlTypeName.SMALLINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.INT, SqlTypeName.INTEGER);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BIGINT, SqlTypeName.BIGINT);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DECIMAL, SqlTypeName.DECIMAL);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.REAL, SqlTypeName.REAL);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DOUBLE, SqlTypeName.DOUBLE);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TIME, SqlTypeName.TIME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ2NA==", "bodyText": "AFAIK these are different data types from SQL perspective, so IMO we should not support TIME_WITH_LOCAL_TIME_ZONE.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426582464", "createdAt": "2020-05-18T12:17:59Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.QueryDataTypeFamily;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.calcite.rel.type.StructKind;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.schema.impl.AbstractTable;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base class for all tables in the Calcite integration:\n+ * <ul>\n+ *     <li>Maps field types defined in the {@code core} module to Calcite types</li>\n+ *     <li>Provides access to the underlying table and statistics</li>\n+ * </ul>\n+ */\n+public class HazelcastTable extends AbstractTable {\n+\n+    private static final Map<QueryDataTypeFamily, SqlTypeName> QUERY_TO_SQL_TYPE = new HashMap<>();\n+\n+    static {\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.VARCHAR, SqlTypeName.VARCHAR);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BOOLEAN, SqlTypeName.BOOLEAN);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TINYINT, SqlTypeName.TINYINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.SMALLINT, SqlTypeName.SMALLINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.INT, SqlTypeName.INTEGER);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BIGINT, SqlTypeName.BIGINT);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DECIMAL, SqlTypeName.DECIMAL);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.REAL, SqlTypeName.REAL);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DOUBLE, SqlTypeName.DOUBLE);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TIME, SqlTypeName.TIME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3MjUzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTo1OFrOGWvwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1Njo1M1rOGXWneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA==", "bodyText": "Why it's returning list of lists?", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426504264", "createdAt": "2020-05-18T09:49:58Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNzcxNg==", "bodyText": "A search path is a list of components. E.g. search patch hazelcast.partitioned is represented as List(\"hazelcast\", \"partitioned\"). Therefore, if there are multiple search paths, then this is a list of lists.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426517716", "createdAt": "2020-05-18T10:12:17Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDk3OQ==", "bodyText": "I see, probably it makes sense to explain that in javadoc.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426524979", "createdAt": "2020-05-18T10:25:45Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1ODgxNw==", "bodyText": "BTW, does order of elements in collections returned from getDefaultSearchPaths and getTables make some difference in resolution?", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426558817", "createdAt": "2020-05-18T11:31:45Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MzA4Nw==", "bodyText": "Yes, the order is important - if two objects with the same name exist in two default search paths, we will pick the object from the path that goes earlier. I'll add this to JavaDocs.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426583087", "createdAt": "2020-05-18T12:19:07Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MDk4Ng==", "bodyText": "Added JavaDocs.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r427140986", "createdAt": "2020-05-19T08:56:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE3NTI4OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/MapTableStatistic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMjoxM1rOGW4lxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNTozNFrOGW5K8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTAyOQ==", "bodyText": "It'd be nice to have an explanation somewhere why rowCount is double (not a long)?", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426649029", "createdAt": "2020-05-18T14:02:13Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/MapTableStatistic.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelDistribution;\n+import org.apache.calcite.rel.RelDistributionTraitDef;\n+import org.apache.calcite.rel.RelReferentialConstraint;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.util.ImmutableBitSet;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Simple table statistics for IMap and ReplicatedMap.\n+ */\n+public class MapTableStatistic implements Statistic {\n+    /** Row count that is fixed for the duration of query optimization process. */\n+    private final Long rowCount;\n+\n+    public MapTableStatistic(long rowCount) {\n+        this.rowCount = rowCount;\n+    }\n+\n+    @Override\n+    public Double getRowCount() {\n+        return (double) rowCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODU0Ng==", "bodyText": "This comes from a Calcite interface, so we do not have any control of it.", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426658546", "createdAt": "2020-05-18T14:15:34Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/MapTableStatistic.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelDistribution;\n+import org.apache.calcite.rel.RelDistributionTraitDef;\n+import org.apache.calcite.rel.RelReferentialConstraint;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.util.ImmutableBitSet;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Simple table statistics for IMap and ReplicatedMap.\n+ */\n+public class MapTableStatistic implements Statistic {\n+    /** Row count that is fixed for the duration of query optimization process. */\n+    private final Long rowCount;\n+\n+    public MapTableStatistic(long rowCount) {\n+        this.rowCount = rowCount;\n+    }\n+\n+    @Override\n+    public Double getRowCount() {\n+        return (double) rowCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTAyOQ=="}, "originalCommit": {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 519, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}