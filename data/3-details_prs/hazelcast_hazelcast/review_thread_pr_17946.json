{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODQ4NjYy", "number": 17946, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoyMVrOFCJWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoyMVrOFCJWqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzk0NzI5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoyMVrOIBJA0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMToyNVrOIBiOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzE1Mw==", "bodyText": "@blazember\nLooks like we might have a conflict of interest here (or at least a grey area).\nIt turns out that replacing the existing config is actually desired according to #14451. If I understand correctly, XML replaces the whole config sections when importing them, and YAML merges them instead", "url": "https://github.com/hazelcast/hazelcast/pull/17946#discussion_r538067153", "createdAt": "2020-12-08T06:26:21Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "diffHunk": "@@ -411,7 +411,7 @@ public void testImportOverlappingMapConfigFromFile() throws Exception {\n         // YAML recursively merges the two files\n         assertEquals(1, myMapConfig.getBackupCount());\n         MapStoreConfig myMapStoreConfig = myMapConfig.getMapStoreConfig();\n-        assertEquals(0, myMapStoreConfig.getWriteDelaySeconds());\n+        assertEquals(10, myMapStoreConfig.getWriteDelaySeconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797d869d2d099a7721a41749dcd280a6543b668c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNjM2Mw==", "bodyText": "@pivovarit You're right, XML replaces the import node with the content of the imported file right in the DOM, while in the case of YAML, the two config files (actually the DOMs built from the two files) need to be merged. The reason for this need is that YAML defines mappings, therefore, it does not allow duplicates, while XML does allow it. The consequence is that the resulting Config may be different for the XML and the YAML case if the main and the imported documents have the \"same\" config (map with the same name for example). There is an ambiguity check though, so actual (scalar) config entries with different values result in failing fast with an InvalidConfigurationException. It can be argued though if spreading the \"same\" configuration across files is a good practice. I think it is not.\nI don't see though how this behavior change impacts config override. We first build a single DOM, then we process it where the overrides can be applied. Is there anything I miss here?", "url": "https://github.com/hazelcast/hazelcast/pull/17946#discussion_r538306363", "createdAt": "2020-12-08T12:22:32Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "diffHunk": "@@ -411,7 +411,7 @@ public void testImportOverlappingMapConfigFromFile() throws Exception {\n         // YAML recursively merges the two files\n         assertEquals(1, myMapConfig.getBackupCount());\n         MapStoreConfig myMapStoreConfig = myMapConfig.getMapStoreConfig();\n-        assertEquals(0, myMapStoreConfig.getWriteDelaySeconds());\n+        assertEquals(10, myMapStoreConfig.getWriteDelaySeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzE1Mw=="}, "originalCommit": {"oid": "797d869d2d099a7721a41749dcd280a6543b668c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0MDM0NA==", "bodyText": "Simply put, the test started failing after I introduced the required changes in the parser, and I don't possess enough context to figure out if I'm doing something wrong, or if the test is wrong. However, I'm leaning towards the latter now.", "url": "https://github.com/hazelcast/hazelcast/pull/17946#discussion_r538340344", "createdAt": "2020-12-08T13:00:33Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "diffHunk": "@@ -411,7 +411,7 @@ public void testImportOverlappingMapConfigFromFile() throws Exception {\n         // YAML recursively merges the two files\n         assertEquals(1, myMapConfig.getBackupCount());\n         MapStoreConfig myMapStoreConfig = myMapConfig.getMapStoreConfig();\n-        assertEquals(0, myMapStoreConfig.getWriteDelaySeconds());\n+        assertEquals(10, myMapStoreConfig.getWriteDelaySeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzE1Mw=="}, "originalCommit": {"oid": "797d869d2d099a7721a41749dcd280a6543b668c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2ODQwMQ==", "bodyText": "I think I see the situation now. So since you changed from new MapConfig() to config.getMapConfig() in the processor, you get a MapConfig with the previously set attributes. So technically, instead of replacing the MapConfig, with your change, we start merging in XML too, just like we do with YAML. If I get this right, I agree, the test needs to be modified since we introduce a behavioral change here, which is also a behavioral unification. I wouldn't worry about this since I hardly believe anybody defined the same configuration in two XML files.", "url": "https://github.com/hazelcast/hazelcast/pull/17946#discussion_r538368401", "createdAt": "2020-12-08T13:28:45Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "diffHunk": "@@ -411,7 +411,7 @@ public void testImportOverlappingMapConfigFromFile() throws Exception {\n         // YAML recursively merges the two files\n         assertEquals(1, myMapConfig.getBackupCount());\n         MapStoreConfig myMapStoreConfig = myMapConfig.getMapStoreConfig();\n-        assertEquals(0, myMapStoreConfig.getWriteDelaySeconds());\n+        assertEquals(10, myMapStoreConfig.getWriteDelaySeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzE1Mw=="}, "originalCommit": {"oid": "797d869d2d099a7721a41749dcd280a6543b668c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MDE1MA==", "bodyText": "In such case, we should be ready to go here.", "url": "https://github.com/hazelcast/hazelcast/pull/17946#discussion_r538480150", "createdAt": "2020-12-08T15:11:25Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/config/XmlConfigImportVariableReplacementTest.java", "diffHunk": "@@ -411,7 +411,7 @@ public void testImportOverlappingMapConfigFromFile() throws Exception {\n         // YAML recursively merges the two files\n         assertEquals(1, myMapConfig.getBackupCount());\n         MapStoreConfig myMapStoreConfig = myMapConfig.getMapStoreConfig();\n-        assertEquals(0, myMapStoreConfig.getWriteDelaySeconds());\n+        assertEquals(10, myMapStoreConfig.getWriteDelaySeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzE1Mw=="}, "originalCommit": {"oid": "797d869d2d099a7721a41749dcd280a6543b668c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4992, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}