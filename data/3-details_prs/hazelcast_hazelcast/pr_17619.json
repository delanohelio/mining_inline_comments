{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTM5ODY0", "number": 17619, "title": "Try load custom exceptions via class loader on client", "bodyText": "We are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\nThis causes poor experience as the behaviour is different between\nthe client and the member.\nsee  #9753\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\nfixes #9753\nBackport of: #17556", "createdAt": "2020-09-25T09:09:36Z", "url": "https://github.com/hazelcast/hazelcast/pull/17619", "merged": true, "mergeCommit": {"oid": "58225ae4e26a2fb505bf5515b235b691179570f3"}, "closed": true, "closedAt": "2020-10-05T10:49:53Z", "author": {"login": "sancar"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNQ2RugH2gAyNDkyOTM5ODY0OjA4ODg3MDdjZjY5YzUyNDQ4NjQ0YjA4ZDYxODFiYTljMWU4MGM1OWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPhgbNgFqTUwMTkzMzgzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0888707cf69c52448644b08d6181ba9c1e80c59d", "committedDate": "2020-09-28T10:16:01Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83cee3f91118b0eab124ad99dde87c37d8df93ca", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/83cee3f91118b0eab124ad99dde87c37d8df93ca", "committedDate": "2020-09-25T09:00:21Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}, "afterCommit": {"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0888707cf69c52448644b08d6181ba9c1e80c59d", "committedDate": "2020-09-28T10:16:01Z", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTU3MjIx", "url": "https://github.com/hazelcast/hazelcast/pull/17619#pullrequestreview-500957221", "createdAt": "2020-10-02T08:41:29Z", "commit": {"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0MToyOVrOHblq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0MToyOVrOHblq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5MDc3Ng==", "bodyText": "nit: redundant new line here.", "url": "https://github.com/hazelcast/hazelcast/pull/17619#discussion_r498690776", "createdAt": "2020-10-02T08:41:29Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java", "diffHunk": "@@ -231,4 +233,53 @@ public static void fixAsyncStackTrace(Throwable asyncCause, StackTraceElement[]\n         System.arraycopy(localSideStackTrace, 1, newStackTrace, remoteStackTrace.length + 2, localSideStackTrace.length - 1);\n         throwable.setStackTrace(newStackTrace);\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)\n+     * new Throwable(String message, Throwable cause)\n+     * new Throwable(Throwable cause)\n+     * new Throwable(String message)\n+     * new Throwable()\n+     *\n+     * @param exceptionClass class of the exception\n+     * @param message        message to be pass to constructor of the exception\n+     * @param cause          cause to be set to the exception\n+     * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion\n+     */\n+    public static <T extends Throwable> T tryCreateExceptionWithMessageAndCause(Class<? extends Throwable> exceptionClass,\n+                                                                                String message, @Nullable Throwable cause) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca53238d805d2eb0cedf158fe47928f92c173584", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ca53238d805d2eb0cedf158fe47928f92c173584", "committedDate": "2020-10-02T12:38:33Z", "message": "addressed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzYzMzYy", "url": "https://github.com/hazelcast/hazelcast/pull/17619#pullrequestreview-501763362", "createdAt": "2020-10-05T06:56:30Z", "commit": {"oid": "ca53238d805d2eb0cedf158fe47928f92c173584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo1NjozMFrOHcPm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo1NjozMFrOHcPm8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NzkwNg==", "bodyText": "why did you remove?", "url": "https://github.com/hazelcast/hazelcast/pull/17619#discussion_r499377906", "createdAt": "2020-10-05T06:56:30Z", "author": {"login": "ihsandemir"}, "path": "hazelcast-client/src/test/java/com/hazelcast/client/impl/protocol/ClientExceptionFactoryTest.java", "diffHunk": "@@ -187,7 +176,6 @@ private boolean stackTraceArrayEquals(StackTraceElement[] stackTrace1, StackTrac\n                 new Object[]{new EntryProcessorException(randomString())},\n                 new Object[]{new ArrayIndexOutOfBoundsException(randomString())},\n                 new Object[]{new ArrayStoreException(randomString())},\n-                new Object[]{new AuthenticationException(randomString())},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca53238d805d2eb0cedf158fe47928f92c173584"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb97f25c7198a6e307e19a00dd9e0ea4ca62d55", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dcb97f25c7198a6e307e19a00dd9e0ea4ca62d55", "committedDate": "2020-10-05T07:28:44Z", "message": "fixing NullPointer and adding AuthenticationException test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTMzODMz", "url": "https://github.com/hazelcast/hazelcast/pull/17619#pullrequestreview-501933833", "createdAt": "2020-10-05T10:48:23Z", "commit": {"oid": "dcb97f25c7198a6e307e19a00dd9e0ea4ca62d55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3354, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}