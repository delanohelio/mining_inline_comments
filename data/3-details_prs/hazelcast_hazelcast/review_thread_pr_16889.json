{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTY4NzEy", "number": 16889, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Mzo1MFrODx9McQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDoxOFrODx-sxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5NDI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/test/mocknetwork/MockServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Mzo1MFrOGFt--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NzowNFrOGFuGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTQ2NA==", "bodyText": "minor: there is a leftover reference to NodeIOService in MockServer:134", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408649464", "createdAt": "2020-04-15T07:53:50Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/test/mocknetwork/MockServer.java", "diffHunk": "@@ -65,24 +65,24 @@\n     private final Node node;\n \n     private final ScheduledExecutorService scheduler;\n-    private final IOService ioService;\n+    private final ServerContext serverContext;\n     private final ILogger logger;\n \n     private volatile boolean live;\n \n     private final ServerConnectionManager mockConnectionMgr;\n     private final AggregateServerConnectionManager mockAggrEndpointManager;\n \n-    MockServer(IOService ioService, Node node, TestNodeRegistry testNodeRegistry) {\n-        this.ioService = ioService;\n+    MockServer(ServerContext serverContext, Node node, TestNodeRegistry testNodeRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b8a129049a717d92f747f5be004fdac82504c0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MTM3MQ==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408651371", "createdAt": "2020-04-15T07:57:04Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/hazelcast/test/mocknetwork/MockServer.java", "diffHunk": "@@ -65,24 +65,24 @@\n     private final Node node;\n \n     private final ScheduledExecutorService scheduler;\n-    private final IOService ioService;\n+    private final ServerContext serverContext;\n     private final ILogger logger;\n \n     private volatile boolean live;\n \n     private final ServerConnectionManager mockConnectionMgr;\n     private final AggregateServerConnectionManager mockAggrEndpointManager;\n \n-    MockServer(IOService ioService, Node node, TestNodeRegistry testNodeRegistry) {\n-        this.ioService = ioService;\n+    MockServer(ServerContext serverContext, Node node, TestNodeRegistry testNodeRegistry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTQ2NA=="}, "originalCommit": {"oid": "21b8a129049a717d92f747f5be004fdac82504c0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzMzMTQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1Nzo1MFrOGFwSoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMzowN1rOGFwfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NzI2NA==", "bodyText": "doesn't read right, active/inactive context?", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408687264", "createdAt": "2020-04-15T08:57:50Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnection.java", "diffHunk": "@@ -262,7 +262,7 @@ private void logClose() {\n     }\n \n     private Level resolveLogLevelOnClose() {\n-        if (!ioService.isActive()) {\n+        if (!serverContext.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9f06ffaf8e2015e5418d59218def013d1fea0e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODcyNw==", "bodyText": "That can be fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408688727", "createdAt": "2020-04-15T09:00:11Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnection.java", "diffHunk": "@@ -262,7 +262,7 @@ private void logClose() {\n     }\n \n     private Level resolveLogLevelOnClose() {\n-        if (!ioService.isActive()) {\n+        if (!serverContext.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NzI2NA=="}, "originalCommit": {"oid": "cf9f06ffaf8e2015e5418d59218def013d1fea0e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MDU0OQ==", "bodyText": "@Override\n    public boolean isNodeActive() {\n        return node.getState() != NodeState.SHUT_DOWN;\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408690549", "createdAt": "2020-04-15T09:03:07Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnection.java", "diffHunk": "@@ -262,7 +262,7 @@ private void logClose() {\n     }\n \n     private Level resolveLogLevelOnClose() {\n-        if (!ioService.isActive()) {\n+        if (!serverContext.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NzI2NA=="}, "originalCommit": {"oid": "cf9f06ffaf8e2015e5418d59218def013d1fea0e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM0MDg2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnectionErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDoxOFrOGFwYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDoxOFrOGFwYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODgwMA==", "bodyText": "np: getters make no sense here i guess.", "url": "https://github.com/hazelcast/hazelcast/pull/16889#discussion_r408688800", "createdAt": "2020-04-15T09:00:18Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnectionErrorHandler.java", "diffHunk": "@@ -34,10 +34,10 @@\n \n     TcpServerConnectionErrorHandler(TcpServerConnectionManager connectionManager, Address endPoint) {\n         this.endPoint = endPoint;\n-        this.ioService = connectionManager.getServer().getIoService();\n-        this.minInterval = ioService.getConnectionMonitorInterval();\n-        this.maxFaults = ioService.getConnectionMonitorMaxFaults();\n-        this.logger = ioService.getLoggingService().getLogger(getClass());\n+        this.serverContext = connectionManager.getServer().getContext();\n+        this.minInterval = serverContext.getConnectionMonitorInterval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9f06ffaf8e2015e5418d59218def013d1fea0e"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 669, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}