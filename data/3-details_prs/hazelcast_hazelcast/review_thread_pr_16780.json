{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTc0OTA5", "number": 16780, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoyODozMVrODtXNmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NjowMVrOEFbLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODkyODI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoyODozMVrOF-vlBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoyODozMVrOF-vlBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNTU1OA==", "bodyText": "Adding the timeunit prevents wrong interpretation of the value. So please restore.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r401335558", "createdAt": "2020-04-01T03:28:31Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -33,7 +34,7 @@\n public class ReplicatedMapGetMessageTask\n         extends AbstractPartitionMessageTask<ReplicatedMapGetCodec.RequestParameters> {\n \n-    private volatile long startTimeNanos;\n+    private volatile long startTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59635b9d6d2348c5f178804287079ecd6359acc4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk0NzExOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzozOTo0NlrOF-vvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzozOTo0NlrOF-vvhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODI0Nw==", "bodyText": "There are multiple problems:\n1: the content of the stats.get field is interpreted as nanoseconds. But you are updating in miliseconds, meaning that the value you are writing is 10^6 times less than it should be. I'm not sure if you are fixing an problem or introducing one so it might be that this isn't an problem.\n2: you are loosing granularity. So you can't measure a call that has a submilisecond latency and on a reasonably decent cluster a remote call is in the 100/200us range (and sometimes a hell of a lot less).\n3: the time unit returned from the elapsedSince method isn't clear. This makes it very easy to make unit errors.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r401338247", "createdAt": "2020-04-01T03:39:46Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/replicatedmap/ReplicatedMapGetMessageTask.java", "diffHunk": "@@ -51,15 +52,15 @@ protected Operation prepareOperation() {\n \n     @Override\n     protected void beforeProcess() {\n-        startTimeNanos = System.nanoTime();\n+        startTime = Timer.millis();\n     }\n \n     @Override\n     protected Object processResponseBeforeSending(Object response) {\n         ReplicatedMapService replicatedMapService = getService(ReplicatedMapService.SERVICE_NAME);\n         if (replicatedMapService.getReplicatedMapConfig(parameters.name).isStatisticsEnabled()) {\n             LocalReplicatedMapStatsImpl stats = replicatedMapService.getLocalReplicatedMapStatsImpl(parameters.name);\n-            stats.incrementGets(System.nanoTime() - startTimeNanos);\n+            stats.incrementGets(Timer.elapsedSince(startTime));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59635b9d6d2348c5f178804287079ecd6359acc4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk4NDI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowMzoyMlrOF-wEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDoxMzozNFrOF-wN3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzYwNQ==", "bodyText": "This logic is flawed when there is an overflow.\nReproducer:\npublic class Main {\n\n    public static void main(String[] args){\n        withNanos();\n        withMillis();\n    }\n\n    private static void withMillis() {\n        long start = TimeUnit.NANOSECONDS.toMillis(Long.MAX_VALUE-10);\n        long end = TimeUnit.NANOSECONDS.toMillis(Long.MAX_VALUE+1);\n        long delta = end-start;\n        System.out.println(\"delta \"+delta+\" ms\");\n    }\n\n    private static void withNanos() {\n        long start = Long.MAX_VALUE-10;\n        long end = Long.MAX_VALUE+1;\n        long delta = end-start;\n        System.out.println(\"delta: \"+delta+\" ns\");\n    }\n}\n\ndelta: 11 ns\ndelta -18446744073708 ms\n\nif nanotime is dealt with correctly it deals gracefully with overflow. Also keep in mind that nanotime can start at an arbitrary value; so in theory the returned value could be close to Long.MAX_VALUE and you could run into the overflow very quickly.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r401343605", "createdAt": "2020-04-01T04:03:22Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * long start = Timer.millis();\n+ * ... // do some work\n+ * long elapsedMs = Timer.elapsedSince(start);\n+ * }\n+ */\n+public class Timer {\n+    public static long millis() {\n+        return TimeUnit.NANOSECONDS.toMillis(System.nanoTime());\n+    }\n+\n+    public static long elapsedSince(long millis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59635b9d6d2348c5f178804287079ecd6359acc4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NjAxMw==", "bodyText": "If your Timer works on nanosecond level, and you deal with overflow correctly, it should be fine.\npublic class Timer {\n    public static long nanos() {\n        return System.nanoTime();\n    }\n\n    public static long nanosElapsedSince(long startNanos) {\n        return System.nanoTime() - startNanos;\n    }\n\n    public static long millisElapsedSince(long startNanos) {\n        return TimeUnit.NANOS.toMillis(System.nanoTime() - startNanos);\n    }\n}", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r401346013", "createdAt": "2020-04-01T04:13:34Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * long start = Timer.millis();\n+ * ... // do some work\n+ * long elapsedMs = Timer.elapsedSince(start);\n+ * }\n+ */\n+public class Timer {\n+    public static long millis() {\n+        return TimeUnit.NANOSECONDS.toMillis(System.nanoTime());\n+    }\n+\n+    public static long elapsedSince(long millis) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MzYwNQ=="}, "originalCommit": {"oid": "59635b9d6d2348c5f178804287079ecd6359acc4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg5MzQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxMTozNlrOGBJBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxMTozNlrOGBJBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0OTUzNg==", "bodyText": "I would call this startNanos or startNs.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r403849536", "createdAt": "2020-04-06T06:11:36Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "diffHunk": "@@ -1443,7 +1445,7 @@ public boolean replace(Data key, Object oldValue, Object newValue, ExpiryPolicy\n     @Override\n     public Object getAndReplace(Data key, Object value, ExpiryPolicy expiryPolicy, UUID source, int completionId) {\n         long now = Clock.currentTimeMillis();\n-        long start = isStatisticsEnabled() ? System.nanoTime() : 0;\n+        long startNano = isStatisticsEnabled() ? timer.nanos() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1a50e685f613435a71713de0f0fad184b4320b"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg5NTgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxMjo0OFrOGBJCsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxMjo0OFrOGBJCsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0OTkwNQ==", "bodyText": "Do we need an instance of the timer? Why not make the methods static? Makes the timer easier to deal with.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r403849905", "createdAt": "2020-04-06T06:12:48Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "diffHunk": "@@ -109,6 +110,7 @@\n     public static final UUID SOURCE_NOT_AVAILABLE = UuidUtil.NIL_UUID;\n     protected static final int DEFAULT_INITIAL_CAPACITY = 256;\n \n+    protected final Timer timer = Timer.getSystemTimer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1a50e685f613435a71713de0f0fad184b4320b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTkwMzU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNjoyNVrOGBJHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNjoyNVrOGBJHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MTA2MQ==", "bodyText": "Do we need this?", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r403851061", "createdAt": "2020-04-06T06:16:25Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * Timer timer = Timer.getSystemTimer();\n+ * long start = timer.nanos();\n+ * ... // do some work\n+ * long elapsedNs = timer.nanosElapsedSince(start);\n+ * long elapsedMs = timer.millisElapsedSince(start);\n+ * }\n+ */\n+public class Timer {\n+    private static final Timer SYSTEM_TIMER = create(System::nanoTime);\n+\n+    private final NanoClock nanoClock;\n+\n+    public Timer(NanoClock nanoClock) {\n+        this.nanoClock = nanoClock;\n+    }\n+\n+    public static Timer getSystemTimer() {\n+        return SYSTEM_TIMER;\n+    }\n+\n+    static Timer create(NanoClock nanoClock) {\n+        return new Timer(nanoClock);\n+    }\n+\n+    public long nanos() {\n+        return nanoClock.nanoTime();\n+    }\n+\n+    public long nanosElapsedSince(long startNanos) {\n+        return nanos() - startNanos;\n+    }\n+\n+    public long microsElapsedSince(long startNanos) {\n+        return NANOSECONDS.toMicros(nanosElapsedSince(startNanos));\n+    }\n+\n+    public long millisElapsedSince(long startNano) {\n+        return NANOSECONDS.toMillis(nanosElapsedSince(startNano));\n+    }\n+\n+    public long secondsElapsedSince(long startNano) {\n+        return NANOSECONDS.toSeconds(nanosElapsedSince(startNano));\n+    }\n+\n+    interface NanoClock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1a50e685f613435a71713de0f0fad184b4320b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTkwMzY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNjoyOFrOGBJHSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNjoyOFrOGBJHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MTA4MA==", "bodyText": "I would drop the system timer/create and make all methods static.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r403851080", "createdAt": "2020-04-06T06:16:28Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * Timer timer = Timer.getSystemTimer();\n+ * long start = timer.nanos();\n+ * ... // do some work\n+ * long elapsedNs = timer.nanosElapsedSince(start);\n+ * long elapsedMs = timer.millisElapsedSince(start);\n+ * }\n+ */\n+public class Timer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1a50e685f613435a71713de0f0fad184b4320b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTkwNjU2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNzozN1rOGBJI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoxNzozN1rOGBJI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MTQ5Ng==", "bodyText": "I would rename this method to nanosElapsed because it is shorter and doesn't loose any information.\nlong durationNanos = Time.nanosElapsed(startNanos);", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r403851496", "createdAt": "2020-04-06T06:17:37Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * Timer timer = Timer.getSystemTimer();\n+ * long start = timer.nanos();\n+ * ... // do some work\n+ * long elapsedNs = timer.nanosElapsedSince(start);\n+ * long elapsedMs = timer.millisElapsedSince(start);\n+ * }\n+ */\n+public class Timer {\n+    private static final Timer SYSTEM_TIMER = create(System::nanoTime);\n+\n+    private final NanoClock nanoClock;\n+\n+    public Timer(NanoClock nanoClock) {\n+        this.nanoClock = nanoClock;\n+    }\n+\n+    public static Timer getSystemTimer() {\n+        return SYSTEM_TIMER;\n+    }\n+\n+    static Timer create(NanoClock nanoClock) {\n+        return new Timer(nanoClock);\n+    }\n+\n+    public long nanos() {\n+        return nanoClock.nanoTime();\n+    }\n+\n+    public long nanosElapsedSince(long startNanos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1a50e685f613435a71713de0f0fad184b4320b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM0NDYyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/DiscoveryJoiner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMToyMVrOGD53ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMToyMVrOGD53ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NzA0Mw==", "bodyText": "I'm not sure about this one. Please pull this out of this PR because it isn't related to timing and lets run some ad hoc examples to make sure we don't run into some nasty overflow/sign related problems.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406747043", "createdAt": "2020-04-10T13:01:21Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/DiscoveryJoiner.java", "diffHunk": "@@ -54,7 +54,7 @@ public DiscoveryJoiner(Node node, DiscoveryService discoveryService, boolean use\n     @Override\n     protected Collection<Address> getPossibleAddressesForInitialJoin() {\n         long deadLine = System.nanoTime() + SECONDS.toNanos(maximumWaitingTimeBeforeJoinSeconds);\n-        for (int i = 0; System.nanoTime() < deadLine; i++) {\n+        for (int i = 0; System.nanoTime() - deadLine < 0; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM0Njk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/crdt/CRDTReplicationMigrationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMjoyMVrOGD55CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMjoyMVrOGD55CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NzQwMQ==", "bodyText": "I would pull this timeout logic into a seperate PR. Also I'm not sure if Timer is the appropriate abstraction for it.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406747401", "createdAt": "2020-04-10T13:02:21Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/crdt/CRDTReplicationMigrationService.java", "diffHunk": "@@ -140,11 +141,11 @@ public boolean onShutdown(long timeout, TimeUnit unit) {\n                 logger.fine(\"Skipping replication since all CRDTs are replicated\");\n                 continue;\n             }\n-            long start = System.nanoTime();\n+            long startNanos = Timer.nanos();\n             if (!tryProcessOnOtherMembers(replicationOperation.getOperation(), service.getName(), timeoutNanos)) {\n                 logger.warning(\"Failed replication of CRDTs for \" + service.getName() + \". CRDT state may be lost.\");\n             }\n-            timeoutNanos -= (System.nanoTime() - start);\n+            timeoutNanos -= Timer.nanosElapsed(startNanos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM0NzgxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/management/ManagementCenterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMjozOVrOGD55gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMjozOVrOGD55gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NzUyMw==", "bodyText": "different pr.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406747523", "createdAt": "2020-04-10T13:02:39Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/management/ManagementCenterService.java", "diffHunk": "@@ -66,7 +67,7 @@\n     private volatile ManagementCenterEventListener eventListener;\n     private volatile String lastMCConfigETag;\n     private volatile long lastTMSUpdateNanos;\n-    private volatile long lastMCEventsPollNanos = System.nanoTime();\n+    private volatile long lastMCEventsPollNanos = Timer.nanos();\n \n     public ManagementCenterService(HazelcastInstanceImpl instance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM0OTc5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/PartitionPerIndexStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzoyN1rOGD56qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzoyN1rOGD56qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NzgxNw==", "bodyText": "not easier to call it startNanos? Timestamp doesn't add much on top of 'nanos' ; but already indicate time.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406747817", "createdAt": "2020-04-10T13:03:27Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/PartitionPerIndexStats.java", "diffHunk": "@@ -164,37 +165,37 @@ public long getMemoryCost() {\n     }\n \n     @Override\n-    public void onInsert(long timestamp, IndexOperationStats operationStats, Index.OperationSource operationSource) {\n+    public void onInsert(long timestampNanos, IndexOperationStats operationStats, Index.OperationSource operationSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1MDYzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzo0M1rOGD57IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzo0M1rOGD57IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NzkzNw==", "bodyText": "different pr", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406747937", "createdAt": "2020-04-10T13:03:43Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "diffHunk": "@@ -151,15 +151,15 @@ private void fixSequenceGaps() {\n      */\n     private void runAntiEntropy() {\n         invalidationMetaDataFetcher.fetchMetadata(handlers);\n-        lastAntiEntropyRunNanos = nanoTime();\n+        lastAntiEntropyRunNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1MjkwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ConcurrencyDetection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNDo0MlrOGD58gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNDo0MlrOGD58gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODI4OQ==", "bodyText": "different PR", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748289", "createdAt": "2020-04-10T13:04:42Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ConcurrencyDetection.java", "diffHunk": "@@ -96,7 +95,7 @@ public void onDetected() {\n     private static final class EnabledConcurrencyDetection extends ConcurrencyDetection {\n \n         private final long windowNanos;\n-        private final AtomicLong expirationNanosRef = new AtomicLong(System.nanoTime());\n+        private final AtomicLong expirationNanosRef = new AtomicLong(Timer.nanos());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1NTY2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnPutOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNTo1MVrOGD5-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNTo1MVrOGD5-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODcxOA==", "bodyText": "elapsedNanos.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748718", "createdAt": "2020-04-10T13:05:51Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnPutOperation.java", "diffHunk": "@@ -68,7 +69,7 @@ public void run() throws Exception {\n \n     @Override\n     public void afterRun() throws Exception {\n-        long elapsed = Math.max(0, System.nanoTime() - startTimeNanos);\n+        long elapsed = Math.max(0, Timer.nanosElapsed(startTimeNanos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1NjI0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnRemoveAllOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjowNlrOGD5-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjowNlrOGD5-ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODgxMA==", "bodyText": "elapsednanos.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748810", "createdAt": "2020-04-10T13:06:06Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnRemoveAllOperation.java", "diffHunk": "@@ -87,7 +88,7 @@ public void run() throws Exception {\n \n     @Override\n     public void afterRun() throws Exception {\n-        long elapsed = Math.max(0, System.nanoTime() - startTimeNanos);\n+        long elapsed = Math.max(0, Timer.nanosElapsed(startTimeNanos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1NjcwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjoyMFrOGD5-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjoyMFrOGD5-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODg4OA==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748888", "createdAt": "2020-04-10T13:06:20Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -75,18 +76,18 @@ public Object removeWithVersion(Object key, long version) {\n     @SuppressWarnings(\"unchecked\")\n     private Object remove(InternalReplicatedMapStorage<K, V> storage, Object key) {\n         isNotNull(key, \"key\");\n-        long time = System.nanoTime();\n+        long timeNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1NzAwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjozMVrOGD5_Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjozMVrOGD5_Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODkzNA==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748934", "createdAt": "2020-04-10T13:06:31Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -96,31 +97,31 @@ private Object remove(InternalReplicatedMapStorage<K, V> storage, Object key) {\n     @SuppressWarnings(\"unchecked\")\n     public void evict(Object key) {\n         isNotNull(key, \"key\");\n-        long time = System.nanoTime();\n+        long timeNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1NzI5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjo0MVrOGD5_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjo0MVrOGD5_NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODk4MQ==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406748981", "createdAt": "2020-04-10T13:06:41Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/replicatedmap/impl/record/AbstractReplicatedRecordStore.java", "diffHunk": "@@ -167,7 +168,7 @@ private Object put(InternalReplicatedMapStorage<K, V> storage, Object key, Objec\n         if (ttl < 0) {\n             throw new IllegalArgumentException(\"ttl must be a positive integer\");\n         }\n-        long time = System.nanoTime();\n+        long timeNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM1OTkwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/ScheduledTaskStatisticsImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNzo1MFrOGD6AuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNzo1MFrOGD6AuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTM2OA==", "bodyText": "The name is confusing. I would call this startNanos.\nWhen I read createdAt; I would be under the impression it is some kind of epoch time.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406749368", "createdAt": "2020-04-10T13:07:50Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/scheduledexecutor/impl/ScheduledTaskStatisticsImpl.java", "diffHunk": "@@ -128,14 +129,13 @@ public void readData(ObjectDataInput in)\n \n     @Override\n     public void onInit() {\n-        this.createdAt = System.nanoTime();\n+        this.createdAt = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2MTgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/test/TestLoggerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowODozM1rOGD6Bvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowODozM1rOGD6Bvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTYzMQ==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406749631", "createdAt": "2020-04-10T13:08:33Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/hazelcast/test/TestLoggerFactory.java", "diffHunk": "@@ -117,23 +118,23 @@ private DelegatingTestLogger(ILogger delegate) {\n \n         @Override\n         public void finest(String message) {\n-            long startTime = System.nanoTime();\n+            long startTimeNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2MjM0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/BounceMemberRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowODo0NlrOGD6CCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowODo0NlrOGD6CCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTcwNw==", "bodyText": "different PR", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406749707", "createdAt": "2020-04-10T13:08:46Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/BounceMemberRule.java", "diffHunk": "@@ -575,8 +576,8 @@ public void run() {\n     }\n \n     private void sleepSecondsWhenRunning(int seconds) {\n-        long deadLine = System.nanoTime() + SECONDS.toNanos(seconds);\n-        while (System.nanoTime() < deadLine && testRunning.get()) {\n+        long deadLine = Timer.nanos() + SECONDS.toNanos(seconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2Mjk5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/BounceMemberRuleStalenessTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowOTowMFrOGD6Cag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowOTowMFrOGD6Cag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTgwMg==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406749802", "createdAt": "2020-04-10T13:09:00Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/BounceMemberRuleStalenessTest.java", "diffHunk": "@@ -48,7 +48,7 @@\n \n     @Test\n     public void stalenessIsDetected() {\n-        long startTime = System.nanoTime();\n+        long startTimeNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2NDEzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/ProgressMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowOToyMlrOGD6DBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowOToyMlrOGD6DBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTk1OQ==", "bodyText": "startNanos", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r406749959", "createdAt": "2020-04-10T13:09:22Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/test/java/com/hazelcast/test/bounce/ProgressMonitor.java", "diffHunk": "@@ -52,7 +53,7 @@ public void registerTask(Runnable task) {\n     }\n \n     public void checkProgress() {\n-        long now = System.nanoTime();\n+        long nowNanos = Timer.nanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c9760b782a4af6c89d26fe0ef6088cc7f6a214"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTIzNzIxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NjowMVrOGjmvBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NjowMVrOGjmvBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Nzk3NQ==", "bodyText": "I would replace this by System.nanos() instead of doing a call to nanos. To prevent running out of inlinining budget.", "url": "https://github.com/hazelcast/hazelcast/pull/16780#discussion_r439987975", "createdAt": "2020-06-15T07:46:01Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/Timer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+/**\n+ * Utility class to measure elapsed time in milliseconds. Backed by {@link System#nanoTime()}\n+ * Example usage {@code\n+ * long start = Timer.nanos();\n+ * ... // do some work\n+ * long elapsedNs = Timer.nanosElapsedSince(start);\n+ * long elapsedMs = Timer.millisElapsedSince(start);\n+ * }\n+ */\n+public final class Timer {\n+    private Timer() {\n+    }\n+\n+    public static long nanos() {\n+        return System.nanoTime();\n+    }\n+\n+    public static long nanosElapsed(long startNanos) {\n+        return nanos() - startNanos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0d530d94146125f770d107e5107ca9cbab9fcb"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 763, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}