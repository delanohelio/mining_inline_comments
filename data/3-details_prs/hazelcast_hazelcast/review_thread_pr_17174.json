{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDU0NDgy", "number": 17174, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NDoyOFrOELjweA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyNjozMVrOERcsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTU1NjQwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/LoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NDoyOFrOGtKqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozMToxOVrOGtL5cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMzc0Ng==", "bodyText": "We can't change public API.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450013746", "createdAt": "2020-07-06T06:44:28Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/LoadBalancer.java", "diffHunk": "@@ -43,9 +43,10 @@\n     void init(Cluster cluster, ClientConfig config);\n \n     /**\n-     * Returns the next member to route to.\n+     * Returns the next data member to route to.\n      *\n-     * @return Returns the next member or null if no member is available\n+     * @param dataMember {@code true} if only data members should be considered\n+     * @return Returns the next data member or null if no member is available\n      */\n-    Member next();\n+    Member next(boolean dataMember);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNDAzMg==", "bodyText": "Fixed. Please take a look", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450034032", "createdAt": "2020-07-06T07:31:19Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/LoadBalancer.java", "diffHunk": "@@ -43,9 +43,10 @@\n     void init(Cluster cluster, ClientConfig config);\n \n     /**\n-     * Returns the next member to route to.\n+     * Returns the next data member to route to.\n      *\n-     * @return Returns the next member or null if no member is available\n+     * @param dataMember {@code true} if only data members should be considered\n+     * @return Returns the next data member or null if no member is available\n      */\n-    Member next();\n+    Member next(boolean dataMember);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMzc0Ng=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTYwNDU0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzowMjoxOVrOGtLHEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0NjoyMVrOGtOVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTEzNg==", "bodyText": "Why is this in initializeManagementCenterTaskFactories method? We can maybe create initializeSqlTaskFactories.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450021136", "createdAt": "2020-07-06T07:02:19Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.java", "diffHunk": "@@ -1779,6 +1785,15 @@ private void initializeManagementCenterTaskFactories() {\n                 (cm, con) -> new HotRestartTriggerBackupMessageTask(cm, node, con));\n         factories.put(MCInterruptHotRestartBackupCodec.REQUEST_MESSAGE_TYPE,\n                 (cm, con) -> new HotRestartInterruptBackupMessageTask(cm, node, con));\n+\n+// region ----------- REGISTRATION FOR SQL\n+        factories.put(SqlExecuteCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlExecuteMessageTask(cm, node, con));\n+        factories.put(SqlFetchCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlFetchMessageTask(cm, node, con));\n+        factories.put(SqlCloseCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlCloseMessageTask(cm, node, con));\n+//endregion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3Mzk4OA==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450073988", "createdAt": "2020-07-06T08:46:21Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.java", "diffHunk": "@@ -1779,6 +1785,15 @@ private void initializeManagementCenterTaskFactories() {\n                 (cm, con) -> new HotRestartTriggerBackupMessageTask(cm, node, con));\n         factories.put(MCInterruptHotRestartBackupCodec.REQUEST_MESSAGE_TYPE,\n                 (cm, con) -> new HotRestartInterruptBackupMessageTask(cm, node, con));\n+\n+// region ----------- REGISTRATION FOR SQL\n+        factories.put(SqlExecuteCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlExecuteMessageTask(cm, node, con));\n+        factories.put(SqlFetchCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlFetchMessageTask(cm, node, con));\n+        factories.put(SqlCloseCodec.REQUEST_MESSAGE_TYPE,\n+            (cm, con) -> new SqlCloseMessageTask(cm, node, con));\n+//endregion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTEzNg=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTYzMTM3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/util/AbstractLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoxMjoxOVrOGtLXNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowNjo0NlrOGtPEJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNTI3MQ==", "bodyText": "Not really part of this PR, but since we only use set and get, we can replace this with a volatile field.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450025271", "createdAt": "2020-07-06T07:12:19Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/AbstractLoadBalancer.java", "diffHunk": "@@ -32,8 +34,9 @@\n  */\n public abstract class AbstractLoadBalancer implements LoadBalancer, InitialMembershipListener {\n \n-    private final AtomicReference<Member[]> membersRef = new AtomicReference<Member[]>(new Member[0]);\n+    private static final Member[] EMPTY_MEMBERS = new Member[0];\n \n+    private final AtomicReference<Members> membersRef = new AtomicReference<>(new Members(EMPTY_MEMBERS, EMPTY_MEMBERS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NTkyNA==", "bodyText": "Agree, but as you mentioned, this is not part of this PR", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450085924", "createdAt": "2020-07-06T09:06:46Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/AbstractLoadBalancer.java", "diffHunk": "@@ -32,8 +34,9 @@\n  */\n public abstract class AbstractLoadBalancer implements LoadBalancer, InitialMembershipListener {\n \n-    private final AtomicReference<Member[]> membersRef = new AtomicReference<Member[]>(new Member[0]);\n+    private static final Member[] EMPTY_MEMBERS = new Member[0];\n \n+    private final AtomicReference<Members> membersRef = new AtomicReference<>(new Members(EMPTY_MEMBERS, EMPTY_MEMBERS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNTI3MQ=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTcyNTcwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo0MjoxM1rOGtMO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTo1Mjo0MFrOGtQoTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTUxNw==", "bodyText": "null should be returned if no member is available, not if we're lazy to find one.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450039517", "createdAt": "2020-07-06T07:42:13Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "diffHunk": "@@ -38,7 +38,7 @@ public void init(Cluster cluster, ClientConfig config) {\n     }\n \n     @Override\n-    public Member next() {\n-        return member;\n+    public Member next(boolean dataMember) {\n+        return dataMember && member.isLiteMember() ? null : member;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NDQyMw==", "bodyText": "I am not sure I understand what you mean. This is a static load balancer that always returns the same member. If this member doesn't happen to be a data member, we return null.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450074423", "createdAt": "2020-07-06T08:47:08Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "diffHunk": "@@ -38,7 +38,7 @@ public void init(Cluster cluster, ClientConfig config) {\n     }\n \n     @Override\n-    public Member next() {\n-        return member;\n+    public Member next(boolean dataMember) {\n+        return dataMember && member.isLiteMember() ? null : member;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTUxNw=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwOTg5MQ==", "bodyText": "I think it would be better to throw in this case. By setting the StaticLB one asks that all traffic goes to a specific member, but here we return null which in turn will go to some data member.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450109891", "createdAt": "2020-07-06T09:49:43Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "diffHunk": "@@ -38,7 +38,7 @@ public void init(Cluster cluster, ClientConfig config) {\n     }\n \n     @Override\n-    public Member next() {\n-        return member;\n+    public Member next(boolean dataMember) {\n+        return dataMember && member.isLiteMember() ? null : member;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTUxNw=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMTE1MQ==", "bodyText": "This is OK, since traffic may go to another member for many reasons:\n\nIf smart routing is disabled\nIf the member that is set is no longer reachable\nNow we add the third case - if the added member is not a data member", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450111151", "createdAt": "2020-07-06T09:51:56Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "diffHunk": "@@ -38,7 +38,7 @@ public void init(Cluster cluster, ClientConfig config) {\n     }\n \n     @Override\n-    public Member next() {\n-        return member;\n+    public Member next(boolean dataMember) {\n+        return dataMember && member.isLiteMember() ? null : member;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTUxNw=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMTU2NA==", "bodyText": "In other words, there is no such semantics, that forces us to use a specific member. Load balancer is a hint.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450111564", "createdAt": "2020-07-06T09:52:40Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/util/StaticLB.java", "diffHunk": "@@ -38,7 +38,7 @@ public void init(Cluster cluster, ClientConfig config) {\n     }\n \n     @Override\n-    public Member next() {\n-        return member;\n+    public Member next(boolean dataMember) {\n+        return dataMember && member.isLiteMember() ? null : member;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTUxNw=="}, "originalCommit": {"oid": "4fdf806a8c42d41a2319643146855a324c5dfc3c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc1ODczOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/NodeServiceProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1MTo1N1rOGtMigg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowNTo1NFrOGtPCSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NDU0Ng==", "bodyText": "We could declare the return type as Set<UUID>. We actually only call contains on the returned value, a Set indicates that it's designed for that.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450044546", "createdAt": "2020-07-06T07:51:57Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/NodeServiceProviderImpl.java", "diffHunk": "@@ -63,6 +64,17 @@ public UUID getLocalMemberId() {\n         return res;\n     }\n \n+    @Override\n+    public Collection<UUID> getClientMembersIds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NTQ1MQ==", "bodyText": "Changed to Set", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450085451", "createdAt": "2020-07-06T09:05:54Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/NodeServiceProviderImpl.java", "diffHunk": "@@ -63,6 +64,17 @@ public UUID getLocalMemberId() {\n         return res;\n     }\n \n+    @Override\n+    public Collection<UUID> getClientMembersIds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NDU0Ng=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc2MzY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1MzozNFrOGtMloQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowNTo0MVrOGtPBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NTM0NQ==", "bodyText": "We probably should say just \"Client cannot be reached\", a client is not a member.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450045345", "createdAt": "2020-07-06T07:53:34Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryException.java", "diffHunk": "@@ -62,15 +63,19 @@ public static QueryException error(int code, String message, Throwable cause, UU\n     }\n \n     public static QueryException memberConnection(UUID memberId) {\n-        return error(SqlErrorCode.MEMBER_CONNECTION, \"Connection to the member is broken: \" + memberId);\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Member cannot be reached: \" + memberId);\n     }\n \n-    public static QueryException memberLeave(UUID memberId) {\n-        return error(SqlErrorCode.MEMBER_LEAVE, \"Participating member has left the topology: \" + memberId);\n+    public static QueryException memberConnection(Address address) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Member cannot be reached: \" + address);\n     }\n \n-    public static QueryException memberLeave(Collection<UUID> memberIds) {\n-        return error(SqlErrorCode.MEMBER_LEAVE, \"Participating members have left the topology: \" + memberIds);\n+    public static QueryException memberConnection(Collection<UUID> memberIds) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Members cannot be reached: \" + memberIds);\n+    }\n+\n+    public static QueryException clientMemberConnection(UUID clientId) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Client member cannot be reached: \" + clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NTI5OA==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450085298", "createdAt": "2020-07-06T09:05:41Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryException.java", "diffHunk": "@@ -62,15 +63,19 @@ public static QueryException error(int code, String message, Throwable cause, UU\n     }\n \n     public static QueryException memberConnection(UUID memberId) {\n-        return error(SqlErrorCode.MEMBER_CONNECTION, \"Connection to the member is broken: \" + memberId);\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Member cannot be reached: \" + memberId);\n     }\n \n-    public static QueryException memberLeave(UUID memberId) {\n-        return error(SqlErrorCode.MEMBER_LEAVE, \"Participating member has left the topology: \" + memberId);\n+    public static QueryException memberConnection(Address address) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Member cannot be reached: \" + address);\n     }\n \n-    public static QueryException memberLeave(Collection<UUID> memberIds) {\n-        return error(SqlErrorCode.MEMBER_LEAVE, \"Participating members have left the topology: \" + memberIds);\n+    public static QueryException memberConnection(Collection<UUID> memberIds) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Members cannot be reached: \" + memberIds);\n+    }\n+\n+    public static QueryException clientMemberConnection(UUID clientId) {\n+        return error(SqlErrorCode.MEMBER_CONNECTION, \"Client member cannot be reached: \" + clientId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NTM0NQ=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc5OTkyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODowNTowNFrOGtM8Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowNTozMlrOGtPBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MTEzMA==", "bodyText": "Suggested by intellij\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return rows != null ? rows.equals(page.rows) : page.rows == null;\n          \n          \n            \n                    return Objects.equals(rows, page.rows);", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450051130", "createdAt": "2020-07-06T08:05:04Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+\n+import java.util.List;\n+\n+public class SqlPage {\n+\n+    private final List<Data> rows;\n+    private final boolean last;\n+\n+    public SqlPage(List<Data> rows, boolean last) {\n+        this.rows = rows;\n+        this.last = last;\n+    }\n+\n+    public List<Data> getRows() {\n+        return rows;\n+    }\n+\n+    public boolean isLast() {\n+        return last;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        SqlPage page = (SqlPage) o;\n+\n+        if (last != page.last) {\n+            return false;\n+        }\n+\n+        return rows != null ? rows.equals(page.rows) : page.rows == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NTIwOQ==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450085209", "createdAt": "2020-07-06T09:05:32Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+\n+import java.util.List;\n+\n+public class SqlPage {\n+\n+    private final List<Data> rows;\n+    private final boolean last;\n+\n+    public SqlPage(List<Data> rows, boolean last) {\n+        this.rows = rows;\n+        this.last = last;\n+    }\n+\n+    public List<Data> getRows() {\n+        return rows;\n+    }\n+\n+    public boolean isLast() {\n+        return last;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        SqlPage page = (SqlPage) o;\n+\n+        if (last != page.last) {\n+            return false;\n+        }\n+\n+        return rows != null ? rows.equals(page.rows) : page.rows == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MTEzMA=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTg1Mjk0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyMDoyMVrOGtNb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowMTozOVrOGtO41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1OTIyMw==", "bodyText": "This is a fallback code that's used when the load balancer returned null, even though it should return null only if there's no member available. But it's also a fallback when the load balancer doesn't implement the nextDataMember method, and in this case we should find the first data member.\nWhat if the first member returned by the iterator isn't a data member? A user upgrading to 4.2 that has a custom LB can get random \"Client must be connected to at least one data member to execute SQL queries\" errors.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450059223", "createdAt": "2020-07-06T08:20:21Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -767,8 +779,25 @@ public ClientConnection getRandomConnection() {\n             }\n         }\n \n-        Iterator<TcpClientConnection> iterator = activeConnections.values().iterator();\n-        return iterator.hasNext() ? iterator.next() : null;\n+        Iterator<Map.Entry<UUID, TcpClientConnection>> iterator = activeConnections.entrySet().iterator();\n+\n+        Map.Entry<UUID, TcpClientConnection> connectionEntry = iterator.hasNext() ? iterator.next() : null;\n+\n+        if (connectionEntry != null) {\n+            if (dataMember) {\n+                UUID memberId = connectionEntry.getKey();\n+\n+                Member member = client.getClientClusterService().getMember(memberId);\n+\n+                if (member == null || member.isLiteMember()) {\n+                    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MTkwMQ==", "bodyText": "It's also used for non-smart client - can such client be connected to a lite member? Won't SQL work at all in that case?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450061901", "createdAt": "2020-07-06T08:25:03Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -767,8 +779,25 @@ public ClientConnection getRandomConnection() {\n             }\n         }\n \n-        Iterator<TcpClientConnection> iterator = activeConnections.values().iterator();\n-        return iterator.hasNext() ? iterator.next() : null;\n+        Iterator<Map.Entry<UUID, TcpClientConnection>> iterator = activeConnections.entrySet().iterator();\n+\n+        Map.Entry<UUID, TcpClientConnection> connectionEntry = iterator.hasNext() ? iterator.next() : null;\n+\n+        if (connectionEntry != null) {\n+            if (dataMember) {\n+                UUID memberId = connectionEntry.getKey();\n+\n+                Member member = client.getClientClusterService().getMember(memberId);\n+\n+                if (member == null || member.isLiteMember()) {\n+                    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1OTIyMw=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3Njc4MQ==", "bodyText": "Not really. LB is only used when smart routing is enabled (see isSmartRoutingEnabled check). Otherwise, we always use the very first member connection (aka \"unisocket\" client).\n@sancar could you please give your comments on the correct behavior?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450076781", "createdAt": "2020-07-06T08:51:20Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -767,8 +779,25 @@ public ClientConnection getRandomConnection() {\n             }\n         }\n \n-        Iterator<TcpClientConnection> iterator = activeConnections.values().iterator();\n-        return iterator.hasNext() ? iterator.next() : null;\n+        Iterator<Map.Entry<UUID, TcpClientConnection>> iterator = activeConnections.entrySet().iterator();\n+\n+        Map.Entry<UUID, TcpClientConnection> connectionEntry = iterator.hasNext() ? iterator.next() : null;\n+\n+        if (connectionEntry != null) {\n+            if (dataMember) {\n+                UUID memberId = connectionEntry.getKey();\n+\n+                Member member = client.getClientClusterService().getMember(memberId);\n+\n+                if (member == null || member.isLiteMember()) {\n+                    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1OTIyMw=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MzAzMQ==", "bodyText": "Reworked the connection handling so that dataMember=true will return a connection to a data member, even if it is not the first one.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450083031", "createdAt": "2020-07-06T09:01:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/connection/tcp/TcpClientConnectionManager.java", "diffHunk": "@@ -767,8 +779,25 @@ public ClientConnection getRandomConnection() {\n             }\n         }\n \n-        Iterator<TcpClientConnection> iterator = activeConnections.values().iterator();\n-        return iterator.hasNext() ? iterator.next() : null;\n+        Iterator<Map.Entry<UUID, TcpClientConnection>> iterator = activeConnections.entrySet().iterator();\n+\n+        Map.Entry<UUID, TcpClientConnection> connectionEntry = iterator.hasNext() ? iterator.next() : null;\n+\n+        if (connectionEntry != null) {\n+            if (dataMember) {\n+                UUID memberId = connectionEntry.getKey();\n+\n+                Member member = client.getClientClusterService().getMember(memberId);\n+\n+                if (member == null || member.isLiteMember()) {\n+                    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1OTIyMw=="}, "originalCommit": {"oid": "f8156be67c7ba2308c3093a693f159b9bed599a8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjE5NDkzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTo1NDo0MVrOGtQtEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo1NDoxNlrOGtxWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMjc4Ng==", "bodyText": "Should be Set<UUID> also here", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450112786", "createdAt": "2020-07-06T09:54:41Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "diffHunk": "@@ -153,6 +160,12 @@ private void checkMemberState() {\n             }\n         }\n \n+        private void checkClientState() {\n+            Collection<UUID> activeClientIds = nodeServiceProvider.getClientIds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NzU4NA==", "bodyText": "Fixed, now Set is used.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450647584", "createdAt": "2020-07-07T06:54:16Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryStateRegistryUpdater.java", "diffHunk": "@@ -153,6 +160,12 @@ private void checkMemberState() {\n             }\n         }\n \n+        private void checkClientState() {\n+            Collection<UUID> activeClientIds = nodeServiceProvider.getClientIds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMjc4Ng=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI3NzUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxOToxMlrOGtRf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo1NDowNVrOGtxV0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTgwNw==", "bodyText": "It would be much easier to understand if we represent the empty list with an actually empty list rather than null.\nI have checked the SqlExecuteMessageTask code. It would simplify the code there also.\nInstead of\n if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n                for (Data param : parameters.parameters) {\n                    query.addParameter(serializationService.toObject(param));\n                }\n            }\n\nthe following will suffice\n                for (Data param : parameters.parameters) {\n                    query.addParameter(serializationService.toObject(param));\n                }", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450125807", "createdAt": "2020-07-06T10:19:12Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+            List<Data> params0;\n+\n+            if (!params.isEmpty()) {\n+                params0 = new ArrayList<>(params.size());\n+\n+                for (Object param : params) {\n+                    params0.add(serializeParameter(param));\n+                }\n+            } else {\n+                params0 = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NzUwNQ==", "bodyText": "Fixed, now parameters are non-null.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450647505", "createdAt": "2020-07-07T06:54:05Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+            List<Data> params0;\n+\n+            if (!params.isEmpty()) {\n+                params0 = new ArrayList<>(params.size());\n+\n+                for (Object param : params) {\n+                    params0.add(serializeParameter(param));\n+                }\n+            } else {\n+                params0 = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTgwNw=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjMwNDI1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyNzoyNVrOGtRv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowNDo0MFrOGtxneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyOTkxMw==", "bodyText": "You don't need the ClientDelegatingFuture since you are doing a sync call. It is mostly needed when we need to pass a future to the user(or other part of the system)\nWhy not just do the following instead?\nClientMessage clientMessage = fut.get();\nreturn decoder.decodeClientMessage(clientMessage);\n\nEven further, there is no need for static decoder functions because they are all sync calls.\nI would suggest making the return type ClientMessage.  For the fetch method:\n            ClientMessage responseMessage = invoke(message, connection);\n            SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(responseMessage);\n            SqlFetchResponse res = new SqlFetchResponse(response.rowPage, response.error);\n            handleResponseError(res.getError());\n\nStatic decoder functions and delegating future are used for async cases. There is no need to complicate the code with them when not needed.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450129913", "createdAt": "2020-07-06T10:27:25Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+            List<Data> params0;\n+\n+            if (!params.isEmpty()) {\n+                params0 = new ArrayList<>(params.size());\n+\n+                for (Object param : params) {\n+                    params0.add(serializeParameter(param));\n+                }\n+            } else {\n+                params0 = null;\n+            }\n+\n+            ClientMessage message = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            SqlExecuteResponse response = invoke(message, connection, EXECUTE_DECODER);\n+\n+            handleResponseError(response.getError());\n+\n+            return new SqlClientResult(\n+                this,\n+                connection,\n+                response.getQueryId(),\n+                response.getRowMetadata(),\n+                response.getPage(),\n+                query.getCursorBufferSize()\n+            );\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Fetch the next page of the given query.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     * @return Pair: fetched rows + last page flag.\n+     */\n+    public SqlPage fetch(Connection connection, QueryId queryId, int cursorBufferSize) {\n+        try {\n+            ClientMessage message = SqlFetchCodec.encodeRequest(queryId, cursorBufferSize);\n+\n+            SqlFetchResponse res = invoke(message, connection, FETCH_DECODER);\n+\n+            handleResponseError(res.getError());\n+\n+            return res.getPage();\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Close remote query cursor.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     */\n+    void close(Connection connection, QueryId queryId) {\n+        try {\n+            ClientMessage request = SqlCloseCodec.encodeRequest(queryId);\n+\n+            invoke(request, connection, CLOSE_DECODER);\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    private Data serializeParameter(Object parameter) {\n+        try {\n+            return getSerializationService().toData(parameter);\n+        } catch (Exception e) {\n+            throw rethrow(\n+                QueryException.error(\"Failed to serialize query parameter \" + parameter + \": \" + e.getMessage())\n+            );\n+        }\n+    }\n+\n+    Row deserializeRow(Data data) {\n+        try {\n+            return getSerializationService().toObject(data);\n+        } catch (Exception e) {\n+            throw rethrow(\n+                QueryException.error(\"Failed to deserialize query result row: \" + e.getMessage())\n+            );\n+        }\n+    }\n+\n+    private UUID getClientId() {\n+        return client.getLocalEndpoint().getUuid();\n+    }\n+\n+    private InternalSerializationService getSerializationService() {\n+        return client.getSerializationService();\n+    }\n+\n+    private <T> T invoke(ClientMessage request, Connection connection, ClientMessageDecoder<T> decoder) throws Exception {\n+        ClientInvocation invocation = new ClientInvocation(client, request, null, connection);\n+\n+        ClientInvocationFuture fut = invocation.invoke();\n+\n+        return new ClientDelegatingFuture<T>(fut, getSerializationService(), decoder, false).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjAyNg==", "bodyText": "Simplified as you suggested.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450652026", "createdAt": "2020-07-07T07:04:40Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+            List<Data> params0;\n+\n+            if (!params.isEmpty()) {\n+                params0 = new ArrayList<>(params.size());\n+\n+                for (Object param : params) {\n+                    params0.add(serializeParameter(param));\n+                }\n+            } else {\n+                params0 = null;\n+            }\n+\n+            ClientMessage message = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            SqlExecuteResponse response = invoke(message, connection, EXECUTE_DECODER);\n+\n+            handleResponseError(response.getError());\n+\n+            return new SqlClientResult(\n+                this,\n+                connection,\n+                response.getQueryId(),\n+                response.getRowMetadata(),\n+                response.getPage(),\n+                query.getCursorBufferSize()\n+            );\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Fetch the next page of the given query.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     * @return Pair: fetched rows + last page flag.\n+     */\n+    public SqlPage fetch(Connection connection, QueryId queryId, int cursorBufferSize) {\n+        try {\n+            ClientMessage message = SqlFetchCodec.encodeRequest(queryId, cursorBufferSize);\n+\n+            SqlFetchResponse res = invoke(message, connection, FETCH_DECODER);\n+\n+            handleResponseError(res.getError());\n+\n+            return res.getPage();\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Close remote query cursor.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     */\n+    void close(Connection connection, QueryId queryId) {\n+        try {\n+            ClientMessage request = SqlCloseCodec.encodeRequest(queryId);\n+\n+            invoke(request, connection, CLOSE_DECODER);\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    private Data serializeParameter(Object parameter) {\n+        try {\n+            return getSerializationService().toData(parameter);\n+        } catch (Exception e) {\n+            throw rethrow(\n+                QueryException.error(\"Failed to serialize query parameter \" + parameter + \": \" + e.getMessage())\n+            );\n+        }\n+    }\n+\n+    Row deserializeRow(Data data) {\n+        try {\n+            return getSerializationService().toObject(data);\n+        } catch (Exception e) {\n+            throw rethrow(\n+                QueryException.error(\"Failed to deserialize query result row: \" + e.getMessage())\n+            );\n+        }\n+    }\n+\n+    private UUID getClientId() {\n+        return client.getLocalEndpoint().getUuid();\n+    }\n+\n+    private InternalSerializationService getSerializationService() {\n+        return client.getSerializationService();\n+    }\n+\n+    private <T> T invoke(ClientMessage request, Connection connection, ClientMessageDecoder<T> decoder) throws Exception {\n+        ClientInvocation invocation = new ClientInvocation(client, request, null, connection);\n+\n+        ClientInvocationFuture fut = invocation.invoke();\n+\n+        return new ClientDelegatingFuture<T>(fut, getSerializationService(), decoder, false).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyOTkxMw=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjMyODk5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozNTozNlrOGtR_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyMTo1MlrOGtW_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA==", "bodyText": "So a un\u0131socket client that is connected to a lite member can not run a query?\nThis is not suited to our unisocket client behavior. Our unisocket clients should be able to operate same regardless of the member type they are connected to.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450133804", "createdAt": "2020-07-06T10:35:36Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1Nzg2Mg==", "bodyText": "You can check CreateProxyMessageTask. It is one of the places that we explicitly redirect to a data member.\nThe partition-based ones solve the problem automatically since they will run on their partition owner anyway. Even if we invoke the operation on a lite member, the invocation system redirects it to the partition owner.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450157862", "createdAt": "2020-07-06T11:28:36Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjIxOQ==", "bodyText": "Yes, SQL may not work if there lite members in the topology. This is ok for the beta stage at least. Lite member support might be added in the future if we see a demand from users.\nThis limitation will be mentioned explicitly in the product's documentation.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450192219", "createdAt": "2020-07-06T12:40:09Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NjQzOQ==", "bodyText": "I think it's pretty bad that it will fail to work randomly, depending on the member the non-smart client happens to connect. Users might try it and see that it works and then have this misleading error at runtime. In that case we should disallow non-smart clients entirely.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450196439", "createdAt": "2020-07-06T12:48:03Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDc1NA==", "bodyText": "Documentation solves this. Again - we do not support lite members not because we are lazy, or because we do not understand the implications. This is a necessary measure given the huge scope.\nMoreover, in the current PR, we iterate over all members to find the data member for SQL. The flakiness you mentioned is only possible if a user will toggle the member's state back and forth. This is extremely unlikely.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450200754", "createdAt": "2020-07-06T12:55:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNTc2Mw==", "bodyText": "Iterating all connections does not help unisocket client. It will only have one connection. If the client disconnect from data member and connects to lite member, then it will fail.\nIf this is the decision, we basically say that for the uniscoket client, if you use query, your cluster should not contain a lite member. For the smart client, I agree that the problem is very unlikely to occur.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450215763", "createdAt": "2020-07-06T13:21:52Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.ClientDelegatingFuture;\n+import com.hazelcast.client.impl.clientside.ClientMessageDecoder;\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private static final ClientMessageDecoder<SqlExecuteResponse> EXECUTE_DECODER = clientMessage -> {\n+        SqlExecuteCodec.ResponseParameters response = SqlExecuteCodec.decodeResponse(clientMessage);\n+\n+        return new SqlExecuteResponse(response.queryId, response.rowMetadata, response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<SqlFetchResponse> FETCH_DECODER = clientMessage -> {\n+        SqlFetchCodec.ResponseParameters response = SqlFetchCodec.decodeResponse(clientMessage);\n+\n+        return new SqlFetchResponse(response.rowPage, response.error);\n+    };\n+\n+    private static final ClientMessageDecoder<Void> CLOSE_DECODER = clientMessage -> {\n+        SqlCloseCodec.decodeResponse(clientMessage);\n+\n+        return null;\n+    };\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMzgwNA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQxMzYzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTowNDozMlrOGtSzpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjozNTo1M1rOG1AbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ==", "bodyText": "Both serialization service and client protocol have built-in UUID support. If the only purpose of these High and Low part splits is to support them, I think you can just use UUID instead.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450147239", "createdAt": "2020-07-06T11:04:32Z", "author": {"login": "asimarslan"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0ODMxNA==", "bodyText": "protocol schema will redirect you if you configure it on the protocol side.\nhttps://github.com/hazelcast/hazelcast-client-protocol/blob/master/schema/protocol-schema.json#L26", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450148314", "createdAt": "2020-07-06T11:06:54Z", "author": {"login": "asimarslan"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzI4Mg==", "bodyText": "UUID content is inlined into the QueryId to reduce the amount of litter. Real UUIDs are rarely extracted from this object. We only do equals/hashCode on hot paths.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450193282", "createdAt": "2020-07-06T12:42:13Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTgyNQ==", "bodyText": "@devozerov I understand the optimization but UUID is a common class that we use. This will be an exception to how we represent it. I would prefer using UUID for the sake of readability.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451421825", "createdAt": "2020-07-08T09:50:46Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyNTQwMA==", "bodyText": "Let me highlight this once again - QueryId is not UUID. We use two UUID-s to guarantee its uniqueness, but other than that it is mostly an opaque blob.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451425400", "createdAt": "2020-07-08T09:57:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyOTkwMw==", "bodyText": "This way of this UUID usage does not match to protocol style. Not all languages use to high low split of a UUID as java.\nMemberID is already created somewhere on the member, you don't need to split it for litter optimization. let the protocol encode/Decode it.\nFor the localId, how many local id's are created in the system? if they are per query, I don't think you should worry about the litter it creates.\nWe already use UUID in memberId and listenerRegistrationId etc, which are also infrequent.\nI understand you want to optimize it in the best way possible but protocol definition is also an important part of our architecture. Moreover, we cannot change the protocol when we publish it.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451429903", "createdAt": "2020-07-08T10:05:08Z", "author": {"login": "asimarslan"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NDg5MQ==", "bodyText": "Colleagues, I would like to emphasize one more time what is the nature of query ID. From the client perspective, it is an opaque blob that is passed back and forth. From the server perspective, this is an object that serves multiple purposes, such as 1) guaranteeing cluster-wide uniqueness; 2) providing an ability to find the originator member ID without remote requests.\nThe design of the client protocol cannot enforce the content of this object, because client doesn't use any features of it, while the server does. Therefore, it cannot be UUID.\nOn the other hand, I share your concerns about future protocol changes. So I propose the other solution - to change it to String. This would be a good choice from the protocol perspective for an opaque object. If we would like to change the content of this object on the server, the client protocol will not be affected.\nI merged these changes to the PR, please take a look.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451984891", "createdAt": "2020-07-09T06:10:52Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDQ5OA==", "bodyText": "@devozerov if the client doesn't need the content of this, I think 4 long value representation is much better than string. String needs to be parsed on server side and it's not a good idea.\nOur initial concern was about parsing the internal UUIDs but as you say the client won't need it.\nThe original QueryId should be used instead of a string.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r458044498", "createdAt": "2020-07-21T12:04:24Z", "author": {"login": "asimarslan"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0OA==", "bodyText": "I used to think that QueryId was good solution, but now I think that String is better.\nAs explained before, the query ID is completely opaque to the client, I.e. it is only passed back and forth. String representation has two advantages over QueryId:\n\nIt is more stable - we can change the server-side representation without breaking protocol compatibility\nIt makes client implementation simpler. Consider that we will have SQL implemented in many clients in future. All of them would have to implement a custom object that does zero useful work\n\nThat said, IMO String is good enough. Also please note that there is no parsing on the sever side. We convert QueryId to String once (see QueryId.unparse) and then use this String as a key. There should be no negative performance impact from this.\nWDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r458234648", "createdAt": "2020-07-21T16:35:53Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -35,20 +35,20 @@\n     private long memberIdLow;\n \n     /** Local ID: most significant bits. */\n-    private long localHigh;\n+    private long localIdHigh;\n \n     /** Local ID: least significant bits. */\n-    private long localLow;\n+    private long localIdLow;\n \n     public QueryId() {\n         // No-op.\n     }\n \n-    QueryId(long memberIdHigh, long memberIdLow, long localHigh, long localLow) {\n+    public QueryId(long memberIdHigh, long memberIdLow, long localIdHigh, long localIdLow) {\n         this.memberIdHigh = memberIdHigh;\n         this.memberIdLow = memberIdLow;\n-        this.localHigh = localHigh;\n-        this.localLow = localLow;\n+        this.localIdHigh = localIdHigh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzIzOQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjU2OTkwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTo1ODowMlrOGtUR3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo1NTowMlrOGtxXZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTM1OQ==", "bodyText": "This does not seem correct. We are not using Data for builtin IdentifiedDataSerializable objects on our protocol as much as possible. It is hard to define what is Data in the protocol. More importantly, they don't support evolution, it is very likely to make a mistake.\nI see that Row is an interface. Which Row implementations can we return to the client?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450171359", "createdAt": "2020-07-06T11:58:02Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<Data> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<Data> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            Row rowInternal = ((SqlRowImpl) row).getDelegate();\n+            Data rowData = serializationService.toData(rowInternal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTMwNw==", "bodyText": "I'll change it to List<Data>. There is no model for a row at the moment.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450191307", "createdAt": "2020-07-06T12:38:24Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<Data> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<Data> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            Row rowInternal = ((SqlRowImpl) row).getDelegate();\n+            Data rowData = serializationService.toData(rowInternal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTM1OQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NzkwOA==", "bodyText": "Fixed. Now List<Data> is used to represent row values. Please take a look.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450647908", "createdAt": "2020-07-07T06:55:02Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<Data> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<Data> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            Row rowInternal = ((SqlRowImpl) row).getDelegate();\n+            Data rowData = serializationService.toData(rowInternal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTM1OQ=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjYzNjY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoxOTo0M1rOGtU6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxNDoyMlrOGubCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA==", "bodyText": "I could not find the cleanup code for the case where a client lefts the cluster without closing the query.\nYou can use ClientEndpoint.addDestroyAction(UUID registrationId, Callable<Boolean> removeAction); for this.\nA client enndpoint is removed and all desrtoy actions are called when the assocaiated connection is disconnected. Since the queries are desinged to be sticky it looks like a good fit.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450181720", "createdAt": "2020-07-06T12:19:43Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MjEwNQ==", "bodyText": "And can we have a test to verify that cleanups are done correctly?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450182105", "createdAt": "2020-07-06T12:20:30Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODg0NA==", "bodyText": "I see that QueryClientStateRegistry.update is used for this purpose. I think, our standard solution with ClientEndpoint addDestroyAction is enough for this. What do you think ?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450188844", "createdAt": "2020-07-06T12:33:30Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDU1Nw==", "bodyText": "Please see:\ncom.hazelcast.sql.impl.client.QueryClientStateRegistry#update\ncom.hazelcast.sql.SqlErrorClientTest#testCursorCleanupOnClientLeave", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450190557", "createdAt": "2020-07-06T12:36:55Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNTg0NQ==", "bodyText": "ClientEndpoint addDestroyAction looks heavier to me - one have to register it for every request, and also be careful to deregister it properly.\nThe key observation is that majority of requests will be completed normally, without client disconnects. I think the current approach handles it better - we do no do any additional actions for the most queries.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450205845", "createdAt": "2020-07-06T13:04:47Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMDcyNg==", "bodyText": "Ok. Fair enough.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451330726", "createdAt": "2020-07-08T07:14:22Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+    /** Registered client cursors. */\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MTcyMA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY0NzI2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyMzowMFrOGtVAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoxMzozM1rOGtzu8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MzM2OA==", "bodyText": "Is permission left null on purpose? I think, SQL permissions are important.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450183368", "createdAt": "2020-07-06T12:23:00Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";\n+    }\n+\n+    @Override\n+    public Object[] getParameters() {\n+        return new Object[] {\n+            parameters.sql,\n+            parameters.parameters,\n+            parameters.timeoutMillis,\n+            parameters.cursorBufferSize\n+        } ;\n+    }\n+\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4OTc1Ng==", "bodyText": "We do not have a security model yet. Given that an SQL script could trigger any kind of action (e.g. read from several maps, or start Jet job, etc), it is impossible to define the required permissions on that level. The permissions will be known after parsing only.\nMeanwhile, we may add a global flag to disable SQL on the member, but this is out of scope of this PR.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450189756", "createdAt": "2020-07-06T12:35:21Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";\n+    }\n+\n+    @Override\n+    public Object[] getParameters() {\n+        return new Object[] {\n+            parameters.sql,\n+            parameters.parameters,\n+            parameters.timeoutMillis,\n+            parameters.cursorBufferSize\n+        } ;\n+    }\n+\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MzM2OA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5ODk5Mw==", "bodyText": "I think we may define a global \"query\" permission that will govern whether the user can execute any query or not. And more deep integration will be implemented later.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450198993", "createdAt": "2020-07-06T12:52:37Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";\n+    }\n+\n+    @Override\n+    public Object[] getParameters() {\n+        return new Object[] {\n+            parameters.sql,\n+            parameters.parameters,\n+            parameters.timeoutMillis,\n+            parameters.cursorBufferSize\n+        } ;\n+    }\n+\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MzM2OA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NjcwNQ==", "bodyText": "Added the sql permission, modeled after the transaction permission.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450686705", "createdAt": "2020-07-07T08:13:33Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";\n+    }\n+\n+    @Override\n+    public Object[] getParameters() {\n+        return new Object[] {\n+            parameters.sql,\n+            parameters.parameters,\n+            parameters.timeoutMillis,\n+            parameters.cursorBufferSize\n+        } ;\n+    }\n+\n+    @Override\n+    public Permission getRequiredPermission() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4MzM2OA=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY1MDk1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyNDoxMFrOGtVDBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoxMjoyNlrOGtWp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4Mzk0Mg==", "bodyText": "for the method name, we usually use the user API method name. So should it be query?  And note that related tests are on the enterprise repo. Make sure that you have SecurityInterceptor and permission tests for the new use case.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450183942", "createdAt": "2020-07-06T12:24:10Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NTM1Mw==", "bodyText": "I can change it to query, but what is the goal of this? From the user perspective, he executes a query, but internally it is translated into several different commands, that are not directly mapped to the public API. Moreover, the result of this operation contains internal objects, which also highlights that this is not a direct API call.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450195353", "createdAt": "2020-07-06T12:46:06Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4Mzk0Mg=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxMDI4MQ==", "bodyText": "Well, we don't really have a clear answer. In the end, whatever you choose must be documented clearly. We select it as same as the public method name to make it more intuitive. Not sure what to do when it is multiple requests per API call.\nJust be aware that what you choose here is also a public API and needs to be documented.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450210281", "createdAt": "2020-07-06T13:12:26Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlExecuteMessageTask.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+\n+import java.security.Permission;\n+\n+/**\n+ * SQL query execute task.\n+ */\n+public class SqlExecuteMessageTask extends AbstractCallableMessageTask<SqlExecuteCodec.RequestParameters> {\n+    public SqlExecuteMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        try {\n+            SqlQuery query = new SqlQuery(parameters.sql);\n+\n+            if (parameters.parameters != null && !parameters.parameters.isEmpty()) {\n+                for (Data param : parameters.parameters) {\n+                    query.addParameter(serializationService.toObject(param));\n+                }\n+            }\n+\n+            query.setTimeoutMillis(parameters.timeoutMillis);\n+            query.setCursorBufferSize(parameters.cursorBufferSize);\n+\n+            SqlServiceImpl sqlService = nodeEngine.getSqlService();\n+\n+            SqlResultImpl cursor = (SqlResultImpl) sqlService.query(query);\n+\n+            SqlPage page = sqlService.getInternalService().getClientStateRegistry().registerAndFetch(\n+                endpoint.getUuid(),\n+                cursor,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+\n+            return new SqlExecuteResponse(\n+                cursor.getQueryId(),\n+                cursor.getRowMetadata(),\n+                page,\n+                null\n+            );\n+        } catch (Exception e) {\n+            SqlError error = SqlClientUtils.exceptionToClientError(e, nodeEngine.getLocalMember().getUuid());\n+\n+            return new SqlExecuteResponse(null, null, null, error);\n+        }\n+    }\n+\n+    @Override\n+    protected SqlExecuteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {\n+        return SqlExecuteCodec.decodeRequest(clientMessage);\n+    }\n+\n+    @Override\n+    protected ClientMessage encodeResponse(Object response) {\n+        SqlExecuteResponse response0 = (SqlExecuteResponse) response;\n+\n+        return SqlExecuteCodec.encodeResponse(\n+            response0.getQueryId(),\n+            response0.getRowMetadata(),\n+            response0.getPage(),\n+            response0.getError()\n+        );\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return SqlInternalService.SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getDistributedObjectName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        return \"execute\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4Mzk0Mg=="}, "originalCommit": {"oid": "55633b28d49ce6102ad8d37e2ad752704d869b4f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg0NTc4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/builtin/CustomTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1Mzo0MlrOGt9JGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxODoxN1rOGubKDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MDg1Ng==", "bodyText": "Typo: double type?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450840856", "createdAt": "2020-07-07T12:53:42Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/builtin/CustomTypeFactory.java", "diffHunk": "@@ -197,4 +200,14 @@ public static EndpointQualifier createEndpointQualifier(int type, String identif\n         }\n         return EndpointQualifier.resolve(protocolType, identifier);\n     }\n+\n+    public static SqlColumnMetadata createSqlColumnMetadata(String name, int type) {\n+        SqlColumnType sqlColumnType = SqlColumnType.getById(type);\n+\n+        if (sqlColumnType == null) {\n+            throw new HazelcastException(\"Unexpected SQL column type type = [\" + type + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMjYyMg==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451332622", "createdAt": "2020-07-08T07:18:17Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/builtin/CustomTypeFactory.java", "diffHunk": "@@ -197,4 +200,14 @@ public static EndpointQualifier createEndpointQualifier(int type, String identif\n         }\n         return EndpointQualifier.resolve(protocolType, identifier);\n     }\n+\n+    public static SqlColumnMetadata createSqlColumnMetadata(String name, int type) {\n+        SqlColumnType sqlColumnType = SqlColumnType.getById(type);\n+\n+        if (sqlColumnType == null) {\n+            throw new HazelcastException(\"Unexpected SQL column type type = [\" + type + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MDg1Ng=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkyMjcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxMjo0MFrOGt94RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxODozNVrOGubKjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjkzMw==", "bodyText": "Not sure that I got why do we need to convert the result to Data if we are already on the client?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450852933", "createdAt": "2020-07-07T13:12:40Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1OTE4OA==", "bodyText": "This code is invoked on the member", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450859188", "createdAt": "2020-07-07T13:22:15Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjkzMw=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2OTQ1NA==", "bodyText": "Shall we move it then somewhere to the member related class?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450869454", "createdAt": "2020-07-07T13:36:23Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjkzMw=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMjc1MQ==", "bodyText": "Makes sense. Moved to the com.hazelcast.sql.impl.state package.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451332751", "createdAt": "2020-07-08T07:18:35Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MjkzMw=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk0Mjk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNzozNlrOGt-EzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxNDoyM1rOGubCrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjE0MQ==", "bodyText": "If an exception is thrown from service.close(connection, queryId) then we still mark the iterator as closed while it is not?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450856141", "createdAt": "2020-07-07T13:17:36Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMDczNA==", "bodyText": "The only reason for the exception here is a broken connection. If it is broken, there is no sense trying to keep the result opened, because no more rows could be fetched anyway.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451330734", "createdAt": "2020-07-08T07:14:23Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjE0MQ=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk0NTQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxODoxNlrOGt-GYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMjo0M1rOGua_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjU0NA==", "bodyText": "What is the meaning for the cursorBufferSize=0?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450856544", "createdAt": "2020-07-07T13:18:16Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;\n+        }\n+    }\n+\n+    public int getCursorBufferSize() {\n+        return cursorBufferSize;\n+    }\n+\n+    public void setCursorBufferSize(int cursorBufferSize) {\n+        assert cursorBufferSize >= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyOTg3NQ==", "bodyText": "These methods are not used in this PR, they are needed by JDBC. Removed them for now to avoid confusion.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451329875", "createdAt": "2020-07-08T07:12:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;\n+        }\n+    }\n+\n+    public int getCursorBufferSize() {\n+        return cursorBufferSize;\n+    }\n+\n+    public void setCursorBufferSize(int cursorBufferSize) {\n+        assert cursorBufferSize >= 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NjU0NA=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk1NDI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMDoyNFrOGt-Lwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMDowNVrOGua6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzkyMg==", "bodyText": "Shall we add if(closed) check here as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450857922", "createdAt": "2020-07-07T13:20:24Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;\n+        }\n+    }\n+\n+    public int getCursorBufferSize() {\n+        return cursorBufferSize;\n+    }\n+\n+    public void setCursorBufferSize(int cursorBufferSize) {\n+        assert cursorBufferSize >= 0;\n+\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    private void fetchNextPage(ClientIterator iterator) {\n+        SqlPage page = service.fetch(connection, queryId, cursorBufferSize);\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    private List<Row> convertPageRows(List<SqlPageRow> serializedRows) {\n+        List<Row> rows = new ArrayList<>(serializedRows.size());\n+\n+        for (SqlPageRow serializedRow : serializedRows) {\n+            List<Data> serializedValues = serializedRow.getValues();\n+            Object[] values = new Object[serializedValues.size()];\n+\n+            for (int i = 0; i < serializedValues.size(); i++) {\n+                values[i] = service.deserializeRowValue(serializedValues.get(i));\n+            }\n+\n+            rows.add(new HeapRow(values));\n+        }\n+\n+        return rows;\n+    }\n+\n+    /**\n+     * Implementation of lazy iterator, which fetches results as needed.\n+     */\n+    private class ClientIterator implements Iterator<SqlRow> {\n+\n+        private List<Row> currentRows;\n+        private int currentPosition;\n+        private boolean last;\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (closed) {\n+                throw service.rethrow(QueryException.cancelledByUser());\n+            }\n+\n+            while (currentPosition == currentRows.size()) {\n+                // Reached end of the page. Try fetching the next one if possible.\n+                if (!last) {\n+                    fetchNextPage(this);\n+                } else {\n+                    // No more pages expected, so return false.\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public SqlRow next() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyODUxMg==", "bodyText": "This method first invokes hasNext that does this check.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451328512", "createdAt": "2020-07-08T07:10:05Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.SqlRowMetadata;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlRowImpl;\n+import com.hazelcast.sql.impl.row.HeapRow;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Client-side cursor.\n+ */\n+public class SqlClientResult implements SqlResult {\n+\n+    private final SqlClientService service;\n+    private final Connection connection;\n+    private final QueryId queryId;\n+    private final SqlRowMetadata rowMetadata;\n+    private final ClientIterator iterator = new ClientIterator();\n+\n+    private int cursorBufferSize;\n+    private boolean closed;\n+    private boolean iteratorAccessed;\n+\n+    public SqlClientResult(\n+        SqlClientService service,\n+        Connection connection,\n+        QueryId queryId,\n+        SqlRowMetadata rowMetadata,\n+        SqlPage page,\n+        int cursorBufferSize\n+    ) {\n+        this.service = service;\n+        this.connection = connection;\n+        this.queryId = queryId;\n+        this.rowMetadata = rowMetadata;\n+        this.cursorBufferSize = cursorBufferSize;\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlRowMetadata getRowMetadata() {\n+        return rowMetadata;\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public Iterator<SqlRow> iterator() {\n+        if (!iteratorAccessed) {\n+            iteratorAccessed = true;\n+\n+            return iterator;\n+        } else {\n+            throw new IllegalStateException(\"Iterator could be requested only once\");\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (!closed) {\n+                if (iterator.last) {\n+                    // The last page accessed, so the remote cursor is already closed. No-op.\n+                    return;\n+                }\n+\n+                service.close(connection, queryId);\n+            }\n+        } finally {\n+            closed = true;\n+        }\n+    }\n+\n+    public int getCursorBufferSize() {\n+        return cursorBufferSize;\n+    }\n+\n+    public void setCursorBufferSize(int cursorBufferSize) {\n+        assert cursorBufferSize >= 0;\n+\n+        this.cursorBufferSize = cursorBufferSize;\n+    }\n+\n+    private void fetchNextPage(ClientIterator iterator) {\n+        SqlPage page = service.fetch(connection, queryId, cursorBufferSize);\n+\n+        iterator.onNextPage(page);\n+    }\n+\n+    private List<Row> convertPageRows(List<SqlPageRow> serializedRows) {\n+        List<Row> rows = new ArrayList<>(serializedRows.size());\n+\n+        for (SqlPageRow serializedRow : serializedRows) {\n+            List<Data> serializedValues = serializedRow.getValues();\n+            Object[] values = new Object[serializedValues.size()];\n+\n+            for (int i = 0; i < serializedValues.size(); i++) {\n+                values[i] = service.deserializeRowValue(serializedValues.get(i));\n+            }\n+\n+            rows.add(new HeapRow(values));\n+        }\n+\n+        return rows;\n+    }\n+\n+    /**\n+     * Implementation of lazy iterator, which fetches results as needed.\n+     */\n+    private class ClientIterator implements Iterator<SqlRow> {\n+\n+        private List<Row> currentRows;\n+        private int currentPosition;\n+        private boolean last;\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (closed) {\n+                throw service.rethrow(QueryException.cancelledByUser());\n+            }\n+\n+            while (currentPosition == currentRows.size()) {\n+                // Reached end of the page. Try fetching the next one if possible.\n+                if (!last) {\n+                    fetchNextPage(this);\n+                } else {\n+                    // No more pages expected, so return false.\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public SqlRow next() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzkyMg=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTAwNDQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozMTowMFrOGt-peQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzowOTowOFrOGua4Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2NTUyOQ==", "bodyText": "Javadoc would be useful.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450865529", "createdAt": "2020-07-07T13:31:00Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import java.util.List;\n+import java.util.Objects;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyODEwMg==", "bodyText": "Added JavaDoc", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451328102", "createdAt": "2020-07-08T07:09:08Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlPage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import java.util.List;\n+import java.util.Objects;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2NTUyOQ=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTAyMjgxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/txn/ClientTxnUniSocketTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozNDo1MlrOGt-0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzowODoxM1rOGua3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODMyNg==", "bodyText": "Why do we return the last member in this case?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r450868326", "createdAt": "2020-07-07T13:34:52Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/client/txn/ClientTxnUniSocketTest.java", "diffHunk": "@@ -65,6 +65,23 @@ public Member next() {\n                 }\n                 return members[0];\n             }\n+\n+            @Override\n+            public Member nextDataMember() {\n+                Member[] members = getDataMembers();\n+                if (members == null || members.length == 0) {\n+                    return null;\n+                }\n+                if (members.length == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyNzc2MA==", "bodyText": "I do not know, this is just a copy-paste from the next() method to let the test compile. There is this comment above:\n//try to force second member to connect when exist", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451327760", "createdAt": "2020-07-08T07:08:13Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/test/java/com/hazelcast/client/txn/ClientTxnUniSocketTest.java", "diffHunk": "@@ -65,6 +65,23 @@ public Member next() {\n                 }\n                 return members[0];\n             }\n+\n+            @Override\n+            public Member nextDataMember() {\n+                Member[] members = getDataMembers();\n+                if (members == null || members.length == 0) {\n+                    return null;\n+                }\n+                if (members.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODMyNg=="}, "originalCommit": {"oid": "b7f8b720ed2b9a4263ae3f104d46db5699c85678"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDE1NDY3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODowODozN1rOGuc3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjowNjoyMFrOGvC4Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2MDcwMQ==", "bodyText": "There is no need for SqlExecuteResponse object anymore here.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451360701", "createdAt": "2020-07-08T08:08:37Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+\n+import javax.annotation.Nonnull;\n+import java.security.AccessControlException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+\n+            List<Data> params0 = new ArrayList<>(params.size());\n+\n+            for (Object param : params) {\n+                params0.add(serializeParameter(param));\n+            }\n+\n+            ClientMessage requestMessage = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+\n+            SqlExecuteCodec.ResponseParameters responseParameters = SqlExecuteCodec.decodeResponse(responseMessage);\n+\n+            SqlExecuteResponse response = new SqlExecuteResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4MzQxOQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451983419", "createdAt": "2020-07-09T06:06:20Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+\n+import javax.annotation.Nonnull;\n+import java.security.AccessControlException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+\n+            List<Data> params0 = new ArrayList<>(params.size());\n+\n+            for (Object param : params) {\n+                params0.add(serializeParameter(param));\n+            }\n+\n+            ClientMessage requestMessage = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+\n+            SqlExecuteCodec.ResponseParameters responseParameters = SqlExecuteCodec.decodeResponse(responseMessage);\n+\n+            SqlExecuteResponse response = new SqlExecuteResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2MDcwMQ=="}, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDE1NzAzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODowOToxOVrOGuc5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjowNjoxMlrOGvC4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2MTA3Ng==", "bodyText": "There is no need for SqlFetchResponse  object anymore here.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451361076", "createdAt": "2020-07-08T08:09:19Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+\n+import javax.annotation.Nonnull;\n+import java.security.AccessControlException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+\n+            List<Data> params0 = new ArrayList<>(params.size());\n+\n+            for (Object param : params) {\n+                params0.add(serializeParameter(param));\n+            }\n+\n+            ClientMessage requestMessage = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+\n+            SqlExecuteCodec.ResponseParameters responseParameters = SqlExecuteCodec.decodeResponse(responseMessage);\n+\n+            SqlExecuteResponse response = new SqlExecuteResponse(\n+                    responseParameters.queryId,\n+                    responseParameters.rowMetadata,\n+                    responseParameters.rowPage,\n+                    responseParameters.error\n+            );\n+\n+            handleResponseError(response.getError());\n+\n+            return new SqlClientResult(\n+                this,\n+                connection,\n+                response.getQueryId(),\n+                response.getRowMetadata(),\n+                response.getPage(),\n+                query.getCursorBufferSize()\n+            );\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Fetch the next page of the given query.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     * @return Pair: fetched rows + last page flag.\n+     */\n+    public SqlPage fetch(Connection connection, QueryId queryId, int cursorBufferSize) {\n+        try {\n+            ClientMessage requestMessage = SqlFetchCodec.encodeRequest(queryId, cursorBufferSize);\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+            SqlFetchCodec.ResponseParameters responseParameters = SqlFetchCodec.decodeResponse(responseMessage);\n+            SqlFetchResponse response = new SqlFetchResponse(responseParameters.rowPage, responseParameters.error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4MzM2NQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451983365", "createdAt": "2020-07-09T06:06:12Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientService.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl;\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlCloseCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlExecuteCodec;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocation;\n+import com.hazelcast.client.impl.spi.impl.ClientInvocationFuture;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlErrorCode;\n+import com.hazelcast.sql.SqlException;\n+import com.hazelcast.sql.SqlQuery;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlService;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.QueryUtils;\n+\n+import javax.annotation.Nonnull;\n+import java.security.AccessControlException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Client-side implementation of SQL service.\n+ */\n+public class SqlClientService implements SqlService {\n+\n+    private final HazelcastClientInstanceImpl client;\n+\n+    public SqlClientService(HazelcastClientInstanceImpl client) {\n+        this.client = client;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public SqlResult query(@Nonnull SqlQuery query) {\n+        Connection connection = client.getConnectionManager().getRandomConnection(true);\n+\n+        if (connection == null) {\n+            throw rethrow(QueryException.error(\n+                SqlErrorCode.CONNECTION_PROBLEM,\n+                \"Client must be connected to at least one data member to execute SQL queries\"\n+            ));\n+        }\n+\n+        try {\n+            List<Object> params = query.getParameters();\n+\n+            List<Data> params0 = new ArrayList<>(params.size());\n+\n+            for (Object param : params) {\n+                params0.add(serializeParameter(param));\n+            }\n+\n+            ClientMessage requestMessage = SqlExecuteCodec.encodeRequest(\n+                query.getSql(),\n+                params0,\n+                query.getTimeoutMillis(),\n+                query.getCursorBufferSize()\n+            );\n+\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+\n+            SqlExecuteCodec.ResponseParameters responseParameters = SqlExecuteCodec.decodeResponse(responseMessage);\n+\n+            SqlExecuteResponse response = new SqlExecuteResponse(\n+                    responseParameters.queryId,\n+                    responseParameters.rowMetadata,\n+                    responseParameters.rowPage,\n+                    responseParameters.error\n+            );\n+\n+            handleResponseError(response.getError());\n+\n+            return new SqlClientResult(\n+                this,\n+                connection,\n+                response.getQueryId(),\n+                response.getRowMetadata(),\n+                response.getPage(),\n+                query.getCursorBufferSize()\n+            );\n+        } catch (Exception e) {\n+            throw rethrow(e, connection);\n+        }\n+    }\n+\n+    /**\n+     * Fetch the next page of the given query.\n+     *\n+     * @param connection Connection.\n+     * @param queryId Query ID.\n+     * @return Pair: fetched rows + last page flag.\n+     */\n+    public SqlPage fetch(Connection connection, QueryId queryId, int cursorBufferSize) {\n+        try {\n+            ClientMessage requestMessage = SqlFetchCodec.encodeRequest(queryId, cursorBufferSize);\n+            ClientMessage responseMessage = invoke(requestMessage, connection);\n+            SqlFetchCodec.ResponseParameters responseParameters = SqlFetchCodec.decodeResponse(responseMessage);\n+            SqlFetchResponse response = new SqlFetchResponse(responseParameters.rowPage, responseParameters.error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2MTA3Ng=="}, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDMzODUxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1Njo1OVrOGuerMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoxNDo1NFrOGvEkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MDI1OQ==", "bodyText": "Would it be possible to use List<Data> instead of SqlPageRow here. And also in the protocol ?\nIt would eliminate the need for creating a new type in the protocol, as well as creating extra objects here.\nIn the protocol, we may also eliminate SqlPage in the protocol and put the last boolean as one of the response params.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451390259", "createdAt": "2020-07-08T08:56:59Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.client.SqlPage;\n+import com.hazelcast.sql.impl.client.SqlPageRow;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxMTAzOA==", "bodyText": "Removed SqlPage from the protocol, although it is still used in the server-side part, because we need to return rows and a flag anyway.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r452011038", "createdAt": "2020-07-09T07:14:54Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.client.SqlPage;\n+import com.hazelcast.sql.impl.client.SqlPageRow;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MDI1OQ=="}, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDM1NTA2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlFetchMessageTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowMToxNFrOGue1ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNTo0NTozNVrOGvCebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MjkwNg==", "bodyText": "You can eliminate the need for creating SqlFetchResponse class by returning page or error directly.\nencodeResponse method could act accordingle by checking if response is instanceOf Exception or not.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451392906", "createdAt": "2020-07-08T09:01:14Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlFetchMessageTask.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.security.permission.SqlPermission;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+\n+import java.security.Permission;\n+import java.util.UUID;\n+\n+/**\n+ * SQL query fetch task.\n+ */\n+public class SqlFetchMessageTask extends AbstractCallableMessageTask<SqlFetchCodec.RequestParameters> {\n+    public SqlFetchMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        UUID localMemberId = nodeEngine.getLocalMember().getUuid();\n+        SqlInternalService service = nodeEngine.getSqlService().getInternalService();\n+\n+        SqlPage page = null;\n+        SqlError error = null;\n+\n+        try {\n+            page = service.getClientStateRegistry().fetch(\n+                endpoint.getUuid(),\n+                parameters.queryId,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+        } catch (Exception e) {\n+            error = SqlClientUtils.exceptionToClientError(e, localMemberId);\n+        }\n+\n+        return new SqlFetchResponse(page, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk3NjgxMg==", "bodyText": "It will make the code harder to follow because we will use different ways of returning results for execute and fetch commands.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451976812", "createdAt": "2020-07-09T05:45:35Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlFetchMessageTask.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.client;\n+\n+import com.hazelcast.client.impl.protocol.ClientMessage;\n+import com.hazelcast.client.impl.protocol.codec.SqlFetchCodec;\n+import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.nio.Connection;\n+import com.hazelcast.security.permission.SqlPermission;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+\n+import java.security.Permission;\n+import java.util.UUID;\n+\n+/**\n+ * SQL query fetch task.\n+ */\n+public class SqlFetchMessageTask extends AbstractCallableMessageTask<SqlFetchCodec.RequestParameters> {\n+    public SqlFetchMessageTask(ClientMessage clientMessage, Node node, Connection connection) {\n+        super(clientMessage, node, connection);\n+    }\n+\n+    @Override\n+    protected Object call() throws Exception {\n+        UUID localMemberId = nodeEngine.getLocalMember().getUuid();\n+        SqlInternalService service = nodeEngine.getSqlService().getInternalService();\n+\n+        SqlPage page = null;\n+        SqlError error = null;\n+\n+        try {\n+            page = service.getClientStateRegistry().fetch(\n+                endpoint.getUuid(),\n+                parameters.queryId,\n+                parameters.cursorBufferSize,\n+                serializationService\n+            );\n+        } catch (Exception e) {\n+            error = SqlClientUtils.exceptionToClientError(e, localMemberId);\n+        }\n+\n+        return new SqlFetchResponse(page, error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MjkwNg=="}, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQwMDgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxNDoyNFrOGufSZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjowNTo0OVrOGvC3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMDI5Mg==", "bodyText": "@devozerov This part is confusing to me. Can you document when can a client be null? To me, it looked like it can not, or maybe I am missing something.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451400292", "createdAt": "2020-07-08T09:14:24Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.client.SqlPage;\n+import com.hazelcast.sql.impl.client.SqlPageRow;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));\n+        }\n+\n+        return new SqlPageRow(values);\n+    }\n+\n+    public void close(UUID clientId, QueryId queryId) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor != null) {\n+            clientCursor.getSqlResult().close();\n+\n+            deleteClientCursor(clientCursor);\n+        }\n+    }\n+\n+    public void reset() {\n+        clientCursors.clear();\n+    }\n+\n+    public void update(Set<UUID> activeClientIds) {\n+        List<QueryClientState> victims = new ArrayList<>();\n+\n+        for (QueryClientState clientCursor : clientCursors.values()) {\n+            if (!activeClientIds.contains(clientCursor.getClientId())) {\n+                victims.add(clientCursor);\n+            }\n+        }\n+\n+        for (QueryClientState victim : victims) {\n+            QueryException error = QueryException.clientMemberConnection(victim.getClientId());\n+\n+            victim.getSqlResult().closeOnError(error);\n+\n+            deleteClientCursor(victim);\n+        }\n+    }\n+\n+    private QueryClientState getClientCursor(UUID clientId, QueryId queryId) {\n+        QueryClientState cursor = clientCursors.get(queryId);\n+\n+        if (cursor == null || (clientId != null && !cursor.getClientId().equals(clientId))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4MzIyMw==", "bodyText": "Fixed. Part of this expression was redundant.", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r451983223", "createdAt": "2020-07-09T06:05:49Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.state;\n+\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.sql.SqlRow;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.SqlResultImpl;\n+import com.hazelcast.sql.impl.client.SqlPage;\n+import com.hazelcast.sql.impl.client.SqlPageRow;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Registry of active client cursors.\n+ */\n+public class QueryClientStateRegistry {\n+\n+    private final ConcurrentHashMap<QueryId, QueryClientState> clientCursors = new ConcurrentHashMap<>();\n+\n+    public SqlPage registerAndFetch(\n+        UUID clientId,\n+        SqlResultImpl cursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = new QueryClientState(clientId, cursor);\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (!page.isLast()) {\n+            clientCursors.put(cursor.getQueryId(), clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    public SqlPage fetch(\n+        UUID clientId,\n+        QueryId queryId,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor == null) {\n+            throw QueryException.error(\"Query cursor is not found (closed?): \" + queryId);\n+        }\n+\n+        SqlPage page = fetchInternal(clientCursor, cursorBufferSize, serializationService);\n+\n+        if (page.isLast()) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return page;\n+    }\n+\n+    private SqlPage fetchInternal(\n+        QueryClientState clientCursor,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        Iterator<SqlRow> iterator = clientCursor.getIterator();\n+\n+        List<SqlPageRow> page = new ArrayList<>(cursorBufferSize);\n+        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService);\n+\n+        if (last) {\n+            deleteClientCursor(clientCursor);\n+        }\n+\n+        return new SqlPage(page, last);\n+    }\n+\n+    private static boolean fetchPage(\n+        Iterator<SqlRow> iterator,\n+        List<SqlPageRow> page,\n+        int cursorBufferSize,\n+        InternalSerializationService serializationService\n+    ) {\n+        while (iterator.hasNext()) {\n+            SqlRow row = iterator.next();\n+            SqlPageRow convertedRow = convertRow(row, serializationService);\n+\n+            page.add(convertedRow);\n+\n+            if (page.size() == cursorBufferSize) {\n+                break;\n+            }\n+        }\n+\n+        return !iterator.hasNext();\n+    }\n+\n+    private static SqlPageRow convertRow(SqlRow row, InternalSerializationService serializationService) {\n+        int columnCount = row.getMetadata().getColumnCount();\n+\n+        List<Data> values = new ArrayList<>(columnCount);\n+\n+        for (int i = 0; i < columnCount; i++) {\n+            values.add(serializationService.toData(row.getObject(i)));\n+        }\n+\n+        return new SqlPageRow(values);\n+    }\n+\n+    public void close(UUID clientId, QueryId queryId) {\n+        QueryClientState clientCursor = getClientCursor(clientId, queryId);\n+\n+        if (clientCursor != null) {\n+            clientCursor.getSqlResult().close();\n+\n+            deleteClientCursor(clientCursor);\n+        }\n+    }\n+\n+    public void reset() {\n+        clientCursors.clear();\n+    }\n+\n+    public void update(Set<UUID> activeClientIds) {\n+        List<QueryClientState> victims = new ArrayList<>();\n+\n+        for (QueryClientState clientCursor : clientCursors.values()) {\n+            if (!activeClientIds.contains(clientCursor.getClientId())) {\n+                victims.add(clientCursor);\n+            }\n+        }\n+\n+        for (QueryClientState victim : victims) {\n+            QueryException error = QueryException.clientMemberConnection(victim.getClientId());\n+\n+            victim.getSqlResult().closeOnError(error);\n+\n+            deleteClientCursor(victim);\n+        }\n+    }\n+\n+    private QueryClientState getClientCursor(UUID clientId, QueryId queryId) {\n+        QueryClientState cursor = clientCursors.get(queryId);\n+\n+        if (cursor == null || (clientId != null && !cursor.getClientId().equals(clientId))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMDI5Mg=="}, "originalCommit": {"oid": "11c7fc8b345b0ff9de7ee27ff56bab1f54c4679f"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY2ODE5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTowOTowNFrOGvIe_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTowOTowNFrOGvIe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3NTI2MQ==", "bodyText": "Javadoc of UUID.toString() specifies that the result is always 36 chars, so we could just split there. But UUID.fromString doesn't assume that, so I don't know. The below code is safe in this regard and doesn't deal with regexes.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] parts = input.split(\"_\");\n          \n          \n            \n            \n          \n          \n            \n                    if (parts.length != 2) {\n          \n          \n            \n                        throw new IllegalArgumentException(\"Query ID is malformed: \" + input);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        UUID memberId = UUID.fromString(parts[0]);\n          \n          \n            \n                        UUID localId = UUID.fromString(parts[1]);\n          \n          \n            \n                    int underscorePos = input.indexOf(\"_\");\n          \n          \n            \n            \n          \n          \n            \n                    if (underscorePos < 0) {\n          \n          \n            \n                        throw new IllegalArgumentException(\"Query ID is malformed: \" + input);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        UUID memberId = UUID.fromString(input.substring(0, underscorePos));\n          \n          \n            \n                        UUID localId = UUID.fromString(input.substring(underscorePos + 1);", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r452075261", "createdAt": "2020-07-09T09:09:04Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/QueryId.java", "diffHunk": "@@ -58,22 +58,72 @@ public QueryId() {\n      * @return Query ID.\n      */\n     public static QueryId create(UUID memberId) {\n-        UUID qryId = UuidUtil.newUnsecureUUID();\n+        UUID localId = UuidUtil.newUnsecureUUID();\n \n         return new QueryId(\n             memberId.getMostSignificantBits(),\n             memberId.getLeastSignificantBits(),\n-            qryId.getMostSignificantBits(),\n-            qryId.getLeastSignificantBits()\n+            localId.getMostSignificantBits(),\n+            localId.getLeastSignificantBits()\n         );\n     }\n \n+    public static QueryId parse(String input) {\n+        assert input != null;\n+\n+        String[] parts = input.split(\"_\");\n+\n+        if (parts.length != 2) {\n+            throw new IllegalArgumentException(\"Query ID is malformed: \" + input);\n+        }\n+\n+        try {\n+            UUID memberId = UUID.fromString(parts[0]);\n+            UUID localId = UUID.fromString(parts[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dc4fac9bb52b09dd09eb4866760dd033ec97d81"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzMxMjg4OnYy", "diffSide": "RIGHT", "path": "docs/design/sql/05-client-support.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyNjozMVrOG2KbWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzozODoyOFrOG2K6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0NzEyOQ==", "bodyText": "Can you update this doc?", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r459447129", "createdAt": "2020-07-23T13:26:31Z", "author": {"login": "asimarslan"}, "path": "docs/design/sql/05-client-support.md", "diffHunk": "@@ -0,0 +1,164 @@\n+05-client-support.md\n+\n+# SQL Client Support\n+\n+## Overview\n+\n+This document describes the design of the client protocol and the corresponding server-side implementation.    \n+\n+The rest of this document is organized as follows. In section 1 we describe the requirements to the implementation. In \n+section 2 we describe the protocol design and implementation concerns. In section 3 we summarize the limitations of the current\n+implementation.\n+\n+## 1 Requirements\n+\n+### 1.1 Pagination\n+\n+The result set might be large enough so that it doesn't fit to client's memory. \n+\n+Therefore, data should be returned to the client in pages.\n+\n+### 1.2 Message Routing\n+\n+The Hazelcast Mustang engine is a distributed SQL query engine. When a query is submitted for execution, the engine splits\n+it into several fragments. The fragments are executed on cluster members. \n+\n+Members executing one or more fragments of the given query are called **participants**. The participant that started execution \n+of the query is called **initiator**. Participants exchange data with each other. On the final execution stage participants send\n+data to the initiator to build the final result set. Only the initiator can return the final result set. \n+\n+Therefore, the implementation should be able to route all requests related to the given query to the query initiator. \n+\n+### 1.3 Lite Members\n+\n+At the moment lite members cannot start queries. I.e. a lite member can never be a query initiator. Note that this limitation\n+is different from other Hazelcast subsystems. Normally, if the operation cannot be executed on the lite member, it is handed \n+over to the normal member transparently. This is not the case for the SQL purely due to time constraints: we do no have enough\n+time to implement it in 4.1. This limitation will be removed in future versions.\n+\n+Therefore, the client should never route query execute requests to the lite members in the 4.1 release. \n+\n+### 1.4 Resource Cleanup\n+\n+When a query is started on the initiator, certain amount of system resources are allocated. The resources are released either\n+when all rows are consumed by the user, or when the explicit `close` command is invoked by the user.\n+\n+Therefore, the implementation must support a distinct `close` command. Also, the implementation must release the resources when\n+the client disconnects.\n+\n+## 2 Protocol\n+\n+The protocol contains three commands: `execute`, `fetch`, and `close`.\n+\n+### 2.1 Common Entities\n+\n+The protocol contains the following common entities that are used across different commands:\n+- **Query ID** - an opaque query identifier of type `String` that is used to locate the server-side cursor on the member", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fda547ad5fcb4aea6ec70028934cbd9cc053a25"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1NTE2MA==", "bodyText": "Updated the document (see the last two commits)", "url": "https://github.com/hazelcast/hazelcast/pull/17174#discussion_r459455160", "createdAt": "2020-07-23T13:38:28Z", "author": {"login": "devozerov"}, "path": "docs/design/sql/05-client-support.md", "diffHunk": "@@ -0,0 +1,164 @@\n+05-client-support.md\n+\n+# SQL Client Support\n+\n+## Overview\n+\n+This document describes the design of the client protocol and the corresponding server-side implementation.    \n+\n+The rest of this document is organized as follows. In section 1 we describe the requirements to the implementation. In \n+section 2 we describe the protocol design and implementation concerns. In section 3 we summarize the limitations of the current\n+implementation.\n+\n+## 1 Requirements\n+\n+### 1.1 Pagination\n+\n+The result set might be large enough so that it doesn't fit to client's memory. \n+\n+Therefore, data should be returned to the client in pages.\n+\n+### 1.2 Message Routing\n+\n+The Hazelcast Mustang engine is a distributed SQL query engine. When a query is submitted for execution, the engine splits\n+it into several fragments. The fragments are executed on cluster members. \n+\n+Members executing one or more fragments of the given query are called **participants**. The participant that started execution \n+of the query is called **initiator**. Participants exchange data with each other. On the final execution stage participants send\n+data to the initiator to build the final result set. Only the initiator can return the final result set. \n+\n+Therefore, the implementation should be able to route all requests related to the given query to the query initiator. \n+\n+### 1.3 Lite Members\n+\n+At the moment lite members cannot start queries. I.e. a lite member can never be a query initiator. Note that this limitation\n+is different from other Hazelcast subsystems. Normally, if the operation cannot be executed on the lite member, it is handed \n+over to the normal member transparently. This is not the case for the SQL purely due to time constraints: we do no have enough\n+time to implement it in 4.1. This limitation will be removed in future versions.\n+\n+Therefore, the client should never route query execute requests to the lite members in the 4.1 release. \n+\n+### 1.4 Resource Cleanup\n+\n+When a query is started on the initiator, certain amount of system resources are allocated. The resources are released either\n+when all rows are consumed by the user, or when the explicit `close` command is invoked by the user.\n+\n+Therefore, the implementation must support a distinct `close` command. Also, the implementation must release the resources when\n+the client disconnects.\n+\n+## 2 Protocol\n+\n+The protocol contains three commands: `execute`, `fetch`, and `close`.\n+\n+### 2.1 Common Entities\n+\n+The protocol contains the following common entities that are used across different commands:\n+- **Query ID** - an opaque query identifier of type `String` that is used to locate the server-side cursor on the member", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0NzEyOQ=="}, "originalCommit": {"oid": "3fda547ad5fcb4aea6ec70028934cbd9cc053a25"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 429, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}