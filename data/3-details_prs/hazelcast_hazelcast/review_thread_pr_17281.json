{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MzA1NjY2", "number": 17281, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1MToxOFrOET8BVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1OToxOVrOET8HDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzQxNzgzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1MToxOFrOG58x4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1MToxOFrOG58x4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxNzgyNQ==", "bodyText": "Looks like this should be changed to hazelcastInstance.getSql().query(\"UPDATE ...\").updatedCount()", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r463417825", "createdAt": "2020-07-31T05:51:18Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -35,13 +41,32 @@\n  * }\n  * </pre>\n  *\n- * @see #iterator()\n- * @see #close()\n+ * <p>\n+ * <h4>Usage for update count</h4>\n+ *\n+ * <pre>\n+ *     long updated = hazelcastInstance.getSql().query(\"UPDATE ...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzQyMDA1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1MjoyOVrOG58zKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoyMjoxNFrOG6uwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxODE1NQ==", "bodyText": "There is an inconsistency in naming: updatedCount, but is isUpdateCount.\nShould we rename this method to JDBC-like updateCount?", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r463418155", "createdAt": "2020-07-31T05:52:29Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update\n+     *     count (i.e. when {@link #isUpdateCount()} returns {@code false})\n+     */\n+    long updatedCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNjU3Nw==", "bodyText": "agree", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r464236577", "createdAt": "2020-08-03T07:22:14Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update\n+     *     count (i.e. when {@link #isUpdateCount()} returns {@code false})\n+     */\n+    long updatedCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxODE1NQ=="}, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzQyNjQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1NTo1N1rOG5821w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjowODo1NFrOG63BoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTA5NQ==", "bodyText": "In JDBC, if the result is a result set, then -1 is returned. But we throw an exception.\nNot advocating for any of these approaches, my question is - do we have any specific reason to prefer one over the other? One minor advantage of the -1 marker, is that we may use it instead of isUpdateCount to check for result type.", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r463419095", "createdAt": "2020-07-31T05:55:57Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MDA1Ng==", "bodyText": "I think it's the symmetry between iterator() and updateCount() - they throw if called for an incorrect result type. Also my point is that one should know what should be the result type for a particular query. We even advocate for not calling isUpdateCount but directly calling the method to get the particular type of result. isUpdateCount is meant for a generic query UI.", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r464240056", "createdAt": "2020-08-03T07:30:25Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTA5NQ=="}, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzE4NQ==", "bodyText": "Also in Jet we won't implement update count for DML. In that case the -1 return value will mean that the update count is unknown, not that there are rows. We would need two return values, e.g.:\n\n-1: unknown update count\n-2: not a result with update count, but with rows", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r464243185", "createdAt": "2020-08-03T07:37:38Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTA5NQ=="}, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MjEyOA==", "bodyText": "Makes sense, thank you", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r464372128", "createdAt": "2020-08-03T12:08:54Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -53,17 +78,28 @@\n      * The iterator may be requested only once.\n      *\n      * @return iterator\n-     * @throws IllegalStateException if the method is invoked more than once\n+     * @throws IllegalStateException if the method is invoked more than once or\n+     *    if this result doesn't have rows (i.e. when {@link #isUpdateCount()}\n+     *    returns {@code true})\n      * @throws SqlException in case of an SQL-related error condition\n      */\n     @Nonnull\n     @Override\n     Iterator<SqlRow> iterator();\n \n     /**\n-     * Release the resources associated with the query result.\n+     * Returns the number of rows updated by the execution.\n+     *\n+     * @throws IllegalStateException if this result doesn't represent an update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTA5NQ=="}, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzQzMTI3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1ODozN1rOG585uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzo0MTozNVrOG6vQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTgzNQ==", "bodyText": "A minor thought to consider - we may have a method to check for \"update count\", like now, or we may have a method to check for result set, e.g. hasResultSet. Which one is better?", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r463419835", "createdAt": "2020-07-31T05:58:37Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -35,13 +41,32 @@\n  * }\n  * </pre>\n  *\n- * @see #iterator()\n- * @see #close()\n+ * <p>\n+ * <h4>Usage for update count</h4>\n+ *\n+ * <pre>\n+ *     long updated = hazelcastInstance.getSql().query(\"UPDATE ...\");\n+ * </pre>\n+ *\n+ * You don't need to call {@link #close()} in this case.\n  */\n public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+\n+    /**\n+     * If this result represents a row set, this method returns {@code false}.\n+     * If this result represents an update count (such as for a DML query), it\n+     * returns {@code true}.\n+     *\n+     * @return {@code false} for a rows result and {@code true} for an update\n+     *     count result\n+     */\n+    boolean isUpdateCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0NDk3MA==", "bodyText": "I liked the isUpdateCount better, but would find hasResultSet just as fine...", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r464244970", "createdAt": "2020-08-03T07:41:35Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/SqlResult.java", "diffHunk": "@@ -35,13 +41,32 @@\n  * }\n  * </pre>\n  *\n- * @see #iterator()\n- * @see #close()\n+ * <p>\n+ * <h4>Usage for update count</h4>\n+ *\n+ * <pre>\n+ *     long updated = hazelcastInstance.getSql().query(\"UPDATE ...\");\n+ * </pre>\n+ *\n+ * You don't need to call {@link #close()} in this case.\n  */\n public interface SqlResult extends Iterable<SqlRow>, AutoCloseable {\n+\n+    /**\n+     * If this result represents a row set, this method returns {@code false}.\n+     * If this result represents an update count (such as for a DML query), it\n+     * returns {@code true}.\n+     *\n+     * @return {@code false} for a rows result and {@code true} for an update\n+     *     count result\n+     */\n+    boolean isUpdateCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTgzNQ=="}, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzQzMjQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/SqlExecuteCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1OToxOVrOG586gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1OToxOVrOG586gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMDAzMw==", "bodyText": "On the protocol level, we may encode the missing update count as -1 and thus avoid this flag.", "url": "https://github.com/hazelcast/hazelcast/pull/17281#discussion_r463420033", "createdAt": "2020-07-31T05:59:19Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/SqlExecuteCodec.java", "diffHunk": "@@ -103,6 +105,10 @@ public static ClientMessage encodeRequest(java.lang.String sql, java.util.Collec\n \n     @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({\"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\"})\n     public static class ResponseParameters {\n+        /**\n+         * True, if this result is an update count, false, if it contains rows.\n+         */\n+        public boolean isUpdateCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b82c6c1bf045600c8ed5a1f11b4a8adf8aef056"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 379, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}