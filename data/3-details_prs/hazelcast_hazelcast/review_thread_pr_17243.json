{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjQ0NDU2", "number": 17243, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoyNlrOEQEwWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzo1NFrOEQExaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkwNTg0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoyNlrOG0Cnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo1MTowN1rOG0qdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg==", "bodyText": "Knowing which joiner is being used is pretty useful.", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222042", "createdAt": "2020-07-20T09:33:26Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "diffHunk": "@@ -817,17 +817,25 @@ Joiner createJoiner() {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            logger.info(\"Activating Discovery SPI Joiner\");\n+            if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxOTQyMQ==", "bodyText": "Yeah, I thought that this one might be controversial. Maybe we could just adjust the logging messages to be actually more user friendly? Right now it looks like a regular debugging message. As a new user, I don't know what the Joiner is (I shouldn't know, it's internal) and also I might better understand other word than \"Activating\", sounds like a robot.\nHow about I would change the log lines to be more user friendly like:\nUsing Discovery API\nUsing multicast discovery\nUsing TCP/IP discovery\nUsing AWS discovery\n\nand keep it on info level?", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457319421", "createdAt": "2020-07-20T12:01:46Z", "author": {"login": "Holmistr"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "diffHunk": "@@ -817,17 +817,25 @@ Joiner createJoiner() {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            logger.info(\"Activating Discovery SPI Joiner\");\n+            if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjgwNQ==", "bodyText": "Fine with me. Can't we get the discovery interface have a proper toString? So that it also works for custom discovery mechanisms.", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457526805", "createdAt": "2020-07-20T16:08:22Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "diffHunk": "@@ -817,17 +817,25 @@ Joiner createJoiner() {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            logger.info(\"Activating Discovery SPI Joiner\");\n+            if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3NDcxMw==", "bodyText": "I have updated the PR. I didn't go with the road of providing toString method as this is going a bit deeper and I have no idea about the consequences.", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457874713", "createdAt": "2020-07-21T06:51:07Z", "author": {"login": "Holmistr"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "diffHunk": "@@ -817,17 +817,25 @@ Joiner createJoiner() {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            logger.info(\"Activating Discovery SPI Joiner\");\n+            if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkwODE1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackpressureRegulator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzo1MFrOG0Co0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzo1MFrOG0Co0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjM1NA==", "bodyText": "ok", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222354", "createdAt": "2020-07-20T09:33:50Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackpressureRegulator.java", "diffHunk": "@@ -100,7 +100,9 @@\n                                 OPERATION_BACKUP_TIMEOUT_MILLIS.getName()));\n             }\n         } else {\n-            logger.info(\"Backpressure is disabled\");\n+            if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkwODU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzo1NFrOG0CpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzo1NFrOG0CpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjQwMA==", "bodyText": "ok", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222400", "createdAt": "2020-07-20T09:33:54Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.java", "diffHunk": "@@ -514,8 +514,10 @@ public int toPartitionThreadIndex(int partitionId) {\n \n     @Override\n     public void start() {\n-        logger.info(\"Starting \" + partitionThreads.length + \" partition threads and \"\n-                + genericThreads.length + \" generic threads (\" + priorityThreadCount + \" dedicated for priority tasks)\");\n+        if (logger.isFineEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7754c74b5cd43ca794af1a55121982dd808dcf34"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}