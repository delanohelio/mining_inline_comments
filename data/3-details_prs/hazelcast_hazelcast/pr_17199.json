{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODk0ODQy", "number": 17199, "title": "Fix exception wrapping for member/client comm", "bodyText": "Exceptions that comes from remote are wrapped to HazelcastEx\nif they are not RuntimeExceptions. That prevents clients to\nact accordingly to exceptions. With this pr, we are removing\nthe wrapping.\nfixes #17022\nA second NullPointerException is found and fixed while investigating\nthis issue. It is found in ExecutorServiceSubmitToAddressMessageTask\n(cherry picked from commit 20526dc)\nbackport of #17198", "createdAt": "2020-07-09T14:24:37Z", "url": "https://github.com/hazelcast/hazelcast/pull/17199", "merged": true, "mergeCommit": {"oid": "725467e6a925335dfd3f711c84ace48f7dcec14a"}, "closed": true, "closedAt": "2020-07-13T15:15:46Z", "author": {"login": "sancar"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczP1rzAH2gAyNDQ2ODk0ODQyOjMyNzkxMzFmNDdkNTQ1MTdkYjhjNDg5NTBkMWY3ZGRkYjVkZDVkODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0g-rXAFqTQ0NzIyMzMyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3279131f47d54517db8c48950d1f7dddb5dd5d80", "committedDate": "2020-07-09T14:23:26Z", "message": "Fix exception wrapping for member/client comm\n\nExceptions that comes from remote are wrapped to HazelcastEx\nif they are not RuntimeExceptions. That prevents clients to\nact accordingly to exceptions. With this pr, we are removing\nthe wrapping.\n\nfixes https://github.com/hazelcast/hazelcast/issues/17022\n\nA second NullPointerException is found and fixed while investigating\nthis issue. It is found in ExecutorServiceSubmitToAddressMessageTask\n\n(cherry picked from commit 20526dcc0273cc851329f2c2aea93fef8918cd50)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTkzODYz", "url": "https://github.com/hazelcast/hazelcast/pull/17199#pullrequestreview-446993863", "createdAt": "2020-07-13T05:42:53Z", "commit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTk4MjEy", "url": "https://github.com/hazelcast/hazelcast/pull/17199#pullrequestreview-446998212", "createdAt": "2020-07-13T05:56:54Z", "commit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTo1Njo1NVrOGwcYGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTo1Njo1NVrOGwcYGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0OTc1Mw==", "bodyText": "Broadening RuntimeExceptionFactory#create to return Throwable may mislead future implementations. Instead we can keep its signature as RuntimeException create(Throwable t, String m) and change the new usage in peelAsNeeded to do a sneakyThrow(throwable). WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453449753", "createdAt": "2020-07-13T05:56:55Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -44,7 +44,7 @@\n      * Interface used by rethrow/peel to wrap the peeled exception\n      */\n     public interface RuntimeExceptionFactory {\n-        RuntimeException create(Throwable throwable, String message);\n+        Throwable create(Throwable throwable, String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0e99ba8a8b780bf3b1cc2f279a747a0900727e1", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d0e99ba8a8b780bf3b1cc2f279a747a0900727e1", "committedDate": "2020-07-13T10:02:46Z", "message": "Replaced RuntimeExceptionFactory with BiFunction\n\n(cherry picked from commit 3e32d1048984bf33dfbd1e2fc02bc301b5571d9b)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTE1Mjg4", "url": "https://github.com/hazelcast/hazelcast/pull/17199#pullrequestreview-447115288", "createdAt": "2020-07-13T10:10:00Z", "commit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMDowMVrOGwiCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMDozNVrOGwiD-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjU4Mw==", "bodyText": "this increment is only server side, right? is it serialized back to the client and the client sends it back to the server so that the second time it will be incremented to 2?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453542583", "createdAt": "2020-07-13T10:10:01Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjkwNQ==", "bodyText": "did you want to shutdown member1 in this test?", "url": "https://github.com/hazelcast/hazelcast/pull/17199#discussion_r453542905", "createdAt": "2020-07-13T10:10:35Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceExceptionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.executor;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.cluster.Member;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IExecutorService;\n+import com.hazelcast.spi.exception.RetryableIOException;\n+import com.hazelcast.spi.exception.TargetNotMemberException;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientExecutorServiceExceptionTest {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+\n+    @Test(expected = TargetNotMemberException.class)\n+    public void testSubmitToNonMember() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+\n+        instance2.shutdown();\n+\n+        try {\n+            executorService.submitToMember((Serializable & Callable<String>) () -> \"test\", member2).get();\n+        } catch (Exception e) {\n+            throw e.getCause();\n+        }\n+    }\n+\n+    public static class SecondTimeSuccessCallable implements Serializable, Callable {\n+        private static AtomicInteger runCount = new AtomicInteger();\n+\n+\n+        @Override\n+        public Object call() throws Exception {\n+            if (runCount.incrementAndGet() == 1) {\n+                throw new RetryableIOException();\n+            }\n+            return \"SUCCESS\";\n+        }\n+    }\n+\n+    @Test\n+    public void testRetriableIOException() throws Throwable {\n+        hazelcastFactory.newHazelcastInstance();\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getNetworkConfig().setSmartRouting(false);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+        IExecutorService executorService = client.getExecutorService(\"test\");\n+\n+        HazelcastInstance instance2 = hazelcastFactory.newHazelcastInstance();\n+        Member member2 = instance2.getCluster().getLocalMember();\n+        assertEquals(\"SUCCESS\", executorService.submitToMember(new SecondTimeSuccessCallable(), member2).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3279131f47d54517db8c48950d1f7dddb5dd5d80"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9616ce8c577b4b7d98abb9981450537320b6ad", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0c9616ce8c577b4b7d98abb9981450537320b6ad", "committedDate": "2020-07-13T11:16:25Z", "message": "compile fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec83f104715345e90b447e04488ad4c0cb9767b", "author": {"user": {"login": "sancar", "name": "sancar"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fec83f104715345e90b447e04488ad4c0cb9767b", "committedDate": "2020-07-13T11:24:44Z", "message": "simplify test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTk1MDYw", "url": "https://github.com/hazelcast/hazelcast/pull/17199#pullrequestreview-447195060", "createdAt": "2020-07-13T12:15:54Z", "commit": {"oid": "fec83f104715345e90b447e04488ad4c0cb9767b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjIzMzI1", "url": "https://github.com/hazelcast/hazelcast/pull/17199#pullrequestreview-447223325", "createdAt": "2020-07-13T12:55:34Z", "commit": {"oid": "fec83f104715345e90b447e04488ad4c0cb9767b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3553, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}