{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTgyMzI5", "number": 17282, "title": "Support for multiple pmem directories in config", "bodyText": "This change introduces advanced persistent memory configuration in the following form:\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\nYAML configuration follows the same structure.\nBesides the configuration support, the following config validations are added:\n\nPersistent memory directories must be unique\nNUMA node defined for the persistent memory directories must be unique (if set)\nNUMA node must be defined either on all or none of the directories\nTherefore, mixing <persistent-memory-directory> and <persistent-memory> is allowed only if no NUMA nodes are set.\n\nBesides this change, native-memory configuration is added to the Spring configuration for clients that was missing entirely.\nEE PR: hazelcast/hazelcast-enterprise#3703\nCloses: #17322", "createdAt": "2020-07-30T20:36:27Z", "url": "https://github.com/hazelcast/hazelcast/pull/17282", "merged": true, "mergeCommit": {"oid": "15b0270403dc992b94fe9fd674c9fe969f522a0d"}, "closed": true, "closedAt": "2020-08-19T19:09:46Z", "author": {"login": "blazember"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8rJaMAFqTQ2MzYzOTM2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAdsFXAFqTQ3MDU5Njc3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjM5MzY2", "url": "https://github.com/hazelcast/hazelcast/pull/17282#pullrequestreview-463639366", "createdAt": "2020-08-07T21:17:44Z", "commit": {"oid": "c6242b29b7a0d40d93bf3588cd48e7a2f3a578b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxNzo0NFrOG9oEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxNzo0NFrOG9oEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3Mjc2Nw==", "bodyText": "Should be: maxOccurs=\"1\" both for metrics and native-memory.", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r467272767", "createdAt": "2020-08-07T21:17:44Z", "author": {"login": "blazember"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -1574,6 +1574,7 @@\n                     <xs:element name=\"reliable-topic\" type=\"client-reliable-topic\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n                     <xs:element name=\"metrics\" type=\"client-metrics\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n                     <xs:element name=\"instance-tracking\" type=\"instance-tracking\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+                    <xs:element name=\"native-memory\" type=\"native-memory\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6242b29b7a0d40d93bf3588cd48e7a2f3a578b4"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6242b29b7a0d40d93bf3588cd48e7a2f3a578b4", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c6242b29b7a0d40d93bf3588cd48e7a2f3a578b4", "committedDate": "2020-07-30T15:10:09Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}, "afterCommit": {"oid": "64392ddf11773a7e90c331927dd7b8723b009a22", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/64392ddf11773a7e90c331927dd7b8723b009a22", "committedDate": "2020-08-10T14:31:43Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64392ddf11773a7e90c331927dd7b8723b009a22", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/64392ddf11773a7e90c331927dd7b8723b009a22", "committedDate": "2020-08-10T14:31:43Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}, "afterCommit": {"oid": "e2897f37a211a5c68b6e9045aaea13e1675c3d18", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e2897f37a211a5c68b6e9045aaea13e1675c3d18", "committedDate": "2020-08-10T15:08:59Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2897f37a211a5c68b6e9045aaea13e1675c3d18", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e2897f37a211a5c68b6e9045aaea13e1675c3d18", "committedDate": "2020-08-10T15:08:59Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}, "afterCommit": {"oid": "fb3655712b3b9ecc69df96fea6932388927388af", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fb3655712b3b9ecc69df96fea6932388927388af", "committedDate": "2020-08-10T15:15:55Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NDAwNzc0", "url": "https://github.com/hazelcast/hazelcast/pull/17282#pullrequestreview-468400774", "createdAt": "2020-08-17T12:01:25Z", "commit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjowMToyNVrOHBl4Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo1OTo0MlrOHBntCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzMTE3NA==", "bodyText": "Can you sprinkle some nullable and non-null annotations on the method parameters and return values?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471431174", "createdAt": "2020-08-17T12:01:25Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for persistent memory devices (e.g. Intel Optane).\n+ */\n+public class PersistentMemoryConfig {\n+    /**\n+     * Paths to the non-volatile memory directory.\n+     */\n+    private List<PersistentMemoryDirectoryConfig> directoryConfigs = new LinkedList<>();\n+\n+    public PersistentMemoryConfig() {\n+    }\n+\n+    /**\n+     * Constructs an instance with copying the fields of the provided\n+     * {@link PersistentMemoryConfig}.\n+     *\n+     * @param persistentMemoryConfig The configuration to copy\n+     */\n+    public PersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n+        persistentMemoryConfig.directoryConfigs\n+                .forEach(directoryConfig -> addDirectoryConfig(new PersistentMemoryDirectoryConfig(directoryConfig)));\n+    }\n+\n+    /**\n+     * Returns the persistent memory directory configurations to be used\n+     * to store memory structures allocated by native memory manager.\n+     * <p>\n+     * By default there are no configuration is set indicating that\n+     * volatile RAM is being used.\n+     */\n+    public List<PersistentMemoryDirectoryConfig> getDirectoryConfigs() {\n+        return directoryConfigs;\n+    }\n+\n+    /**\n+     * Sets the persistent memory directory configuration to the set of\n+     * directories provided in the {@code directoryConfigs} argument.\n+     * <p/>\n+     * If the specified directories are not unique either in the directories\n+     * themselves or in the NUMA nodes specified for them,\n+     * {@link InvalidConfigurationException} is thrown. Setting the NUMA\n+     * node on the subset of the configured directories while leaving\n+     * not set on others also results in {@link InvalidConfigurationException}.\n+     *\n+     * @param directoryConfigs The persistent memory directories to set\n+     * @return this {@link PersistentMemoryConfig} instance\n+     * @throws InvalidConfigurationException If the configured directories\n+     *                                       violate consistency or\n+     *                                       uniqueness checks.\n+     */\n+    public PersistentMemoryConfig setDirectoryConfigs(List<PersistentMemoryDirectoryConfig> directoryConfigs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNDkwNw==", "bodyText": "Additionally, here and in the constructor you can write that setting it to -1 disables it.", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471434907", "createdAt": "2020-08-17T12:09:28Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    /**\n+     * Creates an instance with the {@code directory} and NUMA node specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @param numaNode  The NUMA node that the persistent memory mounted\n+     *                  to the given directory is attached to\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory, int numaNode) {\n+        this.directory = directory;\n+        this.numaNode = numaNode;\n+    }\n+\n+    /**\n+     * Constructs an instance by copying the provided {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directoryConfig The configuration to copy\n+     */\n+    public PersistentMemoryDirectoryConfig(PersistentMemoryDirectoryConfig directoryConfig) {\n+        this.directory = directoryConfig.directory;\n+        this.numaNode = directoryConfig.numaNode;\n+    }\n+\n+    /**\n+     * Returns the directory of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @return the directory\n+     */\n+    public String getDirectory() {\n+        return directory;\n+    }\n+\n+    /**\n+     * Returns the {@code directory} of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directory the directory to set\n+     */\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    /**\n+     * Returns the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @return the NUMA node of the persistent memory\n+     */\n+    public int getNumaNode() {\n+        return numaNode;\n+    }\n+\n+    /**\n+     * Sets the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @param numaNode the NUMA node to set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjExNw==", "bodyText": "Minor: nullability annotations", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471436117", "createdAt": "2020-08-17T12:11:59Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -222,24 +224,62 @@ public NativeMemoryConfig setMetadataSpacePercentage(float metadataSpacePercenta\n     }\n \n     /**\n-     * Returns the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native\n-     * memory manager.\n-     * <p>\n-     * Default value is {@code null}. It indicates that volatile RAM is being used.\n-     * {@code null}\n+     * Returns the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @return the persistent memory configuration\n      */\n+    public PersistentMemoryConfig getPersistentMemoryConfig() {\n+        return persistentMemoryConfig;\n+    }\n+\n+    /**\n+     * Sets the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @param persistentMemoryConfig The persistent memory configuration to use\n+     */\n+    public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjg1OA==", "bodyText": "Should we should also add @Deprecated here?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471436858", "createdAt": "2020-08-17T12:13:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -222,24 +224,62 @@ public NativeMemoryConfig setMetadataSpacePercentage(float metadataSpacePercenta\n     }\n \n     /**\n-     * Returns the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native\n-     * memory manager.\n-     * <p>\n-     * Default value is {@code null}. It indicates that volatile RAM is being used.\n-     * {@code null}\n+     * Returns the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @return the persistent memory configuration\n      */\n+    public PersistentMemoryConfig getPersistentMemoryConfig() {\n+        return persistentMemoryConfig;\n+    }\n+\n+    /**\n+     * Sets the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @param persistentMemoryConfig The persistent memory configuration to use\n+     */\n+    public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n+        this.persistentMemoryConfig = requireNonNull(persistentMemoryConfig);\n+    }\n+\n+    /**\n+     * Returns the persistent memory directory (e.g. Intel Optane) to be\n+     * used to store memory structures allocated by native memory manager.\n+     * If there are multiple persistent memory directories are defined in\n+     * {@link #persistentMemoryConfig}, an {@link IllegalStateException}\n+     * is thrown.\n+     *\n+     * @see PersistentMemoryConfig#getDirectoryConfigs()\n+     * @deprecated Since 4.1 multiple persistent memory directories are\n+     * supported. Please use {@link PersistentMemoryConfig#getDirectoryConfigs()}\n+     * instead.\n+     */\n+    @Deprecated\n     public String getPersistentMemoryDirectory() {\n-        return persistentMemoryDirectory;\n+        List<PersistentMemoryDirectoryConfig> directoryConfigs = persistentMemoryConfig.getDirectoryConfigs();\n+        int directoriesDefined = directoryConfigs.size();\n+        if (directoriesDefined > 1) {\n+            throw new HazelcastException(\"There are multiple persistent memory directories configured. Please use \"\n+                    + \"PersistentMemoryConfig.getDirectoryConfigs()!\");\n+        }\n+\n+        return directoriesDefined == 1 ? directoryConfigs.get(0).getDirectory() : null;\n     }\n \n     /**\n-     * Sets the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native memory\n-     * manager.\n+     * Sets the persistent memory directory (e.g. Intel Optane) to be used\n+     * to store memory structures allocated by native memory manager. If\n+     * the {@link #persistentMemoryConfig} already contains directory\n+     * definition, it is overridden with the provided {@code directory}.\n+     *\n      * @param directory the persistent memory directory\n      * @return this {@link NativeMemoryConfig} instance\n+     * @see #getPersistentMemoryConfig()\n+     * @see PersistentMemoryConfig#addDirectoryConfig(PersistentMemoryDirectoryConfig)\n      */\n     public NativeMemoryConfig setPersistentMemoryDirectory(String directory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODU4Nw==", "bodyText": "I just realized we're missing a read-only version of NativeMemoryConfig but other top-level configs have this issue as well.", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471438587", "createdAt": "2020-08-17T12:17:10Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -16,13 +16,18 @@\n \n package com.hazelcast.config;\n \n+import com.hazelcast.core.HazelcastException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzOTYwOQ==", "bodyText": "Can you copy-paste other documentation like it needing to be unique, other restrictions and -1 numa-node disabling numa-awareness? Same in client XSD.", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471439609", "createdAt": "2020-08-17T12:19:11Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/resources/hazelcast-config-4.1.xsd", "diffHunk": "@@ -3149,6 +3150,49 @@\n         </xs:restriction>\n     </xs:simpleType>\n \n+    <xs:complexType name=\"persistent-memory\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                Configuration for persistent memory (e.g. Intel Optane) devices.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"directories\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        List of directories where the persistent memory\n+                        is mounted to.\n+                    </xs:documentation>\n+                </xs:annotation>\n+                <xs:complexType>\n+                    <xs:choice maxOccurs=\"unbounded\">\n+                        <xs:element name=\"directory\" type=\"persistent-memory-directory\"/>\n+                    </xs:choice>\n+                </xs:complexType>\n+            </xs:element>\n+        </xs:all>\n+    </xs:complexType>\n+\n+    <xs:complexType name=\"persistent-memory-directory\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                The directory where persistent memory is mounted to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MjE0OA==", "bodyText": "Can the directory be empty?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471452148", "createdAt": "2020-08-17T12:43:48Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory) {\n+        this.directory = directory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTUyNA==", "bodyText": "Are we missing the numa node id parsing here?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471455524", "createdAt": "2020-08-17T12:50:02Z", "author": {"login": "mmedenjak"}, "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "diffHunk": "@@ -514,6 +521,68 @@ protected BeanDefinition getPreloaderConfig(Node node) {\n             return nearCachePreloaderConfigBuilder.getBeanDefinition();\n         }\n \n+        protected void handleNativeMemory(Node node) {\n+            BeanDefinitionBuilder nativeMemoryConfigBuilder = createBeanBuilder(NativeMemoryConfig.class);\n+            AbstractBeanDefinition beanDefinition = nativeMemoryConfigBuilder.getBeanDefinition();\n+            fillAttributeValues(node, nativeMemoryConfigBuilder, \"persistentMemoryDirectory\");\n+            ManagedList<BeanDefinition> directories = new ManagedList<>();\n+            BeanDefinitionBuilder pmemConfigBuilder = createBeanBuilder(PersistentMemoryConfig.class);\n+            for (Node child : childElements(node)) {\n+                String nodeName = cleanNodeName(child);\n+                if (\"size\".equals(nodeName)) {\n+                    handleMemorySizeConfig(child, nativeMemoryConfigBuilder);\n+                } else if (\"persistent-memory\".equals(nodeName)) {\n+                    handlePersistentMemoryConfig(child, directories);\n+                }\n+            }\n+\n+            Node attrPmemDirectory = node.getAttributes().getNamedItem(\"persistent-memory-directory\");\n+            if (attrPmemDirectory != null) {\n+                BeanDefinitionBuilder pmemDirConfigBuilder = createBeanBuilder(PersistentMemoryDirectoryConfig.class);\n+                pmemDirConfigBuilder.addConstructorArgValue(getTextContent(attrPmemDirectory));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MTEzMQ==", "bodyText": "I guess you can also use something like parameterizedValueType as a base or some other type with restrictions.", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471461131", "createdAt": "2020-08-17T12:59:42Z", "author": {"login": "mmedenjak"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -3836,6 +3838,47 @@\n             <xs:enumeration value=\"POOLED\"/>\n         </xs:restriction>\n     </xs:simpleType>\n+    <xs:complexType name=\"persistent-memory\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                Configuration for persistent memory (e.g. Intel Optane) devices.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:all>\n+            <xs:element name=\"directories\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        List of directories where the persistent memory\n+                        is mounted to.\n+                    </xs:documentation>\n+                </xs:annotation>\n+                <xs:complexType>\n+                    <xs:choice maxOccurs=\"unbounded\">\n+                        <xs:element name=\"directory\" type=\"persistent-memory-directory\"/>\n+                    </xs:choice>\n+                </xs:complexType>\n+            </xs:element>\n+        </xs:all>\n+    </xs:complexType>\n+    <xs:complexType name=\"persistent-memory-directory\">\n+        <xs:annotation>\n+            <xs:documentation>\n+                The directory where persistent memory is mounted to.\n+            </xs:documentation>\n+        </xs:annotation>\n+        <xs:simpleContent>\n+            <xs:extension base=\"xs:string\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTc0OTIz", "url": "https://github.com/hazelcast/hazelcast/pull/17282#pullrequestreview-469174923", "createdAt": "2020-08-18T09:59:44Z", "commit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "committedDate": "2020-08-18T14:44:07Z", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0996264520084c33d2643e2cab5163b17d406744", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0996264520084c33d2643e2cab5163b17d406744", "committedDate": "2020-08-18T14:44:07Z", "message": "Fix NativeMemoryConfigTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2650b92f1c9fbc2a625cb6802650bc7f725e08bf", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2650b92f1c9fbc2a625cb6802650bc7f725e08bf", "committedDate": "2020-08-18T14:44:07Z", "message": "Fix failing spring tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "committedDate": "2020-08-18T14:44:07Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "committedDate": "2020-08-10T20:31:39Z", "message": "Fix failing spring tests"}, "afterCommit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "author": {"user": {"login": "blazember", "name": "Zolt\u00e1n Baranyi"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "committedDate": "2020-08-18T14:44:07Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzE4MjU5", "url": "https://github.com/hazelcast/hazelcast/pull/17282#pullrequestreview-470318259", "createdAt": "2020-08-19T10:16:24Z", "commit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxNjoyNFrOHDAveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToxNTozN1rOHDCqmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxOTkyOQ==", "bodyText": "Is there a reason to change the allocator-type here?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472919929", "createdAt": "2020-08-19T10:16:24Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring-tests/src/test/resources/com/hazelcast/spring/fullConfig-applicationContext-hazelcast.xml", "diffHunk": "@@ -608,11 +607,16 @@\n                 </hz:java-serialization-filter>\n             </hz:serialization>\n \n-            <hz:native-memory enabled=\"false\" allocator-type=\"POOLED\" metadata-space-percentage=\"10.2\"\n+            <hz:native-memory enabled=\"false\" allocator-type=\"STANDARD\" metadata-space-percentage=\"10.2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzQ0Mw==", "bodyText": "What is the reason to change the metrics's maxOccurs value? Shall we fix this in other versions as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472923443", "createdAt": "2020-08-19T10:21:59Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -1573,8 +1573,9 @@\n                     <xs:element name=\"user-code-deployment\" type=\"user-code-deployment-client\" minOccurs=\"0\" maxOccurs=\"1\"/>\n                     <xs:element name=\"flake-id-generator\" type=\"client-flake-id-generator\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n                     <xs:element name=\"reliable-topic\" type=\"client-reliable-topic\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n-                    <xs:element name=\"metrics\" type=\"client-metrics\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+                    <xs:element name=\"metrics\" type=\"client-metrics\" minOccurs=\"0\" maxOccurs=\"1\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzkxMQ==", "bodyText": "Minor: do we need trailing space in the end?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472923911", "createdAt": "2020-08-19T10:22:51Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-spring/src/main/resources/hazelcast-spring-4.1.xsd", "diffHunk": "@@ -3816,7 +3818,7 @@\n         </xs:attribute>\n         <xs:attribute name=\"allocator-type\" default=\"POOLED\" type=\"memory-allocator-type\"/>\n         <xs:attribute name=\"enabled\" default=\"true\" type=\"parameterized-boolean\"/>\n-        <xs:attribute name=\"persistent-memory-directory\" type=\"xs:string\" use=\"optional\"/>\n+        <xs:attribute name=\"persistent-memory-directory\" type=\"xs:string\" use=\"optional\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MTQ1MQ==", "bodyText": "What if I set numaNode = Integer.MAX_VALUE? Do we validate anywhere the value?", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472951451", "createdAt": "2020-08-19T11:15:37Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull String directory) {\n+        this.directory = requireNonNull(directory);\n+    }\n+\n+    /**\n+     * Creates an instance with the {@code directory} and NUMA node specified.\n+     * <p/>\n+     * Note that setting {@code numaNode} to -1 on any of the configured\n+     * {@link PersistentMemoryDirectoryConfig} instances disables\n+     * NUMA-aware persistent memory allocation.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @param numaNode  The NUMA node that the persistent memory mounted\n+     *                  to the given directory is attached to.\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull String directory, int numaNode) {\n+        this.directory = requireNonNull(directory);\n+        this.numaNode = numaNode;\n+    }\n+\n+    /**\n+     * Constructs an instance by copying the provided {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directoryConfig The configuration to copy\n+     * @throws NullPointerException if {@code directoryConfig} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull PersistentMemoryDirectoryConfig directoryConfig) {\n+        this.directory = requireNonNull(directoryConfig).directory;\n+        this.numaNode = directoryConfig.numaNode;\n+    }\n+\n+    /**\n+     * Returns the directory of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @return the directory\n+     */\n+    @Nonnull\n+    public String getDirectory() {\n+        return directory;\n+    }\n+\n+    /**\n+     * Returns the {@code directory} of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directory the directory to set\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public void setDirectory(@Nonnull String directory) {\n+        this.directory = requireNonNull(directory);\n+    }\n+\n+    /**\n+     * Returns the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @return the NUMA node of the persistent memory\n+     */\n+    public int getNumaNode() {\n+        return numaNode;\n+    }\n+\n+    /**\n+     * Sets the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     * <p/>\n+     * Note that setting {@code numaNode} to -1 on any of the configured\n+     * {@link PersistentMemoryDirectoryConfig} instances disables\n+     * NUMA-aware persistent memory allocation.\n+     *\n+     * @param numaNode the NUMA node to set\n+     */\n+    public void setNumaNode(int numaNode) {\n+        this.numaNode = numaNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTk2Nzc3", "url": "https://github.com/hazelcast/hazelcast/pull/17282#pullrequestreview-470596777", "createdAt": "2020-08-19T15:52:38Z", "commit": {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3475, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}