{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTAzMjI0", "number": 17366, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyNDoxNlrOEZWIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzozNToyN1rOEZWbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDEyNTU5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyNDoxNlrOHCGq7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDo0OTozOVrOHCN91A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2ODQ5NQ==", "bodyText": "I vote for avoiding this asynchrony now. It complicates things while at the same time it is not proven that it brings anything in real use cases. The current implementation has two issues:\n\nIt lacks synchronization on close/cancel. One of the typical use cases is closing the cursor from the other thread, not the same. Even JDBC standard assumes such usage pattern\nWe do not want to have request-response flow at all. In the mid-term, we are going to rework client communication to streaming mode, when multiple responses are sent from the server to the client. This will make the current implementation obsolete. And it is likely to happen very soon.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r471968495", "createdAt": "2020-08-18T07:24:16Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -49,6 +50,7 @@\n \n     private boolean closed;\n     private boolean iteratorAccessed;\n+    private ClientInvocationFuture pendingPageFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNDE1MQ==", "bodyText": "I don't agree, but i'm removing this part. It's kind of unrelated to the main issue. Btw, the rest of the close method also isn't thread safe.\nThe benefit is: you don't initiate the round trip after you're done with the previous batch, but you initiate it as you start processing it. Clients with longer RTT and doing non-trivial processing with the rows will benefit the most. Having it will not prevent us to switch to streaming mode in the future.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472004151", "createdAt": "2020-08-18T08:24:05Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -49,6 +50,7 @@\n \n     private boolean closed;\n     private boolean iteratorAccessed;\n+    private ClientInvocationFuture pendingPageFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2ODQ5NQ=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2NjcwOQ==", "bodyText": "Yes, there definitely benefits for non-trivial processing. And perhaps it is more prevalent in streaming, than in IMDG cases.\nThe \"streaming\" client communication mode I mentioned is likely to work very differently even comparing to the current implementation in master. As the client team explained to me, the protocol is designed in a way to allow for sending chunks of data one after the other from the server without an explicit request from the client. So it is likely that the final implementation of the protocol will send just one request to the server, and then read chunks continuously with some sort of backpressure.\nIt is likely that we will implement that soon because this is a breaking change, and we cannot be in the beta forever.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472066709", "createdAt": "2020-08-18T10:08:13Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -49,6 +50,7 @@\n \n     private boolean closed;\n     private boolean iteratorAccessed;\n+    private ClientInvocationFuture pendingPageFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2ODQ5NQ=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MTgyNA==", "bodyText": "Yeah, but why not do simple improvements to the current version?...", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472071824", "createdAt": "2020-08-18T10:17:21Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -49,6 +50,7 @@\n \n     private boolean closed;\n     private boolean iteratorAccessed;\n+    private ClientInvocationFuture pendingPageFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2ODQ5NQ=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA4ODAyMA==", "bodyText": "My concern is that it is not well aligned with the planned protocol and JDBC changes, so it will increase the design and implementation burden.\nMaybe let's merge it to master as is, and prepare the PR for this change separately, and then listen for client team opinion? This way we will merge the main part, where we have a consensus, quickly.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472088020", "createdAt": "2020-08-18T10:49:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/SqlClientResult.java", "diffHunk": "@@ -49,6 +50,7 @@\n \n     private boolean closed;\n     private boolean iteratorAccessed;\n+    private ClientInvocationFuture pendingPageFuture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2ODQ5NQ=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDE0NzUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/AbstractSqlResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyOTozNFrOHCG3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODoyNzo1MVrOHCI_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MTcxOQ==", "bodyText": "Can we convert int constants to enum? This will make methods relying on these constants easier to understand and refactor.\nAlso, ResultIterator could be a top-level class.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r471971719", "createdAt": "2020-08-18T07:29:34Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/AbstractSqlResult.java", "diffHunk": "@@ -17,15 +17,51 @@\n package com.hazelcast.sql.impl;\n \n import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n \n public abstract class AbstractSqlResult implements SqlResult {\n \n     public abstract QueryId getQueryId();\n \n     public abstract void closeOnError(QueryException exception);\n \n+    @Nonnull @Override\n+    public abstract ResultIterator<SqlRow> iterator();\n+\n     @Override\n     public void close() {\n         closeOnError(QueryException.cancelledByUser());\n     }\n+\n+    public interface ResultIterator<T> extends Iterator<T> {\n+\n+        /**\n+         * A result value from {@link #hasNextImmediately()} meaning that a next\n+         * item is available immediately.\n+         */\n+        int YES = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNjUzMQ==", "bodyText": "fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472006531", "createdAt": "2020-08-18T08:27:51Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/AbstractSqlResult.java", "diffHunk": "@@ -17,15 +17,51 @@\n package com.hazelcast.sql.impl;\n \n import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.SqlRow;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Iterator;\n \n public abstract class AbstractSqlResult implements SqlResult {\n \n     public abstract QueryId getQueryId();\n \n     public abstract void closeOnError(QueryException exception);\n \n+    @Nonnull @Override\n+    public abstract ResultIterator<SqlRow> iterator();\n+\n     @Override\n     public void close() {\n         closeOnError(QueryException.cancelledByUser());\n     }\n+\n+    public interface ResultIterator<T> extends Iterator<T> {\n+\n+        /**\n+         * A result value from {@link #hasNextImmediately()} meaning that a next\n+         * item is available immediately.\n+         */\n+        int YES = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MTcxOQ=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDE1MzA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzozMDo0M1rOHCG6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODoyNjo0MVrOHCI8ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MjUyMA==", "bodyText": "Minor: a better name for this would be something like waitForFullBatch.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r471972520", "createdAt": "2020-08-18T07:30:43Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java", "diffHunk": "@@ -33,6 +33,9 @@\n     /** Iterator over produced rows. */\n     private final InternalIterator iterator = new InternalIterator();\n \n+    /** Enables {@link ResultIterator#RETRY} result from {@link ResultIterator#hasNextImmediately()} */\n+    private final boolean useMinimumLatency;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNTc3MA==", "bodyText": "fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472005770", "createdAt": "2020-08-18T08:26:41Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java", "diffHunk": "@@ -33,6 +33,9 @@\n     /** Iterator over produced rows. */\n     private final InternalIterator iterator = new InternalIterator();\n \n+    /** Enables {@link ResultIterator#RETRY} result from {@link ResultIterator#hasNextImmediately()} */\n+    private final boolean useMinimumLatency;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MjUyMA=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDE3Mjk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzozNToyN1rOHCHGHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDowODo0NVrOHCMrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3NTQ1NA==", "bodyText": "I do not quite understand how it affects IMDG. Consider that the batch is not available immediately for IMDG. Will it stop waiting for results and return a semi-filled batch back to the client?", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r471975454", "createdAt": "2020-08-18T07:35:27Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -94,24 +94,27 @@ private SqlPage fetchInternal(\n     }\n \n     private static boolean fetchPage(\n-        Iterator<SqlRow> iterator,\n+        ResultIterator<SqlRow> iterator,\n         List<List<Data>> page,\n         int cursorBufferSize,\n         InternalSerializationService serializationService\n     ) {\n-        while (iterator.hasNext()) {\n+        assert cursorBufferSize > 0;\n+\n+        if (!iterator.hasNext()) {\n+            return true;\n+        }\n+\n+        int res;\n+        do {\n             SqlRow row = iterator.next();\n             List<Data> convertedRow = convertRow(row, serializationService);\n \n             page.add(convertedRow);\n+            res = iterator.hasNextImmediately();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNjQxNw==", "bodyText": "Yes, if waitForFullBatch is false. For IMDG queries, it's always true, in this case this call will block until next item is availabye. The return value will never be RETRY.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472006417", "createdAt": "2020-08-18T08:27:41Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -94,24 +94,27 @@ private SqlPage fetchInternal(\n     }\n \n     private static boolean fetchPage(\n-        Iterator<SqlRow> iterator,\n+        ResultIterator<SqlRow> iterator,\n         List<List<Data>> page,\n         int cursorBufferSize,\n         InternalSerializationService serializationService\n     ) {\n-        while (iterator.hasNext()) {\n+        assert cursorBufferSize > 0;\n+\n+        if (!iterator.hasNext()) {\n+            return true;\n+        }\n+\n+        int res;\n+        do {\n             SqlRow row = iterator.next();\n             List<Data> convertedRow = convertRow(row, serializationService);\n \n             page.add(convertedRow);\n+            res = iterator.hasNextImmediately();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3NTQ1NA=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2Njk5MA==", "bodyText": "Got it, thanks.", "url": "https://github.com/hazelcast/hazelcast/pull/17366#discussion_r472066990", "createdAt": "2020-08-18T10:08:45Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -94,24 +94,27 @@ private SqlPage fetchInternal(\n     }\n \n     private static boolean fetchPage(\n-        Iterator<SqlRow> iterator,\n+        ResultIterator<SqlRow> iterator,\n         List<List<Data>> page,\n         int cursorBufferSize,\n         InternalSerializationService serializationService\n     ) {\n-        while (iterator.hasNext()) {\n+        assert cursorBufferSize > 0;\n+\n+        if (!iterator.hasNext()) {\n+            return true;\n+        }\n+\n+        int res;\n+        do {\n             SqlRow row = iterator.next();\n             List<Data> convertedRow = convertRow(row, serializationService);\n \n             page.add(convertedRow);\n+            res = iterator.hasNextImmediately();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3NTQ1NA=="}, "originalCommit": {"oid": "a2d8814022a43a574b16b5a80d85e5b14b334ff9"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 304, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}