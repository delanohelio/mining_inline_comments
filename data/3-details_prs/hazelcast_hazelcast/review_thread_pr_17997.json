{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTExMDI2", "number": 17997, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMDoyOVrOFIgYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMDoyOVrOFIgYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDYzNTE2OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/math/RemainderOperatorIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMDoyOVrOIKd5iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMDo0MzowOFrOIL2qhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NjUzOQ==", "bodyText": "As I understand from code the test checks when left operand is TINYINT type and the right is one of \"everything else\" types.\nI'd suggest either rename testTinyint into testLeftTinyint_rightOtherTypes or split into separate test methods per each case like.\n\ntestTinyintAndNull\ntestTinyintAndTinyint\n... and so on.\nsecond approach adds readability of what tests check but number of methods will blow", "url": "https://github.com/hazelcast/hazelcast/pull/17997#discussion_r547846539", "createdAt": "2020-12-23T09:20:29Z", "author": {"login": "alex-dukhno"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/math/RemainderOperatorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.math;\n+\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import static com.hazelcast.sql.SqlColumnType.BIGINT;\n+import static com.hazelcast.sql.SqlColumnType.BOOLEAN;\n+import static com.hazelcast.sql.SqlColumnType.DATE;\n+import static com.hazelcast.sql.SqlColumnType.DECIMAL;\n+import static com.hazelcast.sql.SqlColumnType.DOUBLE;\n+import static com.hazelcast.sql.SqlColumnType.INTEGER;\n+import static com.hazelcast.sql.SqlColumnType.NULL;\n+import static com.hazelcast.sql.SqlColumnType.OBJECT;\n+import static com.hazelcast.sql.SqlColumnType.REAL;\n+import static com.hazelcast.sql.SqlColumnType.SMALLINT;\n+import static com.hazelcast.sql.SqlColumnType.TIME;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.hazelcast.sql.SqlColumnType.TINYINT;\n+import static com.hazelcast.sql.SqlColumnType.VARCHAR;\n+import static com.hazelcast.sql.impl.SqlErrorCode.DATA_EXCEPTION;\n+import static com.hazelcast.sql.impl.expression.ConstantExpression.create;\n+import static com.hazelcast.sql.impl.type.QueryDataType.INT;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class RemainderOperatorIntegrationTest extends ArithmeticOperatorIntegrationTest {\n+    @Override\n+    protected String operator() {\n+        return \"%\";\n+    }\n+\n+    @Test\n+    public void testTinyint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87533828d203f5b69520f41c31889c2e06c719a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwMDg2OQ==", "bodyText": "Fixed.", "url": "https://github.com/hazelcast/hazelcast/pull/17997#discussion_r549300869", "createdAt": "2020-12-28T10:43:08Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/math/RemainderOperatorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.math;\n+\n+import com.hazelcast.sql.impl.SqlDataSerializerHook;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import static com.hazelcast.sql.SqlColumnType.BIGINT;\n+import static com.hazelcast.sql.SqlColumnType.BOOLEAN;\n+import static com.hazelcast.sql.SqlColumnType.DATE;\n+import static com.hazelcast.sql.SqlColumnType.DECIMAL;\n+import static com.hazelcast.sql.SqlColumnType.DOUBLE;\n+import static com.hazelcast.sql.SqlColumnType.INTEGER;\n+import static com.hazelcast.sql.SqlColumnType.NULL;\n+import static com.hazelcast.sql.SqlColumnType.OBJECT;\n+import static com.hazelcast.sql.SqlColumnType.REAL;\n+import static com.hazelcast.sql.SqlColumnType.SMALLINT;\n+import static com.hazelcast.sql.SqlColumnType.TIME;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP;\n+import static com.hazelcast.sql.SqlColumnType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.hazelcast.sql.SqlColumnType.TINYINT;\n+import static com.hazelcast.sql.SqlColumnType.VARCHAR;\n+import static com.hazelcast.sql.impl.SqlErrorCode.DATA_EXCEPTION;\n+import static com.hazelcast.sql.impl.expression.ConstantExpression.create;\n+import static com.hazelcast.sql.impl.type.QueryDataType.INT;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class RemainderOperatorIntegrationTest extends ArithmeticOperatorIntegrationTest {\n+    @Override\n+    protected String operator() {\n+        return \"%\";\n+    }\n+\n+    @Test\n+    public void testTinyint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NjUzOQ=="}, "originalCommit": {"oid": "b87533828d203f5b69520f41c31889c2e06c719a"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 34, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}