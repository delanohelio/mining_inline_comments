{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjM1NzM3", "number": 17088, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDo1NjoxNlrOEF4wWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDo1NjoxNlrOEF4wWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjA4MjE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/GroupProperty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDo1NjoxNlrOGkWEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoyNjowN1rOGkd-yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MzU0NA==", "bodyText": "Is a million not a bit on the high side? If each item is 5KB (not uncommon) then we are at 5GB of inflight invocations.", "url": "https://github.com/hazelcast/hazelcast/pull/17088#discussion_r440763544", "createdAt": "2020-06-16T10:56:16Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/GroupProperty.java", "diffHunk": "@@ -1053,6 +1053,63 @@\n     public static final HazelcastProperty SEARCH_DYNAMIC_CONFIG_FIRST\n             = new HazelcastProperty(\"hazelcast.data.search.dynamic.config.first.enabled\", false);\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 1000000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0115e7fe2b1963a17865ab93ad9adfa274bd4f7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5MzEzMQ==", "bodyText": "It is. Reduced to 50k.", "url": "https://github.com/hazelcast/hazelcast/pull/17088#discussion_r440893131", "createdAt": "2020-06-16T14:26:07Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/GroupProperty.java", "diffHunk": "@@ -1053,6 +1053,63 @@\n     public static final HazelcastProperty SEARCH_DYNAMIC_CONFIG_FIRST\n             = new HazelcastProperty(\"hazelcast.data.search.dynamic.config.first.enabled\", false);\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 1000000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MzU0NA=="}, "originalCommit": {"oid": "c0115e7fe2b1963a17865ab93ad9adfa274bd4f7"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 586, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}