{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjEzMzQ0", "number": 17546, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMjozN1rOElwxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0Mzo1NFrOEmerLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDMxNzg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMjozN1rOHVaqOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo0ODowN1rOHWYtww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODkzNw==", "bodyText": "The exception handling should still happen only inside the if (response instanceof ExceptionalResult) { block, instead of replacing the response value and working on that. For example if response is a RuntimeException instance (as a normal return value, not an exceptional response), with the previous code it would be returned as the normal return value but now it will be regarded as an exceptional outcome.\nTake this as an example:\nHazelcastInstance hz = Hazelcast.newHazelcastInstance();\nIAtomicReference ref = hz.getCPSubsystem().getAtomicReference(\"test\");\nref.set(new RuntimeException(\"boom!\"));\nSystem.out.println(ref.getAsync().toCompletableFuture().get());\n\nWith previous code it works properly, returning the RuntimeException instance, while with this code it throws\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.RuntimeException: boom!\n\tat com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.returnOrThrowWithGetConventions(InvocationFuture.java:121)\n\tat com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolveAndThrowIfException(InvocationFuture.java:100)\n\tat com.hazelcast.spi.impl.AbstractInvocationFuture.get(AbstractInvocationFuture.java:600)\n\tat Scratch.main(scratch_148.java:17)\nCaused by: java.lang.RuntimeException: boom!\n\tat Scratch.main(scratch_148.java:16)\n\tat ------ submitted from ------.()\n\tat com.hazelcast.internal.util.ExceptionUtil.cloneExceptionWithFixedAsyncStackTrace(ExceptionUtil.java:266)\n\tat com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.returnOrThrowWithGetConventions(InvocationFuture.java:111)\n\t... 3 more", "url": "https://github.com/hazelcast/hazelcast/pull/17546#discussion_r492218937", "createdAt": "2020-09-21T17:12:37Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java", "diffHunk": "@@ -99,21 +101,27 @@ protected E resolveAndThrowIfException(Object unresolved) throws ExecutionExcept\n     }\n \n     // public for tests\n-    public static <T> T returnOrThrowWithGetConventions(Object resolved) throws ExecutionException, InterruptedException {\n-        if (!(resolved instanceof ExceptionalResult)) {\n-            return (T) resolved;\n-        } else {\n-            Throwable cause = ((ExceptionalResult) resolved).getCause();\n-            if (cause instanceof CancellationException) {\n-                throw (CancellationException) cause;\n-            } else if (cause instanceof ExecutionException) {\n-                throw (ExecutionException) cause;\n-            } else if (cause instanceof InterruptedException) {\n-                throw (InterruptedException) cause;\n+    public static <T> T returnOrThrowWithGetConventions(Object response) throws ExecutionException, InterruptedException {\n+        if (response instanceof ExceptionalResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb7bd2c7fff9966947538a9cca69a393af261dd8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNTY1MQ==", "bodyText": "Good catch. I have restored the behavior. The code in the ClientInvocationFuture misguided me, and it seems that it was wrong in the first place.", "url": "https://github.com/hazelcast/hazelcast/pull/17546#discussion_r493235651", "createdAt": "2020-09-23T06:48:07Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java", "diffHunk": "@@ -99,21 +101,27 @@ protected E resolveAndThrowIfException(Object unresolved) throws ExecutionExcept\n     }\n \n     // public for tests\n-    public static <T> T returnOrThrowWithGetConventions(Object resolved) throws ExecutionException, InterruptedException {\n-        if (!(resolved instanceof ExceptionalResult)) {\n-            return (T) resolved;\n-        } else {\n-            Throwable cause = ((ExceptionalResult) resolved).getCause();\n-            if (cause instanceof CancellationException) {\n-                throw (CancellationException) cause;\n-            } else if (cause instanceof ExecutionException) {\n-                throw (ExecutionException) cause;\n-            } else if (cause instanceof InterruptedException) {\n-                throw (InterruptedException) cause;\n+    public static <T> T returnOrThrowWithGetConventions(Object response) throws ExecutionException, InterruptedException {\n+        if (response instanceof ExceptionalResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODkzNw=="}, "originalCommit": {"oid": "cb7bd2c7fff9966947538a9cca69a393af261dd8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzY1MzkyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_ExceptionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMzoxNlrOHWfweg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMzoxNlrOHWfweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM1MTAzNA==", "bodyText": "minor: comment in previous line should be updated to reflect new behaviour", "url": "https://github.com/hazelcast/hazelcast/pull/17546#discussion_r493351034", "createdAt": "2020-09-23T09:13:16Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_ExceptionTest.java", "diffHunk": "@@ -76,7 +76,7 @@\n                               new RootCauseMatcher(Exception.class, \"message\")},\n                 // Error subclass is wrapped in instance of same class\n                 new Object[] {JOIN_INTERNAL, new ExceptionInInitializerError(\"message\"), ExceptionInInitializerError.class,\n-                              new RootCauseMatcher(ExceptionInInitializerError.class, \"message\")},\n+                        IsNull.nullValue(Throwable.class)},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b33d029cc0bd24fa06187bea239129fd3627d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzgzOTE2OnYy", "diffSide": "LEFT", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/ClientDelegatingFutureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0Mzo1NFrOHWhnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0Mzo1NFrOHWhnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4MTUyOA==", "bodyText": "It seems we only test client futures behaviour with RuntimeException in this test. For member-side invocations, Invocation_ExceptionTest tests those cases. Can we add a similar test for client invocation future?", "url": "https://github.com/hazelcast/hazelcast/pull/17546#discussion_r493381528", "createdAt": "2020-09-23T09:43:54Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/client/impl/ClientDelegatingFutureTest.java", "diffHunk": "@@ -117,7 +117,6 @@ public void joinInternal_whenCompletedExceptionally() {\n         invocationFuture.completeExceptionally(new IllegalArgumentException());\n \n         expected.expect(IllegalArgumentException.class);\n-        expected.expectCause(new RootCauseMatcher(IllegalArgumentException.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b33d029cc0bd24fa06187bea239129fd3627d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 226, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}