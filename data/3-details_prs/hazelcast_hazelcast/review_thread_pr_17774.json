{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODMyODA5", "number": 17774, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzo0MFrOEzTLNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzo0MFrOEzTLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjI2OTk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzo0MFrOHqb_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzo0MFrOHqb_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MDkxNA==", "bodyText": "nit: could also use HazelcastTestSupport#spawn(Runnable) here", "url": "https://github.com/hazelcast/hazelcast/pull/17774#discussion_r514260914", "createdAt": "2020-10-29T13:33:40Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.ascii;\n+\n+import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.DiscoveryStrategyConfig;\n+import com.hazelcast.config.NetworkConfig;\n+import com.hazelcast.config.RestApiConfig;\n+import com.hazelcast.config.properties.PropertyDefinition;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.instance.impl.NodeState;\n+import com.hazelcast.internal.util.EmptyStatement;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.discovery.AbstractDiscoveryStrategy;\n+import com.hazelcast.spi.discovery.DiscoveryNode;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.discovery.DiscoveryStrategyFactory;\n+import com.hazelcast.spi.properties.ClusterProperty;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+/**\n+ * Regression test which checks the {@link NodeState} before the instance becomes {@link NodeState#ACTIVE}.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class RestNodeStateTest {\n+\n+    @BeforeClass\n+    @AfterClass\n+    public static void cleanupClass() {\n+        HazelcastInstanceFactory.terminateAll();\n+    }\n+\n+    @Test\n+    public void testStartingNodeState_regression() throws Exception {\n+        Config config = smallInstanceConfig().setProperty(ClusterProperty.DISCOVERY_SPI_ENABLED.getName(), \"true\");\n+        RestApiConfig restApiConfig = new RestApiConfig().setEnabled(true).enableAllGroups();\n+        NetworkConfig networkConfig = config.getNetworkConfig();\n+        networkConfig.setPort(5000).setPortAutoIncrement(false);\n+        networkConfig.getJoin().getMulticastConfig().setEnabled(false);\n+        networkConfig.setRestApiConfig(restApiConfig);\n+        StrategyFactory discoveryStrategyFactory = new StrategyFactory();\n+        networkConfig.getJoin().getDiscoveryConfig()\n+                .addDiscoveryStrategyConfig(new DiscoveryStrategyConfig(discoveryStrategyFactory));\n+        Executors.newSingleThreadExecutor().execute(() -> Hazelcast.newHazelcastInstance(config));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8062847f296c08be799707b363b44d78404f776f"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 74, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}