{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTU1MzE4", "number": 17237, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjo0MVrOEP_eKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1ODoyOFrOEQABGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA0MDEwOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjo0MVrOGz7C2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjo0MVrOGz7C2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5Nzk0Ng==", "bodyText": "What is the reason of this change? It is not needed for compilation in IDE. Is it required by Jenkins?", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457097946", "createdAt": "2020-07-20T06:36:41Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/pom.xml", "diffHunk": "@@ -73,6 +73,20 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+\n+            <plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA0NDcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNzo0NlrOGz7FRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNDo1N1rOGz8EBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODU2NA==", "bodyText": "Do we support HD for replicated maps? I thought no.\nEven if yes - we do not have indexes support for replicated maps, therefore they will never work with HD. No need to pass this flag to ReplicatedMapTable.", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457098564", "createdAt": "2020-07-20T06:37:46Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java", "diffHunk": "@@ -78,6 +78,8 @@ public Table createTable(\n \n         long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDYzMQ==", "bodyText": "no HD support for replicated maps", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457114631", "createdAt": "2020-07-20T07:04:57Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java", "diffHunk": "@@ -78,6 +78,8 @@ public Table createTable(\n \n         long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODU2NA=="}, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA1NTg3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo0MDozNVrOGz7LVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0NjowOVrOGz9s8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg==", "bodyText": "This flag looks suspicious to me. Even though an instance may have native memory enabled, this doesn't mean that the concrete map uses NATIVE format.", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457100116", "createdAt": "2020-07-20T06:40:35Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java", "diffHunk": "@@ -85,6 +85,7 @@ public Table createTable(\n         long estimatedRowCount = estimatePartitionedMapRowCount(nodeEngine, context, mapName);\n         List<MapTableIndex> indexes = container != null ? getPartitionedMapIndexes(container, fields) : emptyList();\n         int distributionFieldOrdinal = container != null ? getPartitionedMapDistributionField(container, context, fields) : -1;\n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMDUzNw==", "bodyText": "My impression was that once it is enabled, it is used for all maps. But, OK, if we still for some maps can use on-heap format, I'll initialize it on the map level.\nHowever, here we don't know which format is used, because we might have container = null. I also see a comment \"TODO: do we want to keep it? maps are auto discovered...\".  So, the question here, do we have to pass the nativeMemoryEnabled from the caller? Is this code supposed to be in the master?", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457130537", "createdAt": "2020-07-20T07:29:37Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java", "diffHunk": "@@ -85,6 +85,7 @@ public Table createTable(\n         long estimatedRowCount = estimatePartitionedMapRowCount(nodeEngine, context, mapName);\n         List<MapTableIndex> indexes = container != null ? getPartitionedMapIndexes(container, fields) : emptyList();\n         int distributionFieldOrdinal = container != null ? getPartitionedMapDistributionField(container, context, fields) : -1;\n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg=="}, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MTQ5MA==", "bodyText": "If container == null, then the map cannot be used. We should not focus a lot on this specific part of the code too much, because LocalPartitinedMapConnector is research code. The following pseudocode should be sufficient:\nnativeMemoryEnabled = container != null && nodeEngine.nativeMemoryEnabled() && containter.format == NATIVE", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457141490", "createdAt": "2020-07-20T07:46:09Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java", "diffHunk": "@@ -85,6 +85,7 @@ public Table createTable(\n         long estimatedRowCount = estimatePartitionedMapRowCount(nodeEngine, context, mapName);\n         List<MapTableIndex> indexes = container != null ? getPartitionedMapIndexes(container, fields) : emptyList();\n         int distributionFieldOrdinal = container != null ? getPartitionedMapDistributionField(container, context, fields) : -1;\n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg=="}, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA2MzUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo0MjozOVrOGz7PsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo0MjozOVrOGz7PsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTIzMg==", "bodyText": "I think this flag should be in the PartitionedMapTable, because replicated maps do not support indexes, and hence can never be used with HD. Old logic already handles this properly.", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457101232", "createdAt": "2020-07-20T06:42:39Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "diffHunk": "@@ -37,6 +37,7 @@\n     private final UpsertTargetDescriptor keyUpsertDescriptor;\n     private final UpsertTargetDescriptor valueUpsertDescriptor;\n     private final QueryException exception;\n+    private final boolean nativeMemoryEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA2NjAxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo0MzoyNFrOGz7RJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo0MzoyNFrOGz7RJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTYwNg==", "bodyText": "Same as in other places: this is not needed for replicated maps", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457101606", "createdAt": "2020-07-20T06:43:24Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java", "diffHunk": "@@ -96,6 +96,8 @@ private ReplicatedMapTable createTable(ReplicatedMapService mapService, String n\n \n                 long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n+                boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA5ODEzOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1MToyNlrOGz7jhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1MToyNlrOGz7jhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjMwOQ==", "bodyText": "The error message is not very intuitive, because from the user perspective there is no \"scan\", but instead, there is an access to a table. I would change the message to something like this:\nCannot query IMap <name> with InMemoryFormat.NATIVE because it does not have indexes (please add at least one index to query this IMap)", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457106309", "createdAt": "2020-07-20T06:51:26Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -277,9 +277,15 @@ private static SqlRowMetadata createRowMetadata(List<String> columnNames, List<Q\n \n     @Override\n     public void onMapScan(MapScanPhysicalRel rel) {\n-        HazelcastTable hazelcastTable = rel.getTableUnwrapped();\n         AbstractMapTable table = rel.getMap();\n \n+        if (table.nativeMemoryEnabled()) {\n+            throw QueryException.error(\"IMap scan with InMemoryFormat.NATIVE is not supported: \" + table.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjEwNzA1OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1MzoyN1rOGz7oLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1MzoyN1rOGz7oLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzUwMg==", "bodyText": "I would propose to have two overloads, to avoid complication for non-HD tests (and the majority of tests are non-HD):\npartitionedTable(name, fields, indexes, rowCount)\npartitionedTable(name, fields, indexes, rowCount, nativeMemoryEnabled)", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457107502", "createdAt": "2020-07-20T06:53:27Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java", "diffHunk": "@@ -155,22 +155,24 @@ private static PhysicalRel optimizePhysicalInternal(\n     }\n \n     protected static HazelcastTable partitionedTable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjEyOTUzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1ODoyOFrOGz70jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1ODoyOFrOGz70jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMDY3MA==", "bodyText": "Same problem as in other places: this IMap is not necessarily HD map.", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457110670", "createdAt": "2020-07-20T06:58:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -130,6 +124,8 @@ private PartitionedMapTable createTable(\n             int distributionFieldOrdinal =\n                 MapTableUtils.getPartitionedMapDistributionField(mapContainer, context, resolved.getFields());\n \n+            boolean nativeMemoryEnabled = context.getNodeEngine().getConfig().getNativeMemoryConfig().isEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e153c72645f91ed3401b276d4794c329fec58e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 482, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}