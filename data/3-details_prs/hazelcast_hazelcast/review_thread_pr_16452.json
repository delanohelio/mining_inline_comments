{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTQzMDQ1", "number": 16452, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzowNjoyMlrODXES0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzowNjoyMlrODXES0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTE0MTk0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzowNjoyMlrOFcLuCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0MzoyM1rOFcNYaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5NjQ1OQ==", "bodyText": "I think the following would also fix the leak and will not call the removeAction twice in any code path\n    @Override\n    public void addDestroyAction(UUID registrationId, Callable<Boolean> removeAction) {\n        synchronized (removeListenerActions) {\n            if (destroyed) {\n                callRemoveAction(removeAction);\n            } else {\n                removeListenerActions.put(registrationId, removeAction);\n            }\n        }\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/16452#discussion_r365096459", "createdAt": "2020-01-10T07:06:22Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java", "diffHunk": "@@ -198,6 +202,10 @@ public void addListenerDestroyAction(final String service, final String topic, f\n     @Override\n     public void addDestroyAction(UUID registrationId, Callable<Boolean> removeAction) {\n         removeListenerActions.put(registrationId, removeAction);\n+        if (destroyed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600502cd5ed258ca4f44a9a7a796e2ebe806990f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwODg5MQ==", "bodyText": "Calling the remove action is doing an invocation and waits for the results. We don't want to create a potential deadlock. Since registration id's are unique, calling the remove action twice looks ok to me.", "url": "https://github.com/hazelcast/hazelcast/pull/16452#discussion_r365108891", "createdAt": "2020-01-10T07:57:00Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java", "diffHunk": "@@ -198,6 +202,10 @@ public void addListenerDestroyAction(final String service, final String topic, f\n     @Override\n     public void addDestroyAction(UUID registrationId, Callable<Boolean> removeAction) {\n         removeListenerActions.put(registrationId, removeAction);\n+        if (destroyed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5NjQ1OQ=="}, "originalCommit": {"oid": "600502cd5ed258ca4f44a9a7a796e2ebe806990f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyMzY4OQ==", "bodyText": "What about the following then ?\n    @Override\n    public void addDestroyAction(UUID registrationId, Callable<Boolean> removeAction) {\n        synchronized (removeListenerActions) {\n            if (!destroyed) {\n                removeListenerActions.put(registrationId, removeAction);\n                return;\n            }\n        }\n        callRemoveAction(removeAction);\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/16452#discussion_r365123689", "createdAt": "2020-01-10T08:43:23Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java", "diffHunk": "@@ -198,6 +202,10 @@ public void addListenerDestroyAction(final String service, final String topic, f\n     @Override\n     public void addDestroyAction(UUID registrationId, Callable<Boolean> removeAction) {\n         removeListenerActions.put(registrationId, removeAction);\n+        if (destroyed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5NjQ1OQ=="}, "originalCommit": {"oid": "600502cd5ed258ca4f44a9a7a796e2ebe806990f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 849, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}