{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDMzMTI0", "number": 17394, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1OTo0OVrOEbqUIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozNjo0OFrOEb6NTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDQwMjkxOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/TrimFunctionIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1OTo0OVrOHFuIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo0MzozOFrOHFxzfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MDgwNw==", "bodyText": "We miss the test for TRIM(' ' FROM null) case", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475760807", "createdAt": "2020-08-24T16:59:49Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/TrimFunctionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.SqlColumnType;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.expression.SqlExpressionIntegrationTestSupport;\n+import com.hazelcast.sql.support.expressions.ExpressionValue;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class TrimFunctionIntegrationTest extends SqlExpressionIntegrationTestSupport {\n+    /**\n+     * Test TRIM usage with custom characters.\n+     * <p>\n+     * We assume that behavior of the input operand is tested elsewhere.\n+     */\n+    @Test\n+    public void test_trim_3_arg() {\n+        // Test normal behavior\n+        put(1);\n+\n+        // Spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc  \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"  abc\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc\");\n+\n+        // Empty operand should be no-op\n+        checkValueInternal(\"SELECT TRIM(LEADING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Cannot trim anything because target values are \"protected\" with spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Trim with custom characters\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        // Test column\n+        put(new ExpressionValue.StringVal());\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+\n+        put(new ExpressionValue.StringVal().field1(\"a\"));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.CharacterVal().field1('a'));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.BigDecimalVal().field1(BigDecimal.ONE));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 11\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \"11 121 \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 \");\n+\n+        // Test parameter\n+        put(1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", \"a\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", \"a\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", \"a\");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", 'a');\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", 'a');\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", 'a');\n+\n+        checkFailureInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba aa\", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \"aa aba \", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba \", \"a\", \"aa aba aa\");\n+\n+        // Test literals\n+        checkValueInternal(\"SELECT TRIM(LEADING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyMDkyNg==", "bodyText": "Added missing tests", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475820926", "createdAt": "2020-08-24T18:43:38Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/TrimFunctionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.SqlColumnType;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.expression.SqlExpressionIntegrationTestSupport;\n+import com.hazelcast.sql.support.expressions.ExpressionValue;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class TrimFunctionIntegrationTest extends SqlExpressionIntegrationTestSupport {\n+    /**\n+     * Test TRIM usage with custom characters.\n+     * <p>\n+     * We assume that behavior of the input operand is tested elsewhere.\n+     */\n+    @Test\n+    public void test_trim_3_arg() {\n+        // Test normal behavior\n+        put(1);\n+\n+        // Spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc  \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"  abc\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc\");\n+\n+        // Empty operand should be no-op\n+        checkValueInternal(\"SELECT TRIM(LEADING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Cannot trim anything because target values are \"protected\" with spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Trim with custom characters\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        // Test column\n+        put(new ExpressionValue.StringVal());\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+\n+        put(new ExpressionValue.StringVal().field1(\"a\"));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.CharacterVal().field1('a'));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.BigDecimalVal().field1(BigDecimal.ONE));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 11\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \"11 121 \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 \");\n+\n+        // Test parameter\n+        put(1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", \"a\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", \"a\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", \"a\");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", 'a');\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", 'a');\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", 'a');\n+\n+        checkFailureInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba aa\", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \"aa aba \", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba \", \"a\", \"aa aba aa\");\n+\n+        // Test literals\n+        checkValueInternal(\"SELECT TRIM(LEADING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MDgwNw=="}, "originalCommit": {"oid": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDQyMDQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzowNDo0OFrOHFuThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoxM1rOHFxnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MzU4OQ==", "bodyText": "Wouldn't it be easier to use ArrayList to build the constructor list and then use toArray on it and avoid this LEN constant? Seems like micro-optimization.", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475763589", "createdAt": "2020-08-24T17:04:48Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java", "diffHunk": "@@ -155,8 +156,9 @@\n     public static final int EXPRESSION_CONCAT = 58;\n     public static final int EXPRESSION_LIKE = 59;\n     public static final int EXPRESSION_SUBSTRING = 60;\n+    public static final int EXPRESSION_TRIM = 61;\n \n-    public static final int LEN = EXPRESSION_SUBSTRING + 1;\n+    public static final int LEN = EXPRESSION_TRIM + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzg5MA==", "bodyText": "Perhaps you are right, it would be easier. But this is a common approach across other hooks, we just follow it here.", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475817890", "createdAt": "2020-08-24T18:38:13Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java", "diffHunk": "@@ -155,8 +156,9 @@\n     public static final int EXPRESSION_CONCAT = 58;\n     public static final int EXPRESSION_LIKE = 59;\n     public static final int EXPRESSION_SUBSTRING = 60;\n+    public static final int EXPRESSION_TRIM = 61;\n \n-    public static final int LEN = EXPRESSION_SUBSTRING + 1;\n+    public static final int LEN = EXPRESSION_TRIM + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MzU4OQ=="}, "originalCommit": {"oid": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk5MzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastInferTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozMDowNlrOHGIIuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0NDo0OVrOHGLnVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4NjgxMQ==", "bodyText": "never used", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476186811", "createdAt": "2020-08-25T05:30:06Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastInferTypes.java", "diffHunk": "@@ -81,6 +81,18 @@\n         }\n     };\n \n+    public static final SqlOperandTypeInference VARCHAR_IF_UNKNOWN = (callBinding, returnType, operandTypes) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzc5OQ==", "bodyText": "Removed dead code", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476243799", "createdAt": "2020-08-25T07:44:49Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastInferTypes.java", "diffHunk": "@@ -81,6 +81,18 @@\n         }\n     };\n \n+    public static final SqlOperandTypeInference VARCHAR_IF_UNKNOWN = (callBinding, returnType, operandTypes) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4NjgxMQ=="}, "originalCommit": {"oid": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzAwNjg1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/StringExpressionUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozNjo0OFrOHGIQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0NDo0MlrOHGLnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODg0OQ==", "bodyText": "None of the methods are used in this PR except asVarchar.", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476188849", "createdAt": "2020-08-25T05:36:48Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/StringExpressionUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.expression.ExpressionEvalContext;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility methods for string functions.\n+ */\n+public final class StringExpressionUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzc0NA==", "bodyText": "An artifact of the bad merge. Removed StringExpressionUtils class.", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476243744", "createdAt": "2020-08-25T07:44:42Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/StringExpressionUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.expression.ExpressionEvalContext;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility methods for string functions.\n+ */\n+public final class StringExpressionUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODg0OQ=="}, "originalCommit": {"oid": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 327, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}