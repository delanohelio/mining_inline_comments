{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTg4MTMw", "number": 16958, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMDoxN1rOD7lHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMDo1NFrOEHFbew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODAwNjM2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/ConfigStreamRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMDoxN1rOGT_UgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMDoxN1rOGT_UgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzU2OQ==", "bodyText": "Leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r423613569", "createdAt": "2020-05-12T10:00:17Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/ConfigStreamRecognizer.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config;\n+\n+public interface ConfigStreamRecognizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9457ddcdd1925eccc1ed59ed287e4ae1c0244afe"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzODUwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/ConfigStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyODo0NVrOGmRkNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjowMDowNVrOGmSVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Njg2OQ==", "bodyText": "Minor: does this class need to be public API?", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442786869", "createdAt": "2020-06-19T11:28:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/ConfigStream.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Stream wrapping or copying a generic {@link InputStream} for the\n+ * {@link ConfigRecognizer} API. The purpose of this class is to make\n+ * the provided {@link InputStream} resetable so that multiple\n+ * {@link ConfigRecognizer} implementations can iterate over the stream.\n+ * There are even basic {@link InputStream} implementations that don't\n+ * support {@link InputStream#reset()} such as {@link BufferedInputStream}.\n+ * If calling {@code reset()} on the provided implementation fails with\n+ * an exception, this class reads the stream into a {@code byte[]} and\n+ * delegates all {@link InputStream} method calls to a\n+ * {@link ByteArrayInputStream} created with this {@code byte[]}. To\n+ * prevent OOM issues, the size of this {@code byte[]} is limited to 4096\n+ * bytes. This limit can be configured in the constructor.\n+ *\n+ * @see ConfigRecognizer\n+ */\n+public class ConfigStream extends InputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749d57ec76dd4c9b1d4e4641630903eb512f6eca"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5OTM5Ng==", "bodyText": "Actually found out it needs to, nevermind.", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442799396", "createdAt": "2020-06-19T12:00:05Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/ConfigStream.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Stream wrapping or copying a generic {@link InputStream} for the\n+ * {@link ConfigRecognizer} API. The purpose of this class is to make\n+ * the provided {@link InputStream} resetable so that multiple\n+ * {@link ConfigRecognizer} implementations can iterate over the stream.\n+ * There are even basic {@link InputStream} implementations that don't\n+ * support {@link InputStream#reset()} such as {@link BufferedInputStream}.\n+ * If calling {@code reset()} on the provided implementation fails with\n+ * an exception, this class reads the stream into a {@code byte[]} and\n+ * delegates all {@link InputStream} method calls to a\n+ * {@link ByteArrayInputStream} created with this {@code byte[]}. To\n+ * prevent OOM issues, the size of this {@code byte[]} is limited to 4096\n+ * bytes. This limit can be configured in the constructor.\n+ *\n+ * @see ConfigRecognizer\n+ */\n+public class ConfigStream extends InputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Njg2OQ=="}, "originalCommit": {"oid": "749d57ec76dd4c9b1d4e4641630903eb512f6eca"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODY0NDQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractConfigRecognizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMDo1NFrOGmRn0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMDo1NFrOGmRn0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Nzc5Mg==", "bodyText": "Minor: can we exit early if it was recognized?", "url": "https://github.com/hazelcast/hazelcast/pull/16958#discussion_r442787792", "createdAt": "2020-06-19T11:30:54Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractConfigRecognizer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config;\n+\n+import com.hazelcast.config.ConfigRecognizer;\n+import com.hazelcast.config.ConfigStream;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Abstract composite {@link ConfigRecognizer} implementation that uses\n+ * multiple recognizers under the hood.\n+ */\n+public class AbstractConfigRecognizer implements ConfigRecognizer {\n+    protected final Collection<ConfigRecognizer> recognizers;\n+\n+    public AbstractConfigRecognizer(Collection<ConfigRecognizer> recognizers) {\n+        this.recognizers = recognizers;\n+    }\n+\n+    @Override\n+    public boolean isRecognized(ConfigStream configStream) throws Exception {\n+        boolean recognized = false;\n+        for (ConfigRecognizer recognizer : recognizers) {\n+            configStream.reset();\n+            recognized = recognized || recognizer.isRecognized(configStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749d57ec76dd4c9b1d4e4641630903eb512f6eca"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 506, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}