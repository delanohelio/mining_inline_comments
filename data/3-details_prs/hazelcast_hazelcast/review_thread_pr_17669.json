{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODQ3MzQ4", "number": 17669, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozODoyOFrOEp0UWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjo1NToyMVrOErCYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjg0MjUxOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozODoyOFrOHbt-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozODoyOFrOHbt-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjg4NA==", "bodyText": "Actual and expected value swapped.", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r498826884", "createdAt": "2020-10-02T13:38:28Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java", "diffHunk": "@@ -184,6 +184,44 @@ public void narrowestTypeForTest() {\n         assertEquals(type(REAL), narrowestTypeFor(0.1, REAL));\n     }\n \n+    @Test\n+    public void deriveSumTypeTest() {\n+        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(VARCHAR)), type(VARCHAR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca2d9e019e9263447bdff7681e1089b3ffc27839"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTYzMzAwOnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjo1NToyMVrOHdlCaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjo1NToyMVrOHdlCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc3NzU3OQ==", "bodyText": "It might be better to use BIGINT for all integer types.", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r500777579", "createdAt": "2020-10-07T06:55:21Z", "author": {"login": "taburet"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java", "diffHunk": "@@ -374,4 +376,72 @@ private static RelDataType literalType(SqlLiteral literal) {\n         return HazelcastTypeFactory.INSTANCE.createSqlType(literal.getTypeName());\n     }\n \n+    @Override\n+    public RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType) {\n+        if (argumentType instanceof BasicSqlType) {\n+            SqlTypeName type = deriveSumType(argumentType.getSqlTypeName());\n+\n+            if (type.allowsPrec() && argumentType.getPrecision() != RelDataType.PRECISION_NOT_SPECIFIED) {\n+                int precision = typeFactory.getTypeSystem().getMaxPrecision(type);\n+                if (type.allowsScale()) {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision, argumentType.getScale()),\n+                            argumentType.isNullable()\n+                    );\n+                } else {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision),\n+                            argumentType.isNullable()\n+                    );\n+                }\n+            } else {\n+                return typeFactory.createTypeWithNullability(\n+                        typeFactory.createSqlType(type),\n+                        argumentType.isNullable()\n+                );\n+            }\n+        }\n+        return argumentType;\n+    }\n+\n+    private static SqlTypeName deriveSumType(SqlTypeName type) {\n+        switch (type) {\n+            case TINYINT:\n+            case SMALLINT:\n+                return SqlTypeName.INTEGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae34b55e75160f080dabda00083815a904e68c5"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 161, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}