{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTc5ODg3", "number": 17133, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0ODowMFrOEJ9Iyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMzo0OFrOEMDJ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODc0MzE0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0ODowMFrOGquD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0Mzo0OVrOGqv3XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0ODAyOQ==", "bodyText": "Minor: mapConfig.getInMemoryFormat() != NATIVE || mapServiceContext.globalIndexEnabled()?", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447448029", "createdAt": "2020-06-30T06:48:00Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java", "diffHunk": "@@ -179,7 +178,8 @@ protected Evictor newEvictor(EvictionPolicyComparator evictionPolicyComparator,\n \n     public boolean shouldUseGlobalIndex() {\n         // for non-native memory populate a single global index\n-        return !mapConfig.getInMemoryFormat().equals(NATIVE);\n+        return !mapConfig.getInMemoryFormat().equals(NATIVE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NzU5Ng==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447477596", "createdAt": "2020-06-30T07:43:49Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java", "diffHunk": "@@ -179,7 +178,8 @@ protected Evictor newEvictor(EvictionPolicyComparator evictionPolicyComparator,\n \n     public boolean shouldUseGlobalIndex() {\n         // for non-native memory populate a single global index\n-        return !mapConfig.getInMemoryFormat().equals(NATIVE);\n+        return !mapConfig.getInMemoryFormat().equals(NATIVE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0ODAyOQ=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODc2NjM2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo1NToyOFrOGquSDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozMTowNVrOGt8U8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTY2MA==", "bodyText": "If we are removing the global lock for HD index (which changes the behavior), is there a reason to leave it for other indexes?\nMaybe we should introduce a single property that will enable/disable global lock globally?", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447451660", "createdAt": "2020-06-30T06:55:28Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private volatile Map<Data, QueryableEntry> recordsWithNullValue;\n \n     public OrderedIndexStore(IndexCopyBehavior copyOn) {\n-        super(copyOn);\n+        super(copyOn, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MzUzMQ==", "bodyText": "We are still leaving it for other indexes.\n\nBitMapIndexStore is non-concurrent and we still have to keep the lock;\nOrderedIndexStore and UnorderedIndexStore as they are written now also non-concurrent. The code below is racy even relying on the concurrent data structures. We have to re-write these operations to make them concurrent. Also, the compute* methods of ConcurrentSkipListMap which we are using for the OrderedindexStore are non-atomic according to the JavaDoc - \"The function is NOT guaranteed to be applied once atomically.\"\n\n    private class AddFunctor implements IndexFunctor<Comparable, QueryableEntry> {\n\n        @Override\n        public Object invoke(Comparable value, QueryableEntry entry) {\n            if (value == NULL) {\n                return recordsWithNullValue.put(entry.getKeyData(), entry);\n            } else {\n                Map<Data, QueryableEntry> records = recordMap.get(value);\n                if (records == null) {\n                    records = new ConcurrentHashMap<>(1, LOAD_FACTOR, 1);\n                    recordMap.put(value, records);\n                }\n                return records.put(entry.getKeyData(), entry);\n            }\n        }\n\n    }\n\n\nThis is the reason why I don't remove the global lock for the on-heap indices.", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447473531", "createdAt": "2020-06-30T07:37:01Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private volatile Map<Data, QueryableEntry> recordsWithNullValue;\n \n     public OrderedIndexStore(IndexCopyBehavior copyOn) {\n-        super(copyOn);\n+        super(copyOn, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTY2MA=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NDgxMg==", "bodyText": "I'm not sure that we have to introduce a single property to enable the global lock, because as it is now we must use it for on-heap indices and if we are able to rewrite the code to make it thread-safe, we just remove them improving throughput.", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447474812", "createdAt": "2020-06-30T07:39:12Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private volatile Map<Data, QueryableEntry> recordsWithNullValue;\n \n     public OrderedIndexStore(IndexCopyBehavior copyOn) {\n-        super(copyOn);\n+        super(copyOn, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTY2MA=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDcxMg==", "bodyText": "I see, thanks.", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447480712", "createdAt": "2020-06-30T07:48:59Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private volatile Map<Data, QueryableEntry> recordsWithNullValue;\n \n     public OrderedIndexStore(IndexCopyBehavior copyOn) {\n-        super(copyOn);\n+        super(copyOn, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTY2MA=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNzUwNw==", "bodyText": "Looks like we still can relax the locking a bit: take the locks for mutating operations and skip the locking for index queries. Probably there is no that much sense in doing so, the benefits would be visible for the old engine mainly, the new engine would not use the locks for the new iterator-based index query API, if understand things right. WDYT guys?", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r450827507", "createdAt": "2020-07-07T12:31:05Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/OrderedIndexStore.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private volatile Map<Data, QueryableEntry> recordsWithNullValue;\n \n     public OrderedIndexStore(IndexCopyBehavior copyOn) {\n-        super(copyOn);\n+        super(copyOn, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTY2MA=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkyOTIwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/IndexProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0MjoxOVrOGqv0FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNjoxOFrOGqxgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3Njc1Nw==", "bodyText": "I cannot find usages of this method in either OS or ENT. Could you please point me to the code where it is used?", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447476757", "createdAt": "2020-06-30T07:42:19Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/IndexProvider.java", "diffHunk": "@@ -43,11 +43,13 @@\n      * @return the created index instance.\n      */\n     InternalIndex createIndex(\n-        IndexConfig config,\n-        Extractors extractors,\n-        InternalSerializationService ss,\n-        IndexCopyBehavior copyBehavior,\n-        PerIndexStats stats,\n-        StoreAdapter storeAdapter\n+            IndexConfig config,\n+            Extractors extractors,\n+            InternalSerializationService ss,\n+            IndexCopyBehavior copyBehavior,\n+            PerIndexStats stats,\n+            StoreAdapter storeAdapter\n     );\n+\n+    PerIndexStats createPerIndexStats(boolean ordered, boolean usesCachedQueryableEntries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNDQwNQ==", "bodyText": "A leftover code. Used it before but then rewrote it and forgot to remove this method. Fixed. Thanks!", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447504405", "createdAt": "2020-06-30T08:26:18Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/IndexProvider.java", "diffHunk": "@@ -43,11 +43,13 @@\n      * @return the created index instance.\n      */\n     InternalIndex createIndex(\n-        IndexConfig config,\n-        Extractors extractors,\n-        InternalSerializationService ss,\n-        IndexCopyBehavior copyBehavior,\n-        PerIndexStats stats,\n-        StoreAdapter storeAdapter\n+            IndexConfig config,\n+            Extractors extractors,\n+            InternalSerializationService ss,\n+            IndexCopyBehavior copyBehavior,\n+            PerIndexStats stats,\n+            StoreAdapter storeAdapter\n     );\n+\n+    PerIndexStats createPerIndexStats(boolean ordered, boolean usesCachedQueryableEntries);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3Njc1Nw=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk1MTM4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/HDGlobalPerIndexStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0ODoyMVrOGqwB9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo0MjowMVrOGq2lGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDMxMQ==", "bodyText": "Is it guaranteed that updateMemoryCost is not invoked from several threads concurrently? I see that the fields of the superclass are updated through CAS operations.", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447480311", "createdAt": "2020-06-30T07:48:21Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/HDGlobalPerIndexStats.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.internal.memory.MemoryAllocator;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+/**\n+ * The implementation of internal index stats specialized for HD global indexes.\n+ * <p>\n+ * The main trait of the implementation is the concurrency support, which is\n+ * required for HD global indexes because they are shared among partitions.\n+ */\n+public final class HDGlobalPerIndexStats extends GlobalPerIndexStats {\n+\n+    private static final AtomicLongFieldUpdater<HDGlobalPerIndexStats> MEMORY_COST = newUpdater(HDGlobalPerIndexStats.class,\n+            \"memoryCost\");\n+\n+    private volatile long memoryCost;\n+\n+    public HDGlobalPerIndexStats(boolean ordered, boolean usesCachedQueryableEntries) {\n+        super(ordered, usesCachedQueryableEntries);\n+    }\n+\n+    @Override\n+    public long getMemoryCost() {\n+        return memoryCost;\n+    }\n+\n+    @Override\n+    public MemoryAllocator wrapMemoryAllocator(MemoryAllocator memoryAllocator) {\n+        return new MemoryAllocatorWithStats(memoryAllocator);\n+    }\n+\n+    private void updateMemoryCost(long delta) {\n+        MEMORY_COST.lazySet(HDGlobalPerIndexStats.this, memoryCost + delta);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NzYxMA==", "bodyText": "Nice catch! Fixed to use CAS", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r447587610", "createdAt": "2020-06-30T10:42:01Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/HDGlobalPerIndexStats.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.internal.memory.MemoryAllocator;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+/**\n+ * The implementation of internal index stats specialized for HD global indexes.\n+ * <p>\n+ * The main trait of the implementation is the concurrency support, which is\n+ * required for HD global indexes because they are shared among partitions.\n+ */\n+public final class HDGlobalPerIndexStats extends GlobalPerIndexStats {\n+\n+    private static final AtomicLongFieldUpdater<HDGlobalPerIndexStats> MEMORY_COST = newUpdater(HDGlobalPerIndexStats.class,\n+            \"memoryCost\");\n+\n+    private volatile long memoryCost;\n+\n+    public HDGlobalPerIndexStats(boolean ordered, boolean usesCachedQueryableEntries) {\n+        super(ordered, usesCachedQueryableEntries);\n+    }\n+\n+    @Override\n+    public long getMemoryCost() {\n+        return memoryCost;\n+    }\n+\n+    @Override\n+    public MemoryAllocator wrapMemoryAllocator(MemoryAllocator memoryAllocator) {\n+        return new MemoryAllocatorWithStats(memoryAllocator);\n+    }\n+\n+    private void updateMemoryCost(long delta) {\n+        MEMORY_COST.lazySet(HDGlobalPerIndexStats.this, memoryCost + delta);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDMxMQ=="}, "originalCommit": {"oid": "01f680f9a967646e8e27cb05842ac1a06412d046"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcwMDM3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/query/impl/BaseSingleValueIndexStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMzo0OFrOGt7wJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0MjoyOVrOGt8uEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxODA4NA==", "bodyText": "The javadoc looks outdated comparing to the actual code.", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r450818084", "createdAt": "2020-07-07T12:13:48Z", "author": {"login": "taburet"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/BaseSingleValueIndexStore.java", "diffHunk": "@@ -27,13 +27,24 @@\n  * The base store for indexes that are unable to work with multi-value\n  * attributes natively. For such indexes {@link MultiResult}s are split into\n  * individual values and each value is inserted/removed separately.\n+ * <p>\n+ * All operations on the index store like insert/remove/getRecords are\n+ * not guarded by a global lock. The subclasses must either implement thread-safe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6d8a67eb1b7dfd50f5d291c357e415c54d796e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMzkzNg==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17133#discussion_r450833936", "createdAt": "2020-07-07T12:42:29Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/query/impl/BaseSingleValueIndexStore.java", "diffHunk": "@@ -27,13 +27,24 @@\n  * The base store for indexes that are unable to work with multi-value\n  * attributes natively. For such indexes {@link MultiResult}s are split into\n  * individual values and each value is inserted/removed separately.\n+ * <p>\n+ * All operations on the index store like insert/remove/getRecords are\n+ * not guarded by a global lock. The subclasses must either implement thread-safe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxODA4NA=="}, "originalCommit": {"oid": "cd6d8a67eb1b7dfd50f5d291c357e415c54d796e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}