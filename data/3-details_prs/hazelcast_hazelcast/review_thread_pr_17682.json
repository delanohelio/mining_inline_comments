{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Nzg2ODY5", "number": 17682, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyNjozNlrOEqS3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo1Mjo1MVrOEqvi1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg0NjUzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyNjozNlrOHcar4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyNjozNlrOHcar4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1OTM5Mw==", "bodyText": "A style comment:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (addedFieldNames.contains(fieldName)) {\n          \n          \n            \n                        throw new HazelcastSerializationException(\"Field with field name : \" + fieldName + \" already exists\");\n          \n          \n            \n                    }\n          \n          \n            \n                    addedFieldNames.add(fieldName);\n          \n          \n            \n                    if (!addedFieldNames.add(fieldName)) {\n          \n          \n            \n                        throw new HazelcastSerializationException(\"Field with field name : \" + fieldName + \" already exists\");\n          \n          \n            \n                    }", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r499559393", "createdAt": "2020-10-05T12:26:36Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,11 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (addedFieldNames.contains(fieldName)) {\n+            throw new HazelcastSerializationException(\"Field with field name : \" + fieldName + \" already exists\");\n+        }\n+        addedFieldNames.add(fieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344a0b0df7ca238bb43afd5e5bf516ec4371c1c7"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzkwMzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo0MjoyN1rOHcbPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo0MjoyN1rOHcbPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2ODU2NQ==", "bodyText": "HazelcastSerializationException isn't correct IMO. It should be thrown \"when a problem occurs while serializing/deserializing objects\". This should rather be IllegalStateException.\nBut it's consistent with the same issue 3 lines below...", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r499568565", "createdAt": "2020-10-05T12:42:27Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,10 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (!addedFieldNames.add(fieldName)) {\n+            throw new HazelcastSerializationException(\"Field with field name : \" + fieldName + \" already exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e126e5064164a5bace665b26ed0967948bb6ee3"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjU0NjE1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo1Mjo1MVrOHdHyuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjoyOTo1NFrOHdkWjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5ODQyNA==", "bodyText": "Forgot to mention one potential problem with this approach. In situation when #addPortableArrayField() or #addPortableField() are invoked with incorrect ClassDefinition definition (with zero classId), the field will be added into the addedFieldNames, while, in fact, it wasn't added due to next failed check. The simplest fix would be to remove the field from addedFieldNames before throwing an IllegalArgumentException in those methods, but there might be more elegant solutions like changing validation order.", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r500298424", "createdAt": "2020-10-06T13:52:51Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,10 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (!addedFieldNames.add(fieldName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8d43b7633c7441a129c90553973abacf4a54e8"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTM0NA==", "bodyText": "Good catch. I fixed it.", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r500319344", "createdAt": "2020-10-06T14:14:25Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,10 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (!addedFieldNames.add(fieldName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5ODQyNA=="}, "originalCommit": {"oid": "7b8d43b7633c7441a129c90553973abacf4a54e8"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMzcwNw==", "bodyText": "I'd say it doesn't matter. As soon as the builder throws an exception, it should be considered broken. A code that catches an exception and continue with the builder is very rare I'd say...", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r500403707", "createdAt": "2020-10-06T15:43:08Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,10 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (!addedFieldNames.add(fieldName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5ODQyNA=="}, "originalCommit": {"oid": "7b8d43b7633c7441a129c90553973abacf4a54e8"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2NjM0OA==", "bodyText": "It's normal to keep using the builder after a validation exception was thrown. If we consider the object broken, we must enforce this contract and throw on any subsequent call. A public API shouldn't be based on fuzzy assumptions which only exist in maintainers minds.", "url": "https://github.com/hazelcast/hazelcast/pull/17682#discussion_r500766348", "createdAt": "2020-10-07T06:29:54Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/nio/serialization/ClassDefinitionBuilder.java", "diffHunk": "@@ -213,7 +341,10 @@ public ClassDefinition build() {\n         return cd;\n     }\n \n-    private void check() {\n+    private void check(String fieldName) {\n+        if (!addedFieldNames.add(fieldName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5ODQyNA=="}, "originalCommit": {"oid": "7b8d43b7633c7441a129c90553973abacf4a54e8"}, "originalPosition": 321}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 167, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}