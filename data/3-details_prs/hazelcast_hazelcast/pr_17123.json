{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MzkzMTY3", "number": 17123, "title": "Auditlog - configuration and events", "bodyText": "This PR adds configuration and basic events for Auditlog.\nThe Auditlog implementation is part of the Hazelcast EE. The default (OOTB) implementation uses the ILogger as the logging facility with category (name) \"hazelcast.auditlog\". It can be enabled in hazelcast configuration. E.g. (XML version):\n<hazelcast>\n    <auditlog enabled=\"true\"/>\n</hazelcast>\nIf a custom AuditLogService implementation is required, then it can be configured by using factory class:\n<hazelcast>\n    <auditlog enabled=\"true\">\n        <factory-class-name>\n            com.acme.auditlog.AuditlogToSyslogFactory\n        </factory-class-name>\n        <properties>\n            <property name=\"host\">syslogserver.acme.com</property>\n            <property name=\"port\">514</property>\n            <property name=\"type\">tcp</property>\n        </properties>\n    </auditlog>\n</hazelcast>\nThe message types logged into the auditlog have their ID stored in class com.hazelcast.auditlog.AuditlogTypeIds.\nEE: hazelcast/hazelcast-enterprise#3640", "createdAt": "2020-06-23T08:02:54Z", "url": "https://github.com/hazelcast/hazelcast/pull/17123", "merged": true, "mergeCommit": {"oid": "fe132dea9478f212bf153411de44515a94d7f2ad"}, "closed": true, "closedAt": "2020-08-10T10:37:16Z", "author": {"login": "kwart"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuBDL5gBqjM0NzE3Mzc5OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9e42zgBqjM2Mzc5Njc4MDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e8ef8438beab34a092e753c2b78cceba746985d", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2e8ef8438beab34a092e753c2b78cceba746985d", "committedDate": "2020-06-22T16:11:05Z", "message": "Add auditable events."}, "afterCommit": {"oid": "2e9c3f83c7292ca3d2eac6cdfc7fb9a4e1cdfa0e", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2e9c3f83c7292ca3d2eac6cdfc7fb9a4e1cdfa0e", "committedDate": "2020-06-23T08:19:42Z", "message": "Add auditable events."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e9c3f83c7292ca3d2eac6cdfc7fb9a4e1cdfa0e", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2e9c3f83c7292ca3d2eac6cdfc7fb9a4e1cdfa0e", "committedDate": "2020-06-23T08:19:42Z", "message": "Add auditable events."}, "afterCommit": {"oid": "c8138a48dd703e6b2d3a0d147855b3bafd4ea024", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c8138a48dd703e6b2d3a0d147855b3bafd4ea024", "committedDate": "2020-06-23T09:51:20Z", "message": "Add auditable events."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8138a48dd703e6b2d3a0d147855b3bafd4ea024", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c8138a48dd703e6b2d3a0d147855b3bafd4ea024", "committedDate": "2020-06-23T09:51:20Z", "message": "Add auditable events."}, "afterCommit": {"oid": "de75f7c09b5cc86f6d23dbbac173e27f40d9cb25", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/de75f7c09b5cc86f6d23dbbac173e27f40d9cb25", "committedDate": "2020-06-23T10:45:16Z", "message": "Add auditable events."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df42d83c0cb92189e65d0bb5f827a029786b4740", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/df42d83c0cb92189e65d0bb5f827a029786b4740", "committedDate": "2020-06-23T14:07:35Z", "message": "Failfast when Auditlog is configured in OSS"}, "afterCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b63e3a311cd0b451c42f759de2c6f1f9f637a010", "committedDate": "2020-06-23T15:02:40Z", "message": "Add auditable events."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDA2ODE1", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436406815", "createdAt": "2020-06-24T07:52:40Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1Mjo0MFrOGoG81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1Mjo0MFrOGoG81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDEwMg==", "bodyText": "What is the added value of a Boolean compared to boolean?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444710102", "createdAt": "2020-06-24T07:52:40Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDA5NDg5", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436409489", "createdAt": "2020-06-24T07:56:28Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjoyOFrOGoHFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjoyOFrOGoHFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjM0NQ==", "bodyText": "Why a Boolean?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444712345", "createdAt": "2020-06-24T07:56:28Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpCommandProcessor.java", "diffHunk": "@@ -213,12 +214,22 @@ private boolean authenticate(@Nonnull HttpPostCommand command,\n         }\n         String decodedPass = pass != null ? URLDecoder.decode(pass, \"UTF-8\") : null;\n         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(decodedName, decodedPass);\n+        Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDEwNzcx", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436410771", "createdAt": "2020-06-24T07:58:16Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODoxNlrOGoHJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODoxNlrOGoHJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzQzMg==", "bodyText": "Would be nice to have the audit log dump its content in the Diagnostics.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444713432", "createdAt": "2020-06-24T07:58:16Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "diffHunk": "@@ -18,7 +18,69 @@\n \n public final class AuditlogTypeIds {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDExNzcx", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436411771", "createdAt": "2020-06-24T07:59:40Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1OTo0MFrOGoHMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1OTo0MFrOGoHMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNDE4Ng==", "bodyText": "Boolean vs boolean", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444714186", "createdAt": "2020-06-24T07:59:40Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterJoinManager.java", "diffHunk": "@@ -373,14 +374,25 @@ private void secureLogin(JoinRequest joinRequest, Connection connection) {\n                 throw new SecurityException(\"Expecting security credentials, but credentials could not be found in join request\");\n             }\n             String endpoint = joinRequest.getAddress().getHost();\n+            Boolean passed = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDEzMjIy", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436413222", "createdAt": "2020-06-24T08:01:47Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMTo0N1rOGoHROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMTo0N1rOGoHROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNTMyMA==", "bodyText": "Can't we enable it by default? And at least dump everything into diagnostics. Diagnostics should also be enabled by default but that is another discussion.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r444715320", "createdAt": "2020-06-24T08:01:47Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDEzNjE4", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-436413618", "createdAt": "2020-06-24T08:02:20Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNzkyMDY2", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-443792066", "createdAt": "2020-07-07T11:14:28Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNDoyOFrOGt56fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNjozNlrOGt6RaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Nzk2NQ==", "bodyText": "Leftover SSLConfig, there is one more occurrence.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450787965", "createdAt": "2020-07-07T11:14:28Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTA0NA==", "bodyText": "Can we move these into a public package? I guess these are part of public API now, given that we can't change the IDs after we've released them. Also, maybe we can refer to this file from the AuditlogService javadoc.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450789044", "createdAt": "2020-07-07T11:16:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/impl/AuditlogTypeIds.java", "diffHunk": "@@ -18,7 +18,69 @@\n \n public final class AuditlogTypeIds {\n \n-    public static final String CONNECTION_ASKS_PROTOCOL = \"HZ-1001\";\n+    // Network Events\n+    /**\n+     * Event type ID: Connection accepted.\n+     */\n+    public static final String NETWORK_CONNECT = \"HZ-0101\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTk3NA==", "bodyText": "Not related to this class, but can you complete the javadoc for AuditlogService#eventBuilder?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450791974", "createdAt": "2020-07-07T11:22:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.auditlog;\n+\n+import java.util.Properties;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+\n+/**\n+ * Interface implemented by {@link AuditlogService} factory classes.\n+ */\n+public interface AuditlogServiceFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MzgzMg==", "bodyText": "Unfortunately seems params are an easy way how to leak private API. User implementations can now get references to classes such as com.hazelcast.internal.nio.Connection. I don't see an easy way out of it but I'd prefer that we don't do it.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450793832", "createdAt": "2020-07-07T11:26:36Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODYyMzA4", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-443862308", "createdAt": "2020-07-07T12:57:03Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowM1rOGt9RJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NzowM1rOGt9RJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MjkxNw==", "bodyText": "Can you also add some @Nullable or @Nonnull annotations to the parameters for reference? I guess it's not easy to determine in some cases as it depends on the concrete config class implementation.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450842917", "createdAt": "2020-07-07T12:57:03Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODYzODg3", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-443863887", "createdAt": "2020-07-07T12:58:55Z", "commit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1ODo1NVrOGt9V3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo0NjozOVrOGt_UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDEyNg==", "bodyText": "I'm also thinking if we can somehow document (for example in AuditlogTypeIds) what are the parameters for each type, any maybe use some static strings for reference.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450844126", "createdAt": "2020-07-07T12:58:55Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java", "diffHunk": "@@ -126,14 +127,24 @@ private AuthenticationStatus authenticate() {\n \n     private AuthenticationStatus authenticate(SecurityContext securityContext) {\n         Connection connection = endpoint.getConnection();\n+        Boolean passed = Boolean.FALSE;\n         try {\n             LoginContext lc = securityContext.createClientLoginContext(clusterName, credentials, connection);\n             lc.login();\n             endpoint.setLoginContext(lc);\n+            passed = Boolean.TRUE;\n             return AUTHENTICATED;\n         } catch (LoginException e) {\n             logger.warning(e);\n             return CREDENTIALS_FAILED;\n+        } finally {\n+            nodeEngine.getNode().getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.AUTHENTICATION_CLIENT)\n+                .message(\"Client connection authentication.\")\n+                .addParameter(\"connection\", connection)\n+                .addParameter(\"credentials\", credentials)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTQwOQ==", "bodyText": "Can you use com.hazelcast.internal.util.Preconditions#checkNotNull(T, java.lang.String) instead? It's commonly used in some other config files. It changes the thrown exception type though to NullPointerException.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450845409", "createdAt": "2020-07-07T13:01:01Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AbstractFactoryWithPropertiesConfig.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration base for config types with a factory class and its properties.\n+ *\n+ * @param <T> final child type\n+ */\n+public abstract class AbstractFactoryWithPropertiesConfig<T extends AbstractFactoryWithPropertiesConfig<T>> {\n+\n+    private boolean enabled;\n+    private String factoryClassName;\n+    private Properties properties = new Properties();\n+\n+    /**\n+     * Returns the factory class name.\n+     */\n+    public String getFactoryClassName() {\n+        return factoryClassName;\n+    }\n+\n+    /**\n+     * Sets the factory class name.\n+     */\n+    public T setFactoryClassName(String factoryClassName) {\n+        this.factoryClassName = factoryClassName;\n+        return self();\n+    }\n+\n+    /**\n+     * Returns if this configuration is enabled.\n+     *\n+     * @return {@code true} if enabled, {@code false} otherwise\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables and disables this configuration.\n+     *\n+     * @param enabled {@code true} to enable, {@code false} to disable\n+     */\n+    public T setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return self();\n+    }\n+\n+    /**\n+     * Sets a single property.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value the value of the property to set\n+     * @return the updated SSLConfig\n+     * @throws NullPointerException if name or value is {@code null}\n+     */\n+    public T setProperty(String name, String value) {\n+        properties.put(name, value);\n+        return self();\n+    }\n+\n+    /**\n+     * Gets a property.\n+     *\n+     * @param name the name of the property to get\n+     * @return the value of the property, null if not found\n+     * @throws NullPointerException if name is {@code null}\n+     */\n+    public String getProperty(String name) {\n+        return properties.getProperty(name);\n+    }\n+\n+    /**\n+     * Gets all properties.\n+     *\n+     * @return the properties\n+     */\n+    public Properties getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * Sets the properties.\n+     *\n+     * @param properties the properties to set\n+     * @return the updated SSLConfig\n+     * @throws IllegalArgumentException if properties is {@code null}\n+     */\n+    public T setProperties(Properties properties) {\n+        if (properties == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODc5NA==", "bodyText": "I guess we might also throw InvalidConfigurationException but then it would be different from the behaviour above. WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450868794", "createdAt": "2020-07-07T13:35:26Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/DefaultNodeExtension.java", "diffHunk": "@@ -164,6 +165,12 @@ private void checkSecurityAllowed() {\n                 throw new IllegalStateException(\"Symmetric Encryption requires Hazelcast Enterprise Edition\");\n             }\n         }\n+        AuditlogConfig auditlogConfig = node.getConfig().getAuditlogConfig();\n+        if (auditlogConfig != null && auditlogConfig.isEnabled()) {\n+            if (!BuildInfoProvider.getBuildInfo().isEnterprise()) {\n+                throw new IllegalStateException(\"Auditlog requires Hazelcast Enterprise Edition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTUxMg==", "bodyText": "This is in the internal package, maybe I misunderstood that the SPI was public? The service is in internal too.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450871512", "createdAt": "2020-07-07T13:39:21Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/auditlog/AuditlogServiceFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.auditlog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3Mjg5Mg==", "bodyText": "Do we want to log which member joined?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450872892", "createdAt": "2020-07-07T13:41:23Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "diffHunk": "@@ -400,7 +401,11 @@ public boolean finalizeJoin(MembersView membersView, Address callerAddress, UUID\n             membershipManager.updateMembers(membersView);\n             clusterHeartbeatManager.heartbeat();\n             setJoined(true);\n-\n+            node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(AuditlogTypeIds.CLUSTER_MEMBER_ADDED)\n+                .message(\"Member joined\")\n+                .addParameter(\"membersView\", membersView)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MzI0OQ==", "bodyText": "Do we want to log which member?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450873249", "createdAt": "2020-07-07T13:41:54Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterServiceImpl.java", "diffHunk": "@@ -990,7 +998,12 @@ public void promoteLocalLiteMember() {\n             }\n \n             MemberImpl localMemberInMemberList = membershipManager.getMember(member.getAddress());\n-            if (localMemberInMemberList.isLiteMember()) {\n+            boolean result = localMemberInMemberList.isLiteMember();\n+            node.getNodeExtension().getAuditlogService().eventBuilder(AuditlogTypeIds.CLUSTER_PROMOTE_MEMBER)\n+                .message(\"Promotion of the lite member\")\n+                .addParameter(\"success\", result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDE0OA==", "bodyText": "Do you want to log if it was added or removed?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450874148", "createdAt": "2020-07-07T13:43:12Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -789,6 +803,11 @@ private void sortMembersInMembershipOrder(List<Member> members) {\n \n     private void sendMembershipEventNotifications(MemberImpl member, Set<Member> members, final boolean added) {\n         int eventType = added ? MembershipEvent.MEMBER_ADDED : MembershipEvent.MEMBER_REMOVED;\n+        node.getNodeExtension().getAuditlogService()\n+                .eventBuilder(added ? AuditlogTypeIds.CLUSTER_MEMBER_ADDED : AuditlogTypeIds.CLUSTER_MEMBER_REMOVED)\n+                .message(\"Membership changed\")\n+                .addParameter(\"memberAddress\", member.getAddress())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDQ2Nw==", "bodyText": "Minor - typo: fillFactoryWithPropertiesCofnig -> fillFactoryWithPropertiesConfig", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450874467", "createdAt": "2020-07-07T13:43:43Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractDomConfigProcessor.java", "diffHunk": "@@ -226,21 +227,24 @@ protected ClassFilter parseClassFilterList(Node node) {\n     }\n \n     protected SSLConfig parseSslConfig(Node node) {\n-        SSLConfig sslConfig = new SSLConfig();\n+        return fillFactoryWithPropertiesCofnig(node, new SSLConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NTUyMg==", "bodyText": "I guess we should make clear in the documentation that these invocations are done in performance sensitive places so the logger appender should not do anything too heavy.", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450875522", "createdAt": "2020-07-07T13:45:14Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerAcceptor.java", "diffHunk": "@@ -288,7 +289,12 @@ private void newConnection(final EndpointQualifier qualifier, SocketChannel sock\n             if (logger.isFineEnabled()) {\n                 logger.fine(\"Accepting socket connection from \" + channel.socket().getRemoteSocketAddress());\n             }\n-\n+            serverContext.getAuditLogService()\n+                .eventBuilder(AuditlogTypeIds.NETWORK_CONNECT)\n+                .message(\"New connection accepted.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NjUwOQ==", "bodyText": "What if any users were already using this property to set it to true?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r450876509", "createdAt": "2020-07-07T13:46:39Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1029,8 +1029,6 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty CLIENT_PROTOCOL_UNVERIFIED_MESSAGE_BYTES =\n             new HazelcastProperty(\"hazelcast.client.protocol.max.message.bytes\", 4096);\n \n-    public static final HazelcastProperty AUDIT_LOG_ENABLED = new HazelcastProperty(\"hazelcast.auditlog.enabled\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b63e3a311cd0b451c42f759de2c6f1f9f637a010", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b63e3a311cd0b451c42f759de2c6f1f9f637a010", "committedDate": "2020-06-23T15:02:40Z", "message": "Add auditable events."}, "afterCommit": {"oid": "dc86f17c615f05d077c0d13c50bfdf69668876f9", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dc86f17c615f05d077c0d13c50bfdf69668876f9", "committedDate": "2020-07-09T08:31:54Z", "message": "Add auditable events."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dd0e4a5e4b4d6fa338f2a5e4922027d17cd6123", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2dd0e4a5e4b4d6fa338f2a5e4922027d17cd6123", "committedDate": "2020-07-10T14:20:40Z", "message": "fix checkstyle"}, "afterCommit": {"oid": "bf79c129f6b8b11728afcefba39c39e49b4e63dc", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bf79c129f6b8b11728afcefba39c39e49b4e63dc", "committedDate": "2020-07-10T14:29:42Z", "message": "fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5b1accef50c52e0975b4398895433e5eb6bcfec", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c5b1accef50c52e0975b4398895433e5eb6bcfec", "committedDate": "2020-07-14T14:18:34Z", "message": "Cover review comments"}, "afterCommit": {"oid": "343fd272279ea09e398d062bbc04330b6b0f02d2", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/343fd272279ea09e398d062bbc04330b6b0f02d2", "committedDate": "2020-07-14T14:30:19Z", "message": "Cover review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "343fd272279ea09e398d062bbc04330b6b0f02d2", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/343fd272279ea09e398d062bbc04330b6b0f02d2", "committedDate": "2020-07-14T14:30:19Z", "message": "Cover review comments"}, "afterCommit": {"oid": "53067846f680667c85061607e89c6b56c706cd2f", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/53067846f680667c85061607e89c6b56c706cd2f", "committedDate": "2020-07-21T11:10:39Z", "message": "Implement review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53067846f680667c85061607e89c6b56c706cd2f", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/53067846f680667c85061607e89c6b56c706cd2f", "committedDate": "2020-07-21T11:10:39Z", "message": "Implement review comments"}, "afterCommit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a9c9f3678173970d4d9d27a330bc947c2d6bb465", "committedDate": "2020-07-24T12:56:58Z", "message": "Add auditable events."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Njc0MzA3", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-456674307", "createdAt": "2020-07-28T14:11:32Z", "commit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDA5ODA2", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-463409806", "createdAt": "2020-08-07T15:35:44Z", "commit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDE0MDQw", "url": "https://github.com/hazelcast/hazelcast/pull/17123#pullrequestreview-463414040", "createdAt": "2020-08-07T15:41:49Z", "commit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MTo0OVrOG9er5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MTo0OVrOG9er5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExOTA3Nw==", "bodyText": "Shouldn't this be AuditlogTypeIds.CLUSTER_MEMBER_REMOVED?", "url": "https://github.com/hazelcast/hazelcast/pull/17123#discussion_r467119077", "createdAt": "2020-08-07T15:41:49Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/MembershipManager.java", "diffHunk": "@@ -706,13 +714,19 @@ private void removeMember(MemberImpl member, String reason, boolean shouldCloseC\n             }\n \n             logger.info(\"Removing \" + member);\n-            clusterService.getClusterJoinManager().removeJoin(member.getAddress());\n+            clusterService.getClusterJoinManager().removeJoin(address);\n             clusterService.getClusterHeartbeatManager().removeMember(member);\n             partialDisconnectionHandler.removeMember(member);\n \n             MemberMap newMembers = MemberMap.cloneExcluding(currentMembers, member);\n             setMembers(newMembers);\n \n+            node.getNodeExtension().getAuditlogService().eventBuilder(AuditlogTypeIds.CLUSTER_MEMBER_SUSPECTED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e697f697126bd56654d34b88fe652616451f02a", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5e697f697126bd56654d34b88fe652616451f02a", "committedDate": "2020-08-10T09:00:06Z", "message": "Add auditable events."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9c9f3678173970d4d9d27a330bc947c2d6bb465", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a9c9f3678173970d4d9d27a330bc947c2d6bb465", "committedDate": "2020-07-24T12:56:58Z", "message": "Add auditable events."}, "afterCommit": {"oid": "a37de59e6caba89d04c49067b8c19631ae4f5fc4", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a37de59e6caba89d04c49067b8c19631ae4f5fc4", "committedDate": "2020-08-10T09:11:09Z", "message": "Fix ChangeLoggingRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08b986514ebb6f9c08167e5fbde76cae25e6de45", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/08b986514ebb6f9c08167e5fbde76cae25e6de45", "committedDate": "2020-08-10T09:33:15Z", "message": "Fix ChangeLoggingRule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a37de59e6caba89d04c49067b8c19631ae4f5fc4", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a37de59e6caba89d04c49067b8c19631ae4f5fc4", "committedDate": "2020-08-10T09:11:09Z", "message": "Fix ChangeLoggingRule"}, "afterCommit": {"oid": "08b986514ebb6f9c08167e5fbde76cae25e6de45", "author": {"user": {"login": "kwart", "name": "Josef Cacek"}}, "url": "https://github.com/hazelcast/hazelcast/commit/08b986514ebb6f9c08167e5fbde76cae25e6de45", "committedDate": "2020-08-10T09:33:15Z", "message": "Fix ChangeLoggingRule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3728, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}