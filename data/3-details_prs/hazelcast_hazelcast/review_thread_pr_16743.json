{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzMzNDgz", "number": 16743, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1OToxOFrODpGVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1OToxOFrODpGVPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDIxOTQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientInvocation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1OToxOFrOF4DyOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDowMDozM1rOF5NlSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjU4Ng==", "bodyText": "for non smart, there is really no concept of random, hence, the name is misleading but this is not a major issue.", "url": "https://github.com/hazelcast/hazelcast/pull/16743#discussion_r394326586", "createdAt": "2020-03-18T12:59:18Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientInvocation.java", "diffHunk": "@@ -159,20 +165,41 @@ private void invokeOnSelection() {\n             if (!urgent) {\n                 invocationService.checkInvocationAllowed();\n             }\n+\n+\n             if (isBindToSingleConnection()) {\n-                invocationService.invokeOnConnection(this, (ClientConnection) connection);\n-            } else if (partitionId != -1) {\n-                invocationService.invokeOnPartitionOwner(this, partitionId);\n-            } else if (uuid != null) {\n-                invocationService.invokeOnTarget(this, uuid);\n+                boolean invoked = invocationService.invokeOnConnection(this, (ClientConnection) connection);\n+                if (!invoked) {\n+                    notifyException(new IOException(\"Could not invoke on connection \" + connection));\n+                }\n+                return;\n+            }\n+\n+            boolean invoked;\n+            if (isSmartRoutingEnabled) {\n+                if (partitionId != -1) {\n+                    invoked = invocationService.invokeOnPartitionOwner(this, partitionId);\n+                } else if (uuid != null) {\n+                    invoked = invocationService.invokeOnTarget(this, uuid);\n+                } else {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n+                if (allowRetryOnRandom && !invoked) {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n             } else {\n-                invocationService.invokeOnRandomTarget(this);\n+                invoked = invocationService.invokeOnRandomTarget(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a762a71a712362c3d0c8aec96ed3a14d111bdfc1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MzI3OA==", "bodyText": "How about invokeOnAvailableTarget name for this method?", "url": "https://github.com/hazelcast/hazelcast/pull/16743#discussion_r394353278", "createdAt": "2020-03-18T13:41:01Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientInvocation.java", "diffHunk": "@@ -159,20 +165,41 @@ private void invokeOnSelection() {\n             if (!urgent) {\n                 invocationService.checkInvocationAllowed();\n             }\n+\n+\n             if (isBindToSingleConnection()) {\n-                invocationService.invokeOnConnection(this, (ClientConnection) connection);\n-            } else if (partitionId != -1) {\n-                invocationService.invokeOnPartitionOwner(this, partitionId);\n-            } else if (uuid != null) {\n-                invocationService.invokeOnTarget(this, uuid);\n+                boolean invoked = invocationService.invokeOnConnection(this, (ClientConnection) connection);\n+                if (!invoked) {\n+                    notifyException(new IOException(\"Could not invoke on connection \" + connection));\n+                }\n+                return;\n+            }\n+\n+            boolean invoked;\n+            if (isSmartRoutingEnabled) {\n+                if (partitionId != -1) {\n+                    invoked = invocationService.invokeOnPartitionOwner(this, partitionId);\n+                } else if (uuid != null) {\n+                    invoked = invocationService.invokeOnTarget(this, uuid);\n+                } else {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n+                if (allowRetryOnRandom && !invoked) {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n             } else {\n-                invocationService.invokeOnRandomTarget(this);\n+                invoked = invocationService.invokeOnRandomTarget(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjU4Ng=="}, "originalCommit": {"oid": "a762a71a712362c3d0c8aec96ed3a14d111bdfc1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTY4OQ==", "bodyText": "@puzpuzpuz We have decided to name this invoke . I have also added javadoc for ClientInvocationService to explain the behaviours.", "url": "https://github.com/hazelcast/hazelcast/pull/16743#discussion_r395535689", "createdAt": "2020-03-20T10:00:33Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/impl/ClientInvocation.java", "diffHunk": "@@ -159,20 +165,41 @@ private void invokeOnSelection() {\n             if (!urgent) {\n                 invocationService.checkInvocationAllowed();\n             }\n+\n+\n             if (isBindToSingleConnection()) {\n-                invocationService.invokeOnConnection(this, (ClientConnection) connection);\n-            } else if (partitionId != -1) {\n-                invocationService.invokeOnPartitionOwner(this, partitionId);\n-            } else if (uuid != null) {\n-                invocationService.invokeOnTarget(this, uuid);\n+                boolean invoked = invocationService.invokeOnConnection(this, (ClientConnection) connection);\n+                if (!invoked) {\n+                    notifyException(new IOException(\"Could not invoke on connection \" + connection));\n+                }\n+                return;\n+            }\n+\n+            boolean invoked;\n+            if (isSmartRoutingEnabled) {\n+                if (partitionId != -1) {\n+                    invoked = invocationService.invokeOnPartitionOwner(this, partitionId);\n+                } else if (uuid != null) {\n+                    invoked = invocationService.invokeOnTarget(this, uuid);\n+                } else {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n+                if (allowRetryOnRandom && !invoked) {\n+                    invoked = invocationService.invokeOnRandomTarget(this);\n+                }\n             } else {\n-                invocationService.invokeOnRandomTarget(this);\n+                invoked = invocationService.invokeOnRandomTarget(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjU4Ng=="}, "originalCommit": {"oid": "a762a71a712362c3d0c8aec96ed3a14d111bdfc1"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 741, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}