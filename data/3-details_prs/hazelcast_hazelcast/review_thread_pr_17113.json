{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDQwODg2", "number": 17113, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMToyMFrOEHhyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMToyMFrOEHhyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI4OTg0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMToyMFrOGm8K-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyMjo1MlrOGnrr4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NDkyMA==", "bodyText": "Why are you using a string here? A Double won't do?", "url": "https://github.com/hazelcast/hazelcast/pull/17113#discussion_r443484920", "createdAt": "2020-06-22T11:11:20Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1130,6 +1130,63 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty METRICS_COLLECTION_FREQUENCY\n             = new HazelcastProperty(\"hazelcast.metrics.collection.frequency\");\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 50000);\n+\n+    /**\n+     * Defines the initial backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.init\", 1);\n+\n+    /**\n+     * Defines the maximum backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.max\", 100);\n+\n+    /**\n+     * Defines the multiplier (the speed of the function) for the backoff\n+     * delay for the Enterprise WAN implementation's consumer. It is used\n+     * if the acknowledgment delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.multiplier\", \"1.5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67386d9695440a0d6a13a14765a028722ac96feb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzNDcxNw==", "bodyText": "It was a clean cherry-pick of an already approved PR, didn't modify this part. We can take a look cc @blazember", "url": "https://github.com/hazelcast/hazelcast/pull/17113#discussion_r443534717", "createdAt": "2020-06-22T12:51:04Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1130,6 +1130,63 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty METRICS_COLLECTION_FREQUENCY\n             = new HazelcastProperty(\"hazelcast.metrics.collection.frequency\");\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 50000);\n+\n+    /**\n+     * Defines the initial backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.init\", 1);\n+\n+    /**\n+     * Defines the maximum backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.max\", 100);\n+\n+    /**\n+     * Defines the multiplier (the speed of the function) for the backoff\n+     * delay for the Enterprise WAN implementation's consumer. It is used\n+     * if the acknowledgment delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.multiplier\", \"1.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NDkyMA=="}, "originalCommit": {"oid": "67386d9695440a0d6a13a14765a028722ac96feb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4OTAxMQ==", "bodyText": "There is no constructor with double param. I can add it though.", "url": "https://github.com/hazelcast/hazelcast/pull/17113#discussion_r443589011", "createdAt": "2020-06-22T14:14:37Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1130,6 +1130,63 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty METRICS_COLLECTION_FREQUENCY\n             = new HazelcastProperty(\"hazelcast.metrics.collection.frequency\");\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 50000);\n+\n+    /**\n+     * Defines the initial backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.init\", 1);\n+\n+    /**\n+     * Defines the maximum backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.max\", 100);\n+\n+    /**\n+     * Defines the multiplier (the speed of the function) for the backoff\n+     * delay for the Enterprise WAN implementation's consumer. It is used\n+     * if the acknowledgment delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.multiplier\", \"1.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NDkyMA=="}, "originalCommit": {"oid": "67386d9695440a0d6a13a14765a028722ac96feb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2MzM5NQ==", "bodyText": "Added the double/float support to HazelcastProperties and made this double.", "url": "https://github.com/hazelcast/hazelcast/pull/17113#discussion_r444263395", "createdAt": "2020-06-23T14:22:52Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/properties/ClusterProperty.java", "diffHunk": "@@ -1130,6 +1130,63 @@ private int getWhenNoSSLDetected() {\n     public static final HazelcastProperty METRICS_COLLECTION_FREQUENCY\n             = new HazelcastProperty(\"hazelcast.metrics.collection.frequency\");\n \n+    /**\n+     * Defines the pending invocation threshold for the Enterprise WAN\n+     * replication implementation. Exceeding this threshold on a WAN\n+     * consumer member makes the member delaying the WAN acknowledgment,\n+     * thus slowing down the WAN publishers on the source side that send\n+     * WAN events to the given WAN consumer. Setting this value to\n+     * negative turns off the acknowledgement delaying feature.\n+     *\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_INVOCATION_THRESHOLD\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.invocation.threshold\", 50000);\n+\n+    /**\n+     * Defines the initial backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.init\", 1);\n+\n+    /**\n+     * Defines the maximum backoff delay for the Enterprise WAN\n+     * implementation's consumer. It is used if the acknowledgment\n+     * delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.max\", 100);\n+\n+    /**\n+     * Defines the multiplier (the speed of the function) for the backoff\n+     * delay for the Enterprise WAN implementation's consumer. It is used\n+     * if the acknowledgment delaying feature is enabled by setting\n+     * {@link #WAN_CONSUMER_INVOCATION_THRESHOLD} to a non-negative value\n+     * and that the threshold is exceeded.\n+     *\n+     * @see #WAN_CONSUMER_INVOCATION_THRESHOLD\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_INIT_MS\n+     * @see #WAN_CONSUMER_ACK_DELAY_BACKOFF_MAX_MS\n+     */\n+    public static final HazelcastProperty WAN_CONSUMER_ACK_DELAY_BACKOFF_MULTIPLIER\n+            = new HazelcastProperty(\"hazelcast.wan.consumer.ack.delay.backoff.multiplier\", \"1.5\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NDkyMA=="}, "originalCommit": {"oid": "67386d9695440a0d6a13a14765a028722ac96feb"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 605, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}