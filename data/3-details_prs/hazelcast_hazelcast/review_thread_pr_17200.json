{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjU2Mjcw", "number": 17200, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1M1rOENQybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoyMDowOFrOENyu3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQxOTk2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1M1rOGv2AsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0NTo0NVrOGv-Q5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTE2OA==", "bodyText": "Minor: I think we can move this to AbstractDomConfigProcessor as this is common for clients and members.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452821168", "createdAt": "2020-07-10T12:47:53Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -2927,6 +2931,23 @@ private void handleMetricsJmx(Node node) {\n         }\n     }\n \n+    private void handleInstanceTracking(Node node) {\n+        InstanceTrackingConfig trackingConfig = config.getInstanceTrackingConfig();\n+\n+        Node attrEnabled = node.getAttributes().getNamedItem(\"enabled\");\n+        boolean enabled = getBooleanValue(getTextContent(attrEnabled));\n+        trackingConfig.setEnabled(enabled);\n+\n+        for (Node n : childElements(node)) {\n+            final String name = cleanNodeName(n);\n+            if (\"file-name\".equals(name)) {\n+                trackingConfig.setFileName(getTextContent(n));\n+            } else if (\"format-pattern\".equals(name)) {\n+                trackingConfig.setFormatPattern(getTextContent(n));\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjM5MQ==", "bodyText": "Done.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452956391", "createdAt": "2020-07-10T16:45:45Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -2927,6 +2931,23 @@ private void handleMetricsJmx(Node node) {\n         }\n     }\n \n+    private void handleInstanceTracking(Node node) {\n+        InstanceTrackingConfig trackingConfig = config.getInstanceTrackingConfig();\n+\n+        Node attrEnabled = node.getAttributes().getNamedItem(\"enabled\");\n+        boolean enabled = getBooleanValue(getTextContent(attrEnabled));\n+        trackingConfig.setEnabled(enabled);\n+\n+        for (Node n : childElements(node)) {\n+            final String name = cleanNodeName(n);\n+            if (\"file-name\".equals(name)) {\n+                trackingConfig.setFileName(getTextContent(n));\n+            } else if (\"format-pattern\".equals(name)) {\n+                trackingConfig.setFormatPattern(getTextContent(n));\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTE2OA=="}, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ1Mjc2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo1Nzo1MlrOGv2UtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0NTo0OVrOGv-RAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNjI5Mg==", "bodyText": "Seems to be a leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452826292", "createdAt": "2020-07-10T12:57:52Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -324,6 +324,12 @@ hazelcast:\n       enabled: true\n     collection-frequency-seconds: 5\n \n+  instance-tracking:\n+    enabled: false\n+\n+  instance-config:\n+    enabled: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjQxNw==", "bodyText": "Removed.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452956417", "createdAt": "2020-07-10T16:45:49Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/resources/hazelcast-default.yaml", "diffHunk": "@@ -324,6 +324,12 @@ hazelcast:\n       enabled: true\n     collection-frequency-seconds: 5\n \n+  instance-tracking:\n+    enabled: false\n+\n+  instance-config:\n+    enabled: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNjI5Mg=="}, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ2MTkyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/ConfigCompatibilityChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowMDozNlrOGv2aWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowMDozNlrOGv2aWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNzczNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452827736", "createdAt": "2020-07-10T13:00:36Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/ConfigCompatibilityChecker.java", "diffHunk": "@@ -129,6 +129,12 @@ static boolean isCompatible(Config c1, Config c2) {\n         checkCompatibleConfigs(\"cp subsystem\", c1, c2, singletonMap(\"\", c1.getCPSubsystemConfig()),\n                 singletonMap(\"\", c2.getCPSubsystemConfig()), new CPSubsystemConfigChecker());\n \n+        checkCompatibleConfigs(\"metrics\", c1.getMetricsConfig(), c2.getMetricsConfig(), new MetricsConfigChecker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQ2NzgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/YamlConfigBuilderTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzowMjoyM1rOGv2d7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToyNzoyMVrOGwDQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODY1Mw==", "bodyText": "Since it is disabled by default, I would test with true.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452828653", "createdAt": "2020-07-10T13:02:23Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/YamlConfigBuilderTest.java", "diffHunk": "@@ -3458,6 +3458,23 @@ public void testMetricsConfig() {\n         assertEquals(11, metricsMcConfig.getRetentionSeconds());\n     }\n \n+    @Override\n+    @Test\n+    public void testInstanceTrackingConfig() {\n+        String yaml = \"\"\n+                + \"hazelcast:\\n\"\n+                + \"  instance-tracking:\\n\"\n+                + \"    enabled: false\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NzE0Nw==", "bodyText": "Changed to true. Actually I intentionally set it to false because I was afraid it would create files that weren't being cleaned up. But hopefully writing to /dummy/file will fail :) If you have some ideas for file names that will definitely fail and throw an exception, we can change it to that.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r452957147", "createdAt": "2020-07-10T16:47:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/config/YamlConfigBuilderTest.java", "diffHunk": "@@ -3458,6 +3458,23 @@ public void testMetricsConfig() {\n         assertEquals(11, metricsMcConfig.getRetentionSeconds());\n     }\n \n+    @Override\n+    @Test\n+    public void testInstanceTrackingConfig() {\n+        String yaml = \"\"\n+                + \"hazelcast:\\n\"\n+                + \"  instance-tracking:\\n\"\n+                + \"    enabled: false\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODY1Mw=="}, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODcyNw==", "bodyText": "I think it's fine here, we don't start an instance with the created config, we test only the parser.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453028727", "createdAt": "2020-07-10T19:05:48Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/config/YamlConfigBuilderTest.java", "diffHunk": "@@ -3458,6 +3458,23 @@ public void testMetricsConfig() {\n         assertEquals(11, metricsMcConfig.getRetentionSeconds());\n     }\n \n+    @Override\n+    @Test\n+    public void testInstanceTrackingConfig() {\n+        String yaml = \"\"\n+                + \"hazelcast:\\n\"\n+                + \"  instance-tracking:\\n\"\n+                + \"    enabled: false\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODY1Mw=="}, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzODA5OA==", "bodyText": "Ah. I changed it on all places where we were testing some config, including where we start an instance (I think Spring?) so maybe I can revert there.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453038098", "createdAt": "2020-07-10T19:27:21Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/config/YamlConfigBuilderTest.java", "diffHunk": "@@ -3458,6 +3458,23 @@ public void testMetricsConfig() {\n         assertEquals(11, metricsMcConfig.getRetentionSeconds());\n     }\n \n+    @Override\n+    @Test\n+    public void testInstanceTrackingConfig() {\n+        String yaml = \"\"\n+                + \"hazelcast:\\n\"\n+                + \"  instance-tracking:\\n\"\n+                + \"    enabled: false\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyODY1Mw=="}, "originalCommit": {"oid": "1182921f3815d6f3b274a456ae2e803372f694a6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODc3MjQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/start.bat", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToxNDoyN1rOGwkFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxMDowMFrOGx9T9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjEyNw==", "bodyText": "Did you consider moving the property into the HazelcastMemberStarterclass? It could help to identify cases when users start standalone members with java -jar hazelast-x.y.z.jar", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453576127", "createdAt": "2020-07-13T11:14:27Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/resources/start.bat", "diffHunk": "@@ -40,6 +40,6 @@ ECHO # JAVA_OPTS=%JAVA_OPTS%\n ECHO # starting now....\"\r\n ECHO ########################################\r\n \r\n-start \"hazelcast-imdg\" \"%RUN_JAVA%\" %JAVA_OPTS% -cp \"%CLASSPATH%\" \"com.hazelcast.core.server.HazelcastMemberStarter\"\r\n+start \"hazelcast-imdg\" \"%RUN_JAVA%\" %JAVA_OPTS% -cp \"%CLASSPATH%\" -Dhazelcast.tracking.server=true \"com.hazelcast.core.server.HazelcastMemberStarter\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzk0Mw==", "bodyText": "This is a good point \ud83d\udc4d We define HazelcastMemberStarter as the main class in the jar, which also needs be treated as server.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r455037943", "createdAt": "2020-07-15T13:10:00Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/resources/start.bat", "diffHunk": "@@ -40,6 +40,6 @@ ECHO # JAVA_OPTS=%JAVA_OPTS%\n ECHO # starting now....\"\r\n ECHO ########################################\r\n \r\n-start \"hazelcast-imdg\" \"%RUN_JAVA%\" %JAVA_OPTS% -cp \"%CLASSPATH%\" \"com.hazelcast.core.server.HazelcastMemberStarter\"\r\n+start \"hazelcast-imdg\" \"%RUN_JAVA%\" %JAVA_OPTS% -cp \"%CLASSPATH%\" -Dhazelcast.tracking.server=true \"com.hazelcast.core.server.HazelcastMemberStarter\"\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjEyNw=="}, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODc3NDk4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/start.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToxNTowN1rOGwkHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToxNTowN1rOGwkHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjUwNA==", "bodyText": "dtto\nDid you consider moving the property into the HazelcastMemberStarterclass? It could help to identify cases when users start standalone members with java -jar hazelast-x.y.z.jar", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453576504", "createdAt": "2020-07-13T11:15:07Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/resources/start.sh", "diffHunk": "@@ -47,4 +47,4 @@ echo \"# JAVA_OPTS=$JAVA_OPTS\"\n echo \"# starting now....\"\n echo \"########################################\"\n \n-\"$RUN_JAVA\" -server $JAVA_OPTS com.hazelcast.core.server.HazelcastMemberStarter\n+\"$RUN_JAVA\" -server $JAVA_OPTS -Dhazelcast.tracking.server=true com.hazelcast.core.server.HazelcastMemberStarter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgzNDg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzozMlrOGwkrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzozMlrOGwkrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * a $HZ_IT&#123; prefix and followed by &#125;. For instance, a placeholder for\n          \n          \n            \n                 * a $HZ_INSTANCE_TRACKING&#123; prefix and followed by &#125;. For instance, a placeholder for", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453585711", "createdAt": "2020-07-13T11:33:32Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+/**\n+ * Configures tracking of a running Hazelcast instance. For now, this is\n+ * limited to writing information about the Hazelcast instance to a file\n+ * while the instance is starting.\n+ * <p>\n+ * The file is overwritten on every start of the Hazelcast instance and if\n+ * multiple instance share the same file system, every instance will\n+ * overwrite the tracking file of a previously started instance.\n+ * <p>\n+ * If this instance is unable to write the file, the exception is logged and\n+ * the instance is allowed to start.\n+ *\n+ * @since 4.1\n+ */\n+public class InstanceTrackingConfig {\n+\n+    /**\n+     * Default file to which the instance metadata will be written.\n+     */\n+    public static final Path DEFAULT_FILE = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"Hazelcast.process\");\n+\n+    /**\n+     * Namespace for the placeholders in the file name and format pattern to\n+     * distinguish between different types of placeholders.\n+     */\n+    public static final String PLACEHOLDER_NAMESPACE = \"HZ_INSTANCE_TRACKING\";\n+\n+    private boolean enabled;\n+    private String fileName;\n+    private String formatPattern;\n+\n+    public InstanceTrackingConfig() {\n+        super();\n+    }\n+\n+    public InstanceTrackingConfig(InstanceTrackingConfig other) {\n+        this.enabled = other.enabled;\n+        this.fileName = other.fileName;\n+        this.formatPattern = other.formatPattern;\n+    }\n+\n+    /**\n+     * Returns {@code true} if instance tracking is enabled.\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables or disables instance tracking.\n+     *\n+     * @param enabled {@code true} if instance tracking should be enabled\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the name of the file which will contain the tracking metadata. If\n+     * {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     */\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    /**\n+     * Sets the name of the file which will contain the tracking metadata. If set\n+     * to {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     *\n+     * @param fileName the name of the file to contain the tracking metadata\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $HZ_IT&#123; prefix and followed by &#125;. For instance, a placeholder for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgzNjA4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzo1NFrOGwkr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMzo1NFrOGwkr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * would be $&#123;start_timestamp&#125;.\n          \n          \n            \n                 * would be $HZ_INSTANCE_TRACKING&#123;start_timestamp&#125;.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453585896", "createdAt": "2020-07-13T11:33:54Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+/**\n+ * Configures tracking of a running Hazelcast instance. For now, this is\n+ * limited to writing information about the Hazelcast instance to a file\n+ * while the instance is starting.\n+ * <p>\n+ * The file is overwritten on every start of the Hazelcast instance and if\n+ * multiple instance share the same file system, every instance will\n+ * overwrite the tracking file of a previously started instance.\n+ * <p>\n+ * If this instance is unable to write the file, the exception is logged and\n+ * the instance is allowed to start.\n+ *\n+ * @since 4.1\n+ */\n+public class InstanceTrackingConfig {\n+\n+    /**\n+     * Default file to which the instance metadata will be written.\n+     */\n+    public static final Path DEFAULT_FILE = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"Hazelcast.process\");\n+\n+    /**\n+     * Namespace for the placeholders in the file name and format pattern to\n+     * distinguish between different types of placeholders.\n+     */\n+    public static final String PLACEHOLDER_NAMESPACE = \"HZ_INSTANCE_TRACKING\";\n+\n+    private boolean enabled;\n+    private String fileName;\n+    private String formatPattern;\n+\n+    public InstanceTrackingConfig() {\n+        super();\n+    }\n+\n+    public InstanceTrackingConfig(InstanceTrackingConfig other) {\n+        this.enabled = other.enabled;\n+        this.fileName = other.fileName;\n+        this.formatPattern = other.formatPattern;\n+    }\n+\n+    /**\n+     * Returns {@code true} if instance tracking is enabled.\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables or disables instance tracking.\n+     *\n+     * @param enabled {@code true} if instance tracking should be enabled\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the name of the file which will contain the tracking metadata. If\n+     * {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     */\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    /**\n+     * Sets the name of the file which will contain the tracking metadata. If set\n+     * to {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     *\n+     * @param fileName the name of the file to contain the tracking metadata\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $HZ_IT&#123; prefix and followed by &#125;. For instance, a placeholder for\n+     * the {@link InstanceTrackingProperties#START_TIMESTAMP}\n+     * would be $&#123;start_timestamp&#125;.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODg0MjcyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozNTo1MFrOGwkv8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozNTo1MFrOGwkv8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NjkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * a $&#123; prefix and followed by &#125;. For instance, a placeholder for\n          \n          \n            \n                 * a $HZ_INSTANCE_TRACKING&#123; prefix and followed by &#125;. For instance, a placeholder for", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453586928", "createdAt": "2020-07-13T11:35:50Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+/**\n+ * Configures tracking of a running Hazelcast instance. For now, this is\n+ * limited to writing information about the Hazelcast instance to a file\n+ * while the instance is starting.\n+ * <p>\n+ * The file is overwritten on every start of the Hazelcast instance and if\n+ * multiple instance share the same file system, every instance will\n+ * overwrite the tracking file of a previously started instance.\n+ * <p>\n+ * If this instance is unable to write the file, the exception is logged and\n+ * the instance is allowed to start.\n+ *\n+ * @since 4.1\n+ */\n+public class InstanceTrackingConfig {\n+\n+    /**\n+     * Default file to which the instance metadata will be written.\n+     */\n+    public static final Path DEFAULT_FILE = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"Hazelcast.process\");\n+\n+    /**\n+     * Namespace for the placeholders in the file name and format pattern to\n+     * distinguish between different types of placeholders.\n+     */\n+    public static final String PLACEHOLDER_NAMESPACE = \"HZ_INSTANCE_TRACKING\";\n+\n+    private boolean enabled;\n+    private String fileName;\n+    private String formatPattern;\n+\n+    public InstanceTrackingConfig() {\n+        super();\n+    }\n+\n+    public InstanceTrackingConfig(InstanceTrackingConfig other) {\n+        this.enabled = other.enabled;\n+        this.fileName = other.fileName;\n+        this.formatPattern = other.formatPattern;\n+    }\n+\n+    /**\n+     * Returns {@code true} if instance tracking is enabled.\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables or disables instance tracking.\n+     *\n+     * @param enabled {@code true} if instance tracking should be enabled\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the name of the file which will contain the tracking metadata. If\n+     * {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     */\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    /**\n+     * Sets the name of the file which will contain the tracking metadata. If set\n+     * to {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     *\n+     * @param fileName the name of the file to contain the tracking metadata\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $HZ_IT&#123; prefix and followed by &#125;. For instance, a placeholder for\n+     * the {@link InstanceTrackingProperties#START_TIMESTAMP}\n+     * would be $&#123;start_timestamp&#125;.\n+     * <p>\n+     * The placeholders are resolved in a fail-safe manner. Any incorrect syntax\n+     * is ignored and only the known properties are resolved, placeholders for\n+     * any parameters which do not have defined values will be ignored. This also\n+     * means that if there is a missing closing bracket in one of the placeholders,\n+     * the property name will be resolved as anything from the opening bracket\n+     * to the next closing bracket, which might contain additional opening brackets.\n+     * <p>\n+     * If set to {@code null}, a JSON formatted output will be used.\n+     *\n+     * @return the pattern for the instance tracking file\n+     * @see InstanceTrackingProperties\n+     */\n+    public String getFormatPattern() {\n+        return formatPattern;\n+    }\n+\n+    /**\n+     * Sets the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $&#123; prefix and followed by &#125;. For instance, a placeholder for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODg0MzU1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozNjowNlrOGwkwbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozNjowNlrOGwkwbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NzA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * would be $&#123;start_timestamp&#125;.\n          \n          \n            \n                 * would be $HZ_INSTANCE_TRACKING&#123;start_timestamp&#125;.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453587052", "createdAt": "2020-07-13T11:36:06Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/java/com/hazelcast/config/InstanceTrackingConfig.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+/**\n+ * Configures tracking of a running Hazelcast instance. For now, this is\n+ * limited to writing information about the Hazelcast instance to a file\n+ * while the instance is starting.\n+ * <p>\n+ * The file is overwritten on every start of the Hazelcast instance and if\n+ * multiple instance share the same file system, every instance will\n+ * overwrite the tracking file of a previously started instance.\n+ * <p>\n+ * If this instance is unable to write the file, the exception is logged and\n+ * the instance is allowed to start.\n+ *\n+ * @since 4.1\n+ */\n+public class InstanceTrackingConfig {\n+\n+    /**\n+     * Default file to which the instance metadata will be written.\n+     */\n+    public static final Path DEFAULT_FILE = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"Hazelcast.process\");\n+\n+    /**\n+     * Namespace for the placeholders in the file name and format pattern to\n+     * distinguish between different types of placeholders.\n+     */\n+    public static final String PLACEHOLDER_NAMESPACE = \"HZ_INSTANCE_TRACKING\";\n+\n+    private boolean enabled;\n+    private String fileName;\n+    private String formatPattern;\n+\n+    public InstanceTrackingConfig() {\n+        super();\n+    }\n+\n+    public InstanceTrackingConfig(InstanceTrackingConfig other) {\n+        this.enabled = other.enabled;\n+        this.fileName = other.fileName;\n+        this.formatPattern = other.formatPattern;\n+    }\n+\n+    /**\n+     * Returns {@code true} if instance tracking is enabled.\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Enables or disables instance tracking.\n+     *\n+     * @param enabled {@code true} if instance tracking should be enabled\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the name of the file which will contain the tracking metadata. If\n+     * {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     */\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    /**\n+     * Sets the name of the file which will contain the tracking metadata. If set\n+     * to {@code null}, {@link InstanceTrackingConfig#DEFAULT_FILE} is used instead.\n+     * <p>\n+     * The filename can contain placeholders that will be resolved in the same way\n+     * as placeholders for the format pattern (see {@link #setFormatPattern(String)}).\n+     *\n+     * @param fileName the name of the file to contain the tracking metadata\n+     * @return this configuration\n+     */\n+    public InstanceTrackingConfig setFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $HZ_IT&#123; prefix and followed by &#125;. For instance, a placeholder for\n+     * the {@link InstanceTrackingProperties#START_TIMESTAMP}\n+     * would be $&#123;start_timestamp&#125;.\n+     * <p>\n+     * The placeholders are resolved in a fail-safe manner. Any incorrect syntax\n+     * is ignored and only the known properties are resolved, placeholders for\n+     * any parameters which do not have defined values will be ignored. This also\n+     * means that if there is a missing closing bracket in one of the placeholders,\n+     * the property name will be resolved as anything from the opening bracket\n+     * to the next closing bracket, which might contain additional opening brackets.\n+     * <p>\n+     * If set to {@code null}, a JSON formatted output will be used.\n+     *\n+     * @return the pattern for the instance tracking file\n+     * @see InstanceTrackingProperties\n+     */\n+    public String getFormatPattern() {\n+        return formatPattern;\n+    }\n+\n+    /**\n+     * Sets the pattern used to render the contents of the instance tracking file.\n+     * It may contain placeholders for properties listed in the\n+     * {@link InstanceTrackingProperties} enum. The placeholders are defined by\n+     * a $&#123; prefix and followed by &#125;. For instance, a placeholder for\n+     * the {@link InstanceTrackingProperties#START_TIMESTAMP}\n+     * would be $&#123;start_timestamp&#125;.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODk1Njc3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-client-full-example.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxMjo0M1rOGwl2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxMjo0M1rOGwl2YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNDk2MQ==", "bodyText": "Maybe, sample file-name and format-pattern values would help here.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453604961", "createdAt": "2020-07-13T12:12:43Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/resources/hazelcast-client-full-example.xml", "diffHunk": "@@ -908,4 +908,48 @@\n         <collection-frequency-seconds>42</collection-frequency-seconds>\n     </metrics>\n \n+    <!--\n+      ===== HAZELCAST INSTANCE TRACKING CONFIGURATION =====\n+\n+      Configuration element's name is <instance-tracking>.\n+\n+      It has the following attributes:\n+      - enabled:\n+          Enables or disables instance tracking.\n+\n+      It has the following sub-elements:\n+      * <format-pattern>:\n+          Sets the pattern used to render the contents of the instance tracking file.\n+          It may contain placeholders for these properties:\n+          - \"product\": The instance product name, e.g. \"Hazelcast\" or \"Hazelcast Enterprise\".\n+          - \"version\": The instance version.\n+          - \"mode\": The instance mode which can be \"server\", \"embedded\" or \"client\".\n+          - \"start_timestamp\": The timestamp of when the instance was started expressed the difference,\n+          measured in milliseconds, between the current time and midnight, January 1, 1970 UTC\n+          - \"licensed\": If this instance is using a license or not. The value 0 signifies\n+          that there is no license set and the value 1 signifies that a license is in use.\n+          - \"pid\": Attempts to get the process ID value. The algorithm does not guarantee to get the\n+          process ID on all JVMs and operating systems so please test before use. In case we are unable to\n+          get the PID, the value will be -1.\n+          The placeholders are defined by a $HZ_INSTANCE_TRACKING{ prefix and followed by }. For instance,\n+          a placeholder for the \"start_timestamp\" would be $HZ_INSTANCE_TRACKING{start_timestamp}.\n+          The placeholders are resolved in a fail-safe manner. Any incorrect syntax\n+          is ignored and only the known properties are resolved, placeholders for\n+          any parameters which do not have defined values will be ignored. This also\n+          means that if there is a missing closing bracket in one of the placeholders,\n+          the property name will be resolved as anything from the opening bracket\n+          to the next closing bracket, which might contain additional opening brackets.\n+          If unset, a JSON formatted output will be used.\n+      * <file-name>:\n+          Sets the name of the file which will contain the tracking metadata. If left unset\n+          a file named \"Hazelcast.process\" will be created in the directory as returned by\n+          System.getProperty(\"java.io.tmpdir\").\n+          The filename can contain placeholders that will be resolved in the same way\n+          as placeholders for the format pattern.\n+\n+  -->\n+    <instance-tracking enabled=\"false\">\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODk2MTIzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/resources/hazelcast-full-example.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxNDoxMFrOGwl5Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxNDoxMFrOGwl5Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTY0Ng==", "bodyText": "Maybe, sample file-name and format-pattern values would help here.", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453605646", "createdAt": "2020-07-13T12:14:10Z", "author": {"login": "kwart"}, "path": "hazelcast/src/main/resources/hazelcast-full-example.xml", "diffHunk": "@@ -3442,6 +3442,50 @@\n         <collection-frequency-seconds>10</collection-frequency-seconds>\n     </metrics>\n \n+    <!--\n+      ===== HAZELCAST INSTANCE TRACKING CONFIGURATION =====\n+\n+      Configuration element's name is <instance-tracking>.\n+\n+      It has the following attributes:\n+      - enabled:\n+          Enables or disables instance tracking.\n+\n+      It has the following sub-elements:\n+      * <format-pattern>:\n+          Sets the pattern used to render the contents of the instance tracking file.\n+          It may contain placeholders for these properties:\n+          - \"product\": The instance product name, e.g. \"Hazelcast\" or \"Hazelcast Enterprise\".\n+          - \"version\": The instance version.\n+          - \"mode\": The instance mode which can be \"server\", \"embedded\" or \"client\".\n+          - \"start_timestamp\": The timestamp of when the instance was started expressed the difference,\n+          measured in milliseconds, between the current time and midnight, January 1, 1970 UTC\n+          - \"licensed\": If this instance is using a license or not. The value 0 signifies\n+          that there is no license set and the value 1 signifies that a license is in use.\n+          - \"pid\": Attempts to get the process ID value. The algorithm does not guarantee to get the\n+          process ID on all JVMs and operating systems so please test before use. In case we are unable to\n+          get the PID, the value will be -1.\n+          The placeholders are defined by a $HZ_INSTANCE_TRACKING{ prefix and followed by }.\n+          For instance, a placeholder for the \"start_timestamp\" would be $HZ_INSTANCE_TRACKING{start_timestamp}.\n+          The placeholders are resolved in a fail-safe manner. Any incorrect syntax\n+          is ignored and only the known properties are resolved, placeholders for\n+          any parameters which do not have defined values will be ignored. This also\n+          means that if there is a missing closing bracket in one of the placeholders,\n+          the property name will be resolved as anything from the opening bracket\n+          to the next closing bracket, which might contain additional opening brackets.\n+          If unset, a JSON formatted output will be used.\n+      * <file-name>:\n+          Sets the name of the file which will contain the tracking metadata. If left unset\n+          a file named \"Hazelcast.process\" will be created in the directory as returned by\n+          System.getProperty(\"java.io.tmpdir\").\n+          The filename can contain placeholders that will be resolved in the same way\n+          as placeholders for the format pattern.\n+\n+  -->\n+    <instance-tracking enabled=\"false\">\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODk4MTQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/config/ConfigCompatibilityChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoyMDowOFrOGwmFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoyMDowOFrOGwmFMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwODc1NQ==", "bodyText": "The same expression as on the previous line...", "url": "https://github.com/hazelcast/hazelcast/pull/17200#discussion_r453608755", "createdAt": "2020-07-13T12:20:08Z", "author": {"login": "kwart"}, "path": "hazelcast/src/test/java/com/hazelcast/config/ConfigCompatibilityChecker.java", "diffHunk": "@@ -775,6 +781,51 @@ MetricsConfig getDefault(Config c) {\n         }\n     }\n \n+    public static class SqlConfigChecker extends ConfigChecker<SqlConfig> {\n+\n+        @Override\n+        boolean check(SqlConfig c1, SqlConfig c2) {\n+            if (c1 == c2) {\n+                return true;\n+            }\n+            if (c1 == null || c2 == null) {\n+                return false;\n+            }\n+\n+            return c1.getExecutorPoolSize() == c2.getExecutorPoolSize()\n+                    && c1.getOperationPoolSize() == c2.getOperationPoolSize()\n+                    && c1.getOperationPoolSize() == c2.getOperationPoolSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd78001fa58ce794198c7b3d8973393cf8433cc"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 467, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}