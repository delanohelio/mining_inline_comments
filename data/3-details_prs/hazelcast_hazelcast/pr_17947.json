{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzY4MTc2", "number": 17947, "title": "SQL Expression Fixes [IMDG-144, IMDG-194]", "bodyText": "This PR fixes multiple problems to SQL expressions handling that we introduced in 4.1.\nEE PR: https://github.com/hazelcast/hazelcast-enterprise/pull/3874\nGeneral Ideas\n\nWe no longer rely on Apache Calcite for inference and coercion. All operators have custom inference strategies, and we explicitly disable calls to Apache Calcite coercion logic to make sure that we covered all cases, see HazelcastTypeCoercion.xxxCoercion methods. This way we ensure that all the implicit type conversions are under our control.\nEvery operator now provides a custom operand checker implementation. Inside these implementations, we perform coercion (see usages of HazelcastTypeCoercion.coerceOperandType) and also instantiate operator converters. The latter is needed to perform the proper operator conversions during query execution, that are consistent with our inference rules. For example, if we have bigintField + ?, and resolved parameter type to BIGINT, we set the operator converter that will allow for TINYINT/SMALLIN/INTEGER -> BIGINT conversions, but not VARCHAR -> BIGINT, etc.\nAs a consequence of the previous point, we no longer define the implicit or explicit casts in the design documents. Instead, we only define the valid conversions between types. It is up to the specific operator to define what could be converted implicitly.\nTo have consistent error reporting for invalid signatures, we introduce the new class HazelcastCallBinding that intercepts the call that produces a signature exception and provide our custom error message.\nGenerated expression tests are removed because they required the duplication of the inference code, which makes them unreliable. Complex logic inside tests is an antipattern, because you may make the mistake in this logic with the same probability as in the code being tested. Instead, many more straightforward integration tests are added, with no complex logic inside.\n\nHacks\nThere are a number of hacks and workarounds in the code that allows us to overcome Apache Calcite bugs and limitations.\n\nApache Calcite loses information about the expression's return type when transitioning between validation and conversion phases. To fix it, we put information about the real return type of the expression to a thread-local and then read in a specially crafted top-level return type inference strategy HazelcastReturnTypeInference.\nSimilarly to the previous point, Apache Calcite loses information about the derived literal type. We fix it in HazelcastSqlToRelConverter.convertLiteral.\nApache Calcite applies various simplification rules to CAST(literal ...) expressions. Some of them lead to incorrect results. For example, Apache Calcite may convert CAST(Short.MAX_VALUE as TINYINT) to -1, losing the significant digits. We handle all these problematic places in HazelcastSqlToRelConverter.convertCast (see detailed JavaDoc there for the specific fixes).\nApache Calcite cannot infer operand types recursively, which leads to arbitrary errors for deep expression trees. To fix this, we introduce the HazelcastOperandTypeCheckerAware interface that every operator must extend. This interface contains the logic that forces recursive operand type inference.\nThe HazelcastSqlOperatorTable.RewriteVisitor class is used to ensure that we replaced all originally parsed operators with our own implementations. Its implementation is more strict than in 4.1 - we require all operators to be replaced with our own implementations. Otherwise, we cannot guarantee that the produced operator tree relies on our own inference/coercion logic.\n\nJet Risks\nThis PR is likely to break Jet integration because we now have a strict list of rules that needs to be followed. Specifically, the (1) operator must be defined in the HazelcastSqlOperatorTable, (2) operator must extend one of the classes from the com.hazelcast.sql.impl.calcite.validate.operators.common package, (3) operator must provide its own type checking routine. Therefore, the Jet team will have to adjust their implementations of operators that are currently not implemented in IMDG, such as SUM/AVG. This could be painful but is necessary to ensure that we have consistent behavior across operators.\nCloses #17300\nCloses #17301\nCloses #17311\nCloses #17315\nCloses #17476", "createdAt": "2020-12-08T10:57:54Z", "url": "https://github.com/hazelcast/hazelcast/pull/17947", "merged": true, "mergeCommit": {"oid": "55c2e1ad68ffd0a93805e58378f18884fae3ba92"}, "closed": true, "closedAt": "2020-12-21T10:18:40Z", "author": {"login": "devozerov"}, "timelineItems": {"totalCount": 125, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmWj10gH2gAyNTM0MzY4MTc2OmViNmJhMGUxMjAyNTczMTk2ZDM0MTE3MDIzNTExMzgwYTNhM2ZkNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoQ8HcgFqTU1NjE4MDMzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eb6ba0e1202573196d34117023511380a3a3fd4e", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/eb6ba0e1202573196d34117023511380a3a3fd4e", "committedDate": "2020-12-15T09:03:25Z", "message": "Merge branch 'master' into expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe4d3648a660674230b6b48cf22029d16f786e3", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8fe4d3648a660674230b6b48cf22029d16f786e3", "committedDate": "2020-12-15T11:50:25Z", "message": "Fixed incorrect type resolution for arithmetic operator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b504268d152b13d76219a0c6e1bb6daae7acbc22", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b504268d152b13d76219a0c6e1bb6daae7acbc22", "committedDate": "2020-12-15T12:00:28Z", "message": "Make sure that nullability information is passed properly when doing coercion."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDU4Njkw", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-552458690", "createdAt": "2020-12-15T13:40:49Z", "commit": {"oid": "b504268d152b13d76219a0c6e1bb6daae7acbc22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MDo0OVrOIGLZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MDo0OVrOIGLZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTEzMA==", "bodyText": "Shouldn't it be in reverse? Can't apply operator/function to operands, not the operands to operator/function.", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r543349130", "createdAt": "2020-12-15T13:40:49Z", "author": {"login": "taburet"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/HazelcastResources.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate;\n+\n+import org.apache.calcite.runtime.CalciteException;\n+import org.apache.calcite.runtime.Resources;\n+import org.apache.calcite.sql.validate.SqlValidatorException;\n+\n+/**\n+ * Error messages for parsing and validation stages.\n+ */\n+public interface HazelcastResources {\n+\n+    HazelcastResources RESOURCES = Resources.create(HazelcastResources.class);\n+\n+    @Resources.BaseMessage(\"Function ''{0}'' does not exist\")\n+    Resources.ExInst<CalciteException> functionDoesNotExist(String functionName);\n+\n+    @Resources.BaseMessage(\"Cannot apply {1} to the {0} operator (consider adding an explicit CAST)\")\n+    Resources.ExInst<SqlValidatorException> invalidOperatorOperands(String operatorName, String operandTypes);\n+\n+    @Resources.BaseMessage(\"Cannot apply {1} to the {0} function (consider adding an explicit CAST)\")\n+    Resources.ExInst<SqlValidatorException> invalidFunctionOperands(String functionName, String operandTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b504268d152b13d76219a0c6e1bb6daae7acbc22"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238b788dfedda3c2570ef9c998120dfd644d6a4b", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/238b788dfedda3c2570ef9c998120dfd644d6a4b", "committedDate": "2020-12-15T15:34:32Z", "message": "\"unknown\" literal support (to be removed later)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba60023f747f99fd5df2e218577873f153c071d4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ba60023f747f99fd5df2e218577873f153c071d4", "committedDate": "2020-12-15T15:48:39Z", "message": "Changed error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abeb60eb0b8c4335d131e9fecc72c5386a0687de", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/abeb60eb0b8c4335d131e9fecc72c5386a0687de", "committedDate": "2020-12-16T07:22:01Z", "message": "Additional tests for literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/93a6a63dd8ab82d03c124cdb6cc329559e4f6f51", "committedDate": "2020-12-16T07:29:51Z", "message": "Remove dead code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzYzNTYz", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-552363563", "createdAt": "2020-12-15T11:38:19Z", "commit": {"oid": "eb6ba0e1202573196d34117023511380a3a3fd4e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTozODoxOVrOIGGlog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0ODoyNVrOIG8tEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MDMwNg==", "bodyText": "Typo: ot", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r543270306", "createdAt": "2020-12-15T11:38:19Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/HazelcastSqlToRelConverter.java", "diffHunk": "@@ -57,128 +60,171 @@\n  * literals and casts with more precise types assigned during the validation.\n  */\n public class HazelcastSqlToRelConverter extends SqlToRelConverter {\n-\n-    public HazelcastSqlToRelConverter(RelOptTable.ViewExpander viewExpander, SqlValidator validator,\n-                                      Prepare.CatalogReader catalogReader, RelOptCluster cluster,\n-                                      SqlRexConvertletTable convertletTable, Config config) {\n+    /** See {@link #convertCall(SqlNode, Blackboard)} for more information. */\n+    private final Set<SqlNode> callSet = Collections.newSetFromMap(new IdentityHashMap<>());\n+\n+    public HazelcastSqlToRelConverter(\n+        RelOptTable.ViewExpander viewExpander,\n+        SqlValidator validator,\n+        Prepare.CatalogReader catalogReader,\n+        RelOptCluster cluster,\n+        SqlRexConvertletTable convertletTable,\n+        Config config\n+    ) {\n         super(viewExpander, validator, catalogReader, cluster, convertletTable, config);\n     }\n \n     @Override\n     protected RexNode convertExtendedExpression(SqlNode node, Blackboard blackboard) {\n+        // Hook into conversion of literals, casts and calls to execute our own logic.\n         if (node.getKind() == SqlKind.LITERAL) {\n             return convertLiteral((SqlLiteral) node);\n         } else if (node.getKind() == SqlKind.CAST) {\n             return convertCast((SqlCall) node, blackboard);\n+        } else if (node instanceof SqlCall) {\n+            return convertCall(node, blackboard);\n         }\n \n         return null;\n     }\n \n-    @SuppressWarnings(\"UnpredictableBigDecimalConstructorCall\")\n+    /**\n+     * Convert the literal taking in count the type that we assigned to it during validation.\n+     * Otherwise Apache Calcite will try to deduce literal type again, leading to incorrect exposed types.\n+     * <p>\n+     * For example, {@code [x:BIGINT > 1]} is interpreted as {@code [x:BIGINT > 1:BIGINT]} during the validation.\n+     * If this method is not invoked, Apache Calcite will convert it to {[@code x:BIGINT > 1:TINYINT]} instead.\n+     */\n+    private RexNode convertLiteral(SqlLiteral literal) {\n+        RelDataType type = validator.getValidatedNodeType(literal);\n+\n+        return getRexBuilder().makeLiteral(literal.getValue(), type, true);\n+    }\n+\n+    /**\n+     * Convert CAST exception fixing several Apache Calcite problems with literals along the way (see inline JavaDoc).\n+     */\n     private RexNode convertCast(SqlCall call, Blackboard blackboard) {\n+        RelDataType from = validator.getValidatedNodeType(call.operand(0));\n         RelDataType to = validator.getValidatedNodeType(call);\n-        RexNode operand = blackboard.convertExpression(call.operand(0));\n \n-        if (SqlUtil.isNullLiteral(call.operand(0), false)) {\n-            // Just generate the cast without messing with the value: it's\n-            // always NULL.\n-            return getRexBuilder().makeCast(to, operand);\n-        }\n+        QueryDataType fromType = HazelcastTypeUtils.toHazelcastType(from.getSqlTypeName());\n+        QueryDataType toType = HazelcastTypeUtils.toHazelcastType(to.getSqlTypeName());\n+\n+        Literal literal = LiteralUtils.literal(call.operand(0));\n+\n+        if (literal != null && literal.getTypeName() != NULL) {\n+            // There is a bug in RexSimplify that incorrectly converts numeric literals from one numeric type to another.\n+            // The problem is located in the RexToLixTranslator.translateLiteral. To perform a conversion, it delegates\n+            // to Primitive.number(Number) method, that does a conversion without checking for overflow. For example, the\n+            // expression [32767 AS TINYINT] is converted to -1, which is obviously incorrect.\n+            // To workaround the problem, we perform the conversion using our converters manually. If the conversion fails,\n+            // we throw an error (it would have been thrown in runtime anyway), thus preventing Apache Calcite from entering\n+            // the problematic simplification routine.\n+            // Since this workaround moves conversion errors to the parsing phase, we conduct the conversion check for all\n+            // types to ensure that we throw consistent error messages for all literal-related conversions errors.\n+            try {\n+                toType.getConverter().convertToSelf(fromType.getConverter(), literal.getValue());\n+            } catch (Exception e) {\n+                throw literalConversionException(validator, call, literal, toType, e);\n+            }\n \n-        RelDataType from = operand.getType();\n-\n-        // Use our to-string conversions for floating point types and BOOLEAN,\n-        // Calcite does conversions using its own formatting.\n-        if (operand.isA(SqlKind.LITERAL) && isChar(to)) {\n-            RexLiteral literal = (RexLiteral) operand;\n-\n-            switch (from.getSqlTypeName()) {\n-                case REAL:\n-                case DOUBLE:\n-                case DECIMAL:\n-                    BigDecimal decimalValue = literal.getValueAs(BigDecimal.class);\n-                    Converter fromConverter = SqlToQueryType.map(from.getSqlTypeName()).getConverter();\n-                    Object value = fromConverter.convertToSelf(BigDecimalConverter.INSTANCE, decimalValue);\n-                    Object valueAsString = StringConverter.INSTANCE.convertToSelf(fromConverter, value);\n-\n-                    return getRexBuilder().makeLiteral(valueAsString, to, true);\n-                case BOOLEAN:\n-                    boolean booleanValue = literal.getValueAs(Boolean.class);\n-                    String booleanAsString = BooleanConverter.INSTANCE.asVarchar(booleanValue);\n-                    return getRexBuilder().makeLiteral(booleanAsString, to, true);\n-                default:\n-                    // do nothing\n+            // Normalize BOOLEAN and DOUBLE literals when converting them to VARCHAR.\n+            // BOOLEAN literals are converted to \"true\"/\"false\" instead of \"TRUE\"/\"FALSE\".\n+            // DOUBLE literals are converted to a string with scientific conventions (e.g., 1.1E1 instead of 11.0);\n+            if (CHAR_TYPES.contains(to.getSqlTypeName())) {\n+                return getRexBuilder().makeLiteral(literal.getStringValue(), to, true);\n             }\n-        }\n \n-        // Convert REAL/DOUBLE values from BigDecimal representation to\n-        // REAL/DOUBLE and back, otherwise Calcite might think two floating-point\n-        // values having the same REAL/DOUBLE representation are distinct since\n-        // their BigDecimal representations might differ.\n-        if (operand.isA(SqlKind.LITERAL) && isNumeric(from) && APPROX_TYPES.contains(to.getSqlTypeName())) {\n-            RexLiteral literal = (RexLiteral) operand;\n-            BigDecimal value = literal.getValueAs(BigDecimal.class);\n-\n-            if (to.getSqlTypeName() == DOUBLE) {\n-                value = new BigDecimal(BigDecimalConverter.INSTANCE.asDouble(value), DECIMAL_MATH_CONTEXT);\n-            } else {\n-                assert to.getSqlTypeName() == REAL;\n-                value = new BigDecimal(BigDecimalConverter.INSTANCE.asReal(value), DECIMAL_MATH_CONTEXT);\n+            // There is a bug in RexSimplify that adds an unnecessary second. For example, the string literal \"00:00\" is\n+            // converted to 00:00:01. The problematic code is located in DateTimeUtils.timeStringToUnixDate.\n+            // To workaround the problem, we perform the conversion manually.\n+            if (CHAR_TYPES.contains(from.getSqlTypeName()) && to.getSqlTypeName() == TIME) {\n+                LocalTime time = fromType.getConverter().asTime(literal.getStringValue());\n+\n+                TimeString timeString = new TimeString(time.getHour(), time.getMinute(), time.getSecond());\n+\n+                return getRexBuilder().makeLiteral(timeString, to, true);\n             }\n \n-            return getRexBuilder().makeLiteral(value, to, false);\n+            // Apache Calcite cannot handle conversion of literals to OBJECT type properly.\n+            // Currently we use SqlTypeName.OTHER as a backing type name for the OBJECT data type. Calcite throws errors\n+            // when attempting to invoke RexBuilder.makeCast with such a type (try commenting the lines below and then\n+            // run CastFunctionIntegrationTest).\n+            // If we change the backing type name to SqlTypeName.ANY, then Apache Calcite attempts to remove the cast with the\n+            // invalid numeric conversions (similar to the above mentioned problem with RexToLixTranslator) what leads to\n+            // incorrect value. Specifically, Calcite attempts to treat any numeric literal as Long. As a result, literals\n+            // that overflow this value, are converted to the wrong value. E.g. \"new BigDecimal(Long.MAX_VALUE + \"0.1\")\" is\n+            // converted to \"-10L\".\n+            if (toType.getTypeFamily() == QueryDataTypeFamily.OBJECT) {\n+                QueryException cause = QueryException.error(\"Conversion of literals to \" + SqlColumnType.OBJECT\n+                    + \" type is not allowed (consider adding an explicit CAST to another expression part)\");\n+\n+                throw literalConversionException(validator, call, literal, toType, cause);\n+            }\n         }\n \n-        // also removes the cast if it's not required\n-        return getRexBuilder().makeCast(to, operand);\n-    }\n+        // Delegate ot Apache Calcite.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ba0e1202573196d34117023511380a3a3fd4e"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1NDkxMA==", "bodyText": "Why do we need nested if instead of && in the condition as was before?", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544154910", "createdAt": "2020-12-16T09:45:36Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/HazelcastSqlValidator.java", "diffHunk": "@@ -176,123 +144,59 @@ public void validateCall(SqlCall call, SqlValidatorScope scope) {\n         // skip it if a call has a fixed type, for instance AND always has\n         // BOOLEAN type, so operands may end up having no validated type.\n         deriveType(scope, call);\n+\n         super.validateCall(call, scope);\n     }\n \n     @Override\n     protected SqlNode performUnconditionalRewrites(SqlNode node, boolean underFrom) {\n         SqlNode rewritten = super.performUnconditionalRewrites(node, underFrom);\n \n-        if (rewritten != null && rewritten.isA(SqlKind.TOP_LEVEL)) {\n-            // Rewrite operators to Hazelcast ones starting at every top node.\n-            // For instance, SELECT a + b is rewritten to SELECT a + b, where\n-            // the first '+' refers to the standard Calcite SqlStdOperatorTable.PLUS\n-            // operator and the second '+' refers to HazelcastSqlOperatorTable.PLUS\n-            // operator.\n-            rewritten.accept(HazelcastOperatorTableVisitor.INSTANCE);\n+        if (rewritten != null) {\n+            if (rewritten.isA(SqlKind.TOP_LEVEL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1Njk0NQ==", "bodyText": "Javadoc would be useful here.", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544156945", "createdAt": "2020-12-16T09:48:25Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/literal/Literal.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.literal;\n+\n+import com.hazelcast.sql.impl.calcite.validate.types.HazelcastTypeFactory;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.sql.SqlLiteral;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTU3MjU5", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-553557259", "createdAt": "2020-12-16T10:37:51Z", "commit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDozNzo1MVrOIG-v8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDozNzo1MVrOIG-v8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5MDQ1MA==", "bodyText": "Looks like that might disable certain optimizations in Calcite.", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544190450", "createdAt": "2020-12-16T10:37:51Z", "author": {"login": "taburet"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/misc/HazelcastArithmeticOperator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.operators.misc;\n+\n+import com.hazelcast.sql.impl.calcite.validate.operators.BinaryOperatorOperandTypeInference;\n+import com.hazelcast.sql.impl.calcite.validate.operators.common.HazelcastBinaryOperator;\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastCallBinding;\n+import org.apache.calcite.sql.SqlBinaryOperator;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.SqlOperatorBinding;\n+import org.apache.calcite.sql.SqlSyntax;\n+import org.apache.calcite.sql.fun.SqlStdOperatorTable;\n+import org.apache.calcite.sql.type.ReturnTypes;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.sql.validate.SqlMonotonicity;\n+\n+public final class HazelcastArithmeticOperator extends HazelcastBinaryOperator {\n+\n+    public static final HazelcastArithmeticOperator PLUS = new HazelcastArithmeticOperator(SqlStdOperatorTable.PLUS);\n+    public static final HazelcastArithmeticOperator MINUS = new HazelcastArithmeticOperator(SqlStdOperatorTable.MINUS);\n+    public static final HazelcastArithmeticOperator MULTIPLY = new HazelcastArithmeticOperator(SqlStdOperatorTable.MULTIPLY);\n+    public static final HazelcastArithmeticOperator DIVIDE = new HazelcastArithmeticOperator(SqlStdOperatorTable.DIVIDE);\n+\n+    private HazelcastArithmeticOperator(SqlBinaryOperator base) {\n+        super(\n+            base.getName(),\n+            base.getKind(),\n+            base.getLeftPrec(),\n+            true,\n+            ReturnTypes.ARG0_NULLABLE,\n+            BinaryOperatorOperandTypeInference.INSTANCE\n+        );\n+    }\n+\n+    @Override\n+    public SqlOperandCountRange getOperandCountRange() {\n+        return SqlOperandCountRanges.of(2);\n+    }\n+\n+    @Override\n+    public SqlSyntax getSyntax() {\n+        return SqlSyntax.BINARY;\n+    }\n+\n+    @Override\n+    public boolean checkOperandTypes(HazelcastCallBinding binding, boolean throwOnFailure) {\n+        return HazelcastArithmeticOperatorUtils.checkOperandTypes(binding, throwOnFailure, kind);\n+    }\n+\n+    @Override\n+    public SqlMonotonicity getMonotonicity(SqlOperatorBinding call) {\n+        return SqlMonotonicity.NOT_MONOTONIC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTM5ODIx", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-553539821", "createdAt": "2020-12-16T10:16:08Z", "commit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoxNjowOVrOIG93zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo1MjoyN1rOIG_VWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3NjA3Nw==", "bodyText": "Once the res is false, shall we stop checking and return the result (throw an exception)?", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544176077", "createdAt": "2020-12-16T10:16:09Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/operand/OperandCheckerProgram.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.operand;\n+\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastCallBinding;\n+\n+/**\n+ * Composite program that invokes a separate operand checker for every operand.\n+ */\n+public class OperandCheckerProgram {\n+\n+    private final OperandChecker[] checkers;\n+\n+    public OperandCheckerProgram(OperandChecker... checkers) {\n+        this.checkers = checkers;\n+    }\n+\n+    public boolean check(HazelcastCallBinding callBinding, boolean throwOnFailure) {\n+        boolean res = true;\n+\n+        for (int i = 0; i < checkers.length; i++) {\n+            boolean checkerRes = checkers[i].check(callBinding, false, i);\n+\n+            if (!checkerRes) {\n+                res = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NDcyNg==", "bodyText": "Typo: ooverride", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544194726", "createdAt": "2020-12-16T10:44:31Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/predicate/HazelcastAndOrPredicate.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.operators.predicate;\n+\n+import com.hazelcast.sql.impl.calcite.validate.operand.OperandCheckerProgram;\n+import com.hazelcast.sql.impl.calcite.validate.operand.OperandChecker;\n+import com.hazelcast.sql.impl.calcite.validate.operand.TypedOperandChecker;\n+import com.hazelcast.sql.impl.calcite.validate.operators.common.HazelcastBinaryOperator;\n+import com.hazelcast.sql.impl.calcite.validate.HazelcastCallBinding;\n+import org.apache.calcite.sql.SqlBinaryOperator;\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.fun.SqlStdOperatorTable;\n+import org.apache.calcite.sql.type.InferTypes;\n+import org.apache.calcite.sql.type.ReturnTypes;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.util.Litmus;\n+\n+import java.util.Arrays;\n+\n+public final class HazelcastAndOrPredicate extends HazelcastBinaryOperator {\n+\n+    public static final HazelcastAndOrPredicate AND = new HazelcastAndOrPredicate(\n+        \"AND\",\n+        SqlKind.AND,\n+        SqlStdOperatorTable.AND.getLeftPrec()\n+    );\n+\n+    public static final SqlBinaryOperator OR = new HazelcastAndOrPredicate(\n+        \"OR\",\n+        SqlKind.OR,\n+        SqlStdOperatorTable.OR.getLeftPrec()\n+    );\n+\n+    private HazelcastAndOrPredicate(String name, SqlKind kind, int prec) {\n+        super(\n+            name,\n+            kind,\n+            prec,\n+            true,\n+            ReturnTypes.BOOLEAN_NULLABLE,\n+            InferTypes.BOOLEAN\n+        );\n+    }\n+\n+    @Override\n+    public boolean checkOperandTypes(HazelcastCallBinding binding, boolean throwOnFailure) {\n+        OperandChecker[] checkers = new OperandChecker[binding.getOperandCount()];\n+        Arrays.fill(checkers, TypedOperandChecker.BOOLEAN);\n+\n+        return new OperandCheckerProgram(checkers).check(binding, throwOnFailure);\n+    }\n+\n+    @Override\n+    public SqlOperandCountRange getOperandCountRange() {\n+        return SqlOperandCountRanges.from(2);\n+    }\n+\n+    @Override\n+    public boolean validRexOperands(int count, Litmus litmus) {\n+        // Allow for more than two operands similarly to Calcite built-in AND/OR operators.\n+        // We ooverride the method because Calcite returns \"true\" only for the instances of the original operators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwMDAyNA==", "bodyText": "Shall we use %d for int line, col?", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544200024", "createdAt": "2020-12-16T10:52:27Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/param/AbstractParameterConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.validate.param;\n+\n+import com.hazelcast.sql.impl.ParameterConverter;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.converter.Converter;\n+import com.hazelcast.sql.impl.type.converter.Converters;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+public abstract class AbstractParameterConverter implements ParameterConverter {\n+\n+    protected final int ordinal;\n+    protected final SqlParserPos parserPos;\n+    protected final QueryDataType targetType;\n+\n+    protected AbstractParameterConverter(int ordinal, SqlParserPos parserPos, QueryDataType targetType) {\n+        this.ordinal = ordinal;\n+        this.parserPos = parserPos;\n+        this.targetType = targetType;\n+    }\n+\n+    @Override\n+    public QueryDataType getTargetType() {\n+        return targetType;\n+    }\n+\n+    @Override\n+    public final Object convert(Object value) {\n+        // NULL value is always OK\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        // Validate the value\n+        Converter valueConverter = Converters.getConverter(value.getClass());\n+\n+        if (!isValid(value, valueConverter)) {\n+            String actualTypeName = valueConverter.getTypeFamily().getPublicType().name();\n+            String targetTypeName = targetType.getTypeFamily().getPublicType().name();\n+\n+            String error = String.format(\n+                \"Parameter at position %d must be of %s type, but %s was found (consider adding an explicit CAST)\",\n+                ordinal,\n+                targetTypeName,\n+                actualTypeName\n+            );\n+\n+            throw QueryException.error(SqlErrorCode.DATA_EXCEPTION, withContext(error));\n+        }\n+\n+        // Convert the value\n+        try {\n+            return targetType.getConverter().convertToSelf(valueConverter, value);\n+        } catch (Exception e) {\n+            String error = String.format(\n+                \"Failed to convert parameter at position %d from %s to %s: %s\",\n+                ordinal,\n+                valueConverter.getTypeFamily().getPublicType(),\n+                targetType.getConverter().getTypeFamily().getPublicType(),\n+                e.getMessage()\n+            );\n+\n+            throw QueryException.error(SqlErrorCode.DATA_EXCEPTION, withContext(error), e);\n+        }\n+    }\n+\n+    protected abstract boolean isValid(Object value, Converter valueConverter);\n+\n+    private String withContext(String message) {\n+        int line = parserPos.getLineNum();\n+        int col = parserPos.getColumnNum();\n+        int endLine = parserPos.getEndLineNum();\n+        int endCol = parserPos.getEndColumnNum();\n+\n+        String context;\n+\n+        if (line == endLine && col == endCol) {\n+            context = String.format(\"At line %s, column %s\", line, col);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b7dca7a0dad9ac758418ef67529d290f1f842a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/28b7dca7a0dad9ac758418ef67529d290f1f842a", "committedDate": "2020-12-16T11:27:02Z", "message": "Review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126e963737c3696f0ff94aab82e6deee71944f2d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/126e963737c3696f0ff94aab82e6deee71944f2d", "committedDate": "2020-12-16T11:27:28Z", "message": "Minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749e3fbada2240a742f501f2f5a08c8b6706fe25", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/749e3fbada2240a742f501f2f5a08c8b6706fe25", "committedDate": "2020-12-16T11:30:54Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0125b351297aafe7f7bfeeb10ba60a6d4fb24b12", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0125b351297aafe7f7bfeeb10ba60a6d4fb24b12", "committedDate": "2020-12-16T11:40:30Z", "message": "Fixed function casing problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c6428d60a68d33700b4ae95c17d58ef1a3f155", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/76c6428d60a68d33700b4ae95c17d58ef1a3f155", "committedDate": "2020-12-16T11:51:03Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNjMxOTU5", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-553631959", "createdAt": "2020-12-16T12:19:06Z", "commit": {"oid": "93a6a63dd8ab82d03c124cdb6cc329559e4f6f51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDM1MTEw", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-554435110", "createdAt": "2020-12-17T09:46:26Z", "commit": {"oid": "76c6428d60a68d33700b4ae95c17d58ef1a3f155"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0NjoyNlrOIHtISg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0NjoyNlrOIHtISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk1MDM0Ng==", "bodyText": "Field is unused", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544950346", "createdAt": "2020-12-17T09:46:26Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/validate/HazelcastSqlOperatorTable.java", "diffHunk": "@@ -428,4 +181,59 @@ private HazelcastSqlOperatorTable() {\n     public static HazelcastSqlOperatorTable instance() {\n         return INSTANCE;\n     }\n+\n+    /**\n+     * Visitor that rewrites Calcite operators with operators from this table.\n+     */\n+    public static class RewriteVisitor extends SqlBasicVisitor<Void> {\n+\n+        private final HazelcastSqlValidator validator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c6428d60a68d33700b4ae95c17d58ef1a3f155"}, "originalPosition": 502}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDM2NzI3", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-554436727", "createdAt": "2020-12-17T09:48:24Z", "commit": {"oid": "76c6428d60a68d33700b4ae95c17d58ef1a3f155"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0ODoyNFrOIHtNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0ODoyNFrOIHtNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk1MTc0OA==", "bodyText": "Looks like the comment still holds.", "url": "https://github.com/hazelcast/hazelcast/pull/17947#discussion_r544951748", "createdAt": "2020-12-17T09:48:24Z", "author": {"login": "taburet"}, "path": "hazelcast-sql-core/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/RexToExpression.java", "diffHunk": "@@ -371,8 +381,6 @@ private RexToExpression() {\n                 break;\n \n             case BIGINT:\n-                // XXX: Calcite returns unscaled value of the internally stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c6428d60a68d33700b4ae95c17d58ef1a3f155"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f78f4593e1a1d964330a7aa872ba455b4dad6ef", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5f78f4593e1a1d964330a7aa872ba455b4dad6ef", "committedDate": "2020-12-17T09:58:36Z", "message": "Simplify rewrite visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65df331cf8df7c9690ee4f961f2a1d81a905fdfc", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/65df331cf8df7c9690ee4f961f2a1d81a905fdfc", "committedDate": "2020-12-17T09:58:58Z", "message": "Simplify BIGINT literal value extraction in RexToExpression."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e28f0c1d4779631a20f8ea26c335c307137971a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7e28f0c1d4779631a20f8ea26c335c307137971a", "committedDate": "2020-12-17T11:27:31Z", "message": "Fixed incorrect conversion of DECIMAL to BIGINT during CAST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d2f4ccd29c02d23d5226377fe104dc6f2e64476", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2d2f4ccd29c02d23d5226377fe104dc6f2e64476", "committedDate": "2020-12-18T10:17:50Z", "message": "Workaround for expressions simplification logic in Calcite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5453f9c4dc98d570d45c2da6e08ae343c1d3ee0e", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5453f9c4dc98d570d45c2da6e08ae343c1d3ee0e", "committedDate": "2020-12-18T12:33:54Z", "message": "Restore CAST(... as OBJECT)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTgwMzM1", "url": "https://github.com/hazelcast/hazelcast/pull/17947#pullrequestreview-556180335", "createdAt": "2020-12-21T07:38:21Z", "commit": {"oid": "5453f9c4dc98d570d45c2da6e08ae343c1d3ee0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521d21e2c49846e420ab5eba27874b38638b3381", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/521d21e2c49846e420ab5eba27874b38638b3381", "committedDate": "2020-11-11T08:13:21Z", "message": "Make sure that all functions are converted to Hazelcast functions properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1958bbd722053a0c532d62763b54e4b591bcf8e6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1958bbd722053a0c532d62763b54e4b591bcf8e6", "committedDate": "2020-11-11T09:04:58Z", "message": "Binding override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b9c2a0b6ec7ea012a601ff11c32d5f3cd4afe2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a7b9c2a0b6ec7ea012a601ff11c32d5f3cd4afe2", "committedDate": "2020-11-11T09:32:28Z", "message": "Implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581bb4e857af0e70d85e493c152709624b1d6696", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/581bb4e857af0e70d85e493c152709624b1d6696", "committedDate": "2020-11-11T10:50:13Z", "message": "WIP on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4e96be5ae84e15fd95a4b969ba3ce85006f15b", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ed4e96be5ae84e15fd95a4b969ba3ce85006f15b", "committedDate": "2020-11-11T11:44:01Z", "message": "Finalization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ec5be5e2c65013c33f4cdca98dff7e9a3c6651", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/48ec5be5e2c65013c33f4cdca98dff7e9a3c6651", "committedDate": "2020-11-11T11:51:51Z", "message": "Merge branch 'master' into sql-signature-errors\n\n# Conflicts:\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/HazelcastSqlOperatorTable.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/HazelcastDoubleFunction.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/AbsFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/CeilFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/DoubleFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/FloorFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/RandFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/SignFunctionIntegrationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0ea3398af9a588785a6627e6d37a6eeee99c78", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6b0ea3398af9a588785a6627e6d37a6eeee99c78", "committedDate": "2020-11-11T12:00:12Z", "message": "Fixes after merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b09fe18b4faf21722ead3bb41d949ba414d9a6cc", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b09fe18b4faf21722ead3bb41d949ba414d9a6cc", "committedDate": "2020-11-11T12:06:08Z", "message": "Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a847de5e362cb3934c20cf1608df2c09e80df0", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/98a847de5e362cb3934c20cf1608df2c09e80df0", "committedDate": "2020-11-11T13:59:38Z", "message": "WIP on NOT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6da98d0deb5d805318efcb8c17b133b604b749", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d6da98d0deb5d805318efcb8c17b133b604b749", "committedDate": "2020-11-12T07:49:55Z", "message": "WIP on NOT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3caf63bf326c7a1b942923f80ad80d7f13666d5", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d3caf63bf326c7a1b942923f80ad80d7f13666d5", "committedDate": "2020-11-12T10:30:55Z", "message": "Fixed signature. Now fixing tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "433c618b15756d5d1d745cc21d1e0c3da82a6ad9", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/433c618b15756d5d1d745cc21d1e0c3da82a6ad9", "committedDate": "2020-11-12T10:45:09Z", "message": "Fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26a8295f8d8ff096aeabb645def8341b692ea5d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f26a8295f8d8ff096aeabb645def8341b692ea5d", "committedDate": "2020-11-12T11:14:22Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a01461ef11ae9af5971d078bdc06b2af68ef12d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5a01461ef11ae9af5971d078bdc06b2af68ef12d", "committedDate": "2020-11-12T11:16:34Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91cb55e75ca9dc94c395eabd01e5881a46ceeae4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/91cb55e75ca9dc94c395eabd01e5881a46ceeae4", "committedDate": "2020-11-13T13:42:54Z", "message": "Merge branch 'sql-signature-errors' into sql-inference\n\n# Conflicts:\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/NotPredicateIntegrationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d33780547809a3077d9a4bb980e57642d7df165", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2d33780547809a3077d9a4bb980e57642d7df165", "committedDate": "2020-11-13T13:46:32Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3893273afc313b89893f5da0cb7b4b9d828eccc", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d3893273afc313b89893f5da0cb7b4b9d828eccc", "committedDate": "2020-11-16T07:21:25Z", "message": "Parameters work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac04435efbcab6e350120f000cba64bbd5c12332", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ac04435efbcab6e350120f000cba64bbd5c12332", "committedDate": "2020-11-16T07:35:19Z", "message": "Preparing for AND/OR operators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a27cc189c5fda35b035b031b8f7f0efa6737112", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8a27cc189c5fda35b035b031b8f7f0efa6737112", "committedDate": "2020-11-16T08:52:02Z", "message": "AND/OR work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbaace50e7c7f1913f0efdfb5a47b49e5250adfc", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bbaace50e7c7f1913f0efdfb5a47b49e5250adfc", "committedDate": "2020-11-16T13:34:25Z", "message": "WIP on new comparison semantics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2cdb4c791eeafc39cba354e4753b8119748b2e6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b2cdb4c791eeafc39cba354e4753b8119748b2e6", "committedDate": "2020-11-17T12:17:09Z", "message": "WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b44670128f5cf38eb8b768e0e623e18b80311b4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5b44670128f5cf38eb8b768e0e623e18b80311b4", "committedDate": "2020-11-17T18:44:16Z", "message": "String functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9eedff37c732bfb3f2d6e549c26c35d2c2148bb", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d9eedff37c732bfb3f2d6e549c26c35d2c2148bb", "committedDate": "2020-11-17T19:11:36Z", "message": "Refactored operand checkers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da6acf420ea97824bd1705248a5f1c2129b2a647", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da6acf420ea97824bd1705248a5f1c2129b2a647", "committedDate": "2020-11-18T08:26:16Z", "message": "WIP on comparisons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a80e8a78af271822bef5a9c167a85def4fe385a0", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a80e8a78af271822bef5a9c167a85def4fe385a0", "committedDate": "2020-11-18T09:32:55Z", "message": "Comparison works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2728a2d0a3f8d2b00644f12061fe2d8bea21a2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/df2728a2d0a3f8d2b00644f12061fe2d8bea21a2", "committedDate": "2020-11-18T10:18:20Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d170fa29b8276229711aedbe482a3edb46321bfd", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d170fa29b8276229711aedbe482a3edb46321bfd", "committedDate": "2020-11-18T10:45:11Z", "message": "Fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ab99887947a7afa216723cf01f24193327846a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/51ab99887947a7afa216723cf01f24193327846a", "committedDate": "2020-11-18T10:56:10Z", "message": "WIP on TRIM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab62316bda152e541e84d59881676309701e192c", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ab62316bda152e541e84d59881676309701e192c", "committedDate": "2020-11-18T17:27:45Z", "message": "WIP on tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec0cd0e0d428d10215916e8f9ce19b7f5f6605d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9ec0cd0e0d428d10215916e8f9ce19b7f5f6605d", "committedDate": "2020-11-18T18:19:11Z", "message": "Looks like ok."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79306a1b3620618a3a1a2920149f0ecd6ef9a9f4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/79306a1b3620618a3a1a2920149f0ecd6ef9a9f4", "committedDate": "2020-11-19T06:28:09Z", "message": "Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7003a163fb7911dcbba5cbfccda1d0e6e5acab04", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7003a163fb7911dcbba5cbfccda1d0e6e5acab04", "committedDate": "2020-11-19T07:19:31Z", "message": "Sign function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41637f0aa511687af123fa1a9459eda5dce2f47", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a41637f0aa511687af123fa1a9459eda5dce2f47", "committedDate": "2020-11-19T07:40:02Z", "message": "RAND function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04a8682d4090414b2bce927ef3ce9ba28571ee71", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/04a8682d4090414b2bce927ef3ce9ba28571ee71", "committedDate": "2020-11-19T07:47:44Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6593d1c0e73cf6aacc91cf5960a1557ff255a82b", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6593d1c0e73cf6aacc91cf5960a1557ff255a82b", "committedDate": "2020-11-19T07:50:57Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88e0096cf8b71bd5bd704718578468ed06d48b71", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/88e0096cf8b71bd5bd704718578468ed06d48b71", "committedDate": "2020-11-19T09:13:13Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4efa6921b0021f55eb9c785d1b794cb9ac5e0ff6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4efa6921b0021f55eb9c785d1b794cb9ac5e0ff6", "committedDate": "2020-11-19T11:48:39Z", "message": "FLOOR/CEIL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f6078d9c05680bc74141877be29cf48009cb12", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/75f6078d9c05680bc74141877be29cf48009cb12", "committedDate": "2020-11-19T12:07:18Z", "message": "ROUND/TRUNCATE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e942b9f565c5b80f94cc3756e14b249ea5814ce", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9e942b9f565c5b80f94cc3756e14b249ea5814ce", "committedDate": "2020-11-19T17:44:27Z", "message": "DANGEROUS: Remove complicated validator code, add a single point for literal type inference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8125f9060206d9282b823d20fe7243f0bbda4634", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8125f9060206d9282b823d20fe7243f0bbda4634", "committedDate": "2020-11-20T07:26:06Z", "message": "Simplifying checkers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee382b50cd0b6f730fec921cbe40d8a63f7fa055", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ee382b50cd0b6f730fec921cbe40d8a63f7fa055", "committedDate": "2020-11-20T08:30:25Z", "message": "Almost fixed all tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca5080f42bb2994c3b08101c32e74d7e26058d2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ca5080f42bb2994c3b08101c32e74d7e26058d2", "committedDate": "2020-11-20T08:51:17Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7c27761deb0aeef7bb69936ca88dafda14951a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bb7c27761deb0aeef7bb69936ca88dafda14951a", "committedDate": "2020-11-20T10:40:26Z", "message": "Unary PLUS/MINUS with return type override hack for sql-to-rel phase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491b3e5f826939f62525f1baf2fa54ed6a09d726", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/491b3e5f826939f62525f1baf2fa54ed6a09d726", "committedDate": "2020-11-20T13:07:21Z", "message": "Fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4bc52c6867f68568fde3b3e8bd54c3dd6571faa", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c4bc52c6867f68568fde3b3e8bd54c3dd6571faa", "committedDate": "2020-11-20T13:18:09Z", "message": "Fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da1d7201a1ed16c50d3b44b88d68a642b38cb41d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da1d7201a1ed16c50d3b44b88d68a642b38cb41d", "committedDate": "2020-11-20T17:31:22Z", "message": "Finished with operators."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3afd34c3f39eac2973acb2bd95679eb82f3affea", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3afd34c3f39eac2973acb2bd95679eb82f3affea", "committedDate": "2020-11-20T17:33:29Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6dfbe98eb8dcfda3976f2e71b1cfb6db40fc30e", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a6dfbe98eb8dcfda3976f2e71b1cfb6db40fc30e", "committedDate": "2020-11-20T17:51:12Z", "message": "Removing unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff43e26a1fdb69cd15f5e1f8d8e09a65ae287567", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ff43e26a1fdb69cd15f5e1f8d8e09a65ae287567", "committedDate": "2020-11-20T17:58:17Z", "message": "Removing unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbd269cd7281753222dedb0b8d9cfbfedddb1ea2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fbd269cd7281753222dedb0b8d9cfbfedddb1ea2", "committedDate": "2020-11-20T18:05:25Z", "message": "Removing unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba21f1c501ced7afb444b4bddeb1ff0acc7239a6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ba21f1c501ced7afb444b4bddeb1ff0acc7239a6", "committedDate": "2020-11-20T18:09:25Z", "message": "Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af10e8c71e9d34fabcd1eb24783ac90893a24e93", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/af10e8c71e9d34fabcd1eb24783ac90893a24e93", "committedDate": "2020-11-20T18:26:20Z", "message": "Removing unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc6fd4548e43402ddd7068bda69be5f12c0a0708", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fc6fd4548e43402ddd7068bda69be5f12c0a0708", "committedDate": "2020-11-24T08:28:07Z", "message": "TESTS (some are broken now)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79607515ecf87e52c52d47513cd998fc906373d8", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/79607515ecf87e52c52d47513cd998fc906373d8", "committedDate": "2020-11-25T06:30:21Z", "message": "Testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7005521c9db872d5ec28c3a7577317bfde89cd5", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e7005521c9db872d5ec28c3a7577317bfde89cd5", "committedDate": "2020-11-26T07:55:33Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3e38e97aab434658545240e1ee3a8dd9aff243", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1a3e38e97aab434658545240e1ee3a8dd9aff243", "committedDate": "2020-11-26T15:10:50Z", "message": "Comparison: boolean done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfbff03e8507e34333880fee6429588464dcff9", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2dfbff03e8507e34333880fee6429588464dcff9", "committedDate": "2020-11-26T16:08:57Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "488d4a359921095c94d5b50cfa09c261bb8ebbc6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/488d4a359921095c94d5b50cfa09c261bb8ebbc6", "committedDate": "2020-11-27T15:37:57Z", "message": "CONCAT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2991970f9d92efd6a6392cea0ccf6f54b56382da", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2991970f9d92efd6a6392cea0ccf6f54b56382da", "committedDate": "2020-11-27T16:40:19Z", "message": "SUBSTRING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19893190ce3448d700f92b595aab262084d95e6", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a19893190ce3448d700f92b595aab262084d95e6", "committedDate": "2020-11-27T16:47:32Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0a22c59608443e0d3871e0c4a464ca80b409ca", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2f0a22c59608443e0d3871e0c4a464ca80b409ca", "committedDate": "2020-11-27T18:44:19Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e4ab7c00c07f99195fbbce78f01024e82102a8", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c7e4ab7c00c07f99195fbbce78f01024e82102a8", "committedDate": "2020-12-03T08:21:05Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e620a90ffd2a37a80cc21a2fc31551f43d2b415a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e620a90ffd2a37a80cc21a2fc31551f43d2b415a", "committedDate": "2020-12-03T10:12:02Z", "message": "Literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c105a790a290f786309986854c2da33f4fc767b4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c105a790a290f786309986854c2da33f4fc767b4", "committedDate": "2020-12-03T10:35:01Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c52444aea10919e4a3304898b7f02a73d94a78a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8c52444aea10919e4a3304898b7f02a73d94a78a", "committedDate": "2020-12-03T12:09:08Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e17fc9617cb764e0a1acdef3b959aae4b43a30", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/13e17fc9617cb764e0a1acdef3b959aae4b43a30", "committedDate": "2020-12-03T12:13:32Z", "message": "ABS/SIGN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3774195180a88d8a72e6d29d130b6f4275fb38", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1a3774195180a88d8a72e6d29d130b6f4275fb38", "committedDate": "2020-12-03T12:21:44Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "967364932f024920d9b6387ed6da1b2780616d87", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/967364932f024920d9b6387ed6da1b2780616d87", "committedDate": "2020-12-03T12:49:39Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b991ab795862780992b0334e20afb6027846b887", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b991ab795862780992b0334e20afb6027846b887", "committedDate": "2020-12-04T08:58:55Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d38909e4a6cfadb2d48bd80ce66fa5b9aac878", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/42d38909e4a6cfadb2d48bd80ce66fa5b9aac878", "committedDate": "2020-12-04T10:22:27Z", "message": "Plus tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b95a6da6bf1a77b4bd8e05731768c0449be8752", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9b95a6da6bf1a77b4bd8e05731768c0449be8752", "committedDate": "2020-12-04T11:19:33Z", "message": "Minus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ccd16d9949d44878b0c9a3f9ac246649b727f99", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ccd16d9949d44878b0c9a3f9ac246649b727f99", "committedDate": "2020-12-04T12:41:02Z", "message": "Multiply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd23a05c8ca748955148764e3c9be9967c6ac757", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/dd23a05c8ca748955148764e3c9be9967c6ac757", "committedDate": "2020-12-04T13:17:46Z", "message": "Division"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "195685b245c6b9c90a8f9cb71d42fc391eec21e2", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/195685b245c6b9c90a8f9cb71d42fc391eec21e2", "committedDate": "2020-12-04T15:24:54Z", "message": "CAST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415bded65ddf97215d1e8f7bd04a22e38ac578dd", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/415bded65ddf97215d1e8f7bd04a22e38ac578dd", "committedDate": "2020-12-04T15:41:46Z", "message": "CAST done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da40a03961df84a7226cfb95de8cc03aa9c37bb0", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da40a03961df84a7226cfb95de8cc03aa9c37bb0", "committedDate": "2020-12-04T15:54:37Z", "message": "ROUND/TRUNCATE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be947dc6cd7efbba2476f0d21ffdce0ae4bdecbf", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/be947dc6cd7efbba2476f0d21ffdce0ae4bdecbf", "committedDate": "2020-12-04T16:54:55Z", "message": "Nested."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e48970773f7195373b24f1ea62b852f6f850c20", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0e48970773f7195373b24f1ea62b852f6f850c20", "committedDate": "2020-12-05T14:14:37Z", "message": "Merge branch 'master' into expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529f0be91c65460921793f25d9c1ba9352882e30", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/529f0be91c65460921793f25d9c1ba9352882e30", "committedDate": "2020-12-05T14:59:23Z", "message": "REFACTORING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f67779cd340690ce9dc338b124c776778514632f", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f67779cd340690ce9dc338b124c776778514632f", "committedDate": "2020-12-06T08:56:20Z", "message": "Literals refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a253db912a2d3ec6fc45b2d99bb0bfcb16a12574", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a253db912a2d3ec6fc45b2d99bb0bfcb16a12574", "committedDate": "2020-12-06T09:47:46Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb557f4a433d78441fd44f9f299afbac1880f7a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1fb557f4a433d78441fd44f9f299afbac1880f7a", "committedDate": "2020-12-06T09:54:48Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e64f7017903f4aa17544573f1610debf838150", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b7e64f7017903f4aa17544573f1610debf838150", "committedDate": "2020-12-06T14:02:49Z", "message": "Tests for literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46543a85a17c6615b01ad583815c03bf206af26a", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/46543a85a17c6615b01ad583815c03bf206af26a", "committedDate": "2020-12-06T17:36:55Z", "message": "Fixing literal bugs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bb8e0474737ec7dfee77e862884c35882be4f7d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0bb8e0474737ec7dfee77e862884c35882be4f7d", "committedDate": "2020-12-06T17:49:54Z", "message": "Simplifying"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e620098fb33b0e80a90388247ba417dc9735e624", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e620098fb33b0e80a90388247ba417dc9735e624", "committedDate": "2020-12-06T18:23:56Z", "message": "ANY -> OTHER for object, disallow casting literals to OBJECT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f4b4f9cf776b2d7ac04b5514dd34b3fe9a12f69", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3f4b4f9cf776b2d7ac04b5514dd34b3fe9a12f69", "committedDate": "2020-12-07T14:35:13Z", "message": "Refactoring statics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5749899c98de9fb90f25cfaeef5c86ee6c96ea76", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5749899c98de9fb90f25cfaeef5c86ee6c96ea76", "committedDate": "2020-12-07T14:56:19Z", "message": "Refactoring statics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef36c148a8a2f675f6c89aa54f42ac0808d6b23e", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ef36c148a8a2f675f6c89aa54f42ac0808d6b23e", "committedDate": "2020-12-07T15:05:32Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac71b975f4fda36cea07b9ce22a2d061840282b", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4ac71b975f4fda36cea07b9ce22a2d061840282b", "committedDate": "2020-12-08T07:39:36Z", "message": "Merge branch 'master' into expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b6f7d6bfe3c0c0e1aae0cf59e7df1559cc88a1f", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4b6f7d6bfe3c0c0e1aae0cf59e7df1559cc88a1f", "committedDate": "2020-12-08T08:32:03Z", "message": "Minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418742faba1f7f665e87f334d32be4a2e4575db4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/418742faba1f7f665e87f334d32be4a2e4575db4", "committedDate": "2020-12-08T09:05:00Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7802fc9e87d04d1d8102f1aaca4a46a3a2712807", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7802fc9e87d04d1d8102f1aaca4a46a3a2712807", "committedDate": "2020-12-08T10:45:43Z", "message": "Adjust type system design document."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4104ddc2c2b96966b7f6199188e6b7d4907f8d85", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4104ddc2c2b96966b7f6199188e6b7d4907f8d85", "committedDate": "2020-12-08T10:50:50Z", "message": "Adjust expressions design document."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227d30b4c36da2e30afdc7518b5c756aeb56643f", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/227d30b4c36da2e30afdc7518b5c756aeb56643f", "committedDate": "2020-12-08T11:26:42Z", "message": "Minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64019a5270619784139d2e397a6b66b70e996d4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e64019a5270619784139d2e397a6b66b70e996d4", "committedDate": "2020-12-08T12:01:04Z", "message": "Minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa3da7544562aad14f1350e59cdff5b5ccef55d", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4aa3da7544562aad14f1350e59cdff5b5ccef55d", "committedDate": "2020-12-09T09:55:09Z", "message": "Merge branch 'master-before' into expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfd844e5d98124734a44fb91135cfd627a02bcab", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/cfd844e5d98124734a44fb91135cfd627a02bcab", "committedDate": "2020-12-09T10:01:25Z", "message": "State before the merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79fba34807b78b1be4db4baf17770f75c07a3a4", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b79fba34807b78b1be4db4baf17770f75c07a3a4", "committedDate": "2020-12-09T10:08:05Z", "message": "Merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bfbd606b0c1a8435bdc32f5f073ebb5b84193b9", "author": {"user": {"login": "devozerov", "name": "Vladimir Ozerov"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5bfbd606b0c1a8435bdc32f5f073ebb5b84193b9", "committedDate": "2020-12-09T10:09:08Z", "message": "Rollback the minor change"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3009, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}