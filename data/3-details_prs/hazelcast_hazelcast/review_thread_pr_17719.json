{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNTg1Mjc4", "number": 17719, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozMzoxOVrOEtg8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozODozMVrOEthHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTYxMTc2OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlClientCursorCleanup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozMzoxOVrOHhWIxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowOTowMlrOHh521w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNzc1MQ==", "bodyText": "Add Test to the name", "url": "https://github.com/hazelcast/hazelcast/pull/17719#discussion_r504727751", "createdAt": "2020-10-14T14:33:19Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlClientCursorCleanup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+@SuppressWarnings(\"StatementWithEmptyBody\")\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlClientCursorCleanup extends SqlTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d225bcd797543335e5e46ec8699ecf91a92e9e8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMjk4Mw==", "bodyText": "Fixed", "url": "https://github.com/hazelcast/hazelcast/pull/17719#discussion_r505312983", "createdAt": "2020-10-15T08:09:02Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/SqlClientCursorCleanup.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.sql.impl.SqlInternalService;\n+import com.hazelcast.sql.impl.SqlServiceImpl;\n+import com.hazelcast.sql.impl.SqlTestSupport;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+@SuppressWarnings(\"StatementWithEmptyBody\")\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class SqlClientCursorCleanup extends SqlTestSupport {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNzc1MQ=="}, "originalCommit": {"oid": "7d225bcd797543335e5e46ec8699ecf91a92e9e8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTYzOTU2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozODozMVrOHhWZ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowOToxMFrOHh99Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMjE1MQ==", "bodyText": "The exception class is an important part of the exception. For example, NPE often has a null message.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        QueryException error = QueryException.error(e.getMessage(), e);\n          \n          \n            \n                        QueryException error = QueryException.error(e.toString(), e);", "url": "https://github.com/hazelcast/hazelcast/pull/17719#discussion_r504732151", "createdAt": "2020-10-14T14:38:31Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -90,14 +99,26 @@ private SqlPage fetchInternal(\n     ) {\n         ResultIterator<SqlRow> iterator = clientCursor.getIterator();\n \n-        List<List<Data>> page = new ArrayList<>(cursorBufferSize);\n-        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService, isFirstPage);\n+        try {\n+            List<List<Data>> page = new ArrayList<>(cursorBufferSize);\n+            boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService, isFirstPage);\n \n-        if (last) {\n-            deleteClientCursor(clientCursor);\n-        }\n+            return new SqlPage(page, last);\n+        } catch (HazelcastSqlException e) {\n+            // We use public API to extract results from the cursor. The cursor may throw HazelcastSqlException only. When\n+            // it happens, the cursor is already closed with the error, so we just re-throw.\n+            throw e;\n+        } catch (Exception e) {\n+            // Any other exception indicates that something has happened outside of the internal query state. For example,\n+            // we may fail to serialize a specific column value to Data. We have to close the cursor in this case.\n+            AbstractSqlResult result = clientCursor.getSqlResult();\n+\n+            QueryException error = QueryException.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d225bcd797543335e5e46ec8699ecf91a92e9e8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MDE4Ng==", "bodyText": "The exception class is available in the stack trace, there is not much need for duplicating it. Instead, I added a specific error message to this line of code, so that it is easier to identify where it happened on the client-side (where the stack trace is not available)", "url": "https://github.com/hazelcast/hazelcast/pull/17719#discussion_r505380186", "createdAt": "2020-10-15T09:09:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/state/QueryClientStateRegistry.java", "diffHunk": "@@ -90,14 +99,26 @@ private SqlPage fetchInternal(\n     ) {\n         ResultIterator<SqlRow> iterator = clientCursor.getIterator();\n \n-        List<List<Data>> page = new ArrayList<>(cursorBufferSize);\n-        boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService, isFirstPage);\n+        try {\n+            List<List<Data>> page = new ArrayList<>(cursorBufferSize);\n+            boolean last = fetchPage(iterator, page, cursorBufferSize, serializationService, isFirstPage);\n \n-        if (last) {\n-            deleteClientCursor(clientCursor);\n-        }\n+            return new SqlPage(page, last);\n+        } catch (HazelcastSqlException e) {\n+            // We use public API to extract results from the cursor. The cursor may throw HazelcastSqlException only. When\n+            // it happens, the cursor is already closed with the error, so we just re-throw.\n+            throw e;\n+        } catch (Exception e) {\n+            // Any other exception indicates that something has happened outside of the internal query state. For example,\n+            // we may fail to serialize a specific column value to Data. We have to close the cursor in this case.\n+            AbstractSqlResult result = clientCursor.getSqlResult();\n+\n+            QueryException error = QueryException.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMjE1MQ=="}, "originalCommit": {"oid": "7d225bcd797543335e5e46ec8699ecf91a92e9e8"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 186, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}