{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDI0MzI0", "number": 17112, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozMlrOEJoTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDowMDozMVrOESvecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyOTY5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/config/AutoDetectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozMlrOGqODIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxMTo1OVrOGrnqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzU1Mw==", "bodyText": "toString() missing -> JoinConfig.toString() relies on it.", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r446923553", "createdAt": "2020-06-29T12:14:32Z", "author": {"login": "jerrinot"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AutoDetectionConfig.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+/**\n+ * Configuration for the Discovery Strategy Auto Detection.\n+ * <p>\n+ * When enabled, it will walk through all available discovery strategies and detect the correct one for the current runtime\n+ * environment. For example, it will automatically use the {@code hazelcast-aws} plugin if run on an AWS instance.\n+ */\n+public class AutoDetectionConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba44b4dfeef0b187c56b24631fb06d067d40afc2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5MTY4OQ==", "bodyText": "Added", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r448391689", "createdAt": "2020-07-01T14:11:59Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/config/AutoDetectionConfig.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+/**\n+ * Configuration for the Discovery Strategy Auto Detection.\n+ * <p>\n+ * When enabled, it will walk through all available discovery strategies and detect the correct one for the current runtime\n+ * environment. For example, it will automatically use the {@code hazelcast-aws} plugin if run on an AWS instance.\n+ */\n+public class AutoDetectionConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzU1Mw=="}, "originalCommit": {"oid": "ba44b4dfeef0b187c56b24631fb06d067d40afc2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjExOTc1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/DiscoveryStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMTozNFrOGqVi7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxMzoxN1rOGrntQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjM4MQ==", "bodyText": "This part deserves a more detailed JavaDoc. It's a public API after one. As a SPI implementer this is the first question I have to ask:  What is the system going to prefer? I the strategy with the higher ordinals will be picked, but it should be explicit. Also I am not quite sure what the 'PLATFORM' level means.", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r447046381", "createdAt": "2020-06-29T15:11:34Z", "author": {"login": "jerrinot"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/DiscoveryStrategyFactory.java", "diffHunk": "@@ -73,4 +75,44 @@\n      * @return a set of expected configuration properties\n      */\n     Collection<PropertyDefinition> getConfigurationProperties();\n+\n+    /**\n+     * Checks whether the given discovery strategy may be applied with no additional config to the environment in which Hazelcast\n+     * is currently running.\n+     * <p>\n+     * Used by the auto detection mechanism to decide which strategy should be used.\n+     */\n+    default boolean isAutoDetectionApplicable() {\n+        return false;\n+    }\n+\n+    /**\n+     * Level of the discovery strategy.\n+     */\n+    default DiscoveryStrategyLevel discoveryStrategyLevel() {\n+        return UNKNOWN;\n+    }\n+\n+    /**\n+     * Level of the discovery strategy.\n+     * <p>\n+     * Discovery strategies can have different levels. They can be at the level of Cloud Virtual Machines, for example, AWS EC2\n+     * Instance or GCP Virtual Machine. They can also be at the level of some specific platform or framework, like Kubernetes.\n+     * <p>\n+     * It decides on the priority in the auto detection mechanism, because you can have a Kubernetes environment installed on\n+     * AWS EC2 Instances and then Hazelcast Kubernetes Discovery Strategy should take precedence over AWS Discovery Strategy.\n+     */\n+    enum DiscoveryStrategyLevel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba44b4dfeef0b187c56b24631fb06d067d40afc2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5MjUxNA==", "bodyText": "Added. PTAL", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r448392514", "createdAt": "2020-07-01T14:13:17Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/DiscoveryStrategyFactory.java", "diffHunk": "@@ -73,4 +75,44 @@\n      * @return a set of expected configuration properties\n      */\n     Collection<PropertyDefinition> getConfigurationProperties();\n+\n+    /**\n+     * Checks whether the given discovery strategy may be applied with no additional config to the environment in which Hazelcast\n+     * is currently running.\n+     * <p>\n+     * Used by the auto detection mechanism to decide which strategy should be used.\n+     */\n+    default boolean isAutoDetectionApplicable() {\n+        return false;\n+    }\n+\n+    /**\n+     * Level of the discovery strategy.\n+     */\n+    default DiscoveryStrategyLevel discoveryStrategyLevel() {\n+        return UNKNOWN;\n+    }\n+\n+    /**\n+     * Level of the discovery strategy.\n+     * <p>\n+     * Discovery strategies can have different levels. They can be at the level of Cloud Virtual Machines, for example, AWS EC2\n+     * Instance or GCP Virtual Machine. They can also be at the level of some specific platform or framework, like Kubernetes.\n+     * <p>\n+     * It decides on the priority in the auto detection mechanism, because you can have a Kubernetes environment installed on\n+     * AWS EC2 Instances and then Hazelcast Kubernetes Discovery Strategy should take precedence over AWS Discovery Strategy.\n+     */\n+    enum DiscoveryStrategyLevel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjM4MQ=="}, "originalCommit": {"oid": "ba44b4dfeef0b187c56b24631fb06d067d40afc2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc3Njc0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/impl/DefaultDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowNDowNVrOG1fWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo0NToyNFrOG1guPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MTM2OA==", "bodyText": "probably should not to info, we are trying to reduce logging noise. see: #17243", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r458741368", "createdAt": "2020-07-22T12:04:05Z", "author": {"login": "devOpsHazelcast"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/impl/DefaultDiscoveryService.java", "diffHunk": "@@ -133,14 +134,25 @@ private boolean validateCandidate(DiscoveryNode candidate) {\n         try {\n             Collection<DiscoveryStrategyConfig> discoveryStrategyConfigs = new ArrayList<DiscoveryStrategyConfig>(\n                     settings.getAllDiscoveryConfigs());\n-\n             List<DiscoveryStrategyFactory> factories = collectFactories(discoveryStrategyConfigs, configClassLoader);\n \n             List<DiscoveryStrategy> discoveryStrategies = new ArrayList<DiscoveryStrategy>();\n             for (DiscoveryStrategyConfig config : discoveryStrategyConfigs) {\n                 DiscoveryStrategy discoveryStrategy = buildDiscoveryStrategy(config, factories);\n                 discoveryStrategies.add(discoveryStrategy);\n             }\n+\n+            if (discoveryStrategies.isEmpty() && settings.isAutoDetectionEnabled()) {\n+                logger.info(\"Discovery auto-detection enabled, looking for available discovery strategies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6331ef2ffe0c64b99606ed53163bd113b9075208"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MzgzOA==", "bodyText": "Changed this one. But I'd keep info for the following lines because it's very important to users why other members are discovered. PTAL.", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r458763838", "createdAt": "2020-07-22T12:45:24Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/impl/DefaultDiscoveryService.java", "diffHunk": "@@ -133,14 +134,25 @@ private boolean validateCandidate(DiscoveryNode candidate) {\n         try {\n             Collection<DiscoveryStrategyConfig> discoveryStrategyConfigs = new ArrayList<DiscoveryStrategyConfig>(\n                     settings.getAllDiscoveryConfigs());\n-\n             List<DiscoveryStrategyFactory> factories = collectFactories(discoveryStrategyConfigs, configClassLoader);\n \n             List<DiscoveryStrategy> discoveryStrategies = new ArrayList<DiscoveryStrategy>();\n             for (DiscoveryStrategyConfig config : discoveryStrategyConfigs) {\n                 DiscoveryStrategy discoveryStrategy = buildDiscoveryStrategy(config, factories);\n                 discoveryStrategies.add(discoveryStrategy);\n             }\n+\n+            if (discoveryStrategies.isEmpty() && settings.isAutoDetectionEnabled()) {\n+                logger.info(\"Discovery auto-detection enabled, looking for available discovery strategies\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MTM2OA=="}, "originalCommit": {"oid": "6331ef2ffe0c64b99606ed53163bd113b9075208"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDg3NjY2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClusterDiscoveryServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDowMDozMVrOG4FneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNTozNFrOG4M3SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NTQ2NA==", "bodyText": "This branch seems unnecessary. Isn't this already covered on the last return statement?", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r461465464", "createdAt": "2020-07-28T10:00:31Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClusterDiscoveryServiceBuilder.java", "diffHunk": "@@ -132,22 +133,18 @@ private AddressProvider createAddressProvider(ClientConfig clientConfig, Discove\n         isDiscoveryConfigurationConsistent(addressListProvided, awsDiscoveryEnabled, gcpDiscoveryEnabled, azureDiscoveryEnabled,\n                 kubernetesDiscoveryEnabled, eurekaDiscoveryEnabled, discoverySpiEnabled, hazelcastCloudEnabled);\n \n-        if (discoveryService != null) {\n-            return new RemoteAddressProvider(() -> discoverAddresses(discoveryService), usePublicAddress(clientConfig));\n-        } else if (hazelcastCloudEnabled) {\n-            String discoveryToken;\n-            if (cloudConfig.isEnabled()) {\n-                discoveryToken = cloudConfig.getDiscoveryToken();\n-            } else {\n-                discoveryToken = cloudDiscoveryToken;\n-            }\n+        if (hazelcastCloudEnabled) {\n+            String discoveryToken = cloudDiscoveryToken(cloudConfig, cloudDiscoveryToken);\n             String cloudUrlBase = properties.getString(HazelcastCloudDiscovery.CLOUD_URL_BASE_PROPERTY);\n             String urlEndpoint = HazelcastCloudDiscovery.createUrlEndpoint(cloudUrlBase, discoveryToken);\n             int connectionTimeoutMillis = getConnectionTimeoutMillis(networkConfig);\n             HazelcastCloudDiscovery cloudDiscovery = new HazelcastCloudDiscovery(urlEndpoint, connectionTimeoutMillis);\n             return new RemoteAddressProvider(cloudDiscovery::discoverNodes, true);\n+        } else if (!networkConfig.getAddresses().isEmpty()) {\n+            return new DefaultAddressProvider(networkConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ca77df79accdae4c6c49db7aa0a04a1291311d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NDIwMQ==", "bodyText": "It was actually necessary because if there is any static address specified, it should take precedence over discovery strategies. But I refactored the condition. I think it's clearer now. PTAL.", "url": "https://github.com/hazelcast/hazelcast/pull/17112#discussion_r461584201", "createdAt": "2020-07-28T13:35:34Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/impl/clientside/ClusterDiscoveryServiceBuilder.java", "diffHunk": "@@ -132,22 +133,18 @@ private AddressProvider createAddressProvider(ClientConfig clientConfig, Discove\n         isDiscoveryConfigurationConsistent(addressListProvided, awsDiscoveryEnabled, gcpDiscoveryEnabled, azureDiscoveryEnabled,\n                 kubernetesDiscoveryEnabled, eurekaDiscoveryEnabled, discoverySpiEnabled, hazelcastCloudEnabled);\n \n-        if (discoveryService != null) {\n-            return new RemoteAddressProvider(() -> discoverAddresses(discoveryService), usePublicAddress(clientConfig));\n-        } else if (hazelcastCloudEnabled) {\n-            String discoveryToken;\n-            if (cloudConfig.isEnabled()) {\n-                discoveryToken = cloudConfig.getDiscoveryToken();\n-            } else {\n-                discoveryToken = cloudDiscoveryToken;\n-            }\n+        if (hazelcastCloudEnabled) {\n+            String discoveryToken = cloudDiscoveryToken(cloudConfig, cloudDiscoveryToken);\n             String cloudUrlBase = properties.getString(HazelcastCloudDiscovery.CLOUD_URL_BASE_PROPERTY);\n             String urlEndpoint = HazelcastCloudDiscovery.createUrlEndpoint(cloudUrlBase, discoveryToken);\n             int connectionTimeoutMillis = getConnectionTimeoutMillis(networkConfig);\n             HazelcastCloudDiscovery cloudDiscovery = new HazelcastCloudDiscovery(urlEndpoint, connectionTimeoutMillis);\n             return new RemoteAddressProvider(cloudDiscovery::discoverNodes, true);\n+        } else if (!networkConfig.getAddresses().isEmpty()) {\n+            return new DefaultAddressProvider(networkConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NTQ2NA=="}, "originalCommit": {"oid": "33ca77df79accdae4c6c49db7aa0a04a1291311d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 604, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}