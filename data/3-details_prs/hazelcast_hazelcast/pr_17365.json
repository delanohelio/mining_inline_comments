{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODI1NTI1", "number": 17365, "title": "Support Jet SQL statements", "bodyText": "Added support for executing Jet SQL statements.", "createdAt": "2020-08-17T13:16:14Z", "url": "https://github.com/hazelcast/hazelcast/pull/17365", "merged": true, "mergeCommit": {"oid": "02d6be2b732eb1e3a382f6190da97a202a58940a"}, "closed": true, "closedAt": "2020-08-19T11:15:42Z", "author": {"login": "gierlachg"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_yNgZgH2gAyNDY4ODI1NTI1OjIyODRhMGIzOWVhNWNlZDZiZjkyM2IzZjg3ZGZjYTZiN2QzMTg2NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAZCRygH2gAyNDY4ODI1NTI1OmZkOTY1YTYwMzljYzIzNjcxMDI5NjBmNjA0YjViMzM2NzcyMDRiNDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2284a0b39ea5ced6bf923b3f87dfca6b7d318654", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2284a0b39ea5ced6bf923b3f87dfca6b7d318654", "committedDate": "2020-08-17T13:13:19Z", "message": "Support Jet SQL statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ceb88c282ddc03e5003f118048fa3f359458249", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ceb88c282ddc03e5003f118048fa3f359458249", "committedDate": "2020-08-17T13:18:33Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceeb2ce1241cb5f5d082f602e501ad3a370be620", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ceeb2ce1241cb5f5d082f602e501ad3a370be620", "committedDate": "2020-08-17T13:27:09Z", "message": "Refactor HazelcastSqlBackend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2da70fd4e3a77a0a5238f8d25fc9e31c8089955", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e2da70fd4e3a77a0a5238f8d25fc9e31c8089955", "committedDate": "2020-08-17T15:20:28Z", "message": "Add QueryParser test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59f53124a940801e2840fe54de1d78493602516c", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/59f53124a940801e2840fe54de1d78493602516c", "committedDate": "2020-08-17T15:27:16Z", "message": "Make checkstyle happier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa1f11140f624fef7f8384ddd8a69911da36dd80", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/aa1f11140f624fef7f8384ddd8a69911da36dd80", "committedDate": "2020-08-18T07:04:29Z", "message": "Add JetSqlService test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41cb820d219126dd16bcbfc77737c734baa88a3f", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/41cb820d219126dd16bcbfc77737c734baa88a3f", "committedDate": "2020-08-18T07:13:19Z", "message": "Merge branch 'master' into support-jet\n\n# Conflicts:\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2679643c84f3e09f98a891e638596a25f47c8a6", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c2679643c84f3e09f98a891e638596a25f47c8a6", "committedDate": "2020-08-18T07:16:49Z", "message": "Make checkstyle happier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80861199b4d0f086dfcd5344ec040fbe151e17d2", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/80861199b4d0f086dfcd5344ec040fbe151e17d2", "committedDate": "2020-08-18T07:49:12Z", "message": "Make checkstyle happier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72110803f1e35931fe5468f9db23baec593136f0", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/72110803f1e35931fe5468f9db23baec593136f0", "committedDate": "2020-08-18T09:06:54Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770f2b85cc63004bbaed451ccb12a1d4b2827eda", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/770f2b85cc63004bbaed451ccb12a1d4b2827eda", "committedDate": "2020-08-18T09:10:16Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5871fef9dde942c85c906a445a8103478542da3e", "committedDate": "2020-08-18T09:15:02Z", "message": "Make checkstyle happier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTc2NDUx", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469176451", "createdAt": "2020-08-18T10:01:43Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTg1NjM5", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469185639", "createdAt": "2020-08-18T10:14:56Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxNDo1NlrOHCM5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxNDo1NlrOHCM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MDQ1NA==", "bodyText": "As far as I understand, these changes are needed for a convenient development setup for Jet. Could you please explain, how exactly the development setup will look like?\nAnother question - does this change introduce any changes to IMDG SQL artifacts produced during a default build?", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472070454", "createdAt": "2020-08-18T10:14:56Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/pom.xml", "diffHunk": "@@ -71,6 +71,73 @@\n                 <version>${maven.shade.plugin.version}</version>\n                 <executions>\n                     <execution>\n+                        <id>fat-jar</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTg3Njg3", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469187687", "createdAt": "2020-08-18T10:17:59Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxNzo1OVrOHCM_5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxNzo1OVrOHCM_5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MjE2Nw==", "bodyText": "Why do we throw a new RuntimeException here? Will throw doneError; be proper to address #17160?", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472072167", "createdAt": "2020-08-18T10:17:59Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java", "diffHunk": "@@ -34,27 +33,32 @@\n     /** Iterator over produced rows. */\n     private final InternalIterator iterator = new InternalIterator();\n \n-    /** Query context to schedule root execution when the next batch is needed. */\n-    private volatile QueryFragmentContext context;\n+    /** A callback to schedule root execution when the next batch is needed. */\n+    private volatile ScheduleCallback scheduleCallback;\n \n     /** The batch that is currently being consumed. */\n     private List<Row> currentBatch;\n \n-    /** When \"true\" no more batches are expected. */\n+    /** When \"true\", no more batches are expected. */\n     private boolean done;\n \n     /** Error which occurred during query execution. */\n     private QueryException doneError;\n \n     @Override\n-    public void setup(QueryFragmentContext context) {\n-        this.context = context;\n+    public void setup(ScheduleCallback scheduleCallback) {\n+        this.scheduleCallback = scheduleCallback;\n     }\n \n     @Override\n     public boolean consume(List<Row> batch, boolean last) {\n         synchronized (mux) {\n-            assert !done;\n+            if (done) {\n+                // this is possible if the query was concurrently cancelled\n+                // see https://github.com/hazelcast/hazelcast/issues/17160\n+                assert doneError != null;\n+                throw new RuntimeException(doneError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTg5MDA3", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469189007", "createdAt": "2020-08-18T10:19:59Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyMDowMFrOHCND1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyMDowMFrOHCND1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MzE3Mg==", "bodyText": "Does Jet still require Expression to be serializable? Ideally, we should avoid adding Serializable here, since this is just an internal class that is passed over the wire, and is not meant to be serialized by some generic mechanism in IMDG\nSame question for QueryPath, QueryDataType, Converter", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472073172", "createdAt": "2020-08-18T10:20:00Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java", "diffHunk": "@@ -20,12 +20,15 @@\n import com.hazelcast.sql.impl.row.Row;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n+import java.io.Serializable;\n+\n /**\n  * Defines expression contract for SQL.\n  *\n  * @param <T> the return type of this expression.\n  */\n-public interface Expression<T> extends DataSerializable {\n+public interface Expression<T> extends DataSerializable, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTkzNDg4", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469193488", "createdAt": "2020-08-18T10:27:08Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyNzowOFrOHCNRsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyNzowOFrOHCNRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NjcyMQ==", "bodyText": "Does Jet service have any state that needs to be cleaned or reinitialized on member stop or rejoin? If yes, we should consider adding callbacks to reset and shutdown methods.", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472076721", "createdAt": "2020-08-18T10:27:08Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlServiceImpl.java", "diffHunk": "@@ -99,21 +104,31 @@ public SqlServiceImpl(NodeEngineImpl nodeEngine) {\n         assert operationPoolSize > 0;\n         assert queryTimeout >= 0L;\n \n+        this.executorPoolSize = executorPoolSize;\n+        this.operationPoolSize = operationPoolSize;\n         this.queryTimeout = queryTimeout;\n+    }\n \n-        nodeServiceProvider = new NodeServiceProviderImpl(nodeEngine);\n+    public void start() {\n+        try {\n+            jetSqlService = nodeEngine.getService(JetSqlService.SERVICE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTk2MTUz", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469196153", "createdAt": "2020-08-18T10:31:19Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDozMToyMFrOHCNZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDozMToyMFrOHCNZsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3ODc3MA==", "bodyText": "What is the purpose of this whole check?", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472078770", "createdAt": "2020-08-18T10:31:20Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java", "diffHunk": "@@ -154,6 +161,16 @@ public Void visit(SqlNodeList nodeList) {\n \n     @Override\n     public Void visit(SqlIdentifier id) {\n+        SqlValidatorTable table = catalogReader.getTable(id.names);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da27a77f618208aa23e09e99d787cb64ff3ade6", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/5da27a77f618208aa23e09e99d787cb64ff3ade6", "committedDate": "2020-08-18T10:36:01Z", "message": "Add reset() & shutdown() to JetSqlService"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTk5Mjg4", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469199288", "createdAt": "2020-08-18T10:36:02Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDozNjowMlrOHCNjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDozNjowMlrOHCNjUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA4MTIzNQ==", "bodyText": "Minor comment: I still have a worry that this interface might render insufficient for some commands in the future, which will block Jet from making some changes until the relevant codebase is adjusted in IMDG.\nI do not have any specific examples right now, so this is not a comment to address immediately. We just need to be aware of the alternative approach, where the backend just consumes the SqlQuery and produces the abstract result. In this case, the risk of required changes in IMDG will be minimal at the cost of more complicated backend implementation in Jet (possibly with some code duplication).\nHopefully, the current approach will work well enough for us.", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472081235", "createdAt": "2020-08-18T10:36:02Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/SqlBackend.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite;\n+\n+import com.hazelcast.sql.impl.calcite.parse.QueryParseResult;\n+import com.hazelcast.sql.impl.calcite.validate.types.HazelcastTypeFactory;\n+import com.hazelcast.sql.impl.optimizer.OptimizationTask;\n+import com.hazelcast.sql.impl.optimizer.SqlPlan;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptTable;\n+import org.apache.calcite.prepare.Prepare;\n+import org.apache.calcite.prepare.Prepare.CatalogReader;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.util.SqlVisitor;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlValidator;\n+import org.apache.calcite.sql2rel.SqlRexConvertletTable;\n+import org.apache.calcite.sql2rel.SqlToRelConverter;\n+import org.apache.calcite.sql2rel.SqlToRelConverter.Config;\n+\n+/**\n+ * Provides various customization points for the optimization engine.\n+ */\n+public interface SqlBackend {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MjAwNzY3", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-469200767", "createdAt": "2020-08-18T10:38:02Z", "commit": {"oid": "5871fef9dde942c85c906a445a8103478542da3e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e03f50cbbf4c3304dc7708e9153e8b7a610767c3", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e03f50cbbf4c3304dc7708e9153e8b7a610767c3", "committedDate": "2020-08-18T14:39:37Z", "message": "QueryPath doesn't need to be Serializable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdfca2f03d0c70a414390d4670aec014c7f43208", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fdfca2f03d0c70a414390d4670aec014c7f43208", "committedDate": "2020-08-19T06:40:47Z", "message": "Revert retrhrowing doneError"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTcwNDU1", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-470170455", "createdAt": "2020-08-19T06:52:12Z", "commit": {"oid": "fdfca2f03d0c70a414390d4670aec014c7f43208"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTkzMzA1", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-470193305", "createdAt": "2020-08-19T07:29:13Z", "commit": {"oid": "fdfca2f03d0c70a414390d4670aec014c7f43208"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyOToxM1rOHC5r2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyOToxM1rOHC5r2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwNDMxMw==", "bodyText": "As far as I see, this is not a client test. TestHazelcastInstanceFactory should be enough instead of this one.", "url": "https://github.com/hazelcast/hazelcast/pull/17365#discussion_r472804313", "createdAt": "2020-08-19T07:29:13Z", "author": {"login": "sancar"}, "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/JetSqlTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.DefaultNodeExtension;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.instance.impl.NodeContext;\n+import com.hazelcast.instance.impl.NodeExtension;\n+import com.hazelcast.spi.impl.NodeEngine;\n+import com.hazelcast.sql.SqlResult;\n+import com.hazelcast.sql.impl.calcite.SqlBackend;\n+import com.hazelcast.sql.impl.optimizer.OptimizationTask;\n+import com.hazelcast.sql.impl.optimizer.SqlOptimizer;\n+import com.hazelcast.sql.impl.optimizer.SqlPlan;\n+import com.hazelcast.sql.impl.plan.cache.PlanObjectKey;\n+import com.hazelcast.sql.impl.schema.ConstantTableStatistics;\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableResolver;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import com.hazelcast.test.mocknetwork.MockNodeContext;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.Map;\n+\n+import static com.hazelcast.instance.impl.HazelcastInstanceFactory.newHazelcastInstance;\n+import static com.hazelcast.sql.impl.QueryUtils.CATALOG;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.mock;\n+\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class JetSqlTest extends SqlTestSupport {\n+\n+    private static final TestHazelcastFactory FACTORY = new TestHazelcastFactory(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdfca2f03d0c70a414390d4670aec014c7f43208"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTkzOTYw", "url": "https://github.com/hazelcast/hazelcast/pull/17365#pullrequestreview-470193960", "createdAt": "2020-08-19T07:30:12Z", "commit": {"oid": "fdfca2f03d0c70a414390d4670aec014c7f43208"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b9c3be0b7d3194b571cb8b7c51a7a60559612c", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d7b9c3be0b7d3194b571cb8b7c51a7a60559612c", "committedDate": "2020-08-19T07:30:48Z", "message": "Use TestHazelcastInstanceFactory in JetSqlTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1888e9be3934632f7dd79bdd11299aa740f0b6c9", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1888e9be3934632f7dd79bdd11299aa740f0b6c9", "committedDate": "2020-08-19T08:05:53Z", "message": "Add JetSqlService nullability check in reset & shutdown..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643d0fd0f94c640abe845fc02a9fbde09e4fae77", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/643d0fd0f94c640abe845fc02a9fbde09e4fae77", "committedDate": "2020-08-19T09:59:11Z", "message": "Merge branch 'master' into support-jet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd965a6039cc2367102960f604b5b33677204b48", "author": {"user": {"login": "gierlachg", "name": "Grzegorz Gierlach"}}, "url": "https://github.com/hazelcast/hazelcast/commit/fd965a6039cc2367102960f604b5b33677204b48", "committedDate": "2020-08-19T10:27:21Z", "message": "Add InternalService nullability check in reset & shutdown..."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3393, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}