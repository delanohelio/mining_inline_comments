{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzE3OTky", "number": 16925, "title": "Multiple TCP connections between members", "bodyText": "", "createdAt": "2020-04-24T04:09:16Z", "url": "https://github.com/hazelcast/hazelcast/pull/16925", "merged": true, "mergeCommit": {"oid": "813ee32fbc48ffdf98e1f18f3306dbea6f8404ee"}, "closed": true, "closedAt": "2020-07-16T12:25:21Z", "author": {"login": "pveentjer"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcapg9IgBqjMyNjc3NDc4MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1dkSWgBqjM1NTI3NDgzMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63450971be48d46dd775c63f2b66eb227465cb5d", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/63450971be48d46dd775c63f2b66eb227465cb5d", "committedDate": "2020-04-24T04:00:53Z", "message": "Introduce support multiple tco member connections"}, "afterCommit": {"oid": "3b6ede78204ae207a5d768d046e2223614f9d799", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3b6ede78204ae207a5d768d046e2223614f9d799", "committedDate": "2020-04-24T04:10:00Z", "message": "Introduce support multiple tco member connections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b6ede78204ae207a5d768d046e2223614f9d799", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3b6ede78204ae207a5d768d046e2223614f9d799", "committedDate": "2020-04-24T04:10:00Z", "message": "Introduce support multiple tco member connections"}, "afterCommit": {"oid": "160f725430bdf091d6eea8158d1ec08eb99d3a7e", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/160f725430bdf091d6eea8158d1ec08eb99d3a7e", "committedDate": "2020-04-24T04:12:48Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4696a5ad82af2a39057b28835b7417ffc5aea5a0", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4696a5ad82af2a39057b28835b7417ffc5aea5a0", "committedDate": "2020-05-04T10:55:09Z", "message": "WIP"}, "afterCommit": {"oid": "f7e870f00f42c49d1812d107645b8f994fa502bf", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f7e870f00f42c49d1812d107645b8f994fa502bf", "committedDate": "2020-05-05T08:09:26Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7e870f00f42c49d1812d107645b8f994fa502bf", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f7e870f00f42c49d1812d107645b8f994fa502bf", "committedDate": "2020-05-05T08:09:26Z", "message": "WIP"}, "afterCommit": {"oid": "da6d7400a8113fdc70a0a0bad8bfeca829e94973", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da6d7400a8113fdc70a0a0bad8bfeca829e94973", "committedDate": "2020-05-05T08:10:05Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da6d7400a8113fdc70a0a0bad8bfeca829e94973", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/da6d7400a8113fdc70a0a0bad8bfeca829e94973", "committedDate": "2020-05-05T08:10:05Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "0019657b14722366bf30db2a4852869be5e6a404", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0019657b14722366bf30db2a4852869be5e6a404", "committedDate": "2020-05-05T08:48:18Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0019657b14722366bf30db2a4852869be5e6a404", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0019657b14722366bf30db2a4852869be5e6a404", "committedDate": "2020-05-05T08:48:18Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "0f1dacd1b3f419b1a3b214307923b0136c72a3bd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0f1dacd1b3f419b1a3b214307923b0136c72a3bd", "committedDate": "2020-05-05T11:46:00Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f1dacd1b3f419b1a3b214307923b0136c72a3bd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0f1dacd1b3f419b1a3b214307923b0136c72a3bd", "committedDate": "2020-05-05T11:46:00Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "f7cc454e71d8309b0676f816aca4ff4ba486110e", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f7cc454e71d8309b0676f816aca4ff4ba486110e", "committedDate": "2020-05-05T11:51:30Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7cc454e71d8309b0676f816aca4ff4ba486110e", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f7cc454e71d8309b0676f816aca4ff4ba486110e", "committedDate": "2020-05-05T11:51:30Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "68729a66df4732cbf8d47064b2ab8aad9e2ec346", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/68729a66df4732cbf8d47064b2ab8aad9e2ec346", "committedDate": "2020-05-06T06:32:35Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68729a66df4732cbf8d47064b2ab8aad9e2ec346", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/68729a66df4732cbf8d47064b2ab8aad9e2ec346", "committedDate": "2020-05-06T06:32:35Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "3d874421c3f8bbfe1dbc55ca20d8169452fbbb8a", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d874421c3f8bbfe1dbc55ca20d8169452fbbb8a", "committedDate": "2020-05-20T07:42:52Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d874421c3f8bbfe1dbc55ca20d8169452fbbb8a", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3d874421c3f8bbfe1dbc55ca20d8169452fbbb8a", "committedDate": "2020-05-20T07:42:52Z", "message": "WIP"}, "afterCommit": {"oid": "bb537bf36bbb5e8ceb6b18f7c714f74f4ac191e2", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bb537bf36bbb5e8ceb6b18f7c714f74f4ac191e2", "committedDate": "2020-05-29T08:41:54Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb537bf36bbb5e8ceb6b18f7c714f74f4ac191e2", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/bb537bf36bbb5e8ceb6b18f7c714f74f4ac191e2", "committedDate": "2020-05-29T08:41:54Z", "message": "WIP"}, "afterCommit": {"oid": "7136d7ffc313eee72d82c93d1b0119c518507b54", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7136d7ffc313eee72d82c93d1b0119c518507b54", "committedDate": "2020-06-02T07:30:51Z", "message": "WIP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzE0OTcy", "url": "https://github.com/hazelcast/hazelcast/pull/16925#pullrequestreview-436714972", "createdAt": "2020-06-24T14:40:42Z", "commit": {"oid": "7136d7ffc313eee72d82c93d1b0119c518507b54"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo0MDo0MlrOGoVS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowMTo1NVrOGoWT2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NTExNQ==", "bodyText": "Is this going to be the same in the final version? Can/shouldn't we allow setting the plane count without stopping the cluster and restarting the members?", "url": "https://github.com/hazelcast/hazelcast/pull/16925#discussion_r444945115", "createdAt": "2020-06-24T14:40:42Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/AbstractChannelInitializer.java", "diffHunk": "@@ -60,37 +60,46 @@ protected AbstractChannelInitializer(ServerContext serverContext, EndpointConfig\n         private final ILogger logger;\n         private final boolean spoofingChecks;\n         private final boolean unifiedEndpointManager;\n-\n         private final Set<ProtocolType> supportedProtocolTypes;\n+        private final int expectedPlaneCount;\n \n-        public MemberHandshakeHandler(TcpServerConnectionManager connectionManager, ServerContext serverContext, ILogger logger,\n+        public MemberHandshakeHandler(TcpServerConnectionManager connectionManager,\n+                                      ServerContext serverContext,\n+                                      ILogger logger,\n                                       Set<ProtocolType> supportedProtocolTypes) {\n             this.connectionManager = connectionManager;\n             this.serverContext = serverContext;\n             this.logger = logger;\n-            this.spoofingChecks = serverContext.properties().getBoolean(ClusterProperty.BIND_SPOOFING_CHECKS);\n+            this.spoofingChecks = serverContext.properties().getBoolean(BIND_SPOOFING_CHECKS);\n             this.supportedProtocolTypes = supportedProtocolTypes;\n             this.unifiedEndpointManager = connectionManager.getEndpointQualifier() == null;\n+            this.expectedPlaneCount = serverContext.properties().getInteger(CHANNEL_COUNT);\n         }\n \n         public void process(Packet packet) {\n-            Object o = serverContext.getSerializationService().toObject(packet);\n+            MemberHandshake handshake = serverContext.getSerializationService().toObject(packet);\n             TcpServerConnection connection = (TcpServerConnection) packet.getConn();\n-            if (connection.setHandshake()) {\n-                MemberHandshake handshake = (MemberHandshake) o;\n-                process(connection, handshake);\n-            } else {\n+            if (!connection.setHandshake()) {\n                 if (logger.isFinestEnabled()) {\n-                    logger.finest(\"Connection \" + connection + \" is already bound, ignoring incoming \" + o);\n+                    logger.finest(\"Connection \" + connection + \" handshake is already completed, ignoring incoming \" + handshake);\n                 }\n+                return;\n             }\n-        }\n \n-        private synchronized boolean process(TcpServerConnection connection, MemberHandshake handshake) {\n-            if (logger.isFinestEnabled()) {\n-                logger.finest(\"Handshake \" + connection + \", complete message is \" + handshake);\n+            if (handshake.getPlaneCount() != expectedPlaneCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7136d7ffc313eee72d82c93d1b0119c518507b54"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MTc1NA==", "bodyText": "Will streamId always be the partitionId? These are different concerns though, but it feels (so far) we just introduce a different term for the same thing. The property talks about channel count, its description partition count. So just a reminder for the final version: we need to agree on the term and use it consistently.", "url": "https://github.com/hazelcast/hazelcast/pull/16925#discussion_r444961754", "createdAt": "2020-06-24T15:01:55Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/Invocation.java", "diffHunk": "@@ -595,9 +595,16 @@ private void doInvokeLocal(boolean isAsync) {\n     private void doInvokeRemote() {\n         assert connectionManager != null : \"Endpoint manager was null\";\n \n-        ServerConnection connection = connectionManager.getOrConnect(targetAddress);\n+        ServerConnection connection = connectionManager.getOrConnect(targetAddress, op.getPartitionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7136d7ffc313eee72d82c93d1b0119c518507b54"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7136d7ffc313eee72d82c93d1b0119c518507b54", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7136d7ffc313eee72d82c93d1b0119c518507b54", "committedDate": "2020-06-02T07:30:51Z", "message": "WIP"}, "afterCommit": {"oid": "7cbbeb2926025aebe302f2d1360052d37ca71c49", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7cbbeb2926025aebe302f2d1360052d37ca71c49", "committedDate": "2020-06-30T08:39:54Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cbbeb2926025aebe302f2d1360052d37ca71c49", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7cbbeb2926025aebe302f2d1360052d37ca71c49", "committedDate": "2020-06-30T08:39:54Z", "message": "WIP"}, "afterCommit": {"oid": "b1a5934c56d825eeb458901536d5ca0afe6829b6", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b1a5934c56d825eeb458901536d5ca0afe6829b6", "committedDate": "2020-07-06T07:09:45Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1a5934c56d825eeb458901536d5ca0afe6829b6", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b1a5934c56d825eeb458901536d5ca0afe6829b6", "committedDate": "2020-07-06T07:09:45Z", "message": "WIP"}, "afterCommit": {"oid": "a8be4debc969f9e5ce8aa60e31004fc004fc09fb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a8be4debc969f9e5ce8aa60e31004fc004fc09fb", "committedDate": "2020-07-09T11:45:45Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8be4debc969f9e5ce8aa60e31004fc004fc09fb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a8be4debc969f9e5ce8aa60e31004fc004fc09fb", "committedDate": "2020-07-09T11:45:45Z", "message": "WIP"}, "afterCommit": {"oid": "1522f75489b653898558fdac9a45d5eaa77928a3", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1522f75489b653898558fdac9a45d5eaa77928a3", "committedDate": "2020-07-09T11:52:40Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1522f75489b653898558fdac9a45d5eaa77928a3", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/1522f75489b653898558fdac9a45d5eaa77928a3", "committedDate": "2020-07-09T11:52:40Z", "message": "WIP"}, "afterCommit": {"oid": "61c1ef6b67bf749a65f6792d18d34f46118905b5", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/61c1ef6b67bf749a65f6792d18d34f46118905b5", "committedDate": "2020-07-10T06:44:00Z", "message": "WIP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MDA1MDA5", "url": "https://github.com/hazelcast/hazelcast/pull/16925#pullrequestreview-447005009", "createdAt": "2020-07-13T06:16:25Z", "commit": {"oid": "61c1ef6b67bf749a65f6792d18d34f46118905b5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoxNjoyNVrOGwct7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMDo0OFrOGwczlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NTM0Mg==", "bodyText": "re-enable?", "url": "https://github.com/hazelcast/hazelcast/pull/16925#discussion_r453455342", "createdAt": "2020-07-13T06:16:25Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/AbstractChannelInitializer.java", "diffHunk": "@@ -60,37 +61,49 @@ protected AbstractChannelInitializer(ServerContext serverContext, EndpointConfig\n         private final ILogger logger;\n         private final boolean spoofingChecks;\n         private final boolean unifiedEndpointManager;\n-\n         private final Set<ProtocolType> supportedProtocolTypes;\n+        private final int expectedPlaneCount;\n \n-        public MemberHandshakeHandler(TcpServerConnectionManager connectionManager, ServerContext serverContext, ILogger logger,\n+        public MemberHandshakeHandler(TcpServerConnectionManager connectionManager,\n+                                      ServerContext serverContext,\n+                                      ILogger logger,\n                                       Set<ProtocolType> supportedProtocolTypes) {\n             this.connectionManager = connectionManager;\n             this.serverContext = serverContext;\n             this.logger = logger;\n-            this.spoofingChecks = serverContext.properties().getBoolean(ClusterProperty.BIND_SPOOFING_CHECKS);\n+            this.spoofingChecks = serverContext.properties().getBoolean(BIND_SPOOFING_CHECKS);\n             this.supportedProtocolTypes = supportedProtocolTypes;\n             this.unifiedEndpointManager = connectionManager.getEndpointQualifier() == null;\n+            this.expectedPlaneCount = serverContext.properties().getInteger(CHANNEL_COUNT);\n         }\n \n         public void process(Packet packet) {\n-            Object o = serverContext.getSerializationService().toObject(packet);\n+            MemberHandshake handshake = serverContext.getSerializationService().toObject(packet);\n             TcpServerConnection connection = (TcpServerConnection) packet.getConn();\n-            if (connection.setHandshake()) {\n-                MemberHandshake handshake = (MemberHandshake) o;\n-                process(connection, handshake);\n-            } else {\n+            if (!connection.setHandshake()) {\n                 if (logger.isFinestEnabled()) {\n-                    logger.finest(\"Connection \" + connection + \" is already bound, ignoring incoming \" + o);\n+                    logger.finest(\"Connection \" + connection + \" handshake is already completed, ignoring incoming \" + handshake);\n                 }\n+                return;\n             }\n-        }\n \n-        private synchronized boolean process(TcpServerConnection connection, MemberHandshake handshake) {\n-            if (logger.isFinestEnabled()) {\n-                logger.finest(\"Handshake \" + connection + \", complete message is \" + handshake);\n+            if (handshake.getPlaneCount() != expectedPlaneCount) {\n+                connection.close(\"The connection handshake has incorrect number of planes. \"\n+                        + \"Expected \" + expectedPlaneCount + \" found \" + handshake.getPlaneCount(), null);\n+                return;\n             }\n \n+            // before we register the connection on the plane, we make sure the plane index is set on the connection\n+            // so that we can safely remove the connection from the plane.\n+            connection.setPlaneIndex(handshake.getPlaneIndex());\n+            process(connection, handshake);\n+        }\n+\n+        private synchronized void process(TcpServerConnection connection, MemberHandshake handshake) {\n+            // if (logger.isFinestEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c1ef6b67bf749a65f6792d18d34f46118905b5"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1Njc5MA==", "bodyText": "?", "url": "https://github.com/hazelcast/hazelcast/pull/16925#discussion_r453456790", "createdAt": "2020-07-13T06:20:48Z", "author": {"login": "tkountis"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/server/FirewallingServer.java", "diffHunk": "@@ -236,27 +240,27 @@ private long getRandomBetween(long max, long min) {\n             return (long) ((max - min) * Math.random() + min);\n         }\n \n-        @Override\n-        public boolean transmit(Packet packet, ServerConnection connection) {\n-            if (connection != null) {\n-                PacketFilter.Action action = applyFilter(packet, connection.getRemoteAddress());\n-                switch (action) {\n-                    case DROP:\n-                        return true;\n-                    case REJECT:\n-                        return false;\n-                    case DELAY:\n-                        scheduledExecutor.schedule(new DelayedPacketTask(packet, connection), getDelayMs(), MILLISECONDS);\n-                        return true;\n-                    default:\n-                        // NOP\n-                }\n-            }\n-            return delegate.transmit(packet, connection);\n-        }\n+//        @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c1ef6b67bf749a65f6792d18d34f46118905b5"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61c1ef6b67bf749a65f6792d18d34f46118905b5", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/61c1ef6b67bf749a65f6792d18d34f46118905b5", "committedDate": "2020-07-10T06:44:00Z", "message": "WIP"}, "afterCommit": {"oid": "25b2313675e55e60cb4d1bec247a0b4be3686dda", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/25b2313675e55e60cb4d1bec247a0b4be3686dda", "committedDate": "2020-07-13T11:05:43Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e56f229e8d8e27cce8a15c0579546291f8a93c7c", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e56f229e8d8e27cce8a15c0579546291f8a93c7c", "committedDate": "2020-07-15T03:36:14Z", "message": "WIP"}, "afterCommit": {"oid": "7176d4ff30bc385cac58d8b927e0ffd7c30e0169", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7176d4ff30bc385cac58d8b927e0ffd7c30e0169", "committedDate": "2020-07-15T04:29:10Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7176d4ff30bc385cac58d8b927e0ffd7c30e0169", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7176d4ff30bc385cac58d8b927e0ffd7c30e0169", "committedDate": "2020-07-15T04:29:10Z", "message": "WIP"}, "afterCommit": {"oid": "16c3c2105bc80600a45c9b34119330df9bcb16d0", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/16c3c2105bc80600a45c9b34119330df9bcb16d0", "committedDate": "2020-07-15T06:49:08Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16c3c2105bc80600a45c9b34119330df9bcb16d0", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/16c3c2105bc80600a45c9b34119330df9bcb16d0", "committedDate": "2020-07-15T06:49:08Z", "message": "WIP"}, "afterCommit": {"oid": "890770d493f4b02d9a193599780c5db9fce55584", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/890770d493f4b02d9a193599780c5db9fce55584", "committedDate": "2020-07-15T07:07:38Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "890770d493f4b02d9a193599780c5db9fce55584", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/890770d493f4b02d9a193599780c5db9fce55584", "committedDate": "2020-07-15T07:07:38Z", "message": "WIP"}, "afterCommit": {"oid": "b123a55b9d52fca7d7c3010066c0538b5e6c7b21", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b123a55b9d52fca7d7c3010066c0538b5e6c7b21", "committedDate": "2020-07-15T11:09:35Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzA5MTg0", "url": "https://github.com/hazelcast/hazelcast/pull/16925#pullrequestreview-449709184", "createdAt": "2020-07-16T10:11:53Z", "commit": {"oid": "b123a55b9d52fca7d7c3010066c0538b5e6c7b21"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxMTo1NFrOGykWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxMTo1NFrOGykWpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3NzYwNg==", "bodyText": "Needs javadoc update.", "url": "https://github.com/hazelcast/hazelcast/pull/16925#discussion_r455677606", "createdAt": "2020-07-16T10:11:54Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/server/ServerConnectionManager.java", "diffHunk": "@@ -73,15 +78,19 @@ default int connectionCount() {\n      * @param connection    - The connection to be registered\n      * @return True if the call was successful\n      */\n-    boolean register(Address remoteAddress, ServerConnection connection);\n+    boolean register(Address remoteAddress, ServerConnection connection, int streamId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b123a55b9d52fca7d7c3010066c0538b5e6c7b21"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b123a55b9d52fca7d7c3010066c0538b5e6c7b21", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/b123a55b9d52fca7d7c3010066c0538b5e6c7b21", "committedDate": "2020-07-15T11:09:35Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "e0560a785fda52483699c80e465d28829dc69b65", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e0560a785fda52483699c80e465d28829dc69b65", "committedDate": "2020-07-16T11:14:41Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0571523864351f896de84ed1db6ad4045bf382", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0c0571523864351f896de84ed1db6ad4045bf382", "committedDate": "2020-07-16T11:30:41Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0560a785fda52483699c80e465d28829dc69b65", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e0560a785fda52483699c80e465d28829dc69b65", "committedDate": "2020-07-16T11:14:41Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}, "afterCommit": {"oid": "0c0571523864351f896de84ed1db6ad4045bf382", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0c0571523864351f896de84ed1db6ad4045bf382", "committedDate": "2020-07-16T11:30:41Z", "message": "Adds support for multiple connections between members\n\nHaving a single connection between members can lead to suboptimal\nperformance. On some environments like EC2 there is even a bandwidth\nlimit on a single flow (tcp connection) regardless of the actual\navailable network bandwidth.\n\nAlso under certain conditions like many clients and 2 member cluster,\nthe member to member connection needs to deal with all the backups of\nthe clients which can lead to an imbalance.\n\nWith multiple connections per members, these issues can be resolved.\n\nCurrently this is only available for members, but we'll probably apply\nthis approach as well to client to member connections at some point"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3806, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}