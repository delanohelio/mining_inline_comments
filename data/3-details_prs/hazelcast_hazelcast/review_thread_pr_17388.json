{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDczMTI0", "number": 17388, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozOTo0N1rOEbgrHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowNToxNFrOEbjn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjgyMzM0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozOTo0N1rOHFe3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozOTo0N1rOHFe3cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDY0Mg==", "bodyText": "I'd prefer something more pointing to the use, such as keyResolverPluginData", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475510642", "createdAt": "2020-08-24T10:39:47Z", "author": {"login": "viliam-durina"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "diffHunk": "@@ -37,6 +37,8 @@\n     private final String mapName;\n     private final QueryTargetDescriptor keyDescriptor;\n     private final QueryTargetDescriptor valueDescriptor;\n+    private final Object keyAppendix;\n+    private final Object valueAppendix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzMwMTM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMzozNVrOHFjXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMzozNVrOHFjXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NDM0NA==", "bodyText": "Minor comment - the name is not very specific. I would name it something like JetMapMetadataResolver or alike, to highlight that is:\n\nComes from Jet\nDeals with metadata", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475584344", "createdAt": "2020-08-24T13:03:35Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzMwNjc5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowNToxNFrOHFja0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoxOTozMlrOHFj7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA==", "bodyText": "Also minor comment.\nIn the resolver's code, you either pass here Class of ClassDefinition as the first argument. It is ok from IMDG perspective, but are you ok with a necessity of casts inside Jet implementation?\nIf you leave the interface as is, I would propose adding JavaDoc about expected arguments.", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475585234", "createdAt": "2020-08-24T13:05:14Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {\n+\n+    /**\n+     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n+     */\n+    Object resolve(Object object, boolean key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4OTA5NA==", "bodyText": "I had an impression that it was the proposed solution. Anyway, what about this one then?\ninterface JetMapMetadataResolver {\n    Object resolveClass(Class<?> clazz, boolean key);\n\n    Object resolvePortable(ClassDeficition clazz, boolean key);\n}\n\nAdditional methods could be added if needed (i.e. Json).", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475589094", "createdAt": "2020-08-24T13:12:06Z", "author": {"login": "gierlachg"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {\n+\n+    /**\n+     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n+     */\n+    Object resolve(Object object, boolean key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA=="}, "originalCommit": {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MzU3OA==", "bodyText": "They both OK from the IMDG perspective. The question is - what is better for Jet.\nThe interface you proposed in the comment looks good to me - it is clean and simple.", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475593578", "createdAt": "2020-08-24T13:19:32Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {\n+\n+    /**\n+     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n+     */\n+    Object resolve(Object object, boolean key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA=="}, "originalCommit": {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 324, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}