{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MDE2Mzc2", "number": 17996, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowNjo0NlrOFIklXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1MDoxMFrOFONbng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTMyMzE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/LikeFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowNjo0NlrOIKkNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MDoxMFrOIL1fVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0OTk2NQ==", "bodyText": "Question: do we use java reflections to instantiate so that we have to have empty public constructor?", "url": "https://github.com/hazelcast/hazelcast/pull/17996#discussion_r547949965", "createdAt": "2020-12-23T13:06:46Z", "author": {"login": "alex-dukhno"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/LikeFunction.java", "diffHunk": "@@ -54,18 +57,26 @@\n     /** Special characters which require escaping in Java. */\n     private static final String ESCAPE_CHARACTERS_JAVA = \"[]()|^+*?{}$\\\\.\";\n \n+    private boolean negated;\n     private transient State state;\n \n     public LikeFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d877a19f30afc9ef29b2deb862feb7c5df3ff18"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MTYyMg==", "bodyText": "The public constructor is required by our serialization engine, see SqlDataSerializerHook.", "url": "https://github.com/hazelcast/hazelcast/pull/17996#discussion_r549281622", "createdAt": "2020-12-28T09:40:10Z", "author": {"login": "devozerov"}, "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/LikeFunction.java", "diffHunk": "@@ -54,18 +57,26 @@\n     /** Special characters which require escaping in Java. */\n     private static final String ESCAPE_CHARACTERS_JAVA = \"[]()|^+*?{}$\\\\.\";\n \n+    private boolean negated;\n     private transient State state;\n \n     public LikeFunction() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0OTk2NQ=="}, "originalCommit": {"oid": "2d877a19f30afc9ef29b2deb862feb7c5df3ff18"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDQ0NDQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/string/LikeFunctionIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1MDoxMFrOIS1t2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNjoxNjowN1rOITQkag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyNTM3MQ==", "bodyText": "If you have just one parameter, you don't need to use a nested collection:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Collection<Object[]> parameters() {\n          \n          \n            \n                    return Arrays.asList(new Object[][]{ { false }, { true } });\n          \n          \n            \n                public static List<Boolean> parameters() {\n          \n          \n            \n                    return Arrays.asList(false, true);", "url": "https://github.com/hazelcast/hazelcast/pull/17996#discussion_r556625371", "createdAt": "2021-01-13T15:50:10Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/string/LikeFunctionIntegrationTest.java", "diffHunk": "@@ -37,132 +43,149 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-@RunWith(HazelcastParallelClassRunner.class)\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n public class LikeFunctionIntegrationTest extends ExpressionTestSupport {\n+\n+    private static final ConstantExpression<?> CONST_1 = ConstantExpression.create(\"1\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_2 = ConstantExpression.create(\"2\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_3 = ConstantExpression.create(\"3\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_OTHER = ConstantExpression.create(\"100\", QueryDataType.VARCHAR);\n+\n+    @Parameterized.Parameter\n+    public boolean negated;\n+\n+    @Parameterized.Parameters(name = \"mode:{0}\")\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][]{ { false }, { true } });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d877a19f30afc9ef29b2deb862feb7c5df3ff18"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA2NTMyMg==", "bodyText": "Fixed as suggested.", "url": "https://github.com/hazelcast/hazelcast/pull/17996#discussion_r557065322", "createdAt": "2021-01-14T06:16:07Z", "author": {"login": "devozerov"}, "path": "hazelcast-sql-core/src/test/java/com/hazelcast/sql/impl/expression/string/LikeFunctionIntegrationTest.java", "diffHunk": "@@ -37,132 +43,149 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-@RunWith(HazelcastParallelClassRunner.class)\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastParallelParametersRunnerFactory.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n public class LikeFunctionIntegrationTest extends ExpressionTestSupport {\n+\n+    private static final ConstantExpression<?> CONST_1 = ConstantExpression.create(\"1\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_2 = ConstantExpression.create(\"2\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_3 = ConstantExpression.create(\"3\", QueryDataType.VARCHAR);\n+    private static final ConstantExpression<?> CONST_OTHER = ConstantExpression.create(\"100\", QueryDataType.VARCHAR);\n+\n+    @Parameterized.Parameter\n+    public boolean negated;\n+\n+    @Parameterized.Parameters(name = \"mode:{0}\")\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][]{ { false }, { true } });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyNTM3MQ=="}, "originalCommit": {"oid": "2d877a19f30afc9ef29b2deb862feb7c5df3ff18"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 32, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}