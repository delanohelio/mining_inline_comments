{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjg0NzMz", "number": 17406, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNToyM1rOEcffBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODo1MFrOEckBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzExNDI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/GenericRecordBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNToyM1rOHHDwGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNToyM1rOHHDwGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MzU0NQ==", "bodyText": "nit this assertion (and other similar ones in this test) can be simplified to assertThrows(HazelcastSerializationException.class, builder::build);", "url": "https://github.com/hazelcast/hazelcast/pull/17406#discussion_r477163545", "createdAt": "2020-08-26T09:25:23Z", "author": {"login": "puzpuzpuz"}, "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/GenericRecordBuilderTest.java", "diffHunk": "@@ -101,4 +101,20 @@ public void run() {\n             }\n         });\n     }\n+\n+    @Test\n+    public void testUnwrittenFieldsThrowException() {\n+        ClassDefinition classDefinition =\n+                new ClassDefinitionBuilder(TestSerializationConstants.PORTABLE_FACTORY_ID, TestSerializationConstants.NAMED_PORTABLE)\n+                        .addUTFField(\"name\").addIntField(\"myint\").build();\n+\n+        GenericRecord.Builder builder = GenericRecord.Builder.portable(classDefinition);\n+        builder.writeInt(\"myint\", 1);\n+        assertThrows(HazelcastSerializationException.class, new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47e1669e4eb1660ad00327ac2e7db779134cdb5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mzg1Njk3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecordBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODo1MFrOHHK2Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowOTowNFrOHHLP-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTg0Ng==", "bodyText": "if i do cloneWithBuilder (all isWritten fields are false) and i only overwrite one field, some fields of isWritten will be left as false, right? and this check would fail? am i missing something here?", "url": "https://github.com/hazelcast/hazelcast/pull/17406#discussion_r477279846", "createdAt": "2020-08-26T12:58:50Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecordBuilder.java", "diffHunk": "@@ -29,25 +29,39 @@\n \n     private final ClassDefinition classDefinition;\n     private final Object[] objects;\n-    private final boolean[] isOverWritten;\n+    private final boolean[] isWritten;\n     private final boolean isClone;\n \n     public PortableGenericRecordBuilder(ClassDefinition classDefinition) {\n         this.classDefinition = classDefinition;\n         this.objects = new Object[classDefinition.getFieldCount()];\n         this.isClone = false;\n-        this.isOverWritten = null;\n+        this.isWritten = new boolean[objects.length];\n     }\n \n     PortableGenericRecordBuilder(ClassDefinition classDefinition, Object[] objects) {\n         this.classDefinition = classDefinition;\n         this.objects = objects;\n         this.isClone = true;\n-        this.isOverWritten = new boolean[objects.length];\n+        this.isWritten = new boolean[objects.length];\n     }\n \n+    /**\n+     * @return newly created GenericRecord\n+     * @throws HazelcastSerializationException if a field is not written when building with builder from\n+     *                                         {@link GenericRecord.Builder#portable(ClassDefinition)} and\n+     *                                         {@link GenericRecord#newBuilder()}\n+     */\n     @Override\n     public GenericRecord build() {\n+        if (!isClone) {\n+            for (int i = 0; i < isWritten.length; i++) {\n+                if (!isWritten[i]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4124eeabe6a9673bd263d97a4f2d9169e878b503"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NjM5Mg==", "bodyText": "If you do clone with the builder this check will not be done. see  if (!isClone) { at the beginning.\nI have a test that verifies the behavior.", "url": "https://github.com/hazelcast/hazelcast/pull/17406#discussion_r477286392", "createdAt": "2020-08-26T13:09:04Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecordBuilder.java", "diffHunk": "@@ -29,25 +29,39 @@\n \n     private final ClassDefinition classDefinition;\n     private final Object[] objects;\n-    private final boolean[] isOverWritten;\n+    private final boolean[] isWritten;\n     private final boolean isClone;\n \n     public PortableGenericRecordBuilder(ClassDefinition classDefinition) {\n         this.classDefinition = classDefinition;\n         this.objects = new Object[classDefinition.getFieldCount()];\n         this.isClone = false;\n-        this.isOverWritten = null;\n+        this.isWritten = new boolean[objects.length];\n     }\n \n     PortableGenericRecordBuilder(ClassDefinition classDefinition, Object[] objects) {\n         this.classDefinition = classDefinition;\n         this.objects = objects;\n         this.isClone = true;\n-        this.isOverWritten = new boolean[objects.length];\n+        this.isWritten = new boolean[objects.length];\n     }\n \n+    /**\n+     * @return newly created GenericRecord\n+     * @throws HazelcastSerializationException if a field is not written when building with builder from\n+     *                                         {@link GenericRecord.Builder#portable(ClassDefinition)} and\n+     *                                         {@link GenericRecord#newBuilder()}\n+     */\n     @Override\n     public GenericRecord build() {\n+        if (!isClone) {\n+            for (int i = 0; i < isWritten.length; i++) {\n+                if (!isWritten[i]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTg0Ng=="}, "originalCommit": {"oid": "4124eeabe6a9673bd263d97a4f2d9169e878b503"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 338, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}