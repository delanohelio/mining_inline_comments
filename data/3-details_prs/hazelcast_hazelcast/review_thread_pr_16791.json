{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDY1NzI2", "number": 16791, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo1NDo1NlrODqcLQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo1NDo1NlrODqcLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODI4NDE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo1NDo1NlrOF6MBHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTowODoxOFrOF7WIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1ODYyMg==", "bodyText": "If you expect to use this constructor only from member side, then HazelcastInstanceNotActiveException::new is fine. However if this constructor is to be used also by Jet client-side, then you should rather use whichever notActiveExceptionSupplier was used to construct the prototype service.", "url": "https://github.com/hazelcast/hazelcast/pull/16791#discussion_r396558622", "createdAt": "2020-03-23T15:54:56Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java", "diffHunk": "@@ -100,15 +101,17 @@\n         this.nullSerializerAdapter = createSerializerAdapter(new ConstantSerializers.NullSerializer());\n     }\n \n+    // used by jet\n     protected AbstractSerializationService(AbstractSerializationService prototype) {\n         this.version = prototype.version;\n         this.inputOutputFactory = prototype.inputOutputFactory;\n         this.classLoader = prototype.classLoader;\n         this.managedContext = prototype.managedContext;\n         this.globalPartitioningStrategy = prototype.globalPartitioningStrategy;\n         this.outputBufferSize = prototype.outputBufferSize;\n-        this.bufferPoolThreadLocal = prototype.bufferPoolThreadLocal;\n         this.nullSerializerAdapter = prototype.nullSerializerAdapter;\n+        this.bufferPoolThreadLocal = new BufferPoolThreadLocal(this, new BufferPoolFactoryImpl(),\n+                HazelcastInstanceNotActiveException::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bab4abfb88f26dc8ecba742b0a2c6997672ad0e1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MTM5Nw==", "bodyText": "from what i see HazelcastInstanceNotActiveException is used for instance here as well, there is no differentiation between client and member, @sancar what are your thoughts on this?", "url": "https://github.com/hazelcast/hazelcast/pull/16791#discussion_r396581397", "createdAt": "2020-03-23T16:24:34Z", "author": {"login": "gierlachg"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java", "diffHunk": "@@ -100,15 +101,17 @@\n         this.nullSerializerAdapter = createSerializerAdapter(new ConstantSerializers.NullSerializer());\n     }\n \n+    // used by jet\n     protected AbstractSerializationService(AbstractSerializationService prototype) {\n         this.version = prototype.version;\n         this.inputOutputFactory = prototype.inputOutputFactory;\n         this.classLoader = prototype.classLoader;\n         this.managedContext = prototype.managedContext;\n         this.globalPartitioningStrategy = prototype.globalPartitioningStrategy;\n         this.outputBufferSize = prototype.outputBufferSize;\n-        this.bufferPoolThreadLocal = prototype.bufferPoolThreadLocal;\n         this.nullSerializerAdapter = prototype.nullSerializerAdapter;\n+        this.bufferPoolThreadLocal = new BufferPoolThreadLocal(this, new BufferPoolFactoryImpl(),\n+                HazelcastInstanceNotActiveException::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1ODYyMg=="}, "originalCommit": {"oid": "bab4abfb88f26dc8ecba742b0a2c6997672ad0e1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3MjgzMQ==", "bodyText": "@vbekiaris is right. We don't expect HazelcastInstanceNotActiveException on the client side. The code that you shared should also be fixed in my opinion.", "url": "https://github.com/hazelcast/hazelcast/pull/16791#discussion_r397772831", "createdAt": "2020-03-25T11:08:18Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractSerializationService.java", "diffHunk": "@@ -100,15 +101,17 @@\n         this.nullSerializerAdapter = createSerializerAdapter(new ConstantSerializers.NullSerializer());\n     }\n \n+    // used by jet\n     protected AbstractSerializationService(AbstractSerializationService prototype) {\n         this.version = prototype.version;\n         this.inputOutputFactory = prototype.inputOutputFactory;\n         this.classLoader = prototype.classLoader;\n         this.managedContext = prototype.managedContext;\n         this.globalPartitioningStrategy = prototype.globalPartitioningStrategy;\n         this.outputBufferSize = prototype.outputBufferSize;\n-        this.bufferPoolThreadLocal = prototype.bufferPoolThreadLocal;\n         this.nullSerializerAdapter = prototype.nullSerializerAdapter;\n+        this.bufferPoolThreadLocal = new BufferPoolThreadLocal(this, new BufferPoolFactoryImpl(),\n+                HazelcastInstanceNotActiveException::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1ODYyMg=="}, "originalCommit": {"oid": "bab4abfb88f26dc8ecba742b0a2c6997672ad0e1"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 768, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}