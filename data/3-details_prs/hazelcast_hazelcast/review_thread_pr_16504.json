{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODcxOTYy", "number": 16504, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0NjoyN1rODZQHIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxMDowNFrODZxqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODA0OTYxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0NjoyN1rOFficOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxOTozN1rOFgW-rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDQ1Ng==", "bodyText": "previously we checked for iteratorResult == null but the check seems redundant?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r368614456", "createdAt": "2020-01-20T15:46:27Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTUwNQ==", "bodyText": "@mmedenjak, it seems null is still possible?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369461505", "createdAt": "2020-01-22T09:53:38Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDQ1Ng=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NDA3NQ==", "bodyText": "Yes, seems so. We never return null from any operation.", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369474075", "createdAt": "2020-01-22T10:17:09Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDQ1Ng=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NTI0Ng==", "bodyText": "@petrpleshachkov checked both operations, I don't see it. Where specifically did you see null being returned?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369475246", "createdAt": "2020-01-22T10:19:37Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDQ1Ng=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ4OTc3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1NDoyMlrOFgWKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowMzo1NlrOFgYQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw==", "bodyText": "The same here regarding null iteratorResult?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369461873", "createdAt": "2020-01-22T09:54:22Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NjY4NA==", "bodyText": "The way I see it, it boils down to the return values from ICacheRecordStore#fetchKeys and ICacheRecordStore#fetchEntries and I don't see null being returned from either. Where did you see the null value?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369476684", "createdAt": "2020-01-22T10:22:28Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4ODI3Nw==", "bodyText": "f.joinInternal() -> join() -> reportJoin(). The reportJoin() returns null in some cases\n    private static <T> T reportJoin(Object r) {\n        if (r instanceof AltResult) {\n            Throwable x;\n            if ((x = ((AltResult)r).ex) == null)\n                return null;\n            if (x instanceof CancellationException)\n                throw (CancellationException)x;\n            if (x instanceof CompletionException)\n                throw (CompletionException)x;\n            throw new CompletionException(x);\n        }\n        @SuppressWarnings(\"unchecked\") T t = (T) r;\n        return t;\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369488277", "createdAt": "2020-01-22T10:46:10Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5MzA2OA==", "bodyText": "Hm, not sure in which case this might happens but we'll have to inspect all of the codebase then as I see we have 290 usages of InternalCompletableFuture#joinInternal and I haven't seen null checks anywhere.", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369493068", "createdAt": "2020-01-22T10:56:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5NDg4Nw==", "bodyText": "Apparently this is a very rare case. @vbekiaris, WDYT?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369494887", "createdAt": "2020-01-22T11:00:35Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5NTg5MA==", "bodyText": "I see one reason why AltResult.ex might be null is if the future is completed with null:\n    /** The encoding of the null value. */\n    static final AltResult NIL = new AltResult(null);", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369495890", "createdAt": "2020-01-22T11:02:54Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5NjI3Ng==", "bodyText": "AltResult(ex = null) is the JDK 's null outcome encoding:\nCompletableFuture cf = new CompletableFuture();\ncf.complete(null); // --> this is encoded internally as an AltResult with field ex == null\n\nThe CompletableFutures obtained from invoking fetchKeys/Entries will either complete normally (with the non-null value returned from the respective operation) or exceptionally (when there is an invocation issue) but null is not a possible outcome.", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369496276", "createdAt": "2020-01-22T11:03:56Z", "author": {"login": "vbekiaris"}, "path": "hazelcast/src/main/java/com/hazelcast/cache/impl/CachePartitionsIterator.java", "diffHunk": "@@ -70,27 +70,24 @@ protected List fetch() {\n         final OperationService operationService = cacheProxy.getNodeEngine().getOperationService();\n         if (prefetchValues) {\n             Operation operation = cacheProxy.operationProvider.createFetchEntriesOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheEntriesWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheEntriesWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getEntries(), iteratorResult.getPointers());\n-                return iteratorResult.getEntries();\n-            }\n+            CacheEntriesWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getEntries(), iteratorResult.getPointers());\n+            return iteratorResult.getEntries();\n         } else {\n             Operation operation = cacheProxy.operationProvider.createFetchKeysOperation(pointers, fetchSize);\n-            InternalCompletableFuture<CacheKeysWithCursor> f = operationService\n-                    .invokeOnPartition(CacheService.SERVICE_NAME, operation, partitionIndex);\n-            CacheKeysWithCursor iteratorResult = f.joinInternal();\n-            if (iteratorResult != null) {\n-                setLastTableIndex(iteratorResult.getKeys(), iteratorResult.getPointers());\n-                return iteratorResult.getKeys();\n-            }\n+            CacheKeysWithCursor iteratorResult = invoke(operationService, operation);\n+            setIterationPointers(iteratorResult.getKeys(), iteratorResult.getPointers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MTg3Mw=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzUwNTg2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1ODo1NFrOFgWUGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1ODo1NFrOFgWUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2NDM0NA==", "bodyText": "Typo?  successfulterations -> successfullterations?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369464344", "createdAt": "2020-01-22T09:58:54Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache;\n+\n+import com.hazelcast.cache.impl.CacheProxy;\n+import com.hazelcast.client.cache.impl.ClientCacheProxy;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MaxSizePolicy;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.SlowTest;\n+import com.hazelcast.test.bounce.BounceMemberRule;\n+import com.hazelcast.test.bounce.BounceTestConfiguration.DriverType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.cache.Cache;\n+import javax.cache.Cache.Entry;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import static com.hazelcast.config.EvictionConfig.DEFAULT_MAX_SIZE_POLICY;\n+import static com.hazelcast.config.MaxSizePolicy.USED_NATIVE_MEMORY_SIZE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category(SlowTest.class)\n+public class CachePartitionIteratorBouncingTest extends HazelcastTestSupport {\n+\n+    private final Logger logger = Logger.getLogger(getClass().getName());\n+    private static final String TEST_CACHE_NAME = \"testCache\";\n+    private static final int STABLE_ENTRY_COUNT = 10000;\n+    private static final int CONCURRENCY = 2;\n+    public static final int FETCH_SIZE = 100;\n+    public static final int MUTATION_ENTRY_FACTOR = 10;\n+    public AtomicInteger successfulIterations = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU0NjgyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoxMDowNFrOFgWr4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDozODoyOVrOFgXjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3MDQzMg==", "bodyText": "We call the method twice with runnableIndex = 0 in both cases? Is this an idea of the test?", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369470432", "createdAt": "2020-01-22T10:10:04Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache;\n+\n+import com.hazelcast.cache.impl.CacheProxy;\n+import com.hazelcast.client.cache.impl.ClientCacheProxy;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MaxSizePolicy;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.SlowTest;\n+import com.hazelcast.test.bounce.BounceMemberRule;\n+import com.hazelcast.test.bounce.BounceTestConfiguration.DriverType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.cache.Cache;\n+import javax.cache.Cache.Entry;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import static com.hazelcast.config.EvictionConfig.DEFAULT_MAX_SIZE_POLICY;\n+import static com.hazelcast.config.MaxSizePolicy.USED_NATIVE_MEMORY_SIZE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category(SlowTest.class)\n+public class CachePartitionIteratorBouncingTest extends HazelcastTestSupport {\n+\n+    private final Logger logger = Logger.getLogger(getClass().getName());\n+    private static final String TEST_CACHE_NAME = \"testCache\";\n+    private static final int STABLE_ENTRY_COUNT = 10000;\n+    private static final int CONCURRENCY = 2;\n+    public static final int FETCH_SIZE = 100;\n+    public static final int MUTATION_ENTRY_FACTOR = 10;\n+    public AtomicInteger successfulIterations = new AtomicInteger();\n+\n+    @Rule\n+    public BounceMemberRule bounceMemberRule =\n+            BounceMemberRule.with(getConfig())\n+                            .clusterSize(4)\n+                            .driverCount(4)\n+                            .driverType(isClientDriver() ? DriverType.CLIENT : DriverType.MEMBER)\n+                            .build();\n+\n+    @Override\n+    protected Config getConfig() {\n+        Config config = smallInstanceConfig();\n+        MaxSizePolicy maxSizePolicy = getInMemoryFormat() == InMemoryFormat.NATIVE\n+                ? USED_NATIVE_MEMORY_SIZE\n+                : DEFAULT_MAX_SIZE_POLICY;\n+        config.getCacheConfig(TEST_CACHE_NAME)\n+              .setInMemoryFormat(getInMemoryFormat())\n+              .getEvictionConfig()\n+              .setMaxSizePolicy(maxSizePolicy)\n+              .setSize(Integer.MAX_VALUE);\n+\n+        return config;\n+    }\n+\n+    @Test\n+    public void test() {\n+        ICache<Integer, Integer> cache = bounceMemberRule.getSteadyMember()\n+                                                         .getCacheManager()\n+                                                         .getCache(TEST_CACHE_NAME);\n+        populateCache(cache);\n+\n+        Runnable[] testTasks = new Runnable[CONCURRENCY];\n+        for (int i = 0; i < CONCURRENCY; ) {\n+            HazelcastInstance driver = bounceMemberRule.getNextTestDriver();\n+            testTasks[i++] = new IterationRunnable(driver);\n+            testTasks[i++] = new MutationRunnable(driver, i / 2);\n+        }\n+        bounceMemberRule.testRepeatedly(testTasks, MINUTES.toSeconds(3));\n+    }\n+\n+    private void populateCache(ICache<Integer, Integer> cache) {\n+        for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+            cache.put(i, i);\n+        }\n+    }\n+\n+    public class IterationRunnable implements Runnable {\n+\n+        private final HazelcastInstance hazelcastInstance;\n+        private ICache<Integer, Integer> cache;\n+\n+        public IterationRunnable(HazelcastInstance hazelcastInstance) {\n+            this.hazelcastInstance = hazelcastInstance;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (cache == null) {\n+                cache = hazelcastInstance.getCacheManager().getCache(TEST_CACHE_NAME);\n+            }\n+            HashSet<Integer> all = getAll();\n+            for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+                assertTrue(\"Missing stable entry \" + i + \" - \" + cache.get(i), all.contains(i));\n+            }\n+\n+            logger.info(\"Successfully finished iteration \" + successfulIterations.incrementAndGet());\n+        }\n+\n+        private HashSet<Integer> getAll() {\n+            HashSet<Integer> keys = new HashSet<>();\n+            int partitionCount = hazelcastInstance.getPartitionService().getPartitions().size();\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                Iterator<Cache.Entry<Integer, Integer>> iterator = createIterator(cache, FETCH_SIZE, partitionId, false);\n+                while (iterator.hasNext()) {\n+                    Entry<Integer, Integer> e = iterator.next();\n+                    assertTrue(\"Got the same key twice\", keys.add(e.getKey()));\n+                }\n+            }\n+            return keys;\n+        }\n+\n+    }\n+\n+    private Iterator<Cache.Entry<Integer, Integer>> createIterator(\n+            ICache<Integer, Integer> cache, int fetchSize, int partitionId, boolean prefetchValues) {\n+        return isClientDriver()\n+                ? ((ClientCacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues)\n+                : ((CacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues);\n+    }\n+\n+    protected boolean isClientDriver() {\n+        return false;\n+    }\n+\n+    protected InMemoryFormat getInMemoryFormat() {\n+        return CacheSimpleConfig.DEFAULT_IN_MEMORY_FORMAT;\n+    }\n+\n+    public static class MutationRunnable implements Runnable {\n+        private final HazelcastInstance hazelcastInstance;\n+        private final int startIndex;\n+        private final int endIndex;\n+        private ICache<Integer, Integer> cache;\n+\n+        public MutationRunnable(HazelcastInstance hazelcastInstance, int runnableIndex) {\n+            this.hazelcastInstance = hazelcastInstance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3OTMwNw==", "bodyText": "Which method and which cases? As the for-loop increases by two in each loop, the iteration index should be increasing by one.", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369479307", "createdAt": "2020-01-22T10:27:46Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache;\n+\n+import com.hazelcast.cache.impl.CacheProxy;\n+import com.hazelcast.client.cache.impl.ClientCacheProxy;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MaxSizePolicy;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.SlowTest;\n+import com.hazelcast.test.bounce.BounceMemberRule;\n+import com.hazelcast.test.bounce.BounceTestConfiguration.DriverType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.cache.Cache;\n+import javax.cache.Cache.Entry;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import static com.hazelcast.config.EvictionConfig.DEFAULT_MAX_SIZE_POLICY;\n+import static com.hazelcast.config.MaxSizePolicy.USED_NATIVE_MEMORY_SIZE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category(SlowTest.class)\n+public class CachePartitionIteratorBouncingTest extends HazelcastTestSupport {\n+\n+    private final Logger logger = Logger.getLogger(getClass().getName());\n+    private static final String TEST_CACHE_NAME = \"testCache\";\n+    private static final int STABLE_ENTRY_COUNT = 10000;\n+    private static final int CONCURRENCY = 2;\n+    public static final int FETCH_SIZE = 100;\n+    public static final int MUTATION_ENTRY_FACTOR = 10;\n+    public AtomicInteger successfulIterations = new AtomicInteger();\n+\n+    @Rule\n+    public BounceMemberRule bounceMemberRule =\n+            BounceMemberRule.with(getConfig())\n+                            .clusterSize(4)\n+                            .driverCount(4)\n+                            .driverType(isClientDriver() ? DriverType.CLIENT : DriverType.MEMBER)\n+                            .build();\n+\n+    @Override\n+    protected Config getConfig() {\n+        Config config = smallInstanceConfig();\n+        MaxSizePolicy maxSizePolicy = getInMemoryFormat() == InMemoryFormat.NATIVE\n+                ? USED_NATIVE_MEMORY_SIZE\n+                : DEFAULT_MAX_SIZE_POLICY;\n+        config.getCacheConfig(TEST_CACHE_NAME)\n+              .setInMemoryFormat(getInMemoryFormat())\n+              .getEvictionConfig()\n+              .setMaxSizePolicy(maxSizePolicy)\n+              .setSize(Integer.MAX_VALUE);\n+\n+        return config;\n+    }\n+\n+    @Test\n+    public void test() {\n+        ICache<Integer, Integer> cache = bounceMemberRule.getSteadyMember()\n+                                                         .getCacheManager()\n+                                                         .getCache(TEST_CACHE_NAME);\n+        populateCache(cache);\n+\n+        Runnable[] testTasks = new Runnable[CONCURRENCY];\n+        for (int i = 0; i < CONCURRENCY; ) {\n+            HazelcastInstance driver = bounceMemberRule.getNextTestDriver();\n+            testTasks[i++] = new IterationRunnable(driver);\n+            testTasks[i++] = new MutationRunnable(driver, i / 2);\n+        }\n+        bounceMemberRule.testRepeatedly(testTasks, MINUTES.toSeconds(3));\n+    }\n+\n+    private void populateCache(ICache<Integer, Integer> cache) {\n+        for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+            cache.put(i, i);\n+        }\n+    }\n+\n+    public class IterationRunnable implements Runnable {\n+\n+        private final HazelcastInstance hazelcastInstance;\n+        private ICache<Integer, Integer> cache;\n+\n+        public IterationRunnable(HazelcastInstance hazelcastInstance) {\n+            this.hazelcastInstance = hazelcastInstance;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (cache == null) {\n+                cache = hazelcastInstance.getCacheManager().getCache(TEST_CACHE_NAME);\n+            }\n+            HashSet<Integer> all = getAll();\n+            for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+                assertTrue(\"Missing stable entry \" + i + \" - \" + cache.get(i), all.contains(i));\n+            }\n+\n+            logger.info(\"Successfully finished iteration \" + successfulIterations.incrementAndGet());\n+        }\n+\n+        private HashSet<Integer> getAll() {\n+            HashSet<Integer> keys = new HashSet<>();\n+            int partitionCount = hazelcastInstance.getPartitionService().getPartitions().size();\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                Iterator<Cache.Entry<Integer, Integer>> iterator = createIterator(cache, FETCH_SIZE, partitionId, false);\n+                while (iterator.hasNext()) {\n+                    Entry<Integer, Integer> e = iterator.next();\n+                    assertTrue(\"Got the same key twice\", keys.add(e.getKey()));\n+                }\n+            }\n+            return keys;\n+        }\n+\n+    }\n+\n+    private Iterator<Cache.Entry<Integer, Integer>> createIterator(\n+            ICache<Integer, Integer> cache, int fetchSize, int partitionId, boolean prefetchValues) {\n+        return isClientDriver()\n+                ? ((ClientCacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues)\n+                : ((CacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues);\n+    }\n+\n+    protected boolean isClientDriver() {\n+        return false;\n+    }\n+\n+    protected InMemoryFormat getInMemoryFormat() {\n+        return CacheSimpleConfig.DEFAULT_IN_MEMORY_FORMAT;\n+    }\n+\n+    public static class MutationRunnable implements Runnable {\n+        private final HazelcastInstance hazelcastInstance;\n+        private final int startIndex;\n+        private final int endIndex;\n+        private ICache<Integer, Integer> cache;\n+\n+        public MutationRunnable(HazelcastInstance hazelcastInstance, int runnableIndex) {\n+            this.hazelcastInstance = hazelcastInstance;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3MDQzMg=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDY5Mw==", "bodyText": "Didn't notice that it increases by 2.", "url": "https://github.com/hazelcast/hazelcast/pull/16504#discussion_r369484693", "createdAt": "2020-01-22T10:38:29Z", "author": {"login": "petrpleshachkov"}, "path": "hazelcast/src/test/java/com/hazelcast/cache/CachePartitionIteratorBouncingTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.cache;\n+\n+import com.hazelcast.cache.impl.CacheProxy;\n+import com.hazelcast.client.cache.impl.ClientCacheProxy;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MaxSizePolicy;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.SlowTest;\n+import com.hazelcast.test.bounce.BounceMemberRule;\n+import com.hazelcast.test.bounce.BounceTestConfiguration.DriverType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import javax.cache.Cache;\n+import javax.cache.Cache.Entry;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import static com.hazelcast.config.EvictionConfig.DEFAULT_MAX_SIZE_POLICY;\n+import static com.hazelcast.config.MaxSizePolicy.USED_NATIVE_MEMORY_SIZE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category(SlowTest.class)\n+public class CachePartitionIteratorBouncingTest extends HazelcastTestSupport {\n+\n+    private final Logger logger = Logger.getLogger(getClass().getName());\n+    private static final String TEST_CACHE_NAME = \"testCache\";\n+    private static final int STABLE_ENTRY_COUNT = 10000;\n+    private static final int CONCURRENCY = 2;\n+    public static final int FETCH_SIZE = 100;\n+    public static final int MUTATION_ENTRY_FACTOR = 10;\n+    public AtomicInteger successfulIterations = new AtomicInteger();\n+\n+    @Rule\n+    public BounceMemberRule bounceMemberRule =\n+            BounceMemberRule.with(getConfig())\n+                            .clusterSize(4)\n+                            .driverCount(4)\n+                            .driverType(isClientDriver() ? DriverType.CLIENT : DriverType.MEMBER)\n+                            .build();\n+\n+    @Override\n+    protected Config getConfig() {\n+        Config config = smallInstanceConfig();\n+        MaxSizePolicy maxSizePolicy = getInMemoryFormat() == InMemoryFormat.NATIVE\n+                ? USED_NATIVE_MEMORY_SIZE\n+                : DEFAULT_MAX_SIZE_POLICY;\n+        config.getCacheConfig(TEST_CACHE_NAME)\n+              .setInMemoryFormat(getInMemoryFormat())\n+              .getEvictionConfig()\n+              .setMaxSizePolicy(maxSizePolicy)\n+              .setSize(Integer.MAX_VALUE);\n+\n+        return config;\n+    }\n+\n+    @Test\n+    public void test() {\n+        ICache<Integer, Integer> cache = bounceMemberRule.getSteadyMember()\n+                                                         .getCacheManager()\n+                                                         .getCache(TEST_CACHE_NAME);\n+        populateCache(cache);\n+\n+        Runnable[] testTasks = new Runnable[CONCURRENCY];\n+        for (int i = 0; i < CONCURRENCY; ) {\n+            HazelcastInstance driver = bounceMemberRule.getNextTestDriver();\n+            testTasks[i++] = new IterationRunnable(driver);\n+            testTasks[i++] = new MutationRunnable(driver, i / 2);\n+        }\n+        bounceMemberRule.testRepeatedly(testTasks, MINUTES.toSeconds(3));\n+    }\n+\n+    private void populateCache(ICache<Integer, Integer> cache) {\n+        for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+            cache.put(i, i);\n+        }\n+    }\n+\n+    public class IterationRunnable implements Runnable {\n+\n+        private final HazelcastInstance hazelcastInstance;\n+        private ICache<Integer, Integer> cache;\n+\n+        public IterationRunnable(HazelcastInstance hazelcastInstance) {\n+            this.hazelcastInstance = hazelcastInstance;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (cache == null) {\n+                cache = hazelcastInstance.getCacheManager().getCache(TEST_CACHE_NAME);\n+            }\n+            HashSet<Integer> all = getAll();\n+            for (int i = 0; i < STABLE_ENTRY_COUNT; i++) {\n+                assertTrue(\"Missing stable entry \" + i + \" - \" + cache.get(i), all.contains(i));\n+            }\n+\n+            logger.info(\"Successfully finished iteration \" + successfulIterations.incrementAndGet());\n+        }\n+\n+        private HashSet<Integer> getAll() {\n+            HashSet<Integer> keys = new HashSet<>();\n+            int partitionCount = hazelcastInstance.getPartitionService().getPartitions().size();\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                Iterator<Cache.Entry<Integer, Integer>> iterator = createIterator(cache, FETCH_SIZE, partitionId, false);\n+                while (iterator.hasNext()) {\n+                    Entry<Integer, Integer> e = iterator.next();\n+                    assertTrue(\"Got the same key twice\", keys.add(e.getKey()));\n+                }\n+            }\n+            return keys;\n+        }\n+\n+    }\n+\n+    private Iterator<Cache.Entry<Integer, Integer>> createIterator(\n+            ICache<Integer, Integer> cache, int fetchSize, int partitionId, boolean prefetchValues) {\n+        return isClientDriver()\n+                ? ((ClientCacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues)\n+                : ((CacheProxy<Integer, Integer>) cache).iterator(fetchSize, partitionId, prefetchValues);\n+    }\n+\n+    protected boolean isClientDriver() {\n+        return false;\n+    }\n+\n+    protected InMemoryFormat getInMemoryFormat() {\n+        return CacheSimpleConfig.DEFAULT_IN_MEMORY_FORMAT;\n+    }\n+\n+    public static class MutationRunnable implements Runnable {\n+        private final HazelcastInstance hazelcastInstance;\n+        private final int startIndex;\n+        private final int endIndex;\n+        private ICache<Integer, Integer> cache;\n+\n+        public MutationRunnable(HazelcastInstance hazelcastInstance, int runnableIndex) {\n+            this.hazelcastInstance = hazelcastInstance;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3MDQzMg=="}, "originalCommit": {"oid": "a3bd6cbb36ee33fc3a63087c27f267f11a53cbcd"}, "originalPosition": 164}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 868, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}