{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTI5NDU3", "number": 17143, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMjo0NlrOEKEJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1MzozMFrOEMjR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTg5MTc3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMjo0NlrOGq5GUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMjo0NlrOGq5GUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyODg4Mw==", "bodyText": "Since there is just 1 item in the map, I think we can set the initial capacity for that map correctly.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r447628883", "createdAt": "2020-06-30T12:02:46Z", "author": {"login": "pveentjer"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class CacheInfoCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> caches;\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        caches = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(CacheService.SERVICE_NAME)).collect(toList());\n+        Map<String, String> cacheInfo = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d89a276af76eaf077ebf1d6163a92132a91abe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzYyNzI4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NDo0M1rOGrcslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NDo0M1rOGrcslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMjExNg==", "bodyText": "Please make this class package-private (just like the other collector implementations).", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r448212116", "createdAt": "2020-07-01T08:44:43Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class CacheInfoCollector implements MetricsCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d89a276af76eaf077ebf1d6163a92132a91abe"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzYyODY0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NTowM1rOGrctYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NTowM1rOGrctYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMjMyMg==", "bodyText": "Please make this member private. There is no reason to expose it.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r448212322", "createdAt": "2020-07-01T08:45:03Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class CacheInfoCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> caches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d89a276af76eaf077ebf1d6163a92132a91abe"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTczNjYyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo0NToyOFrOGtMVZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo0NToyOFrOGtMVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0MTE4OA==", "bodyText": "I think in this case there is no reason to extract this into a separate method. It can go into computeMetrics() , and that will also eliminate the caches field and you can get the cawact metric in a single stream operation chain.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r450041188", "createdAt": "2020-07-06T07:45:28Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+class CacheInfoCollector implements MetricsCollector {\n+\n+    private Collection<DistributedObject> caches;\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        caches = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(CacheService.SERVICE_NAME)).collect(toList());\n+        Map<String, String> cacheInfo = new HashMap<>(1);\n+        cacheInfo.put(\"cawact\", String.valueOf(countCacheWithWANReplication(hazelcastNode)));\n+        return cacheInfo;\n+    }\n+\n+    private long countCacheWithWANReplication(Node node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab94d37d66e59d4f6379b5a318da99eef83efed4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA3OTQ3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODowNVrOGucJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODowNVrOGucJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0ODc4OA==", "bodyText": "Does this pass checkstyle without the braces?", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r451348788", "createdAt": "2020-07-08T07:48:05Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+class CacheInfoCollector implements MetricsCollector {\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+        Map<String, String> cacheInfo = new HashMap<>(1);\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        long countCacheWithWANReplication = distributedObjects.stream().filter(distributedObject -> {\n+\n+            if (!distributedObject.getServiceName().equals(CacheService.SERVICE_NAME))\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fde5430aa3d0491ea4140dc80b37b14c3c0439"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA5MTUxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MTozN1rOGucQuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MTozN1rOGucQuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MDcxNQ==", "bodyText": "This lambda is a bit too lenghty (for readability reasons it is good to keep lambdas small, my personal advice is no more than 3 lines). A complex predicate like this one can be broken up into multiple filter() calls, like first you filter by service name, and in the second you filter by config.wanReplicationRef. Please make this change, then we will examine the code again and refactor in one more iteration.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r451350715", "createdAt": "2020-07-08T07:51:37Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+class CacheInfoCollector implements MetricsCollector {\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+        Map<String, String> cacheInfo = new HashMap<>(1);\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        long countCacheWithWANReplication = distributedObjects.stream().filter(distributedObject -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fde5430aa3d0491ea4140dc80b37b14c3c0439"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTE2NjA4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo1NToyNVrOGumujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo1NToyNVrOGumujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMjE5MA==", "bodyText": "Hello @chanmol1999 thanks for addressing my previous comment. Now if you look at the code, you can see that the lambda is still a little bit long, so we can think a bit about if we can break it up into more smaller strem operations: you can observe that\n\nthe filtering lambda uses only the config of the cache object\nno subsequent stream operation uses the cache object, that the stream operates on\n\nSo given this, first you can use the map() operation to map the cache object to its config, then change the current (second) filter to perform the check on the config, which then will be possible in a one-liner lambda.\nPlease let me know on gitter if anyhting is unclear.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r451522190", "createdAt": "2020-07-08T12:55:25Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.config.CacheSimpleConfig;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+class CacheInfoCollector implements MetricsCollector {\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+        Map<String, String> cacheInfo = new HashMap<>(1);\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        long countCacheWithWANReplication = distributedObjects.stream()\n+                .filter(distributedObject -> distributedObject.getServiceName().equals(CacheService.SERVICE_NAME))\n+                .filter(distributedObject -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08de3c7caf2ec76158c31a0d8b685b109c9598f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTk2Mzg1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1MzozMFrOGuujcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1MzozMFrOGuujcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MDQxOQ==", "bodyText": "This lambda can be even further simplified into a one-liner expression, no statements, control structures are necessary. Please try to figure out how.", "url": "https://github.com/hazelcast/hazelcast/pull/17143#discussion_r451650419", "createdAt": "2020-07-08T15:53:30Z", "author": {"login": "erosb"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/CacheInfoCollector.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+class CacheInfoCollector implements MetricsCollector {\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+        Map<String, String> cacheInfo = new HashMap<>(1);\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        long countCacheWithWANReplication = distributedObjects.stream()\n+                .filter(distributedObject -> distributedObject.getServiceName().equals(CacheService.SERVICE_NAME))\n+                .map(distributedObject -> hazelcastNode.getConfig().findCacheConfigOrNull(distributedObject.getName()))\n+                .filter(cacheSimpleConfig -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c901d3aa2468508abad932aa98cb91c5cc71077"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 412, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}