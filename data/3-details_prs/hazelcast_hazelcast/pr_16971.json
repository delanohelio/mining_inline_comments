{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1ODk0NjI5", "number": 16971, "title": "Introduction of CPU thread affinity", "bodyText": "Provides CPU thread affinity.\nSo certain threads can have affinity for particular cpu's.\nServer\n-Dhazelcast.io.input.thread.affinity=1-3 \n-Dhazelcast.io.output.thread.affinity=3-5 \n-Dhazelcast.operation.thread.affinity=7-10,13 \n-Dhazelcast.operation.response.thread.affinity=15,16\n\nClient\n-Dhazelcast.client.io.input.thread.affinity=1-4 \n-Dhazelcast.client.io.output.thread.affinity=5-8\n-Dhazelcast.client.response.thread.affinity=7-9\n\nIf you don't configure affinity for a category of threads, it means they can run on any CPU.\nThis gives a lot better control on latency and provides better throughput. The number of threads configured in the affinity settings overrides the number of threads that have been configured explicitly.\n\n\nIt matters a lot on which NUMA node the IO threads are. It can make performance very bad, but also very good. More research is needed.\nFor the time being this will not be a public feature. We can use it internally to exclude certain problems like threads moving over CPUS and control NUMA locality of memory.\nWhen using the affinity syntax it is important to realize that it also includes the number of threads. So it will override the corresponding thread count.\nThe affinity syntax is as follows:\n\n1,2,3,4: We get 1 thread on CPU1, one thread on CPU2 etc. In total there are 4 threads configured which will each run on a different CPU.\n1-4: this is a shortcut  for the above syntax.\n[1-4]: this is a group. This will give 4 threads and each thread can run on CPU's 1-4.\n[1-4]:2: this is also group but with 2 threads that can run over CPUS 1-4.\n\nYou can also make combinations\n1,3,5-8,[10-20]:2,[31,41]:5\nIt is important to realize that 3-4 is something else than [3-4]. The first configuration will give you 1 thread assigned to CPU 3 and another to CPU 4. The second configuration will give you 2 threads that both can run on CPUS 3 and 4.\nIf you have the following CPU NUMA node mapping:\n\nCPUS 0-19 on NUMA node 0\nCPUS 20-39on NUMA node 1\nYou could configure 20 threads on NUMA node 0 and 20 threads on NUMA node 2 like this:\n[0-19],[20-39].\n\nIf you want to see the mapping, run\nnumactl --hardware\nExample from a dual socket machine:\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 1 2 3 4 5 6 7 8 9 20 21 22 23 24 25 26 27 28 29\nnode 0 size: 393090 MB\nnode 0 free: 372729 MB\nnode 1 cpus: 10 11 12 13 14 15 16 17 18 19 30 31 32 33 34 35 36 37 38 39\nnode 1 size: 393216 MB\nnode 1 free: 343296 MB\nnode distances:\nnode   0   1 \n  0:  10  21 \n  1:  21  10 \n\nIf you want to confine the partition threads to the NUMA nodes for the above configuration, you would use:\n-Dhazelcast.operation.thread.affinity=[0-9,20-29],[10-19,30-39]\n\nThe affinity properties can only be set from the command line. E.g.\n -Dhazelcast.client.io.input.thread.affinity=1,2,3\n\nA few warnings:\n\nPinning a single thread down to a single CPU is great for experiments. But can be a problem in a production setup because the thread has no other CPU it can run on. So if another thread or the OS would be running on that CPU (there are many more threads in HZ and in the JVM), this thread will get stalled. So in most cases it will be better to use the group syntax i.e. [from-to]:threadcount\nBe careful pinning a thread down to CPU 0 especially if that is the only thread it can run on. In some environment this CPU is used for other purposes.\nSince this is not a public feature, breaking changes can be made without warning.\nMileage may vary! Thread affinity is not a guarantee for reduced latency or increased throughput.\n\nYou need to following jars on your classpath:\n  <!-- needed for thread affinity -->\n        <dependency>\n            <groupId>net.openhft</groupId>\n            <artifactId>affinity</artifactId>\n            <version>3.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.5.8</version>\n        </dependency>\n\nIf you are using the Simulator, you don't need to do anything extra since Simulator has these on the classpath.\nIn the System.out you will find information if the affinity has been picked up correctly. E.g.\nhz.heuristic_mccarthy.partition-operation.thread-0 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-1 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-2 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-4 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-3 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-6 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-5 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-7 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-8 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-9 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-11 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-12 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-10 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-13 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-14 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-15 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-17 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-16 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-18 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-19 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-24 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-27 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-25 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-30 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-21 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-38 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-39 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-22 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-31 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-28 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-20 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-26 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-23 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-37 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-36 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-34 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-29 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-32 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-33 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.partition-operation.thread-35 has affinity for cpus:{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}\nhz.heuristic_mccarthy.IO.thread-in-0 has affinity for cpus:{1, 2, 3, 4}\nhz.heuristic_mccarthy.IO.thread-in-1 has affinity for cpus:{1, 2, 3, 4}\nhz.heuristic_mccarthy.IO.thread-in-2 has affinity for cpus:{1, 2, 3, 4}\nhz.heuristic_mccarthy.IO.thread-out-0 has affinity for cpus:{5, 6, 7, 8}\nhz.heuristic_mccarthy.IO.thread-in-3 has affinity for cpus:{1, 2, 3, 4}\nhz.heuristic_mccarthy.IO.thread-out-1 has affinity for cpus:{5, 6, 7, 8}\nhz.heuristic_mccarthy.IO.thread-out-3 has affinity for cpus:{5, 6, 7, 8}\nhz.heuristic_mccarthy.IO.thread-out-2 has affinity for cpus:{5, 6, 7, 8}", "createdAt": "2020-05-11T06:24:12Z", "url": "https://github.com/hazelcast/hazelcast/pull/16971", "merged": true, "mergeCommit": {"oid": "a1496221a028be974eeb0285f157c92a1cc9fb73"}, "closed": true, "closedAt": "2020-05-20T07:31:10Z", "author": {"login": "pveentjer"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgJp3cABqjMzMjE0NDMyMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjC0kwABqjMzNTQ4NTQ5NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3e4f1f2dabc06484de8d310ea7507be55ba503f", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a3e4f1f2dabc06484de8d310ea7507be55ba503f", "committedDate": "2020-05-11T06:23:51Z", "message": "WIP"}, "afterCommit": {"oid": "f10829ffc8198176e3695b9c54852b89923b178a", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f10829ffc8198176e3695b9c54852b89923b178a", "committedDate": "2020-05-11T06:26:09Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d29d350b9a976840dcabb54bb3546193649f671c", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d29d350b9a976840dcabb54bb3546193649f671c", "committedDate": "2020-05-11T06:49:06Z", "message": "More work on affinity"}, "afterCommit": {"oid": "3a9c78d2d36daa04bebbed7736ce60f8864380fd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3a9c78d2d36daa04bebbed7736ce60f8864380fd", "committedDate": "2020-05-11T07:22:30Z", "message": "More work on affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a9c78d2d36daa04bebbed7736ce60f8864380fd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/3a9c78d2d36daa04bebbed7736ce60f8864380fd", "committedDate": "2020-05-11T07:22:30Z", "message": "More work on affinity"}, "afterCommit": {"oid": "2bf220034cb7d23137cf7452408d5c4c5b58b4b4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2bf220034cb7d23137cf7452408d5c4c5b58b4b4", "committedDate": "2020-05-12T09:15:02Z", "message": "More work on affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bf220034cb7d23137cf7452408d5c4c5b58b4b4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2bf220034cb7d23137cf7452408d5c4c5b58b4b4", "committedDate": "2020-05-12T09:15:02Z", "message": "More work on affinity"}, "afterCommit": {"oid": "7ae1c036e6502b96e791162c69bbdf651ff551cb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ae1c036e6502b96e791162c69bbdf651ff551cb", "committedDate": "2020-05-12T12:14:25Z", "message": "More work on affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ae1c036e6502b96e791162c69bbdf651ff551cb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/7ae1c036e6502b96e791162c69bbdf651ff551cb", "committedDate": "2020-05-12T12:14:25Z", "message": "More work on affinity"}, "afterCommit": {"oid": "e1396a33be1c01acf0e8897489da778d67ce55e5", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/e1396a33be1c01acf0e8897489da778d67ce55e5", "committedDate": "2020-05-12T12:43:27Z", "message": "More work on affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d01aac1676e007999fe94a40dc848cfe7e7d8444", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d01aac1676e007999fe94a40dc848cfe7e7d8444", "committedDate": "2020-05-13T09:55:47Z", "message": "Lot of work on improved syntax"}, "afterCommit": {"oid": "19f72d7d8278450ffda9868f5f62108b0e9334f8", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/19f72d7d8278450ffda9868f5f62108b0e9334f8", "committedDate": "2020-05-13T11:21:46Z", "message": "Lot of work on improved syntax"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2551860d5e705a3eef1a4d408706d54601c3835b", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/2551860d5e705a3eef1a4d408706d54601c3835b", "committedDate": "2020-05-13T12:16:27Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "ed803d7e9dabb81a17b49dc57408c4ed4e9e7846", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ed803d7e9dabb81a17b49dc57408c4ed4e9e7846", "committedDate": "2020-05-13T12:41:49Z", "message": "Added logging which thread gets which cores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed803d7e9dabb81a17b49dc57408c4ed4e9e7846", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ed803d7e9dabb81a17b49dc57408c4ed4e9e7846", "committedDate": "2020-05-13T12:41:49Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "44e4078cb88d6c5a0c9668ca3dee2015962fcd9f", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/44e4078cb88d6c5a0c9668ca3dee2015962fcd9f", "committedDate": "2020-05-14T08:12:02Z", "message": "Added logging which thread gets which cores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44e4078cb88d6c5a0c9668ca3dee2015962fcd9f", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/44e4078cb88d6c5a0c9668ca3dee2015962fcd9f", "committedDate": "2020-05-14T08:12:02Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "ccaef4834fe3c482f345d9cc29304843657ad3d4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ccaef4834fe3c482f345d9cc29304843657ad3d4", "committedDate": "2020-05-14T12:35:30Z", "message": "Added logging which thread gets which cores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccaef4834fe3c482f345d9cc29304843657ad3d4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/ccaef4834fe3c482f345d9cc29304843657ad3d4", "committedDate": "2020-05-14T12:35:30Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "c3c73dc34acc7d2085a7d7bce4e95a56b280ee30", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c3c73dc34acc7d2085a7d7bce4e95a56b280ee30", "committedDate": "2020-05-18T08:57:43Z", "message": "Added logging which thread gets which cores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDgzNzA0", "url": "https://github.com/hazelcast/hazelcast/pull/16971#pullrequestreview-413483704", "createdAt": "2020-05-18T10:54:34Z", "commit": {"oid": "c3c73dc34acc7d2085a7d7bce4e95a56b280ee30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3c73dc34acc7d2085a7d7bce4e95a56b280ee30", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/c3c73dc34acc7d2085a7d7bce4e95a56b280ee30", "committedDate": "2020-05-18T08:57:43Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "4b9602123a02f3b6fb447f260879554c929efd26", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4b9602123a02f3b6fb447f260879554c929efd26", "committedDate": "2020-05-18T11:05:36Z", "message": "Added logging which thread gets which cores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b9602123a02f3b6fb447f260879554c929efd26", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4b9602123a02f3b6fb447f260879554c929efd26", "committedDate": "2020-05-18T11:05:36Z", "message": "Added logging which thread gets which cores"}, "afterCommit": {"oid": "d074a3636018062ab9e33841933b1eb80dbb0de7", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d074a3636018062ab9e33841933b1eb80dbb0de7", "committedDate": "2020-05-18T11:07:42Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d074a3636018062ab9e33841933b1eb80dbb0de7", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/d074a3636018062ab9e33841933b1eb80dbb0de7", "committedDate": "2020-05-18T11:07:42Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "6513f4eb64a9dd51522bfcbd2ccf560ad7a1b3fd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6513f4eb64a9dd51522bfcbd2ccf560ad7a1b3fd", "committedDate": "2020-05-18T13:04:56Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6513f4eb64a9dd51522bfcbd2ccf560ad7a1b3fd", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/6513f4eb64a9dd51522bfcbd2ccf560ad7a1b3fd", "committedDate": "2020-05-18T13:04:56Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "26ffacd7ef44bfa1606daafa1e75a4cde37fd0e8", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/26ffacd7ef44bfa1606daafa1e75a4cde37fd0e8", "committedDate": "2020-05-19T03:34:12Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26ffacd7ef44bfa1606daafa1e75a4cde37fd0e8", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/26ffacd7ef44bfa1606daafa1e75a4cde37fd0e8", "committedDate": "2020-05-19T03:34:12Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f266a5c0d666850b293d998c72e2898ca7da8feb", "committedDate": "2020-05-19T07:18:51Z", "message": "Introduced thread affinity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjY4OTEz", "url": "https://github.com/hazelcast/hazelcast/pull/16971#pullrequestreview-414268913", "createdAt": "2020-05-19T09:32:05Z", "commit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozMjowNVrOGXX_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoyNDoxMVrOGXZ4YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzQ1NQ==", "bodyText": "Extra line", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427163455", "createdAt": "2020-05-19T09:32:05Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioNetworking.java", "diffHunk": "@@ -501,6 +510,7 @@ public Context() {\n             }\n         }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NjI0Nw==", "bodyText": "Shouldn't we use logging instead? Our logging should have already been initialized when we get here.", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427166247", "createdAt": "2020-05-19T09:36:33Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ThreadAffinity.java", "diffHunk": "@@ -0,0 +1,323 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import net.openhft.affinity.Affinity;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is threadsafe.\n+ */\n+public class ThreadAffinity {\n+    public static final ThreadAffinity DISABLED = new ThreadAffinity(null);\n+\n+    final List<BitSet> allowedCpusList;\n+    final AtomicInteger threadIndex = new AtomicInteger();\n+\n+    public ThreadAffinity(String affinity) {\n+        allowedCpusList = parse(affinity);\n+\n+        if (allowedCpusList.isEmpty()) {\n+            return;\n+        }\n+\n+        if (!isAffinityAvailable()) {\n+            throw new RuntimeException(\"Can't use affinity '\" + affinity + \"'. Thread affinity support is not available.\");\n+        }\n+    }\n+\n+    /**\n+     * Creates a new ThreadAffinity based on a system property.\n+     *\n+     * If no property is set, then affinity is disabled.\n+     *\n+     * @param property the name of the system property.\n+     * @return the created ThreadAffinity.\n+     * @throws InvalidAffinitySyntaxException if there is a problem with the value.\n+     */\n+    public static ThreadAffinity newSystemThreadAffinity(String property) {\n+        String value = System.getProperty(property);\n+        try {\n+            return new ThreadAffinity(value);\n+        } catch (InvalidAffinitySyntaxException e) {\n+            throw new InvalidAffinitySyntaxException(\"Invalid affinity syntax for System property '\" + property + \"'.\"\n+                    + \" Value '\" + value + \"'. \"\n+                    + \" Errormessage '\" + e.getMessage() + \"'\");\n+        }\n+    }\n+\n+    public int getThreadCount() {\n+        return allowedCpusList.size();\n+    }\n+\n+\n+    public BitSet nextAllowedCpus() {\n+        if (allowedCpusList.isEmpty()) {\n+            return null;\n+        }\n+\n+        int index = threadIndex.getAndIncrement() % allowedCpusList.size();\n+        return allowedCpusList.get(index);\n+    }\n+\n+    public boolean isEnabled() {\n+        return !allowedCpusList.isEmpty();\n+    }\n+\n+    private static boolean isAffinityAvailable() {\n+        try {\n+            boolean jnaAvailable = Affinity.isJNAAvailable();\n+            if (!jnaAvailable) {\n+                System.err.println(\"jna is not available\");\n+            }\n+            return jnaAvailable;\n+        } catch (NoClassDefFoundError e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NDA3Nw==", "bodyText": "Missing \"be\".", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427184077", "createdAt": "2020-05-19T10:06:11Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ThreadAffinity.java", "diffHunk": "@@ -0,0 +1,323 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import net.openhft.affinity.Affinity;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is threadsafe.\n+ */\n+public class ThreadAffinity {\n+    public static final ThreadAffinity DISABLED = new ThreadAffinity(null);\n+\n+    final List<BitSet> allowedCpusList;\n+    final AtomicInteger threadIndex = new AtomicInteger();\n+\n+    public ThreadAffinity(String affinity) {\n+        allowedCpusList = parse(affinity);\n+\n+        if (allowedCpusList.isEmpty()) {\n+            return;\n+        }\n+\n+        if (!isAffinityAvailable()) {\n+            throw new RuntimeException(\"Can't use affinity '\" + affinity + \"'. Thread affinity support is not available.\");\n+        }\n+    }\n+\n+    /**\n+     * Creates a new ThreadAffinity based on a system property.\n+     *\n+     * If no property is set, then affinity is disabled.\n+     *\n+     * @param property the name of the system property.\n+     * @return the created ThreadAffinity.\n+     * @throws InvalidAffinitySyntaxException if there is a problem with the value.\n+     */\n+    public static ThreadAffinity newSystemThreadAffinity(String property) {\n+        String value = System.getProperty(property);\n+        try {\n+            return new ThreadAffinity(value);\n+        } catch (InvalidAffinitySyntaxException e) {\n+            throw new InvalidAffinitySyntaxException(\"Invalid affinity syntax for System property '\" + property + \"'.\"\n+                    + \" Value '\" + value + \"'. \"\n+                    + \" Errormessage '\" + e.getMessage() + \"'\");\n+        }\n+    }\n+\n+    public int getThreadCount() {\n+        return allowedCpusList.size();\n+    }\n+\n+\n+    public BitSet nextAllowedCpus() {\n+        if (allowedCpusList.isEmpty()) {\n+            return null;\n+        }\n+\n+        int index = threadIndex.getAndIncrement() % allowedCpusList.size();\n+        return allowedCpusList.get(index);\n+    }\n+\n+    public boolean isEnabled() {\n+        return !allowedCpusList.isEmpty();\n+    }\n+\n+    private static boolean isAffinityAvailable() {\n+        try {\n+            boolean jnaAvailable = Affinity.isJNAAvailable();\n+            if (!jnaAvailable) {\n+                System.err.println(\"jna is not available\");\n+            }\n+            return jnaAvailable;\n+        } catch (NoClassDefFoundError e) {\n+            e.printStackTrace();\n+            System.err.println(\"Affinity jar isn't available\");\n+            return false;\n+        }\n+    }\n+\n+    static List<BitSet> parse(String affinity) {\n+        List<BitSet> cpus = new ArrayList<>();\n+        if (affinity == null) {\n+            return cpus;\n+        }\n+\n+        affinity = affinity.trim();\n+        if (affinity.isEmpty()) {\n+            return cpus;\n+        }\n+\n+        List<CpuGroup> groups = new AffinityParser(affinity).parse();\n+        for (CpuGroup group : groups) {\n+            BitSet allowedCpus = new BitSet();\n+\n+            for (Integer cpu : group.cpus) {\n+                allowedCpus.set(cpu);\n+            }\n+            for (int k = 0; k < group.threadCount; k++) {\n+                cpus.add(allowedCpus);\n+            }\n+        }\n+\n+        return cpus;\n+    }\n+\n+    static class AffinityParser {\n+        private final String string;\n+        private final List<CpuGroup> groups = new ArrayList<>();\n+        private int index;\n+        private int digit;\n+        private int integer;\n+        private int fromRange;\n+        private int toRange;\n+\n+        AffinityParser(String string) {\n+            this.string = string;\n+        }\n+\n+        List<CpuGroup> parse() {\n+            if (!expression() || index < string.length()) {\n+                throw new InvalidAffinitySyntaxException(\"Syntax Error at \" + index);\n+            }\n+\n+            // verification that we have no duplicate cpus.\n+            BitSet usedCpus = new BitSet();\n+            for (CpuGroup group : groups) {\n+                for (Integer cpu : group.cpus) {\n+                    if (usedCpus.get(cpu)) {\n+                        throw new InvalidAffinitySyntaxException(\"Duplicate CPU found, offending CPU=\" + cpu);\n+                    }\n+                    usedCpus.set(cpu);\n+                }\n+            }\n+\n+            return groups;\n+        }\n+\n+        boolean expression() {\n+            if (!item()) {\n+                return false;\n+            }\n+\n+            while (character(',')) {\n+                if (!item()) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        boolean item() {\n+            if (range()) {\n+                for (int cpu = fromRange; cpu <= toRange; cpu++) {\n+                    CpuGroup group = new CpuGroup();\n+                    group.cpus.add(cpu);\n+                    group.threadCount = 1;\n+                    groups.add(group);\n+                }\n+                return true;\n+            } else {\n+                return group();\n+            }\n+        }\n+\n+        boolean range() {\n+            if (!integer()) {\n+                return false;\n+            }\n+            fromRange = integer;\n+            toRange = integer;\n+            if (character('-')) {\n+                if (!integer()) {\n+                    return false;\n+                }\n+                toRange = integer;\n+                if (toRange < fromRange) {\n+                    error(\"ToRange can't smaller than fromRange, toRange=\" + toRange + \" fromRange=\" + fromRange + \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NTk3Nw==", "bodyText": "Missing \"cannot\".", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427185977", "createdAt": "2020-05-19T10:09:11Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ThreadAffinity.java", "diffHunk": "@@ -0,0 +1,323 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import net.openhft.affinity.Affinity;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is threadsafe.\n+ */\n+public class ThreadAffinity {\n+    public static final ThreadAffinity DISABLED = new ThreadAffinity(null);\n+\n+    final List<BitSet> allowedCpusList;\n+    final AtomicInteger threadIndex = new AtomicInteger();\n+\n+    public ThreadAffinity(String affinity) {\n+        allowedCpusList = parse(affinity);\n+\n+        if (allowedCpusList.isEmpty()) {\n+            return;\n+        }\n+\n+        if (!isAffinityAvailable()) {\n+            throw new RuntimeException(\"Can't use affinity '\" + affinity + \"'. Thread affinity support is not available.\");\n+        }\n+    }\n+\n+    /**\n+     * Creates a new ThreadAffinity based on a system property.\n+     *\n+     * If no property is set, then affinity is disabled.\n+     *\n+     * @param property the name of the system property.\n+     * @return the created ThreadAffinity.\n+     * @throws InvalidAffinitySyntaxException if there is a problem with the value.\n+     */\n+    public static ThreadAffinity newSystemThreadAffinity(String property) {\n+        String value = System.getProperty(property);\n+        try {\n+            return new ThreadAffinity(value);\n+        } catch (InvalidAffinitySyntaxException e) {\n+            throw new InvalidAffinitySyntaxException(\"Invalid affinity syntax for System property '\" + property + \"'.\"\n+                    + \" Value '\" + value + \"'. \"\n+                    + \" Errormessage '\" + e.getMessage() + \"'\");\n+        }\n+    }\n+\n+    public int getThreadCount() {\n+        return allowedCpusList.size();\n+    }\n+\n+\n+    public BitSet nextAllowedCpus() {\n+        if (allowedCpusList.isEmpty()) {\n+            return null;\n+        }\n+\n+        int index = threadIndex.getAndIncrement() % allowedCpusList.size();\n+        return allowedCpusList.get(index);\n+    }\n+\n+    public boolean isEnabled() {\n+        return !allowedCpusList.isEmpty();\n+    }\n+\n+    private static boolean isAffinityAvailable() {\n+        try {\n+            boolean jnaAvailable = Affinity.isJNAAvailable();\n+            if (!jnaAvailable) {\n+                System.err.println(\"jna is not available\");\n+            }\n+            return jnaAvailable;\n+        } catch (NoClassDefFoundError e) {\n+            e.printStackTrace();\n+            System.err.println(\"Affinity jar isn't available\");\n+            return false;\n+        }\n+    }\n+\n+    static List<BitSet> parse(String affinity) {\n+        List<BitSet> cpus = new ArrayList<>();\n+        if (affinity == null) {\n+            return cpus;\n+        }\n+\n+        affinity = affinity.trim();\n+        if (affinity.isEmpty()) {\n+            return cpus;\n+        }\n+\n+        List<CpuGroup> groups = new AffinityParser(affinity).parse();\n+        for (CpuGroup group : groups) {\n+            BitSet allowedCpus = new BitSet();\n+\n+            for (Integer cpu : group.cpus) {\n+                allowedCpus.set(cpu);\n+            }\n+            for (int k = 0; k < group.threadCount; k++) {\n+                cpus.add(allowedCpus);\n+            }\n+        }\n+\n+        return cpus;\n+    }\n+\n+    static class AffinityParser {\n+        private final String string;\n+        private final List<CpuGroup> groups = new ArrayList<>();\n+        private int index;\n+        private int digit;\n+        private int integer;\n+        private int fromRange;\n+        private int toRange;\n+\n+        AffinityParser(String string) {\n+            this.string = string;\n+        }\n+\n+        List<CpuGroup> parse() {\n+            if (!expression() || index < string.length()) {\n+                throw new InvalidAffinitySyntaxException(\"Syntax Error at \" + index);\n+            }\n+\n+            // verification that we have no duplicate cpus.\n+            BitSet usedCpus = new BitSet();\n+            for (CpuGroup group : groups) {\n+                for (Integer cpu : group.cpus) {\n+                    if (usedCpus.get(cpu)) {\n+                        throw new InvalidAffinitySyntaxException(\"Duplicate CPU found, offending CPU=\" + cpu);\n+                    }\n+                    usedCpus.set(cpu);\n+                }\n+            }\n+\n+            return groups;\n+        }\n+\n+        boolean expression() {\n+            if (!item()) {\n+                return false;\n+            }\n+\n+            while (character(',')) {\n+                if (!item()) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        boolean item() {\n+            if (range()) {\n+                for (int cpu = fromRange; cpu <= toRange; cpu++) {\n+                    CpuGroup group = new CpuGroup();\n+                    group.cpus.add(cpu);\n+                    group.threadCount = 1;\n+                    groups.add(group);\n+                }\n+                return true;\n+            } else {\n+                return group();\n+            }\n+        }\n+\n+        boolean range() {\n+            if (!integer()) {\n+                return false;\n+            }\n+            fromRange = integer;\n+            toRange = integer;\n+            if (character('-')) {\n+                if (!integer()) {\n+                    return false;\n+                }\n+                toRange = integer;\n+                if (toRange < fromRange) {\n+                    error(\"ToRange can't smaller than fromRange, toRange=\" + toRange + \" fromRange=\" + fromRange + \".\");\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        private void error(String error) {\n+            throw new InvalidAffinitySyntaxException(error + \" at index:\" + index);\n+        }\n+\n+        @SuppressWarnings(\"checkstyle:NPathComplexity\")\n+        boolean group() {\n+            if (!character('[')) {\n+                return false;\n+            }\n+\n+            if (!range()) {\n+                return false;\n+            }\n+\n+            CpuGroup group = new CpuGroup();\n+            addCpuRangeToGroup(group);\n+\n+            while (character(',')) {\n+                if (!range()) {\n+                    return false;\n+                }\n+\n+                addCpuRangeToGroup(group);\n+            }\n+\n+            if (!character(']')) {\n+                return false;\n+            }\n+\n+            if (character(':')) {\n+                if (!integer()) {\n+                    return false;\n+                }\n+                group.threadCount = integer;\n+                if (group.threadCount == 0) {\n+                    error(\"Thread count can't be 0.\");\n+                } else if (group.threadCount > group.cpus.size()) {\n+                    error(\"Thread count be larger than number of cpu's in the group. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4ODMxMA==", "bodyText": "Should be logging here and below.", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427188310", "createdAt": "2020-05-19T10:12:53Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/executor/HazelcastManagedThread.java", "diffHunk": "@@ -71,10 +81,19 @@ protected void afterRun() {\n \n     }\n \n-    /**\n-     * Manages the thread lifecycle and can be overridden to customize if needed.\n-     */\n-    public void run() {\n+    @Override\n+    public final void run() {\n+        if (allowedCpus != null) {\n+            Affinity.setAffinity(allowedCpus);\n+            BitSet actualCpus = Affinity.getAffinity();\n+            if (!actualCpus.equals(allowedCpus)) {\n+                System.out.println(getName() + \" affinity was not applied successfully. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4OTUyNA==", "bodyText": "Would make sense to add a test for negative numbers too. Both for groups and thread count.", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427189524", "createdAt": "2020-05-19T10:15:05Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/util/ThreadAffinityTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.BitSet;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ThreadAffinityTest {\n+\n+    @Test\n+    public void whenNull() {\n+        ThreadAffinity threadAffinity = new ThreadAffinity(null);\n+\n+        assertFalse(threadAffinity.isEnabled());\n+        assertNull(threadAffinity.nextAllowedCpus());\n+    }\n+\n+    @Test\n+    public void whenEmptyString() {\n+        ThreadAffinity threadAffinity = new ThreadAffinity(\"\");\n+\n+        assertFalse(threadAffinity.isEnabled());\n+        assertNull(threadAffinity.nextAllowedCpus());\n+    }\n+\n+    @Test(expected = ThreadAffinity.InvalidAffinitySyntaxException.class)\n+    public void whenSyntaxError() {\n+        new ThreadAffinity(\"abc\");\n+    }\n+\n+    @Test(expected = ThreadAffinity.InvalidAffinitySyntaxException.class)\n+    public void whenTrailingComma() {\n+        new ThreadAffinity(\"10,\");\n+    }\n+\n+    @Test(expected = ThreadAffinity.InvalidAffinitySyntaxException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NDQ2NA==", "bodyText": "I think later for a product feature we should get rid of these dependencies. Ideally, we should have no added dependency if thread affinity becomes a prod feature. We can bundle a statically linked native lib in our jar - just like in EE - that only provides the glue code between the underlying syscalls and our Java code. If it would be done against libnuma - that also supports setting affinity -, we would gain additional features such as discovering the NUMA layout of the machine.", "url": "https://github.com/hazelcast/hazelcast/pull/16971#discussion_r427194464", "createdAt": "2020-05-19T10:24:11Z", "author": {"login": "blazember"}, "path": "hazelcast/pom.xml", "diffHunk": "@@ -315,6 +315,29 @@\n     </build>\n \n     <dependencies>\n+        <!-- needed for thread affinity -->\n+        <dependency>\n+            <groupId>net.openhft</groupId>\n+            <artifactId>affinity</artifactId>\n+            <version>3.2.2</version>\n+            <scope>provided</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <version>1.7.25</version>\n+            <scope>provided</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <version>1.5.8</version>\n+            <scope>provided</scope>\n+            <optional>true</optional>\n+        </dependency>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f266a5c0d666850b293d998c72e2898ca7da8feb", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/f266a5c0d666850b293d998c72e2898ca7da8feb", "committedDate": "2020-05-19T07:18:51Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "8530ed1f42ed92911ea2c2c4f70ad119665c927b", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8530ed1f42ed92911ea2c2c4f70ad119665c927b", "committedDate": "2020-05-19T11:06:16Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8530ed1f42ed92911ea2c2c4f70ad119665c927b", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/8530ed1f42ed92911ea2c2c4f70ad119665c927b", "committedDate": "2020-05-19T11:06:16Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "0e98042da02a8c4f25b67fb3b2db24190d422e56", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0e98042da02a8c4f25b67fb3b2db24190d422e56", "committedDate": "2020-05-20T01:43:41Z", "message": "Introduced thread affinity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7e7defde2086b20a3af93e6d59ff4fadfd06ae4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a7e7defde2086b20a3af93e6d59ff4fadfd06ae4", "committedDate": "2020-05-20T06:10:23Z", "message": "Introduced thread affinity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e98042da02a8c4f25b67fb3b2db24190d422e56", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0e98042da02a8c4f25b67fb3b2db24190d422e56", "committedDate": "2020-05-20T01:43:41Z", "message": "Introduced thread affinity"}, "afterCommit": {"oid": "a7e7defde2086b20a3af93e6d59ff4fadfd06ae4", "author": {"user": {"login": "pveentjer", "name": "Peter Veentjer"}}, "url": "https://github.com/hazelcast/hazelcast/commit/a7e7defde2086b20a3af93e6d59ff4fadfd06ae4", "committedDate": "2020-05-20T06:10:23Z", "message": "Introduced thread affinity"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}