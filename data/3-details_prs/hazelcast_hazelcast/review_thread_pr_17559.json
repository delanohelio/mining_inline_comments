{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjMwMTQx", "number": 17559, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1NzozMFrOEkesHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NzoyNFrOEpYGuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg3MDA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/AbstractQueryCacheConfigBuilderHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1NzozMFrOHTclVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjowNDo0MFrOHTe0UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzMwMw==", "bodyText": "I guess here's this \"eager\" change you mentioned in the description. Why is it better to read it lazily here?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490153303", "createdAt": "2020-09-17T10:57:30Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/AbstractQueryCacheConfigBuilderHelper.java", "diffHunk": "@@ -60,32 +60,29 @@ protected String getTextContent(Node node) {\n     }\n \n     protected void populateQueryCacheConfig(QueryCacheConfig queryCacheConfig,\n-                                            Node childNode, String textContent, String nodeName) {\n+                                            Node childNode, String nodeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE4OTkwNQ==", "bodyText": "Here, it's just actually to simplify things. There's no point in passing both Node and the content because the content is in the Node.\nWhen it comes to eager, it just means we should not fetch the value when we're not sure it's needed. And in many places, we'd fetch the value first, and only then check if they key matches some of the existing config properties. So laziness is implemented just by moving the extraction of textContent into if blocks", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490189905", "createdAt": "2020-09-17T12:04:40Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/AbstractQueryCacheConfigBuilderHelper.java", "diffHunk": "@@ -60,32 +60,29 @@ protected String getTextContent(Node node) {\n     }\n \n     protected void populateQueryCacheConfig(QueryCacheConfig queryCacheConfig,\n-                                            Node childNode, String textContent, String nodeName) {\n+                                            Node childNode, String nodeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzMwMw=="}, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg3OTg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowMDoxOVrOHTcrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjowNToxNVrOHTe1og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NDc5MQ==", "bodyText": "Isn't the .trim() executed already in getTextContent() method?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490154791", "createdAt": "2020-09-17T11:00:19Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1736,21 +1707,20 @@ protected void handleMap(Node parentNode) throws Exception {\n     void handleMapNode(Node parentNode, final MapConfig mapConfig) throws Exception {\n         for (Node node : childElements(parentNode)) {\n             String nodeName = cleanNodeName(node);\n-            String value = getTextContent(node).trim();\n             if (matches(\"backup-count\", nodeName)) {\n-                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", value));\n+                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", getTextContent(node).trim()));\n             } else if (matches(\"metadata-policy\", nodeName)) {\n-                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(value)));\n+                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(getTextContent(node).trim())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 564}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE5MDI0Mg==", "bodyText": "Yeah, it's a leftover. Will remove now", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490190242", "createdAt": "2020-09-17T12:05:15Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1736,21 +1707,20 @@ protected void handleMap(Node parentNode) throws Exception {\n     void handleMapNode(Node parentNode, final MapConfig mapConfig) throws Exception {\n         for (Node node : childElements(parentNode)) {\n             String nodeName = cleanNodeName(node);\n-            String value = getTextContent(node).trim();\n             if (matches(\"backup-count\", nodeName)) {\n-                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", value));\n+                mapConfig.setBackupCount(getIntegerValue(\"backup-count\", getTextContent(node).trim()));\n             } else if (matches(\"metadata-policy\", nodeName)) {\n-                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(value)));\n+                mapConfig.setMetadataPolicy(MetadataPolicy.valueOf(upperCaseInternal(getTextContent(node).trim())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NDc5MQ=="}, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 564}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg4NzM3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowMjozMVrOHTcvjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjowNTo0M1rOHTe2sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NTkxNw==", "bodyText": "nit: maybe the opposite isRead?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490155917", "createdAt": "2020-09-17T11:02:31Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -31,6 +31,7 @@\n     private final String name;\n     private final Map<String, ConfigNode> children = new LinkedHashMap<>();\n     private String value;\n+    private boolean unread = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE5MDUxMg==", "bodyText": "I don't really care. Will switch \ud83d\udc4d", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r490190512", "createdAt": "2020-09-17T12:05:43Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -31,6 +31,7 @@\n     private final String name;\n     private final Map<String, ConfigNode> children = new LinkedHashMap<>();\n     private String value;\n+    private boolean unread = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NTkxNw=="}, "originalCommit": {"oid": "c601f6a9c539ce9d243c948df1ea77960f61bc84"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIwODYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NDoxNVrOHbAc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyNzo1NlrOHbEL2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg==", "bodyText": "In the edge case when properties.size() == unprocessed.size() I'd consider logging at WARN with a specific message saying that there are override properties defined, but we did not apply any of them.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498081006", "createdAt": "2020-10-01T08:44:15Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMjA1Ng==", "bodyText": "I'm not convinced. That would provide some extra value only for huge sets of config entries provided.\n@Holmistr what do you think is the way to go?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498102056", "createdAt": "2020-10-01T09:19:46Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyNjUwNg==", "bodyText": "I don't see that much value in the extra log line. In general, I would expect the end user to go one by one when there's such warning. It's in his/her interest to fix those inconsistencies. Let's leave it like this.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498126506", "createdAt": "2020-10-01T10:00:06Z", "author": {"login": "Holmistr"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEyOTg1NQ==", "bodyText": "What I wanted to highlight is that in the mentioned case we would log \"Detected external configuration entries in environment variables: []\". With the warnings logged below the situation is clear, so I'm fine with the current approach as well.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498129855", "createdAt": "2020-10-01T10:05:54Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNzg3OQ==", "bodyText": "What if we just skip the empty log if the list if empty?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498137879", "createdAt": "2020-10-01T10:19:52Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MjE3MA==", "bodyText": "I think it is reasonable to keep a log line that makes clear that there were no overrides. I would either leave this as is or log a specific message. I'm fine with both.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498142170", "createdAt": "2020-10-01T10:27:56Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -41,47 +40,64 @@\n     private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n \n     public Config overwriteMemberConfig(Config config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlMemberDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlMemberDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.member()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n     }\n \n     public ClientConfig overwriteClientConfig(ClientConfig config) {\n-        return overwrite(config, (provider, c) -> {\n+        return overwrite(config, (provider, rootNode, target) -> {\n               try {\n-                  new YamlClientDomConfigProcessor(true, c, false)\n-                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+                  new YamlClientDomConfigProcessor(true, target, false)\n+                    .buildConfig(new ConfigOverrideElementAdapter(rootNode));\n               } catch (Exception e) {\n-                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider, e);\n               }\n           },\n           new EnvConfigProvider(EnvVariablesConfigParser.client()),\n           new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n     }\n \n-    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+    private <T> T overwrite(T config, ConfigConsumer<T> configProcessor, ConfigProvider... providers) {\n         ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n \n         for (ConfigProvider configProvider : providers) {\n             Map<String, String> properties = configProvider.properties();\n \n             if (!properties.isEmpty()) {\n-                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n+\n+                ConfigNode rootNode = propsToNode(properties);\n+                configProcessor.apply(configProvider.name(), rootNode, config);\n+\n+                Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(rootNode);\n+\n+                LOGGER.info(format(\"Detected external configuration entries in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTAwNg=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIyMDA5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ConfigNodeStateTrackerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NzoyNFrOHbAkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTowNToxNFrOHbBOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4Mjg3Ng==", "bodyText": "Do we have this mechanism for the failover client config as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498082876", "createdAt": "2020-10-01T08:47:24Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ConfigNodeStateTrackerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class ConfigNodeStateTrackerTest {\n+\n+    @Test\n+    public void shouldDetectUnappliedMemberConfigEntries() throws Exception {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZ_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZ_CLUSTRNAME\", \"foo\");\n+        entries.put(\"HZ_NETWORK_PORT\", \"5702\");\n+        entries.put(\"HZ_NETWORK_JOIN_TCPIP_BLE\", \"false\");\n+        entries.put(\"HZ_NETWORK_JOIN_MULTCAST_ENABLED\", \"false\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.member().parse(entries));\n+\n+        new YamlMemberDomConfigProcessor(true, new Config(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.port\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.clustrname\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.tcpip.ble\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.multcast.enabled\"));\n+    }\n+\n+    @Test\n+    public void shouldDetectUnappliedClientConfigEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_FOO\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_SOCKETINTERCEPTOR_ENABLE\", \"true\");\n+        entries.put(\"HZCLIENT_NETWORK_SMARTROUTING\", \"true\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.client().parse(entries));\n+\n+        new YamlClientDomConfigProcessor(true, new ClientConfig(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.foo\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.network.socketinterceptor.enable\"));\n+        assertFalse(unprocessed.containsKey(\"hazelcast-client.network.smartrouting\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA5MzY5MA==", "bodyText": "No, if someone decides to use the failover mechanics, it means they are already busy with file juggling, and they should use just the standard file-based configuration.", "url": "https://github.com/hazelcast/hazelcast/pull/17559#discussion_r498093690", "createdAt": "2020-10-01T09:05:14Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/ConfigNodeStateTrackerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class ConfigNodeStateTrackerTest {\n+\n+    @Test\n+    public void shouldDetectUnappliedMemberConfigEntries() throws Exception {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZ_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZ_CLUSTRNAME\", \"foo\");\n+        entries.put(\"HZ_NETWORK_PORT\", \"5702\");\n+        entries.put(\"HZ_NETWORK_JOIN_TCPIP_BLE\", \"false\");\n+        entries.put(\"HZ_NETWORK_JOIN_MULTCAST_ENABLED\", \"false\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.member().parse(entries));\n+\n+        new YamlMemberDomConfigProcessor(true, new Config(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.port\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.clustrname\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.tcpip.ble\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast.network.join.multcast.enabled\"));\n+    }\n+\n+    @Test\n+    public void shouldDetectUnappliedClientConfigEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_FOO\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_SOCKETINTERCEPTOR_ENABLE\", \"true\");\n+        entries.put(\"HZCLIENT_NETWORK_SMARTROUTING\", \"true\");\n+\n+        ConfigNode configNode = PropertiesToNodeConverter.propsToNode(EnvVariablesConfigParser.client().parse(entries));\n+\n+        new YamlClientDomConfigProcessor(true, new ClientConfig(), false)\n+          .buildConfig(new ConfigOverrideElementAdapter(configNode));\n+\n+        Map<String, String> unprocessed = new ConfigNodeStateTracker().unprocessedNodes(configNode);\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.foo\"));\n+        assertTrue(unprocessed.containsKey(\"hazelcast-client.network.socketinterceptor.enable\"));\n+        assertFalse(unprocessed.containsKey(\"hazelcast-client.network.smartrouting\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4Mjg3Ng=="}, "originalCommit": {"oid": "dad4416820edf259579aab753e01e05db1ebd869"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 238, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}