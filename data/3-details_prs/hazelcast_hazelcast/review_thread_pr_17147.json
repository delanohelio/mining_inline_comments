{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTIzMDgz", "number": 17147, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Nzo0OVrOEK3KLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Nzo0OVrOEK3KLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODI0OTQyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/client/heartbeat/ClientHeartbeatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Nzo0OVrOGsJVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoyODoyNlrOGsKokw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzQ5MA==", "bodyText": "Minor: we don't check whether or not aRemovedLatch is open", "url": "https://github.com/hazelcast/hazelcast/pull/17147#discussion_r448943490", "createdAt": "2020-07-02T11:47:49Z", "author": {"login": "mdumandag"}, "path": "hazelcast/src/test/java/com/hazelcast/client/heartbeat/ClientHeartbeatTest.java", "diffHunk": "@@ -324,4 +328,63 @@ public boolean decodeRemoveResponse(ClientMessage clientMessage) {\n             }\n         };\n     }\n+\n+    @Test\n+    public void testClientMembershipEvents_onSplitBrain() {\n+        Config config = new Config();\n+        HazelcastInstance instanceA = hazelcastFactory.newHazelcastInstance(config);\n+\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getConnectionStrategyConfig().getConnectionRetryConfig()\n+                .setClusterConnectTimeoutMillis(Integer.MAX_VALUE);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+\n+        HazelcastInstance instanceB = hazelcastFactory.newHazelcastInstance(config);\n+        HazelcastInstance instanceC = hazelcastFactory.newHazelcastInstance(config);\n+\n+        Member memberA = instanceA.getCluster().getLocalMember();\n+        Member memberB = instanceB.getCluster().getLocalMember();\n+        Member memberC = instanceC.getCluster().getLocalMember();\n+\n+        CountDownLatch splitLatch = new CountDownLatch(1);\n+        CountDownLatch bRemovedLatch = new CountDownLatch(1);\n+        CountDownLatch aRemovedLatch = new CountDownLatch(1);\n+\n+        CountDownLatch switchedToCLatch = new CountDownLatch(1);\n+        client.getCluster().addMembershipListener(new MembershipListener() {\n+            @Override\n+            public void memberAdded(MembershipEvent membershipEvent) {\n+                if (memberC.equals(membershipEvent.getMember())) {\n+                    switchedToCLatch.countDown();\n+                }\n+            }\n+\n+            @Override\n+            public void memberRemoved(MembershipEvent membershipEvent) {\n+                if (memberC.equals(membershipEvent.getMember())) {\n+                    splitLatch.countDown();\n+                }\n+\n+                if (memberB.equals(membershipEvent.getMember())) {\n+                    bRemovedLatch.countDown();\n+                }\n+\n+                if (memberA.equals(membershipEvent.getMember())) {\n+                    aRemovedLatch.countDown();\n+                }\n+            }\n+        });\n+\n+        blockCommunicationBetween(instanceA, instanceC);\n+        closeConnectionBetween(instanceA, instanceC);\n+        blockCommunicationBetween(instanceB, instanceC);\n+        closeConnectionBetween(instanceB, instanceC);\n+\n+        assertOpenEventually(\" A B | C\", splitLatch);\n+        instanceB.shutdown();\n+        assertOpenEventually(\" A | C\", bRemovedLatch);\n+        instanceA.shutdown();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "354e2cbd486220e864ca1bc9d8e709e9829f4745"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDc1NQ==", "bodyText": "Good catch \ud83d\udc4d", "url": "https://github.com/hazelcast/hazelcast/pull/17147#discussion_r448964755", "createdAt": "2020-07-02T12:28:26Z", "author": {"login": "sancar"}, "path": "hazelcast/src/test/java/com/hazelcast/client/heartbeat/ClientHeartbeatTest.java", "diffHunk": "@@ -324,4 +328,63 @@ public boolean decodeRemoveResponse(ClientMessage clientMessage) {\n             }\n         };\n     }\n+\n+    @Test\n+    public void testClientMembershipEvents_onSplitBrain() {\n+        Config config = new Config();\n+        HazelcastInstance instanceA = hazelcastFactory.newHazelcastInstance(config);\n+\n+        ClientConfig clientConfig = new ClientConfig();\n+        clientConfig.getConnectionStrategyConfig().getConnectionRetryConfig()\n+                .setClusterConnectTimeoutMillis(Integer.MAX_VALUE);\n+        HazelcastInstance client = hazelcastFactory.newHazelcastClient(clientConfig);\n+\n+        HazelcastInstance instanceB = hazelcastFactory.newHazelcastInstance(config);\n+        HazelcastInstance instanceC = hazelcastFactory.newHazelcastInstance(config);\n+\n+        Member memberA = instanceA.getCluster().getLocalMember();\n+        Member memberB = instanceB.getCluster().getLocalMember();\n+        Member memberC = instanceC.getCluster().getLocalMember();\n+\n+        CountDownLatch splitLatch = new CountDownLatch(1);\n+        CountDownLatch bRemovedLatch = new CountDownLatch(1);\n+        CountDownLatch aRemovedLatch = new CountDownLatch(1);\n+\n+        CountDownLatch switchedToCLatch = new CountDownLatch(1);\n+        client.getCluster().addMembershipListener(new MembershipListener() {\n+            @Override\n+            public void memberAdded(MembershipEvent membershipEvent) {\n+                if (memberC.equals(membershipEvent.getMember())) {\n+                    switchedToCLatch.countDown();\n+                }\n+            }\n+\n+            @Override\n+            public void memberRemoved(MembershipEvent membershipEvent) {\n+                if (memberC.equals(membershipEvent.getMember())) {\n+                    splitLatch.countDown();\n+                }\n+\n+                if (memberB.equals(membershipEvent.getMember())) {\n+                    bRemovedLatch.countDown();\n+                }\n+\n+                if (memberA.equals(membershipEvent.getMember())) {\n+                    aRemovedLatch.countDown();\n+                }\n+            }\n+        });\n+\n+        blockCommunicationBetween(instanceA, instanceC);\n+        closeConnectionBetween(instanceA, instanceC);\n+        blockCommunicationBetween(instanceB, instanceC);\n+        closeConnectionBetween(instanceB, instanceC);\n+\n+        assertOpenEventually(\" A B | C\", splitLatch);\n+        instanceB.shutdown();\n+        assertOpenEventually(\" A | C\", bRemovedLatch);\n+        instanceA.shutdown();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzQ5MA=="}, "originalCommit": {"oid": "354e2cbd486220e864ca1bc9d8e709e9829f4745"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 413, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}