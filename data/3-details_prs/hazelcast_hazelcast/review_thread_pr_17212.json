{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzI1Mjk2", "number": 17212, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODowNjoyM1rOEQ780Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODowOTo1MFrOEQ8B1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTk0ODk3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODowNjoyM1rOG1Xaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo1MDo1NFrOG1bOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMTMzOA==", "bodyText": "We seem to do this lookup for the same exception many times if many exceptions. Do you think that we should cache it so that reflection lookup cost is minimal?", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458611338", "createdAt": "2020-07-22T08:06:23Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +224,27 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    public static <T extends Throwable> T tryWrapInSameClass(T cause) {\n+        Class<? extends Throwable> exceptionClass = cause.getClass();\n+        MethodHandle constructor;\n+        try {\n+            constructor = LOOKUP.findConstructor(exceptionClass, MT_INIT_STRING_THROWABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da89fbac81f3ce024f27843ecf64c69b0d0973ef"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MzcwMQ==", "bodyText": "Reflection lookup is not costly enough to use caching here.", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458673701", "createdAt": "2020-07-22T09:50:54Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -194,4 +224,27 @@ public static RuntimeException rethrowAllowInterrupted(final Throwable t) throws\n             }\n         };\n     }\n+\n+    public static <T extends Throwable> T tryWrapInSameClass(T cause) {\n+        Class<? extends Throwable> exceptionClass = cause.getClass();\n+        MethodHandle constructor;\n+        try {\n+            constructor = LOOKUP.findConstructor(exceptionClass, MT_INIT_STRING_THROWABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMTMzOA=="}, "originalCommit": {"oid": "da89fbac81f3ce024f27843ecf64c69b0d0973ef"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTk2MTgxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODowOTo1MFrOG1XiLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo1MzowNVrOG1bS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMzI5NA==", "bodyText": "is all instances of t an HazelcastException for the client? if they all have the same base class, then for only the client side we may just make HazelcastException as WrappableException , and hence we may eliminate the need for the tryWrapInSameClass  method.", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458613294", "createdAt": "2020-07-22T08:09:50Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -118,7 +130,20 @@ public static RuntimeException peel(final Throwable t) {\n         return exceptionWrapper.apply(t, message);\n     }\n \n-    public static RuntimeException rethrow(Throwable t) {\n+    public static <W extends Throwable> Throwable wrapException(Throwable t, String message,\n+                                                                BiFunction<Throwable, String, W> exceptionWrapper) {\n+        if (t instanceof WrappableException) {\n+            return ((WrappableException) t).wrap();\n+        }\n+        Throwable wrapped = tryWrapInSameClass(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da89fbac81f3ce024f27843ecf64c69b0d0973ef"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NDkyOA==", "bodyText": "This method is not for just the client. The only thing we know that t is a RuntimeException. There is no guarantee for it to extend HazelcastException.", "url": "https://github.com/hazelcast/hazelcast/pull/17212#discussion_r458674928", "createdAt": "2020-07-22T09:53:05Z", "author": {"login": "sancar"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/util/ExceptionUtil.java", "diffHunk": "@@ -118,7 +130,20 @@ public static RuntimeException peel(final Throwable t) {\n         return exceptionWrapper.apply(t, message);\n     }\n \n-    public static RuntimeException rethrow(Throwable t) {\n+    public static <W extends Throwable> Throwable wrapException(Throwable t, String message,\n+                                                                BiFunction<Throwable, String, W> exceptionWrapper) {\n+        if (t instanceof WrappableException) {\n+            return ((WrappableException) t).wrap();\n+        }\n+        Throwable wrapped = tryWrapInSameClass(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMzI5NA=="}, "originalCommit": {"oid": "da89fbac81f3ce024f27843ecf64c69b0d0973ef"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 477, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}