{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODA4ODU4", "number": 16665, "title": "Define metrics for ISet and IList collections (#3823)", "bodyText": "As discussed with @Holmistr, I tried to put together a basic monitoring for ILists and ISets. However, I tried to cover everything with tests, I would be happy if someone could assist me to see how should I try it in \"production\" as well. Also, these changes will require some changes in the documentation which I would be happy to do as well if someone could help me start with it.\nFixes: #3823", "createdAt": "2020-02-16T10:20:07Z", "url": "https://github.com/hazelcast/hazelcast/pull/16665", "merged": true, "mergeCommit": {"oid": "fa38810b799e741f4bbd32e5b422f8bdf8c2b9d7"}, "closed": true, "closedAt": "2020-03-27T12:08:30Z", "author": {"login": "aberkecz"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFNKqdgFqTM1OTY3NjY0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRu2yMABqjMxNzE5ODAyMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Njc2NjQ0", "url": "https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-359676644", "createdAt": "2020-02-17T11:45:49Z", "commit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo0NTo1MFrOFqhpEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowMzoxNFrOFqjsSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNTY5OA==", "bodyText": "Do we need to initialize this with 1000 capacity? It feels a waste of heap in the typical case.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380135698", "createdAt": "2020-02-17T11:45:50Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java", "diffHunk": "@@ -53,18 +58,23 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue;\n \n public abstract class CollectionService implements ManagedService, RemoteService, EventPublishingService<CollectionEvent,\n         ItemListener<Data>>, TransactionalService, MigrationAwareService, SplitBrainProtectionAwareService,\n-        SplitBrainHandlerService {\n+        SplitBrainHandlerService, StatisticsAwareService<LocalCollectionStats> {\n \n     protected final NodeEngine nodeEngine;\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n+    private final ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDM4MQ==", "bodyText": "It is safe to ignore this class and the related tests in this PR. This class was used for passing the metrics/statistics to Management Center, but starting with 4.1 we are going to use the metrics system introduced in 4.0 - what uses the DynamicMetricsProvider interface that you already implemented - for that purpose.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380140381", "createdAt": "2020-02-17T11:56:52Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -71,6 +72,8 @@\n     private Map<String, LocalMapStats> mapStats = new HashMap<>();\n     private Map<String, LocalMultiMapStats> multiMapStats = new HashMap<>();\n     private Map<String, LocalQueueStats> queueStats = new HashMap<>();\n+    private Map<String, LocalCollectionStats> listStats = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0Mzg1MQ==", "bodyText": "I think there should be separate types for list and set statistics. If we make them returning the same type of stats, we can't evolve the API differently for the two data structures. For example, if we want to introduce numberOfIndexOutOfBounds later, we can't do it without introducing it for sets too, where it doesn't make too much sense.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380143851", "createdAt": "2020-02-17T12:05:13Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/IList.java", "diffHunk": "@@ -34,4 +34,14 @@\n  * @see List\n  */\n public interface IList<E> extends List<E>, ICollection<E> {\n+\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalCollectionStats getLocalCollectionStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MjM3Ng==", "bodyText": "I'm actually not sure this is a really useful stat for lists and sets. For maps and caches it makes sense, since those typically perform lookup operations. But lists and sets have different use cases. In that sense, I think these two are closer to queues and topics that don't have hits in their stats. The closest operations I can think of are contains and indexOf (in the case of list), but I'm not quite sure this is needed.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380162376", "createdAt": "2020-02-17T12:47:55Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection;\n+\n+import com.hazelcast.instance.LocalInstanceStats;\n+import com.hazelcast.internal.monitor.MemberState;\n+\n+/**\n+ * Local collections statistics to be used by {@link MemberState} implementations.\n+ */\n+public interface LocalCollectionStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the last access (read) time of the list.\n+     *\n+     * @return last access (read) time of the list.\n+     */\n+    long getLastAccessTime();\n+\n+    /**\n+     * Returns the last update time of the list.\n+     *\n+     * @return last update time of the list.\n+     */\n+    long getLastUpdateTime();\n+\n+    /**\n+     * Returns the number of hits (reads) of the list, including those read operations\n+     * that do not return with a value (eg.: {@link IList#indexOf(Object)}.\n+     *\n+     * @return the number of hits (reads) of the list.\n+     */\n+    long getNumberOfHits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzM5Mg==", "bodyText": "If we introduce separate types for the stats, this might not be needed.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380163392", "createdAt": "2020-02-17T12:50:11Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java", "diffHunk": "@@ -53,13 +53,15 @@\n import java.util.UUID;\n import java.util.concurrent.Future;\n \n+import javax.annotation.Nonnull;\n+\n import static com.hazelcast.internal.config.ConfigValidator.checkCollectionConfig;\n import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n import static com.hazelcast.internal.util.SetUtil.createHashSet;\n import static java.util.Collections.singleton;\n \n public abstract class AbstractCollectionProxyImpl<S extends RemoteService, E> extends AbstractDistributedObject<S>\n-        implements InitializingObject {\n+        implements InitializingObject, ICollection<E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NDczNQ==", "bodyText": "Same comment as for MemberStateImpl.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380164735", "createdAt": "2020-02-17T12:53:20Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java", "diffHunk": "@@ -264,6 +268,10 @@ private void createMemState(MemberStateImpl memberState,\n                 count = handleMultimap(memberState, count, config, ((MultiMapService) service).getStats());\n             } else if (service instanceof QueueService) {\n                 count = handleQueue(memberState, count, config, ((QueueService) service).getStats());\n+            } else if (service instanceof ListService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NTQ3MQ==", "bodyText": "I'd separate and duplicate these as LIST_METRIC_* and SET_METRIC_* as they might evolve separately in the future.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380165471", "createdAt": "2020-02-17T12:55:05Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -89,6 +89,15 @@\n     public static final String CLUSTER_METRIC_CLUSTER_SERVICE_SIZE = \"size\";\n     // ===[/CLUSTER]====================================================\n \n+    // ===[COLLECTION]=======================================================", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzY3Nw==", "bodyText": "You can add the ParallelJVMTest category as well.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380167677", "createdAt": "2020-02-17T12:59:44Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl.list;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2ODEzOQ==", "bodyText": "You can add the ParallelJVMTest category as well.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380168139", "createdAt": "2020-02-17T13:00:39Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl.set;\n+\n+import com.hazelcast.collection.ISet;\n+import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTI4OA==", "bodyText": "Maybe this should compare the deserialize against the localListStats for readability reasons?", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380169288", "createdAt": "2020-02-17T13:03:14Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.util.Clock;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import static com.hazelcast.test.HazelcastTestSupport.assertBetween;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class LocalCollectionStatsImplTest {\n+\n+    @Test\n+    public void testDefaultConstructor() {\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+\n+        assertTrue(localListStats.getCreationTime() > 0);\n+        assertEquals(123456, localListStats.getLastUpdateTime());\n+        assertEquals(654321, localListStats.getLastAccessTime());\n+        assertEquals(1, localListStats.getNumberOfHits());\n+    }\n+\n+    @Test\n+    public void testCreationTime() {\n+        long beforeCreationTime = Clock.currentTimeMillis();\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+        long afterCreationTime = Clock.currentTimeMillis();\n+\n+        assertBetween(\"creationTime\", localListStats.getCreationTime(), beforeCreationTime, afterCreationTime);\n+    }\n+\n+    @Test\n+    public void testSerialization() {\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+\n+        JsonObject serialized = localListStats.toJson();\n+        LocalCollectionStatsImpl deserialized = new LocalCollectionStatsImpl();\n+        deserialized.fromJson(serialized);\n+\n+        assertTrue(localListStats.getCreationTime() > 0);\n+        assertEquals(123456, localListStats.getLastUpdateTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3ODkyMjU1", "url": "https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-367892255", "createdAt": "2020-03-03T11:12:52Z", "commit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToxMjo1MlrOFxBoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1Mjo0NVrOFxJBzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTIyNQ==", "bodyText": "I think this can be renamed to getLocalListStats().", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386951225", "createdAt": "2020-03-03T11:12:52Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/IList.java", "diffHunk": "@@ -34,4 +34,14 @@\n  * @see List\n  */\n public interface IList<E> extends List<E>, ICollection<E> {\n+\n+\n+    /**\n+     * Returns {@link LocalListStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalListStats getLocalCollectionStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTMyOA==", "bodyText": "I think this can be renamed to getLocalSetStats().", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386951328", "createdAt": "2020-03-03T11:13:04Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/ISet.java", "diffHunk": "@@ -37,4 +37,13 @@\n  * @see Set\n  */\n public interface ISet<E> extends Set<E>, ICollection<E> {\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalSetStats getLocalCollectionStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MjUzOA==", "bodyText": "Could you please add the unit as well here and for all time fields? @Probe(name = LIST_METRIC_LAST_ACCESS_TIME, unit = MS).", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386982538", "createdAt": "2020-03-03T12:20:05Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalListStatsImpl.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import com.hazelcast.collection.LocalListStats;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.metrics.Probe;\n+import com.hazelcast.internal.util.Clock;\n+\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_ACCESS_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_UPDATE_TIME;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+public class LocalListStatsImpl extends LocalCollectionStatsImpl implements LocalListStats {\n+\n+    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_ACCESS_TIME_UPDATER =\n+            newUpdater(LocalListStatsImpl.class, LAST_ACCESS_TIME);\n+    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_UPDATE_TIME_UPDATER =\n+            newUpdater(LocalListStatsImpl.class, LAST_UPDATE_TIME);\n+\n+    @Probe(name = LIST_METRIC_LAST_ACCESS_TIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4Mjg4NQ==", "bodyText": "Same comment on the unit.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386982885", "createdAt": "2020-03-03T12:20:44Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalSetStatsImpl.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import com.hazelcast.collection.LocalSetStats;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.metrics.Probe;\n+import com.hazelcast.internal.util.Clock;\n+\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_ACCESS_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_UPDATE_TIME;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+public class LocalSetStatsImpl extends LocalCollectionStatsImpl implements LocalSetStats {\n+\n+    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_ACCESS_TIME_UPDATER =\n+            newUpdater(LocalSetStatsImpl.class, LAST_ACCESS_TIME);\n+    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_UPDATE_TIME_UPDATER =\n+            newUpdater(LocalSetStatsImpl.class, LAST_UPDATE_TIME);\n+\n+    @Probe(name = SET_METRIC_LAST_ACCESS_TIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4Mzc3MA==", "bodyText": "I think the changes in this file can be reverted entirely.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386983770", "createdAt": "2020-03-03T12:22:25Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -16,6 +16,14 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n+import java.net.UnknownHostException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MDY3MQ==", "bodyText": "This can be reverted as well.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386990671", "createdAt": "2020-03-03T12:36:27Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java", "diffHunk": "@@ -16,13 +16,23 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n+import java.net.UnknownHostException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODY2Ng==", "bodyText": "Maybe this class should be renamed to AbstractLocalCollectionStats.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387008666", "createdAt": "2020-03-03T13:12:15Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.json.internal.JsonSerializable;\n+\n+public abstract class LocalCollectionStatsImpl implements LocalCollectionStats, JsonSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTA5Mg==", "bodyText": "This and the constructor function can be moved to the actual list and set implementations and then no need for the casts in them. I think only getLocalCollectionStats() is needed here.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387029092", "createdAt": "2020-03-03T13:48:15Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java", "diffHunk": "@@ -65,6 +68,9 @@\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n+    protected ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA==", "bodyText": "Do we need the assertTrueEventually() in these methods? In the concrete tests a reference is obtained to the stats instance, which means, by the time the operations return the stats instance is updated.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387046248", "createdAt": "2020-03-03T14:15:31Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl;\n+\n+import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.test.HazelcastTestSupport;\n+\n+import static java.lang.String.format;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractCollectionStatisticsTest extends HazelcastTestSupport {\n+\n+    protected LocalCollectionStats localCollectionStats;\n+\n+    protected long previousAccessTime;\n+    protected long previousUpdateTime;\n+    protected long previousNumberOfHits;\n+\n+    protected void assertNewLastAccessTime() {\n+        assertTrueEventually(() -> {\n+            long lastAccessTime = localCollectionStats.getLastAccessTime();\n+            assertTrue(format(\"Expected the lastAccessTime %d to be higher than the previousAccessTime %d (diff: %d ms)\",\n+                    lastAccessTime, previousAccessTime, lastAccessTime - previousAccessTime),\n+                    lastAccessTime > previousAccessTime);\n+            previousAccessTime = lastAccessTime;\n+        });\n+    }\n+\n+    protected void assertSameLastUpdateTime() {\n+        assertTrueEventually(() -> {\n+            long lastUpdateTime = localCollectionStats.getLastUpdateTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MjQ2Mg==", "bodyText": "This can be reverted.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387072462", "createdAt": "2020-03-03T14:52:45Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java", "diffHunk": "@@ -16,21 +16,21 @@\n \n package com.hazelcast.internal.monitor;\n \n+import java.util.Collection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDIwNDM4", "url": "https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-371020438", "createdAt": "2020-03-09T09:35:50Z", "commit": {"oid": "fb0ae680b4e7b2b1e528dff4026c1674f8b40f4e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNTo1MFrOFzgGEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoxMjoxNFrOFzhP8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NzUzOA==", "bodyText": "This remained LocalCollectionStats.\nDo we need the second line though? Same question for the IList counterpart.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389547538", "createdAt": "2020-03-09T09:35:50Z", "author": {"login": "blazember"}, "path": "hazelcast/src/main/java/com/hazelcast/collection/ISet.java", "diffHunk": "@@ -37,4 +37,13 @@\n  * @see Set\n  */\n public interface ISet<E> extends Set<E>, ICollection<E> {\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0ae680b4e7b2b1e528dff4026c1674f8b40f4e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2NjQ0OA==", "bodyText": "No, ignore this comment, assertTrueEventually() is needed in the other methods. In this assertSameLastUpdateTime method though it doesn't add any value, and it isn't even enough for catching an unwanted update. This is because there is nothing to create a happens-before with. Here either assertTrueAllTheTime() can be used or the operation with the same parameters and the assertNewLastAccessTime(); check can be doubled - in all tests calling this method -, like in this example:\n// we double the operation - with the same parameter - and the last access time check\n// so that we can be sure that assertSameLastUpdateTime() sees an unwanted update\n// at least from the first operation\nlist.contains(\"element1\");\nassertNewLastAccessTime();\nlist.contains(\"element1\");\nassertNewLastAccessTime();\nassertSameLastUpdateTime();\n\nNeither is perfect, but the latter doesn't force the test runner to halt for a longer time with every check.", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389566448", "createdAt": "2020-03-09T10:12:14Z", "author": {"login": "blazember"}, "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl;\n+\n+import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.test.HazelcastTestSupport;\n+\n+import static java.lang.String.format;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractCollectionStatisticsTest extends HazelcastTestSupport {\n+\n+    protected LocalCollectionStats localCollectionStats;\n+\n+    protected long previousAccessTime;\n+    protected long previousUpdateTime;\n+    protected long previousNumberOfHits;\n+\n+    protected void assertNewLastAccessTime() {\n+        assertTrueEventually(() -> {\n+            long lastAccessTime = localCollectionStats.getLastAccessTime();\n+            assertTrue(format(\"Expected the lastAccessTime %d to be higher than the previousAccessTime %d (diff: %d ms)\",\n+                    lastAccessTime, previousAccessTime, lastAccessTime - previousAccessTime),\n+                    lastAccessTime > previousAccessTime);\n+            previousAccessTime = lastAccessTime;\n+        });\n+    }\n+\n+    protected void assertSameLastUpdateTime() {\n+        assertTrueEventually(() -> {\n+            long lastUpdateTime = localCollectionStats.getLastUpdateTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}, "originalCommit": {"oid": "deed884ccd91b5803539a59a9378f888760d759d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODE4NDA4", "url": "https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-377818408", "createdAt": "2020-03-19T15:14:30Z", "commit": {"oid": "254e187c09455715c4f029ce1280bdfc076259fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjU5ODEx", "url": "https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-378259811", "createdAt": "2020-03-20T06:52:59Z", "commit": {"oid": "254e187c09455715c4f029ce1280bdfc076259fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/87cd6eec29726f8515d341a59e0de4ae86d6eb47", "committedDate": "2020-03-27T11:16:18Z", "message": "Define metrics for ISet and IList collections (#3823)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a6e64c2aa58e2045390d4d4c67755d69305be6", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/14a6e64c2aa58e2045390d4d4c67755d69305be6", "committedDate": "2020-03-27T11:16:18Z", "message": "Remove `initialCapacity` argument from `statsMap`'s constructor to save heap size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/4f9af546c19d68c24cb7ed929389b92bed866dc4", "committedDate": "2020-03-27T11:17:04Z", "message": "Perform fixes after code review\n\nAdd stats to `DistributedDatastructuresMetricsTest`\nIntroduce separate statistics for `IList` and `ISet`\nRemove `numberOfHits` metric from `IList` and `ISet`\nRevert modifications in `MemberStateImpl` and `TimedMemberStateFactory`\nIntroduce separate `MetricDescriptorConstants` for `IList` and `ISet`\nAdd the `ParallelJVMTest` category to newly introduced test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9798932b8bc0d6f31fd0d8292af78ea6fe89c0b2", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/9798932b8bc0d6f31fd0d8292af78ea6fe89c0b2", "committedDate": "2020-03-27T11:17:04Z", "message": "Implement changes recommended during the the code review process\n\nDetails: https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-367892255"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0795b87e6a90fcde5b4270f30f0b311755f7c746", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/0795b87e6a90fcde5b4270f30f0b311755f7c746", "committedDate": "2020-03-27T11:17:04Z", "message": "Clarify JavaDoc for `getLocalListStats` and `getLocalSetStats` methods in `IList` and `ISet`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "291112530117ffbfc08843ef91a71c221fe86542", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/291112530117ffbfc08843ef91a71c221fe86542", "committedDate": "2020-03-27T11:17:05Z", "message": "Fix checkstyle-reported bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "218dde15ab5f80443f20c1c9b25782e0fedeed2e", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/218dde15ab5f80443f20c1c9b25782e0fedeed2e", "committedDate": "2020-03-27T11:17:05Z", "message": "Fix asserting for non-modified `lastUpdateTime` metric values in `ListStatisticsTest` and `SetStatisticsSet` test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68eace6343ba43c75d9c447706d110a18f5ca14c", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/68eace6343ba43c75d9c447706d110a18f5ca14c", "committedDate": "2020-03-27T11:17:05Z", "message": "Introduce wait time between doubled operations to assure that the `lastAccessTime` metrics differ in these cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "254e187c09455715c4f029ce1280bdfc076259fa", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/254e187c09455715c4f029ce1280bdfc076259fa", "committedDate": "2020-03-18T21:11:40Z", "message": "Introduce wait time between doubled operations to assure that the `lastAccessTime` metrics differ in these cases"}, "afterCommit": {"oid": "68eace6343ba43c75d9c447706d110a18f5ca14c", "author": {"user": {"login": "aberkecz", "name": "\u00c1d\u00e1m Berkecz"}}, "url": "https://github.com/hazelcast/hazelcast/commit/68eace6343ba43c75d9c447706d110a18f5ca14c", "committedDate": "2020-03-27T11:17:05Z", "message": "Introduce wait time between doubled operations to assure that the `lastAccessTime` metrics differ in these cases"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3982, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}