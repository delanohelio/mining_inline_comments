{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTM2ODc0", "number": 17348, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyODowNFrOEY8qXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMzozM1rOEff54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTk1MTY0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyODowNFrOHBfNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDowODoyMVrOHBiiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMjAwMA==", "bodyText": "Consider making it less generic, like to have two methods overwrite(Config config) and overwriteClient(ClientConfig clientConfig). Then, you'd not need these clientConfigProcessor() and memberConfigProcessor() which IMO complicate understanding of the code.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471322000", "createdAt": "2020-08-17T08:28:04Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3NjQxMw==", "bodyText": "I will try to simplify it, what I'm trying to avoid duplicating code responsible for validation, iteration, and application of parsed configs... while making it testable at the same time", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471376413", "createdAt": "2020-08-17T10:08:21Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMjAwMA=="}, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjA1NTQxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1NjowM1rOHBgK5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDoxNjo0NFrOHBizGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNzcwMg==", "bodyText": "I wonder if it's not a too strong assumption that every variable starting from HZ_ is a Hazelcast Configuration. Not sure it's good enough. Maybe we need to parse and check which env variables are really a part of Hazelcast Configuration.\n3 scenarios to consider:\n\nRandom env variable.\n\nStart with a variable: HZ_BLA_BLA=false. You get the following log:\nINFO: Detected external configuration overrides in environment variables:\nbla.bla=false\n\nWhich is later ignored. It can be confusing to users.\n\nOur Docker image default environment variables\nYou don't define any env variables, but you still get the following logs.\n\n$ docker run test\n...\nAug 17, 2020 8:53:31 AM com.hazelcast.internal.config.override.ExternalConfigurationOverride\nINFO: Detected external configuration overrides in environment variables:\nhome=/opt/hazelcast\n\n\nWe currently use HZ_LICENSE_KEY for the Hazelcast Enterprise Docker image\nCheck this: https://github.com/hazelcast/hazelcast-docker#hazelcast-enterprise", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471337702", "createdAt": "2020-08-17T08:56:03Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {\n+        ConfigValidator.validate(configProviders);\n+\n+        for (ConfigProvider configProvider : configProviders) {\n+            Map<String, String> properties = configProvider.properties();\n+\n+            if (properties.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MDc2MA==", "bodyText": "The problem is that we don't have any way to validate if an entry is a part of the configuration or not. It's like entering a non-existing entry into a YAML file.\nOur configuration is essentially a huge tree used for lookups by individual parsers, validated only by the XML schema.\nNaturally, we can exclude existing config entries (like the Dockerfile ones), but I'm afraid this would need to be done manually at the filtering stage.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471380760", "createdAt": "2020-08-17T10:16:44Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.ClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.MemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import static java.lang.String.format;\n+\n+public class ExternalConfigurationOverride<T> {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    private final Set<ConfigProvider> configProviders;\n+\n+    private final BiConsumer<ConfigProvider, T> configProcessor;\n+\n+    ExternalConfigurationOverride(BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        this.configProcessor = configProcessor;\n+        this.configProviders = new HashSet<>(Arrays.asList(providers));\n+    }\n+\n+    public static ExternalConfigurationOverride<Config> member() {\n+        return new ExternalConfigurationOverride<>(\n+          memberConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public static ExternalConfigurationOverride<ClientConfig> client() {\n+        return new ExternalConfigurationOverride<>(\n+          clientConfigProcessor(),\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    public T overwrite(T config) {\n+        ConfigValidator.validate(configProviders);\n+\n+        for (ConfigProvider configProvider : configProviders) {\n+            Map<String, String> properties = configProvider.properties();\n+\n+            if (properties.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNzcwMg=="}, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjA5MzMzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNodeElementAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjo0N1rOHBgh5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjo0N1rOHBgh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzU5MQ==", "bodyText": "Consider changing the name, two options:\n\nName it the same the same as in the *.yaml.* package: ElementAdapter.\nRename it to ConfigOverrideElementAdapter (and maybe rename also ElementAdapter to YamlElementAdapter).\n\nBecause it gets congusing imo.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r471343591", "createdAt": "2020-08-17T09:06:47Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNodeElementAdapter.java", "diffHunk": "@@ -0,0 +1,382 @@\n+package com.hazelcast.internal.config.override;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.TypeInfo;\n+import org.w3c.dom.UserDataHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+class ConfigNodeElementAdapter implements Element {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78693fc55b21c043a85836d95e07dfd79757d03"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI1NzU3OnYy", "diffSide": "RIGHT", "path": "hazelcast/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1MzozN1rOHFi8FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozODo0OFrOHFoBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NzM2NA==", "bodyText": "Is the license of this dependency ok for hazelcast?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475577364", "createdAt": "2020-08-24T12:53:37Z", "author": {"login": "leszko"}, "path": "hazelcast/pom.xml", "diffHunk": "@@ -350,6 +350,12 @@\n             <version>${hamcrest.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.stefanbirkner</groupId>\n+            <artifactId>system-rules</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MDY4Mg==", "bodyText": "Looks fine to me, but I wish someone more competent would check that for me. Keep in mind it's test-scoped and not included in our artifacts\nHere's the license: https://github.com/stefanbirkner/system-rules/blob/master/LICENSE", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475660682", "createdAt": "2020-08-24T14:38:48Z", "author": {"login": "pivovarit"}, "path": "hazelcast/pom.xml", "diffHunk": "@@ -350,6 +350,12 @@\n             <version>${hamcrest.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.stefanbirkner</groupId>\n+            <artifactId>system-rules</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NzM2NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI4Njg4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1OToyOVrOHFjOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTowNzoyM1rOHJ8sxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA==", "bodyText": "Does this change mean that from now on the configuration with - and without - is the same. For example, can you now define the following hazelcast.yaml?\nhazelcast:\n  clustername: mycluster\n\nAnd is it exactly the same as:\nhazelcast:\n  cluster-name: mycluster", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475582074", "createdAt": "2020-08-24T12:59:29Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2NDAxOQ==", "bodyText": "That's true, but in one of the discussions I heard that it's not a problem and that we might have a JSON schema anyway", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475664019", "createdAt": "2020-08-24T14:43:36Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2NTM0NA==", "bodyText": "Hmm, I wonder if it's not an issue when it comes to maintenance and backward-compatibility. Like, this becomes now a valid Hazelcast configuration:\nhazelcast:\n  cluster--name: mycluster\n\nIt's weird, but ok, we can say it's incorrect, but we just didn't validate it. However, these two configurations above, at first glance, both look correct. People may start using them and then at some point... booom, we introduce JSON schema validation.\nWhat do you think? @mmedenjak @jerrinot @Holmistr", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480065344", "createdAt": "2020-08-31T11:20:56Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5MzczNQ==", "bodyText": "As mentioned, we can introduce some kind of flag which will disallow such config if a YAML file is provided but matches only when applying config from env variables and sys props. And we can do this after feature freeze or in a patch release.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480193735", "createdAt": "2020-08-31T15:07:23Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -216,15 +218,15 @@ private void handleConnectionRetry(Node node, ClientConnectionStrategyConfig str\n         for (Node child : childElements(node)) {\n             String nodeName = cleanNodeName(child);\n             String value = getTextContent(child).trim();\n-            if (initialBackoffMillis.equals(nodeName)) {\n+            if (ConfigUtils.matches(initialBackoffMillis, nodeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjA3NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI5ODAyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMjozM1rOHFjVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo0MDowOVrOHFoE9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MzgwNA==", "bodyText": "Why don't you use matches here (as in all other cases)?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475583804", "createdAt": "2020-08-24T13:02:33Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -256,7 +257,8 @@ public void buildConfig(Node rootNode) throws Exception {\n             }\n         }\n \n-        if (occurrenceSet.contains(\"network\") && occurrenceSet.contains(\"advanced-network\")\n+        if (occurrenceSet.contains(\"network\")\n+          && (occurrenceSet.contains(\"advanced-network\") || occurrenceSet.contains(\"advancednetwork\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MTU1Nw==", "bodyText": "That's a bit different use-case, but I will rework it", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475661557", "createdAt": "2020-08-24T14:40:09Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -256,7 +257,8 @@ public void buildConfig(Node rootNode) throws Exception {\n             }\n         }\n \n-        if (occurrenceSet.contains(\"network\") && occurrenceSet.contains(\"advanced-network\")\n+        if (occurrenceSet.contains(\"network\")\n+          && (occurrenceSet.contains(\"advanced-network\") || occurrenceSet.contains(\"advancednetwork\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MzgwNA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzMyMzQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowOTo1NFrOHFjlGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowOTo1NFrOHFjlGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4Nzg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A representation of a single configuration node\n          \n          \n            \n             * A representation of a single configuration node.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475587867", "createdAt": "2020-08-24T13:09:54Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A representation of a single configuration node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY2MTk3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMzoxN1rOHFm8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMzoxN1rOHFm8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0Mjg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Validation mechanism used to make sure that external configuration features is legal\n          \n          \n            \n             * Validation mechanism used to make sure that external configuration features is legal.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475642898", "createdAt": "2020-08-24T14:13:17Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY3NTQ3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxNjowNlrOHFnENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxNjowNlrOHFnENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NDk4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An interface representing a generic configuration source\n          \n          \n            \n             * An interface representing a generic configuration source.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475644981", "createdAt": "2020-08-24T14:16:06Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY3NjEyOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxNjoxNVrOHFnEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNToxMDo1MFrOHFptDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NTA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns an immutable set of key-value configuration entries\n          \n          \n            \n                 * Returns an immutable set of key-value configuration entries.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475645084", "createdAt": "2020-08-24T14:16:15Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4NjMwOA==", "bodyText": "Nitpicker. We have @mtopolnik for this! :-D", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475686308", "createdAt": "2020-08-24T15:08:09Z", "author": {"login": "Holmistr"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NTA4NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4ODIwNA==", "bodyText": "Would be cheaper to use some non-protein-based static analysis tool :)", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475688204", "createdAt": "2020-08-24T15:10:50Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NTA4NA=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY4NjM5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/EnvVariablesConfigParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxODo0MVrOHFnK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozNDo0NlrOHFn2yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NjY5Mg==", "bodyText": "When would you have whitespace inside an env variable name?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475646692", "createdAt": "2020-08-24T14:18:41Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/EnvVariablesConfigParser.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+/**\n+ * A utility class converting raw input properties into valid config entries\n+ */\n+class EnvVariablesConfigParser {\n+    private static final List<String> EXCLUDED_ENTRIES = Arrays.asList(\n+      \"HZ_HOME\", \"HZ_LICENSE_KEY\");\n+\n+    private final String prefix;\n+    private final String rootNode;\n+\n+    EnvVariablesConfigParser(String prefix, String rootNode) {\n+        this.prefix = prefix;\n+        this.rootNode = rootNode;\n+    }\n+\n+    static EnvVariablesConfigParser client() {\n+        return new EnvVariablesConfigParser(\"HZCLIENT_\", \"hazelcast-client\");\n+    }\n+\n+    static EnvVariablesConfigParser member() {\n+        return new EnvVariablesConfigParser(\"HZ_\", \"hazelcast\");\n+    }\n+\n+    Map<String, String> parse(Map<String, String> env) {\n+        return env.entrySet()\n+          .stream()\n+          .filter(e -> !EXCLUDED_ENTRIES.contains(e.getKey().replace(\" \", \"\")))\n+          .filter(e -> e.getKey().startsWith(prefix))\n+          .collect(toMap(this::processKey, Map.Entry::getValue));\n+    }\n+\n+    private String processKey(Map.Entry<String, String> e) {\n+        return e.getKey()\n+          .replaceFirst(prefix, rootNode + \".\")\n+          .replace(\"_\", \".\")\n+          .replace(\" \", \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzkyOQ==", "bodyText": "Hopefully never, but I'm not willing to bid my life on this :) in theory, there are no limits to env names (but in practice, there are)", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r475657929", "createdAt": "2020-08-24T14:34:46Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/EnvVariablesConfigParser.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+/**\n+ * A utility class converting raw input properties into valid config entries\n+ */\n+class EnvVariablesConfigParser {\n+    private static final List<String> EXCLUDED_ENTRIES = Arrays.asList(\n+      \"HZ_HOME\", \"HZ_LICENSE_KEY\");\n+\n+    private final String prefix;\n+    private final String rootNode;\n+\n+    EnvVariablesConfigParser(String prefix, String rootNode) {\n+        this.prefix = prefix;\n+        this.rootNode = rootNode;\n+    }\n+\n+    static EnvVariablesConfigParser client() {\n+        return new EnvVariablesConfigParser(\"HZCLIENT_\", \"hazelcast-client\");\n+    }\n+\n+    static EnvVariablesConfigParser member() {\n+        return new EnvVariablesConfigParser(\"HZ_\", \"hazelcast\");\n+    }\n+\n+    Map<String, String> parse(Map<String, String> env) {\n+        return env.entrySet()\n+          .stream()\n+          .filter(e -> !EXCLUDED_ENTRIES.contains(e.getKey().replace(\" \", \"\")))\n+          .filter(e -> e.getKey().startsWith(prefix))\n+          .collect(toMap(this::processKey, Map.Entry::getValue));\n+    }\n+\n+    private String processKey(Map.Entry<String, String> e) {\n+        return e.getKey()\n+          .replaceFirst(prefix, rootNode + \".\")\n+          .replace(\"_\", \".\")\n+          .replace(\" \", \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NjY5Mg=="}, "originalCommit": {"oid": "aba2757fbc7e945b165f5e264eb55bb0b032cb34"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM0MzE1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozODoyMFrOHGLY5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo1MTozNVrOHLwJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDEwMg==", "bodyText": "Can you also check getEvictionConfig, handleUserCodeDeployment, handleBackupAckToClient, getNearCachePreloaderConfig and handleConnectionStrategy?\nAlso, check out methods in AbstractDomConfigProcessor, there's more there to be covered. Feel free to simplify the code a bit if it makes your life easier.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476240102", "createdAt": "2020-08-25T07:38:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -198,7 +200,7 @@ private void handleConnectionStrategy(Node node) {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NTE4OQ==", "bodyText": "Can you still check getNearCachePreloaderConfig and handleConnectionStrategy?\nEDIT: Ignore. :)", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482085189", "createdAt": "2020-09-02T13:51:35Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -198,7 +200,7 @@ private void handleConnectionStrategy(Node node) {\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDEwMg=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYyOTcwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0OTowNVrOHGOGQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjoyN1rOHJ24uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDQ4MQ==", "bodyText": "Consider refactoring this to something like:\noverwriteWithProvider(new EnvConfigProvider(EnvVariablesConfigParser.member()), config);\noverwriteWithProvider(new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member())), config);\n\nYou'd get rid of this generic method and passing function, which imo makes the code less readable. Plus your function may seem like pure, but I guess it's not since it modifies the config object.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476284481", "createdAt": "2020-08-25T08:49:05Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk5NjM3OA==", "bodyText": "The problem is that we need to have access to multiple providers to validate if there are no conflicts(in your example configs from various sources are applied individually) so either we repeat the code responsible for iteration and validation, or we pull it out somehow (what I tried).\nThe method needs to be generic since Config and ClientConfig don't have a common denominator so I needed to play around with generics to make it possible and inject a passing function representing a strategy for applying the config", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r479996378", "createdAt": "2020-08-31T09:06:13Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDQ4MQ=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODQ4OQ==", "bodyText": "Check out this.\n    public Config overwriteMemberConfig(Config config) {\n        Map<String, String> properties = prepareProperties(\n                new EnvConfigProvider(EnvVariablesConfigParser.member()),\n                new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member())\n        );\n\n        if (!properties.isEmpty()) {\n            try {\n                new YamlMemberDomConfigProcessor(true, config)\n                        .buildConfig(new ConfigOverrideElementAdapter(propsToNode(properties)));\n            } catch (Exception e) {\n                throw new InvalidConfigurationException(\"failed to overwrite configuration\", e);\n            }\n        }\n\n        return config;\n    }\n\n\n\n\n    public ClientConfig overwriteClientConfig(ClientConfig config) {\n        Map<String, String> properties = prepareProperties(\n                new EnvConfigProvider(EnvVariablesConfigParser.client()),\n                new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client())\n        );\n\n        if (!properties.isEmpty()) {\n            try {\n                new YamlClientDomConfigProcessor(true, config)\n                        .buildConfig(new ConfigOverrideElementAdapter(propsToNode(properties)));\n            } catch (Exception e) {\n                throw new InvalidConfigurationException(\"failed to overwrite configuration\", e);\n            }\n        }\n\n        return config;\n    }\n\n    private Map<String, String> prepareProperties(ConfigProvider... providers) {\n        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n\n        Map<String, String> properties = new HashMap<>();\n        for (ConfigProvider configProvider : providers) {\n            configProvider.properties().forEach((k, v) -> {\n                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",\n                        configProvider.name(),\n                        k + \"=\" + v));\n                properties.put(k, v);\n            });\n        }\n\n        return properties;\n    }\n\nBut you can keep your version, up to you. I'm fine with both.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480098489", "createdAt": "2020-08-31T12:32:27Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDQ4MQ=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY1NzMwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1NTo0M1rOHGOXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTowOTo1MlrOHJ8ypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA==", "bodyText": "I discovered a weird thing. I tried to run in on Kubernetes and defined the following env variables:\nkubectl run hazelcast --image leszko/hazelcast:ext-config --env=\"HZ_NETWORK_JOIN_KUBERNETES_ENABLED=true\" --env=\"HZ_NETWORK_JOIN_MULTICAST_ENABLED=false\"\n\nAnd I expected it would work exactly the same as if I defined hazelcast.yaml with the following content:\nhazelcast:\n  network:\n    join:\n      kubernetes:\n        enabled: true\n      multicast:\n        enabled: false\n\nHowever, that was not the case. It seems that the config override set some other kubernetes parameters as well, because I got the following exception:\nCaused by: com.hazelcast.config.InvalidConfigurationException: Properties 'service-name' and 'service-label-name' cannot be defined at the same time\n\nLike the config override changed kubernetes.* properties to empty strings instead of passing nulls.\nCould you check?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476288800", "createdAt": "2020-08-25T08:55:43Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyNDk1NA==", "bodyText": "I think I have an idea. I must have mistakenly broken it when solving another bug. Thanks!\nThe mechanism is overwriting only the cherry-picked config entries, but leaves what was there already instead of erasing entries that were not provided, and it turns out that defaults are these:\n\n  \n    \n      hazelcast/hazelcast/src/main/resources/hazelcast-default.xml\n    \n    \n        Lines 74 to 79\n      in\n      8f550a9\n    \n    \n    \n    \n\n        \n          \n           <kubernetes enabled=\"false\"> \n        \n\n        \n          \n               <namespace>MY-KUBERNETES-NAMESPACE</namespace> \n        \n\n        \n          \n               <service-name>MY-SERVICE-NAME</service-name> \n        \n\n        \n          \n               <service-label-name>MY-SERVICE-LABEL-NAME</service-label-name> \n        \n\n        \n          \n               <service-label-value>MY-SERVICE-LABEL-VALUE</service-label-value> \n        \n\n        \n          \n           </kubernetes> \n        \n    \n  \n\n\nNot sure if this is a bug or not, but the default config file should not feature these at all?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476324954", "createdAt": "2020-08-25T09:51:13Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3MTk4Mg==", "bodyText": "Yeah, this PR [1] should fix it for kubernetes, but what about all other hazelcast-default.xml configuration parts? In some sense, we may think it's unrelated to this PR, because we just pass whatever was the default. On the other hand, from the user perspective, we introduce a feature that works different that what they may expect.\nFor example, you use the following configuration:\nhazelcast:\n  network:\n    join:\n      multicast:\n        enabled: true\n\nFrom the user's perspective, it should be exactly the same as: HZ_NETWORK_JOIN_MULTICAST_ENABLED=true. But it's not, because the former one has some other attributes predefined. IMO that's not the right behavior.\n#17402", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480071982", "createdAt": "2020-08-31T11:37:03Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NTIzNw==", "bodyText": "I believe we can address this separately. No point in blocking this really nice feature when users can:\n\u2022 circumvent the issue by adding more config parameters to override the values from hazelcast-default.yaml\n\u2022 fall back to YAML and XML files\nWe'll also clean up the hazelcast-default.xml as we go along, or even switch to using new Config() instead in 5.0.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480195237", "createdAt": "2020-08-31T15:09:52Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4ODgwMA=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY2MjI2OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1Njo1N1rOHGOaPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToyOVrOHJ2-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4OTU5Nw==", "bodyText": "What is this class for?\n\nCould you add javadoc with some explanation?\nCould you add a unit test?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476289597", "createdAt": "2020-08-25T08:56:57Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwMDAwNg==", "bodyText": "Thanks. Consider adding also some javadocs to private methods. Since they are complex, it may help to understand what they are about. For example, findBootNode(), how does it find the root element? And what is the root element here?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480100006", "createdAt": "2020-08-31T12:35:29Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4OTU5Nw=="}, "originalCommit": {"oid": "e87e77028aad6d87d7b915ed441e9a2fac4b925b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgzMDYwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNjozOFrOHGQA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNjozOFrOHGQA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNTg5Ng==", "bodyText": "Minor: maybe some javadoc here for future maintainers.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476315896", "createdAt": "2020-08-25T09:36:38Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgzNTQzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNzo1OFrOHGQD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNzo1OFrOHGQD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNjY1OQ==", "bodyText": "Do we have anywhere the definition of \"legal\"? Maybe add some here as javadoc as well?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476316659", "createdAt": "2020-08-25T09:37:58Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgzODIzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozODo0MFrOHGQFnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozODo0MFrOHGQFnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzA4NA==", "bodyText": "Can we throw InvalidConfigurationException instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476317084", "createdAt": "2020-08-25T09:38:40Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Validation mechanism used to make sure that external configuration features is legal.\n+ */\n+final class ConfigOverrideValidator {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ConfigOverrideValidator.class);\n+\n+    private ConfigOverrideValidator() {\n+    }\n+\n+    static void validate(Set<ConfigProvider> providers) {\n+        Set<String> sharedKeys = findDuplicateEntries(providers);\n+        if (!sharedKeys.isEmpty()) {\n+            LOGGER.severe(\"Discovered conflicting entries: \" + String.join(\",\", sharedKeys));\n+            throw new IllegalStateException(\"Discovered conflicting configuration entries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzg0MDc0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozOToyMFrOHGQHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozOToyMFrOHGQHNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzQ5Mg==", "bodyText": "Javadoc", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476317492", "createdAt": "2020-08-25T09:39:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source.\n+ */\n+interface ConfigProvider {\n+\n+    /**\n+     * Returns an immutable set of key-value configuration entries.\n+     */\n+    Map<String, String> properties();\n+\n+    String name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzkxNzA1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTo1ODozMlrOHGQ1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTo1ODozMlrOHGQ1DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyOTIyOQ==", "bodyText": "Can name be null? If not, maybe some Nonnull annotation and check.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476329229", "createdAt": "2020-08-25T09:58:32Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A representation of a single generic configuration node.\n+ */\n+class ConfigNode {\n+    private final ConfigNode parent;\n+    private final String name;\n+    private final Map<String, ConfigNode> children = new LinkedHashMap<>();\n+    private String value;\n+\n+    ConfigNode(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk0NzMxOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowNjo1N1rOHGRHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowNjo1N1rOHGRHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMzk5OQ==", "bodyText": "RuntimeException seems a bit generic. Can we throw InvalidConfigurationException instead or something extending HazelcastException?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476333999", "createdAt": "2020-08-25T10:06:57Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk2OTY0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzo1MlrOHGRWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjozMjozM1rOHKmPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzY3Mw==", "bodyText": "Can we print one log statement instead with all of the overrides instead?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476337673", "createdAt": "2020-08-25T10:13:52Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n+\n+        for (ConfigProvider configProvider : providers) {\n+            Map<String, String> properties = configProvider.properties();\n+            properties.forEach((k, v) -> {\n+                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NDg1MA==", "bodyText": "I assume we want to minimize the number of lines? I came up with something like this:\n\nDetected external configuration overrides in environment variables: [hazelcast.network.join.autodetection.enabled=false,hazelcast.executorservice.custom.poolsize=42,hazelcast.clustername=test,hazelcast.cache.default.keytype.classname=java.lang.Object]", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480864850", "createdAt": "2020-09-01T06:19:05Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n+\n+        for (ConfigProvider configProvider : providers) {\n+            Map<String, String> properties = configProvider.properties();\n+            properties.forEach((k, v) -> {\n+                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzY3Mw=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg3NDM2MA==", "bodyText": "Yes, that, and the PR description shows this as an example:\nINFO: Detected external configuration overrides in environment variables: \nhazelcast.network.join.multicast.enabled=false\nhazelcast.network.join.tcpip.enabled=false\nhazelcast.clustername=foo", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480874360", "createdAt": "2020-09-01T06:32:33Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.client()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.client()));\n+    }\n+\n+    private <T> T overwrite(T config, BiConsumer<ConfigProvider, T> configProcessor, ConfigProvider... providers) {\n+        ConfigOverrideValidator.validate(new HashSet<>(Arrays.asList(providers)));\n+\n+        for (ConfigProvider configProvider : providers) {\n+            Map<String, String> properties = configProvider.properties();\n+            properties.forEach((k, v) -> {\n+                LOGGER.info(format(\"Detected external configuration overrides in %s: [%s]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzY3Mw=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk3Nzg1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxNjoyM1rOHGRbPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxNjoyM1rOHGRbPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzOTAwNA==", "bodyText": "InvalidConfigurationException? Same in rest of class. Also, maybe you can include the conflicting names.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476339004", "createdAt": "2020-08-25T10:16:23Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);\n+        }\n+        return root;\n+    }\n+\n+    private static String findRootNode(Map<String, String> properties) {\n+        Set<String> rootNodeNames = properties.keySet().stream()\n+          .map(key -> key.split(\"\\\\.\")[0])\n+          .collect(Collectors.toSet());\n+\n+        if (rootNodeNames.size() > 1) {\n+            throw new IllegalStateException(\"parsed config entries have conflicting root node names\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk5ODkwOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoyMjo0MlrOHGRoCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoyMjo0MlrOHGRoCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0MjI4MA==", "bodyText": "Minor - maybe this instead?\n .map(key -> {\n              int dotIndex = key.indexOf(\".\");\n              return key.substring(0, dotIndex > 0? dotIndex : key.length());\n          })\n          ```", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476342280", "createdAt": "2020-08-25T10:22:42Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);\n+        }\n+        return root;\n+    }\n+\n+    private static String findRootNode(Map<String, String> properties) {\n+        Set<String> rootNodeNames = properties.keySet().stream()\n+          .map(key -> key.split(\"\\\\.\")[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODAwOTY4OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoyNjoxM1rOHGRumg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo1NToyMVrOHLwUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0Mzk2Mg==", "bodyText": "No need to create an entry as a parameter, I think it can be:\n    private static void parseEntry(String key, String value, ConfigNode root) {\n        ConfigNode last = root;\n        for (String s : key.toLowerCase().split(\"\\\\.\")) {\n            ConfigNode node = last.getChildren().get(s);\n            if (node == null) {\n                node = new ConfigNode(s, last);\n                last.getChildren().put(s, node);\n            }\n            last = node;\n        }\n\n        last.setValue(value);\n    }\n\nAnother alternative is this:\nstatic ConfigNode propsToNode(Map<String, String> properties) {\n        Map<String, List<BiTuple<String[], String>>> propsByRootNode =\n                properties.entrySet().stream()\n                          .map(entry -> BiTuple.of(entry.getKey().split(\"\\\\.\"), entry.getValue()))\n                          .collect(Collectors.groupingBy(e -> e.element1()[0]));\n\n        if (propsByRootNode.size() > 1) {\n            throw new IllegalStateException(\"parsed config entries have conflicting root node names\");\n        }\n        if (propsByRootNode.size() == 0){\n            throw new IllegalStateException(\"No parsed entries found\");\n        }\n\n        Entry<String, List<BiTuple<String[], String>>> rootNodeEntry = propsByRootNode.entrySet().iterator().next();\n\n        ConfigNode root = new ConfigNode(rootNodeEntry.getKey());\n        for (BiTuple<String[], String> e : rootNodeEntry.getValue()) {\n            parseEntry(e.element1, e.element2, root);\n        }\n        return root;\n    }\n\n    private static void parseEntry(String[] keyPath, String value, ConfigNode root) {\n        ConfigNode last = root;\n        for (int i = 1; i < keyPath.length; i++) {\n            ConfigNode node = last.getChildren().get(keyPath[i]);\n            if (node == null) {\n                node = new ConfigNode(keyPath[i], last);\n                last.getChildren().put(keyPath[i], node);\n            }\n            last = node;\n        }\n\n        last.setValue(value);\n    }", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476343962", "createdAt": "2020-08-25T10:26:13Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NzE0Nw==", "bodyText": "With the alternative approach, I've asked myself what can happen if the key is equal to the root name. For instance, this case:\nHZ_NETWORK_JOIN=whoops\nHZ_NETWORK_JOIN_TCPIP_ENABLED=false;\nHZ_NETWORK_JOIN_MULTICAST_ENABLED=false", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476357147", "createdAt": "2020-08-25T10:51:58Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0Mzk2Mg=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4ODEwOA==", "bodyText": "Any ideas about the above when the key is equal to the root name?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482088108", "createdAt": "2020-09-02T13:55:21Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/PropertiesToNodeConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+final class PropertiesToNodeConverter {\n+\n+    private PropertiesToNodeConverter() {\n+    }\n+\n+    static ConfigNode propsToNode(Map<String, String> properties) {\n+        String rootNode = findRootNode(properties);\n+\n+        ConfigNode root = new ConfigNode(rootNode);\n+        for (Map.Entry<String, String> e : properties.entrySet()) {\n+            parseEntry(new AbstractMap.SimpleEntry<>(e.getKey().replaceFirst(rootNode + \".\", \"\"), e.getValue()), root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0Mzk2Mg=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODAxNjg5OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideElementAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoyODoyMFrOHGRzAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoyODoyMFrOHGRzAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0NTA4OQ==", "bodyText": "If it can't be null, maybe annotation and check.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476345089", "createdAt": "2020-08-25T10:28:20Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigOverrideElementAdapter.java", "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.TypeInfo;\n+import org.w3c.dom.UserDataHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class adapting {@link ConfigNode}s to {@link Element}.\n+ * <p>\n+ * Used for processing external configuration overrides.\n+ */\n+@SuppressWarnings({\"checkstyle:methodcount\"})\n+class ConfigOverrideElementAdapter implements Element {\n+    private final ConfigNode configNode;\n+\n+    ConfigOverrideElementAdapter(ConfigNode yamlNode) {\n+        this.configNode = yamlNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODA3OTA0OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0NzoyMlrOHGSZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMToxOTo1OFrOHGTXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDg4OQ==", "bodyText": "Minor: maybe you can join the \"parser\" and \"provider\" as right now the providers are rather simple. Right now, it looks like you might use different parsers with a single provider but it's not really needed. The provider implementation could both fetch the properties and parse them.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476354889", "createdAt": "2020-08-25T10:47:22Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source.\n+ */\n+interface ConfigProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDgyNg==", "bodyText": "We'd lose testability. Parsers work on arbitrary sources of data while providers supply parsers with data from System.getEnv/getProperties. Thanks to the separation, I'm able to test the parsing logic without touching System.getEnv/getProperties", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r476370826", "createdAt": "2020-08-25T11:19:58Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ConfigProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import java.util.Map;\n+\n+/**\n+ * An interface representing a generic configuration source.\n+ */\n+interface ConfigProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDg4OQ=="}, "originalCommit": {"oid": "1433369e1765ea7bb228fcef58d33dac92958066"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk0ODI3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjo1MFrOHJ25bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjo1MFrOHJ25bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name());\n          \n          \n            \n                              throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r480098668", "createdAt": "2020-08-31T12:32:50Z", "author": {"login": "leszko"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/override/ExternalConfigurationOverride.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.config.impl.YamlClientDomConfigProcessor;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.InvalidConfigurationException;\n+import com.hazelcast.internal.config.YamlMemberDomConfigProcessor;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static com.hazelcast.internal.config.override.PropertiesToNodeConverter.propsToNode;\n+import static java.lang.String.format;\n+\n+/**\n+ * A class used to process external configuration overrides coming from environment variables/system properties,\n+ * and applying them over existing {@link Config}/{@link ClientConfig} configuration.\n+ */\n+public class ExternalConfigurationOverride {\n+\n+    private static final ILogger LOGGER = Logger.getLogger(ExternalConfigurationOverride.class);\n+\n+    public Config overwriteMemberConfig(Config config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlMemberDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name(), e);\n+              }\n+          },\n+          new EnvConfigProvider(EnvVariablesConfigParser.member()),\n+          new SystemPropertiesConfigProvider(SystemPropertiesConfigParser.member()));\n+    }\n+\n+    public ClientConfig overwriteClientConfig(ClientConfig config) {\n+        return overwrite(config, (provider, c) -> {\n+              try {\n+                  new YamlClientDomConfigProcessor(true, c)\n+                    .buildConfig(new ConfigOverrideElementAdapter(propsToNode(provider.properties())));\n+              } catch (Exception e) {\n+                  throw new InvalidConfigurationException(\"failed to overwrite configuration coming from \" + provider.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db8f45c91b092286f1f14c3ac5c3cdd8e8fc11ca"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzgyMjE3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0Nzo0NFrOHKwzwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozOTo0OFrOHKyYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0NzQ5MA==", "bodyText": "Should there be a test for the case where the env variable name contains \"-\"?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481047490", "createdAt": "2020-09-01T10:47:44Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MzMxNg==", "bodyText": "We'll be documenting the dashless way as the right one since dashes are not supported by most shells in env variable names so it's not really needed", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481073316", "createdAt": "2020-09-01T11:39:48Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0NzQ5MA=="}, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzgyNTIzOnYy", "diffSide": "RIGHT", "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODo0M1rOHKw1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMToyNDo0M1rOHKx6wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0Nzk3Nw==", "bodyText": "Question: Do we change anything on the value? For example a value like this: com.hazelcast.listeners.my-listener-class-with-dash", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481047977", "createdAt": "2020-09-01T10:48:43Z", "author": {"login": "ihsandemir"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2NTY2Ng==", "bodyText": "No, values don't require any changes", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r481065666", "createdAt": "2020-09-01T11:24:43Z", "author": {"login": "pivovarit"}, "path": "hazelcast/src/test/java/com/hazelcast/internal/config/override/EnvVariablesClientConfigParserTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.config.override;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class EnvVariablesClientConfigParserTest extends HazelcastTestSupport {\n+\n+    private final EnvVariablesConfigParser envVariablesConfigParser = EnvVariablesConfigParser.client();\n+\n+    @Test\n+    public void shouldParseEntries() {\n+        Map<String, String> entries = new HashMap<>();\n+        entries.put(\"HZCLIENT_CLUSTERNAME\", \"foo\");\n+        entries.put(\"HZCLIENT_NETWORK_JOIN_TCPIP_ENABLED\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0Nzk3Nw=="}, "originalCommit": {"oid": "ca11c96248ef86010b14f5d3a18f6133664170d9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQyNTA3OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/QueryCacheXmlConfigBuilderHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMDoyN1rOHLxepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMDoyN1rOHLxepg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzA0Ng==", "bodyText": "Can you also check handleQueryCache and getCacheMapName, handleEntryListeners and the rest of the class?", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482107046", "createdAt": "2020-09-02T14:20:27Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/QueryCacheXmlConfigBuilderHelper.java", "diffHunk": "@@ -81,7 +81,7 @@ protected void queryCachePredicateHandler(Node childNode, QueryCacheConfig query\n     protected void queryCacheIndexesHandle(Node n, QueryCacheConfig queryCacheConfig) {\n         for (Node indexNode : childElements(n)) {\n             if (\"index\".equals(cleanNodeName(indexNode))) {\n-                IndexConfig indexConfig = IndexUtils.getIndexConfigFromXml(indexNode, domLevel3);\n+                IndexConfig indexConfig = IndexUtils.getIndexConfigFromXml(indexNode, domLevel3, strict);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY0MDM1OnYy", "diffSide": "RIGHT", "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMzozM1rOHLzmbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMzozM1rOHLzmbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0MTgwNw==", "bodyText": "The priority-comparator-class-name is a leftover.", "url": "https://github.com/hazelcast/hazelcast/pull/17348#discussion_r482141807", "createdAt": "2020-09-02T15:03:33Z", "author": {"login": "mmedenjak"}, "path": "hazelcast/src/main/java/com/hazelcast/internal/config/MemberDomConfigProcessor.java", "diffHunk": "@@ -1538,27 +1529,27 @@ void handleQueueNode(Node node, final QueueConfig qConfig) {\n         for (Node n : childElements(node)) {\n             String nodeName = cleanNodeName(n);\n             String value = getTextContent(n).trim();\n-            if (\"max-size\".equals(nodeName)) {\n+            if (matches(\"max-size\", nodeName)) {\n                 qConfig.setMaxSize(getIntegerValue(\"max-size\", value));\n-            } else if (\"backup-count\".equals(nodeName)) {\n+            } else if (matches(\"backup-count\", nodeName)) {\n                 qConfig.setBackupCount(getIntegerValue(\"backup-count\", value));\n-            } else if (\"async-backup-count\".equals(nodeName)) {\n+            } else if (matches(\"async-backup-count\", nodeName)) {\n                 qConfig.setAsyncBackupCount(getIntegerValue(\"async-backup-count\", value));\n-            } else if (\"item-listeners\".equals(nodeName)) {\n+            } else if (matches(\"item-listeners\", nodeName)) {\n                 handleItemListeners(n, itemListenerConfig -> {\n                     qConfig.addItemListenerConfig(itemListenerConfig);\n                     return null;\n                 });\n-            } else if (\"statistics-enabled\".equals(nodeName)) {\n+            } else if (matches(\"statistics-enabled\", nodeName)) {\n                 qConfig.setStatisticsEnabled(getBooleanValue(value));\n-            } else if (\"queue-store\".equals(nodeName)) {\n+            } else if (matches(\"queue-store\", nodeName)) {\n                 QueueStoreConfig queueStoreConfig = createQueueStoreConfig(n);\n                 qConfig.setQueueStoreConfig(queueStoreConfig);\n-            } else if (\"split-brain-protection-ref\".equals(nodeName)) {\n+            } else if (matches(\"split-brain-protection-ref\", nodeName)) {\n                 qConfig.setSplitBrainProtectionName(value);\n-            } else if (\"empty-queue-ttl\".equals(nodeName)) {\n+            } else if (matches(\"empty-queue-ttl\", nodeName)) {\n                 qConfig.setEmptyQueueTtl(getIntegerValue(\"empty-queue-ttl\", value));\n-            } else if (\"merge-policy\".equals(nodeName)) {\n+            } else if (matches(\"merge-policy\", nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b42a81b67ebcb27d95e80a3a9383386cb157ac5"}, "originalPosition": 1079}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 295, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}