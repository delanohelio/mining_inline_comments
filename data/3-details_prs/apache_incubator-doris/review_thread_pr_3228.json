{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDc1MDUz", "number": 3228, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTo0Nzo1M1rODsoowA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1ODowOFrODstqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI5NzI4OnYy", "diffSide": "RIGHT", "path": "be/src/exec/except_node.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTo0Nzo1M1rOF9l7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDoxMzowNFrOF-Eqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyODg2Mg==", "bodyText": "why does hashtable has the same value\uff1fWhen you create a hash table, will duplicate values are inserted into the hash table\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3228#discussion_r400128862", "createdAt": "2020-03-30T11:47:53Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/except_node.cpp", "diffHunk": "@@ -179,17 +137,21 @@ Status ExceptNode::get_next(RuntimeState* state, RowBatch* out_batch, bool* eos)\n     if (reached_limit()) {\n         return Status::OK();\n     }\n+    int64_t tuple_buf_size;\n+    uint8_t* tuple_buf;\n+    RETURN_IF_ERROR(\n+            out_batch->resize_and_allocate_tuple_buffer(state, &tuple_buf_size, &tuple_buf));\n     uint32_t previous_hash = -1;\n     TupleRow* previous_row = nullptr;\n     while (_hash_tbl_iterator.has_next()) {\n+        VLOG_ROW << \"find row: \"\n+                 << get_row_output_string(_hash_tbl_iterator.get_row(), child(0)->row_desc())\n+                 << \" matched: \" << _hash_tbl_iterator.matched();\n         if (!_hash_tbl_iterator.matched()) {\n             if (previous_hash != _hash_tbl_iterator.get_hash() ||\n                 !equals(previous_row, _hash_tbl_iterator.get_row())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e529249af6f0d929344bb887b2d127fab3a0c521"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MDg4Mg==", "bodyText": "As I know, this hash table will store all rows with same hash key.", "url": "https://github.com/apache/incubator-doris/pull/3228#discussion_r400260882", "createdAt": "2020-03-30T14:59:35Z", "author": {"login": "morningman"}, "path": "be/src/exec/except_node.cpp", "diffHunk": "@@ -179,17 +137,21 @@ Status ExceptNode::get_next(RuntimeState* state, RowBatch* out_batch, bool* eos)\n     if (reached_limit()) {\n         return Status::OK();\n     }\n+    int64_t tuple_buf_size;\n+    uint8_t* tuple_buf;\n+    RETURN_IF_ERROR(\n+            out_batch->resize_and_allocate_tuple_buffer(state, &tuple_buf_size, &tuple_buf));\n     uint32_t previous_hash = -1;\n     TupleRow* previous_row = nullptr;\n     while (_hash_tbl_iterator.has_next()) {\n+        VLOG_ROW << \"find row: \"\n+                 << get_row_output_string(_hash_tbl_iterator.get_row(), child(0)->row_desc())\n+                 << \" matched: \" << _hash_tbl_iterator.matched();\n         if (!_hash_tbl_iterator.matched()) {\n             if (previous_hash != _hash_tbl_iterator.get_hash() ||\n                 !equals(previous_row, _hash_tbl_iterator.get_row())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyODg2Mg=="}, "originalCommit": {"oid": "e529249af6f0d929344bb887b2d127fab3a0c521"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzg2MA==", "bodyText": "But this is a set operation\uff08It is different from join\uff09. The set operation has de duplication. so the elements of the hash table do not need to have deduplicatedvalue\u3002", "url": "https://github.com/apache/incubator-doris/pull/3228#discussion_r400607860", "createdAt": "2020-03-31T02:36:59Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/except_node.cpp", "diffHunk": "@@ -179,17 +137,21 @@ Status ExceptNode::get_next(RuntimeState* state, RowBatch* out_batch, bool* eos)\n     if (reached_limit()) {\n         return Status::OK();\n     }\n+    int64_t tuple_buf_size;\n+    uint8_t* tuple_buf;\n+    RETURN_IF_ERROR(\n+            out_batch->resize_and_allocate_tuple_buffer(state, &tuple_buf_size, &tuple_buf));\n     uint32_t previous_hash = -1;\n     TupleRow* previous_row = nullptr;\n     while (_hash_tbl_iterator.has_next()) {\n+        VLOG_ROW << \"find row: \"\n+                 << get_row_output_string(_hash_tbl_iterator.get_row(), child(0)->row_desc())\n+                 << \" matched: \" << _hash_tbl_iterator.matched();\n         if (!_hash_tbl_iterator.matched()) {\n             if (previous_hash != _hash_tbl_iterator.get_hash() ||\n                 !equals(previous_row, _hash_tbl_iterator.get_row())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyODg2Mg=="}, "originalCommit": {"oid": "e529249af6f0d929344bb887b2d127fab3a0c521"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMjUxOA==", "bodyText": "duplicated values will be iterate when get next,and deduplicate can reduce the cost of probe,you can find detail in hash_table.h,hash table in doris is not same with the common sense hashtable", "url": "https://github.com/apache/incubator-doris/pull/3228#discussion_r400632518", "createdAt": "2020-03-31T04:13:04Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/except_node.cpp", "diffHunk": "@@ -179,17 +137,21 @@ Status ExceptNode::get_next(RuntimeState* state, RowBatch* out_batch, bool* eos)\n     if (reached_limit()) {\n         return Status::OK();\n     }\n+    int64_t tuple_buf_size;\n+    uint8_t* tuple_buf;\n+    RETURN_IF_ERROR(\n+            out_batch->resize_and_allocate_tuple_buffer(state, &tuple_buf_size, &tuple_buf));\n     uint32_t previous_hash = -1;\n     TupleRow* previous_row = nullptr;\n     while (_hash_tbl_iterator.has_next()) {\n+        VLOG_ROW << \"find row: \"\n+                 << get_row_output_string(_hash_tbl_iterator.get_row(), child(0)->row_desc())\n+                 << \" matched: \" << _hash_tbl_iterator.matched();\n         if (!_hash_tbl_iterator.matched()) {\n             if (previous_hash != _hash_tbl_iterator.get_hash() ||\n                 !equals(previous_row, _hash_tbl_iterator.get_row())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyODg2Mg=="}, "originalCommit": {"oid": "e529249af6f0d929344bb887b2d127fab3a0c521"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjEyMDYzOnYy", "diffSide": "RIGHT", "path": "be/src/exec/except_node.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1ODowOFrOF9t6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1ODowOFrOF9t6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1OTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // build hash table and remvoe duplicate items\n          \n          \n            \n                    // build hash table and remove duplicate items", "url": "https://github.com/apache/incubator-doris/pull/3228#discussion_r400259728", "createdAt": "2020-03-30T14:58:08Z", "author": {"login": "morningman"}, "path": "be/src/exec/except_node.cpp", "diffHunk": "@@ -112,6 +63,8 @@ Status ExceptNode::open(RuntimeState* state) {\n         RETURN_IF_LIMIT_EXCEEDED(state, \" Except, while constructing the hash table.\");\n         // build hash table and remvoe duplicate items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e529249af6f0d929344bb887b2d127fab3a0c521"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}