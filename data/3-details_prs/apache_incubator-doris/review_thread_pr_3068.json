{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDA1NDcx", "number": 3068, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozNTowN1rODmriCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozNTowN1rODmriCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODg1NzA0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozNTowN1rOF0O-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozNTowN1rOF0O-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNTUzMQ==", "bodyText": "No need to check table's stable when dropping mv.", "url": "https://github.com/apache/incubator-doris/pull/3068#discussion_r390315531", "createdAt": "2020-03-10T13:35:07Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -107,24 +114,38 @@ public void processCreateMaterializedView(CreateMaterializedViewStmt stmt) throw\n                 throw new DdlException(\"Do not support alter non-OLAP table[\" + tableName + \"]\");\n             }\n             OlapTable olapTable = (OlapTable) table;\n+            olapTable.checkStableAndNormal(db.getClusterName());\n \n-            if (olapTable.getState() != OlapTableState.NORMAL) {\n-                throw new DdlException(\"Table[\" + table.getName() + \"]'s state is not NORMAL. \"\n-                                               + \"Do not allow doing materialized view\");\n+            ((MaterializedViewHandler)materializedViewHandler).processCreateMaterializedView(stmt, db, olapTable);\n+        } finally {\n+            db.writeUnlock();\n+        }\n+    }\n+\n+    public void processDropMaterializedView(DropMaterializedViewStmt stmt) throws DdlException, MetaNotFoundException {\n+        // check db\n+        String dbName = stmt.getTableName().getDb();\n+        Database db = Catalog.getInstance().getDb(dbName);\n+        if (db == null) {\n+            ErrorReport.reportDdlException(ErrorCode.ERR_BAD_DB_ERROR, dbName);\n+        }\n+\n+        db.writeLock();\n+        try {\n+            String tableName = stmt.getTableName().getTbl();\n+            Table table = db.getTable(tableName);\n+            if (table == null) {\n+                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n             }\n-            // check if all tablets are healthy, and no tablet is in tablet scheduler\n-            boolean isStable = olapTable.isStable(Catalog.getCurrentSystemInfo(),\n-                                                  Catalog.getCurrentCatalog().getTabletScheduler(),\n-                                                  db.getClusterName());\n-            if (!isStable) {\n-                throw new DdlException(\"table [\" + olapTable.getName() + \"] is not stable.\"\n-                                               + \" Some tablets of this table may not be healthy or are being \"\n-                                               + \"scheduled.\"\n-                                               + \" You need to repair the table first\"\n-                                               + \" or stop cluster balance. See 'help admin;'.\");\n+\n+            if (table.getType() != TableType.OLAP) {\n+                throw new DdlException(\"Do not support non-OLAP table [\" + tableName + \"] when drop materialized view\");\n             }\n \n-            ((MaterializedViewHandler)materializedViewHandler).processCreateMaterializedView(stmt, db, olapTable);\n+            OlapTable olapTable = (OlapTable) table;\n+            olapTable.checkStableAndNormal(db.getClusterName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edf08516cc1540cdb32c627a3081388d47c8a2fe"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2091, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}