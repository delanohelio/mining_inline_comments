{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDg5MzM2", "number": 3378, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDowOTo0MVrOD0rO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1Mzo0OFrOD0zS-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTYwODkzOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDowOTo0MVrOGJudcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozOToxMVrOGKk1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MTU2OQ==", "bodyText": "It is work for function call?\nFor example, if user input:\n\"create view test_view (h1, h2) as select function(a, b), col2 from testTbl\"\nwill become\n\"select function(a, b) as h1, col2 as h2 from (select function(a, b), col2 from testTbl)\"", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r412851569", "createdAt": "2020-04-22T10:09:41Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();\n+\n+        originalViewDef = lowerCaseOriginSql.substring(lowerCaseOriginSql.indexOf(KW_AS) + 3);\n+        LOG.debug(\"origin view def sql is {}\", originalViewDef);\n \n         if (cols == null) {\n             inlineViewDef = originalViewDef;\n+            LOG.debug(\"inline view def sql is {}\", inlineViewDef);\n             return;\n         }\n \n         Analyzer tmpAnalyzer = new Analyzer(analyzer);\n         List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n         cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-//        StringBuilder sb = new StringBuilder();\n-//        sb.append(\"SELECT \");\n-//        for (int i = 0; i < finalCols.size(); ++i) {\n-//            if (i != 0) {\n-//                sb.append(\", \");\n-//            }\n-//            String colRef = viewDefStmt.getColLabels().get(i);\n-//            if (!colRef.startsWith(\"`\")) {\n-//                colRef = \"`\" + colRef + \"`\";\n-//            }\n-//            String colAlias = finalCols.get(i).getName();\n-//            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-//        }\n-//        sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-//        inlineViewDef = sb.toString();\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < colNames.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = colNames.get(i);\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MjQyNg==", "bodyText": "This change has been removed.", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413742426", "createdAt": "2020-04-23T11:39:11Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();\n+\n+        originalViewDef = lowerCaseOriginSql.substring(lowerCaseOriginSql.indexOf(KW_AS) + 3);\n+        LOG.debug(\"origin view def sql is {}\", originalViewDef);\n \n         if (cols == null) {\n             inlineViewDef = originalViewDef;\n+            LOG.debug(\"inline view def sql is {}\", inlineViewDef);\n             return;\n         }\n \n         Analyzer tmpAnalyzer = new Analyzer(analyzer);\n         List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n         cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-//        StringBuilder sb = new StringBuilder();\n-//        sb.append(\"SELECT \");\n-//        for (int i = 0; i < finalCols.size(); ++i) {\n-//            if (i != 0) {\n-//                sb.append(\", \");\n-//            }\n-//            String colRef = viewDefStmt.getColLabels().get(i);\n-//            if (!colRef.startsWith(\"`\")) {\n-//                colRef = \"`\" + colRef + \"`\";\n-//            }\n-//            String colAlias = finalCols.get(i).getName();\n-//            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-//        }\n-//        sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-//        inlineViewDef = sb.toString();\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < colNames.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = colNames.get(i);\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MTU2OQ=="}, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjYzNzIxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1OTo0NFrOGJ4BTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1OTo0NFrOGJ4BTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODIwNg==", "bodyText": "I think you can not just call toLowerCase(), what if the statement is\nselect * from tbl where k1 like \"%ABC%\";\n\nAnd why not just save the entire origin statement with CREATE VIEW AS inside it? And you can just get the QueryStmt part when parsing it again.", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413008206", "createdAt": "2020-04-22T13:59:44Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjY2NTUyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/ConnectProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDowNToxMVrOGJ4S4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDowNToxMVrOGJ4S4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxMjcwNA==", "bodyText": "There maybe ; inside the query statement", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413012704", "createdAt": "2020-04-22T14:05:11Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/ConnectProcessor.java", "diffHunk": "@@ -225,7 +226,13 @@ private void handleQuery() {\n         SqlScanner input = new SqlScanner(new StringReader(originStmt), ctx.getSessionVariable().getSqlMode());\n         SqlParser parser = new SqlParser(input);\n         try {\n-            return SqlParserUtils.getMultiStmts(parser);\n+            List<StatementBase> result = SqlParserUtils.getMultiStmts(parser);\n+            String[] originStmtList = originStmt.split(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjkyNjQ1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/LimitElement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1MzoxMlrOGJ6y4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozOToyNVrOGKk17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MzY2Ng==", "bodyText": "Why change the order?", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413053666", "createdAt": "2020-04-22T14:53:12Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/LimitElement.java", "diffHunk": "@@ -42,9 +42,9 @@ public LimitElement(long limit) {\n         offset = 0;\n     }\n \n-    public LimitElement(long offset, long limit) {\n-        this.offset = offset;\n+    public LimitElement(long limit, long offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MjU3NQ==", "bodyText": "changed", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413742575", "createdAt": "2020-04-23T11:39:25Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/LimitElement.java", "diffHunk": "@@ -42,9 +42,9 @@ public LimitElement(long limit) {\n         offset = 0;\n     }\n \n-    public LimitElement(long offset, long limit) {\n-        this.offset = offset;\n+    public LimitElement(long limit, long offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MzY2Ng=="}, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjkyOTg2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1Mzo0OFrOGJ61AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1Mzo0OFrOGJ61AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NDIwOQ==", "bodyText": "Remove.", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413054209", "createdAt": "2020-04-22T14:53:48Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "diffHunk": "@@ -98,6 +98,24 @@ public void rewriteExprs(ExprRewriter rewriter, Analyzer analyzer)\n             item.setExpr(rewriter.rewrite(item.getExpr(), analyzer));\n         }\n     }\n+\n+    public String toOriginSql() {\n+        // Select list\n+        StringBuilder strBuilder = new StringBuilder();\n+        strBuilder.append(\"SELECT \");\n+        if (isDistinct) {\n+            strBuilder.append(\"DISTINCT \");\n+        }\n+        for (int i = 0; i < items.size(); ++i) {\n+            // strBuilder.append(selectList.getItems().get(i).toSql());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}