{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjQ2Nzcx", "number": 2883, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMzowNFrODezO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzowOToxMlrODfCO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIzMjg4OnYy", "diffSide": "RIGHT", "path": "docs/documentation/en/administrator-guide/alter-table/alter-table-bitmap-index_EN.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMzowNFrOFoIsxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMzowNFrOFoIsxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyOTg5Mw==", "bodyText": "change many lines to on line.", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377629893", "createdAt": "2020-02-11T13:23:04Z", "author": {"login": "wutiangan"}, "path": "docs/documentation/en/administrator-guide/alter-table/alter-table-bitmap-index_EN.md", "diffHunk": "@@ -56,7 +56,10 @@ Please refer to [Scheam Change](alter-table-schema-change_EN.md#Cancel Job)\n ## Notice\n * Currently only index of bitmap type is supported.\n * The bitmap index is only created on a single column.\n-* Bitmap indexes can be applied to all columns of the `Duplicate` data model and key columns of the `Aggregate` and `Uniq` models.\n+* Bitmap indexes can be applied to all columns of the `Duplicate` data model and key columns or `REPLACE` value columns\n+ of the\n+ `Aggregate` and\n+ `Uniq` models.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjI1MjY1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyODo0OVrOFoI4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo0NDoyNFrOFoLnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMjkzMw==", "bodyText": "use isNumericType(), not list all type", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377632933", "createdAt": "2020-02-11T13:28:49Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "diffHunk": "@@ -412,9 +412,13 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n                             // key columns and none/replace aggregate non-key columns support\n                             if (indexDef.getIndexType() == IndexDef.IndexType.BITMAP) {\n-                                    if (!(colType == PrimitiveType.TINYINT || colType == PrimitiveType.SMALLINT\n-                                                  || colType == PrimitiveType.INT || colType == PrimitiveType.BIGINT ||\n-                                                  colType == PrimitiveType.CHAR || colType == PrimitiveType.VARCHAR)) {\n+                                    if (!(colType == PrimitiveType.TINYINT || colType == PrimitiveType.SMALLINT ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NzcxNg==", "bodyText": "it dose not support double and float and double\uff0c so cannot use  isNumericType()", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377677716", "createdAt": "2020-02-11T14:44:24Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "diffHunk": "@@ -412,9 +412,13 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n                             // key columns and none/replace aggregate non-key columns support\n                             if (indexDef.getIndexType() == IndexDef.IndexType.BITMAP) {\n-                                    if (!(colType == PrimitiveType.TINYINT || colType == PrimitiveType.SMALLINT\n-                                                  || colType == PrimitiveType.INT || colType == PrimitiveType.BIGINT ||\n-                                                  colType == PrimitiveType.CHAR || colType == PrimitiveType.VARCHAR)) {\n+                                    if (!(colType == PrimitiveType.TINYINT || colType == PrimitiveType.SMALLINT ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMjkzMw=="}, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjMwNDUxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo0MzoyNlrOFoJYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzo1NDo1MlrOFovY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDk5OQ==", "bodyText": "You can just use olapTable.getColumn() to get the column, no need to iterate all columns", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377640999", "createdAt": "2020-02-11T13:43:26Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -200,12 +202,39 @@ public void processAlterTable(AlterTableStmt stmt) throws UserException {\n                         }\n                         Set<String> idxSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         idxSet.addAll(idx.getColumns());\n-                            if (newColset.equals(idxSet)) {\n-                                throw new AnalysisException(\"index for columns (\" + String\n-                                        .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        if (newColset.equals(idxSet)) {\n+                            throw new AnalysisException(\"index for columns (\" + String\n+                                    .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        }\n+                    }\n+                    OlapTable olapTable = (OlapTable) table;\n+                    for (String col : indexDef.getColumns()) {\n+                        for (Column c : olapTable.getFullSchema()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MjEwMQ==", "bodyText": "And the following type checking logic looks same as in CreateTableStmt.\nSo I think they can be extract to a method?", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377642101", "createdAt": "2020-02-11T13:45:27Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -200,12 +202,39 @@ public void processAlterTable(AlterTableStmt stmt) throws UserException {\n                         }\n                         Set<String> idxSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         idxSet.addAll(idx.getColumns());\n-                            if (newColset.equals(idxSet)) {\n-                                throw new AnalysisException(\"index for columns (\" + String\n-                                        .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        if (newColset.equals(idxSet)) {\n+                            throw new AnalysisException(\"index for columns (\" + String\n+                                    .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        }\n+                    }\n+                    OlapTable olapTable = (OlapTable) table;\n+                    for (String col : indexDef.getColumns()) {\n+                        for (Column c : olapTable.getFullSchema()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDk5OQ=="}, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3OTkyMw==", "bodyText": "the colum name from  create index clause  may not the same case with olapTable.getColumn () so i must use case equalsIgnoreCase to find", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r377679923", "createdAt": "2020-02-11T14:47:45Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -200,12 +202,39 @@ public void processAlterTable(AlterTableStmt stmt) throws UserException {\n                         }\n                         Set<String> idxSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         idxSet.addAll(idx.getColumns());\n-                            if (newColset.equals(idxSet)) {\n-                                throw new AnalysisException(\"index for columns (\" + String\n-                                        .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        if (newColset.equals(idxSet)) {\n+                            throw new AnalysisException(\"index for columns (\" + String\n+                                    .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        }\n+                    }\n+                    OlapTable olapTable = (OlapTable) table;\n+                    for (String col : indexDef.getColumns()) {\n+                        for (Column c : olapTable.getFullSchema()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDk5OQ=="}, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2Mzc4Nw==", "bodyText": "This method is case insensitive olapTable.getColumn()", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r378263787", "createdAt": "2020-02-12T13:54:52Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -200,12 +202,39 @@ public void processAlterTable(AlterTableStmt stmt) throws UserException {\n                         }\n                         Set<String> idxSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         idxSet.addAll(idx.getColumns());\n-                            if (newColset.equals(idxSet)) {\n-                                throw new AnalysisException(\"index for columns (\" + String\n-                                        .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        if (newColset.equals(idxSet)) {\n+                            throw new AnalysisException(\"index for columns (\" + String\n+                                    .join(\",\", indexDef.getColumns()) + \" ) already exist.\");\n+                        }\n+                    }\n+                    OlapTable olapTable = (OlapTable) table;\n+                    for (String col : indexDef.getColumns()) {\n+                        for (Column c : olapTable.getFullSchema()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MDk5OQ=="}, "originalCommit": {"oid": "1e27f0c177c0380168549d929a0ee3439c424ec8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODY5MDI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/IndexDef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzowOToxMlrOFoge4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzoyNjoyNFrOFogsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTU1Mw==", "bodyText": "althrough the implemention supports bf for replace non-key column\nWhat's meaning of bf?  This comment seems conflict with bitmap \u7d22\u5f15\u80fd\u591f\u5e94\u7528\u5728 Duplicate\u6570\u636e\u6a21\u578b\u7684\u6240\u6709\u5217\u548cAggregate, Uniq\u6a21\u578b\u7684key\u5217\u4e0a\u548cREPLACE \u7684value\u5217\u4e0a\u3002", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r378019553", "createdAt": "2020-02-12T03:09:12Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/IndexDef.java", "diffHunk": "@@ -118,4 +121,32 @@ public String getComment() {\n     public enum IndexType {\n         BITMAP,\n     }\n+    public void checkColumn(Column column) throws AnalysisException {\n+        if (indexType == IndexType.BITMAP) {\n+            String indexColName = column.getName();\n+            PrimitiveType colType = column.getDataType();\n+            if (!(colType.isDateType() || colType.isDecimalType() || colType.isFixedPointType() ||\n+                          colType.isStringType() || colType == PrimitiveType.BOOLEAN)) {\n+                throw new AnalysisException(colType + \" is not supported in bitmap index. \"\n+                        + \"invalid column: \" + indexColName);\n+            } else if (!(column.isKey()\n+                                 || column.getAggregationType() == AggregateType.NONE\n+                                 || column.getAggregationType() == AggregateType.REPLACE\n+                                 || column.getAggregationType() == AggregateType.REPLACE_IF_NOT_NULL)){\n+                // althrough the implemention supports bf for replace non-key column,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79f619002c7bdef79ecfbea97d57ad529f246095"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMzAyMw==", "bodyText": "its a typo  i will remove it", "url": "https://github.com/apache/incubator-doris/pull/2883#discussion_r378023023", "createdAt": "2020-02-12T03:26:24Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/IndexDef.java", "diffHunk": "@@ -118,4 +121,32 @@ public String getComment() {\n     public enum IndexType {\n         BITMAP,\n     }\n+    public void checkColumn(Column column) throws AnalysisException {\n+        if (indexType == IndexType.BITMAP) {\n+            String indexColName = column.getName();\n+            PrimitiveType colType = column.getDataType();\n+            if (!(colType.isDateType() || colType.isDecimalType() || colType.isFixedPointType() ||\n+                          colType.isStringType() || colType == PrimitiveType.BOOLEAN)) {\n+                throw new AnalysisException(colType + \" is not supported in bitmap index. \"\n+                        + \"invalid column: \" + indexColName);\n+            } else if (!(column.isKey()\n+                                 || column.getAggregationType() == AggregateType.NONE\n+                                 || column.getAggregationType() == AggregateType.REPLACE\n+                                 || column.getAggregationType() == AggregateType.REPLACE_IF_NOT_NULL)){\n+                // althrough the implemention supports bf for replace non-key column,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTU1Mw=="}, "originalCommit": {"oid": "79f619002c7bdef79ecfbea97d57ad529f246095"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2226, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}