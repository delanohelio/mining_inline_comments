{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjAwNjQ3", "number": 3277, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDowNDo1OFrODv0xXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyNjo1MFrODv0-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDc0MjcxOnYy", "diffSide": "RIGHT", "path": "be/src/exec/es/es_predicate.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDowNDo1OFrOGCeP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDowNDo1OFrOGCeP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NTkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ExtCompAndPredicates(std::vector<EsPredicate*> conjuncts) : ExtPredicate(TExprNodeType::COMPOUND_PRED), op(TExprOpcode::COMPOUND_AND), conjuncts(conjuncts) {\n          \n          \n            \n                ExtCompAndPredicates(const std::vector<EsPredicate*>& conjuncts) : ExtPredicate(TExprNodeType::COMPOUND_PRED), op(TExprOpcode::COMPOUND_AND), conjuncts(conjuncts) {", "url": "https://github.com/apache/incubator-doris/pull/3277#discussion_r405245915", "createdAt": "2020-04-08T04:04:58Z", "author": {"login": "imay"}, "path": "be/src/exec/es/es_predicate.h", "diffHunk": "@@ -85,6 +86,15 @@ struct ExtPredicate {\n     TExprNodeType::type node_type;\n };\n \n+// this used for placeholder for compound_and\n+struct ExtCompAndPredicates : public ExtPredicate {\n+    ExtCompAndPredicates(std::vector<EsPredicate*> conjuncts) : ExtPredicate(TExprNodeType::COMPOUND_PRED), op(TExprOpcode::COMPOUND_AND), conjuncts(conjuncts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267bc41bd21636fb15845f5288730fe01ec8f46f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDc0ODUzOnYy", "diffSide": "RIGHT", "path": "be/src/exec/es/es_predicate.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDowOTowMVrOGCeTXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDowOTowMVrOGCeTXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NjgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (TExprOpcode::COMPOUND_AND == conjunct->op()) {\n          \n          \n            \n                        if (conjunct->op() == TExprOpcode::COMPOUND_AND) {", "url": "https://github.com/apache/incubator-doris/pull/3277#discussion_r405246814", "createdAt": "2020-04-08T04:09:01Z", "author": {"login": "imay"}, "path": "be/src/exec/es/es_predicate.cpp", "diffHunk": "@@ -384,10 +390,27 @@ Status EsPredicate::build_disjuncts_list(const Expr* conjunct) {\n         _disjuncts.push_back(predicate);\n \n         return Status::OK();\n-    } \n-    \n+    }\n     if (TExprNodeType::COMPOUND_PRED == conjunct->node_type()) {\n         if (TExprOpcode::COMPOUND_OR != conjunct->op()) {\n+            // processe COMPOUND_AND, such as:\n+            // k = 1 or (k1 = 7 and (k2 in (6,7) or k3 = 12))\n+            // k1 = 7 and (k2 in (6,7) or k3 = 12) is compound pred, we should rebuild this sub tree\n+            if (TExprOpcode::COMPOUND_AND == conjunct->op()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267bc41bd21636fb15845f5288730fe01ec8f46f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDc2NzcwOnYy", "diffSide": "RIGHT", "path": "be/src/exec/es/es_query_builder.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyMTo1NFrOGCeeug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyMTo1NFrOGCeeug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTcyMg==", "bodyText": "better to add a break clause here.", "url": "https://github.com/apache/incubator-doris/pull/3277#discussion_r405249722", "createdAt": "2020-04-08T04:21:54Z", "author": {"login": "imay"}, "path": "be/src/exec/es/es_query_builder.cpp", "diffHunk": "@@ -359,6 +370,17 @@ void BooleanQueryBuilder::validate(const std::vector<EsPredicate*>& espredicates\n                     }\n                     break;\n                 }\n+                case TExprNodeType::COMPOUND_PRED: {\n+                    ExtCompAndPredicates* compound_predicates = (ExtCompAndPredicates *)predicate;\n+                    std::vector<bool> list;\n+                    validate(compound_predicates->conjuncts, &list);\n+                    for(int i = list.size() - 1; i >= 0; i--) {\n+                        if(!list[i]) {\n+                            flag = false;\n+                            break;\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267bc41bd21636fb15845f5288730fe01ec8f46f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDc3NTYzOnYy", "diffSide": "RIGHT", "path": "be/src/exec/es/es_predicate.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyNjo1MFrOGCejVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyNjo1MFrOGCejVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1MDkwMg==", "bodyText": "There are three possibilities here. AND, OR, NOT, For me, NOT can be supported too.\nAnd you can do as follow\nif (conjunct->op() == AND)\nelse if (conjunct->op() == NOT)\n\nDCHECK(op() == OR)\n// handle OR", "url": "https://github.com/apache/incubator-doris/pull/3277#discussion_r405250902", "createdAt": "2020-04-08T04:26:50Z", "author": {"login": "imay"}, "path": "be/src/exec/es/es_predicate.cpp", "diffHunk": "@@ -384,10 +390,27 @@ Status EsPredicate::build_disjuncts_list(const Expr* conjunct) {\n         _disjuncts.push_back(predicate);\n \n         return Status::OK();\n-    } \n-    \n+    }\n     if (TExprNodeType::COMPOUND_PRED == conjunct->node_type()) {\n         if (TExprOpcode::COMPOUND_OR != conjunct->op()) {\n+            // processe COMPOUND_AND, such as:\n+            // k = 1 or (k1 = 7 and (k2 in (6,7) or k3 = 12))\n+            // k1 = 7 and (k2 in (6,7) or k3 = 12) is compound pred, we should rebuild this sub tree\n+            if (TExprOpcode::COMPOUND_AND == conjunct->op()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267bc41bd21636fb15845f5288730fe01ec8f46f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}