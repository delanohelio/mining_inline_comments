{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODA2ODY2", "number": 3135, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNjo0MVrODov5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMjozNVrODqVQeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU0Mjk4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNjo0MVrOF3fKEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNjo0MVrOF3fKEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNjQ4MA==", "bodyText": "Add comment for this member~", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393726480", "createdAt": "2020-03-17T14:36:41Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -102,6 +103,8 @@\n     // Set in analyze().\n     protected String sqlString_;\n \n+    private boolean subqueryInCase = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU0OTg3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozODoyM1rOF3fOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozODoyM1rOF3fOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNzY3NQ==", "bodyText": "Add comments for this method.", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393727675", "createdAt": "2020-03-17T14:38:23Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU2MjEwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MTowOVrOF3fWvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MTowOVrOF3fWvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                       expr = new SlotRef(new TableName(null, alias), colAlias);\n          \n          \n            \n                        expr = new SlotRef(new TableName(null, alias), colAlias);", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393729725", "createdAt": "2020-03-17T14:41:09Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt) ) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt)((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            String alias = getTableAliasGenerator().getNextAlias();\n+            String colAlias = getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));\n+            try {\n+                inlineViewRef.analyze(analyzer);\n+            } catch (UserException e) {\n+                throw new AnalysisException(e.getMessage());\n+            }\n+            fromClause_.add(inlineViewRef);\n+           expr = new SlotRef(new TableName(null, alias), colAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU4MzQ4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjoxOFrOF3fkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzoyMzo0NlrOF31IUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzMyNQ==", "bodyText": "How do you make sure the subquery is like select sum(k1) from tbl, not select k1 from tbl?", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393733325", "createdAt": "2020-03-17T14:46:18Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt) ) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt)((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ4MQ==", "bodyText": "this expr is validate by the predicate of case when clause", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394086481", "createdAt": "2020-03-18T03:23:46Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt) ) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt)((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzMyNQ=="}, "originalCommit": {"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njk3NzgwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDowMToyMVrOF4fZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDowMToyMVrOF4fZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTAwNA==", "bodyText": "The entire query should be reanalyzed if there is subquery is rewritten. So maybe this method should be move to StmtRewriter.", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779004", "createdAt": "2020-03-19T04:01:21Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1246,6 +1228,68 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n         }\n     }\n \n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93074c980c66d9964baade9aafa127c19f78ecb9"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njk3ODYxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDowMjowNVrOF4fZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDowMjowNVrOF4fZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTEyNQ==", "bodyText": "The subquery should be reset before it is reanalyzed.", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779125", "createdAt": "2020-03-19T04:02:05Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1246,6 +1228,68 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n         }\n     }\n \n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            String alias = getTableAliasGenerator().getNextAlias();\n+            String colAlias = getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93074c980c66d9964baade9aafa127c19f78ecb9"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njk3OTEzOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDowMjozMlrOF4faRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNjo0MDo1OFrOF4hv9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTIwNA==", "bodyText": "How about the case expr in the where predicate?", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779204", "createdAt": "2020-03-19T04:02:32Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -341,7 +345,11 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                 // of expr child and depth limits (toColumn() label may call toSql()).\n                 item.getExpr().analyze(analyzer);\n                 if (item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n-                    throw new AnalysisException(\"Subquery is not supported in the select list.\");\n+                    if (item.getExpr() instanceof CaseExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93074c980c66d9964baade9aafa127c19f78ecb9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNzUyNg==", "bodyText": "this is not allowed by in predicate or other predicate", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394817526", "createdAt": "2020-03-19T06:40:58Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -341,7 +345,11 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                 // of expr child and depth limits (toColumn() label may call toSql()).\n                 item.getExpr().analyze(analyzer);\n                 if (item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n-                    throw new AnalysisException(\"Subquery is not supported in the select list.\");\n+                    if (item.getExpr() instanceof CaseExpr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTIwNA=="}, "originalCommit": {"oid": "93074c980c66d9964baade9aafa127c19f78ecb9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ4NDgyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNzoxNlrOF4kQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNzoxNlrOF4kQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODcwNA==", "bodyText": "Reorder your import order in your IDE:\norg.apache.doris\ncom\norg\njava\njavax", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394858704", "createdAt": "2020-03-19T08:27:16Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -17,6 +17,15 @@\n \n package org.apache.doris.analysis;\n \n+import com.google.common.base.Preconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744d4531c9b612828aa423fdda00d926658a4bb1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkwNDIzOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0MTo0M1rOF5GUjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0MTo0M1rOF5GUjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjcxNw==", "bodyText": "If the item of select list is '*'", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395416717", "createdAt": "2020-03-20T02:41:43Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkwNzYxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0Mzo0N1rOF5GWWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0Mzo0N1rOF5GWWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new AnalysisException(\"only support scala select subquery in case statement.\");\n          \n          \n            \n                            throw new AnalysisException(\"Only support one result column of subquery in case statement.\");", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417179", "createdAt": "2020-03-20T02:43:47Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkwODY0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0NDo1M1rOF5GXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyNTozNVrOF5845Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzM1MA==", "bodyText": "The correlated subquery should be forbidden.", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417350", "createdAt": "2020-03-20T02:44:53Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDc1Nw==", "bodyText": "correlated subquery  is supported", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r396310757", "createdAt": "2020-03-23T09:25:35Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzM1MA=="}, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkxMTQwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjo0NzowNVrOF5GYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzoxMTozMlrOF5Go4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzc1Mw==", "bodyText": "The table name could be fetch from inline view ref", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417753", "createdAt": "2020-03-20T02:47:05Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            subquery.reset();\n+            String alias = stmt.getTableAliasGenerator().getNextAlias();\n+            String colAlias = stmt.getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));\n+            try {\n+                inlineViewRef.analyze(analyzer);\n+            } catch (UserException e) {\n+                throw new AnalysisException(e.getMessage());\n+            }\n+            stmt.fromClause_.add(inlineViewRef);\n+            expr = new SlotRef(new TableName(null, alias), colAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTkyMA==", "bodyText": "first parameter is database name", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395421920", "createdAt": "2020-03-20T03:11:32Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            subquery.reset();\n+            String alias = stmt.getTableAliasGenerator().getNextAlias();\n+            String colAlias = stmt.getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));\n+            try {\n+                inlineViewRef.analyze(analyzer);\n+            } catch (UserException e) {\n+                throw new AnalysisException(e.getMessage());\n+            }\n+            stmt.fromClause_.add(inlineViewRef);\n+            expr = new SlotRef(new TableName(null, alias), colAlias);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzc1Mw=="}, "originalCommit": {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzE1MDY0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMjozNVrOF6AvAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMToxMjozNVrOF6AvAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Mzc2Mw==", "bodyText": "The meaning of these two lines is not clear\u3002", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r396373763", "createdAt": "2020-03-23T11:12:35Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "diffHunk": "@@ -83,7 +84,18 @@ public void reset() {\n     public void rewriteExprs(ExprRewriter rewriter, Analyzer analyzer)\n             throws AnalysisException {\n         for (SelectListItem item : items) {\n-            if (item.isStar()) continue;\n+            if (item.isStar()) {\n+                continue;\n+            }\n+            // when select list contain case when, for now subquery is supported in case-when\n+            // (or more subquery is supported in future) so subquery all need to rewrite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfd0bed0162c897ea1e91b300c73e637db2366e"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1962, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}