{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5Mjg0NTE5", "number": 4984, "title": "[Optimize]Take all scan nodes of one sql into consideration when select host for a tablet", "bodyText": "Proposed changes\nCurrently when a scan node scans many tablets, Doris will assure it load balance when choosing which replica for scan task to be executed. But it does not take other scan nodes into consideration to implement a global load balance. This patch tries to make all tables of all scan nodes to be load balance.\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n[] New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n[] Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n[] I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at dev@doris.apache.org by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-11-30T05:18:04Z", "url": "https://github.com/apache/incubator-doris/pull/4984", "merged": true, "mergeCommit": {"oid": "d692764934bf3a073112a9180236d72e94ce181a"}, "closed": true, "closedAt": "2021-01-15T03:18:58Z", "author": {"login": "xinghuayu007"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-gnhXgH2gAyNTI5Mjg0NTE5OjFhMTVmNTMzMDk4ZWVjNjcwODEyMTAwNGVmODM1ZDExMWRjMzc0ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwP2Z4AFqTU2ODc4MjM1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1a15f533098eec6708121004ef835d111dc374f3", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/1a15f533098eec6708121004ef835d111dc374f3", "committedDate": "2020-08-13T14:09:31Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d072b9a65d555e7e710cb5140435e00a8ff7bdc", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/7d072b9a65d555e7e710cb5140435e00a8ff7bdc", "committedDate": "2020-08-14T01:37:05Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391158f52190755b5fc621c31bf703835c0a7b3b", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/391158f52190755b5fc621c31bf703835c0a7b3b", "committedDate": "2020-08-14T02:11:25Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eb52e1e5742d2e9f7aae5ac8da81545ae5f3df2", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/5eb52e1e5742d2e9f7aae5ac8da81545ae5f3df2", "committedDate": "2020-08-14T03:58:30Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a79ea91cf36eec54a4ca54018b92a6fa4baa98cc", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/a79ea91cf36eec54a4ca54018b92a6fa4baa98cc", "committedDate": "2020-08-18T02:31:52Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f841f29fa4ee19773d6c5922465194a2887cf6", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/86f841f29fa4ee19773d6c5922465194a2887cf6", "committedDate": "2020-08-18T03:56:14Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade1afa75c94a178a6801ba1324acf25ad8b16fe", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/ade1afa75c94a178a6801ba1324acf25ad8b16fe", "committedDate": "2020-08-18T03:59:59Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d95a491115064c9753694ad4d45c2f72b8d2645", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/1d95a491115064c9753694ad4d45c2f72b8d2645", "committedDate": "2020-08-18T08:01:45Z", "message": "udf: replace function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "433eb87f02cfa6740e80b0e4157d916ab5aca400", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/433eb87f02cfa6740e80b0e4157d916ab5aca400", "committedDate": "2020-08-24T02:03:34Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62d239792b174fbc56ab311f0bc5337de971d96", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/c62d239792b174fbc56ab311f0bc5337de971d96", "committedDate": "2020-08-25T03:17:32Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8db8cc4e7e72ebad4491a2cd48c758a435ba5c", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/0a8db8cc4e7e72ebad4491a2cd48c758a435ba5c", "committedDate": "2020-08-25T08:21:34Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d3f863c8556463c8dea903abdc4d21bf1eb19b", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/02d3f863c8556463c8dea903abdc4d21bf1eb19b", "committedDate": "2020-09-01T01:25:42Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41da0ba0109414c47239f3fb926da48540059018", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/41da0ba0109414c47239f3fb926da48540059018", "committedDate": "2020-09-08T08:25:12Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de4e523b505f0d628a16199b88d4bb5a0419fef6", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/de4e523b505f0d628a16199b88d4bb5a0419fef6", "committedDate": "2020-09-11T02:42:20Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a863b0dfc7f909bf1ca8ad176ef8f82b1346924f", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/a863b0dfc7f909bf1ca8ad176ef8f82b1346924f", "committedDate": "2020-09-17T09:37:21Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024c422b74829efe4c4b715a014517c7eee1a80a", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/024c422b74829efe4c4b715a014517c7eee1a80a", "committedDate": "2020-09-22T09:15:31Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1656c7a8bdc137261505d8b384dddb1c9bf5a72", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/e1656c7a8bdc137261505d8b384dddb1c9bf5a72", "committedDate": "2020-09-23T11:48:49Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837e037057936e933fd79cbbdb432047be2bba5e", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/837e037057936e933fd79cbbdb432047be2bba5e", "committedDate": "2020-09-27T06:37:32Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a36d3e78136a3fefb62f2513d20773479904cb6b", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/a36d3e78136a3fefb62f2513d20773479904cb6b", "committedDate": "2020-10-17T10:32:25Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43cfa2b2ca752118c43a0212cf074f09cb311a7a", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/43cfa2b2ca752118c43a0212cf074f09cb311a7a", "committedDate": "2020-10-23T14:34:47Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641efb587d2e9ac9a9e9771e7648a299a66f3992", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/641efb587d2e9ac9a9e9771e7648a299a66f3992", "committedDate": "2020-10-24T12:49:28Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5066131b9017910473554dfa298b16224c1977da", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/5066131b9017910473554dfa298b16224c1977da", "committedDate": "2020-10-26T11:49:19Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde044ba251c85b7f0a8a388af71331553208a05", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/dde044ba251c85b7f0a8a388af71331553208a05", "committedDate": "2020-10-27T08:38:35Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f8c8234c052720bc65e316a305a3297318bd481", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/8f8c8234c052720bc65e316a305a3297318bd481", "committedDate": "2020-10-28T07:25:25Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7704ba989ab5b903e407f7b02c5a9b6c03b4588", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/f7704ba989ab5b903e407f7b02c5a9b6c03b4588", "committedDate": "2020-11-01T13:04:30Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8726e7aefed64e62b1bbf6f56278274f11c8b0fa", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/8726e7aefed64e62b1bbf6f56278274f11c8b0fa", "committedDate": "2020-11-04T09:31:42Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dfc785c8a97549fb9c38b6dd8ea938d1bb50db4", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/4dfc785c8a97549fb9c38b6dd8ea938d1bb50db4", "committedDate": "2020-11-06T07:45:49Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4bd91c17af4b4954b2715c5fd93cf86b7351085", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/d4bd91c17af4b4954b2715c5fd93cf86b7351085", "committedDate": "2020-11-11T02:13:02Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb8ddf66fb0ffbeaab0e882a5d33483180da351", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/2eb8ddf66fb0ffbeaab0e882a5d33483180da351", "committedDate": "2020-11-12T02:49:53Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aa7afc57d6cbeb2013a6e8957f214f7abc93e7f", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/5aa7afc57d6cbeb2013a6e8957f214f7abc93e7f", "committedDate": "2020-11-14T11:19:03Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce251b26af3feb6aa49e5e31bee887b0441e8584", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/ce251b26af3feb6aa49e5e31bee887b0441e8584", "committedDate": "2020-11-17T03:43:59Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c58994a066d51dcaf84657d04a2d6281bf8371", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/04c58994a066d51dcaf84657d04a2d6281bf8371", "committedDate": "2020-11-18T10:41:11Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e614cf89862a62ccadf96bcc9f94034ebc3a214", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/2e614cf89862a62ccadf96bcc9f94034ebc3a214", "committedDate": "2020-11-24T08:52:28Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede2e000c0fe30022d1dd417f08deb2a4e1c95da", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/ede2e000c0fe30022d1dd417f08deb2a4e1c95da", "committedDate": "2020-11-25T03:23:03Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aed91fed8b786d2e9860fc5ca0fad95b6810d75", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/0aed91fed8b786d2e9860fc5ca0fad95b6810d75", "committedDate": "2020-11-26T09:50:24Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd28b736375ece74d76527fa8319c4264356427c", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/bd28b736375ece74d76527fa8319c4264356427c", "committedDate": "2020-11-30T02:30:06Z", "message": "Merge remote-tracking branch 'upstream/master' into str_replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca862dbb2126a8fbebc49215510896da3556613", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/dca862dbb2126a8fbebc49215510896da3556613", "committedDate": "2020-11-30T04:59:28Z", "message": "global optimize of scan node selecting hosts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/8c5af321a9b512717d57b992d24c33e628a00012", "committedDate": "2021-01-11T03:57:38Z", "message": "global load balance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MjQwMTI1", "url": "https://github.com/apache/incubator-doris/pull/4984#pullrequestreview-565240125", "createdAt": "2021-01-11T10:48:03Z", "commit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3ODE0Njg4", "url": "https://github.com/apache/incubator-doris/pull/4984#pullrequestreview-567814688", "createdAt": "2021-01-14T02:49:27Z", "commit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjo0OToyN1rOITNMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjo0OTo0NVrOITNNEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDExOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {\n          \n          \n            \n                    for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry : assignment.entrySet()) {", "url": "https://github.com/apache/incubator-doris/pull/4984#discussion_r557010119", "createdAt": "2021-01-14T02:49:27Z", "author": {"login": "caiconghui"}, "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "diffHunk": "@@ -595,5 +597,137 @@ public void testBucketShuffleWithUnaliveBackend()  {\n         Assert.assertTrue(backendIds.get(1) == 1);\n         Assert.assertTrue(counts.get(1) == 1);\n     }\n+\n+    @Test\n+    public void testComputeScanRangeAssignment()  {\n+        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n+\n+        //TScanRangeLocations\n+        TScanRangeLocations tScanRangeLocations = new TScanRangeLocations();\n+        TScanRangeLocation tScanRangeLocation0 = new TScanRangeLocation();\n+        tScanRangeLocation0.backend_id = 0;\n+        tScanRangeLocation0.server = new TNetworkAddress(\"0.0.0.0\", 9050);\n+        TScanRangeLocation tScanRangeLocation1 = new TScanRangeLocation();\n+        tScanRangeLocation1.backend_id = 1;\n+        tScanRangeLocation1.server = new TNetworkAddress(\"0.0.0.1\", 9050);\n+        TScanRangeLocation tScanRangeLocation2 = new TScanRangeLocation();\n+        tScanRangeLocation2.backend_id = 2;\n+        tScanRangeLocation2.server = new TNetworkAddress(\"0.0.0.2\", 9050);\n+        tScanRangeLocations.locations = new ArrayList<>();\n+        tScanRangeLocations.locations.add(tScanRangeLocation0);\n+        tScanRangeLocations.locations.add(tScanRangeLocation1);\n+        tScanRangeLocations.locations.add(tScanRangeLocation2);\n+\n+        //scanNode1\n+        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n+        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable, \"defaultDistributionInfo\", hashDistributionInfo);\n+        tupleDescriptor.setTable(olapTable);\n+        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(1), tupleDescriptor, \"test\");\n+        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode.setFragment(fragment);\n+        List<TScanRangeLocations> locations = new ArrayList<>();\n+        locations.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode, \"result\", locations);\n+\n+        //scanNode2\n+        PlanFragmentId planFragmentId2 = new PlanFragmentId(2);\n+        TupleDescriptor tupleDescriptor2 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable2 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo2 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable2, \"defaultDistributionInfo\", hashDistributionInfo2);\n+        tupleDescriptor2.setTable(olapTable2);\n+        OlapScanNode olapScanNode2 = new OlapScanNode(new PlanNodeId(2), tupleDescriptor2, \"test2\");\n+        PlanFragment fragment2 = new PlanFragment(planFragmentId2, olapScanNode2,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode2.setFragment(fragment2);\n+        List<TScanRangeLocations> locations2 = new ArrayList<>();\n+        locations2.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode2, \"result\", locations2);\n+\n+        //scanNode3\n+        PlanFragmentId planFragmentId3 = new PlanFragmentId(3);\n+        TupleDescriptor tupleDescriptor3 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable3 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo3 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable3, \"defaultDistributionInfo\", hashDistributionInfo3);\n+        tupleDescriptor3.setTable(olapTable3);\n+        OlapScanNode olapScanNode3 = new OlapScanNode(new PlanNodeId(3), tupleDescriptor3, \"test3\");\n+        PlanFragment fragment3 = new PlanFragment(planFragmentId3, olapScanNode3,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode3.setFragment(fragment3);\n+        List<TScanRangeLocations> locations3 = new ArrayList<>();\n+        locations3.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode3, \"result\", locations3);\n+\n+        //scan nodes\n+        List<ScanNode> scanNodes = new ArrayList<>();\n+        scanNodes.add(olapScanNode);\n+        scanNodes.add(olapScanNode2);\n+        scanNodes.add(olapScanNode3);\n+        Deencapsulation.setField(coordinator, \"scanNodes\", scanNodes);\n+\n+        //fragmentIdToScanNodeIds\n+        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = Maps.newHashMap();\n+        Set<Integer> ids1 = new HashSet<>();\n+        ids1.add(1);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids1);\n+        Set<Integer> ids2 = new HashSet<>();\n+        ids1.add(2);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids2);\n+        Set<Integer> ids3 = new HashSet<>();\n+        ids1.add(3);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids3);\n+        Deencapsulation.setField(coordinator,\"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n+\n+        //fragmentExecParamsMap\n+        Map<PlanFragmentId, FragmentExecParams> fragmentExecParamsMap = Maps.newHashMap();\n+        fragmentExecParamsMap.put(planFragmentId, new FragmentExecParams(fragment));\n+        fragmentExecParamsMap.put(planFragmentId2, new FragmentExecParams(fragment2));\n+        fragmentExecParamsMap.put(planFragmentId3, new FragmentExecParams(fragment3));\n+        Deencapsulation.setField(coordinator,\"fragmentExecParamsMap\", fragmentExecParamsMap);\n+\n+        //bucketShuffleJoinController\n+        BucketShuffleJoinController bucketShuffleJoinController = new BucketShuffleJoinController(fragmentIdToScanNodeIds);\n+        // init all backend\n+        Backend backend0 = new Backend(0, \"0.0.0.0\", 9060);\n+        backend0.setAlive(true);\n+        backend0.setBePort(9050);\n+        Backend backend1 = new Backend(1, \"0.0.0.1\", 9060);\n+        backend1.setAlive(true);\n+        backend1.setBePort(9050);\n+        Backend backend2 = new Backend(2, \"0.0.0.2\", 9060);\n+        backend2.setAlive(true);\n+        backend2.setBePort(9050);\n+\n+        ImmutableMap<Long, Backend> idToBackend =\n+                new ImmutableMap.Builder<Long, Backend>().\n+                        put(0l, backend0).\n+                        put(1l, backend1).\n+                        put(2l, backend2).build();\n+        Deencapsulation.setField(coordinator, \"idToBackend\", idToBackend);\n+\n+        Deencapsulation.invoke(coordinator, \"computeScanRangeAssignment\");\n+        FragmentScanRangeAssignment assignment = fragmentExecParamsMap.get(fragment.getFragmentId()).scanRangeAssignment;\n+        for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDE5NA==", "bodyText": "and the same as following", "url": "https://github.com/apache/incubator-doris/pull/4984#discussion_r557010194", "createdAt": "2021-01-14T02:49:45Z", "author": {"login": "caiconghui"}, "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "diffHunk": "@@ -595,5 +597,137 @@ public void testBucketShuffleWithUnaliveBackend()  {\n         Assert.assertTrue(backendIds.get(1) == 1);\n         Assert.assertTrue(counts.get(1) == 1);\n     }\n+\n+    @Test\n+    public void testComputeScanRangeAssignment()  {\n+        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n+\n+        //TScanRangeLocations\n+        TScanRangeLocations tScanRangeLocations = new TScanRangeLocations();\n+        TScanRangeLocation tScanRangeLocation0 = new TScanRangeLocation();\n+        tScanRangeLocation0.backend_id = 0;\n+        tScanRangeLocation0.server = new TNetworkAddress(\"0.0.0.0\", 9050);\n+        TScanRangeLocation tScanRangeLocation1 = new TScanRangeLocation();\n+        tScanRangeLocation1.backend_id = 1;\n+        tScanRangeLocation1.server = new TNetworkAddress(\"0.0.0.1\", 9050);\n+        TScanRangeLocation tScanRangeLocation2 = new TScanRangeLocation();\n+        tScanRangeLocation2.backend_id = 2;\n+        tScanRangeLocation2.server = new TNetworkAddress(\"0.0.0.2\", 9050);\n+        tScanRangeLocations.locations = new ArrayList<>();\n+        tScanRangeLocations.locations.add(tScanRangeLocation0);\n+        tScanRangeLocations.locations.add(tScanRangeLocation1);\n+        tScanRangeLocations.locations.add(tScanRangeLocation2);\n+\n+        //scanNode1\n+        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n+        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable, \"defaultDistributionInfo\", hashDistributionInfo);\n+        tupleDescriptor.setTable(olapTable);\n+        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(1), tupleDescriptor, \"test\");\n+        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode.setFragment(fragment);\n+        List<TScanRangeLocations> locations = new ArrayList<>();\n+        locations.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode, \"result\", locations);\n+\n+        //scanNode2\n+        PlanFragmentId planFragmentId2 = new PlanFragmentId(2);\n+        TupleDescriptor tupleDescriptor2 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable2 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo2 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable2, \"defaultDistributionInfo\", hashDistributionInfo2);\n+        tupleDescriptor2.setTable(olapTable2);\n+        OlapScanNode olapScanNode2 = new OlapScanNode(new PlanNodeId(2), tupleDescriptor2, \"test2\");\n+        PlanFragment fragment2 = new PlanFragment(planFragmentId2, olapScanNode2,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode2.setFragment(fragment2);\n+        List<TScanRangeLocations> locations2 = new ArrayList<>();\n+        locations2.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode2, \"result\", locations2);\n+\n+        //scanNode3\n+        PlanFragmentId planFragmentId3 = new PlanFragmentId(3);\n+        TupleDescriptor tupleDescriptor3 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable3 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo3 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable3, \"defaultDistributionInfo\", hashDistributionInfo3);\n+        tupleDescriptor3.setTable(olapTable3);\n+        OlapScanNode olapScanNode3 = new OlapScanNode(new PlanNodeId(3), tupleDescriptor3, \"test3\");\n+        PlanFragment fragment3 = new PlanFragment(planFragmentId3, olapScanNode3,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode3.setFragment(fragment3);\n+        List<TScanRangeLocations> locations3 = new ArrayList<>();\n+        locations3.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode3, \"result\", locations3);\n+\n+        //scan nodes\n+        List<ScanNode> scanNodes = new ArrayList<>();\n+        scanNodes.add(olapScanNode);\n+        scanNodes.add(olapScanNode2);\n+        scanNodes.add(olapScanNode3);\n+        Deencapsulation.setField(coordinator, \"scanNodes\", scanNodes);\n+\n+        //fragmentIdToScanNodeIds\n+        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = Maps.newHashMap();\n+        Set<Integer> ids1 = new HashSet<>();\n+        ids1.add(1);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids1);\n+        Set<Integer> ids2 = new HashSet<>();\n+        ids1.add(2);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids2);\n+        Set<Integer> ids3 = new HashSet<>();\n+        ids1.add(3);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids3);\n+        Deencapsulation.setField(coordinator,\"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n+\n+        //fragmentExecParamsMap\n+        Map<PlanFragmentId, FragmentExecParams> fragmentExecParamsMap = Maps.newHashMap();\n+        fragmentExecParamsMap.put(planFragmentId, new FragmentExecParams(fragment));\n+        fragmentExecParamsMap.put(planFragmentId2, new FragmentExecParams(fragment2));\n+        fragmentExecParamsMap.put(planFragmentId3, new FragmentExecParams(fragment3));\n+        Deencapsulation.setField(coordinator,\"fragmentExecParamsMap\", fragmentExecParamsMap);\n+\n+        //bucketShuffleJoinController\n+        BucketShuffleJoinController bucketShuffleJoinController = new BucketShuffleJoinController(fragmentIdToScanNodeIds);\n+        // init all backend\n+        Backend backend0 = new Backend(0, \"0.0.0.0\", 9060);\n+        backend0.setAlive(true);\n+        backend0.setBePort(9050);\n+        Backend backend1 = new Backend(1, \"0.0.0.1\", 9060);\n+        backend1.setAlive(true);\n+        backend1.setBePort(9050);\n+        Backend backend2 = new Backend(2, \"0.0.0.2\", 9060);\n+        backend2.setAlive(true);\n+        backend2.setBePort(9050);\n+\n+        ImmutableMap<Long, Backend> idToBackend =\n+                new ImmutableMap.Builder<Long, Backend>().\n+                        put(0l, backend0).\n+                        put(1l, backend1).\n+                        put(2l, backend2).build();\n+        Deencapsulation.setField(coordinator, \"idToBackend\", idToBackend);\n+\n+        Deencapsulation.invoke(coordinator, \"computeScanRangeAssignment\");\n+        FragmentScanRangeAssignment assignment = fragmentExecParamsMap.get(fragment.getFragmentId()).scanRangeAssignment;\n+        for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDExOQ=="}, "originalCommit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b05d0058290cfa12cd1945ba8979cca090e9fa", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/01b05d0058290cfa12cd1945ba8979cca090e9fa", "committedDate": "2021-01-14T09:01:18Z", "message": "format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NzgyMzU2", "url": "https://github.com/apache/incubator-doris/pull/4984#pullrequestreview-568782356", "createdAt": "2021-01-15T02:53:36Z", "commit": {"oid": "01b05d0058290cfa12cd1945ba8979cca090e9fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}