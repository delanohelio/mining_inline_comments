{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODIzMzMw", "number": 4670, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzoyODozOVrOEntOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzo0ODoxMFrOEnuRSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDcwOTkxOnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzoyODozOVrOHYdWUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjoyMDo1MlrOHYslUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwODcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CONF_mBool(enable_over_sold, \"true\");\n          \n          \n            \n                CONF_mBool(enable_compaction_permit_over_sold, \"true\");", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495408723", "createdAt": "2020-09-26T03:28:39Z", "author": {"login": "morningman"}, "path": "be/src/common/config.h", "diffHunk": "@@ -310,13 +306,25 @@ namespace config {\n     // if compaction of a tablet failed, this tablet should not be chosen to\n     // compaction until this interval passes.\n     CONF_mInt64(min_compaction_failure_interval_sec, \"600\"); // 10 min\n-    // Too many compaction tasks may run out of memory.\n-    // This config is to limit the max concurrency of running compaction tasks.\n-    // -1 means no limit, and the max concurrency will be:\n-    //      C = (cumulative_compaction_num_threads_per_disk + base_compaction_num_threads_per_disk) * dir_num\n-    // set it to larger than C will be set to equal to C.\n-    // This config can be set to 0, which means to forbid any compaction, for some special cases.\n-    CONF_Int32(max_compaction_concurrency, \"-1\");\n+\n+    // This config can be set to limit thread number in compaction thread pool.\n+    CONF_mInt32(min_compaction_threads, \"10\");\n+    CONF_mInt32(max_compaction_threads, \"10\");\n+\n+    // The upper limit of \"permits\" held by all compaction tasks. This config can be set to limit memory consumption for compaction.\n+    CONF_mInt64(total_permits_for_compaction_score, \"10000\")\n+\n+    // Whether compaction task is allowed to start when compaction score of current tablet is out of upper limit.\n+    CONF_mBool(enable_over_sold, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1ODMyMg==", "bodyText": "OK !", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495658322", "createdAt": "2020-09-28T02:20:52Z", "author": {"login": "weizuo93"}, "path": "be/src/common/config.h", "diffHunk": "@@ -310,13 +306,25 @@ namespace config {\n     // if compaction of a tablet failed, this tablet should not be chosen to\n     // compaction until this interval passes.\n     CONF_mInt64(min_compaction_failure_interval_sec, \"600\"); // 10 min\n-    // Too many compaction tasks may run out of memory.\n-    // This config is to limit the max concurrency of running compaction tasks.\n-    // -1 means no limit, and the max concurrency will be:\n-    //      C = (cumulative_compaction_num_threads_per_disk + base_compaction_num_threads_per_disk) * dir_num\n-    // set it to larger than C will be set to equal to C.\n-    // This config can be set to 0, which means to forbid any compaction, for some special cases.\n-    CONF_Int32(max_compaction_concurrency, \"-1\");\n+\n+    // This config can be set to limit thread number in compaction thread pool.\n+    CONF_mInt32(min_compaction_threads, \"10\");\n+    CONF_mInt32(max_compaction_threads, \"10\");\n+\n+    // The upper limit of \"permits\" held by all compaction tasks. This config can be set to limit memory consumption for compaction.\n+    CONF_mInt64(total_permits_for_compaction_score, \"10000\")\n+\n+    // Whether compaction task is allowed to start when compaction score of current tablet is out of upper limit.\n+    CONF_mBool(enable_over_sold, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwODcyMw=="}, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDg2ODQzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzozMDo1NlrOHYefXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMjozMDowMlrOHYssSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNzQyMA==", "bodyText": "The default cumulative_compaction_rounds_for_each_base_compaction_round is 9, and default generate_compaction_tasks_interval_seconds is 2. So generally, it will create a base compaction task for every 18 seconds?", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495427420", "createdAt": "2020-09-26T07:30:56Z", "author": {"login": "morningman"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -391,4 +313,70 @@ void StorageEngine::_tablet_checkpoint_callback(DataDir* data_dir) {\n     } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-}  // namespace doris\n+void StorageEngine::_compaction_tasks_producer_callback() {\n+#ifdef GOOGLE_PROFILER\n+    ProfilerRegisterThread();\n+#endif\n+    LOG(INFO) << \"try to start compaction producer process!\";\n+\n+    std::vector<DataDir*> data_dirs;\n+    for (auto& tmp_store : _store_map) {\n+        data_dirs.push_back(tmp_store.second);\n+    }\n+\n+    int round = 0;\n+    CompactionType compaction_type;\n+    do {\n+        if (!config::disable_auto_compaction) {\n+            if (round < config::cumulative_compaction_rounds_for_each_base_compaction_round) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MzI0NQ==", "bodyText": "And I also test this with following case:\n\nOnly 1 BE with 1 data dir.\nCreate one table with 100 buckets.\ninsert data into this table for every 5 seconds.\n\nThe compaction is triggered every 2 seconds. And each compaction task cost just 0.x seconds. But the average version count of tablets is about 50, and can not be lower.\nSo I think the way to generate compaction tasks through polling may not be appropriate. One possible way is to generate compaction tasks through triggering.\nBased on polling, currently only one task can be done in 2 seconds, and based on triggering, in my case, it can be done 500 times per second (because the amount of data in each batch is very small in the case of high-frequency load)", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495463245", "createdAt": "2020-09-26T14:42:50Z", "author": {"login": "morningman"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -391,4 +313,70 @@ void StorageEngine::_tablet_checkpoint_callback(DataDir* data_dir) {\n     } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-}  // namespace doris\n+void StorageEngine::_compaction_tasks_producer_callback() {\n+#ifdef GOOGLE_PROFILER\n+    ProfilerRegisterThread();\n+#endif\n+    LOG(INFO) << \"try to start compaction producer process!\";\n+\n+    std::vector<DataDir*> data_dirs;\n+    for (auto& tmp_store : _store_map) {\n+        data_dirs.push_back(tmp_store.second);\n+    }\n+\n+    int round = 0;\n+    CompactionType compaction_type;\n+    do {\n+        if (!config::disable_auto_compaction) {\n+            if (round < config::cumulative_compaction_rounds_for_each_base_compaction_round) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNzQyMA=="}, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MDEwNQ==", "bodyText": "Thanks for your suggestions! I optimized the implementation logic of my producer.  If all the compaction tasks produced can hold permits, the producer will continue to produce compaction tasks without sleep. In this way, the production speed can far meet consumer demand.", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495660105", "createdAt": "2020-09-28T02:30:02Z", "author": {"login": "weizuo93"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -391,4 +313,70 @@ void StorageEngine::_tablet_checkpoint_callback(DataDir* data_dir) {\n     } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-}  // namespace doris\n+void StorageEngine::_compaction_tasks_producer_callback() {\n+#ifdef GOOGLE_PROFILER\n+    ProfilerRegisterThread();\n+#endif\n+    LOG(INFO) << \"try to start compaction producer process!\";\n+\n+    std::vector<DataDir*> data_dirs;\n+    for (auto& tmp_store : _store_map) {\n+        data_dirs.push_back(tmp_store.second);\n+    }\n+\n+    int round = 0;\n+    CompactionType compaction_type;\n+    do {\n+        if (!config::disable_auto_compaction) {\n+            if (round < config::cumulative_compaction_rounds_for_each_base_compaction_round) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNzQyMA=="}, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDg4MDA4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzo0ODoxMFrOHYekwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzo0ODoxMFrOHYekwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyODgwMQ==", "bodyText": "I think we can find more than one tablet for each data dir at this time.\nthe number of tablet found here can be compaction_task_num_per_disk", "url": "https://github.com/apache/incubator-doris/pull/4670#discussion_r495428801", "createdAt": "2020-09-26T07:48:10Z", "author": {"login": "morningman"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -391,4 +313,70 @@ void StorageEngine::_tablet_checkpoint_callback(DataDir* data_dir) {\n     } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-}  // namespace doris\n+void StorageEngine::_compaction_tasks_producer_callback() {\n+#ifdef GOOGLE_PROFILER\n+    ProfilerRegisterThread();\n+#endif\n+    LOG(INFO) << \"try to start compaction producer process!\";\n+\n+    std::vector<DataDir*> data_dirs;\n+    for (auto& tmp_store : _store_map) {\n+        data_dirs.push_back(tmp_store.second);\n+    }\n+\n+    int round = 0;\n+    CompactionType compaction_type;\n+    do {\n+        if (!config::disable_auto_compaction) {\n+            if (round < config::cumulative_compaction_rounds_for_each_base_compaction_round) {\n+                compaction_type = CompactionType::CUMULATIVE_COMPACTION;\n+                round++;\n+            } else {\n+                compaction_type = CompactionType::BASE_COMPACTION;\n+                round = 0;\n+            }\n+            LOG(INFO) << \"try to generate a batch of compaction tasks!\";\n+            vector<TabletSharedPtr> tablets_compaction =\n+                    _compaction_tasks_generator(compaction_type, data_dirs);\n+            for (const auto& tablet : tablets_compaction) {\n+                if (tablet->data_dir()->get_disks_compaction_num() <\n+                    config::compaction_task_num_per_disk) {\n+                    int64_t permits = tablet->calc_compaction_score(compaction_type);\n+                    if (_permit_limiter.request(permits)) {\n+                        if (compaction_type == CompactionType::CUMULATIVE_COMPACTION) {\n+                            _compaction_thread_pool->submit_func([this, tablet, permits]() {\n+                                CgroupsMgr::apply_system_cgroup();\n+                                this->_perform_cumulative_compaction(tablet);\n+                                this->_permit_limiter.release(permits);\n+                            });\n+                        } else {\n+                            _compaction_thread_pool->submit_func([this, tablet, permits]() {\n+                                CgroupsMgr::apply_system_cgroup();\n+                                this->_perform_base_compaction(tablet);\n+                                this->_permit_limiter.release(permits);\n+                            });\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    } while (!_stop_background_threads_latch.wait_for(\n+            MonoDelta::FromSeconds(config::generate_compaction_tasks_interval_seconds)));\n+}\n+\n+vector<TabletSharedPtr> StorageEngine::_compaction_tasks_generator(\n+        CompactionType compaction_type, std::vector<DataDir*> data_dirs) {\n+    vector<TabletSharedPtr> tablets_compaction;\n+    std::random_shuffle(data_dirs.begin(), data_dirs.end());\n+    for (auto data_dir : data_dirs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c2933b654f25a878d5ad75e172289bf82b3689"}, "originalPosition": 216}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1031, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}