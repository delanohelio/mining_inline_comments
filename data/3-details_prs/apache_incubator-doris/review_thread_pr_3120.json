{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTM2MjYw", "number": 3120, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMjowNVrODoWEMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxNDo0NVrODoWaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjMxMTU1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/AdminRepairTableStmt.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMjowNVrOF21eQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo0MzozMlrOF30i9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MzUyMw==", "bodyText": "Could we encapsulate the following logic?\n PartitionNames partitionNames = tblRef.getPartitionNames();\n if (partitionNames != null) {\n            if (partitionNames.isTemp()) {\n                throw new AnalysisException(\"xxxx\");\n            }", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393043523", "createdAt": "2020-03-16T14:02:05Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/AdminRepairTableStmt.java", "diffHunk": "@@ -62,8 +63,12 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n         tblRef.getName().setDb(dbName);\n \n-        if (tblRef.getPartitions() != null && !tblRef.getPartitions().isEmpty()) {\n-            partitions.addAll(tblRef.getPartitions());\n+        PartitionNames partitionNames = tblRef.getPartitionNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzIwMA==", "bodyText": "I can just change it to:\nif (tblRef.isTempPartitionSpecified()) {\n        throw new AnalysisException(\"Do not support (cancel)repair temporary partitions\");\n}\nif (tblRef.getPartitionNames() != null) {\n        partitions.addAll(tblRef.getPartitionNames().getPartitionNames());\n}\n\nDoes it better?", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393723200", "createdAt": "2020-03-17T14:32:20Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/AdminRepairTableStmt.java", "diffHunk": "@@ -62,8 +63,12 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n         tblRef.getName().setDb(dbName);\n \n-        if (tblRef.getPartitions() != null && !tblRef.getPartitions().isEmpty()) {\n-            partitions.addAll(tblRef.getPartitions());\n+        PartitionNames partitionNames = tblRef.getPartitionNames();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MzUyMw=="}, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NjkxOQ==", "bodyText": "I don't think which is better.  Let's keep it unchanged.", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r394076919", "createdAt": "2020-03-18T02:43:32Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/AdminRepairTableStmt.java", "diffHunk": "@@ -62,8 +63,12 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n         tblRef.getName().setDb(dbName);\n \n-        if (tblRef.getPartitions() != null && !tblRef.getPartitions().isEmpty()) {\n-            partitions.addAll(tblRef.getPartitions());\n+        PartitionNames partitionNames = tblRef.getPartitionNames();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MzUyMw=="}, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjM2NzUwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxNDo0NVrOF22Bog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozOTozM1rOF4DF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MjU3OA==", "bodyText": "Don't need to check again, we have checked in init method.", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393052578", "createdAt": "2020-03-16T14:14:45Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "diffHunk": "@@ -293,7 +293,11 @@ private TOlapTableLocationParam createLocation(OlapTable table) throws UserExcep\n         TOlapTableLocationParam locationParam = new TOlapTableLocationParam();\n         // BE id -> path hash\n         Multimap<Long, Long> allBePathsMap = HashMultimap.create();\n-        for (Partition partition : table.getPartitions()) {\n+        for (Partition partition : table.getAllPartitions()) {\n+            if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTg5NA==", "bodyText": "I didn't get you point? no need to check what ?", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393721894", "createdAt": "2020-03-17T14:30:34Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "diffHunk": "@@ -293,7 +293,11 @@ private TOlapTableLocationParam createLocation(OlapTable table) throws UserExcep\n         TOlapTableLocationParam locationParam = new TOlapTableLocationParam();\n         // BE id -> path hash\n         Multimap<Long, Long> allBePathsMap = HashMultimap.create();\n-        for (Partition partition : table.getPartitions()) {\n+        for (Partition partition : table.getAllPartitions()) {\n+            if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MjU3OA=="}, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTg1Ng==", "bodyText": "if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r394075856", "createdAt": "2020-03-18T02:39:07Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "diffHunk": "@@ -293,7 +293,11 @@ private TOlapTableLocationParam createLocation(OlapTable table) throws UserExcep\n         TOlapTableLocationParam locationParam = new TOlapTableLocationParam();\n         // BE id -> path hash\n         Multimap<Long, Long> allBePathsMap = HashMultimap.create();\n-        for (Partition partition : table.getPartitions()) {\n+        for (Partition partition : table.getAllPartitions()) {\n+            if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MjU3OA=="}, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNTI2Mg==", "bodyText": "Here I use this if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) to filter all unrelated partitions. I didn't see any such check logic in init method?", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r394315262", "createdAt": "2020-03-18T12:39:33Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "diffHunk": "@@ -293,7 +293,11 @@ private TOlapTableLocationParam createLocation(OlapTable table) throws UserExcep\n         TOlapTableLocationParam locationParam = new TOlapTableLocationParam();\n         // BE id -> path hash\n         Multimap<Long, Long> allBePathsMap = HashMultimap.create();\n-        for (Partition partition : table.getPartitions()) {\n+        for (Partition partition : table.getAllPartitions()) {\n+            if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MjU3OA=="}, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1953, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}