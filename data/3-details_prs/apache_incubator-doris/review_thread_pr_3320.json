{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTEyNTgw", "number": 3320, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozMzo0NVrOEGWh8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozMzo0NVrOEGWh8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDk2MDUxOnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/load/loadv2/HllTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozMzo0NVrOGlF92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToyNTo1MVrOGlgDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0ODI1MA==", "bodyText": "better to add comment in be/test/olap/hll_test.cpp to notice that the following test case should be consistent with java version in fe/src/test/java/org/apache/doris/load/loadv2/HllTest.java", "url": "https://github.com/apache/incubator-doris/pull/3320#discussion_r441548250", "createdAt": "2020-06-17T13:33:45Z", "author": {"login": "morningman"}, "path": "fe/src/test/java/org/apache/doris/load/loadv2/HllTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load.loadv2;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import static org.apache.doris.load.loadv2.Hll.*;\n+\n+public class HllTest {\n+\n+    @Test\n+    public void testFindFirstNonZeroBitPosition() {\n+        Assert.assertTrue(getLongTailZeroNum(0) == 0);\n+        Assert.assertTrue(getLongTailZeroNum(1) == 0);\n+        Assert.assertTrue(getLongTailZeroNum(1l << 30) == 30);\n+        Assert.assertTrue(getLongTailZeroNum(1l << 62) == 62);\n+    }\n+\n+    @Test\n+    public void HllBasicTest() throws IOException {\n+        // test empty\n+        Hll emptyHll = new Hll();\n+\n+        Assert.assertTrue(emptyHll.getType() == HLL_DATA_EMPTY);\n+        Assert.assertTrue(emptyHll.estimateCardinality() == 0);\n+\n+        ByteArrayOutputStream emptyOutputStream = new ByteArrayOutputStream();\n+        DataOutput output = new DataOutputStream(emptyOutputStream);\n+        emptyHll.serialize(output);\n+        DataInputStream emptyInputStream = new DataInputStream(new ByteArrayInputStream(emptyOutputStream.toByteArray()));\n+        Hll deserializedEmptyHll = new Hll();\n+        deserializedEmptyHll.deserialize(emptyInputStream);\n+        Assert.assertTrue(deserializedEmptyHll.getType() == HLL_DATA_EMPTY);\n+\n+        // test explicit\n+        Hll explicitHll = new Hll();\n+        for (int i = 0; i < HLL_EXPLICLIT_INT64_NUM; i++) {\n+            explicitHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(explicitHll.getType() == HLL_DATA_EXPLICIT);\n+        Assert.assertTrue(explicitHll.estimateCardinality() == HLL_EXPLICLIT_INT64_NUM);\n+\n+        ByteArrayOutputStream explicitOutputStream = new ByteArrayOutputStream();\n+        DataOutput explicitOutput = new DataOutputStream(explicitOutputStream);\n+        explicitHll.serialize(explicitOutput);\n+        DataInputStream explicitInputStream = new DataInputStream(new ByteArrayInputStream(explicitOutputStream.toByteArray()));\n+        Hll deserializedExplicitHll = new Hll();\n+        deserializedExplicitHll.deserialize(explicitInputStream);\n+        Assert.assertTrue(deserializedExplicitHll.getType() == HLL_DATA_EXPLICIT);\n+\n+        // test sparse\n+        Hll sparseHll = new Hll();\n+        for (int i = 0; i < HLL_SPARSE_THRESHOLD; i++) {\n+            sparseHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(sparseHll.getType() == HLL_DATA_FULL);\n+        // 2% error rate\n+        Assert.assertTrue(sparseHll.estimateCardinality() > HLL_SPARSE_THRESHOLD * (1 - 0.02) &&\n+                sparseHll.estimateCardinality() < HLL_SPARSE_THRESHOLD * (1 + 0.02));\n+\n+        ByteArrayOutputStream sparseOutputStream = new ByteArrayOutputStream();\n+        DataOutput sparseOutput = new DataOutputStream(sparseOutputStream);\n+        sparseHll.serialize(sparseOutput);\n+        DataInputStream sparseInputStream = new DataInputStream(new ByteArrayInputStream(sparseOutputStream.toByteArray()));\n+        Hll deserializedSparseHll = new Hll();\n+        deserializedSparseHll.deserialize(sparseInputStream);\n+        Assert.assertTrue(deserializedSparseHll.getType() == HLL_DATA_SPARSE);\n+        Assert.assertTrue(sparseHll.estimateCardinality() == deserializedSparseHll.estimateCardinality());\n+\n+\n+        // test full\n+        Hll fullHll = new Hll();\n+        for (int i = 1; i <= Short.MAX_VALUE; i++) {\n+            fullHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(fullHll.getType() == HLL_DATA_FULL);\n+        // the result 32748 is consistent with C++ 's implementation\n+        Assert.assertTrue(fullHll.estimateCardinality() == 32748);\n+        Assert.assertTrue(fullHll.estimateCardinality() > Short.MAX_VALUE * (1 - 0.02) &&\n+                fullHll.estimateCardinality() < Short.MAX_VALUE * (1 + 0.02));\n+\n+        ByteArrayOutputStream fullHllOutputStream = new ByteArrayOutputStream();\n+        DataOutput fullHllOutput = new DataOutputStream(fullHllOutputStream);\n+        fullHll.serialize(fullHllOutput);\n+        DataInputStream fullHllInputStream = new DataInputStream(new ByteArrayInputStream(fullHllOutputStream.toByteArray()));\n+        Hll deserializedFullHll = new Hll();\n+        deserializedFullHll.deserialize(fullHllInputStream);\n+        Assert.assertTrue(deserializedFullHll.getType() == HLL_DATA_FULL);\n+        Assert.assertTrue(deserializedFullHll.estimateCardinality() == fullHll.estimateCardinality());\n+\n+    }\n+\n+    // keep logic same with C++ version\n+    // add additional compare logic with C++ version's estimateValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649a0ee27ec88e6c97b6a0df9b776df94db06f11"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NTYwMA==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/apache/incubator-doris/pull/3320#discussion_r441975600", "createdAt": "2020-06-18T05:25:51Z", "author": {"login": "wangbo"}, "path": "fe/src/test/java/org/apache/doris/load/loadv2/HllTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load.loadv2;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import static org.apache.doris.load.loadv2.Hll.*;\n+\n+public class HllTest {\n+\n+    @Test\n+    public void testFindFirstNonZeroBitPosition() {\n+        Assert.assertTrue(getLongTailZeroNum(0) == 0);\n+        Assert.assertTrue(getLongTailZeroNum(1) == 0);\n+        Assert.assertTrue(getLongTailZeroNum(1l << 30) == 30);\n+        Assert.assertTrue(getLongTailZeroNum(1l << 62) == 62);\n+    }\n+\n+    @Test\n+    public void HllBasicTest() throws IOException {\n+        // test empty\n+        Hll emptyHll = new Hll();\n+\n+        Assert.assertTrue(emptyHll.getType() == HLL_DATA_EMPTY);\n+        Assert.assertTrue(emptyHll.estimateCardinality() == 0);\n+\n+        ByteArrayOutputStream emptyOutputStream = new ByteArrayOutputStream();\n+        DataOutput output = new DataOutputStream(emptyOutputStream);\n+        emptyHll.serialize(output);\n+        DataInputStream emptyInputStream = new DataInputStream(new ByteArrayInputStream(emptyOutputStream.toByteArray()));\n+        Hll deserializedEmptyHll = new Hll();\n+        deserializedEmptyHll.deserialize(emptyInputStream);\n+        Assert.assertTrue(deserializedEmptyHll.getType() == HLL_DATA_EMPTY);\n+\n+        // test explicit\n+        Hll explicitHll = new Hll();\n+        for (int i = 0; i < HLL_EXPLICLIT_INT64_NUM; i++) {\n+            explicitHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(explicitHll.getType() == HLL_DATA_EXPLICIT);\n+        Assert.assertTrue(explicitHll.estimateCardinality() == HLL_EXPLICLIT_INT64_NUM);\n+\n+        ByteArrayOutputStream explicitOutputStream = new ByteArrayOutputStream();\n+        DataOutput explicitOutput = new DataOutputStream(explicitOutputStream);\n+        explicitHll.serialize(explicitOutput);\n+        DataInputStream explicitInputStream = new DataInputStream(new ByteArrayInputStream(explicitOutputStream.toByteArray()));\n+        Hll deserializedExplicitHll = new Hll();\n+        deserializedExplicitHll.deserialize(explicitInputStream);\n+        Assert.assertTrue(deserializedExplicitHll.getType() == HLL_DATA_EXPLICIT);\n+\n+        // test sparse\n+        Hll sparseHll = new Hll();\n+        for (int i = 0; i < HLL_SPARSE_THRESHOLD; i++) {\n+            sparseHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(sparseHll.getType() == HLL_DATA_FULL);\n+        // 2% error rate\n+        Assert.assertTrue(sparseHll.estimateCardinality() > HLL_SPARSE_THRESHOLD * (1 - 0.02) &&\n+                sparseHll.estimateCardinality() < HLL_SPARSE_THRESHOLD * (1 + 0.02));\n+\n+        ByteArrayOutputStream sparseOutputStream = new ByteArrayOutputStream();\n+        DataOutput sparseOutput = new DataOutputStream(sparseOutputStream);\n+        sparseHll.serialize(sparseOutput);\n+        DataInputStream sparseInputStream = new DataInputStream(new ByteArrayInputStream(sparseOutputStream.toByteArray()));\n+        Hll deserializedSparseHll = new Hll();\n+        deserializedSparseHll.deserialize(sparseInputStream);\n+        Assert.assertTrue(deserializedSparseHll.getType() == HLL_DATA_SPARSE);\n+        Assert.assertTrue(sparseHll.estimateCardinality() == deserializedSparseHll.estimateCardinality());\n+\n+\n+        // test full\n+        Hll fullHll = new Hll();\n+        for (int i = 1; i <= Short.MAX_VALUE; i++) {\n+            fullHll.updateWithHash(i);\n+        }\n+        Assert.assertTrue(fullHll.getType() == HLL_DATA_FULL);\n+        // the result 32748 is consistent with C++ 's implementation\n+        Assert.assertTrue(fullHll.estimateCardinality() == 32748);\n+        Assert.assertTrue(fullHll.estimateCardinality() > Short.MAX_VALUE * (1 - 0.02) &&\n+                fullHll.estimateCardinality() < Short.MAX_VALUE * (1 + 0.02));\n+\n+        ByteArrayOutputStream fullHllOutputStream = new ByteArrayOutputStream();\n+        DataOutput fullHllOutput = new DataOutputStream(fullHllOutputStream);\n+        fullHll.serialize(fullHllOutput);\n+        DataInputStream fullHllInputStream = new DataInputStream(new ByteArrayInputStream(fullHllOutputStream.toByteArray()));\n+        Hll deserializedFullHll = new Hll();\n+        deserializedFullHll.deserialize(fullHllInputStream);\n+        Assert.assertTrue(deserializedFullHll.getType() == HLL_DATA_FULL);\n+        Assert.assertTrue(deserializedFullHll.estimateCardinality() == fullHll.estimateCardinality());\n+\n+    }\n+\n+    // keep logic same with C++ version\n+    // add additional compare logic with C++ version's estimateValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0ODI1MA=="}, "originalCommit": {"oid": "649a0ee27ec88e6c97b6a0df9b776df94db06f11"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1908, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}