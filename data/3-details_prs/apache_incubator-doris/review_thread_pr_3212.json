{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTQ2NjQw", "number": 3212, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0Mjo1NlrODtK78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0NzowMlrODtLDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkxNjk3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0Mjo1NlrOF-cKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0OTo0MFrOF-v4lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNzQyNw==", "bodyText": "Write double?", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401017427", "createdAt": "2020-03-31T15:42:56Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MDk2NQ==", "bodyText": "why use writeDouble? indexIdMap.size() is a integer type.", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401040965", "createdAt": "2020-03-31T16:15:28Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNzQyNw=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MDU2NA==", "bodyText": "Ignore me. I yesterday looked the code write out.writeInt(indexIdMap.size()); twice. So I said write double.", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401340564", "createdAt": "2020-04-01T03:49:40Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNzQyNw=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkyMTQyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0Mzo1NFrOF-cNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDozNTowN1rOF-whIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxODE3OQ==", "bodyText": "Don't need this check.", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401018179", "createdAt": "2020-03-31T15:43:54Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());\n+\n+        // shadow index info\n+        out.writeInt(indexIdMap.size());\n+        for (Entry<Long, Long> entry : indexIdMap.entrySet()) {\n+            long shadowIndexId = entry.getKey();\n+            out.writeLong(shadowIndexId);\n+            // index id map\n+            out.writeLong(entry.getValue());\n+            // index name\n+            Text.writeString(out, indexIdToName.get(shadowIndexId));\n+            // index schema version and hash\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).first);\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).second);\n+        }\n+\n+        // bloom filter\n+        out.writeBoolean(hasBfChange);\n+        if (hasBfChange) {\n+            out.writeInt(bfColumns.size());\n+            for (String bfCol : bfColumns) {\n+                Text.writeString(out, bfCol);\n+            }\n+            out.writeDouble(bfFpp);\n+        }\n+\n+        out.writeLong(watershedTxnId);\n+\n+        // index\n+        out.writeBoolean(indexChange);\n+        if (indexChange) {\n+            if (CollectionUtils.isNotEmpty(indexes)) {\n+                out.writeBoolean(true);\n+                out.writeInt(indexes.size());\n+                for (Index index : indexes) {\n+                    index.write(out);\n+                }\n+            } else {\n+                out.writeBoolean(false);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * read data need to persist when job finished\n+     */\n+    private void readJobFinishedData(DataInput in) throws IOException {\n+        // shadow index info\n+        int indexNum = in.readInt();\n+        for (int i = 0; i < indexNum; i++) {\n+            long shadowIndexId = in.readLong();\n+            long originIndexId = in.readLong();\n+            String indexName = Text.readString(in);\n+            int schemaVersion = in.readInt();\n+            int schemaVersionHash = in.readInt();\n+            Pair<Integer, Integer> schemaVersionAndHash = Pair.create(schemaVersion, schemaVersionHash);\n+            short shortKeyCount = in.readShort();\n+\n+            indexIdMap.put(shadowIndexId, originIndexId);\n+            indexIdToName.put(shadowIndexId, indexName);\n+            indexSchemaVersionAndHashMap.put(shadowIndexId, schemaVersionAndHash);\n+        }\n+\n+        // bloom filter\n+        hasBfChange = in.readBoolean();\n+        if (hasBfChange) {\n+            int bfNum = in.readInt();\n+            bfColumns = Sets.newHashSetWithExpectedSize(bfNum);\n+            for (int i = 0; i < bfNum; i++) {\n+                bfColumns.add(Text.readString(in));\n+            }\n+            bfFpp = in.readDouble();\n+        }\n+\n+        watershedTxnId = in.readLong();\n+\n+        // index\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_70) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0Njg0NQ==", "bodyText": "I just use the origin code, why we don't need this check?", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401046845", "createdAt": "2020-03-31T16:23:57Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());\n+\n+        // shadow index info\n+        out.writeInt(indexIdMap.size());\n+        for (Entry<Long, Long> entry : indexIdMap.entrySet()) {\n+            long shadowIndexId = entry.getKey();\n+            out.writeLong(shadowIndexId);\n+            // index id map\n+            out.writeLong(entry.getValue());\n+            // index name\n+            Text.writeString(out, indexIdToName.get(shadowIndexId));\n+            // index schema version and hash\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).first);\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).second);\n+        }\n+\n+        // bloom filter\n+        out.writeBoolean(hasBfChange);\n+        if (hasBfChange) {\n+            out.writeInt(bfColumns.size());\n+            for (String bfCol : bfColumns) {\n+                Text.writeString(out, bfCol);\n+            }\n+            out.writeDouble(bfFpp);\n+        }\n+\n+        out.writeLong(watershedTxnId);\n+\n+        // index\n+        out.writeBoolean(indexChange);\n+        if (indexChange) {\n+            if (CollectionUtils.isNotEmpty(indexes)) {\n+                out.writeBoolean(true);\n+                out.writeInt(indexes.size());\n+                for (Index index : indexes) {\n+                    index.write(out);\n+                }\n+            } else {\n+                out.writeBoolean(false);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * read data need to persist when job finished\n+     */\n+    private void readJobFinishedData(DataInput in) throws IOException {\n+        // shadow index info\n+        int indexNum = in.readInt();\n+        for (int i = 0; i < indexNum; i++) {\n+            long shadowIndexId = in.readLong();\n+            long originIndexId = in.readLong();\n+            String indexName = Text.readString(in);\n+            int schemaVersion = in.readInt();\n+            int schemaVersionHash = in.readInt();\n+            Pair<Integer, Integer> schemaVersionAndHash = Pair.create(schemaVersion, schemaVersionHash);\n+            short shortKeyCount = in.readShort();\n+\n+            indexIdMap.put(shadowIndexId, originIndexId);\n+            indexIdToName.put(shadowIndexId, indexName);\n+            indexSchemaVersionAndHashMap.put(shadowIndexId, schemaVersionAndHash);\n+        }\n+\n+        // bloom filter\n+        hasBfChange = in.readBoolean();\n+        if (hasBfChange) {\n+            int bfNum = in.readInt();\n+            bfColumns = Sets.newHashSetWithExpectedSize(bfNum);\n+            for (int i = 0; i < bfNum; i++) {\n+                bfColumns.add(Text.readString(in));\n+            }\n+            bfFpp = in.readDouble();\n+        }\n+\n+        watershedTxnId = in.readLong();\n+\n+        // index\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_70) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxODE3OQ=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MDc4OQ==", "bodyText": "We only call readJobFinishedData If Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_80 is true.", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401340789", "createdAt": "2020-04-01T03:50:37Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());\n+\n+        // shadow index info\n+        out.writeInt(indexIdMap.size());\n+        for (Entry<Long, Long> entry : indexIdMap.entrySet()) {\n+            long shadowIndexId = entry.getKey();\n+            out.writeLong(shadowIndexId);\n+            // index id map\n+            out.writeLong(entry.getValue());\n+            // index name\n+            Text.writeString(out, indexIdToName.get(shadowIndexId));\n+            // index schema version and hash\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).first);\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).second);\n+        }\n+\n+        // bloom filter\n+        out.writeBoolean(hasBfChange);\n+        if (hasBfChange) {\n+            out.writeInt(bfColumns.size());\n+            for (String bfCol : bfColumns) {\n+                Text.writeString(out, bfCol);\n+            }\n+            out.writeDouble(bfFpp);\n+        }\n+\n+        out.writeLong(watershedTxnId);\n+\n+        // index\n+        out.writeBoolean(indexChange);\n+        if (indexChange) {\n+            if (CollectionUtils.isNotEmpty(indexes)) {\n+                out.writeBoolean(true);\n+                out.writeInt(indexes.size());\n+                for (Index index : indexes) {\n+                    index.write(out);\n+                }\n+            } else {\n+                out.writeBoolean(false);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * read data need to persist when job finished\n+     */\n+    private void readJobFinishedData(DataInput in) throws IOException {\n+        // shadow index info\n+        int indexNum = in.readInt();\n+        for (int i = 0; i < indexNum; i++) {\n+            long shadowIndexId = in.readLong();\n+            long originIndexId = in.readLong();\n+            String indexName = Text.readString(in);\n+            int schemaVersion = in.readInt();\n+            int schemaVersionHash = in.readInt();\n+            Pair<Integer, Integer> schemaVersionAndHash = Pair.create(schemaVersion, schemaVersionHash);\n+            short shortKeyCount = in.readShort();\n+\n+            indexIdMap.put(shadowIndexId, originIndexId);\n+            indexIdToName.put(shadowIndexId, indexName);\n+            indexSchemaVersionAndHashMap.put(shadowIndexId, schemaVersionAndHash);\n+        }\n+\n+        // bloom filter\n+        hasBfChange = in.readBoolean();\n+        if (hasBfChange) {\n+            int bfNum = in.readInt();\n+            bfColumns = Sets.newHashSetWithExpectedSize(bfNum);\n+            for (int i = 0; i < bfNum; i++) {\n+                bfColumns.add(Text.readString(in));\n+            }\n+            bfFpp = in.readDouble();\n+        }\n+\n+        watershedTxnId = in.readLong();\n+\n+        // index\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_70) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxODE3OQ=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1MDk0Nw==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401350947", "createdAt": "2020-04-01T04:35:07Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -953,4 +969,131 @@ public void readFields(DataInput in) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * write data need to persist when job finished\n+     */\n+    private void writeJobFinishedData(DataOutput out) throws IOException {\n+        // only persist data will be used in getInfo\n+        out.writeInt(indexIdMap.size());\n+\n+        // shadow index info\n+        out.writeInt(indexIdMap.size());\n+        for (Entry<Long, Long> entry : indexIdMap.entrySet()) {\n+            long shadowIndexId = entry.getKey();\n+            out.writeLong(shadowIndexId);\n+            // index id map\n+            out.writeLong(entry.getValue());\n+            // index name\n+            Text.writeString(out, indexIdToName.get(shadowIndexId));\n+            // index schema version and hash\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).first);\n+            out.writeInt(indexSchemaVersionAndHashMap.get(shadowIndexId).second);\n+        }\n+\n+        // bloom filter\n+        out.writeBoolean(hasBfChange);\n+        if (hasBfChange) {\n+            out.writeInt(bfColumns.size());\n+            for (String bfCol : bfColumns) {\n+                Text.writeString(out, bfCol);\n+            }\n+            out.writeDouble(bfFpp);\n+        }\n+\n+        out.writeLong(watershedTxnId);\n+\n+        // index\n+        out.writeBoolean(indexChange);\n+        if (indexChange) {\n+            if (CollectionUtils.isNotEmpty(indexes)) {\n+                out.writeBoolean(true);\n+                out.writeInt(indexes.size());\n+                for (Index index : indexes) {\n+                    index.write(out);\n+                }\n+            } else {\n+                out.writeBoolean(false);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * read data need to persist when job finished\n+     */\n+    private void readJobFinishedData(DataInput in) throws IOException {\n+        // shadow index info\n+        int indexNum = in.readInt();\n+        for (int i = 0; i < indexNum; i++) {\n+            long shadowIndexId = in.readLong();\n+            long originIndexId = in.readLong();\n+            String indexName = Text.readString(in);\n+            int schemaVersion = in.readInt();\n+            int schemaVersionHash = in.readInt();\n+            Pair<Integer, Integer> schemaVersionAndHash = Pair.create(schemaVersion, schemaVersionHash);\n+            short shortKeyCount = in.readShort();\n+\n+            indexIdMap.put(shadowIndexId, originIndexId);\n+            indexIdToName.put(shadowIndexId, indexName);\n+            indexSchemaVersionAndHashMap.put(shadowIndexId, schemaVersionAndHash);\n+        }\n+\n+        // bloom filter\n+        hasBfChange = in.readBoolean();\n+        if (hasBfChange) {\n+            int bfNum = in.readInt();\n+            bfColumns = Sets.newHashSetWithExpectedSize(bfNum);\n+            for (int i = 0; i < bfNum; i++) {\n+                bfColumns.add(Text.readString(in));\n+            }\n+            bfFpp = in.readDouble();\n+        }\n+\n+        watershedTxnId = in.readLong();\n+\n+        // index\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_70) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxODE3OQ=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkzMDk1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0NjowOVrOF-cTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0NjowOVrOF-cTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxOTc5Mg==", "bodyText": "Please rename. Such as isMetaPruned", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401019792", "createdAt": "2020-03-31T15:46:09Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -95,6 +95,9 @@\n     // shadow index id -> shadow index short key count\n     private Map<Long, Short> indexShortKeyMap = Maps.newHashMap();\n \n+    // identify whether the job is finished and no need to persist some data\n+    private boolean cleared = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkzNTQyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0NzowMlrOF-cWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxNTo0MVrOF-dm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMDUzMw==", "bodyText": "Please rename. Such as pruneMeta", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401020533", "createdAt": "2020-03-31T15:47:02Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -159,6 +161,18 @@ public void setStorageFormat(TStorageFormat storageFormat) {\n         this.storageFormat = storageFormat;\n     }\n \n+    /**\n+     * clear some date structure in this job to save memory\n+     * these data structures must not used in getInfo method\n+     */\n+    public void clear() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MTEwNQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3212#discussion_r401041105", "createdAt": "2020-03-31T16:15:41Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java", "diffHunk": "@@ -159,6 +161,18 @@ public void setStorageFormat(TStorageFormat storageFormat) {\n         this.storageFormat = storageFormat;\n     }\n \n+    /**\n+     * clear some date structure in this job to save memory\n+     * these data structures must not used in getInfo method\n+     */\n+    public void clear() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMDUzMw=="}, "originalCommit": {"oid": "ea9c991fb8169aa82153f8385e56c998d7c2230b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1825, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}