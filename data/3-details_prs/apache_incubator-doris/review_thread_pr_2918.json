{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTM1MjAy", "number": 2918, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNTo1ODoyOVrODgRprw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjoyNDo0MVrODgR3FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTcwMjIzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/tablet_manager.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNTo1ODoyOVrOFqZK0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjozNzoyOFrOFqZq-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk5Njg4MA==", "bodyText": "existed_tablet", "url": "https://github.com/apache/incubator-doris/pull/2918#discussion_r379996880", "createdAt": "2020-02-17T05:58:29Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/tablet_manager.cpp", "diffHunk": "@@ -83,42 +72,42 @@ OLAPStatus TabletManager::_add_tablet_unlocked(TTabletId tablet_id, SchemaHash s\n     VLOG(3) << \"begin to add tablet to TabletManager. \" << \"tablet_id=\" << tablet_id\n             << \", schema_hash=\" << schema_hash << \", force=\" << force;\n \n-    TabletSharedPtr tablet_item = nullptr;\n+    TabletSharedPtr exist_tablet = nullptr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708c46ba1237cae4d9f701bb2b06a446c9a02839"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNTExMw==", "bodyText": "Done.", "url": "https://github.com/apache/incubator-doris/pull/2918#discussion_r380005113", "createdAt": "2020-02-17T06:37:28Z", "author": {"login": "lingbin"}, "path": "be/src/olap/tablet_manager.cpp", "diffHunk": "@@ -83,42 +72,42 @@ OLAPStatus TabletManager::_add_tablet_unlocked(TTabletId tablet_id, SchemaHash s\n     VLOG(3) << \"begin to add tablet to TabletManager. \" << \"tablet_id=\" << tablet_id\n             << \", schema_hash=\" << schema_hash << \", force=\" << force;\n \n-    TabletSharedPtr tablet_item = nullptr;\n+    TabletSharedPtr exist_tablet = nullptr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk5Njg4MA=="}, "originalCommit": {"oid": "708c46ba1237cae4d9f701bb2b06a446c9a02839"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTczNjUyOnYy", "diffSide": "RIGHT", "path": "be/src/olap/tablet_manager.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjoyNDo0MVrOFqZgDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjozNzoyMlrOFqZq5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwMjMxOA==", "bodyText": "use SCOPED_CLEANUP instead", "url": "https://github.com/apache/incubator-doris/pull/2918#discussion_r380002318", "createdAt": "2020-02-17T06:24:41Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/tablet_manager.cpp", "diffHunk": "@@ -212,120 +191,133 @@ bool TabletManager::_check_tablet_id_exist_unlocked(TTabletId tablet_id) {\n     return it != _tablet_map.end() && !it->second.table_arr.empty();\n }\n \n-void TabletManager::clear() {\n-    _tablet_map.clear();\n-    _shutdown_tablets.clear();\n-}\n-\n OLAPStatus TabletManager::create_tablet(const TCreateTabletReq& request,\n                                         std::vector<DataDir*> stores) {\n-    LOG(INFO) << \"begin to process create tablet. tablet=\" << request.tablet_id\n-              << \", schema_hash=\" << request.tablet_schema.schema_hash;\n-    WriteLock wrlock(&_tablet_map_lock);\n-    OLAPStatus res = OLAP_SUCCESS;\n     DorisMetrics::create_tablet_requests_total.increment(1);\n-    // Make sure create_tablet operation is idempotent:\n-    // return true if tablet with same tablet_id and schema_hash exist,\n-    //        false if tablet with same tablet_id but different schema_hash exist\n-    // during alter, if the tablet(same tabletid and schema hash) already exist\n-    // then just return true, if tablet id with different schema hash exist, wait report\n-    // task to delete the tablet\n-    if (_check_tablet_id_exist_unlocked(request.tablet_id)) {\n-        TabletSharedPtr tablet = _get_tablet_unlocked(\n-                request.tablet_id, request.tablet_schema.schema_hash);\n+\n+    int64_t tablet_id = request.tablet_id;\n+    int32_t schema_hash = request.tablet_schema.schema_hash;\n+    LOG(INFO) << \"begin to create tablet. tablet_id=\" << tablet_id\n+              << \", schema_hash=\" << schema_hash;\n+\n+    WriteLock wrlock(&_tablet_map_lock);\n+    // Make create_tablet operation to be idempotent:\n+    // 1. Return true if tablet with same tablet_id and schema_hash exist;\n+    //           false if tablet with same tablet_id but different schema_hash exist.\n+    // 2. When this is an alter task, if the tablet(both tablet_id and schema_hash are\n+    // same) already exist, then just return true(an duplicate request). But if\n+    // tablet_id exist but with different schema_hash, return an error(report task will\n+    // eventually trigger its deletion).\n+    if (_check_tablet_id_exist_unlocked(tablet_id)) {\n+        TabletSharedPtr tablet = _get_tablet_unlocked(tablet_id, schema_hash);\n         if (tablet != nullptr) {\n-            LOG(INFO) << \"create tablet success because tablet already exist. tablet_id=\"\n-                    << request.tablet_id;\n+            LOG(INFO) << \"success to create tablet. tablet already exist. tablet_id=\" << tablet_id;\n             return OLAP_SUCCESS;\n         } else {\n-            LOG(WARNING) << \"tablet with different schema hash already exists. tablet_id=\"\n-                    << request.tablet_id;\n+            LOG(WARNING) << \"fail to create tablet. tablet exist but with different schema_hash. \"\n+                    << \"tablet_id=\" << tablet_id << \", schema_hash=\" << schema_hash;\n+            DorisMetrics::create_tablet_requests_failed.increment(1);\n             return OLAP_ERR_CE_TABLET_ID_EXIST;\n         }\n     }\n \n-    TabletSharedPtr ref_tablet = nullptr;\n-    bool is_schema_change_tablet = false;\n-    // if the CreateTabletReq has base_tablet_id then it is a alter tablet request\n+    TabletSharedPtr base_tablet = nullptr;\n+    bool is_schema_change = false;\n+    // If the CreateTabletReq has base_tablet_id then it is a alter-tablet request\n     if (request.__isset.base_tablet_id && request.base_tablet_id > 0) {\n-        is_schema_change_tablet = true;\n-        ref_tablet = _get_tablet_unlocked(request.base_tablet_id, request.base_schema_hash);\n-        if (ref_tablet == nullptr) {\n-            LOG(WARNING) << \"fail to create new tablet. new_tablet_id=\" << request.tablet_id\n-                         << \", new_schema_hash=\" << request.tablet_schema.schema_hash\n-                         << \", because could not find base tablet, base_tablet_id=\" << request.base_tablet_id\n+        is_schema_change = true;\n+        base_tablet = _get_tablet_unlocked(request.base_tablet_id, request.base_schema_hash);\n+        if (base_tablet == nullptr) {\n+            LOG(WARNING) << \"fail to create tablet(change schema), base tablet does not exist. \"\n+                         << \"new_tablet_id=\" << tablet_id << \", new_schema_hash=\" << schema_hash\n+                         << \", base_tablet_id=\" << request.base_tablet_id\n                          << \", base_schema_hash=\" << request.base_schema_hash;\n+            DorisMetrics::create_tablet_requests_failed.increment(1);\n             return OLAP_ERR_TABLE_CREATE_META_ERROR;\n         }\n-        // schema change should use the same data dir\n+        // If we are doing schema-change, we should use the same data dir\n+        // TODO(lingbin): A litter trick here, the directory should be determined before\n+        // entering this method\n         stores.clear();\n-        stores.push_back(ref_tablet->data_dir());\n+        stores.push_back(base_tablet->data_dir());\n     }\n \n-    // set alter type to schema change. it is useless\n-    TabletSharedPtr tablet = _internal_create_tablet_unlocked(AlterTabletType::SCHEMA_CHANGE, request,\n-        is_schema_change_tablet, ref_tablet, stores);\n+    // set alter type to schema-change. it is useless\n+    TabletSharedPtr tablet = _internal_create_tablet_unlocked(\n+            AlterTabletType::SCHEMA_CHANGE, request, is_schema_change, base_tablet.get(), stores);\n     if (tablet == nullptr) {\n-        res = OLAP_ERR_CE_CMD_PARAMS_ERROR;\n-        LOG(WARNING) << \"fail to create tablet. res=\" << res;\n+        LOG(WARNING) << \"fail to create tablet. tablet_id=\" << request.tablet_id;\n+        DorisMetrics::create_tablet_requests_failed.increment(1);\n+        return OLAP_ERR_CE_CMD_PARAMS_ERROR;\n     }\n \n-    LOG(INFO) << \"finish to process create tablet. res=\" << res;\n-    return res;\n-} // create_tablet\n+    LOG(INFO) << \"success to create tablet. tablet_id=\" << tablet_id\n+              << \", schema_hash=\" << schema_hash;\n+    return OLAP_SUCCESS;\n+}\n \n TabletSharedPtr TabletManager::_internal_create_tablet_unlocked(\n         const AlterTabletType alter_type, const TCreateTabletReq& request,\n-        const bool is_schema_change_tablet, const TabletSharedPtr ref_tablet,\n-        std::vector<DataDir*> data_dirs) {\n-    DCHECK((is_schema_change_tablet && ref_tablet != nullptr)\n-            || (!is_schema_change_tablet && ref_tablet == nullptr));\n-    // check if the tablet with specified tablet id and schema hash already exists\n-    auto checked_tablet = _get_tablet_unlocked(request.tablet_id, request.tablet_schema.schema_hash);\n-    if (checked_tablet != nullptr) {\n-        LOG(WARNING) << \"failed to create tablet because tablet already exist.\"\n-                     << \" tablet id = \" << request.tablet_id\n-                     << \" schema hash = \" << request.tablet_schema.schema_hash;\n-        return nullptr;\n-    }\n-    bool is_tablet_added = false;\n-    auto tablet = _create_tablet_meta_and_dir_unlocked(request, is_schema_change_tablet, ref_tablet, data_dirs);\n+        const bool is_schema_change, const Tablet* base_tablet,\n+        const std::vector<DataDir*>& data_dirs) {\n+    // If in schema-change state, base_tablet must also be provided.\n+    // i.e., is_schema_change and base_tablet are either assigned or not assigned\n+    DCHECK((is_schema_change && base_tablet) || (!is_schema_change && !base_tablet));\n+\n+    // NOTE: The existence of tablet_id and schema_hash has already been checked,\n+    // no need check again here.\n+\n+    auto tablet = _create_tablet_meta_and_dir_unlocked(request, is_schema_change,\n+                                                       base_tablet, data_dirs);\n     if (tablet == nullptr) {\n         return nullptr;\n     }\n \n+    int64_t new_tablet_id = request.tablet_id;\n+    int32_t new_schema_hash = request.tablet_schema.schema_hash;\n+\n+    // should remove the tablet's pending_id no matter create-tablet success or not\n+    DataDir* data_dir = tablet->data_dir();\n+    std::shared_ptr<void> __defer(nullptr, [&](...) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708c46ba1237cae4d9f701bb2b06a446c9a02839"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNTA5Mw==", "bodyText": "Done.", "url": "https://github.com/apache/incubator-doris/pull/2918#discussion_r380005093", "createdAt": "2020-02-17T06:37:22Z", "author": {"login": "lingbin"}, "path": "be/src/olap/tablet_manager.cpp", "diffHunk": "@@ -212,120 +191,133 @@ bool TabletManager::_check_tablet_id_exist_unlocked(TTabletId tablet_id) {\n     return it != _tablet_map.end() && !it->second.table_arr.empty();\n }\n \n-void TabletManager::clear() {\n-    _tablet_map.clear();\n-    _shutdown_tablets.clear();\n-}\n-\n OLAPStatus TabletManager::create_tablet(const TCreateTabletReq& request,\n                                         std::vector<DataDir*> stores) {\n-    LOG(INFO) << \"begin to process create tablet. tablet=\" << request.tablet_id\n-              << \", schema_hash=\" << request.tablet_schema.schema_hash;\n-    WriteLock wrlock(&_tablet_map_lock);\n-    OLAPStatus res = OLAP_SUCCESS;\n     DorisMetrics::create_tablet_requests_total.increment(1);\n-    // Make sure create_tablet operation is idempotent:\n-    // return true if tablet with same tablet_id and schema_hash exist,\n-    //        false if tablet with same tablet_id but different schema_hash exist\n-    // during alter, if the tablet(same tabletid and schema hash) already exist\n-    // then just return true, if tablet id with different schema hash exist, wait report\n-    // task to delete the tablet\n-    if (_check_tablet_id_exist_unlocked(request.tablet_id)) {\n-        TabletSharedPtr tablet = _get_tablet_unlocked(\n-                request.tablet_id, request.tablet_schema.schema_hash);\n+\n+    int64_t tablet_id = request.tablet_id;\n+    int32_t schema_hash = request.tablet_schema.schema_hash;\n+    LOG(INFO) << \"begin to create tablet. tablet_id=\" << tablet_id\n+              << \", schema_hash=\" << schema_hash;\n+\n+    WriteLock wrlock(&_tablet_map_lock);\n+    // Make create_tablet operation to be idempotent:\n+    // 1. Return true if tablet with same tablet_id and schema_hash exist;\n+    //           false if tablet with same tablet_id but different schema_hash exist.\n+    // 2. When this is an alter task, if the tablet(both tablet_id and schema_hash are\n+    // same) already exist, then just return true(an duplicate request). But if\n+    // tablet_id exist but with different schema_hash, return an error(report task will\n+    // eventually trigger its deletion).\n+    if (_check_tablet_id_exist_unlocked(tablet_id)) {\n+        TabletSharedPtr tablet = _get_tablet_unlocked(tablet_id, schema_hash);\n         if (tablet != nullptr) {\n-            LOG(INFO) << \"create tablet success because tablet already exist. tablet_id=\"\n-                    << request.tablet_id;\n+            LOG(INFO) << \"success to create tablet. tablet already exist. tablet_id=\" << tablet_id;\n             return OLAP_SUCCESS;\n         } else {\n-            LOG(WARNING) << \"tablet with different schema hash already exists. tablet_id=\"\n-                    << request.tablet_id;\n+            LOG(WARNING) << \"fail to create tablet. tablet exist but with different schema_hash. \"\n+                    << \"tablet_id=\" << tablet_id << \", schema_hash=\" << schema_hash;\n+            DorisMetrics::create_tablet_requests_failed.increment(1);\n             return OLAP_ERR_CE_TABLET_ID_EXIST;\n         }\n     }\n \n-    TabletSharedPtr ref_tablet = nullptr;\n-    bool is_schema_change_tablet = false;\n-    // if the CreateTabletReq has base_tablet_id then it is a alter tablet request\n+    TabletSharedPtr base_tablet = nullptr;\n+    bool is_schema_change = false;\n+    // If the CreateTabletReq has base_tablet_id then it is a alter-tablet request\n     if (request.__isset.base_tablet_id && request.base_tablet_id > 0) {\n-        is_schema_change_tablet = true;\n-        ref_tablet = _get_tablet_unlocked(request.base_tablet_id, request.base_schema_hash);\n-        if (ref_tablet == nullptr) {\n-            LOG(WARNING) << \"fail to create new tablet. new_tablet_id=\" << request.tablet_id\n-                         << \", new_schema_hash=\" << request.tablet_schema.schema_hash\n-                         << \", because could not find base tablet, base_tablet_id=\" << request.base_tablet_id\n+        is_schema_change = true;\n+        base_tablet = _get_tablet_unlocked(request.base_tablet_id, request.base_schema_hash);\n+        if (base_tablet == nullptr) {\n+            LOG(WARNING) << \"fail to create tablet(change schema), base tablet does not exist. \"\n+                         << \"new_tablet_id=\" << tablet_id << \", new_schema_hash=\" << schema_hash\n+                         << \", base_tablet_id=\" << request.base_tablet_id\n                          << \", base_schema_hash=\" << request.base_schema_hash;\n+            DorisMetrics::create_tablet_requests_failed.increment(1);\n             return OLAP_ERR_TABLE_CREATE_META_ERROR;\n         }\n-        // schema change should use the same data dir\n+        // If we are doing schema-change, we should use the same data dir\n+        // TODO(lingbin): A litter trick here, the directory should be determined before\n+        // entering this method\n         stores.clear();\n-        stores.push_back(ref_tablet->data_dir());\n+        stores.push_back(base_tablet->data_dir());\n     }\n \n-    // set alter type to schema change. it is useless\n-    TabletSharedPtr tablet = _internal_create_tablet_unlocked(AlterTabletType::SCHEMA_CHANGE, request,\n-        is_schema_change_tablet, ref_tablet, stores);\n+    // set alter type to schema-change. it is useless\n+    TabletSharedPtr tablet = _internal_create_tablet_unlocked(\n+            AlterTabletType::SCHEMA_CHANGE, request, is_schema_change, base_tablet.get(), stores);\n     if (tablet == nullptr) {\n-        res = OLAP_ERR_CE_CMD_PARAMS_ERROR;\n-        LOG(WARNING) << \"fail to create tablet. res=\" << res;\n+        LOG(WARNING) << \"fail to create tablet. tablet_id=\" << request.tablet_id;\n+        DorisMetrics::create_tablet_requests_failed.increment(1);\n+        return OLAP_ERR_CE_CMD_PARAMS_ERROR;\n     }\n \n-    LOG(INFO) << \"finish to process create tablet. res=\" << res;\n-    return res;\n-} // create_tablet\n+    LOG(INFO) << \"success to create tablet. tablet_id=\" << tablet_id\n+              << \", schema_hash=\" << schema_hash;\n+    return OLAP_SUCCESS;\n+}\n \n TabletSharedPtr TabletManager::_internal_create_tablet_unlocked(\n         const AlterTabletType alter_type, const TCreateTabletReq& request,\n-        const bool is_schema_change_tablet, const TabletSharedPtr ref_tablet,\n-        std::vector<DataDir*> data_dirs) {\n-    DCHECK((is_schema_change_tablet && ref_tablet != nullptr)\n-            || (!is_schema_change_tablet && ref_tablet == nullptr));\n-    // check if the tablet with specified tablet id and schema hash already exists\n-    auto checked_tablet = _get_tablet_unlocked(request.tablet_id, request.tablet_schema.schema_hash);\n-    if (checked_tablet != nullptr) {\n-        LOG(WARNING) << \"failed to create tablet because tablet already exist.\"\n-                     << \" tablet id = \" << request.tablet_id\n-                     << \" schema hash = \" << request.tablet_schema.schema_hash;\n-        return nullptr;\n-    }\n-    bool is_tablet_added = false;\n-    auto tablet = _create_tablet_meta_and_dir_unlocked(request, is_schema_change_tablet, ref_tablet, data_dirs);\n+        const bool is_schema_change, const Tablet* base_tablet,\n+        const std::vector<DataDir*>& data_dirs) {\n+    // If in schema-change state, base_tablet must also be provided.\n+    // i.e., is_schema_change and base_tablet are either assigned or not assigned\n+    DCHECK((is_schema_change && base_tablet) || (!is_schema_change && !base_tablet));\n+\n+    // NOTE: The existence of tablet_id and schema_hash has already been checked,\n+    // no need check again here.\n+\n+    auto tablet = _create_tablet_meta_and_dir_unlocked(request, is_schema_change,\n+                                                       base_tablet, data_dirs);\n     if (tablet == nullptr) {\n         return nullptr;\n     }\n \n+    int64_t new_tablet_id = request.tablet_id;\n+    int32_t new_schema_hash = request.tablet_schema.schema_hash;\n+\n+    // should remove the tablet's pending_id no matter create-tablet success or not\n+    DataDir* data_dir = tablet->data_dir();\n+    std::shared_ptr<void> __defer(nullptr, [&](...) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwMjMxOA=="}, "originalCommit": {"oid": "708c46ba1237cae4d9f701bb2b06a446c9a02839"}, "originalPosition": 355}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2243, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}