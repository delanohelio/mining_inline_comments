{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDk4NTcw", "number": 3036, "title": "Support different keys type between mv and base table", "bodyText": "Firstly, add materialized index meta in olap table\nThe materialized index meta include index name, schema, schemahash, keystype etc.\nThe information itself scattered in each map is encapsulated into MaterializedIndexMeta.\nAlso the keys type of index meta maybe not same as keys type of base index after materialized view enabled.\nSecondly, support the deduplicate mv.\nIf there is group by or aggregation function in create mv stmt, the keys type of mv is agg.\nAt the same time, the keys type of base table is duplicate.\nFor example\nDuplicate table (k1, k2, v1)\nMV (k1, k2) group by k1, k2\nIt should be aggregated during executing mv.", "createdAt": "2020-03-04T11:35:48Z", "url": "https://github.com/apache/incubator-doris/pull/3036", "merged": true, "mergeCommit": {"oid": "7b30bbea420b818a49607dff55afee1cb578a152"}, "closed": true, "closedAt": "2020-03-05T10:19:19Z", "author": {"login": "EmmyMiao87"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKSy61AH2gAyMzgzNDk4NTcwOmRhZDdiZTIyYjNiODRhYzgyNThlM2IwZmNkYjc1NDIzMDM0OGE1N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKozjLAFqTM2OTQ0NjQzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/dad7be22b3b84ac8258e3b0fcdb754230348a57a", "committedDate": "2020-03-04T08:39:14Z", "message": "Support different keys type between mv and base table\n\nFirstly, add materialized index meta in olap table\n\nThe materialized index meta include index name, schema, schemahash, keystype etc.\nThe information itself scattered in each map is encapsulated into MaterializedIndexMeta.\n\nAlso the keys type of index meta maybe not same as keys type of base index after materialized view enabled.\n\nSecondly, support the deduplicate mv.\nIf there is group by or aggregation function in create mv stmt, the keys type of mv is agg.\nAt the same time, the keys type of base table is duplicate.\nFor example\nDuplicate table (k1, k2, v1)\nMV (k1, k2) group by k1, k2\nIt should be aggregated during executing mv."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzczNzQ1", "url": "https://github.com/apache/incubator-doris/pull/3036#pullrequestreview-368773745", "createdAt": "2020-03-04T13:26:23Z", "commit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoyNjoyM1rOFxtIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyMDowMVrOFxvCIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDA0OA==", "bodyText": "Use GSON to serde", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387664048", "createdAt": "2020-03-04T13:26:23Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/MaterializedIndexMeta.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.thrift.TStorageType;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class MaterializedIndexMeta implements Writable {\n+    private long indexId;\n+    private String indexName;\n+    private List<Column> schema = Lists.newArrayList();\n+    private int schemaVersion;\n+    private int schemaHash;\n+    private short shortKeyColumnCount;\n+    private TStorageType storageType;\n+    private KeysType keysType;\n+\n+    public MaterializedIndexMeta(long indexId, String indexName, List<Column> schema, int schemaVersion, int\n+            schemaHash, short shortKeyColumnCount, TStorageType storageType, KeysType keysType) {\n+        this.indexId = indexId;\n+        Preconditions.checkState(indexName != null);\n+        this.indexName = indexName;\n+        Preconditions.checkState(schema != null);\n+        Preconditions.checkState(schema.size() != 0);\n+        this.schema = schema;\n+        this.schemaVersion = schemaVersion;\n+        this.schemaHash = schemaHash;\n+        this.shortKeyColumnCount = shortKeyColumnCount;\n+        Preconditions.checkState(storageType != null);\n+        this.storageType = storageType;\n+        Preconditions.checkState(keysType != null);\n+        this.keysType = keysType;\n+    }\n+\n+    public long getIndexId() {\n+        return indexId;\n+    }\n+\n+    public String getIndexName() {\n+        return indexName;\n+    }\n+\n+    public KeysType getKeysType() {\n+        return keysType;\n+    }\n+\n+    public void setKeysType(KeysType keysType) {\n+        this.keysType = keysType;\n+    }\n+\n+    public TStorageType getStorageType() {\n+        return storageType;\n+    }\n+\n+    public List<Column> getSchema() {\n+        return schema;\n+    }\n+\n+    public int getSchemaHash() {\n+        return schemaHash;\n+    }\n+\n+    public short getShortKeyColumnCount() {\n+        return shortKeyColumnCount;\n+    }\n+\n+    public int getSchemaVersion() {\n+        return schemaVersion;\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NTc2Mg==", "bodyText": "Delete if not use", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387665762", "createdAt": "2020-03-04T13:29:26Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -133,12 +122,12 @@\n     public OlapTable() {\n         // for persist\n         super(TableType.OLAP);\n-        this.indexIdToSchema = new HashMap<Long, List<Column>>();\n-        this.indexIdToSchemaHash = new HashMap<Long, Integer>();\n-        this.indexIdToSchemaVersion = new HashMap<Long, Integer>();\n-\n-        this.indexIdToShortKeyColumnCount = new HashMap<Long, Short>();\n-        this.indexIdToStorageType = new HashMap<Long, TStorageType>();\n+//        this.indexIdToSchema = new HashMap<Long, List<Column>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NjIyMw==", "bodyText": "Duplicated", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387666223", "createdAt": "2020-03-04T13:30:23Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -166,13 +155,6 @@ public OlapTable(long id, String tableName, List<Column> baseSchema, KeysType ke\n \n         this.state = OlapTableState.NORMAL;\n \n-        this.indexIdToSchema = new HashMap<Long, List<Column>>();\n-        this.indexIdToSchemaHash = new HashMap<Long, Integer>();\n-        this.indexIdToSchemaVersion = new HashMap<Long, Integer>();\n-\n-        this.indexIdToShortKeyColumnCount = new HashMap<Long, Short>();\n-        this.indexIdToStorageType = new HashMap<Long, TStorageType>();\n-\n         this.indexNameToId = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3MTkyMQ==", "bodyText": "change method name", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387671921", "createdAt": "2020-03-04T13:40:47Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -343,11 +330,11 @@ public String getIndexNameById(long indexId) {\n         return null;\n     }\n \n-    public Map<Long, List<Column>> getVisibleIndexIdToSchema() {\n-        Map<Long, List<Column>> visibleMVs = Maps.newHashMap();\n+    public Map<Long, MaterializedIndexMeta> getVisibleIndexIdToSchema() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3NDM0OQ==", "bodyText": "index may not exist. you should check it.", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387674349", "createdAt": "2020-03-04T13:45:10Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -501,61 +506,25 @@ public Status resetIdsForRestore(Catalog catalog, Database db, int restoreReplic\n         return keyColumns;\n     }\n \n-    // schema version\n-    public int getSchemaVersionByIndexId(Long indexId) {\n-        if (indexIdToSchemaVersion.containsKey(indexId)) {\n-            return indexIdToSchemaVersion.get(indexId);\n-        }\n-        return -1;\n-    }\n-\n     // schemaHash\n     public Map<Long, Integer> getIndexIdToSchemaHash() {\n-        return indexIdToSchemaHash;\n-    }\n-\n-    public Map<Long, Integer> getCopiedIndexIdToSchemaHash() {\n-        return new HashMap<>(indexIdToSchemaHash);\n-    }\n-\n-    public int getSchemaHashByIndexId(Long indexId) {\n-        if (indexIdToSchemaHash.containsKey(indexId)) {\n-            return indexIdToSchemaHash.get(indexId);\n+        Map<Long, Integer> result = Maps.newHashMap();\n+        for (Map.Entry<Long, MaterializedIndexMeta> entry : indexIdToMeta.entrySet()) {\n+            result.put(entry.getKey(), entry.getValue().getSchemaHash());\n         }\n-        return -1;\n-    }\n-\n-    // short key\n-    public Map<Long, Short> getIndexIdToShortKeyColumnCount() {\n-        return indexIdToShortKeyColumnCount;\n-    }\n-\n-    public Map<Long, Short> getCopiedIndexIdToShortKeyColumnCount() {\n-        return new HashMap<>(indexIdToShortKeyColumnCount);\n+        return result;\n     }\n \n-    public short getShortKeyColumnCountByIndexId(Long indexId) {\n-        if (indexIdToShortKeyColumnCount.containsKey(indexId)) {\n-            return indexIdToShortKeyColumnCount.get(indexId);\n+    public int getSchemaHashByIndexId(Long indexId) {\n+        MaterializedIndexMeta indexMeta = indexIdToMeta.get(indexId);\n+        if (indexMeta == null) {\n+            return -1;\n         }\n-        return (short) -1;\n-    }\n-\n-    // storage type\n-    public Map<Long, TStorageType> getIndexIdToStorageType() {\n-        return indexIdToStorageType;\n-    }\n-\n-    public Map<Long, TStorageType> getCopiedIndexIdToStorageType() {\n-        return new HashMap<>(indexIdToStorageType);\n-    }\n-\n-    public void setStorageTypeToIndex(Long indexId, TStorageType storageType) {\n-        indexIdToStorageType.put(indexId, storageType);\n+        return indexMeta.getSchemaHash();\n     }\n \n     public TStorageType getStorageTypeByIndexId(Long indexId) {\n-        return indexIdToStorageType.get(indexId);\n+        return indexIdToMeta.get(indexId).getStorageType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzQyMQ==", "bodyText": "Why setting mvKeysType again since you already set it before?\nDo we allowed user create mv like select k1, k2, sum(v1) without group by clause?", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387687421", "createdAt": "2020-03-04T14:07:09Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -188,6 +189,7 @@ else if (functionChild0 instanceof CastExpr\n                                                         + \"Error function: \" + functionCallExpr.toSqlImpl());\n                 }\n                 meetAggregate = true;\n+                mvKeysType = KeysType.AGG_KEYS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTUyMg==", "bodyText": "How about passing the olapTable's key type instead of null?", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387691522", "createdAt": "2020-03-04T14:14:17Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -260,7 +260,7 @@ public void processBatchAddRollup(List<AlterClause> alterClauses, Database db, O\n \n                 // step 3 create rollup job\n                 RollupJobV2 alterJobV2 = createMaterializedViewJob(rollupIndexName, baseIndexName, rollupSchema, addRollupClause.getProperties(),\n-                        olapTable, db, baseIndexId);\n+                        olapTable, db, baseIndexId, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NTEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Long, MaterializedIndexMeta> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();\n          \n          \n            \n                    Map<Long, MaterializedIndexMeta> candidateIndexIdToMeta = scanNode.getOlapTable().getVisibleIndexIdToSchema();", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387695139", "createdAt": "2020-03-04T14:20:01Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/MaterializedViewSelector.java", "diffHunk": "@@ -115,14 +116,14 @@ public BestIndexInfo selectBestMV(ScanNode scanNode) throws UserException {\n \n     private Map<Long, List<Column>> predicates(OlapScanNode scanNode) {\n         // Step1: all of predicates is compensating predicates\n-        Map<Long, List<Column>> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();\n+        Map<Long, MaterializedIndexMeta> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b27732f83d4e2696d3d491bb1a78b66e68f2720", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/5b27732f83d4e2696d3d491bb1a78b66e68f2720", "committedDate": "2020-03-05T02:52:01Z", "message": "Change to agg_key when aggregation info is not null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef5ecde17b83a336c8ad071304a70d51ce7c957", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/3ef5ecde17b83a336c8ad071304a70d51ce7c957", "committedDate": "2020-03-05T08:29:26Z", "message": "Add unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDQ2NDM3", "url": "https://github.com/apache/incubator-doris/pull/3036#pullrequestreview-369446437", "createdAt": "2020-03-05T10:17:50Z", "commit": {"oid": "3ef5ecde17b83a336c8ad071304a70d51ce7c957"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}