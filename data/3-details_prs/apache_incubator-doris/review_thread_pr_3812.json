{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjc0NDc1", "number": 3812, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDoxN1rOED6IrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNjo0MFrOEEVpYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTMzNjc3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDoxN1rOGhM9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDoxN1rOGhM9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");\n          \n          \n            \n                                    throw new AnalysisException(\"Float or double can not used as a sort key, use decimal instead.\");", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437468475", "createdAt": "2020-06-09T14:30:17Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -235,6 +236,9 @@ private void analyzeOrderByClause() throws AnalysisException {\n                     if (mvColumnItem.getAggregationType() != null) {\n                         break;\n                     }\n+                    if (mvColumnItem.getType().isFloatingPointType()) {\n+                        throw new AnalysisException(\"Float or double can not used as a key, use decimal instead.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "881a1c0bc9d844a2a584b3a5dd25298b54f58825"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTM2MTAxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozNTozMVrOGhNMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyNTowNlrOGhip7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MjQ1OA==", "bodyText": "We should be break if we met a floating point type column. The following case will get wrong result in your logic:\nk1 int, k2 float, k3 int", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437472458", "createdAt": "2020-06-09T14:35:31Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -255,10 +259,15 @@ private void analyzeOrderByClause() throws AnalysisException {\n                 MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n                 Expr resultColumn = selectStmt.getResultExprs().get(i);\n                 keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n+                if ((!mvColumnItem.getType().isFloatingPointType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "881a1c0bc9d844a2a584b3a5dd25298b54f58825"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzk4Mg==", "bodyText": "Why?", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437823982", "createdAt": "2020-06-10T02:25:06Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -255,10 +259,15 @@ private void analyzeOrderByClause() throws AnalysisException {\n                 MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n                 Expr resultColumn = selectStmt.getResultExprs().get(i);\n                 keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n+                if ((!mvColumnItem.getType().isFloatingPointType())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MjQ1OA=="}, "originalCommit": {"oid": "881a1c0bc9d844a2a584b3a5dd25298b54f58825"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODIwMzc4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1MTo1NlrOGhpFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1MTo1NlrOGhpFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyOTI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n          \n          \n            \n                                        || (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437929258", "createdAt": "2020-06-10T07:51:56Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -554,28 +554,42 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                int keyStorageLayoutBytes = 0;\n+                // check the column meta\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n-                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    if(changeStorageFormat) {\n-                        rollupColumn.setIsKey(baseColumn.isKey());\n-                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n-                    } else if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                            || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                        rollupColumn.setIsKey(true);\n-                        rollupColumn.setAggregationType(null, false);\n-                    } else {\n-                        rollupColumn.setIsKey(false);\n-                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n-                    }\n                     rollupSchema.add(rollupColumn);\n                 }\n+                if (changeStorageFormat) {\n+                    return rollupSchema;\n+                }\n+                // Supplement short key of MV columns\n+                int theBeginIndexOfValue = 0;\n+                int keyStorageLayoutBytes = 0;\n+                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n+                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n+                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n+                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n+                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n+                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d63c9a83c59b44580154593cc79a1af24669cc9e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODIwNzIyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1Mjo1NFrOGhpHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1Mjo1NFrOGhpHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyOTgwNg==", "bodyText": "use decimal instead can be removed. Because user has no choice.", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437929806", "createdAt": "2020-06-10T07:52:54Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -554,28 +554,42 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n         } else if (KeysType.DUP_KEYS == keysType) {\n             // supplement the duplicate key\n             if (addRollupClause.getDupKeys() == null || addRollupClause.getDupKeys().isEmpty()) {\n-                int keyStorageLayoutBytes = 0;\n+                // check the column meta\n                 for (int i = 0; i < rollupColumnNames.size(); i++) {\n                     String columnName = rollupColumnNames.get(i);\n                     Column baseColumn = baseColumnNameToColumn.get(columnName);\n                     if (baseColumn == null) {\n                         throw new DdlException(\"Column[\" + columnName + \"] does not exist in base index\");\n                     }\n-                    keyStorageLayoutBytes += baseColumn.getType().getStorageLayoutBytes();\n                     Column rollupColumn = new Column(baseColumn);\n-                    if(changeStorageFormat) {\n-                        rollupColumn.setIsKey(baseColumn.isKey());\n-                        rollupColumn.setAggregationType(baseColumn.getAggregationType(), true);\n-                    } else if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                            || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                        rollupColumn.setIsKey(true);\n-                        rollupColumn.setAggregationType(null, false);\n-                    } else {\n-                        rollupColumn.setIsKey(false);\n-                        rollupColumn.setAggregationType(AggregateType.NONE, true);\n-                    }\n                     rollupSchema.add(rollupColumn);\n                 }\n+                if (changeStorageFormat) {\n+                    return rollupSchema;\n+                }\n+                // Supplement short key of MV columns\n+                int theBeginIndexOfValue = 0;\n+                int keyStorageLayoutBytes = 0;\n+                for (; theBeginIndexOfValue < rollupSchema.size(); theBeginIndexOfValue++) {\n+                    Column rollupColumn = rollupSchema.get(theBeginIndexOfValue);\n+                    keyStorageLayoutBytes += rollupColumn.getType().getStorageLayoutBytes();\n+                    if (rollupColumn.getType().getPrimitiveType().isFloatingPointType()\n+                            || ((theBeginIndexOfValue + 1) > FeConstants.shortkey_max_column_count)\n+                            && (keyStorageLayoutBytes > FeConstants.shortkey_maxsize_bytes)) {\n+                        break;\n+                    }\n+                    rollupColumn.setIsKey(true);\n+                    rollupColumn.setAggregationType(null, false);\n+                }\n+                if (theBeginIndexOfValue == 0) {\n+                    throw new DdlException(\"The first column could not be float or double, use decimal instead.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d63c9a83c59b44580154593cc79a1af24669cc9e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODIxMTM4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1NDowNlrOGhpJ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1NDowNlrOGhpJ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMDQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        supplyShortKey();\n          \n          \n            \n                        selectShortKey();", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r437930490", "createdAt": "2020-06-10T07:54:06Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -226,49 +224,14 @@ private void analyzeFromClause() throws AnalysisException {\n \n     private void analyzeOrderByClause() throws AnalysisException {\n         if (selectStmt.getOrderByElements() == null) {\n-            /**\n-             * The keys type of Materialized view is aggregation.\n-             * All of group by columns are keys of materialized view.\n-             */\n-            if (mvKeysType == KeysType.AGG_KEYS) {\n-                for (MVColumnItem mvColumnItem : mvColumnItemList) {\n-                    if (mvColumnItem.getAggregationType() != null) {\n-                        break;\n-                    }\n-                    mvColumnItem.setIsKey(true);\n-                }\n-                return;\n-            }\n-\n-            /**\n-             * There is no aggregation function in materialized view.\n-             * Supplement key of MV columns\n-             * For example: select k1, k2 ... kn from t1\n-             * The default key columns are first 36 bytes of the columns in define order.\n-             * If the number of columns in the first 36 is less than 3, the first 3 columns will be used.\n-             * column: k1, k2, k3... km. The key is true.\n-             * Supplement non-key of MV columns\n-             * column: km... kn. The key is false, aggregation type is none, isAggregationTypeImplicit is true.\n-             */\n-            int keyStorageLayoutBytes = 0;\n-            for (int i = 0; i < selectStmt.getResultExprs().size(); i++) {\n-                MVColumnItem mvColumnItem = mvColumnItemList.get(i);\n-                Expr resultColumn = selectStmt.getResultExprs().get(i);\n-                keyStorageLayoutBytes += resultColumn.getType().getStorageLayoutBytes();\n-                if ((i + 1) <= FeConstants.shortkey_max_column_count\n-                        || keyStorageLayoutBytes < FeConstants.shortkey_maxsize_bytes) {\n-                    mvColumnItem.setIsKey(true);\n-                } else {\n-                    mvColumnItem.setAggregationType(AggregateType.NONE, true);\n-                }\n-            }\n+            supplyShortKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d63c9a83c59b44580154593cc79a1af24669cc9e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTg0NDE4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNjo0MFrOGh5YNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNjo0MFrOGh5YNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NjI3Nw==", "bodyText": "Not use it?", "url": "https://github.com/apache/incubator-doris/pull/3812#discussion_r438196277", "createdAt": "2020-06-10T15:06:40Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -68,9 +69,9 @@\n     private String baseIndexName;\n     private String dbName;\n     private KeysType mvKeysType = KeysType.DUP_KEYS;\n+    private int shortKeyColumnCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0b13ca9ee44d5a11a8a3d96307b9f6f13d6b10"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1483, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}