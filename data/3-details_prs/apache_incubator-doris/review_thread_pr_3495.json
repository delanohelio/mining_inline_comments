{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTg5MDEz", "number": 3495, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxMjowM1rOD54-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxMjowM1rOD54-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDI4ODU0OnYy", "diffSide": "RIGHT", "path": "be/src/util/path_util.cpp", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxMjowM1rOGRanag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzozMTo0MFrOGS4KyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA==", "bodyText": "Would better change to\nstring dir_name(const string& path) {\n    std::vector<char> path_copy(path.c_str(), path.c_str() + path.size() + 1);\n    return dirname(&path_copy[0]);\n}\n\nstring base_name(const string& path) {\n    std::vector<char> path_copy(path.c_str(), path.c_str() + path.size() + 1);\n    return basename(&path_copy[0]);\n}", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r420915050", "createdAt": "2020-05-06T16:12:03Z", "author": {"login": "kangkaisen"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4MTU2NA==", "bodyText": "std::vector path_copy(path.c_str(), path.c_str() + path.size() + 1);\n\nwhat you want to mean is that std::vector<char> path_copy(path.begin(), path.end())", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r421181564", "createdAt": "2020-05-07T01:12:24Z", "author": {"login": "imay"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4NzQ1NQ==", "bodyText": "en. These are the same.", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r421187455", "createdAt": "2020-05-07T01:32:37Z", "author": {"login": "kangkaisen"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNzY3OQ==", "bodyText": "this problem i have fixed in pr #3424, but it not has been merged", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r421217679", "createdAt": "2020-05-07T03:28:48Z", "author": {"login": "yangzhg"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyMzA2Ng==", "bodyText": "Would better change to\nstring dir_name(const string& path) {\n    std::vector<char> path_copy(path.c_str(), path.c_str() + path.size() + 1);\n    return dirname(&path_copy[0]);\n}\n\nstring base_name(const string& path) {\n    std::vector<char> path_copy(path.c_str(), path.c_str() + path.size() + 1);\n    return basename(&path_copy[0]);\n}\n\n\nASAN will report an error if using std::vector<char>, seems '\\0' is not found when pass &path_copy[0] to a char* parameter.\n$ ./be/build/test/util/path_util_test\n[==========] Running 5 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 5 tests from TestPathUtil\n[ RUN      ] TestPathUtil.JoinPathSegments\n[       OK ] TestPathUtil.JoinPathSegments (0 ms)\n[ RUN      ] TestPathUtil.BaseNameTest\n=================================================================\n==133070==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000b91 at pc 0x000000502ca4 bp 0x7ffc412f28b0 sp 0x7ffc412f2060\nREAD of size 2 at 0x602000000b91 thread T0\n    #0 0x502ca3 in __interceptor_strlen ../../.././libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:225\n    #1 0x5f4edf in std::char_traits<char>::length(char const*) /usr/include/c++/7.3.0/bits/char_traits.h:320\n    #2 0x5f4edf in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) /usr/include/c++/7.3.0/bits/basic_string.h:511\n    #3 0x5f4edf in doris::path_util::base_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/laiyingchun/ap_doris/be/src/util/path_util.cpp:80\n    #4 0x5da0fa in doris::TestPathUtil_BaseNameTest_Test::TestBody() /home/laiyingchun/ap_doris/be/test/util/path_util_test.cpp:44\n    #5 0x6c6d54 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c6d54)\n    #6 0x6c15ad in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c15ad)\n    #7 0x6a686f in testing::Test::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a686f)\n    #8 0x6a70f1 in testing::TestInfo::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a70f1)\n    #9 0x6a7748 in testing::TestCase::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a7748)\n    #10 0x6ae2bc in testing::internal::UnitTestImpl::RunAllTests() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6ae2bc)\n    #11 0x6c7d6a in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c7d6a)\n    #12 0x6c22f9 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c22f9)\n    #13 0x6acf93 in testing::UnitTest::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6acf93)\n    #14 0x5c9801 in RUN_ALL_TESTS() /home/laiyingchun/ap_doris/thirdparty/installed/include/gtest/gtest.h:2233\n    #15 0x5c9801 in main /home/laiyingchun/ap_doris/be/test/util/path_util_test.cpp:113\n    #16 0x7fec8e60f504 in __libc_start_main (/lib64/libc.so.6+0x22504)\n    #17 0x4d3f64  (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x4d3f64)\n\n0x602000000b91 is located 0 bytes to the right of 1-byte region [0x602000000b90,0x602000000b91)\nallocated by thread T0 here:\n    #0 0x58e620 in operator new(unsigned long) ../../.././libsanitizer/asan/asan_new_delete.cc:80\n    #1 0x5f4f73 in __gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*) /usr/include/c++/7.3.0/ext/new_allocator.h:111\n    #2 0x5f4f73 in std::allocator_traits<std::allocator<char> >::allocate(std::allocator<char>&, unsigned long) /usr/include/c++/7.3.0/bits/alloc_traits.h:436\n    #3 0x5f4f73 in std::_Vector_base<char, std::allocator<char> >::_M_allocate(unsigned long) /usr/include/c++/7.3.0/bits/stl_vector.h:172\n    #4 0x5f4f73 in void std::vector<char, std::allocator<char> >::_M_range_initialize<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag) /usr/include/c++/7.3.0/bits/stl_vector.h:1323\n    #5 0x5f4f73 in void std::vector<char, std::allocator<char> >::_M_initialize_dispatch<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__false_type) /usr/include/c++/7.3.0/bits/stl_vector.h:1299\n    #6 0x5f4f73 in std::vector<char, std::allocator<char> >::vector<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&) /usr/include/c++/7.3.0/bits/stl_vector.h:414\n    #7 0x5f4f73 in doris::path_util::base_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/laiyingchun/ap_doris/be/src/util/path_util.cpp:79\n    #8 0x5da0fa in doris::TestPathUtil_BaseNameTest_Test::TestBody() /home/laiyingchun/ap_doris/be/test/util/path_util_test.cpp:44\n    #9 0x6c6d54 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c6d54)\n    #10 0x6c15ad in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c15ad)\n    #11 0x6a686f in testing::Test::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a686f)\n    #12 0x6a70f1 in testing::TestInfo::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a70f1)\n    #13 0x6a7748 in testing::TestCase::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6a7748)\n    #14 0x6ae2bc in testing::internal::UnitTestImpl::RunAllTests() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6ae2bc)\n    #15 0x6c7d6a in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c7d6a)\n    #16 0x6c22f9 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6c22f9)\n    #17 0x6acf93 in testing::UnitTest::Run() (/home/laiyingchun/ap_doris/be/build/test/util/path_util_test+0x6acf93)\n    #18 0x5c9801 in RUN_ALL_TESTS() /home/laiyingchun/ap_doris/thirdparty/installed/include/gtest/gtest.h:2233\n    #19 0x5c9801 in main /home/laiyingchun/ap_doris/be/test/util/path_util_test.cpp:113\n    #20 0x7fec8e60f504 in __libc_start_main (/lib64/libc.so.6+0x22504)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../.././libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:225 in __interceptor_strlen\nShadow bytes around the buggy address:\n  0x0c047fff8120: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00\n  0x0c047fff8130: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00\n  0x0c047fff8140: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00\n  0x0c047fff8150: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00\n  0x0c047fff8160: fa fa 00 00 fa fa 00 fa fa fa fd fd fa fa 00 00\n=>0x0c047fff8170: fa fa[01]fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff81a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff81b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff81c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==133070==ABORTING", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r421923066", "createdAt": "2020-05-08T03:56:55Z", "author": {"login": "acelyc111"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNTQyNg==", "bodyText": "? I change it to std::vector and ASAN work fine.\nI will test it.", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r422125426", "createdAt": "2020-05-08T12:52:57Z", "author": {"login": "kangkaisen"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4MzYzOA==", "bodyText": "? I change it to std::vector and ASAN work fine.\nI will test it.\n\n@kangkaisen Sorry I made a mistake, it works fine indeed to modify the code by your suggestion, but it report the error above by @imay 's.", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r422183638", "createdAt": "2020-05-08T14:43:11Z", "author": {"login": "acelyc111"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NzgxNw==", "bodyText": "Done", "url": "https://github.com/apache/incubator-doris/pull/3495#discussion_r422447817", "createdAt": "2020-05-09T03:31:40Z", "author": {"login": "acelyc111"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -70,13 +70,19 @@ vector<string> split_path(const string& path) {\n     return segments;\n }\n \n+struct FreeDeleter {\n+    inline void operator()(void* ptr) const {\n+        free(ptr);\n+    }\n+};\n+\n string dir_name(const string& path) {\n-    std::unique_ptr<char[]> path_copy(strdup(path.c_str()));\n+    std::unique_ptr<char[], FreeDeleter> path_copy(strdup(path.c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA1MA=="}, "originalCommit": {"oid": "8d8958227a41912f163bd4baa6df29a0fa784cd2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1756, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}