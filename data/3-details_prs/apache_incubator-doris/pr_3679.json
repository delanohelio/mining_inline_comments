{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTc4NzIw", "number": 3679, "title": "[DynamicPartition] Optimize the rule of creating dynamic partition", "bodyText": "Problem is described in ISSUE #3678\nThis CL mainly changed to rule of creating dynamic partition.\n\n\nIf time unit is DAY, the logic remains unchanged.\n\n\nIf time unit is WEEK, the logical changes are as follows:\n\nAllow to set the start day of every week, the default is Monday. Optional Monday to Sunday\nAssuming that the starting day is a Tuesday, the range of the partition is Tuesday of the week to Monday of the next week.\n\n\n\nIf time unit is MONTH, the logical changes are as follows:\n\nAllow to set the start date of each month. The default is 1st, and can be selected from 1st to 28th.\nAssuming that the starting date is the 2nd, the range of the partition is from the 2nd of this month to the 1st of the next month.\n\n\n\nThe SHOW DYNAMIC PARTITION TABLES statement adds a StartOf column to show the start day of week or month.\n\n\nIt is recommended to refer to the example in dynamic-partition.md to understand.\nTODO:\nBetter to support HOUR and YEAR time unit. Maybe in next PR.\nFIX: #3678", "createdAt": "2020-05-25T06:51:14Z", "url": "https://github.com/apache/incubator-doris/pull/3679", "merged": true, "mergeCommit": {"oid": "bc35f3a31f7004fd548a12c8dee3ab2e8c9e4f22"}, "closed": true, "closedAt": "2020-05-27T08:42:42Z", "author": {"login": "morningman"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckqHdbgH2gAyNDIyNTc4NzIwOjJjODYyZThiMDJhODQ1YmI0ZjUxYjU4OWM3MTRkMzgxYzEyNTUyYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclU6KxgFqTQxODk2Mzk1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c862e8b02a845bb4f51b589c714d381c12552be", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/2c862e8b02a845bb4f51b589c714d381c12552be", "committedDate": "2020-05-25T06:31:31Z", "message": "first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c78b750aaee376417b65afbc15eaed5d93169909", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/c78b750aaee376417b65afbc15eaed5d93169909", "committedDate": "2020-05-25T06:31:31Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7545b5c2d425d4f78258f9f0f5155ecaedd9bf74", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/7545b5c2d425d4f78258f9f0f5155ecaedd9bf74", "committedDate": "2020-05-25T06:31:31Z", "message": "add ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dd07388bd77297700ba5916b264819adbf49220", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/5dd07388bd77297700ba5916b264819adbf49220", "committedDate": "2020-05-25T06:31:31Z", "message": "add show info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/90faac2b361ab69034410d0dd0abf2136e657a6f", "committedDate": "2020-05-25T06:31:31Z", "message": "modify doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTQyNjQ5", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417542649", "createdAt": "2020-05-25T08:22:17Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoyMjoxOFrOGZ48KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoyMjoxOFrOGZ48KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwMDQ4OA==", "bodyText": "\u8fd9\u91cc\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u653e\u5f00\u9ed8\u8ba4\u4e3atrue?\u76ee\u524d\u5df2\u7ecf\u5b58\u5728\u4e86\u6bd4\u8f83\u957f\u7684\u65f6\u95f4\u4e86\uff0c\u6709\u4e9b\u7528\u6237\u53ef\u80fd\u4e0d\u4ed4\u7ec6\u770b\u6587\u6863\uff0c\u521b\u5efa\u4e86\u5206\u533a\u8868\u4f46\u662f\u6ca1\u6709\u4fee\u6539\u914d\u7f6e\uff0c\u9020\u6210\u4f7f\u7528\u4e0a\u7684\u4e00\u4e9b\u989d\u5916\u6210\u672c\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429800488", "createdAt": "2020-05-25T08:22:18Z", "author": {"login": "WingsGo"}, "path": "docs/zh-CN/administrator-guide/dynamic-partition.md", "diffHunk": "@@ -161,48 +281,26 @@ SHOW DYNAMIC PARTITION TABLES;\n \n * dynamic\\_partition\\_enable\n \n-    \u662f\u5426\u5f00\u542f Doris \u7684\u52a8\u6001\u5206\u533a\u529f\u80fd\u3002\u9ed8\u8ba4\u4e3a false\uff0c\u5373\u5173\u95ed\u3002\u8be5\u53c2\u6570\u53ea\u5f71\u54cd\u52a8\u6001\u5206\u533a\u8868\u7684\u5206\u533a\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u666e\u901a\u8868\u3002\n+    \u662f\u5426\u5f00\u542f Doris \u7684\u52a8\u6001\u5206\u533a\u529f\u80fd\u3002\u9ed8\u8ba4\u4e3a false\uff0c\u5373\u5173\u95ed\u3002\u8be5\u53c2\u6570\u53ea\u5f71\u54cd\u52a8\u6001\u5206\u533a\u8868\u7684\u5206\u533a\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u666e\u901a\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 fe.conf \u4e2d\u7684\u53c2\u6570\u5e76\u91cd\u542f FE \u751f\u6548\u3002\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6548\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 330}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTQ2MDI0", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417546024", "createdAt": "2020-05-25T08:27:52Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoyNzo1MlrOGZ5GyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoyNzo1MlrOGZ5GyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwMzIwOQ==", "bodyText": "\u5982\u679c\u547d\u4ee4\u51b2\u7a81\u65f6\uff0c\u8be5\u547d\u4ee4\u8fd4\u56de\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff1f\u5982\u679c\u8fd4\u56de\u6210\u529f\uff0c\u90a3\u4e9b\u9700\u8981\u8865\u9f50\u7684\u5206\u533a\u80fd\u5426\u81ea\u52a8\u5e2e\u52a9\u7528\u6237\u8865\u9f50\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429803209", "createdAt": "2020-05-25T08:27:52Z", "author": {"login": "wutiangan"}, "path": "docs/zh-CN/administrator-guide/dynamic-partition.md", "diffHunk": "@@ -41,117 +39,239 @@ under the License.\n \n \u5728\u67d0\u4e9b\u4f7f\u7528\u573a\u666f\u4e0b\uff0c\u7528\u6237\u4f1a\u5c06\u8868\u6309\u7167\u5929\u8fdb\u884c\u5206\u533a\u5212\u5206\uff0c\u6bcf\u5929\u5b9a\u65f6\u6267\u884c\u4f8b\u884c\u4efb\u52a1\uff0c\u8fd9\u65f6\u9700\u8981\u4f7f\u7528\u65b9\u624b\u52a8\u7ba1\u7406\u5206\u533a\uff0c\u5426\u5219\u53ef\u80fd\u7531\u4e8e\u4f7f\u7528\u65b9\u6ca1\u6709\u521b\u5efa\u5206\u533a\u5bfc\u81f4\u6570\u636e\u5bfc\u5165\u5931\u8d25\uff0c\u8fd9\u7ed9\u4f7f\u7528\u65b9\u5e26\u6765\u4e86\u989d\u5916\u7684\u7ef4\u62a4\u6210\u672c\u3002\n \n-\u5728\u5b9e\u73b0\u65b9\u5f0f\u4e0a, FE\u4f1a\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b\uff0c\u6839\u636efe.conf\u4e2d`dynamic_partition_enable` \u53ca `dynamic_partition_check_interval_seconds`\u53c2\u6570\u51b3\u5b9a\u8be5\u7ebf\u7a0b\u662f\u5426\u542f\u52a8\u4ee5\u53ca\u8be5\u7ebf\u7a0b\u7684\u8c03\u5ea6\u9891\u7387\u3002\u6bcf\u6b21\u8c03\u5ea6\u65f6\uff0c\u4f1a\u5728\u6ce8\u518c\u8868\u4e2d\u8bfb\u53d6\u52a8\u6001\u5206\u533a\u8868\u7684\u5c5e\u6027\uff0c\u5e76\u6839\u636e\u52a8\u6001\u5206\u533a\u5c5e\u6027\u52a8\u6001\u6dfb\u52a0\u53ca\u5220\u9664\u5206\u533a\u3002\n-\n-\u5efa\u8868\u65f6\uff0c\u5728properties\u4e2d\u6307\u5b9adynamic_partition\u5c5e\u6027\uff0cFE\u9996\u5148\u5bf9\u52a8\u6001\u5206\u533a\u5c5e\u6027\u8fdb\u884c\u89e3\u6790\uff0c\u6821\u9a8c\u8f93\u5165\u53c2\u6570\u7684\u5408\u6cd5\u6027\uff0c\u7136\u540e\u5c06\u5bf9\u5e94\u7684\u5c5e\u6027\u6301\u4e45\u5316\u5230FE\u7684\u5143\u6570\u636e\u4e2d\uff0c\u5e76\u5c06\u8be5\u8868\u6ce8\u518c\u5230\u52a8\u6001\u5206\u533a\u5217\u8868\u4e2d\uff0c\u540e\u53f0\u7ebf\u7a0b\u4f1a\u6839\u636e\u914d\u7f6e\u53c2\u6570\u5b9a\u671f\u5bf9\u52a8\u6001\u5206\u533a\u5217\u8868\u8fdb\u884c\u626b\u63cf\uff0c\u8bfb\u53d6\u8868\u7684\u52a8\u6001\u5206\u533a\u5c5e\u6027\uff0c\u6267\u884c\u6dfb\u52a0\u5206\u533a\u53ca\u5220\u9664\u5206\u533a\u7684\u4efb\u52a1\uff0c\u6bcf\u6b21\u7684\u8c03\u5ea6\u4fe1\u606f\u4f1a\u4fdd\u7559\u5728FE\u7684\u5185\u5b58\u4e2d\uff08\u91cd\u542f\u540e\u5219\u4e22\u5931\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7`SHOW DYNAMIC PARTITION TABLES`\u67e5\u770b\u8c03\u5ea6\u4efb\u52a1\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u5b58\u5728\u5206\u533a\u521b\u5efa\u6216\u5220\u9664\u5931\u8d25\uff0c\u4f1a\u5c06\u5931\u8d25\u4fe1\u606f\u8f93\u51fa\u3002\n+\u901a\u8fc7\u52a8\u6001\u5206\u533a\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u5efa\u8868\u65f6\u8bbe\u5b9a\u52a8\u6001\u5206\u533a\u7684\u89c4\u5219\u3002FE \u4f1a\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684\u89c4\u5219\u521b\u5efa\u6216\u5220\u9664\u5206\u533a\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5bf9\u73b0\u6709\u89c4\u5219\u8fdb\u884c\u53d8\u66f4\u3002\n \n ## \u4f7f\u7528\u65b9\u5f0f\n \n-### \u52a8\u6001\u5206\u533a\u5c5e\u6027\u53c2\u6570\u8bf4\u660e:\n+\u52a8\u6001\u5206\u533a\u7684\u89c4\u5219\u53ef\u4ee5\u5728\u5efa\u8868\u65f6\u6307\u5b9a\uff0c\u6216\u8005\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u4fee\u6539\u3002\u5f53\u524d\u4ec5\u652f\u6301\u5bf9\u5355\u5206\u533a\u5217\u7684\u5206\u533a\u8868\u8bbe\u5b9a\u52a8\u6001\u5206\u533a\u89c4\u5219\u3002\n+\n+* \u5efa\u8868\u65f6\u6307\u5b9a\uff1a\n+\n+    ```\n+    CREATE TABLE tbl1\n+    (...)\n+    PROPERTIES\n+    (\n+        \"dynamic_partition.prop1\" = \"value1\",\n+        \"dynamic_partition.prop2\" = \"value2\",\n+        ...\n+    )\n+    ```\n \n-`dynamic_partition.enable`: \u662f\u5426\u5f00\u542f\u52a8\u6001\u5206\u533a\u7279\u6027\uff0c\u53ef\u6307\u5b9a\u4e3a `TRUE` \u6216 `FALSE`\u3002\u5982\u679c\u4e0d\u586b\u5199\uff0c\u9ed8\u8ba4\u4e3a `TRUE`\u3002\n+* \u8fd0\u884c\u65f6\u4fee\u6539\n \n+    ```\n+    ALTER TABLE tbl1 SET\n+    (\n+        \"dynamic_partition.prop1\" = \"value1\",\n+        \"dynamic_partition.prop2\" = \"value2\",\n+        ...\n+    )\n+    ```\n \n-`dynamic_partition.time_unit`: \u52a8\u6001\u5206\u533a\u8c03\u5ea6\u7684\u5355\u4f4d\uff0c\u53ef\u6307\u5b9a\u4e3a `DAY` `WEEK` `MONTH`\uff0c\u5f53\u6307\u5b9a\u4e3a `DAY` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a`yyyyMMdd`\uff0c\u4f8b\u5982`20200325`\u3002\u5f53\u6307\u5b9a\u4e3a `WEEK` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a`yyyy_ww`\u5373\u5f53\u524d\u65e5\u671f\u5c5e\u4e8e\u8fd9\u4e00\u5e74\u7684\u7b2c\u51e0\u5468\uff0c\u4f8b\u5982 `2020-03-25` \u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u4e3a `2020_13`, \u8868\u660e\u76ee\u524d\u4e3a2020\u5e74\u7b2c13\u5468\u3002\u5f53\u6307\u5b9a\u4e3a `MONTH` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a `yyyyMM`\uff0c\u4f8b\u5982 `202003`\u3002\n+### \u52a8\u6001\u5206\u533a\u89c4\u5219\u53c2\u6570\n \n-`dynamic_partition.start`: \u52a8\u6001\u5206\u533a\u7684\u5f00\u59cb\u65f6\u95f4, \u4ee5\u5f53\u5929\u4e3a\u57fa\u51c6\uff0c\u8d85\u8fc7\u8be5\u65f6\u95f4\u8303\u56f4\u7684\u5206\u533a\u5c06\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u4e0d\u586b\u5199\uff0c\u5219\u9ed8\u8ba4\u4e3a`Integer.MIN_VALUE` \u5373 `-2147483648`\u3002\n+\u52a8\u6001\u5206\u533a\u7684\u89c4\u5219\u53c2\u6570\u90fd\u4ee5 `dynamic_partition.` \u4e3a\u524d\u7f00\uff1a\n \n+* `dynamic_partition.enable`\n \n-`dynamic_partition.end`: \u52a8\u6001\u5206\u533a\u7684\u7ed3\u675f\u65f6\u95f4, \u4ee5\u5f53\u5929\u4e3a\u57fa\u51c6\uff0c\u4f1a\u63d0\u524d\u521b\u5efaN\u4e2a\u5355\u4f4d\u7684\u5206\u533a\u8303\u56f4\u3002\n+    \u662f\u5426\u5f00\u542f\u52a8\u6001\u5206\u533a\u7279\u6027\u3002\u53ef\u6307\u5b9a\u4e3a `TRUE` \u6216 `FALSE`\u3002\u5982\u679c\u4e0d\u586b\u5199\uff0c\u9ed8\u8ba4\u4e3a `TRUE`\u3002\u5982\u679c\u4e3a `FALSE`\uff0c\u5219 Doris \u4f1a\u5ffd\u7565\u8be5\u8868\u7684\u52a8\u6001\u5206\u533a\u89c4\u5219\u3002\n \n-`dynamic_partition.prefix`: \u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u524d\u7f00\u3002\n+* `dynamic_partition.time_unit`\n \n-`dynamic_partition.buckets`: \u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u6240\u5bf9\u5e94\u7684\u5206\u6876\u6570\u91cf\u3002\n+    \u52a8\u6001\u5206\u533a\u8c03\u5ea6\u7684\u5355\u4f4d\u3002\u53ef\u6307\u5b9a\u4e3a `DAY`\u3001`WEEK`\u3001`MONTH`\u3002\u5206\u522b\u8868\u793a\u6309\u5929\u3001\u6309\u661f\u671f\u3001\u6309\u6708\u8fdb\u884c\u5206\u533a\u521b\u5efa\u6216\u5220\u9664\u3002\n     \n-### \u5efa\u8868\n+    \u5f53\u6307\u5b9a\u4e3a `DAY` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a `yyyyMMdd`\uff0c\u4f8b\u5982`20200325`\u3002\n+    \n+    \u5f53\u6307\u5b9a\u4e3a `WEEK` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a`yyyy_ww`\u3002\u5373\u5f53\u524d\u65e5\u671f\u5c5e\u4e8e\u8fd9\u4e00\u5e74\u7684\u7b2c\u51e0\u5468\uff0c\u4f8b\u5982 `2020-03-25` \u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u4e3a `2020_13`, \u8868\u660e\u76ee\u524d\u4e3a2020\u5e74\u7b2c13\u5468\u3002\n+    \n+    \u5f53\u6307\u5b9a\u4e3a `MONTH` \u65f6\uff0c\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u540e\u7f00\u683c\u5f0f\u4e3a `yyyyMM`\uff0c\u4f8b\u5982 `202003`\u3002\n \n-\u5efa\u8868\u65f6\uff0c\u53ef\u4ee5\u5728 `PROPERTIES` \u4e2d\u6307\u5b9a\u4ee5\u4e0b`dynamic_partition`\u5c5e\u6027\uff0c\u8868\u793a\u8fd9\u4e2a\u8868\u662f\u4e00\u4e2a\u52a8\u6001\u5206\u533a\u8868\u3002\n+* `dynamic_partition.start`\n \n-\u793a\u4f8b\uff1a\n+    \u52a8\u6001\u5206\u533a\u7684\u8d77\u59cb\u504f\u79fb\uff0c\u4e3a\u8d1f\u6570\u3002\u6839\u636e `time_unit` \u5c5e\u6027\u7684\u4e0d\u540c\uff0c\u4ee5\u5f53\u5929\uff08\u661f\u671f/\u6708\uff09\u4e3a\u57fa\u51c6\uff0c\u5206\u533a\u8303\u56f4\u5728\u6b64\u504f\u79fb\u4e4b\u524d\u7684\u5206\u533a\u5c06\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u4e0d\u586b\u5199\uff0c\u5219\u9ed8\u8ba4\u4e3a `-2147483648`\uff0c\u5373\u4e0d\u5220\u9664\u5386\u53f2\u5206\u533a\u3002\n+    \n+* `dynamic_partition.end`\n \n-```\n-CREATE TABLE example_db.dynamic_partition\n-(\n-k1 DATE,\n-k2 INT,\n-k3 SMALLINT,\n-v1 VARCHAR(2048),\n-v2 DATETIME DEFAULT \"2014-02-04 15:36:00\"\n-)\n-ENGINE=olap\n-DUPLICATE KEY(k1, k2, k3)\n-PARTITION BY RANGE (k1)\n-(\n-PARTITION p20200321 VALUES LESS THAN (\"2020-03-22\"),\n-PARTITION p20200322 VALUES LESS THAN (\"2020-03-23\"),\n-PARTITION p20200323 VALUES LESS THAN (\"2020-03-24\"),\n-PARTITION p20200324 VALUES LESS THAN (\"2020-03-25\")\n-)\n-DISTRIBUTED BY HASH(k2) BUCKETS 32\n-PROPERTIES(\n-\"storage_medium\" = \"SSD\",\n-\"dynamic_partition.enable\" = \"true\",\n-\"dynamic_partition.time_unit\" = \"DAY\",\n-\"dynamic_partition.start\" = \"-3\",\n-\"dynamic_partition.end\" = \"3\",\n-\"dynamic_partition.prefix\" = \"p\",\n-\"dynamic_partition.buckets\" = \"32\"\n- );\n-```\n-\u521b\u5efa\u4e00\u5f20\u52a8\u6001\u5206\u533a\u8868\uff0c\u6307\u5b9a\u5f00\u542f\u52a8\u6001\u5206\u533a\u7279\u6027\uff0c\u4ee5\u5f53\u5929\u4e3a2020-03-25\u4e3a\u4f8b\uff0c\u5728\u6bcf\u6b21\u8c03\u5ea6\u65f6\uff0c\u4f1a\u5220\u9664\u5206\u533a\u4e0a\u754c\u5c0f\u4e8e `2020-03-22` \u7684\u5206\u533a\uff0c\u4e3a\u4e86\u907f\u514d\u5220\u9664\u975e\u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\uff0c\u52a8\u6001\u5220\u9664\u5206\u533a\u53ea\u4f1a\u5220\u9664\u5206\u533a\u540d\u7b26\u5408\u52a8\u6001\u521b\u5efa\u5206\u533a\u89c4\u5219\u7684\u5206\u533a\uff0c\u4f8b\u5982\u5206\u533a\u540d\u4e3aa1, \u5219\u5373\u4f7f\u5206\u533a\u8303\u56f4\u5728\u5f85\u5220\u9664\u7684\u5206\u533a\u8303\u56f4\u5185\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u540c\u65f6\u5728\u8c03\u5ea6\u65f6\u4f1a\u63d0\u524d\u521b\u5efa\u4eca\u5929\u4ee5\u53ca\u4ee5\u540e3\u5929\uff08\u603b\u51714\u5929\uff09\u7684\u5206\u533a(\u82e5\u5206\u533a\u5df2\u5b58\u5728\u5219\u4f1a\u5ffd\u7565)\uff0c\u5206\u533a\u540d\u6839\u636e\u6307\u5b9a\u524d\u7f00\u5206\u522b\u4e3a`p20200325` `p20200326` `p20200327` `p20200328`,\u6bcf\u4e2a\u5206\u533a\u7684\u5206\u6876\u6570\u91cf\u4e3a32\u3002\u540c\u65f6\u4f1a\u5220\u9664 `p20200321` \u7684\u5206\u533a\uff0c\u6700\u7ec8\u7684\u5206\u533a\u8303\u56f4\u5982\u4e0b:\n-```\n-[types: [DATE]; keys: [2020-03-22]; \u2025types: [DATE]; keys: [2020-03-23]; )\n-[types: [DATE]; keys: [2020-03-23]; \u2025types: [DATE]; keys: [2020-03-24]; )\n-[types: [DATE]; keys: [2020-03-24]; \u2025types: [DATE]; keys: [2020-03-25]; )\n-[types: [DATE]; keys: [2020-03-25]; \u2025types: [DATE]; keys: [2020-03-26]; )\n-[types: [DATE]; keys: [2020-03-26]; \u2025types: [DATE]; keys: [2020-03-27]; )\n-[types: [DATE]; keys: [2020-03-27]; \u2025types: [DATE]; keys: [2020-03-28]; )\n-[types: [DATE]; keys: [2020-03-28]; \u2025types: [DATE]; keys: [2020-03-29]; )\n-```\n+    \u52a8\u6001\u5206\u533a\u7684\u7ed3\u675f\u504f\u79fb\uff0c\u4e3a\u6b63\u6570\u3002\u6839\u636e `time_unit` \u5c5e\u6027\u7684\u4e0d\u540c\uff0c\u4ee5\u5f53\u5929\uff08\u661f\u671f/\u6708\uff09\u4e3a\u57fa\u51c6\uff0c\u63d0\u524d\u521b\u5efa\u5bf9\u5e94\u8303\u56f4\u7684\u5206\u533a\u3002\n+\n+* `dynamic_partition.prefix`\n+\n+    \u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u540d\u524d\u7f00\u3002\n+\n+* `dynamic_partition.buckets`\n+\n+    \u52a8\u6001\u521b\u5efa\u7684\u5206\u533a\u6240\u5bf9\u5e94\u7684\u5206\u6876\u6570\u91cf\u3002\n     \n-### \u5f00\u542f\u52a8\u6001\u5206\u533a\u529f\u80fd\n-1. \u9996\u5148\u9700\u8981\u5728fe.conf\u4e2d\u8bbe\u7f6e`dynamic_partition_enable=true`\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u542f\u52a8\u65f6\u901a\u8fc7\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\uff0c\u6216\u8005\u901a\u8fc7MySQL\u8fde\u63a5\u540e\u4f7f\u7528\u547d\u4ee4\u884c `ADMIN SET FRONTEND CONFIG (\"dynamic_partition_enable\" = \"true\")`\u4fee\u6539\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u901a\u8fc7http\u63a5\u53e3\u52a8\u6001\u4fee\u6539,\u4fee\u6539\u65b9\u6cd5\u67e5\u770b\u9ad8\u7ea7\u64cd\u4f5c\u90e8\u5206\n+* `dynamic_partition.start_day_of_week`\n \n-2. \u5982\u679c\u9700\u8981\u5bf90.12\u7248\u672c\u4e4b\u524d\u7684\u8868\u6dfb\u52a0\u52a8\u6001\u5206\u533a\u5c5e\u6027\uff0c\u5219\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4fee\u6539\u8868\u7684\u5c5e\u6027\n-```\n-ALTER TABLE dynamic_partition set (\"dynamic_partition.enable\" = \"true\", \"dynamic_partition.time_unit\" = \"DAY\", \"dynamic_partition.end\" = \"3\", \"dynamic_partition.prefix\" = \"p\", \"dynamic_partition.buckets\" = \"32\");\n-```\n+    \u5f53 `time_unit` \u4e3a `WEEK` \u65f6\uff0c\u8be5\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6bcf\u5468\u7684\u8d77\u59cb\u70b9\u3002\u53d6\u503c\u4e3a 1 \u5230 7\u3002\u5176\u4e2d 1 \u8868\u793a\u5468\u4e00\uff0c7 \u8868\u793a\u5468\u65e5\u3002\u9ed8\u8ba4\u4e3a 1\uff0c\u5373\u8868\u793a\u6bcf\u5468\u4ee5\u5468\u4e00\u4e3a\u8d77\u59cb\u70b9\u3002\n+    \n+* `dynamic_partition.start_day_of_month`\n+\n+    \u5f53 `time_unit` \u4e3a `MONTH` \u65f6\uff0c\u8be5\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6bcf\u6708\u7684\u8d77\u59cb\u65e5\u671f\u3002\u53d6\u503c\u4e3a 1 \u5230 28\u3002\u5176\u4e2d 1 \u8868\u793a\u6bcf\u67081\u53f7\uff0c28 \u8868\u793a\u6bcf\u670828\u53f7\u3002\u9ed8\u8ba4\u4e3a 1\uff0c\u5373\u8868\u793a\u6bcf\u6708\u4ee51\u53f7\u4f4d\u8d77\u59cb\u70b9\u3002\u6682\u4e0d\u652f\u6301\u4ee529\u300130\u300131\u53f7\u4e3a\u8d77\u59cb\u65e5\uff0c\u4ee5\u907f\u514d\u56e0\u95f0\u5e74\u6216\u95f0\u6708\u5e26\u6765\u7684\u6b67\u4e49\u3002\n+  \n+## \u793a\u4f8b\n+\n+1. \u8868 tbl1 \u5206\u533a\u5217 k1 \u7c7b\u578b\u4e3a DATE\uff0c\u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u5206\u533a\u89c4\u5219\u3002\u6309\u5929\u5206\u533a\uff0c\u53ea\u4fdd\u7559\u6700\u8fd17\u5929\u7684\u5206\u533a\uff0c\u5e76\u4e14\u9884\u5148\u521b\u5efa\u672a\u67653\u5929\u7684\u5206\u533a\u3002\n+\n+    ```\n+    CREATA TABLE tbl1\n+    (\n+        k1 DATE,\n+        ...\n+    )\n+    PARTITION BY RANGE(K1) ()\n+    PROPERTIES\n+    (\n+        \"dynamic_partition.enable\" = \"true\",\n+        \"dynamic_partition.time_unit\" = \"DAY\",\n+        \"dynamic_partition.start\" = \"-7\",\n+        \"dynamic_partition.end\" = \"3\",\n+        \"dynamic_partition.prefix\" = \"p\",\n+        \"dynamic_partition.buckets\" = \"32\"\n+    );\n+    ```\n+    \n+    \u5047\u8bbe\u5f53\u524d\u65e5\u671f\u4e3a 2020-05-29\u3002\u5219\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0ctbl1 \u4f1a\u4ea7\u751f\u4ee5\u4e0b\u5206\u533a\uff1a\n+    \n+    ```\n+    p20200529: [\"2020-05-29\", \"2020-05-30\")\n+    p20200530: [\"2020-05-30\", \"2020-05-31\")\n+    p20200531: [\"2020-05-31\", \"2020-06-01\")\n+    p20200601: [\"2020-06-01\", \"2020-06-02\")\n+    ```\n+    \n+    \u5728\u7b2c\u4e8c\u5929\uff0c\u5373 2020-05-30\uff0c\u4f1a\u521b\u5efa\u65b0\u7684\u5206\u533a `p20200602: [\"2020-06-02\", \"2020-06-03\")`\n+    \n+    \u5728 2020-06-06 \u65f6\uff0c\u56e0\u4e3a `dynamic_partition.start` \u8bbe\u7f6e\u4e3a 7\uff0c\u5219\u5c06\u5220\u96647\u5929\u524d\u7684\u5206\u533a\uff0c\u5373\u5220\u9664\u5206\u533a `p20200529`\u3002\n+    \n+2. \u8868 tbl1 \u5206\u533a\u5217 k1 \u7c7b\u578b\u4e3a DATETIME\uff0c\u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u5206\u533a\u89c4\u5219\u3002\u6309\u661f\u671f\u5206\u533a\uff0c\u53ea\u4fdd\u7559\u6700\u8fd12\u4e2a\u661f\u671f\u7684\u5206\u533a\uff0c\u5e76\u4e14\u9884\u5148\u521b\u5efa\u672a\u67652\u4e2a\u661f\u671f\u7684\u5206\u533a\u3002\n+\n+    ```\n+    CREATA TABLE tbl1\n+    (\n+        k1 DATETIME,\n+        ...\n+    )\n+    PARTITION BY RANGE(K1) ()\n+    PROPERTIES\n+    (\n+        \"dynamic_partition.enable\" = \"true\",\n+        \"dynamic_partition.time_unit\" = \"WEEK\",\n+        \"dynamic_partition.start\" = \"-2\",\n+        \"dynamic_partition.end\" = \"2\",\n+        \"dynamic_partition.prefix\" = \"p\",\n+        \"dynamic_partition.buckets\" = \"8\"\n+    );\n+    ```\n+\n+    \u5047\u8bbe\u5f53\u524d\u65e5\u671f\u4e3a 2020-05-29\uff0c\u662f 2020 \u5e74\u7684\u7b2c 22 \u5468\u3002\u9ed8\u8ba4\u6bcf\u5468\u8d77\u59cb\u4e3a\u661f\u671f\u4e00\u3002\u5219\u6839\u4e8e\u4ee5\u4e0a\u89c4\u5219\uff0ctbl1 \u4f1a\u4ea7\u751f\u4ee5\u4e0b\u5206\u533a\uff1a\n+    \n+    ```\n+    p2020_22: [\"2020-05-25 00:00:00\", \"2020-06-01 00:00:00\")\n+    p2020_23: [\"2020-06-01 00:00:00\", \"2020-06-08 00:00:00\")\n+    p2020_24: [\"2020-06-08 00:00:00\", \"2020-06-15 00:00:00\")\n+    ```\n+    \n+    \u5176\u4e2d\u6bcf\u4e2a\u5206\u533a\u7684\u8d77\u59cb\u65e5\u671f\u4e3a\u5f53\u5468\u7684\u5468\u4e00\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u5206\u533a\u5217 k1 \u7684\u7c7b\u578b\u4e3a DATETIME\uff0c\u5219\u5206\u533a\u503c\u4f1a\u8865\u5168\u65f6\u5206\u79d2\u90e8\u5206\uff0c\u4e14\u7686\u4e3a 0\u3002\n+    \n+    \u5728 2020-06-15\uff0c\u5373\u7b2c25\u5468\u65f6\uff0c\u4f1a\u5220\u96642\u5468\u524d\u7684\u5206\u533a\uff0c\u5373\u5220\u9664 `p2020_22`\u3002\n+    \n+    \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5047\u8bbe\u7528\u6237\u6307\u5b9a\u4e86\u5468\u8d77\u59cb\u65e5\u4e3a `\"dynamic_partition.start_day_of_week\" = \"3\"`\uff0c\u5373\u4ee5\u6bcf\u5468\u4e09\u4e3a\u8d77\u59cb\u65e5\u3002\u5219\u5206\u533a\u5982\u4e0b\uff1a\n+    \n+    ```\n+    p2020_22: [\"2020-05-27 00:00:00\", \"2020-06-03 00:00:00\")\n+    p2020_23: [\"2020-06-03 00:00:00\", \"2020-06-10 00:00:00\")\n+    p2020_24: [\"2020-06-10 00:00:00\", \"2020-06-17 00:00:00\")\n+    ```\n+    \n+    \u5373\u5206\u533a\u8303\u56f4\u4e3a\u5f53\u5468\u7684\u5468\u4e09\u5230\u4e0b\u5468\u7684\u5468\u4e8c\u3002\n+    \n+    * \u6ce8\uff1a2019-12-31 \u548c 2020-01-01 \u5728\u540c\u4e00\u5468\u5185\uff0c\u5982\u679c\u5206\u533a\u7684\u8d77\u59cb\u65e5\u671f\u4e3a 2019-12-31\uff0c\u5219\u5206\u533a\u540d\u4e3a `p2019_53`\uff0c\u5982\u679c\u5206\u533a\u7684\u8d77\u59cb\u65e5\u671f\u4e3a 2020-01-01\uff0c\u5219\u5206\u533a\u540d\u4e3a `p2020_01`\u3002\n+    \n+3. \u8868 tbl1 \u5206\u533a\u5217 k1 \u7c7b\u578b\u4e3a DATE\uff0c\u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u5206\u533a\u89c4\u5219\u3002\u6309\u6708\u5206\u533a\uff0c\u4e0d\u5220\u9664\u5386\u53f2\u5206\u533a\uff0c\u5e76\u4e14\u9884\u5148\u521b\u5efa\u672a\u67652\u4e2a\u6708\u7684\u5206\u533a\u3002\u540c\u65f6\u8bbe\u5b9a\u4ee5\u6bcf\u67083\u53f7\u4e3a\u8d77\u59cb\u65e5\u3002\n+\n+    ```\n+    CREATA TABLE tbl1\n+    (\n+        k1 DATE,\n+        ...\n+    )\n+    PARTITION BY RANGE(K1) ()\n+    PROPERTIES\n+    (\n+        \"dynamic_partition.enable\" = \"true\",\n+        \"dynamic_partition.time_unit\" = \"MONTH\",\n+        \"dynamic_partition.end\" = \"2\",\n+        \"dynamic_partition.prefix\" = \"p\",\n+        \"dynamic_partition.buckets\" = \"8\",\n+        \"dynamic_partition.start_day_of_month\" = \"3\"\n+    );\n+    ```\n+    \n+    \u5047\u8bbe\u5f53\u524d\u65e5\u671f\u4e3a 2020-05-29\u3002\u5219\u6839\u4e8e\u4ee5\u4e0a\u89c4\u5219\uff0ctbl1 \u4f1a\u4ea7\u751f\u4ee5\u4e0b\u5206\u533a\uff1a\n+    \n+    ```\n+    p202005: [\"2020-05-03\", \"2020-06-03\")\n+    p202006: [\"2020-06-03\", \"2020-07-03\")\n+    p202007: [\"2020-07-03\", \"2020-08-03\")\n+    ```\n \n-### \u505c\u6b62\u52a8\u6001\u5206\u533a\u529f\u80fd\n+    \u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e `dynamic_partition.start`\uff0c\u5219\u4e0d\u4f1a\u5220\u9664\u5386\u53f2\u5206\u533a\u3002\n+    \n+    \u5047\u8bbe\u4eca\u5929\u4e3a 2020-05-20\uff0c\u5e76\u8bbe\u7f6e\u4ee5\u6bcf\u670828\u53f7\u4e3a\u8d77\u59cb\u65e5\uff0c\u5219\u5206\u533a\u8303\u56f4\u4e3a\uff1a\n+    \n+    ```\n+    p202004: [\"2020-04-28\", \"2020-05-28\")\n+    p202005: [\"2020-05-28\", \"2020-06-28\")\n+    p202006: [\"2020-06-28\", \"2020-07-28\")\n+    ```\n+    \n+## \u4fee\u6539\u52a8\u6001\u5206\u533a\u5c5e\u6027\n \n-\u5982\u679c\u9700\u8981\u5bf9\u96c6\u7fa4\u4e2d\u6240\u6709\u52a8\u6001\u5206\u533a\u8868\u505c\u6b62\u52a8\u6001\u5206\u533a\u529f\u80fd\uff0c\u5219\u9700\u8981\u5728fe.conf\u4e2d\u8bbe\u7f6e`dynamic_partition_enable=false`\n+\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u4fee\u6539\u52a8\u6001\u5206\u533a\u7684\u5c5e\u6027\uff1a\n \n-\u5982\u679c\u9700\u8981\u5bf9\u6307\u5b9a\u8868\u505c\u6b62\u52a8\u6001\u5206\u533a\u529f\u80fd\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4fee\u6539\u8868\u7684\u5c5e\u6027\n ```\n-ALTER TABLE dynamic_partition SET (\"dynamic_partition.enable\" = \"false\")\n+ALTER TABLE tbl1 SET\n+(\n+    \"dynamic_partition.prop1\" = \"value1\",\n+    ...\n+);\n ```\n \n-### \u4fee\u6539\u52a8\u6001\u5206\u533a\u5c5e\u6027\n+\u67d0\u4e9b\u5c5e\u6027\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u53ef\u80fd\u4f1a\u4ea7\u751f\u51b2\u7a81\u3002\u5047\u8bbe\u4e4b\u524d\u5206\u533a\u7c92\u5ea6\u4e3a DAY\uff0c\u5e76\u4e14\u5df2\u7ecf\u521b\u5efa\u4e86\u5982\u4e0b\u5206\u533a\uff1a\n \n-\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u4fee\u6539\u52a8\u6001\u5206\u533a\u7684\u5c5e\u6027\n ```\n-ALTER TABLE dynamic_partition SET (\"key\" = \"value\")\n+p20200519: [\"2020-05-19\", \"2020-05-20\")\n+p20200520: [\"2020-05-20\", \"2020-05-21\")\n+p20200521: [\"2020-05-21\", \"2020-05-22\")\n ```\n \n+\u5982\u679c\u6b64\u65f6\u5c06\u5206\u533a\u7c92\u5ea6\u6539\u4e3a MONTH\uff0c\u5219\u7cfb\u7edf\u4f1a\u5c1d\u8bd5\u521b\u5efa\u8303\u56f4\u4e3a `[\"2020-05-01\", \"2020-06-01\")` \u7684\u5206\u533a\uff0c\u800c\u8be5\u5206\u533a\u7684\u5206\u533a\u8303\u56f4\u548c\u5df2\u6709\u5206\u533a\u51b2\u7a81\uff0c\u6240\u4ee5\u65e0\u6cd5\u521b\u5efa\u3002\u800c\u8303\u56f4\u4e3a `[\"2020-06-01\", \"2020-07-01\")` \u7684\u5206\u533a\u53ef\u4ee5\u6b63\u5e38\u521b\u5efa\u3002\u56e0\u6b64\uff0c2020-05-22 \u5230 2020-05-30 \u65f6\u95f4\u6bb5\u7684\u5206\u533a\uff0c\u9700\u8981\u81ea\u884c\u586b\u8865\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 287}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTQ3OTc0", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417547974", "createdAt": "2020-05-25T08:31:01Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozMTowMVrOGZ5M1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozMTowMVrOGZ5M1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwNDc1Ng==", "bodyText": "\u8bbe\u7f6ehttp\u534f\u8bae\u4e3a\u5565\u7528GET\u65b9\u6cd5\u800c\u4e0d\u662fSET\u65b9\u6cd5\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429804756", "createdAt": "2020-05-25T08:31:01Z", "author": {"login": "wutiangan"}, "path": "docs/zh-CN/administrator-guide/dynamic-partition.md", "diffHunk": "@@ -161,48 +281,26 @@ SHOW DYNAMIC PARTITION TABLES;\n \n * dynamic\\_partition\\_enable\n \n-    \u662f\u5426\u5f00\u542f Doris \u7684\u52a8\u6001\u5206\u533a\u529f\u80fd\u3002\u9ed8\u8ba4\u4e3a false\uff0c\u5373\u5173\u95ed\u3002\u8be5\u53c2\u6570\u53ea\u5f71\u54cd\u52a8\u6001\u5206\u533a\u8868\u7684\u5206\u533a\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u666e\u901a\u8868\u3002\n+    \u662f\u5426\u5f00\u542f Doris \u7684\u52a8\u6001\u5206\u533a\u529f\u80fd\u3002\u9ed8\u8ba4\u4e3a false\uff0c\u5373\u5173\u95ed\u3002\u8be5\u53c2\u6570\u53ea\u5f71\u54cd\u52a8\u6001\u5206\u533a\u8868\u7684\u5206\u533a\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u666e\u901a\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 fe.conf \u4e2d\u7684\u53c2\u6570\u5e76\u91cd\u542f FE \u751f\u6548\u3002\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6548\uff1a\n     \n-* dynamic\\_partition\\_check\\_interval\\_seconds\n-\n-    \u52a8\u6001\u5206\u533a\u7ebf\u7a0b\u7684\u6267\u884c\u9891\u7387\uff0c\u9ed8\u8ba4\u4e3a3600(1\u4e2a\u5c0f\u65f6)\uff0c\u5373\u6bcf1\u4e2a\u5c0f\u65f6\u8fdb\u884c\u4e00\u6b21\u8c03\u5ea6\n+    MySQL \u534f\u8bae\uff1a\n     \n-### HTTP Restful API\n-\n-Doris \u63d0\u4f9b\u4e86\u4fee\u6539\u52a8\u6001\u5206\u533a\u914d\u7f6e\u53c2\u6570\u7684 HTTP Restful API\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6\u4fee\u6539\u52a8\u6001\u5206\u533a\u914d\u7f6e\u53c2\u6570\u3002\n-\n-\u8be5 API \u5b9e\u73b0\u5728 FE \u7aef\uff0c\u4f7f\u7528 `fe_host:fe_http_port` \u8fdb\u884c\u8bbf\u95ee\u3002\u9700\u8981 ADMIN \u6743\u9650\u3002\n-\n-1. \u5c06 dynamic_partition_enable \u8bbe\u7f6e\u4e3a true \u6216 false\n+    `ADMIN SET FRONTEND CONFIG (\"dynamic_partition_enable\" = \"true\")`\n+    \n+    HTTP \u534f\u8bae\uff1a\n+    \n+    `curl --location-trusted -u username:password -XGET http://fe_host:fe_http_port/api/_set_config?dynamic_partition_enable=true`\n     \n-    * \u6807\u8bb0\u4e3a true\n+    \u82e5\u8981\u5168\u5c40\u5173\u95ed\u52a8\u6001\u5206\u533a\uff0c\u5219\u8bbe\u7f6e\u6b64\u53c2\u6570\u4e3a false \u5373\u53ef\u3002\n     \n-        ```\n-        GET /api/_set_config?dynamic_partition_enable=true\n-        \n-        \u4f8b\u5982: curl --location-trusted -u username:password -XGET http://fe_host:fe_http_port/api/_set_config?dynamic_partition_enable=true\n-        \n-        \u8fd4\u56de\uff1a200\n-        ```\n-        \n-    * \u6807\u8bb0\u4e3a false\n+* dynamic\\_partition\\_check\\_interval\\_seconds\n+\n+    \u52a8\u6001\u5206\u533a\u7ebf\u7a0b\u7684\u6267\u884c\u9891\u7387\uff0c\u9ed8\u8ba4\u4e3a3600(1\u4e2a\u5c0f\u65f6)\uff0c\u5373\u6bcf1\u4e2a\u5c0f\u65f6\u8fdb\u884c\u4e00\u6b21\u8c03\u5ea6\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 fe.conf \u4e2d\u7684\u53c2\u6570\u5e76\u91cd\u542f FE \u751f\u6548\u3002\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4fee\u6539\uff1a\n     \n-        ```\n-        GET /api/_set_config?dynamic_partition_enable=false\n-        \n-        \u4f8b\u5982: curl --location-trusted -u username:password -XGET http://fe_host:fe_http_port/api/_set_config?dynamic_partition_enable=false\n-        \n-        \u8fd4\u56de\uff1a200\n-        ```\n+    MySQL \u534f\u8bae\uff1a\n+\n+    `ADMIN SET FRONTEND CONFIG (\"dynamic_partition_check_interval_seconds\" = \"7200\")`\n     \n-2. \u8bbe\u7f6e dynamic partition \u7684\u8c03\u5ea6\u9891\u7387\n+    HTTP \u534f\u8bae\uff1a\n     \n-    * \u8bbe\u7f6e\u8c03\u5ea6\u65f6\u95f4\u4e3a12\u5c0f\u65f6\u8c03\u5ea6\u4e00\u6b21\n-        \n-        ```\n-        GET /api/_set_config?dynamic_partition_check_interval_seconds=432000\n-        \n-        \u4f8b\u5982: curl --location-trusted -u username:password -XGET http://fe_host:fe_http_port/api/_set_config?dynamic_partition_check_interval_seconds=432000\n-        \n-        \u8fd4\u56de\uff1a200\n-        ```\n+    `curl --location-trusted -u username:password -XGET http://fe_host:fe_http_port/api/_set_config?dynamic_partition_check_interval_seconds=432000`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 389}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTQ5MzQ1", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417549345", "createdAt": "2020-05-25T08:33:21Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozMzoyMVrOGZ5RBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODozMzoyMVrOGZ5RBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwNTgzMA==", "bodyText": "dayOfWeek", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429805830", "createdAt": "2020-05-25T08:33:21Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -114,6 +118,34 @@ private static void checkEnable(String enable) throws DdlException {\n         }\n     }\n \n+    private static void checkStartDayOfMonth(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);\n+            if (dayOfMonth < 1 || dayOfMonth > 28) {\n+                throw new DdlException(DynamicPartitionProperty.START_DAY_OF_MONTH + \" should between 1 and 28\");\n+            }\n+        } catch (NumberFormatException e) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+    }\n+\n+    private static void checkStartDayOfWeek(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_WEEK);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTU0MDA0", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417554004", "createdAt": "2020-05-25T08:40:54Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0MDo1NFrOGZ5fhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0MDo1NFrOGZ5fhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgwOTU0MQ==", "bodyText": "you\u2018d better add Parentheses", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429809541", "createdAt": "2020-05-25T08:40:54Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n+        day = day == 1 ? 7 : day - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 187}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTU1MDI1", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417555025", "createdAt": "2020-05-25T08:42:39Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0MjozOVrOGZ5ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0MjozOVrOGZ5ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMDM2Nw==", "bodyText": "why tz is no use?", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429810367", "createdAt": "2020-05-25T08:42:39Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on\n+        day = day == 1 ? 7 : day - 1;\n+        current.add(Calendar.DATE, (startOf.dayOfWeek - day));\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in MONTH granularity.\n+     * offset: The offset from the current month. 0 means current month, 1 means next month, -1 means last month.\n+     * startOf: Define the start date of each month. 1 means start on the 1st of every month.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = 1, startOf.month = 3\n+     *  It will return 2020-06-03 \n+     */\n+    private static String getPartitionRangeOfMonth(Calendar current, int offset, StartOfDate startOf, TimeZone tz,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjA2OTA2", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417606906", "createdAt": "2020-05-25T10:07:34Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNzozNFrOGZ8HSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNzozNFrOGZ8HSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjQ4OQ==", "bodyText": "Use LocalDateTime can avoid this trick", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429852489", "createdAt": "2020-05-25T10:07:34Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*\n+     * return formatted string of partition range in DAY granularity.\n+     * offset: The offset from the current day. 0 means current day, 1 means tomorrow, -1 means yesterday.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1\n+     *  It will return 2020-05-23\n+     */\n+    private static String getPartitionRangeOfDay(Calendar current, int offset, TimeZone tz, String format) {\n+        current.add(Calendar.DATE, offset);\n+        return getFormattedTimeWithoutHourMinuteSecond(current, format);\n+    }\n+\n+    /*\n+     * return formatted string of partition range in WEEK granularity.\n+     * offset: The offset from the current week. 0 means current week, 1 means next week, -1 means last week.\n+     * startOf: Define the start day of each week. 1 means MONDAY, 7 means SUNDAY.\n+     * format: the format of the return date string.\n+     * \n+     * Eg:\n+     *  Today is 2020-05-24, offset = -1, startOf.dayOfWeek = 3\n+     *  It will return 2020-05-20  (Wednesday of last week)\n+     */\n+    private static String getPartitionRangeOfWeek(Calendar current, int offset, StartOfDate startOf, TimeZone tz,\n+            String format) {\n+        Preconditions.checkArgument(startOf.isStartOfWeek());\n+        // 1. get the offset week\n+        current.add(Calendar.WEEK_OF_YEAR, offset);\n+        // 2. get the date of `startOf` week\n+        int day = current.get(Calendar.DAY_OF_WEEK);\n+        // SUNDAY will return 1, we will set it to 7, and make MONDAY to 1, and so on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjA5MzQ3", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417609347", "createdAt": "2020-05-25T10:12:02Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoxMjowMlrOGZ8O4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoxMjowMlrOGZ8O4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDQzMw==", "bodyText": "java doc comment is start with /** xx */ , maybe we can unify it?", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429854433", "createdAt": "2020-05-25T10:12:02Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -273,34 +321,110 @@ public static String getPartitionFormat(Column column) throws DdlException {\n         }\n     }\n \n-    public static String getFormattedPartitionName(String name, String timeUnit) {\n-        name = name.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n+    public static String getFormattedPartitionName(TimeZone tz, String formattedDateStr, String timeUnit) {\n+        formattedDateStr = formattedDateStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\");\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            return name.substring(0, 8);\n+            return formattedDateStr.substring(0, 8);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.MONTH.toString())) {\n-            return name.substring(0, 6);\n+            return formattedDateStr.substring(0, 6);\n         } else {\n-            name = name.substring(0, 8);\n-            Calendar calendar = Calendar.getInstance();\n+            formattedDateStr = formattedDateStr.substring(0, 8);\n+            Calendar calendar = Calendar.getInstance(tz);\n             try {\n-                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(name));\n+                calendar.setTime(new SimpleDateFormat(\"yyyyMMdd\").parse(formattedDateStr));\n             } catch (ParseException e) {\n                 LOG.warn(\"Format dynamic partition name error. Error={}\", e.getMessage());\n-                return name;\n+                return formattedDateStr;\n+            }\n+            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);\n+            if (weekOfYear <= 1 && calendar.get(Calendar.MONTH) >= 11) {\n+                // eg: JDK think 2019-12-30 as the first week of year 2020, we need to handle this.\n+                // to make it as the 53rd week of year 2019.\n+                weekOfYear += 52;\n             }\n-            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.WEEK_OF_YEAR));\n+            return String.format(\"%s_%02d\", calendar.get(Calendar.YEAR), weekOfYear);\n         }\n     }\n \n-    public static String getPartitionRange(String timeUnit, int offset, Calendar calendar, String format) {\n+    // return the partition range date string formatted as yyyy-MM-dd[ HH:mm::ss]\n+    // TODO: support HOUR and YEAR\n+    public static String getPartitionRangeString(DynamicPartitionProperty property, Calendar current,\n+            int offset, String format) {\n+        String timeUnit = property.getTimeUnit();\n+        TimeZone tz = property.getTimeZone();\n         if (timeUnit.equalsIgnoreCase(TimeUnit.DAY.toString())) {\n-            calendar.add(Calendar.DAY_OF_MONTH, offset);\n+            return getPartitionRangeOfDay(current, offset, tz, format);\n         } else if (timeUnit.equalsIgnoreCase(TimeUnit.WEEK.toString())) {\n-            calendar.add(Calendar.WEEK_OF_MONTH, offset);\n-        } else {\n-            calendar.add(Calendar.MONTH, offset);\n+            return getPartitionRangeOfWeek(current, offset, property.getStartOfWeek(), tz, format);\n+        } else { // MONTH\n+            return getPartitionRangeOfMonth(current, offset, property.getStartOfMonth(), tz, format);\n+        }\n+    }\n+    \n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f", "author": {"user": {"login": "morningman-cmy", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/0d23693859c76cf0d195ed38da16288facacde3f", "committedDate": "2020-05-25T10:26:35Z", "message": "fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjE5MjU1", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417619255", "createdAt": "2020-05-25T10:30:24Z", "commit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMDoyNFrOGZ8spw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMDoyNFrOGZ8spw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjA1NQ==", "bodyText": "maybe we should remove the warning, because dynamic_partition.start is default to Integer.MIN_VALUE, so we may got a AnalysisException like this Error=errCode = 2, detailMessage = date literal [5877471-07-26 00:00:00] is invalid", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429862055", "createdAt": "2020-05-25T10:30:24Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -210,7 +215,8 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n             reservePartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n         } catch (AnalysisException e) {\n             // keys.size is always equal to column.size, cannot reach this exception\n-            LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());\n+            LOG.warn(\"Keys size is not equal to column size. Error={}, db: {}, table: {}\", e.getMessage(),\n+                    db.getFullName(), olapTable.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90faac2b361ab69034410d0dd0abf2136e657a6f"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjYyMjA4", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417662208", "createdAt": "2020-05-25T11:59:02Z", "commit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo1OTowMlrOGZ-0Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo1OTowMlrOGZ-0Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Njc3NQ==", "bodyText": "same as following comment", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429896775", "createdAt": "2020-05-25T11:59:02Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -149,10 +148,11 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n                 addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n             } catch (AnalysisException e) {\n                 // keys.size is always equal to column.size, cannot reach this exception\n-                LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());\n+                LOG.warn(\"Keys size is not equal to column size. Error={}, db: {}, table: {}\", e.getMessage(),\n+                        db.getFullName(), olapTable.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjYyODgz", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417662883", "createdAt": "2020-05-25T12:00:26Z", "commit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjowMDoyNlrOGZ-2Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjowMDoyNlrOGZ-2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzI3MQ==", "bodyText": "The single column check work is done when create table, no need to check here", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429897271", "createdAt": "2020-05-25T12:00:26Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -275,19 +280,25 @@ private void executeDynamicPartition() {\n                 // scheduler time should be record even no partition added\n                 createOrUpdateRuntimeInfo(olapTable.getName(), LAST_SCHEDULER_TIME, TimeUtils.getCurrentFormatTime());\n                 RangePartitionInfo rangePartitionInfo = (RangePartitionInfo) olapTable.getPartitionInfo();\n+                if (rangePartitionInfo.getPartitionColumns().size() != 1) {\n+                    // currently only support partition with single column.\n+                    iterator.remove();\n+                    continue;\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjYzNjY5", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417663669", "createdAt": "2020-05-25T12:01:52Z", "commit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjowMTo1MlrOGZ-42w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjowMTo1MlrOGZ-42w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Nzk0Nw==", "bodyText": "add a comment why less than 28, the reason in doc is for users?", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r429897947", "createdAt": "2020-05-25T12:01:52Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/util/DynamicPartitionUtil.java", "diffHunk": "@@ -114,6 +118,34 @@ private static void checkEnable(String enable) throws DdlException {\n         }\n     }\n \n+    private static void checkStartDayOfMonth(String val) throws DdlException {\n+        if (Strings.isNullOrEmpty(val)) {\n+            throw new DdlException(\"Invalid properties: \" + DynamicPartitionProperty.START_DAY_OF_MONTH);\n+        }\n+        try {\n+            int dayOfMonth = Integer.parseInt(val);\n+            if (dayOfMonth < 1 || dayOfMonth > 28) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23693859c76cf0d195ed38da16288facacde3f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82a3cee61df8c51ddfdfba8a297c47974a7f322f", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/82a3cee61df8c51ddfdfba8a297c47974a7f322f", "committedDate": "2020-05-25T14:01:27Z", "message": "fix by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTMwMDQ3", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-417930047", "createdAt": "2020-05-26T02:11:30Z", "commit": {"oid": "82a3cee61df8c51ddfdfba8a297c47974a7f322f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjoxMTozMFrOGaMnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjoxMTozMFrOGaMnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjc2Mg==", "bodyText": "why plus one? getNumberDaysOfMonth(2020, 1) will return 29, and the function name is confused", "url": "https://github.com/apache/incubator-doris/pull/3679#discussion_r430122762", "createdAt": "2020-05-26T02:11:30Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/util/TimeUtils.java", "diffHunk": "@@ -268,4 +269,11 @@ public static String checkTimeZoneValidAndStandardize(String value) throws DdlEx\n         }\n         throw new DdlException(\"Parse time zone \" + value + \" error\");\n     }\n+\n+    // return the number of days of give year.month\n+    public static int getNumberDaysOfMonth(int year, int month) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(year, month + 1, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a3cee61df8c51ddfdfba8a297c47974a7f322f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888d123d042a685afe7710591fc7e23dd2d557d6", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/888d123d042a685afe7710591fc7e23dd2d557d6", "committedDate": "2020-05-26T07:51:09Z", "message": "fix by review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc45ea5f0c6f421a04ac88361ef7c54bc91bf58", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/2dc45ea5f0c6f421a04ac88361ef7c54bc91bf58", "committedDate": "2020-05-27T08:09:11Z", "message": "add transaction not found"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTYzOTUw", "url": "https://github.com/apache/incubator-doris/pull/3679#pullrequestreview-418963950", "createdAt": "2020-05-27T08:22:55Z", "commit": {"oid": "2dc45ea5f0c6f421a04ac88361ef7c54bc91bf58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2756, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}