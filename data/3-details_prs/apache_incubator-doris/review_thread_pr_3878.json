{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTMyMTkx", "number": 3878, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MjozN1rOEFxbFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1MToyOFrOEHbTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg4MDg0OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MjozN1rOGkKUdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjozNDoxN1rOGmGIAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDk5OA==", "bodyText": "Please add the comment to describe why do we need this class, and when should we use it.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440570998", "createdAt": "2020-06-16T03:52:37Z", "author": {"login": "kangkaisen"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5OTQyNA==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442599424", "createdAt": "2020-06-19T02:34:17Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDk5OA=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI0OTg5OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MTo0NFrOGkhltA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MTo0NFrOGkhltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MjI0NA==", "bodyText": "Let the caller print the log, not here.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440952244", "createdAt": "2020-06-16T15:41:44Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI1ODYzOnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MzozN1rOGkhrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0OTozN1rOGl1jcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If the reader need the file size, set it when construct BrokerReader.\n          \n          \n            \n                // If the reader need the file size, set it when construct FileReader.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440953654", "createdAt": "2020-06-16T15:43:37Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzkyMw==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442327923", "createdAt": "2020-06-18T15:49:37Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzY1NA=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI1OTg3OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Mzo1M1rOGkhr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0OToyNVrOGl1i5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1Mzg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Status fill();\n          \n          \n            \n                Status _fill();", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440953854", "createdAt": "2020-06-16T15:43:53Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.\n+    // There is no other way to set the file size.\n+    BufferedReader(FileReader* reader);\n+    BufferedReader(FileReader* reader, int64_t buffer_size);\n+    virtual ~BufferedReader();\n+\n+    virtual Status open() override;\n+\n+    // Read \n+    virtual Status read(uint8_t* buf, size_t* buf_len, bool* eof) override;\n+    virtual Status readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) override;\n+    virtual Status read_one_message(uint8_t** buf, size_t* length) override;\n+    virtual int64_t size() override;\n+    virtual Status seek(int64_t position) override;\n+    virtual Status tell(int64_t* position) override;\n+    virtual void close() override;\n+    virtual bool closed() override;\n+\n+private:\n+    Status fill();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc4MQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442327781", "createdAt": "2020-06-18T15:49:25Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.\n+    // There is no other way to set the file size.\n+    BufferedReader(FileReader* reader);\n+    BufferedReader(FileReader* reader, int64_t buffer_size);\n+    virtual ~BufferedReader();\n+\n+    virtual Status open() override;\n+\n+    // Read \n+    virtual Status read(uint8_t* buf, size_t* buf_len, bool* eof) override;\n+    virtual Status readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) override;\n+    virtual Status read_one_message(uint8_t** buf, size_t* length) override;\n+    virtual int64_t size() override;\n+    virtual Status seek(int64_t position) override;\n+    virtual Status tell(int64_t* position) override;\n+    virtual void close() override;\n+    virtual bool closed() override;\n+\n+private:\n+    Status fill();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1Mzg1NA=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI2MDExOnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Mzo1OVrOGkhsNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0OToxOVrOGl1imQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Status read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out);\n          \n          \n            \n                Status _read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out);", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440953908", "createdAt": "2020-06-16T15:43:59Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.\n+    // There is no other way to set the file size.\n+    BufferedReader(FileReader* reader);\n+    BufferedReader(FileReader* reader, int64_t buffer_size);\n+    virtual ~BufferedReader();\n+\n+    virtual Status open() override;\n+\n+    // Read \n+    virtual Status read(uint8_t* buf, size_t* buf_len, bool* eof) override;\n+    virtual Status readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) override;\n+    virtual Status read_one_message(uint8_t** buf, size_t* length) override;\n+    virtual int64_t size() override;\n+    virtual Status seek(int64_t position) override;\n+    virtual Status tell(int64_t* position) override;\n+    virtual void close() override;\n+    virtual bool closed() override;\n+\n+private:\n+    Status fill();\n+    Status read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzcwNQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442327705", "createdAt": "2020-06-18T15:49:19Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <stdint.h>\n+\n+#include \"common/status.h\"\n+#include \"olap/olap_define.h\"\n+#include \"exec/file_reader.h\"\n+\n+namespace doris {\n+\n+// Buffered Reader of broker\n+class BufferedReader : public FileReader {\n+public:\n+    // If the reader need the file size, set it when construct BrokerReader.\n+    // There is no other way to set the file size.\n+    BufferedReader(FileReader* reader);\n+    BufferedReader(FileReader* reader, int64_t buffer_size);\n+    virtual ~BufferedReader();\n+\n+    virtual Status open() override;\n+\n+    // Read \n+    virtual Status read(uint8_t* buf, size_t* buf_len, bool* eof) override;\n+    virtual Status readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) override;\n+    virtual Status read_one_message(uint8_t** buf, size_t* length) override;\n+    virtual int64_t size() override;\n+    virtual Status seek(int64_t position) override;\n+    virtual Status tell(int64_t* position) override;\n+    virtual void close() override;\n+    virtual bool closed() override;\n+\n+private:\n+    Status fill();\n+    Status read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzkwOA=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI2NjAzOnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NToyNFrOGkhwGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0ODozN1rOGl1gxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NDkwNg==", "bodyText": "Is it necessary to fill() when open()?", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440954906", "createdAt": "2020-06-16T15:45:24Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(fill());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzIzOA==", "bodyText": "Yes. If not call fill() in open(), the actual length of the buffer will be 0 when user call read().", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442327238", "createdAt": "2020-06-18T15:48:37Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(fill());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NDkwNg=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI4MDA1OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0ODozMlrOGkh5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0OToxMFrOGl1iLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NzIwOQ==", "bodyText": "What is this retry for? add comment for it.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440957209", "createdAt": "2020-06-16T15:48:32Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(fill());\n+    return Status::OK();\n+}\n+\n+//not support\n+Status BufferedReader::read_one_message(uint8_t** buf, size_t* length) {\n+    return Status::NotSupported(\"Not support\");\n+}\n+\n+Status BufferedReader::read(uint8_t* buf, size_t* buf_len, bool* eof) {\n+    DCHECK_NE(*buf_len, 0);\n+    int64_t bytes_read;\n+    RETURN_IF_ERROR(readat(_cur_offset, (int64_t)*buf_len, &bytes_read, buf));\n+    if (bytes_read == 0) {\n+        *eof = true;\n+    } else {\n+        *eof = false;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    if (nbytes <= 0) {\n+        *bytes_read = 0;\n+        return Status::OK();\n+    }\n+    RETURN_IF_ERROR(read_once(position, nbytes, bytes_read, out));\n+    //EOF\n+    if (*bytes_read <= 0) {\n+        return Status::OK();\n+    }\n+    while (*bytes_read < nbytes) {\n+        int64_t len;\n+        RETURN_IF_ERROR(read_once(position + *bytes_read, nbytes - *bytes_read, &len, reinterpret_cast<char*>(out) + *bytes_read));\n+        // EOF\n+        if (len <= 0) {\n+            break;\n+        }\n+        *bytes_read += len;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    // requested bytes missed the local buffer\n+    if (position >= _buffer_limit || position < _buffer_offset) {\n+        // if requested length is larger than the capacity of buffer, do not\n+        // need to copy the character into local buffer.\n+        if (nbytes > _buffer_limit - _buffer_offset) {\n+            return _reader->readat(position, nbytes, bytes_read, out);\n+        }\n+        _buffer_offset = position;\n+        RETURN_IF_ERROR(fill());\n+        if (position >= _buffer_limit) {\n+            *bytes_read = 0;\n+            return Status::OK();\n+        }\n+    } \n+    int64_t len = std::min(_buffer_limit - position, nbytes);\n+    int64_t off = position - _buffer_offset;\n+    memcpy(out, _buffer + off, len);\n+    *bytes_read = len;\n+    _cur_offset = position + *bytes_read;\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::fill() {\n+    if (_buffer_offset >= 0) {\n+        int64_t bytes_read;\n+        int retry_times = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzU5OQ==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r442327599", "createdAt": "2020-06-18T15:49:10Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(fill());\n+    return Status::OK();\n+}\n+\n+//not support\n+Status BufferedReader::read_one_message(uint8_t** buf, size_t* length) {\n+    return Status::NotSupported(\"Not support\");\n+}\n+\n+Status BufferedReader::read(uint8_t* buf, size_t* buf_len, bool* eof) {\n+    DCHECK_NE(*buf_len, 0);\n+    int64_t bytes_read;\n+    RETURN_IF_ERROR(readat(_cur_offset, (int64_t)*buf_len, &bytes_read, buf));\n+    if (bytes_read == 0) {\n+        *eof = true;\n+    } else {\n+        *eof = false;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    if (nbytes <= 0) {\n+        *bytes_read = 0;\n+        return Status::OK();\n+    }\n+    RETURN_IF_ERROR(read_once(position, nbytes, bytes_read, out));\n+    //EOF\n+    if (*bytes_read <= 0) {\n+        return Status::OK();\n+    }\n+    while (*bytes_read < nbytes) {\n+        int64_t len;\n+        RETURN_IF_ERROR(read_once(position + *bytes_read, nbytes - *bytes_read, &len, reinterpret_cast<char*>(out) + *bytes_read));\n+        // EOF\n+        if (len <= 0) {\n+            break;\n+        }\n+        *bytes_read += len;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    // requested bytes missed the local buffer\n+    if (position >= _buffer_limit || position < _buffer_offset) {\n+        // if requested length is larger than the capacity of buffer, do not\n+        // need to copy the character into local buffer.\n+        if (nbytes > _buffer_limit - _buffer_offset) {\n+            return _reader->readat(position, nbytes, bytes_read, out);\n+        }\n+        _buffer_offset = position;\n+        RETURN_IF_ERROR(fill());\n+        if (position >= _buffer_limit) {\n+            *bytes_read = 0;\n+            return Status::OK();\n+        }\n+    } \n+    int64_t len = std::min(_buffer_limit - position, nbytes);\n+    int64_t off = position - _buffer_offset;\n+    memcpy(out, _buffer + off, len);\n+    *bytes_read = len;\n+    _cur_offset = position + *bytes_read;\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::fill() {\n+    if (_buffer_offset >= 0) {\n+        int64_t bytes_read;\n+        int retry_times = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NzIwOQ=="}, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI5NTU1OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1MjowNFrOGkiDTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1MjowNFrOGkiDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1OTgyMw==", "bodyText": "when will position > _buffer_limit?", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r440959823", "createdAt": "2020-06-16T15:52:04Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        LOG(WARNING) << ss.str();\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(fill());\n+    return Status::OK();\n+}\n+\n+//not support\n+Status BufferedReader::read_one_message(uint8_t** buf, size_t* length) {\n+    return Status::NotSupported(\"Not support\");\n+}\n+\n+Status BufferedReader::read(uint8_t* buf, size_t* buf_len, bool* eof) {\n+    DCHECK_NE(*buf_len, 0);\n+    int64_t bytes_read;\n+    RETURN_IF_ERROR(readat(_cur_offset, (int64_t)*buf_len, &bytes_read, buf));\n+    if (bytes_read == 0) {\n+        *eof = true;\n+    } else {\n+        *eof = false;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    if (nbytes <= 0) {\n+        *bytes_read = 0;\n+        return Status::OK();\n+    }\n+    RETURN_IF_ERROR(read_once(position, nbytes, bytes_read, out));\n+    //EOF\n+    if (*bytes_read <= 0) {\n+        return Status::OK();\n+    }\n+    while (*bytes_read < nbytes) {\n+        int64_t len;\n+        RETURN_IF_ERROR(read_once(position + *bytes_read, nbytes - *bytes_read, &len, reinterpret_cast<char*>(out) + *bytes_read));\n+        // EOF\n+        if (len <= 0) {\n+            break;\n+        }\n+        *bytes_read += len;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    // requested bytes missed the local buffer\n+    if (position >= _buffer_limit || position < _buffer_offset) {\n+        // if requested length is larger than the capacity of buffer, do not\n+        // need to copy the character into local buffer.\n+        if (nbytes > _buffer_limit - _buffer_offset) {\n+            return _reader->readat(position, nbytes, bytes_read, out);\n+        }\n+        _buffer_offset = position;\n+        RETURN_IF_ERROR(fill());\n+        if (position >= _buffer_limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0ee0059fbeab1271750b12ac9db5c9d5e874bf"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDgyOTQ3OnYy", "diffSide": "RIGHT", "path": "be/test/exec/buffered_reader_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjowNDo0OVrOGmmQfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjowNDo0OVrOGmmQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNTg4Nw==", "bodyText": "You need to check the result, or the unit test is meaningless", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443125887", "createdAt": "2020-06-20T12:04:49Z", "author": {"login": "morningman"}, "path": "be/test/exec/buffered_reader_test.cpp", "diffHunk": "@@ -0,0 +1,102 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"exec/local_file_reader.h\"\n+#include \"exec/buffered_reader.h\"\n+#include \"util/stopwatch.hpp\"\n+\n+namespace doris {\n+class BufferedReaderTest : public testing::Test {\n+public:\n+    BufferedReaderTest() {}\n+\n+protected:\n+    virtual void SetUp() {\n+    }\n+    virtual void TearDown() {\n+    }\n+};\n+\n+TEST_F(BufferedReaderTest, normal_use) {\n+    LocalFileReader file_reader(\n+            \"./be/test/exec/test_data/buffered_reader/buffered_reader_test_file\", 0);\n+    BufferedReader reader(&file_reader);\n+    auto st = reader.open();\n+    ASSERT_TRUE(st.ok());\n+    uint8_t buf[32 * 1024];\n+    MonotonicStopWatch watch;\n+    watch.start();\n+    bool eof = false;\n+    size_t read_length = 0;\n+    while (!eof) {\n+        size_t buf_len = 32 * 1024;\n+        st = reader.read(buf, &buf_len, &eof);\n+        ASSERT_TRUE(st.ok());\n+        read_length += buf_len;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f6ea119373612919a02b8cb5df5aa53e5f8569"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDgzMDE0OnYy", "diffSide": "RIGHT", "path": "be/test/exec/buffered_reader_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjowNjowNVrOGmmQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjowNjowNVrOGmmQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNTk3Mg==", "bodyText": "check the buf_len after read()", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443125972", "createdAt": "2020-06-20T12:06:05Z", "author": {"login": "morningman"}, "path": "be/test/exec/buffered_reader_test.cpp", "diffHunk": "@@ -0,0 +1,102 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"exec/local_file_reader.h\"\n+#include \"exec/buffered_reader.h\"\n+#include \"util/stopwatch.hpp\"\n+\n+namespace doris {\n+class BufferedReaderTest : public testing::Test {\n+public:\n+    BufferedReaderTest() {}\n+\n+protected:\n+    virtual void SetUp() {\n+    }\n+    virtual void TearDown() {\n+    }\n+};\n+\n+TEST_F(BufferedReaderTest, normal_use) {\n+    LocalFileReader file_reader(\n+            \"./be/test/exec/test_data/buffered_reader/buffered_reader_test_file\", 0);\n+    BufferedReader reader(&file_reader);\n+    auto st = reader.open();\n+    ASSERT_TRUE(st.ok());\n+    uint8_t buf[32 * 1024];\n+    MonotonicStopWatch watch;\n+    watch.start();\n+    bool eof = false;\n+    size_t read_length = 0;\n+    while (!eof) {\n+        size_t buf_len = 32 * 1024;\n+        st = reader.read(buf, &buf_len, &eof);\n+        ASSERT_TRUE(st.ok());\n+        read_length += buf_len;\n+    }\n+\n+    LOG(INFO) << \"read bytes \" << read_length << \" using time \" << watch.elapsed_time();\n+}\n+\n+TEST_F(BufferedReaderTest, test_validity) {\n+    LocalFileReader file_reader(\n+            \"./be/test/exec/test_data/buffered_reader/buffered_reader_test_file.txt\", 0);\n+    BufferedReader reader(&file_reader, 128 * 1024);\n+    auto st = reader.open();\n+    ASSERT_TRUE(st.ok());\n+    uint8_t buf[10];\n+    bool eof = false;\n+    size_t buf_len = 10;\n+\n+    st = reader.read(buf, &buf_len, &eof);\n+    ASSERT_TRUE(st.ok());\n+    ASSERT_STREQ(\"bdfhjlnprt\", std::string((char*)buf, buf_len).c_str());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f6ea119373612919a02b8cb5df5aa53e5f8569"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDgzMzE4OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjoxMjo0MVrOGmmSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyOTozNlrOGmwSBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNjM5OA==", "bodyText": "should it be nbytes > _buffer_size  ?", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443126398", "createdAt": "2020-06-20T12:12:41Z", "author": {"login": "morningman"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(_fill());\n+    return Status::OK();\n+}\n+\n+//not support\n+Status BufferedReader::read_one_message(uint8_t** buf, size_t* length) {\n+    return Status::NotSupported(\"Not support\");\n+}\n+\n+Status BufferedReader::read(uint8_t* buf, size_t* buf_len, bool* eof) {\n+    DCHECK_NE(*buf_len, 0);\n+    int64_t bytes_read;\n+    RETURN_IF_ERROR(readat(_cur_offset, (int64_t)*buf_len, &bytes_read, buf));\n+    if (bytes_read == 0) {\n+        *eof = true;\n+    } else {\n+        *eof = false;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    if (nbytes <= 0) {\n+        *bytes_read = 0;\n+        return Status::OK();\n+    }\n+    RETURN_IF_ERROR(_read_once(position, nbytes, bytes_read, out));\n+    //EOF\n+    if (*bytes_read <= 0) {\n+        return Status::OK();\n+    }\n+    while (*bytes_read < nbytes) {\n+        int64_t len;\n+        RETURN_IF_ERROR(_read_once(position + *bytes_read, nbytes - *bytes_read, &len, reinterpret_cast<char*>(out) + *bytes_read));\n+        // EOF\n+        if (len <= 0) {\n+            break;\n+        }\n+        *bytes_read += len;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::_read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    // requested bytes missed the local buffer\n+    if (position >= _buffer_limit || position < _buffer_offset) {\n+        // if requested length is larger than the capacity of buffer, do not\n+        // need to copy the character into local buffer.\n+        if (nbytes > _buffer_limit - _buffer_offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f6ea119373612919a02b8cb5df5aa53e5f8569"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDExOQ==", "bodyText": "You are right.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443290119", "createdAt": "2020-06-22T02:29:36Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::BufferedReader(FileReader* reader, int64_t buffer_size)\n+        : _reader(reader),\n+          _buffer_size(buffer_size),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}\n+\n+BufferedReader::~BufferedReader() {\n+    close();\n+}\n+\n+Status BufferedReader::open() {\n+    if (!_reader) {\n+        std::stringstream ss;\n+        ss << \"Open buffered reader failed, reader is null\";\n+        return Status::InternalError(ss.str());\n+    }\n+    RETURN_IF_ERROR(_reader->open());\n+    RETURN_IF_ERROR(_fill());\n+    return Status::OK();\n+}\n+\n+//not support\n+Status BufferedReader::read_one_message(uint8_t** buf, size_t* length) {\n+    return Status::NotSupported(\"Not support\");\n+}\n+\n+Status BufferedReader::read(uint8_t* buf, size_t* buf_len, bool* eof) {\n+    DCHECK_NE(*buf_len, 0);\n+    int64_t bytes_read;\n+    RETURN_IF_ERROR(readat(_cur_offset, (int64_t)*buf_len, &bytes_read, buf));\n+    if (bytes_read == 0) {\n+        *eof = true;\n+    } else {\n+        *eof = false;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    if (nbytes <= 0) {\n+        *bytes_read = 0;\n+        return Status::OK();\n+    }\n+    RETURN_IF_ERROR(_read_once(position, nbytes, bytes_read, out));\n+    //EOF\n+    if (*bytes_read <= 0) {\n+        return Status::OK();\n+    }\n+    while (*bytes_read < nbytes) {\n+        int64_t len;\n+        RETURN_IF_ERROR(_read_once(position + *bytes_read, nbytes - *bytes_read, &len, reinterpret_cast<char*>(out) + *bytes_read));\n+        // EOF\n+        if (len <= 0) {\n+            break;\n+        }\n+        *bytes_read += len;\n+    }\n+    return Status::OK();\n+}\n+\n+Status BufferedReader::_read_once(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n+    // requested bytes missed the local buffer\n+    if (position >= _buffer_limit || position < _buffer_offset) {\n+        // if requested length is larger than the capacity of buffer, do not\n+        // need to copy the character into local buffer.\n+        if (nbytes > _buffer_limit - _buffer_offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNjM5OA=="}, "originalCommit": {"oid": "50f6ea119373612919a02b8cb5df5aa53e5f8569"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjIxNTQ0OnYy", "diffSide": "RIGHT", "path": "be/src/exec/broker_reader.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0MDo1NVrOGmxujQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0MzoyM1rOGmxwVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzgwNQ==", "bodyText": "what is \"readat ?\"", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443313805", "createdAt": "2020-06-22T04:40:55Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/broker_reader.cpp", "diffHunk": "@@ -155,6 +155,8 @@ Status BrokerReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_rea\n             return status;\n         }\n \n+        LOG(DEBUG) << \"send readat request to broker:\" << broker_addr << \" position:\" << position << \", read bytes length:\" << nbytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc80a3713258feb7c25336add4280f56efbccba0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNDE3Ng==", "bodyText": "what is \"readat ?\"\n\nLike pread", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443314176", "createdAt": "2020-06-22T04:42:51Z", "author": {"login": "morningman"}, "path": "be/src/exec/broker_reader.cpp", "diffHunk": "@@ -155,6 +155,8 @@ Status BrokerReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_rea\n             return status;\n         }\n \n+        LOG(DEBUG) << \"send readat request to broker:\" << broker_addr << \" position:\" << position << \", read bytes length:\" << nbytes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzgwNQ=="}, "originalCommit": {"oid": "dc80a3713258feb7c25336add4280f56efbccba0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNDI2Mw==", "bodyText": "Yes, it's confusing.  Better named it as pread request.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443314263", "createdAt": "2020-06-22T04:43:23Z", "author": {"login": "xy720"}, "path": "be/src/exec/broker_reader.cpp", "diffHunk": "@@ -155,6 +155,8 @@ Status BrokerReader::readat(int64_t position, int64_t nbytes, int64_t* bytes_rea\n             return status;\n         }\n \n+        LOG(DEBUG) << \"send readat request to broker:\" << broker_addr << \" position:\" << position << \", read bytes length:\" << nbytes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzgwNQ=="}, "originalCommit": {"oid": "dc80a3713258feb7c25336add4280f56efbccba0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjIyODQ4OnYy", "diffSide": "RIGHT", "path": "be/src/exec/buffered_reader.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1MToyOFrOGmx2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo1NToxNVrOGmx5eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTgyNw==", "bodyText": "maybe this construct funciton can be remove, for this is duplicated code.\nyou can add default paremerts to constructor function bellow.", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443315827", "createdAt": "2020-06-22T04:51:28Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc80a3713258feb7c25336add4280f56efbccba0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNjYwMQ==", "bodyText": "good", "url": "https://github.com/apache/incubator-doris/pull/3878#discussion_r443316601", "createdAt": "2020-06-22T04:55:15Z", "author": {"login": "xy720"}, "path": "be/src/exec/buffered_reader.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/buffered_reader.h\"\n+\n+#include <sstream>\n+#include <algorithm>\n+\n+#include \"common/logging.h\"\n+\n+namespace doris {\n+\n+// buffered reader\n+\n+BufferedReader::BufferedReader(FileReader* reader)\n+        : _reader(reader),\n+          _buffer_size(1024 * 1024),\n+          _buffer_offset(0),\n+          _buffer_limit(0),\n+          _cur_offset(0) {\n+    _buffer = new char[_buffer_size];\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTgyNw=="}, "originalCommit": {"oid": "dc80a3713258feb7c25336add4280f56efbccba0"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1515, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}