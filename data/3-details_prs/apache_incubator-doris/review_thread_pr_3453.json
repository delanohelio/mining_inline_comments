{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDQ2NDY5", "number": 3453, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNzo1ODozNFrOD4vjOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODowMDo0NVrOD4vj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODI1OTEyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNzo1ODozNFrOGPps4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNzo1ODozNFrOGPps4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);\n          \n          \n            \n                            LOG.debug(\"pushDownConjuncts: {}\", pushDownConjuncts);", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065058", "createdAt": "2020-05-03T07:58:34Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1347,6 +1349,45 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         if (scanNode instanceof OlapScanNode || scanNode instanceof EsScanNode) {\n             Map<String, PartitionColumnFilter> columnFilters = Maps.newHashMap();\n             List<Expr> conjuncts = analyzer.getUnassignedConjuncts(scanNode);\n+\n+            // push down join predicate\n+            List<Expr> pushDownConjuncts = Lists.newArrayList();\n+            TupleId tupleId = tblRef.getId();\n+            List<Expr> eqJoinPredicates = analyzer.getEqJoinConjuncts(tupleId);\n+            if (eqJoinPredicates != null) {\n+                // only inner and left outer join\n+                if ((tblRef.getJoinOp().isInnerJoin() || tblRef.getJoinOp().isLeftOuterJoin())) {\n+                    List<Expr> allConjuncts = analyzer.getConjuncts(analyzer.getAllTupleIds());\n+                    allConjuncts.removeAll(conjuncts);\n+                    for (Expr conjunct: allConjuncts) {\n+                        if (canPushDownPredicate(conjunct)) {\n+                            for (Expr eqJoinPredicate : eqJoinPredicates) {\n+                                // we can ensure slot is left node, because NormalizeBinaryPredicatesRule\n+                                SlotRef otherSlot = conjunct.getChild(0).unwrapSlotRef();\n+\n+                                // ensure the children for eqJoinPredicate both be SlotRef\n+                                if (eqJoinPredicate.getChild(0).unwrapSlotRef() == null || eqJoinPredicate.getChild(1).unwrapSlotRef() == null) {\n+                                    continue;\n+                                }\n+\n+                                SlotRef leftSlot = eqJoinPredicate.getChild(0).unwrapSlotRef();\n+                                SlotRef rightSlot = eqJoinPredicate.getChild(1).unwrapSlotRef();\n+\n+                                // example: t1.id = t2.id and t1.id = 1  => t2.id =1\n+                                if (otherSlot.isBound(leftSlot.getSlotId()) && rightSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, rightSlot));\n+                                } else if (otherSlot.isBound(rightSlot.getSlotId()) && leftSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, leftSlot));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODI2MDE4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNzo1OTozNVrOGPptWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozMToxNlrOGPxinw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ==", "bodyText": "Better not using static import", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065179", "createdAt": "2020-05-03T07:59:35Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -72,6 +72,8 @@\n import java.util.Map;\n import java.util.UUID;\n \n+import static org.apache.doris.analysis.Predicate.canPushDownPredicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUwMw==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193503", "createdAt": "2020-05-04T02:31:16Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -72,6 +72,8 @@\n import java.util.Map;\n import java.util.UUID;\n \n+import static org.apache.doris.analysis.Predicate.canPushDownPredicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ=="}, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODI2MTA2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODowMDo0NVrOGPptyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozMTozMFrOGPxitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA==", "bodyText": "Add comment for this method?", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065290", "createdAt": "2020-05-03T08:00:45Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1372,6 +1414,24 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         return scanNode;\n     }\n \n+    private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUyNg==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193526", "createdAt": "2020-05-04T02:31:30Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1372,6 +1414,24 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         return scanNode;\n     }\n \n+    private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA=="}, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1720, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}