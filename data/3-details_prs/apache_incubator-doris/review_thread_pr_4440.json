{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTY4MDEz", "number": 4440, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyOToyMFrOEfSQtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozOTo0MFrOEfSieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQwNTAyOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyOToyMFrOHLdy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0OTowNFrOHLerjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDU1NA==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481784554", "createdAt": "2020-09-02T06:29:20Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -263,27 +238,24 @@ void* StorageEngine::_garbage_sweeper_thread_callback(void* arg) {\n             // do nothing. continue next loop.\n         }\n     }\n-\n-    return nullptr;\n }\n \n-void* StorageEngine::_disk_stat_monitor_thread_callback(void* arg) {\n+void StorageEngine::_disk_stat_monitor_thread_callback() {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n-    while (!_stop_bg_worker) {\n+\n+    int32_t interval = config::disk_stat_monitor_interval;\n+    do {\n         _start_disk_stat_monitor();\n \n-        int32_t interval = config::disk_stat_monitor_interval;\n+        interval = config::disk_stat_monitor_interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5OTA1Mw==", "bodyText": "Same", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481799053", "createdAt": "2020-09-02T06:49:04Z", "author": {"login": "acelyc111"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -263,27 +238,24 @@ void* StorageEngine::_garbage_sweeper_thread_callback(void* arg) {\n             // do nothing. continue next loop.\n         }\n     }\n-\n-    return nullptr;\n }\n \n-void* StorageEngine::_disk_stat_monitor_thread_callback(void* arg) {\n+void StorageEngine::_disk_stat_monitor_thread_callback() {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n-    while (!_stop_bg_worker) {\n+\n+    int32_t interval = config::disk_stat_monitor_interval;\n+    do {\n         _start_disk_stat_monitor();\n \n-        int32_t interval = config::disk_stat_monitor_interval;\n+        interval = config::disk_stat_monitor_interval;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDU1NA=="}, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQwNjMyOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyOTozOVrOHLdzuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0OToxOFrOHLesUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDc2Mw==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481784763", "createdAt": "2020-09-02T06:29:39Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -330,108 +303,92 @@ void* StorageEngine::_cumulative_compaction_thread_callback(void* arg, DataDir*\n                 _perform_cumulative_compaction(data_dir);\n             }\n         }\n-        int32_t interval = config::cumulative_compaction_check_interval_seconds;\n+\n+        interval = config::cumulative_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5OTI0OQ==", "bodyText": "Same", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481799249", "createdAt": "2020-09-02T06:49:18Z", "author": {"login": "acelyc111"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -330,108 +303,92 @@ void* StorageEngine::_cumulative_compaction_thread_callback(void* arg, DataDir*\n                 _perform_cumulative_compaction(data_dir);\n             }\n         }\n-        int32_t interval = config::cumulative_compaction_check_interval_seconds;\n+\n+        interval = config::cumulative_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDc2Mw=="}, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQwODYyOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozMDoxNFrOHLd1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozMDoxNFrOHLd1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NTE2Nw==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481785167", "createdAt": "2020-09-02T06:30:14Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -330,108 +303,92 @@ void* StorageEngine::_cumulative_compaction_thread_callback(void* arg, DataDir*\n                 _perform_cumulative_compaction(data_dir);\n             }\n         }\n-        int32_t interval = config::cumulative_compaction_check_interval_seconds;\n+\n+        interval = config::cumulative_compaction_check_interval_seconds;\n         if (interval <= 0) {\n             LOG(WARNING) << \"cumulative compaction check interval config is illegal:\" << interval\n                         << \"will be forced set to one\";\n             interval = 1;\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-void* StorageEngine::_unused_rowset_monitor_thread_callback(void* arg) {\n+void StorageEngine::_unused_rowset_monitor_thread_callback() {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::unused_rowset_monitor_interval;\n+    do {\n         start_delete_unused_rowset();\n \n-        int32_t interval = config::unused_rowset_monitor_interval;\n+        interval = config::unused_rowset_monitor_interval;\n         if (interval <= 0) {\n             LOG(WARNING) << \"unused_rowset_monitor_interval config is illegal: \" << interval\n                          << \", force set to 1\";\n             interval = 1;\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-\n-\n-void* StorageEngine::_path_gc_thread_callback(void* arg) {\n+void StorageEngine::_path_gc_thread_callback(DataDir* data_dir) {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n \n     LOG(INFO) << \"try to start path gc thread!\";\n-\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::path_gc_check_interval_second;\n+    do {\n         LOG(INFO) << \"try to perform path gc by tablet!\";\n-        ((DataDir*)arg)->perform_path_gc_by_tablet();\n+        data_dir->perform_path_gc_by_tablet();\n         \n         LOG(INFO) << \"try to perform path gc by rowsetid!\";\n-        // perform path gc by rowset id\n-        ((DataDir*)arg)->perform_path_gc_by_rowsetid();\n+        data_dir->perform_path_gc_by_rowsetid();\n \n-        int32_t interval = config::path_gc_check_interval_second;\n+        interval = config::path_gc_check_interval_second;\n         if (interval <= 0) {\n             LOG(WARNING) << \"path gc thread check interval config is illegal:\" << interval\n                          << \"will be forced set to half hour\";\n             interval = 1800; // 0.5 hour\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-void* StorageEngine::_path_scan_thread_callback(void* arg) {\n+void StorageEngine::_path_scan_thread_callback(DataDir* data_dir) {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n \n-    LOG(INFO) << \"try to start path scan thread!\";\n-\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::path_scan_interval_second;\n+    do {\n         LOG(INFO) << \"try to perform path scan!\";\n-        ((DataDir*)arg)->perform_path_scan();\n+        data_dir->perform_path_scan();\n \n         int32_t interval = config::path_scan_interval_second;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 393}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjQ1MDQ4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozOTo0MFrOHLeP7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo0ODozOVrOHLeqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MTk4MA==", "bodyText": "abundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481791980", "createdAt": "2020-09-02T06:39:40Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -208,20 +186,17 @@ void* StorageEngine::_base_compaction_thread_callback(void* arg, DataDir* data_d\n             }\n         }\n \n-        int32_t interval = config::base_compaction_check_interval_seconds;\n+        interval = config::base_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5ODcyOQ==", "bodyText": "Yes, I redundant assign it intentionally here, because base_compaction_check_interval_seconds is a mutable config, we can change it by http api dynamically (/api/update_config?config_name=new_value), it may be changed when do the next loop.", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481798729", "createdAt": "2020-09-02T06:48:39Z", "author": {"login": "acelyc111"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -208,20 +186,17 @@ void* StorageEngine::_base_compaction_thread_callback(void* arg, DataDir* data_d\n             }\n         }\n \n-        int32_t interval = config::base_compaction_check_interval_seconds;\n+        interval = config::base_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MTk4MA=="}, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 211}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1181, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}