{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1ODEyNzIx", "number": 3738, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDozNVrOEBZGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NDo1NVrOEChfcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODk1MjEzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/row.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDozNVrOGdNgWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMjoxN1rOGdwhSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzE2MQ==", "bodyText": "This function is used in many senarios. And changing here to fix the problem is not a good idea.\nWhy not to make column in the schema is not NULL.", "url": "https://github.com/apache/incubator-doris/pull/3738#discussion_r433283161", "createdAt": "2020-06-01T14:54:35Z", "author": {"login": "imay"}, "path": "be/src/olap/row.h", "diffHunk": "@@ -59,6 +59,10 @@ bool equal_row(const std::vector<uint32_t>& ids,\n template<typename LhsRowType, typename RhsRowType>\n int compare_row(const LhsRowType& lhs, const RhsRowType& rhs) {\n     for (uint32_t cid = 0; cid < lhs.schema()->num_key_columns(); ++cid) {\n+        //because the num_column_ids include the column of double/float type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9402e1134559f5e59e6d84fa1e0f9adaa4e8717e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjQ1MA==", "bodyText": "Ignore the column of double/float type in engine_checksum_task.cpp,  but num_key_columns  include the double/float column index.\nIn other ways, I can only add related functions such as reader.init, compare function for sort and aggregation function for checksum. The code volume is a little large.\n// ignore float and double type considering to precision lose\n    for (size_t i = 0; i < tablet->tablet_schema().num_columns(); ++i) {\n        FieldType type = tablet->tablet_schema().column(i).type();\n        if (type == OLAP_FIELD_TYPE_FLOAT || type == OLAP_FIELD_TYPE_DOUBLE) {\n            continue;\n        }\n\n        reader_params.return_columns.push_back(i);\n    }", "url": "https://github.com/apache/incubator-doris/pull/3738#discussion_r433302450", "createdAt": "2020-06-01T15:26:30Z", "author": {"login": "marising"}, "path": "be/src/olap/row.h", "diffHunk": "@@ -59,6 +59,10 @@ bool equal_row(const std::vector<uint32_t>& ids,\n template<typename LhsRowType, typename RhsRowType>\n int compare_row(const LhsRowType& lhs, const RhsRowType& rhs) {\n     for (uint32_t cid = 0; cid < lhs.schema()->num_key_columns(); ++cid) {\n+        //because the num_column_ids include the column of double/float type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzE2MQ=="}, "originalCommit": {"oid": "9402e1134559f5e59e6d84fa1e0f9adaa4e8717e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1Njg0MA==", "bodyText": "remove the code of ignore the column of float/double type's in engine_checksum.cpp\nignore the cell of float/double type when compute row's hash code\nthe value of checksum is independent of the sorting of data rows", "url": "https://github.com/apache/incubator-doris/pull/3738#discussion_r433856840", "createdAt": "2020-06-02T13:02:17Z", "author": {"login": "marising"}, "path": "be/src/olap/row.h", "diffHunk": "@@ -59,6 +59,10 @@ bool equal_row(const std::vector<uint32_t>& ids,\n template<typename LhsRowType, typename RhsRowType>\n int compare_row(const LhsRowType& lhs, const RhsRowType& rhs) {\n     for (uint32_t cid = 0; cid < lhs.schema()->num_key_columns(); ++cid) {\n+        //because the num_column_ids include the column of double/float type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzE2MQ=="}, "originalCommit": {"oid": "9402e1134559f5e59e6d84fa1e0f9adaa4e8717e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQ1Mjc4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/row.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzozNDoyNVrOGe0psA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzozNDoyNVrOGe0psA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MzEwNA==", "bodyText": "Should add comment for this if logical to let others know why.", "url": "https://github.com/apache/incubator-doris/pull/3738#discussion_r434973104", "createdAt": "2020-06-04T03:34:25Z", "author": {"login": "imay"}, "path": "be/src/olap/row.h", "diffHunk": "@@ -186,7 +186,12 @@ void agg_finalize_row(const std::vector<uint32_t>& ids, RowType* row, MemPool* m\n \n template<typename RowType>\n uint32_t hash_row(const RowType& row, uint32_t seed) {\n+    FieldType type;\n     for (uint32_t cid : row.schema()->column_ids()) {\n+        type = row.schema()->column(cid)->type();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb5f4bc9846675073aebd1b73e271b8d1b77988"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgxMzI4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/task/engine_checksum_task.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NDo1NVrOGfB-zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NDo1NVrOGfB-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTUwMA==", "bodyText": "one_checksum = 0; this line is meaningless.", "url": "https://github.com/apache/incubator-doris/pull/3738#discussion_r435191500", "createdAt": "2020-06-04T11:44:55Z", "author": {"login": "morningman"}, "path": "be/src/olap/task/engine_checksum_task.cpp", "diffHunk": "@@ -118,8 +113,10 @@ OLAPStatus EngineChecksumTask::_compute_checksum() {\n             OLAP_LOG_WARNING(\"fail to read in reader. [res=%d]\", res);\n             return res;\n         }\n-\n-        row_checksum = hash_row(row, row_checksum);\n+        one_checksum = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75e85de72ae186d3229303bd2b636dbc1d2bec69"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1422, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}