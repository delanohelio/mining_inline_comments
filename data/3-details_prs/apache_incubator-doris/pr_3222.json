{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTAyODg1", "number": 3222, "title": "Support sharding txn_map_lock into more small map locks to make good performance for txn manage task", "bodyText": "This PR is to enhance the peformance for txn manage task, when there are so many txn in doris be, the only one txn_map_lock and additional _txn_locks may cause poor performance, and now we remove the additional _txn_locks and split the txn_map_lock into many small locks.", "createdAt": "2020-03-28T14:26:46Z", "url": "https://github.com/apache/incubator-doris/pull/3222", "merged": true, "mergeCommit": {"oid": "a5703ef114ee5be2657481f6393e2bca054fd48f"}, "closed": true, "closedAt": "2020-04-09T14:35:16Z", "author": {"login": "caiconghui"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTDun4gFqTM4NDc1NjUyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV9cwxgFqTM5MDg0OTg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NzU2NTI5", "url": "https://github.com/apache/incubator-doris/pull/3222#pullrequestreview-384756529", "createdAt": "2020-03-31T13:54:26Z", "commit": {"oid": "d73401fb80302ac8d4a8211b2ad7136fa47ea426"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo1NDoyN1rOF-W9TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxMToxMVrOF-Xvuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkzMjE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> *_txn_tablet_maps;\n          \n          \n            \n                txn_tablet_map_t *_txn_tablet_maps;", "url": "https://github.com/apache/incubator-doris/pull/3222#discussion_r400932172", "createdAt": "2020-03-31T13:54:27Z", "author": {"login": "morningman"}, "path": "be/src/olap/txn_manager.h", "diffHunk": "@@ -140,30 +141,48 @@ class TxnManager {\n     void get_partition_ids(const TTransactionId transaction_id, std::vector<TPartitionId>* partition_ids);\n     \n private:\n-    RWMutex* _get_txn_lock(TTransactionId txn_id) {\n-        return _txn_locks[txn_id % _txn_lock_num].get();\n-    }\n+\n+    using TxnKey = std::pair<int64_t, int64_t>; // partition_id, transaction_id;\n+\n+    typedef std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> txn_tablet_map_t;\n+    typedef std::unordered_map<int64_t, std::unordered_set<int64_t>> txn_partition_map_t;\n+\n+    inline RWMutex& _get_txn_map_lock(TTransactionId transactionId);\n+\n+    inline txn_tablet_map_t& _get_txn_tablet_map(TTransactionId transactionId);\n+\n+    inline txn_partition_map_t& _get_txn_partition_map(TTransactionId transactionId);\n \n     // insert or remove (transaction_id, partition_id) from _txn_partition_map\n     // get _txn_map_lock before calling\n     void _insert_txn_partition_map_unlocked(int64_t transaction_id, int64_t partition_id);\n     void _clear_txn_partition_map_unlocked(int64_t transaction_id, int64_t partition_id);\n \n private:\n-    RWMutex _txn_map_lock;\n-    using TxnKey = std::pair<int64_t, int64_t>; // partition_id, transaction_id;\n-    std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> _txn_tablet_map;\n+    const int32_t _txn_map_shard_size;\n+\n+    // _txn_map_locks[i] protect _txn_tablet_maps[i], i=0,1,2...,and i < _txn_map_shard_size\n+    std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> *_txn_tablet_maps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73401fb80302ac8d4a8211b2ad7136fa47ea426"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkzMzk2Ng==", "bodyText": "And using std::unordered_map is better", "url": "https://github.com/apache/incubator-doris/pull/3222#discussion_r400933966", "createdAt": "2020-03-31T13:56:34Z", "author": {"login": "morningman"}, "path": "be/src/olap/txn_manager.h", "diffHunk": "@@ -140,30 +141,48 @@ class TxnManager {\n     void get_partition_ids(const TTransactionId transaction_id, std::vector<TPartitionId>* partition_ids);\n     \n private:\n-    RWMutex* _get_txn_lock(TTransactionId txn_id) {\n-        return _txn_locks[txn_id % _txn_lock_num].get();\n-    }\n+\n+    using TxnKey = std::pair<int64_t, int64_t>; // partition_id, transaction_id;\n+\n+    typedef std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> txn_tablet_map_t;\n+    typedef std::unordered_map<int64_t, std::unordered_set<int64_t>> txn_partition_map_t;\n+\n+    inline RWMutex& _get_txn_map_lock(TTransactionId transactionId);\n+\n+    inline txn_tablet_map_t& _get_txn_tablet_map(TTransactionId transactionId);\n+\n+    inline txn_partition_map_t& _get_txn_partition_map(TTransactionId transactionId);\n \n     // insert or remove (transaction_id, partition_id) from _txn_partition_map\n     // get _txn_map_lock before calling\n     void _insert_txn_partition_map_unlocked(int64_t transaction_id, int64_t partition_id);\n     void _clear_txn_partition_map_unlocked(int64_t transaction_id, int64_t partition_id);\n \n private:\n-    RWMutex _txn_map_lock;\n-    using TxnKey = std::pair<int64_t, int64_t>; // partition_id, transaction_id;\n-    std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> _txn_tablet_map;\n+    const int32_t _txn_map_shard_size;\n+\n+    // _txn_map_locks[i] protect _txn_tablet_maps[i], i=0,1,2...,and i < _txn_map_shard_size\n+    std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>> *_txn_tablet_maps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkzMjE3Mg=="}, "originalCommit": {"oid": "d73401fb80302ac8d4a8211b2ad7136fa47ea426"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkzNTI0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                _txn_tablet_maps = new std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>>[_txn_map_shard_size];\n          \n          \n            \n                _txn_tablet_maps = new txn_tablet_map_t[_txn_map_shard_size];", "url": "https://github.com/apache/incubator-doris/pull/3222#discussion_r400935246", "createdAt": "2020-03-31T13:58:11Z", "author": {"login": "morningman"}, "path": "be/src/olap/txn_manager.cpp", "diffHunk": "@@ -70,10 +71,13 @@ using std::vector;\n \n namespace doris {\n \n-TxnManager::TxnManager() {\n-    for (int i = 0; i < _txn_lock_num; ++i) {\n-        _txn_locks[i] = std::make_shared<RWMutex>();\n-    }\n+TxnManager::TxnManager(int32_t txn_map_shard_size)\n+        : _txn_map_shard_size(txn_map_shard_size) {\n+    DCHECK_GT(_txn_map_shard_size, 0);\n+    DCHECK_EQ(_txn_map_shard_size & (_txn_map_shard_size - 1), 0);\n+    _txn_map_locks = new RWMutex[_txn_map_shard_size];\n+    _txn_tablet_maps = new std::map<TxnKey, std::map<TabletInfo, TabletTxnInfo>>[_txn_map_shard_size];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73401fb80302ac8d4a8211b2ad7136fa47ea426"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NTA4Mw==", "bodyText": "I think you may not be able to remove this lock.\nWriteLock wrlock(_get_txn_lock(transaction_id));\nThe meaning of this lock is different from that of the _txn_map_lock. This lock prevents a single transaction from being modified at the same time. The _txn_map_lock prevents the map structure from being modified at the same time.\nIf this lock is removed here. Then there may be two threads publishing the txn at the same time, which will modify their contents(such as rowset meta) at the same time.", "url": "https://github.com/apache/incubator-doris/pull/3222#discussion_r400945083", "createdAt": "2020-03-31T14:11:11Z", "author": {"login": "morningman"}, "path": "be/src/olap/txn_manager.cpp", "diffHunk": "@@ -253,11 +260,11 @@ OLAPStatus TxnManager::publish_txn(OlapMeta* meta, TPartitionId partition_id, TT\n     pair<int64_t, int64_t> key(partition_id, transaction_id);\n     TabletInfo tablet_info(tablet_id, schema_hash, tablet_uid);\n     RowsetSharedPtr rowset_ptr = nullptr;\n-    WriteLock wrlock(_get_txn_lock(transaction_id));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73401fb80302ac8d4a8211b2ad7136fa47ea426"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a419c3ad37e4e53b21a96196ddfb8e9a588b7416", "author": {"user": {"login": "caiconghui", "name": "caiconghui"}}, "url": "https://github.com/apache/incubator-doris/commit/a419c3ad37e4e53b21a96196ddfb8e9a588b7416", "committedDate": "2020-04-09T13:21:28Z", "message": "Support sharding txn_map_lock into more small map locks to make good performance for txn manage task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56b02e09fb19731aa50c84a89e1788e173c7baed", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/56b02e09fb19731aa50c84a89e1788e173c7baed", "committedDate": "2020-04-09T13:21:31Z", "message": "add some check for const shard size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2990485f91bd5b44bc8f504eea4bf04a707a3f7f", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/2990485f91bd5b44bc8f504eea4bf04a707a3f7f", "committedDate": "2020-04-09T13:21:31Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd0b055bd124a29b08169d506dc51bde38c25d3", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/9dd0b055bd124a29b08169d506dc51bde38c25d3", "committedDate": "2020-04-09T13:21:31Z", "message": "fix config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d17dd72fb7b8fb99cc6ba7386bc765fa3b3ac96c", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/d17dd72fb7b8fb99cc6ba7386bc765fa3b3ac96c", "committedDate": "2020-04-02T06:52:52Z", "message": "fix config"}, "afterCommit": {"oid": "9dd0b055bd124a29b08169d506dc51bde38c25d3", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/9dd0b055bd124a29b08169d506dc51bde38c25d3", "committedDate": "2020-04-09T13:21:31Z", "message": "fix config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f5dffd364272a9796b632b81f3f58ad8af0c470", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/2f5dffd364272a9796b632b81f3f58ad8af0c470", "committedDate": "2020-04-09T14:12:43Z", "message": "fix config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODMxMTQx", "url": "https://github.com/apache/incubator-doris/pull/3222#pullrequestreview-390831141", "createdAt": "2020-04-09T14:13:29Z", "commit": {"oid": "9dd0b055bd124a29b08169d506dc51bde38c25d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODQ5ODQ4", "url": "https://github.com/apache/incubator-doris/pull/3222#pullrequestreview-390849848", "createdAt": "2020-04-09T14:34:07Z", "commit": {"oid": "2f5dffd364272a9796b632b81f3f58ad8af0c470"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}