{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4Njg4NDE1", "number": 2641, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo0ODo1MFrODVpHKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQwODo1NTowOVrODVywEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDIwMjY2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateViewStmt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo0ODo1MFrOFZ-kuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTozNzowNlrOFat4yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4MzkyOQ==", "bodyText": "should use a new Analyzer", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r362783929", "createdAt": "2020-01-03T11:48:50Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateViewStmt.java", "diffHunk": "@@ -55,21 +55,17 @@ public String getComment() {\n \n     @Override\n     public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n-        if (cols != null) {\n-            cloneStmt = viewDefStmt.clone();\n-        }\n         tableName.analyze(analyzer);\n         viewDefStmt.setNeedToSql(true);\n-        // Analyze view define statement\n-        Analyzer viewAnalyzer = new Analyzer(analyzer);\n-        viewDefStmt.analyze(viewAnalyzer);\n \n         // check privilege\n         if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), tableName.getDb(),\n                                                                 tableName.getTbl(), PrivPredicate.CREATE)) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CREATE\");\n         }\n \n+        // Analyze view define statement\n+        viewDefStmt.analyze(analyzer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1OTExNA==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r363559114", "createdAt": "2020-01-07T01:37:06Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateViewStmt.java", "diffHunk": "@@ -55,21 +55,17 @@ public String getComment() {\n \n     @Override\n     public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n-        if (cols != null) {\n-            cloneStmt = viewDefStmt.clone();\n-        }\n         tableName.analyze(analyzer);\n         viewDefStmt.setNeedToSql(true);\n-        // Analyze view define statement\n-        Analyzer viewAnalyzer = new Analyzer(analyzer);\n-        viewDefStmt.analyze(viewAnalyzer);\n \n         // check privilege\n         if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), tableName.getDb(),\n                                                                 tableName.getTbl(), PrivPredicate.CREATE)) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CREATE\");\n         }\n \n+        // Analyze view define statement\n+        viewDefStmt.analyze(analyzer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4MzkyOQ=="}, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDIwODE4OnYy", "diffSide": "LEFT", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo1Mjo0OVrOFZ-n7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo1Mjo0OVrOFZ-n7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NDc1MA==", "bodyText": "I'm not sure that the following will be right for every case.", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r362784750", "createdAt": "2020-01-03T11:52:49Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -113,27 +113,21 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n             return;\n         }\n \n-        Analyzer tmpAnalyzer = new Analyzer(analyzer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDIxMDUwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo1NDoyNFrOFZ-pQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoxNzozOFrOFaW0iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NTA5MQ==", "bodyText": "Is this work for a function call in select list?", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r362785091", "createdAt": "2020-01-03T11:54:24Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -113,27 +113,21 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n             return;\n         }\n \n-        Analyzer tmpAnalyzer = new Analyzer(analyzer);\n-        List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n-        cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-        // StringBuilder sb = new StringBuilder();\n-        // sb.append(\"SELECT \");\n-        // for (int i = 0; i < columnNames.size(); ++i) {\n-        //     if (i != 0) {\n-        //         sb.append(\", \");\n-        //     }\n-        //     String colRef = viewDefStmt.getColLabels().get(i);\n-        //     if (!colRef.startsWith(\"`\")) {\n-        //         colRef = \"`\" + colRef + \"`\";\n-        //     }\n-        //     String colAlias = finalCols.get(i).getName();\n-\n-        //     sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-        // }\n-        // sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-        // inlineViewDef = sb.toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < finalCols.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = finalCols.get(i).getName();\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MTE5Mw==", "bodyText": "It is work. Because the analyze is happen at before. What is doing here is just to wrap another sql outside the previous analyzed sql.", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r363181193", "createdAt": "2020-01-06T07:17:38Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -113,27 +113,21 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n             return;\n         }\n \n-        Analyzer tmpAnalyzer = new Analyzer(analyzer);\n-        List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n-        cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-        // StringBuilder sb = new StringBuilder();\n-        // sb.append(\"SELECT \");\n-        // for (int i = 0; i < columnNames.size(); ++i) {\n-        //     if (i != 0) {\n-        //         sb.append(\", \");\n-        //     }\n-        //     String colRef = viewDefStmt.getColLabels().get(i);\n-        //     if (!colRef.startsWith(\"`\")) {\n-        //         colRef = \"`\" + colRef + \"`\";\n-        //     }\n-        //     String colAlias = finalCols.get(i).getName();\n-\n-        //     sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-        // }\n-        // sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-        // inlineViewDef = sb.toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < finalCols.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = finalCols.get(i).getName();\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NTA5MQ=="}, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDIxMTEwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/AlterViewStmt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTo1NTowMFrOFZ-pog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTo0MjoyN1rOFat8qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NTE4Ng==", "bodyText": "must analyze view with a new analyzer.", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r362785186", "createdAt": "2020-01-03T11:55:00Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/AlterViewStmt.java", "diffHunk": "@@ -54,20 +62,17 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                     tableName.getTbl());\n         }\n \n-        if (cols != null) {\n-            cloneStmt = viewDefStmt.clone();\n-        }\n         viewDefStmt.setNeedToSql(true);\n-        Analyzer viewAnalyzer = new Analyzer(analyzer);\n+        viewDefStmt.analyze(analyzer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MDEwNA==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r363560104", "createdAt": "2020-01-07T01:42:27Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/analysis/AlterViewStmt.java", "diffHunk": "@@ -54,20 +62,17 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                     tableName.getTbl());\n         }\n \n-        if (cols != null) {\n-            cloneStmt = viewDefStmt.clone();\n-        }\n         viewDefStmt.setNeedToSql(true);\n-        Analyzer viewAnalyzer = new Analyzer(analyzer);\n+        viewDefStmt.analyze(analyzer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NTE4Ng=="}, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTc4MTk0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/persist/AlterViewInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQwODo1NTowOVrOFaNQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTo0MDowMFrOFat66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDQ1OQ==", "bodyText": "You can also add @SerializedName to newFullSchema", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r363024459", "createdAt": "2020-01-04T08:55:09Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/persist/AlterViewInfo.java", "diffHunk": "@@ -35,15 +38,18 @@\n     private String inlineViewDef;\n     @SerializedName(value = \"sqlMode\")\n     private long sqlMode;\n+    private List<Column> newFullSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1OTY1OQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/2641#discussion_r363559659", "createdAt": "2020-01-07T01:40:00Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/persist/AlterViewInfo.java", "diffHunk": "@@ -35,15 +38,18 @@\n     private String inlineViewDef;\n     @SerializedName(value = \"sqlMode\")\n     private long sqlMode;\n+    private List<Column> newFullSchema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNDQ1OQ=="}, "originalCommit": {"oid": "93f4f10e64c676095abdee8ca7d3d63d5e0999cc"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2271, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}