{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5Mjg0NTE5", "number": 4984, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjo0OToyN1rOFOcNmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjo0OToyN1rOFOcNmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNjg2NjE3OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjo0OToyN1rOITNMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwOTowMjoxMVrOITbCAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDExOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {\n          \n          \n            \n                    for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry : assignment.entrySet()) {", "url": "https://github.com/apache/incubator-doris/pull/4984#discussion_r557010119", "createdAt": "2021-01-14T02:49:27Z", "author": {"login": "caiconghui"}, "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "diffHunk": "@@ -595,5 +597,137 @@ public void testBucketShuffleWithUnaliveBackend()  {\n         Assert.assertTrue(backendIds.get(1) == 1);\n         Assert.assertTrue(counts.get(1) == 1);\n     }\n+\n+    @Test\n+    public void testComputeScanRangeAssignment()  {\n+        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n+\n+        //TScanRangeLocations\n+        TScanRangeLocations tScanRangeLocations = new TScanRangeLocations();\n+        TScanRangeLocation tScanRangeLocation0 = new TScanRangeLocation();\n+        tScanRangeLocation0.backend_id = 0;\n+        tScanRangeLocation0.server = new TNetworkAddress(\"0.0.0.0\", 9050);\n+        TScanRangeLocation tScanRangeLocation1 = new TScanRangeLocation();\n+        tScanRangeLocation1.backend_id = 1;\n+        tScanRangeLocation1.server = new TNetworkAddress(\"0.0.0.1\", 9050);\n+        TScanRangeLocation tScanRangeLocation2 = new TScanRangeLocation();\n+        tScanRangeLocation2.backend_id = 2;\n+        tScanRangeLocation2.server = new TNetworkAddress(\"0.0.0.2\", 9050);\n+        tScanRangeLocations.locations = new ArrayList<>();\n+        tScanRangeLocations.locations.add(tScanRangeLocation0);\n+        tScanRangeLocations.locations.add(tScanRangeLocation1);\n+        tScanRangeLocations.locations.add(tScanRangeLocation2);\n+\n+        //scanNode1\n+        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n+        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable, \"defaultDistributionInfo\", hashDistributionInfo);\n+        tupleDescriptor.setTable(olapTable);\n+        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(1), tupleDescriptor, \"test\");\n+        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode.setFragment(fragment);\n+        List<TScanRangeLocations> locations = new ArrayList<>();\n+        locations.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode, \"result\", locations);\n+\n+        //scanNode2\n+        PlanFragmentId planFragmentId2 = new PlanFragmentId(2);\n+        TupleDescriptor tupleDescriptor2 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable2 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo2 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable2, \"defaultDistributionInfo\", hashDistributionInfo2);\n+        tupleDescriptor2.setTable(olapTable2);\n+        OlapScanNode olapScanNode2 = new OlapScanNode(new PlanNodeId(2), tupleDescriptor2, \"test2\");\n+        PlanFragment fragment2 = new PlanFragment(planFragmentId2, olapScanNode2,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode2.setFragment(fragment2);\n+        List<TScanRangeLocations> locations2 = new ArrayList<>();\n+        locations2.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode2, \"result\", locations2);\n+\n+        //scanNode3\n+        PlanFragmentId planFragmentId3 = new PlanFragmentId(3);\n+        TupleDescriptor tupleDescriptor3 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable3 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo3 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable3, \"defaultDistributionInfo\", hashDistributionInfo3);\n+        tupleDescriptor3.setTable(olapTable3);\n+        OlapScanNode olapScanNode3 = new OlapScanNode(new PlanNodeId(3), tupleDescriptor3, \"test3\");\n+        PlanFragment fragment3 = new PlanFragment(planFragmentId3, olapScanNode3,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode3.setFragment(fragment3);\n+        List<TScanRangeLocations> locations3 = new ArrayList<>();\n+        locations3.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode3, \"result\", locations3);\n+\n+        //scan nodes\n+        List<ScanNode> scanNodes = new ArrayList<>();\n+        scanNodes.add(olapScanNode);\n+        scanNodes.add(olapScanNode2);\n+        scanNodes.add(olapScanNode3);\n+        Deencapsulation.setField(coordinator, \"scanNodes\", scanNodes);\n+\n+        //fragmentIdToScanNodeIds\n+        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = Maps.newHashMap();\n+        Set<Integer> ids1 = new HashSet<>();\n+        ids1.add(1);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids1);\n+        Set<Integer> ids2 = new HashSet<>();\n+        ids1.add(2);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids2);\n+        Set<Integer> ids3 = new HashSet<>();\n+        ids1.add(3);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids3);\n+        Deencapsulation.setField(coordinator,\"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n+\n+        //fragmentExecParamsMap\n+        Map<PlanFragmentId, FragmentExecParams> fragmentExecParamsMap = Maps.newHashMap();\n+        fragmentExecParamsMap.put(planFragmentId, new FragmentExecParams(fragment));\n+        fragmentExecParamsMap.put(planFragmentId2, new FragmentExecParams(fragment2));\n+        fragmentExecParamsMap.put(planFragmentId3, new FragmentExecParams(fragment3));\n+        Deencapsulation.setField(coordinator,\"fragmentExecParamsMap\", fragmentExecParamsMap);\n+\n+        //bucketShuffleJoinController\n+        BucketShuffleJoinController bucketShuffleJoinController = new BucketShuffleJoinController(fragmentIdToScanNodeIds);\n+        // init all backend\n+        Backend backend0 = new Backend(0, \"0.0.0.0\", 9060);\n+        backend0.setAlive(true);\n+        backend0.setBePort(9050);\n+        Backend backend1 = new Backend(1, \"0.0.0.1\", 9060);\n+        backend1.setAlive(true);\n+        backend1.setBePort(9050);\n+        Backend backend2 = new Backend(2, \"0.0.0.2\", 9060);\n+        backend2.setAlive(true);\n+        backend2.setBePort(9050);\n+\n+        ImmutableMap<Long, Backend> idToBackend =\n+                new ImmutableMap.Builder<Long, Backend>().\n+                        put(0l, backend0).\n+                        put(1l, backend1).\n+                        put(2l, backend2).build();\n+        Deencapsulation.setField(coordinator, \"idToBackend\", idToBackend);\n+\n+        Deencapsulation.invoke(coordinator, \"computeScanRangeAssignment\");\n+        FragmentScanRangeAssignment assignment = fragmentExecParamsMap.get(fragment.getFragmentId()).scanRangeAssignment;\n+        for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDE5NA==", "bodyText": "and the same as following", "url": "https://github.com/apache/incubator-doris/pull/4984#discussion_r557010194", "createdAt": "2021-01-14T02:49:45Z", "author": {"login": "caiconghui"}, "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "diffHunk": "@@ -595,5 +597,137 @@ public void testBucketShuffleWithUnaliveBackend()  {\n         Assert.assertTrue(backendIds.get(1) == 1);\n         Assert.assertTrue(counts.get(1) == 1);\n     }\n+\n+    @Test\n+    public void testComputeScanRangeAssignment()  {\n+        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n+\n+        //TScanRangeLocations\n+        TScanRangeLocations tScanRangeLocations = new TScanRangeLocations();\n+        TScanRangeLocation tScanRangeLocation0 = new TScanRangeLocation();\n+        tScanRangeLocation0.backend_id = 0;\n+        tScanRangeLocation0.server = new TNetworkAddress(\"0.0.0.0\", 9050);\n+        TScanRangeLocation tScanRangeLocation1 = new TScanRangeLocation();\n+        tScanRangeLocation1.backend_id = 1;\n+        tScanRangeLocation1.server = new TNetworkAddress(\"0.0.0.1\", 9050);\n+        TScanRangeLocation tScanRangeLocation2 = new TScanRangeLocation();\n+        tScanRangeLocation2.backend_id = 2;\n+        tScanRangeLocation2.server = new TNetworkAddress(\"0.0.0.2\", 9050);\n+        tScanRangeLocations.locations = new ArrayList<>();\n+        tScanRangeLocations.locations.add(tScanRangeLocation0);\n+        tScanRangeLocations.locations.add(tScanRangeLocation1);\n+        tScanRangeLocations.locations.add(tScanRangeLocation2);\n+\n+        //scanNode1\n+        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n+        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable, \"defaultDistributionInfo\", hashDistributionInfo);\n+        tupleDescriptor.setTable(olapTable);\n+        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(1), tupleDescriptor, \"test\");\n+        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode.setFragment(fragment);\n+        List<TScanRangeLocations> locations = new ArrayList<>();\n+        locations.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode, \"result\", locations);\n+\n+        //scanNode2\n+        PlanFragmentId planFragmentId2 = new PlanFragmentId(2);\n+        TupleDescriptor tupleDescriptor2 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable2 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo2 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable2, \"defaultDistributionInfo\", hashDistributionInfo2);\n+        tupleDescriptor2.setTable(olapTable2);\n+        OlapScanNode olapScanNode2 = new OlapScanNode(new PlanNodeId(2), tupleDescriptor2, \"test2\");\n+        PlanFragment fragment2 = new PlanFragment(planFragmentId2, olapScanNode2,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode2.setFragment(fragment2);\n+        List<TScanRangeLocations> locations2 = new ArrayList<>();\n+        locations2.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode2, \"result\", locations2);\n+\n+        //scanNode3\n+        PlanFragmentId planFragmentId3 = new PlanFragmentId(3);\n+        TupleDescriptor tupleDescriptor3 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable3 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo3 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable3, \"defaultDistributionInfo\", hashDistributionInfo3);\n+        tupleDescriptor3.setTable(olapTable3);\n+        OlapScanNode olapScanNode3 = new OlapScanNode(new PlanNodeId(3), tupleDescriptor3, \"test3\");\n+        PlanFragment fragment3 = new PlanFragment(planFragmentId3, olapScanNode3,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode3.setFragment(fragment3);\n+        List<TScanRangeLocations> locations3 = new ArrayList<>();\n+        locations3.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode3, \"result\", locations3);\n+\n+        //scan nodes\n+        List<ScanNode> scanNodes = new ArrayList<>();\n+        scanNodes.add(olapScanNode);\n+        scanNodes.add(olapScanNode2);\n+        scanNodes.add(olapScanNode3);\n+        Deencapsulation.setField(coordinator, \"scanNodes\", scanNodes);\n+\n+        //fragmentIdToScanNodeIds\n+        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = Maps.newHashMap();\n+        Set<Integer> ids1 = new HashSet<>();\n+        ids1.add(1);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids1);\n+        Set<Integer> ids2 = new HashSet<>();\n+        ids1.add(2);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids2);\n+        Set<Integer> ids3 = new HashSet<>();\n+        ids1.add(3);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids3);\n+        Deencapsulation.setField(coordinator,\"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n+\n+        //fragmentExecParamsMap\n+        Map<PlanFragmentId, FragmentExecParams> fragmentExecParamsMap = Maps.newHashMap();\n+        fragmentExecParamsMap.put(planFragmentId, new FragmentExecParams(fragment));\n+        fragmentExecParamsMap.put(planFragmentId2, new FragmentExecParams(fragment2));\n+        fragmentExecParamsMap.put(planFragmentId3, new FragmentExecParams(fragment3));\n+        Deencapsulation.setField(coordinator,\"fragmentExecParamsMap\", fragmentExecParamsMap);\n+\n+        //bucketShuffleJoinController\n+        BucketShuffleJoinController bucketShuffleJoinController = new BucketShuffleJoinController(fragmentIdToScanNodeIds);\n+        // init all backend\n+        Backend backend0 = new Backend(0, \"0.0.0.0\", 9060);\n+        backend0.setAlive(true);\n+        backend0.setBePort(9050);\n+        Backend backend1 = new Backend(1, \"0.0.0.1\", 9060);\n+        backend1.setAlive(true);\n+        backend1.setBePort(9050);\n+        Backend backend2 = new Backend(2, \"0.0.0.2\", 9060);\n+        backend2.setAlive(true);\n+        backend2.setBePort(9050);\n+\n+        ImmutableMap<Long, Backend> idToBackend =\n+                new ImmutableMap.Builder<Long, Backend>().\n+                        put(0l, backend0).\n+                        put(1l, backend1).\n+                        put(2l, backend2).build();\n+        Deencapsulation.setField(coordinator, \"idToBackend\", idToBackend);\n+\n+        Deencapsulation.invoke(coordinator, \"computeScanRangeAssignment\");\n+        FragmentScanRangeAssignment assignment = fragmentExecParamsMap.get(fragment.getFragmentId()).scanRangeAssignment;\n+        for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDExOQ=="}, "originalCommit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzNjczNg==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/4984#discussion_r557236736", "createdAt": "2021-01-14T09:02:11Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java", "diffHunk": "@@ -595,5 +597,137 @@ public void testBucketShuffleWithUnaliveBackend()  {\n         Assert.assertTrue(backendIds.get(1) == 1);\n         Assert.assertTrue(counts.get(1) == 1);\n     }\n+\n+    @Test\n+    public void testComputeScanRangeAssignment()  {\n+        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n+\n+        //TScanRangeLocations\n+        TScanRangeLocations tScanRangeLocations = new TScanRangeLocations();\n+        TScanRangeLocation tScanRangeLocation0 = new TScanRangeLocation();\n+        tScanRangeLocation0.backend_id = 0;\n+        tScanRangeLocation0.server = new TNetworkAddress(\"0.0.0.0\", 9050);\n+        TScanRangeLocation tScanRangeLocation1 = new TScanRangeLocation();\n+        tScanRangeLocation1.backend_id = 1;\n+        tScanRangeLocation1.server = new TNetworkAddress(\"0.0.0.1\", 9050);\n+        TScanRangeLocation tScanRangeLocation2 = new TScanRangeLocation();\n+        tScanRangeLocation2.backend_id = 2;\n+        tScanRangeLocation2.server = new TNetworkAddress(\"0.0.0.2\", 9050);\n+        tScanRangeLocations.locations = new ArrayList<>();\n+        tScanRangeLocations.locations.add(tScanRangeLocation0);\n+        tScanRangeLocations.locations.add(tScanRangeLocation1);\n+        tScanRangeLocations.locations.add(tScanRangeLocation2);\n+\n+        //scanNode1\n+        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n+        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable, \"defaultDistributionInfo\", hashDistributionInfo);\n+        tupleDescriptor.setTable(olapTable);\n+        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(1), tupleDescriptor, \"test\");\n+        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode.setFragment(fragment);\n+        List<TScanRangeLocations> locations = new ArrayList<>();\n+        locations.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode, \"result\", locations);\n+\n+        //scanNode2\n+        PlanFragmentId planFragmentId2 = new PlanFragmentId(2);\n+        TupleDescriptor tupleDescriptor2 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable2 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo2 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable2, \"defaultDistributionInfo\", hashDistributionInfo2);\n+        tupleDescriptor2.setTable(olapTable2);\n+        OlapScanNode olapScanNode2 = new OlapScanNode(new PlanNodeId(2), tupleDescriptor2, \"test2\");\n+        PlanFragment fragment2 = new PlanFragment(planFragmentId2, olapScanNode2,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode2.setFragment(fragment2);\n+        List<TScanRangeLocations> locations2 = new ArrayList<>();\n+        locations2.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode2, \"result\", locations2);\n+\n+        //scanNode3\n+        PlanFragmentId planFragmentId3 = new PlanFragmentId(3);\n+        TupleDescriptor tupleDescriptor3 = new TupleDescriptor(new TupleId(-1));\n+        OlapTable olapTable3 = new OlapTable();\n+        HashDistributionInfo hashDistributionInfo3 = new HashDistributionInfo(66, new ArrayList<>());\n+        Deencapsulation.setField(olapTable3, \"defaultDistributionInfo\", hashDistributionInfo3);\n+        tupleDescriptor3.setTable(olapTable3);\n+        OlapScanNode olapScanNode3 = new OlapScanNode(new PlanNodeId(3), tupleDescriptor3, \"test3\");\n+        PlanFragment fragment3 = new PlanFragment(planFragmentId3, olapScanNode3,\n+                new DataPartition(TPartitionType.UNPARTITIONED));\n+        olapScanNode3.setFragment(fragment3);\n+        List<TScanRangeLocations> locations3 = new ArrayList<>();\n+        locations3.add(tScanRangeLocations);\n+        Deencapsulation.setField(olapScanNode3, \"result\", locations3);\n+\n+        //scan nodes\n+        List<ScanNode> scanNodes = new ArrayList<>();\n+        scanNodes.add(olapScanNode);\n+        scanNodes.add(olapScanNode2);\n+        scanNodes.add(olapScanNode3);\n+        Deencapsulation.setField(coordinator, \"scanNodes\", scanNodes);\n+\n+        //fragmentIdToScanNodeIds\n+        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = Maps.newHashMap();\n+        Set<Integer> ids1 = new HashSet<>();\n+        ids1.add(1);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids1);\n+        Set<Integer> ids2 = new HashSet<>();\n+        ids1.add(2);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids2);\n+        Set<Integer> ids3 = new HashSet<>();\n+        ids1.add(3);\n+        fragmentIdToScanNodeIds.put(planFragmentId, ids3);\n+        Deencapsulation.setField(coordinator,\"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n+\n+        //fragmentExecParamsMap\n+        Map<PlanFragmentId, FragmentExecParams> fragmentExecParamsMap = Maps.newHashMap();\n+        fragmentExecParamsMap.put(planFragmentId, new FragmentExecParams(fragment));\n+        fragmentExecParamsMap.put(planFragmentId2, new FragmentExecParams(fragment2));\n+        fragmentExecParamsMap.put(planFragmentId3, new FragmentExecParams(fragment3));\n+        Deencapsulation.setField(coordinator,\"fragmentExecParamsMap\", fragmentExecParamsMap);\n+\n+        //bucketShuffleJoinController\n+        BucketShuffleJoinController bucketShuffleJoinController = new BucketShuffleJoinController(fragmentIdToScanNodeIds);\n+        // init all backend\n+        Backend backend0 = new Backend(0, \"0.0.0.0\", 9060);\n+        backend0.setAlive(true);\n+        backend0.setBePort(9050);\n+        Backend backend1 = new Backend(1, \"0.0.0.1\", 9060);\n+        backend1.setAlive(true);\n+        backend1.setBePort(9050);\n+        Backend backend2 = new Backend(2, \"0.0.0.2\", 9060);\n+        backend2.setAlive(true);\n+        backend2.setBePort(9050);\n+\n+        ImmutableMap<Long, Backend> idToBackend =\n+                new ImmutableMap.Builder<Long, Backend>().\n+                        put(0l, backend0).\n+                        put(1l, backend1).\n+                        put(2l, backend2).build();\n+        Deencapsulation.setField(coordinator, \"idToBackend\", idToBackend);\n+\n+        Deencapsulation.invoke(coordinator, \"computeScanRangeAssignment\");\n+        FragmentScanRangeAssignment assignment = fragmentExecParamsMap.get(fragment.getFragmentId()).scanRangeAssignment;\n+        for (Map.Entry<TNetworkAddress, Map<Integer, List<TScanRangeParams>>> entry:assignment.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAxMDExOQ=="}, "originalCommit": {"oid": "8c5af321a9b512717d57b992d24c33e628a00012"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 914, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}