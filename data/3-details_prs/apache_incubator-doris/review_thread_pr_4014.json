{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDQzNDAz", "number": 4014, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoxNDoxN1rOELjUcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTo1Nzo1N1rOEMdCbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTQ4NDY1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoxNDoxN1rOGtKAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoxNDoxN1rOGtKAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwMjk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Map<String, MVColumnPatten> fnNameToPatten;\n          \n          \n            \n                public static final Map<String, MVColumnPatten> FN_NAME_TO_PATTERN;", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450002946", "createdAt": "2020-07-06T06:14:17Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -50,7 +53,21 @@\n  * [PROPERTIES (\"key\" = \"value\")]\n  */\n public class CreateMaterializedViewStmt extends DdlStmt {\n-    public static final String MATERIALIZED_VIEW_NAME_PRFIX = \"__doris_materialized_view_\";\n+    public static final String MATERIALIZED_VIEW_NAME_PREFIX = \"mv_\";\n+    public static final Map<String, MVColumnPatten> fnNameToPatten;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTY3MjkyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnHLLUnionPatten.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoyNjowNlrOGtLv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzoyNjowNlrOGtLv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMTYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class MVColumnHLLUnionPatten  implements MVColumnPatten{\n          \n          \n            \n            public class MVColumnHLLUnionPatten  implements MVColumnPattern{", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450031609", "createdAt": "2020-07-06T07:26:06Z", "author": {"login": "HangyuanLiu"}, "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnHLLUnionPatten.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+public class MVColumnHLLUnionPatten  implements MVColumnPatten{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTcwOTc5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozNzozMVrOGtMFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjowMzoxMlrOGuVf0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNzEyNQ==", "bodyText": "Are you sure after when re-execute the stmt, the tuple id is same as first execution?", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450037125", "createdAt": "2020-07-06T07:37:31Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "diffHunk": "@@ -113,6 +113,40 @@\n     // represent the \"INTO OUTFILE\" clause\n     protected OutFileClause outFileClause;\n \n+    /**\n+     * If the query stmt belongs to CreateMaterializedViewStmt,\n+     * such as\n+     * `CREATE MATERIALIZED VIEW mv AS SELECT bitmap_union(to_bitmap(k1)) from table`\n+     * query stmt will not be rewrite by MVRewriter.\n+     * The `bitmap_union(to_bitmap(k1))` is the definition of the mv column rather then a expr.\n+     * So `forbiddenMVRewrite` will be set to true to protect the definition of the mv column from being overwritten.\n+     * <p>\n+     * In other query case, `forbiddenMVRewrite` is always false.\n+     */\n+    private boolean forbiddenMVRewrite = false;\n+\n+    /**\n+     * If the tuple id in `disableMVRewriteTupleIds`, the expr which belongs to this tuple will not be MVRewritten.\n+     * Initially this set is an empty set.\n+     * When the scan node is unable to match any index in selecting the materialized view,\n+     *   the tuple is added to this set.\n+     * The query will be re-executed, and this tuple will not be mv rewritten.\n+     * For example:\n+     * TableA: (k1 int, k2 int, k3 int)\n+     * MV: (k1 int, mv_bitmap_union_k2 bitmap bitmap_union)\n+     * Query: select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * First analyze: MV rewriter enable and this set is empty\n+     *     select k3, bitmap_union(mv_bitmap_union_k2) from TableA\n+     * SingleNodePlanner: could not select any index for TableA\n+     *     Add table to disableMVRewriteTupleIds.\n+     * `disableMVRewriteTupleIds` = {TableA}\n+     * Re-executed:\n+     * Second analyze: MV rewrite disable in table and use origin stmt.\n+     *     select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * SingleNodePlanner: base index selected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MzA1Nw==", "bodyText": "Under normal circumstances, the tuple id of the first parsing statement and the second parsing statement should be the same.\nIf it involves query rewriting, I tested it, and no new tuple will be generated. So in theory, there is no problem.", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450093057", "createdAt": "2020-07-06T09:19:23Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "diffHunk": "@@ -113,6 +113,40 @@\n     // represent the \"INTO OUTFILE\" clause\n     protected OutFileClause outFileClause;\n \n+    /**\n+     * If the query stmt belongs to CreateMaterializedViewStmt,\n+     * such as\n+     * `CREATE MATERIALIZED VIEW mv AS SELECT bitmap_union(to_bitmap(k1)) from table`\n+     * query stmt will not be rewrite by MVRewriter.\n+     * The `bitmap_union(to_bitmap(k1))` is the definition of the mv column rather then a expr.\n+     * So `forbiddenMVRewrite` will be set to true to protect the definition of the mv column from being overwritten.\n+     * <p>\n+     * In other query case, `forbiddenMVRewrite` is always false.\n+     */\n+    private boolean forbiddenMVRewrite = false;\n+\n+    /**\n+     * If the tuple id in `disableMVRewriteTupleIds`, the expr which belongs to this tuple will not be MVRewritten.\n+     * Initially this set is an empty set.\n+     * When the scan node is unable to match any index in selecting the materialized view,\n+     *   the tuple is added to this set.\n+     * The query will be re-executed, and this tuple will not be mv rewritten.\n+     * For example:\n+     * TableA: (k1 int, k2 int, k3 int)\n+     * MV: (k1 int, mv_bitmap_union_k2 bitmap bitmap_union)\n+     * Query: select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * First analyze: MV rewriter enable and this set is empty\n+     *     select k3, bitmap_union(mv_bitmap_union_k2) from TableA\n+     * SingleNodePlanner: could not select any index for TableA\n+     *     Add table to disableMVRewriteTupleIds.\n+     * `disableMVRewriteTupleIds` = {TableA}\n+     * Re-executed:\n+     * Second analyze: MV rewrite disable in table and use origin stmt.\n+     *     select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * SingleNodePlanner: base index selected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNzEyNQ=="}, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTg5MA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r451239890", "createdAt": "2020-07-08T02:03:12Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "diffHunk": "@@ -113,6 +113,40 @@\n     // represent the \"INTO OUTFILE\" clause\n     protected OutFileClause outFileClause;\n \n+    /**\n+     * If the query stmt belongs to CreateMaterializedViewStmt,\n+     * such as\n+     * `CREATE MATERIALIZED VIEW mv AS SELECT bitmap_union(to_bitmap(k1)) from table`\n+     * query stmt will not be rewrite by MVRewriter.\n+     * The `bitmap_union(to_bitmap(k1))` is the definition of the mv column rather then a expr.\n+     * So `forbiddenMVRewrite` will be set to true to protect the definition of the mv column from being overwritten.\n+     * <p>\n+     * In other query case, `forbiddenMVRewrite` is always false.\n+     */\n+    private boolean forbiddenMVRewrite = false;\n+\n+    /**\n+     * If the tuple id in `disableMVRewriteTupleIds`, the expr which belongs to this tuple will not be MVRewritten.\n+     * Initially this set is an empty set.\n+     * When the scan node is unable to match any index in selecting the materialized view,\n+     *   the tuple is added to this set.\n+     * The query will be re-executed, and this tuple will not be mv rewritten.\n+     * For example:\n+     * TableA: (k1 int, k2 int, k3 int)\n+     * MV: (k1 int, mv_bitmap_union_k2 bitmap bitmap_union)\n+     * Query: select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * First analyze: MV rewriter enable and this set is empty\n+     *     select k3, bitmap_union(mv_bitmap_union_k2) from TableA\n+     * SingleNodePlanner: could not select any index for TableA\n+     *     Add table to disableMVRewriteTupleIds.\n+     * `disableMVRewriteTupleIds` = {TableA}\n+     * Re-executed:\n+     * Second analyze: MV rewrite disable in table and use origin stmt.\n+     *     select k3, bitmap_union(to_bitmap(k2)) from TableA\n+     * SingleNodePlanner: base index selected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNzEyNQ=="}, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc2MzgwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1MzozN1rOGtMluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1MzozN1rOGtMluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NTM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOG.info(\"MV rewriter of tuple [] will be disable\", tupleId);\n          \n          \n            \n                                LOG.debug(\"MV rewriter of tuple [] will be disable\", tupleId);", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450045369", "createdAt": "2020-07-06T07:53:37Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -773,19 +776,26 @@ public void selectMaterializedView(QueryStmt queryStmt, Analyzer analyzer) throw\n                 if (olapScanNode.getSelectedPartitionIds().size() == 0 && !FeConstants.runningUnitTest) {\n                     continue;\n                 }\n-                MaterializedViewSelector.BestIndexInfo bestIndexInfo = materializedViewSelector.selectBestMV(\n-                        olapScanNode);\n-                olapScanNode.updateScanRangeInfoByNewMVSelector(bestIndexInfo.getBestIndexId(), bestIndexInfo.isPreAggregation(),\n-                        bestIndexInfo.getReasonOfDisable());\n+                MaterializedViewSelector.BestIndexInfo bestIndexInfo = materializedViewSelector.selectBestMV(olapScanNode);\n+                if (bestIndexInfo == null) {\n+                    selectFailed |= true;\n+                    TupleId tupleId = olapScanNode.getTupleId();\n+                    selectStmt.updateDisableTuplesMVRewriter(tupleId);\n+                    LOG.info(\"MV rewriter of tuple [] will be disable\", tupleId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc2ODM1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1NTowNVrOGtMolQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTozMDoxMFrOGtP3mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjEwMQ==", "bodyText": "Add comment to explain why retrying.", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450046101", "createdAt": "2020-07-06T07:55:05Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -440,58 +439,10 @@ public void analyze(TQueryOptions tQueryOptions) throws AnalysisException, UserE\n \n             lock(dbs);\n             try {\n-                parsedStmt.analyze(analyzer);\n-                if (parsedStmt instanceof QueryStmt || parsedStmt instanceof InsertStmt) {\n-                    boolean isExplain = parsedStmt.isExplain();\n-                    // Apply expr and subquery rewrites.\n-                    boolean reAnalyze = false;\n-\n-                    ExprRewriter rewriter = analyzer.getExprRewriter();\n-                    rewriter.reset();\n-                    parsedStmt.rewriteExprs(rewriter);\n-                    reAnalyze = rewriter.changed();\n-                    if (analyzer.containSubquery()) {\n-                        parsedStmt = StmtRewriter.rewrite(analyzer, parsedStmt);\n-                        reAnalyze = true;\n-                    }\n-                    if (reAnalyze) {\n-                        // The rewrites should have no user-visible effect. Remember the original result\n-                        // types and column labels to restore them after the rewritten stmt has been\n-                        // reset() and re-analyzed.\n-                        List<Type> origResultTypes = Lists.newArrayList();\n-                        for (Expr e: parsedStmt.getResultExprs()) {\n-                            origResultTypes.add(e.getType());\n-                        }\n-                        List<String> origColLabels =\n-                                Lists.newArrayList(parsedStmt.getColLabels());\n-\n-                        // Re-analyze the stmt with a new analyzer.\n-                        analyzer = new Analyzer(context.getCatalog(), context);\n-\n-                        // query re-analyze\n-                        parsedStmt.reset();\n-                        parsedStmt.analyze(analyzer);\n-\n-                        // Restore the original result types and column labels.\n-                        parsedStmt.castResultExprs(origResultTypes);\n-                        parsedStmt.setColLabels(origColLabels);\n-                        if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"rewrittenStmt: \" + parsedStmt.toSql());\n-                        }\n-                        if (isExplain) parsedStmt.setIsExplain(isExplain);\n-                    }\n-                }\n-\n-                // create plan\n-                planner = new Planner();\n-                if (parsedStmt instanceof QueryStmt || parsedStmt instanceof InsertStmt) {\n-                    planner.plan(parsedStmt, analyzer, tQueryOptions);\n-                } else {\n-                    planner.plan(((CreateTableAsSelectStmt) parsedStmt).getInsertStmt(),\n-                            analyzer, new TQueryOptions());\n-                }\n-                // TODO(zc):\n-                // Preconditions.checkState(!analyzer.hasUnassignedConjuncts());\n+                analyzeAndGenerateQueryPlan(tQueryOptions);\n+            } catch (MVSelectFailedException e) {\n+                resetAnalyzerAndStmt();\n+                analyzeAndGenerateQueryPlan(tQueryOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTA5Nw==", "bodyText": "Added", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450099097", "createdAt": "2020-07-06T09:30:10Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -440,58 +439,10 @@ public void analyze(TQueryOptions tQueryOptions) throws AnalysisException, UserE\n \n             lock(dbs);\n             try {\n-                parsedStmt.analyze(analyzer);\n-                if (parsedStmt instanceof QueryStmt || parsedStmt instanceof InsertStmt) {\n-                    boolean isExplain = parsedStmt.isExplain();\n-                    // Apply expr and subquery rewrites.\n-                    boolean reAnalyze = false;\n-\n-                    ExprRewriter rewriter = analyzer.getExprRewriter();\n-                    rewriter.reset();\n-                    parsedStmt.rewriteExprs(rewriter);\n-                    reAnalyze = rewriter.changed();\n-                    if (analyzer.containSubquery()) {\n-                        parsedStmt = StmtRewriter.rewrite(analyzer, parsedStmt);\n-                        reAnalyze = true;\n-                    }\n-                    if (reAnalyze) {\n-                        // The rewrites should have no user-visible effect. Remember the original result\n-                        // types and column labels to restore them after the rewritten stmt has been\n-                        // reset() and re-analyzed.\n-                        List<Type> origResultTypes = Lists.newArrayList();\n-                        for (Expr e: parsedStmt.getResultExprs()) {\n-                            origResultTypes.add(e.getType());\n-                        }\n-                        List<String> origColLabels =\n-                                Lists.newArrayList(parsedStmt.getColLabels());\n-\n-                        // Re-analyze the stmt with a new analyzer.\n-                        analyzer = new Analyzer(context.getCatalog(), context);\n-\n-                        // query re-analyze\n-                        parsedStmt.reset();\n-                        parsedStmt.analyze(analyzer);\n-\n-                        // Restore the original result types and column labels.\n-                        parsedStmt.castResultExprs(origResultTypes);\n-                        parsedStmt.setColLabels(origColLabels);\n-                        if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"rewrittenStmt: \" + parsedStmt.toSql());\n-                        }\n-                        if (isExplain) parsedStmt.setIsExplain(isExplain);\n-                    }\n-                }\n-\n-                // create plan\n-                planner = new Planner();\n-                if (parsedStmt instanceof QueryStmt || parsedStmt instanceof InsertStmt) {\n-                    planner.plan(parsedStmt, analyzer, tQueryOptions);\n-                } else {\n-                    planner.plan(((CreateTableAsSelectStmt) parsedStmt).getInsertStmt(),\n-                            analyzer, new TQueryOptions());\n-                }\n-                // TODO(zc):\n-                // Preconditions.checkState(!analyzer.hasUnassignedConjuncts());\n+                analyzeAndGenerateQueryPlan(tQueryOptions);\n+            } catch (MVSelectFailedException e) {\n+                resetAnalyzerAndStmt();\n+                analyzeAndGenerateQueryPlan(tQueryOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjEwMQ=="}, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc3NzM0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzo1Nzo0MlrOGtMuHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTozMDoyM1rOGtP4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NzUxNw==", "bodyText": "private\uff1f", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450047517", "createdAt": "2020-07-06T07:57:42Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.CreateMaterializedViewStmt;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.FunctionCallExpr;\n+import org.apache.doris.analysis.SlotRef;\n+import org.apache.doris.analysis.TableName;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.rewrite.ExprRewriteRule;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+\n+/**\n+ * Rewrite count(k1) to sum(mv_count_k1) when MV Column exists.\n+ * For example:\n+ * Table: (k1 int ,k2 varchar)\n+ * MV: (k1 int, mv_count_k2 bigint sum)\n+ *       mv_count_k1 = case when k2 is null then 0 else 1\n+ * Query: select k1, count(k2) from table group by k1\n+ * Rewritten query: select k1, sum(mv_count_k2) from table group by k1\n+ */\n+public class CountFieldToSum implements ExprRewriteRule {\n+    public static final ExprRewriteRule INSTANCE = new CountFieldToSum();\n+\n+    @Override\n+    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        // meet condition\n+        if (!(expr instanceof FunctionCallExpr)) {\n+            return expr;\n+        }\n+        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n+        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"count\")) {\n+            return expr;\n+        }\n+        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n+            return expr;\n+        }\n+        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n+        Column column = fnChild0.getColumn();\n+        Table table = fnChild0.getTable();\n+        if (column == null || table == null || !(table instanceof OlapTable)) {\n+            return expr;\n+        }\n+        OlapTable olapTable = (OlapTable) table;\n+\n+        // check column\n+        String queryColumnName = column.getName();\n+        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(\"count\", queryColumnName);\n+        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n+        if (mvColumn == null) {\n+            return expr;\n+        }\n+\n+        // rewrite expr\n+        return rewriteExpr(fnChild0, mvColumn, analyzer);\n+    }\n+\n+    public Expr rewriteExpr(SlotRef queryColumnSlotRef, Column mvColumn, Analyzer analyzer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTI0MQ==", "bodyText": "Changed", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450099241", "createdAt": "2020-07-06T09:30:23Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.CreateMaterializedViewStmt;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.FunctionCallExpr;\n+import org.apache.doris.analysis.SlotRef;\n+import org.apache.doris.analysis.TableName;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.rewrite.ExprRewriteRule;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+\n+/**\n+ * Rewrite count(k1) to sum(mv_count_k1) when MV Column exists.\n+ * For example:\n+ * Table: (k1 int ,k2 varchar)\n+ * MV: (k1 int, mv_count_k2 bigint sum)\n+ *       mv_count_k1 = case when k2 is null then 0 else 1\n+ * Query: select k1, count(k2) from table group by k1\n+ * Rewritten query: select k1, sum(mv_count_k2) from table group by k1\n+ */\n+public class CountFieldToSum implements ExprRewriteRule {\n+    public static final ExprRewriteRule INSTANCE = new CountFieldToSum();\n+\n+    @Override\n+    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        // meet condition\n+        if (!(expr instanceof FunctionCallExpr)) {\n+            return expr;\n+        }\n+        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n+        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"count\")) {\n+            return expr;\n+        }\n+        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n+            return expr;\n+        }\n+        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n+        Column column = fnChild0.getColumn();\n+        Table table = fnChild0.getTable();\n+        if (column == null || table == null || !(table instanceof OlapTable)) {\n+            return expr;\n+        }\n+        OlapTable olapTable = (OlapTable) table;\n+\n+        // check column\n+        String queryColumnName = column.getName();\n+        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(\"count\", queryColumnName);\n+        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n+        if (mvColumn == null) {\n+            return expr;\n+        }\n+\n+        // rewrite expr\n+        return rewriteExpr(fnChild0, mvColumn, analyzer);\n+    }\n+\n+    public Expr rewriteExpr(SlotRef queryColumnSlotRef, Column mvColumn, Analyzer analyzer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NzUxNw=="}, "originalCommit": {"oid": "1ab5afdf50c79ee370df8e74bd9195443661f070"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjA3OTI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/HLLHashToSlotRefRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToyMjowOFrOGtPl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToyMjowOFrOGtPl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NDU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Expr rewriteExpr(String fnName, SlotRef queryColumnSlotRef, Column mvColumn, Analyzer analyzer) {\n          \n          \n            \n                private Expr rewriteExpr(String fnName, SlotRef queryColumnSlotRef, Column mvColumn, Analyzer analyzer) {", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450094583", "createdAt": "2020-07-06T09:22:08Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/HLLHashToSlotRefRule.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.CastExpr;\n+import org.apache.doris.analysis.CreateMaterializedViewStmt;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.FunctionCallExpr;\n+import org.apache.doris.analysis.SlotRef;\n+import org.apache.doris.analysis.TableName;\n+import org.apache.doris.catalog.AggregateType;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.rewrite.ExprRewriteRule;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+\n+/*\n+Rewrite hll_union(hll_hash(c1)) to hll_union(mv_hll_union_c1)\n+Rewrite hll_raw_agg(hll_hash(c1)) to hll_raw_agg(mv_hll_union_c1)\n+Rewrite hll_union_agg(hll_hash(c1)) to hll_union_agg(mv_hll_union_c1)\n+ */\n+public class HLLHashToSlotRefRule implements ExprRewriteRule {\n+\n+    public static final ExprRewriteRule INSTANCE = new HLLHashToSlotRefRule();\n+\n+    @Override\n+    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        SlotRef queryColumnSlotRef;\n+        Column mvColumn;\n+\n+        // meet the condition\n+        if (!(expr instanceof FunctionCallExpr)) {\n+            return expr;\n+        }\n+        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n+        String fnNameString = fnExpr.getFnName().getFunction();\n+        if (!fnNameString.equalsIgnoreCase(\"hll_union\")\n+                && !fnNameString.equalsIgnoreCase(\"hll_raw_agg\")\n+                && !fnNameString.equalsIgnoreCase(\"hll_union_agg\")) {\n+            return expr;\n+        }\n+        if (!(fnExpr.getChild(0) instanceof FunctionCallExpr)) {\n+            return expr;\n+        }\n+        FunctionCallExpr child0FnExpr = (FunctionCallExpr) fnExpr.getChild(0);\n+        if (!child0FnExpr.getFnName().getFunction().equalsIgnoreCase(\"hll_hash\")) {\n+            return expr;\n+        }\n+        if (child0FnExpr.getChild(0) instanceof SlotRef) {\n+            queryColumnSlotRef = (SlotRef) child0FnExpr.getChild(0);\n+        } else if (child0FnExpr.getChild(0) instanceof CastExpr) {\n+            CastExpr castExpr = (CastExpr) child0FnExpr.getChild(0);\n+            if (!(castExpr.getChild(0) instanceof SlotRef)) {\n+                return expr;\n+            }\n+            queryColumnSlotRef = (SlotRef) castExpr.getChild(0);\n+        } else {\n+            return expr;\n+        }\n+        Column column = queryColumnSlotRef.getColumn();\n+        Table table = queryColumnSlotRef.getTable();\n+        if (column == null || table == null || !(table instanceof OlapTable)) {\n+            return expr;\n+        }\n+        OlapTable olapTable = (OlapTable) table;\n+\n+        // check column\n+        String queryColumnName = column.getName();\n+        String mvColumnName = CreateMaterializedViewStmt\n+                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n+        mvColumn = olapTable.getVisibleColumn(mvColumnName);\n+        if (mvColumn == null) {\n+            return expr;\n+        }\n+\n+        // equal expr\n+        return rewriteExpr(fnNameString, queryColumnSlotRef, mvColumn, analyzer);\n+    }\n+\n+    public Expr rewriteExpr(String fnName, SlotRef queryColumnSlotRef, Column mvColumn, Analyzer analyzer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a82ce553abac00333cf76a5e546bad75831bdeb"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzEyNzgxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/MVExprEquivalent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoyNDoyM1rOGtZh5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoyNDoyM1rOGtZh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1NzM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Only support the once match from originExpr and newExpr\n          \n          \n            \n             * Only support the once match from originExpr and newExpr", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450257383", "createdAt": "2020-07-06T14:24:23Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/MVExprEquivalent.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Expr;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/*\n+Only support the once match from originExpr and newExpr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d85bd82308ba8cfba7c666bbbe6513b3b2d4b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzEzNTQ4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/SlotRefEqualRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoyNTo1M1rOGtZmcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjowMzo1NlrOGuVghA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1ODU0Ng==", "bodyText": "Is it safe to check equivalence using column name?\nIs it possible to get same column name from different tables?", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450258546", "createdAt": "2020-07-06T14:25:53Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/SlotRefEqualRule.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.SlotRef;\n+\n+public class SlotRefEqualRule implements MVExprEqualRule {\n+\n+    public static MVExprEqualRule INSTANCE = new SlotRefEqualRule();\n+\n+    @Override\n+    public boolean equal(Expr queryExpr, Expr mvColumnExpr) {\n+        if ((!(queryExpr instanceof SlotRef)) || (!(mvColumnExpr instanceof SlotRef))) {\n+            return false;\n+        }\n+        SlotRef querySlotRef = (SlotRef) queryExpr;\n+        SlotRef mvColumnSlotRef = (SlotRef) mvColumnExpr;\n+        if (querySlotRef.getColumnName().equalsIgnoreCase(mvColumnSlotRef.getColumnName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d85bd82308ba8cfba7c666bbbe6513b3b2d4b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MTE1Mg==", "bodyText": "The mvColumnExpr is constructed by MVSelector from the same table", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450581152", "createdAt": "2020-07-07T02:44:34Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/SlotRefEqualRule.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.SlotRef;\n+\n+public class SlotRefEqualRule implements MVExprEqualRule {\n+\n+    public static MVExprEqualRule INSTANCE = new SlotRefEqualRule();\n+\n+    @Override\n+    public boolean equal(Expr queryExpr, Expr mvColumnExpr) {\n+        if ((!(queryExpr instanceof SlotRef)) || (!(mvColumnExpr instanceof SlotRef))) {\n+            return false;\n+        }\n+        SlotRef querySlotRef = (SlotRef) queryExpr;\n+        SlotRef mvColumnSlotRef = (SlotRef) mvColumnExpr;\n+        if (querySlotRef.getColumnName().equalsIgnoreCase(mvColumnSlotRef.getColumnName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1ODU0Ng=="}, "originalCommit": {"oid": "1d6d85bd82308ba8cfba7c666bbbe6513b3b2d4b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MDA2OA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r451240068", "createdAt": "2020-07-08T02:03:56Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/SlotRefEqualRule.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.SlotRef;\n+\n+public class SlotRefEqualRule implements MVExprEqualRule {\n+\n+    public static MVExprEqualRule INSTANCE = new SlotRefEqualRule();\n+\n+    @Override\n+    public boolean equal(Expr queryExpr, Expr mvColumnExpr) {\n+        if ((!(queryExpr instanceof SlotRef)) || (!(mvColumnExpr instanceof SlotRef))) {\n+            return false;\n+        }\n+        SlotRef querySlotRef = (SlotRef) queryExpr;\n+        SlotRef mvColumnSlotRef = (SlotRef) mvColumnExpr;\n+        if (querySlotRef.getColumnName().equalsIgnoreCase(mvColumnSlotRef.getColumnName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1ODU0Ng=="}, "originalCommit": {"oid": "1d6d85bd82308ba8cfba7c666bbbe6513b3b2d4b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzEzNjcwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/ToBitmapToSlotRefRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoyNjowOFrOGtZnLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoyNjowOFrOGtZnLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1ODczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Rewrite bitmap_union(to_bitmap(c1)) to bitmap_union(mv_bitmap_c1)\n          \n          \n            \n             * Rewrite bitmap_union(to_bitmap(c1)) to bitmap_union(mv_bitmap_c1)", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r450258733", "createdAt": "2020-07-06T14:26:08Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/mvrewrite/ToBitmapToSlotRefRule.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite.mvrewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.CastExpr;\n+import org.apache.doris.analysis.CreateMaterializedViewStmt;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.FunctionCallExpr;\n+import org.apache.doris.analysis.SlotRef;\n+import org.apache.doris.analysis.TableName;\n+import org.apache.doris.catalog.AggregateType;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.FunctionSet;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.rewrite.ExprRewriteRule;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+\n+/*\n+Rewrite bitmap_union(to_bitmap(c1)) to bitmap_union(mv_bitmap_c1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d85bd82308ba8cfba7c666bbbe6513b3b2d4b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQyMTEwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnOneChildPattern.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo0MToxM1rOGuWFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo0MToxM1rOGuWFCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0OTQxOA==", "bodyText": "41-47 can rewrite:\nSlotRef slotRef = functionCallExpr.getChild(0).unwrapSlotRef();\nreturn slotRef != null;", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r451249418", "createdAt": "2020-07-08T02:41:13Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnOneChildPattern.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+public class MVColumnOneChildPattern implements MVColumnPattern {\n+\n+    private String functionName;\n+\n+    public MVColumnOneChildPattern(String functionName) {\n+        this.functionName = functionName;\n+    }\n+\n+    @Override\n+    public boolean match(Expr expr) {\n+        if (!(expr instanceof FunctionCallExpr)) {\n+            return false;\n+        }\n+        FunctionCallExpr functionCallExpr = (FunctionCallExpr) expr;\n+        String exprFnName = functionCallExpr.getFnName().getFunction();\n+        if (!exprFnName.equalsIgnoreCase(functionName)) {\n+            return false;\n+        }\n+        if (functionCallExpr.getChildren().size() != 1) {\n+            return false;\n+        }\n+        Expr functionChild0 = functionCallExpr.getChild(0);\n+        if (functionChild0 instanceof SlotRef) {\n+            return true;\n+        } else if (functionChild0 instanceof CastExpr && (functionChild0.getChild(0) instanceof SlotRef)) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe459c23d6af9049d57790d8872271b9c6ae12"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ3NzA1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNToxNlrOGuWmOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0MToyM1rOGwg_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzkxMg==", "bodyText": "Can you add comment which pattern is suitable for AggregateModel, which pattern is suitable for DuplicatedModel? if it is a need to add a type to distinguish the  case.", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r451257912", "createdAt": "2020-07-08T03:15:16Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -50,7 +53,21 @@\n  * [PROPERTIES (\"key\" = \"value\")]\n  */\n public class CreateMaterializedViewStmt extends DdlStmt {\n-    public static final String MATERIALIZED_VIEW_NAME_PRFIX = \"__doris_materialized_view_\";\n+    public static final String MATERIALIZED_VIEW_NAME_PREFIX = \"mv_\";\n+    public static final Map<String, MVColumnPattern> FN_NAME_TO_PATTERN;\n+\n+    static {\n+        FN_NAME_TO_PATTERN = Maps.newHashMap();\n+        FN_NAME_TO_PATTERN.put(AggregateType.SUM.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.SUM.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(AggregateType.MIN.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.MIN.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(AggregateType.MAX.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.MAX.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(\"count\", new MVColumnOneChildPattern(\"count\"));\n+        FN_NAME_TO_PATTERN.put(\"bitmap_union\", new MVColumnBitmapUnionPattern());\n+        FN_NAME_TO_PATTERN.put(\"hll_union\", new MVColumnHLLUnionPattern());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4abe459c23d6af9049d57790d8872271b9c6ae12"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyNTM3Ng==", "bodyText": "The patterns in here do not distinguish Agg model and duplicate model. These patterns are compatible.", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r453525376", "createdAt": "2020-07-13T09:41:23Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -50,7 +53,21 @@\n  * [PROPERTIES (\"key\" = \"value\")]\n  */\n public class CreateMaterializedViewStmt extends DdlStmt {\n-    public static final String MATERIALIZED_VIEW_NAME_PRFIX = \"__doris_materialized_view_\";\n+    public static final String MATERIALIZED_VIEW_NAME_PREFIX = \"mv_\";\n+    public static final Map<String, MVColumnPattern> FN_NAME_TO_PATTERN;\n+\n+    static {\n+        FN_NAME_TO_PATTERN = Maps.newHashMap();\n+        FN_NAME_TO_PATTERN.put(AggregateType.SUM.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.SUM.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(AggregateType.MIN.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.MIN.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(AggregateType.MAX.name().toLowerCase(),\n+                new MVColumnOneChildPattern(AggregateType.MAX.name().toLowerCase()));\n+        FN_NAME_TO_PATTERN.put(\"count\", new MVColumnOneChildPattern(\"count\"));\n+        FN_NAME_TO_PATTERN.put(\"bitmap_union\", new MVColumnBitmapUnionPattern());\n+        FN_NAME_TO_PATTERN.put(\"hll_union\", new MVColumnHLLUnionPattern());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzkxMg=="}, "originalCommit": {"oid": "4abe459c23d6af9049d57790d8872271b9c6ae12"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDk0MTI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTo1Nzo1N1rOGukihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTo1Nzo1N1rOGukihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NjM0Mg==", "bodyText": "baseColumn may be is not null , but we should set define expr in column. such as two different materialized view aggregate function use same base filed .", "url": "https://github.com/apache/incubator-doris/pull/4014#discussion_r451486342", "createdAt": "2020-07-08T11:57:57Z", "author": {"login": "HangyuanLiu"}, "path": "fe/src/main/java/org/apache/doris/analysis/MVColumnItem.java", "diffHunk": "@@ -79,4 +94,19 @@ public Expr getDefineExpr() {\n     public void setDefineExpr(Expr defineExpr) {\n         this.defineExpr = defineExpr;\n     }\n+\n+    public Column toMVColumn(OlapTable olapTable) throws DdlException {\n+        Column baseColumn = olapTable.getColumn(name);\n+        if (baseColumn == null) {\n+            Preconditions.checkNotNull(defineExpr != null);\n+            Column result = new Column(name, type, isKey, aggregationType, ColumnDef.DefaultValue.ZERO, \"\");\n+            result.setDefineExpr(defineExpr);\n+            return result;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a696e07655d43df519718595ace24af052e4fb"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1363, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}