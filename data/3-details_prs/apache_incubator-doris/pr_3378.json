{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDg5MzM2", "number": 3378, "title": "Forbidden correlated having clause", "bodyText": "Fixed #3377\nThe correlated slot ref should be bound by the agg tuple of outer query.\nHowever, the correlated having clause should not be analyzed correctly so the result is incorrect.\nFor example:\nSELECT k1 FROM test GROUP BY k1 HAVING EXISTS(SELECT k1 FROM baseall GROUP BY k1 HAVING SUM(test.k1) = k1);\n\nThe correlated predicate is not executed.\nThe limit offset should be rewritten also when there is subquery in having clause.\nFor example:\nselect k1, count(*) cnt from test group by k1 having k1 in (select k1 from baseall order by k1 limit 2) order by k1 limit 5 offset 3;\n\nThe new stmt should has a limit element with offset.\nThe view which has subquery in having clause should not be created.\nThe reason is that the toSql function of query stmt is incorrect when there is subquery in having clause.\nSo the view def sql is incorrect and could not pass the sql parser.\nNow, the view def sql use the original sql directly to fix this error.\nChange-Id: If24206a8dee94013225fe7fdd30ab1fb034de34f", "createdAt": "2020-04-22T07:03:33Z", "url": "https://github.com/apache/incubator-doris/pull/3378", "merged": true, "mergeCommit": {"oid": "07a9401f825d61e9c2a14b8776b4d0821e79627f"}, "closed": true, "closedAt": "2020-04-24T13:34:41Z", "author": {"login": "EmmyMiao87"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaFerkgFqTM5ODA0MTI0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaxjAjAFqTM5OTk0ODM1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDQxMjQ5", "url": "https://github.com/apache/incubator-doris/pull/3378#pullrequestreview-398041249", "createdAt": "2020-04-22T10:09:41Z", "commit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDowOTo0MVrOGJudcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDowOTo0MVrOGJudcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MTU2OQ==", "bodyText": "It is work for function call?\nFor example, if user input:\n\"create view test_view (h1, h2) as select function(a, b), col2 from testTbl\"\nwill become\n\"select function(a, b) as h1, col2 as h2 from (select function(a, b), col2 from testTbl)\"", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r412851569", "createdAt": "2020-04-22T10:09:41Z", "author": {"login": "xy720"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();\n+\n+        originalViewDef = lowerCaseOriginSql.substring(lowerCaseOriginSql.indexOf(KW_AS) + 3);\n+        LOG.debug(\"origin view def sql is {}\", originalViewDef);\n \n         if (cols == null) {\n             inlineViewDef = originalViewDef;\n+            LOG.debug(\"inline view def sql is {}\", inlineViewDef);\n             return;\n         }\n \n         Analyzer tmpAnalyzer = new Analyzer(analyzer);\n         List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n         cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-//        StringBuilder sb = new StringBuilder();\n-//        sb.append(\"SELECT \");\n-//        for (int i = 0; i < finalCols.size(); ++i) {\n-//            if (i != 0) {\n-//                sb.append(\", \");\n-//            }\n-//            String colRef = viewDefStmt.getColLabels().get(i);\n-//            if (!colRef.startsWith(\"`\")) {\n-//                colRef = \"`\" + colRef + \"`\";\n-//            }\n-//            String colAlias = finalCols.get(i).getName();\n-//            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-//        }\n-//        sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-//        inlineViewDef = sb.toString();\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < colNames.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = colNames.get(i);\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjIwODkx", "url": "https://github.com/apache/incubator-doris/pull/3378#pullrequestreview-398220891", "createdAt": "2020-04-22T13:59:44Z", "commit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1OTo0NFrOGJ4BTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDowNToxMVrOGJ4S4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODIwNg==", "bodyText": "I think you can not just call toLowerCase(), what if the statement is\nselect * from tbl where k1 like \"%ABC%\";\n\nAnd why not just save the entire origin statement with CREATE VIEW AS inside it? And you can just get the QueryStmt part when parsing it again.", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413008206", "createdAt": "2020-04-22T13:59:44Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxMjcwNA==", "bodyText": "There maybe ; inside the query statement", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413012704", "createdAt": "2020-04-22T14:05:11Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/ConnectProcessor.java", "diffHunk": "@@ -225,7 +226,13 @@ private void handleQuery() {\n         SqlScanner input = new SqlScanner(new StringReader(originStmt), ctx.getSessionVariable().getSqlMode());\n         SqlParser parser = new SqlParser(input);\n         try {\n-            return SqlParserUtils.getMultiStmts(parser);\n+            List<StatementBase> result = SqlParserUtils.getMultiStmts(parser);\n+            String[] originStmtList = originStmt.split(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Mjc1NDMz", "url": "https://github.com/apache/incubator-doris/pull/3378#pullrequestreview-398275433", "createdAt": "2020-04-22T14:53:12Z", "commit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1MzoxMlrOGJ6y4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1MzoxMlrOGJ6y4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MzY2Ng==", "bodyText": "Why change the order?", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413053666", "createdAt": "2020-04-22T14:53:12Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/LimitElement.java", "diffHunk": "@@ -42,9 +42,9 @@ public LimitElement(long limit) {\n         offset = 0;\n     }\n \n-    public LimitElement(long offset, long limit) {\n-        this.offset = offset;\n+    public LimitElement(long limit, long offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Mjc2MDk1", "url": "https://github.com/apache/incubator-doris/pull/3378#pullrequestreview-398276095", "createdAt": "2020-04-22T14:53:48Z", "commit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1Mzo0OFrOGJ61AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1Mzo0OFrOGJ61AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NDIwOQ==", "bodyText": "Remove.", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413054209", "createdAt": "2020-04-22T14:53:48Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "diffHunk": "@@ -98,6 +98,24 @@ public void rewriteExprs(ExprRewriter rewriter, Analyzer analyzer)\n             item.setExpr(rewriter.rewrite(item.getExpr(), analyzer));\n         }\n     }\n+\n+    public String toOriginSql() {\n+        // Select list\n+        StringBuilder strBuilder = new StringBuilder();\n+        strBuilder.append(\"SELECT \");\n+        if (isDistinct) {\n+            strBuilder.append(\"DISTINCT \");\n+        }\n+        for (int i = 0; i < items.size(); ++i) {\n+            // strBuilder.append(selectList.getItems().get(i).toSql());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d082e336309138373ee45a52342f5b59848f694", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/7d082e336309138373ee45a52342f5b59848f694", "committedDate": "2020-04-23T11:01:43Z", "message": "Fixed #3377\n\nThe correlated slot ref should be bound by the agg tuple of outer query.\nHowever, the correlated having clause should not be analyzed correctly so the result is incorrect.\nFor example: SELECT k1 FROM test GROUP BY k1 HAVING EXISTS(SELECT k1 FROM baseall GROUP BY k1 HAVING SUM(test.k1) = k1);\nThe correlated predicate is not executed.\n\nThe limit offset should be rewritten also when there is subquery in having clause.\nFor example: select k1, count(*) cnt from test group by k1 having k1 in (select k1 from baseall order by k1 limit 2) order by k1 limit 5 offset 3;\nThe new stmt should has a limit element with offset.\n\nChange-Id: I65c361af54803eac4288f8b9f1e0aa4bfc0b3d4c"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/0c0483632b5ac8dd6422c3656e380133e9e773b8", "committedDate": "2020-04-22T08:39:22Z", "message": "Fix ut\n\nChange-Id: Idb298f678b9c9ac922fff3ac16bde17674d96e87"}, "afterCommit": {"oid": "7d082e336309138373ee45a52342f5b59848f694", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/7d082e336309138373ee45a52342f5b59848f694", "committedDate": "2020-04-23T11:01:43Z", "message": "Fixed #3377\n\nThe correlated slot ref should be bound by the agg tuple of outer query.\nHowever, the correlated having clause should not be analyzed correctly so the result is incorrect.\nFor example: SELECT k1 FROM test GROUP BY k1 HAVING EXISTS(SELECT k1 FROM baseall GROUP BY k1 HAVING SUM(test.k1) = k1);\nThe correlated predicate is not executed.\n\nThe limit offset should be rewritten also when there is subquery in having clause.\nFor example: select k1, count(*) cnt from test group by k1 having k1 in (select k1 from baseall order by k1 limit 2) order by k1 limit 5 offset 3;\nThe new stmt should has a limit element with offset.\n\nChange-Id: I65c361af54803eac4288f8b9f1e0aa4bfc0b3d4c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1952e363a5c91d5f26dd3a6478dd30644e4c61f", "author": {"user": {"login": "EmmyMiao87", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/b1952e363a5c91d5f26dd3a6478dd30644e4c61f", "committedDate": "2020-04-24T06:09:02Z", "message": "Add ut\n\nChange-Id: Id05fb757216d0e2669c01fb0fcdf01309d62d79e"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTQ4MzU0", "url": "https://github.com/apache/incubator-doris/pull/3378#pullrequestreview-399948354", "createdAt": "2020-04-24T13:31:42Z", "commit": {"oid": "b1952e363a5c91d5f26dd3a6478dd30644e4c61f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3292, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}