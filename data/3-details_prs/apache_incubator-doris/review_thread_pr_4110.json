{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzI4OTc2", "number": 4110, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzozNjowMFrOEP70hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzoxMTowMlrOEQcjOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTQ0MTk2OnYy", "diffSide": "RIGHT", "path": "be/src/http/default_path_handlers.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzozNjowMFrOGz2HBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMTowNVrOG0Cf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzA5NQ==", "bodyText": "I didn't see you use it, is it needed?", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457017095", "createdAt": "2020-07-20T03:36:00Z", "author": {"login": "acelyc111"}, "path": "be/src/http/default_path_handlers.h", "diffHunk": "@@ -20,6 +20,8 @@\n \n #include <stdio.h>\n \n+#include \"util/thread.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMDA2NA==", "bodyText": "I remove it to .cpp file", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457220064", "createdAt": "2020-07-20T09:31:05Z", "author": {"login": "WingsGo"}, "path": "be/src/http/default_path_handlers.h", "diffHunk": "@@ -20,6 +20,8 @@\n \n #include <stdio.h>\n \n+#include \"util/thread.h\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzA5NQ=="}, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTQ1NDczOnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo0MDo0MFrOGz2Niw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo0MDo0MFrOGz2Niw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxODc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"/threadz\", \"Threadz\",\n          \n          \n            \n                        \"/threadz\", \"Threads\",", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457018763", "createdAt": "2020-07-20T03:40:40Z", "author": {"login": "acelyc111"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -397,8 +477,15 @@ Status ThreadJoiner::join() {\n         }\n         waited_ms += wait_for;\n     }\n-    return Status::Aborted(strings::Substitute(\"Timed out after $0ms joining on $1\",\n-                                               waited_ms, _thread->_name));\n+    return Status::Aborted(\n+            strings::Substitute(\"Timed out after $0ms joining on $1\", waited_ms, _thread->_name));\n }\n \n+void start_thread_instrumentation(WebPageHandler* web_page_handler) {\n+    web_page_handler->register_template_page(\n+            \"/threadz\", \"Threadz\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTQ3MDA4OnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo0NjozNFrOGz2V5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMDozN1rOG0CeYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMDkwMA==", "bodyText": "I think we'd better call this function a xxx_handler, it's a callback of a http request.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457020900", "createdAt": "2020-07-20T03:46:34Z", "author": {"login": "acelyc111"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -74,18 +78,17 @@ class ThreadMgr {\n     // already been removed, this is a no-op.\n     void remove_thread(const pthread_t& pthread_id, const std::string& category);\n \n-private:\n+    void start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTY4MQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457219681", "createdAt": "2020-07-20T09:30:37Z", "author": {"login": "WingsGo"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -74,18 +78,17 @@ class ThreadMgr {\n     // already been removed, this is a no-op.\n     void remove_thread(const pthread_t& pthread_id, const std::string& category);\n \n-private:\n+    void start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMDkwMA=="}, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTQ4MjY3OnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo1MDozMlrOGz2cJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNToyM1rOG0CthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMjUwMQ==", "bodyText": "If category is not found, we will also output normally?", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457022501", "createdAt": "2020-07-20T03:50:32Z", "author": {"login": "acelyc111"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -169,6 +174,81 @@ void ThreadMgr::remove_thread(const pthread_t& pthread_id, const std::string& ca\n     ANNOTATE_IGNORE_READS_AND_WRITES_END();\n }\n \n+void ThreadMgr::start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const {\n+    const auto* category_name = FindOrNull(args, \"group\");\n+    if (category_name) {\n+        bool requested_all = (*category_name == \"all\");\n+        ej->Set(\"requested_thread_group\", EasyJson::kObject);\n+        (*ej)[\"group_name\"] = escape_for_html_to_string(*category_name);\n+        (*ej)[\"requested_all\"] = requested_all;\n+\n+        // The critical section is as short as possible so as to minimize the delay\n+        // imposed on new threads that acquire the lock in write mode.\n+        vector<ThreadDescriptor> descriptors_to_print;\n+        if (!requested_all) {\n+            MutexLock l(&_lock);\n+            const auto* category = FindOrNull(_thread_categories, *category_name);\n+            if (category) {\n+                for (const auto& elem : *category) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        } else {\n+            MutexLock l(&_lock);\n+            for (const auto& category : _thread_categories) {\n+                for (const auto& elem : category.second) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        }\n+\n+        EasyJson found = (*ej).Set(\"found\", EasyJson::kObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMzU1Nw==", "bodyText": "I changed it, if category is not found, we will not show it", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457223557", "createdAt": "2020-07-20T09:35:23Z", "author": {"login": "WingsGo"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -169,6 +174,81 @@ void ThreadMgr::remove_thread(const pthread_t& pthread_id, const std::string& ca\n     ANNOTATE_IGNORE_READS_AND_WRITES_END();\n }\n \n+void ThreadMgr::start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const {\n+    const auto* category_name = FindOrNull(args, \"group\");\n+    if (category_name) {\n+        bool requested_all = (*category_name == \"all\");\n+        ej->Set(\"requested_thread_group\", EasyJson::kObject);\n+        (*ej)[\"group_name\"] = escape_for_html_to_string(*category_name);\n+        (*ej)[\"requested_all\"] = requested_all;\n+\n+        // The critical section is as short as possible so as to minimize the delay\n+        // imposed on new threads that acquire the lock in write mode.\n+        vector<ThreadDescriptor> descriptors_to_print;\n+        if (!requested_all) {\n+            MutexLock l(&_lock);\n+            const auto* category = FindOrNull(_thread_categories, *category_name);\n+            if (category) {\n+                for (const auto& elem : *category) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        } else {\n+            MutexLock l(&_lock);\n+            for (const auto& category : _thread_categories) {\n+                for (const auto& elem : category.second) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        }\n+\n+        EasyJson found = (*ej).Set(\"found\", EasyJson::kObject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMjUwMQ=="}, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTQ4NTcwOnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo1MTozM1rOGz2dtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMjozM1rOG0CkuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMjkwMg==", "bodyText": "This may cause too many useless logs.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457022902", "createdAt": "2020-07-20T03:51:33Z", "author": {"login": "acelyc111"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -169,6 +174,81 @@ void ThreadMgr::remove_thread(const pthread_t& pthread_id, const std::string& ca\n     ANNOTATE_IGNORE_READS_AND_WRITES_END();\n }\n \n+void ThreadMgr::start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const {\n+    const auto* category_name = FindOrNull(args, \"group\");\n+    if (category_name) {\n+        bool requested_all = (*category_name == \"all\");\n+        ej->Set(\"requested_thread_group\", EasyJson::kObject);\n+        (*ej)[\"group_name\"] = escape_for_html_to_string(*category_name);\n+        (*ej)[\"requested_all\"] = requested_all;\n+\n+        // The critical section is as short as possible so as to minimize the delay\n+        // imposed on new threads that acquire the lock in write mode.\n+        vector<ThreadDescriptor> descriptors_to_print;\n+        if (!requested_all) {\n+            MutexLock l(&_lock);\n+            const auto* category = FindOrNull(_thread_categories, *category_name);\n+            if (category) {\n+                for (const auto& elem : *category) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        } else {\n+            MutexLock l(&_lock);\n+            for (const auto& category : _thread_categories) {\n+                for (const auto& elem : category.second) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        }\n+\n+        EasyJson found = (*ej).Set(\"found\", EasyJson::kObject);\n+        EasyJson threads = found.Set(\"threads\", EasyJson::kArray);\n+        for (const auto& desc : descriptors_to_print) {\n+            summarize_thread_descriptor(desc, &threads);\n+        }\n+    } else {\n+        // List all thread groups and the number of threads running in each.\n+        vector<pair<string, uint64_t>> thread_categories_info;\n+        uint64_t running;\n+        {\n+            MutexLock l(&_lock);\n+            running = _threads_running_metric;\n+            thread_categories_info.reserve(_thread_categories.size());\n+            for (const auto& category : _thread_categories) {\n+                thread_categories_info.emplace_back(category.first, category.second.size());\n+            }\n+\n+            (*ej)[\"total_threads_running\"] = running;\n+            EasyJson groups = ej->Set(\"groups\", EasyJson::kArray);\n+            for (const auto& elem : thread_categories_info) {\n+                string category_arg;\n+                url_encode(elem.first, &category_arg);\n+                LOG(INFO) << \"encode url path: \" << category_arg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMTMwNA==", "bodyText": "ok, I removed it.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457221304", "createdAt": "2020-07-20T09:32:33Z", "author": {"login": "WingsGo"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -169,6 +174,81 @@ void ThreadMgr::remove_thread(const pthread_t& pthread_id, const std::string& ca\n     ANNOTATE_IGNORE_READS_AND_WRITES_END();\n }\n \n+void ThreadMgr::start_instrumentation(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const {\n+    const auto* category_name = FindOrNull(args, \"group\");\n+    if (category_name) {\n+        bool requested_all = (*category_name == \"all\");\n+        ej->Set(\"requested_thread_group\", EasyJson::kObject);\n+        (*ej)[\"group_name\"] = escape_for_html_to_string(*category_name);\n+        (*ej)[\"requested_all\"] = requested_all;\n+\n+        // The critical section is as short as possible so as to minimize the delay\n+        // imposed on new threads that acquire the lock in write mode.\n+        vector<ThreadDescriptor> descriptors_to_print;\n+        if (!requested_all) {\n+            MutexLock l(&_lock);\n+            const auto* category = FindOrNull(_thread_categories, *category_name);\n+            if (category) {\n+                for (const auto& elem : *category) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        } else {\n+            MutexLock l(&_lock);\n+            for (const auto& category : _thread_categories) {\n+                for (const auto& elem : category.second) {\n+                    descriptors_to_print.emplace_back(elem.second);\n+                }\n+            }\n+        }\n+\n+        EasyJson found = (*ej).Set(\"found\", EasyJson::kObject);\n+        EasyJson threads = found.Set(\"threads\", EasyJson::kArray);\n+        for (const auto& desc : descriptors_to_print) {\n+            summarize_thread_descriptor(desc, &threads);\n+        }\n+    } else {\n+        // List all thread groups and the number of threads running in each.\n+        vector<pair<string, uint64_t>> thread_categories_info;\n+        uint64_t running;\n+        {\n+            MutexLock l(&_lock);\n+            running = _threads_running_metric;\n+            thread_categories_info.reserve(_thread_categories.size());\n+            for (const auto& category : _thread_categories) {\n+                thread_categories_info.emplace_back(category.first, category.second.size());\n+            }\n+\n+            (*ej)[\"total_threads_running\"] = running;\n+            EasyJson groups = ej->Set(\"groups\", EasyJson::kArray);\n+            for (const auto& elem : thread_categories_info) {\n+                string category_arg;\n+                url_encode(elem.first, &category_arg);\n+                LOG(INFO) << \"encode url path: \" << category_arg;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyMjkwMg=="}, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUwODExOnYy", "diffSide": "RIGHT", "path": "be/src/util/url_coding.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo1ODo1M1rOGz2pdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNzo0N1rOG0C0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNTkxMQ==", "bodyText": "IMO, format files which are copied from other projects is not a good idea, because when we want to sync code from source project which have fixed some bugs or add some new features, there will be much diff and conflicts to resolve.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457025911", "createdAt": "2020-07-20T03:58:53Z", "author": {"login": "acelyc111"}, "path": "be/src/util/url_coding.cpp", "diffHunk": "@@ -122,59 +122,47 @@ static void encode_base64_internal(const std::string& in, std::string* out,\n     out->assign((char*)buf.get(), d - buf.get());\n }\n \n-void base64url_encode(const std::string& in, std::string *out) {\n+void base64url_encode(const std::string& in, std::string* out) {\n     static unsigned char basis64[] =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n     encode_base64_internal(in, out, basis64, false);\n }\n \n void base64_encode(const std::string& in, std::string* out) {\n     static unsigned char basis64[] =\n-        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n     encode_base64_internal(in, out, basis64, true);\n }\n \n-static char encoding_table[] = {\n-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n-    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n-    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n-    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n-    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n-    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n-    'w', 'x', 'y', 'z', '0', '1', '2', '3',\n-    '4', '5', '6', '7', '8', '9', '+', '/'\n-};\n+static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTI4Ng==", "bodyText": "If there is some diff, maybe it is the resposibility for author who copied the file to fix it, Even if the code is formated, we can found the code that should modified.I think unify the codestyle in one project maybe more important.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457225286", "createdAt": "2020-07-20T09:37:47Z", "author": {"login": "WingsGo"}, "path": "be/src/util/url_coding.cpp", "diffHunk": "@@ -122,59 +122,47 @@ static void encode_base64_internal(const std::string& in, std::string* out,\n     out->assign((char*)buf.get(), d - buf.get());\n }\n \n-void base64url_encode(const std::string& in, std::string *out) {\n+void base64url_encode(const std::string& in, std::string* out) {\n     static unsigned char basis64[] =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n     encode_base64_internal(in, out, basis64, false);\n }\n \n void base64_encode(const std::string& in, std::string* out) {\n     static unsigned char basis64[] =\n-        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n     encode_base64_internal(in, out, basis64, true);\n }\n \n-static char encoding_table[] = {\n-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n-    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n-    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n-    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n-    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n-    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n-    'w', 'x', 'y', 'z', '0', '1', '2', '3',\n-    '4', '5', '6', '7', '8', '9', '+', '/'\n-};\n+static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNTkxMQ=="}, "originalCommit": {"oid": "46b415c02284d134683c17c34dc7aca8d4efab99"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njc2Mzk4OnYy", "diffSide": "RIGHT", "path": "be/src/env/env.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0Njo0MFrOG0mH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzo1OTozN1rOG0nPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwMzc0OA==", "bodyText": "I think every line for every enum type is better to read.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457803748", "createdAt": "2020-07-21T02:46:40Z", "author": {"login": "chaoyli"}, "path": "be/src/env/env.h", "diffHunk": "@@ -35,15 +35,10 @@ class Env {\n     // CREATE_OR_OPEN               | opens             | creates\n     // MUST_CREATE                  | fails             | creates\n     // MUST_EXIST                   | opens             | fails\n-    enum OpenMode {\n-        CREATE_OR_OPEN_WITH_TRUNCATE,\n-        CREATE_OR_OPEN,\n-        MUST_CREATE,\n-        MUST_EXIST\n-    };\n+    enum OpenMode { CREATE_OR_OPEN_WITH_TRUNCATE, CREATE_OR_OPEN, MUST_CREATE, MUST_EXIST };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyMTk5MQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457821991", "createdAt": "2020-07-21T03:59:37Z", "author": {"login": "WingsGo"}, "path": "be/src/env/env.h", "diffHunk": "@@ -35,15 +35,10 @@ class Env {\n     // CREATE_OR_OPEN               | opens             | creates\n     // MUST_CREATE                  | fails             | creates\n     // MUST_EXIST                   | opens             | fails\n-    enum OpenMode {\n-        CREATE_OR_OPEN_WITH_TRUNCATE,\n-        CREATE_OR_OPEN,\n-        MUST_CREATE,\n-        MUST_EXIST\n-    };\n+    enum OpenMode { CREATE_OR_OPEN_WITH_TRUNCATE, CREATE_OR_OPEN, MUST_CREATE, MUST_EXIST };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwMzc0OA=="}, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njc2NTA0OnYy", "diffSide": "RIGHT", "path": "be/src/env/env.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0NzoxMVrOG0mIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0NzoxMVrOG0mIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwMzkwNg==", "bodyText": "I think every line for every enum type is better to read.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457803906", "createdAt": "2020-07-21T02:47:11Z", "author": {"login": "chaoyli"}, "path": "be/src/env/env.h", "diffHunk": "@@ -271,13 +260,10 @@ class RandomAccessFile {\n // one of Append or PositionedAppend. We support only Append here.\n class WritableFile {\n public:\n-    enum FlushMode {\n-        FLUSH_SYNC,\n-        FLUSH_ASYNC\n-    };\n+    enum FlushMode { FLUSH_SYNC, FLUSH_ASYNC };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njc4ODU4OnYy", "diffSide": "RIGHT", "path": "be/src/env/env_util.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzowMTozNlrOG0mWVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzo1OToyOVrOG0nO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzQ0NQ==", "bodyText": "extern here seems useless can can be removed.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457807445", "createdAt": "2020-07-21T03:01:36Z", "author": {"login": "chaoyli"}, "path": "be/src/env/env_util.h", "diffHunk": "@@ -30,14 +31,21 @@ struct WritableFileOptions;\n \n namespace env_util {\n \n-Status open_file_for_write(Env *env, const std::string& path, std::shared_ptr<WritableFile> *file);\n+Status open_file_for_write(Env* env, const std::string& path, std::shared_ptr<WritableFile>* file);\n \n-Status open_file_for_write(const WritableFileOptions& opts, Env *env,\n-                           const std::string& path, std::shared_ptr<WritableFile> *file);\n+Status open_file_for_write(const WritableFileOptions& opts, Env* env, const std::string& path,\n+                           std::shared_ptr<WritableFile>* file);\n \n-Status open_file_for_random(Env *env, const std::string& path,\n-                            std::shared_ptr<RandomAccessFile> *file);\n+Status open_file_for_random(Env* env, const std::string& path,\n+                            std::shared_ptr<RandomAccessFile>* file);\n+\n+// A utility routine: write \"data\" to the named file.\n+extern Status write_string_to_file(Env* env, const Slice& data, const std::string& fname);\n+// Like above but also fsyncs the new file.\n+extern Status write_string_to_file_sync(Env* env, const Slice& data, const std::string& fname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyMTk0MQ==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457821941", "createdAt": "2020-07-21T03:59:29Z", "author": {"login": "WingsGo"}, "path": "be/src/env/env_util.h", "diffHunk": "@@ -30,14 +31,21 @@ struct WritableFileOptions;\n \n namespace env_util {\n \n-Status open_file_for_write(Env *env, const std::string& path, std::shared_ptr<WritableFile> *file);\n+Status open_file_for_write(Env* env, const std::string& path, std::shared_ptr<WritableFile>* file);\n \n-Status open_file_for_write(const WritableFileOptions& opts, Env *env,\n-                           const std::string& path, std::shared_ptr<WritableFile> *file);\n+Status open_file_for_write(const WritableFileOptions& opts, Env* env, const std::string& path,\n+                           std::shared_ptr<WritableFile>* file);\n \n-Status open_file_for_random(Env *env, const std::string& path,\n-                            std::shared_ptr<RandomAccessFile> *file);\n+Status open_file_for_random(Env* env, const std::string& path,\n+                            std::shared_ptr<RandomAccessFile>* file);\n+\n+// A utility routine: write \"data\" to the named file.\n+extern Status write_string_to_file(Env* env, const Slice& data, const std::string& fname);\n+// Like above but also fsyncs the new file.\n+extern Status write_string_to_file_sync(Env* env, const Slice& data, const std::string& fname);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzQ0NQ=="}, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjgwMTE1OnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzowOTozMlrOG0md4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzo1OToyNVrOG0nO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTM3OQ==", "bodyText": "EasyJson is not imported ?", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457809379", "createdAt": "2020-07-21T03:09:32Z", "author": {"login": "chaoyli"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -74,18 +78,17 @@ class ThreadMgr {\n     // already been removed, this is a no-op.\n     void remove_thread(const pthread_t& pthread_id, const std::string& category);\n \n-private:\n+    void display_thread_callback(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyMTkyMg==", "bodyText": "easy_json is imported in line 38.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457821922", "createdAt": "2020-07-21T03:59:25Z", "author": {"login": "WingsGo"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -74,18 +78,17 @@ class ThreadMgr {\n     // already been removed, this is a no-op.\n     void remove_thread(const pthread_t& pthread_id, const std::string& category);\n \n-private:\n+    void display_thread_callback(const WebPageHandler::ArgumentMap& args, EasyJson* ej) const;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTM3OQ=="}, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjgwNDQyOnYy", "diffSide": "RIGHT", "path": "be/src/util/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzoxMTowMlrOG0mfmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDozMjozN1rOG0nuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTgxOA==", "bodyText": "If we can use std::bind for the same purpose, It's better to replace it using C++ standard library.", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457809818", "createdAt": "2020-07-21T03:11:02Z", "author": {"login": "chaoyli"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -397,8 +477,15 @@ Status ThreadJoiner::join() {\n         }\n         waited_ms += wait_for;\n     }\n-    return Status::Aborted(strings::Substitute(\"Timed out after $0ms joining on $1\",\n-                                               waited_ms, _thread->_name));\n+    return Status::Aborted(\n+            strings::Substitute(\"Timed out after $0ms joining on $1\", waited_ms, _thread->_name));\n }\n \n+void register_thread_display_page(WebPageHandler* web_page_handler) {\n+    web_page_handler->register_template_page(\n+            \"/threadz\", \"Threads\",\n+            boost::bind(&ThreadMgr::display_thread_callback, thread_manager.get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyOTk1Ng==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4110#discussion_r457829956", "createdAt": "2020-07-21T04:32:37Z", "author": {"login": "WingsGo"}, "path": "be/src/util/thread.cpp", "diffHunk": "@@ -397,8 +477,15 @@ Status ThreadJoiner::join() {\n         }\n         waited_ms += wait_for;\n     }\n-    return Status::Aborted(strings::Substitute(\"Timed out after $0ms joining on $1\",\n-                                               waited_ms, _thread->_name));\n+    return Status::Aborted(\n+            strings::Substitute(\"Timed out after $0ms joining on $1\", waited_ms, _thread->_name));\n }\n \n+void register_thread_display_page(WebPageHandler* web_page_handler) {\n+    web_page_handler->register_template_page(\n+            \"/threadz\", \"Threads\",\n+            boost::bind(&ThreadMgr::display_thread_callback, thread_manager.get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTgxOA=="}, "originalCommit": {"oid": "0690918c7edc3d04c6d60acec5ec60db9f6b99e1"}, "originalPosition": 242}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1200, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}