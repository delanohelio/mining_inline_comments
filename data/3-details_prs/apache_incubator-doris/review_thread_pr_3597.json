{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzQyNjY0", "number": 3597, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1NDo1MlrOD8tulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1ODo1OFrOD8txUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTkwMzU5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1NDo1MlrOGV0x5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1NDo1MlrOGV0x5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzODAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n          \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build (predicate) and (.. or ..)  predicate in", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425538020", "createdAt": "2020-05-15T02:54:52Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTkxMDU3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1ODo1OFrOGV02Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1ODo1OFrOGV02Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzOTA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 if (LOG.isDebugEnabled) {\n          \n          \n            \n                      LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 }", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425539095", "createdAt": "2020-05-15T02:58:58Z", "author": {"login": "wuyunfeng"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n+            // step 1: will build (.. or ..)\n+            result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n+                    temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n+                    : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        }\n         LOG.debug(\"rewrite ors: \" + result.toSql());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}