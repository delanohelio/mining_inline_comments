{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTYxNzI2", "number": 3081, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowOTo1M1rODnwr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozOVrODqZTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE4NzM3OnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/persist/ModifyDynamicPartitionInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowOTo1M1rOF18SYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowOTo1M1rOF18SYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNjU5Mg==", "bodyText": "-3?", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392106592", "createdAt": "2020-03-13T09:09:53Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/persist/ModifyDynamicPartitionInfoTest.java", "diffHunk": "@@ -49,6 +49,7 @@ public void testNormal() throws IOException {\n         HashMap<String, String> properties = new HashMap<>();\n         properties.put(DynamicPartitionProperty.ENABLE, \"true\");\n         properties.put(DynamicPartitionProperty.TIME_UNIT, \"day\");\n+        properties.put(DynamicPartitionProperty.START, \"3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE4ODA3OnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/catalog/TablePropertyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMDowOFrOF18S1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMDowOFrOF18S1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNjcxMA==", "bodyText": "-3", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392106710", "createdAt": "2020-03-13T09:10:08Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/catalog/TablePropertyTest.java", "diffHunk": "@@ -49,6 +49,7 @@ public void testNormal() throws IOException {\n         HashMap<String, String> properties = new HashMap<>();\n         properties.put(DynamicPartitionProperty.ENABLE, \"true\");\n         properties.put(DynamicPartitionProperty.TIME_UNIT, \"day\");\n+        properties.put(DynamicPartitionProperty.START, \"3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE5NDE2OnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/catalog/DynamicPartitionTableTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMjoxNFrOF18WxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMzoyOTozMlrOF4e54g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzcxNg==", "bodyText": "You could refer to QueryPlanTest, and create real table.", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392107716", "createdAt": "2020-03-13T09:12:14Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/catalog/DynamicPartitionTableTest.java", "diffHunk": "@@ -293,6 +294,50 @@ public void testMissTimeUnit(@Injectable SystemInfoService systemInfoService,\n         catalog.createTable(stmt);\n     }\n \n+    @Test\n+    public void testMissSTART(@Injectable SystemInfoService systemInfoService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5MzgwNQ==", "bodyText": "ok, i will change it.", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392293805", "createdAt": "2020-03-13T15:19:23Z", "author": {"login": "WingsGo"}, "path": "fe/src/test/java/org/apache/doris/catalog/DynamicPartitionTableTest.java", "diffHunk": "@@ -293,6 +294,50 @@ public void testMissTimeUnit(@Injectable SystemInfoService systemInfoService,\n         catalog.createTable(stmt);\n     }\n \n+    @Test\n+    public void testMissSTART(@Injectable SystemInfoService systemInfoService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzcxNg=="}, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDkxNA==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r394770914", "createdAt": "2020-03-19T03:29:32Z", "author": {"login": "WingsGo"}, "path": "fe/src/test/java/org/apache/doris/catalog/DynamicPartitionTableTest.java", "diffHunk": "@@ -293,6 +294,50 @@ public void testMissTimeUnit(@Injectable SystemInfoService systemInfoService,\n         catalog.createTable(stmt);\n     }\n \n+    @Test\n+    public void testMissSTART(@Injectable SystemInfoService systemInfoService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzcxNg=="}, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE5NDk3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/service/Untitled-2.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMjozNFrOF18XTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNToxODo0OVrOF2HsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzg1Mw==", "bodyText": "Why add this file?", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392107853", "createdAt": "2020-03-13T09:12:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/service/Untitled-2.md", "diffHunk": "@@ -0,0 +1 @@\n+# 1 Master + 2 Follower", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5MzQ3Mw==", "bodyText": "my fault\u2026I will remove it", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392293473", "createdAt": "2020-03-13T15:18:49Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/service/Untitled-2.md", "diffHunk": "@@ -0,0 +1 @@\n+# 1 Master + 2 Follower", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzg1Mw=="}, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIwMTA4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/common/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNDo0OVrOF18bSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMzoyOTowMFrOF4e5aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConfField(mutable = false, masterOnly = true)\n          \n          \n            \n                @ConfField", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392108873", "createdAt": "2020-03-13T09:14:49Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/common/Config.java", "diffHunk": "@@ -981,7 +981,7 @@\n     /*\n      * Decide how often to check dynamic partition\n      */\n-    @ConfField(mutable = true, masterOnly = true)\n+    @ConfField(mutable = false, masterOnly = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDc5NQ==", "bodyText": "I think maybe we should allow dynamic change the check interval seconds?", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r394770795", "createdAt": "2020-03-19T03:29:00Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/common/Config.java", "diffHunk": "@@ -981,7 +981,7 @@\n     /*\n      * Decide how often to check dynamic partition\n      */\n-    @ConfField(mutable = true, masterOnly = true)\n+    @ConfField(mutable = false, masterOnly = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODg3Mw=="}, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIzNzM0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MDo0M1rOF2GmjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozNjoxNlrOF2IVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTU5Ng==", "bodyText": "the pattern should be:\ndb.readLock();\ntry {\n    OlapTable olapTable = (OlapTable) db.getTable(tableId);\n    .....\n} finally {\n    db.readUnlock();\n}", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392275596", "createdAt": "2020-03-13T14:50:43Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -136,12 +245,15 @@ private void dynamicAddPartition() {\n                 iterator.remove();\n                 continue;\n             }\n-            String tableName;\n-            ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+\n             db.readLock();\n+            ArrayList<AddPartitionClause> addPartitionClauses;\n+            ArrayList<DropPartitionClause> dropPartitionClauses;\n+            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n+            String tableName;\n+            boolean skipAddPartition = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzk5Nw==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392303997", "createdAt": "2020-03-13T15:36:16Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -136,12 +245,15 @@ private void dynamicAddPartition() {\n                 iterator.remove();\n                 continue;\n             }\n-            String tableName;\n-            ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+\n             db.readLock();\n+            ArrayList<AddPartitionClause> addPartitionClauses;\n+            ArrayList<DropPartitionClause> dropPartitionClauses;\n+            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n+            String tableName;\n+            boolean skipAddPartition = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTU5Ng=="}, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk1NDc1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyNTo1MVrOF51PLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyNToyNlrOF52kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTM4OA==", "bodyText": "No need to get add partition clause is skipAddPartition is true.", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396185388", "createdAt": "2020-03-23T02:25:51Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -168,98 +281,62 @@ private void dynamicAddPartition() {\n                 try {\n                     partitionFormat = DynamicPartitionUtil.getPartitionFormat(partitionColumn);\n                 } catch (DdlException e) {\n-                    recordFailedMsg(olapTable.getName(), e.getMessage());\n+                    recordCreatePartitionFailedMsg(olapTable.getName(), e.getMessage());\n                     continue;\n                 }\n \n-                Calendar calendar = Calendar.getInstance();\n-                TableProperty tableProperty = olapTable.getTableProperty();\n-                DynamicPartitionProperty dynamicPartitionProperty = tableProperty.getDynamicPartitionProperty();\n-\n-                for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n-                    String dynamicPartitionPrefix = dynamicPartitionProperty.getPrefix();\n-                    String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i, (Calendar) calendar.clone(), partitionFormat);\n-                    String partitionName = dynamicPartitionPrefix + DynamicPartitionUtil.getFormattedPartitionName(prevBorder);\n-\n-                    // continue if partition already exists\n-                    String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i + 1, (Calendar) calendar.clone(), partitionFormat);\n-                    PartitionValue lowerValue = new PartitionValue(prevBorder);\n-                    PartitionValue upperValue = new PartitionValue(nextBorder);\n-                    PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n-                    RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n-                    boolean isPartitionExists = false;\n-                    Range<PartitionKey> addPartitionKeyRange = null;\n-                    try {\n-                        PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n-                        PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n-                        addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n-                    } catch (AnalysisException e) {\n-                        // keys.size is always equal to column.size, cannot reach this exception\n-                        LOG.error(\"Keys size is not equl to column size.\");\n-                        continue;\n-                    }\n-                    for (Range<PartitionKey> partitionKeyRange : info.getIdToRange().values()) {\n-                        // only support single column partition now\n-                        try {\n-                            RangeUtils.checkRangeIntersect(partitionKeyRange, addPartitionKeyRange);\n-                        } catch (DdlException e) {\n-                            isPartitionExists = true;\n-                            if (addPartitionKeyRange.equals(partitionKeyRange)) {\n-                                clearFailedMsg(olapTable.getName());\n-                            } else {\n-                                recordFailedMsg(olapTable.getName(), e.getMessage());\n-                            }\n-                            break;\n-                        }\n-                    }\n-                    if (isPartitionExists) {\n-                        continue;\n-                    }\n-\n-                    // construct partition desc\n-                    PartitionKeyDesc partitionKeyDesc = new PartitionKeyDesc(Collections.singletonList(lowerValue), Collections.singletonList(upperValue));\n-                    HashMap<String, String> partitionProperties = new HashMap<>(1);\n-                    partitionProperties.put(\"replication_num\", String.valueOf(DynamicPartitionUtil.estimateReplicateNum(olapTable)));\n-                    SingleRangePartitionDesc rangePartitionDesc = new SingleRangePartitionDesc(true, partitionName,\n-                            partitionKeyDesc, partitionProperties);\n-\n-                    // construct distribution desc\n-                    HashDistributionInfo hashDistributionInfo = (HashDistributionInfo) olapTable.getDefaultDistributionInfo();\n-                    List<String> distColumnNames = new ArrayList<>();\n-                    for (Column distributionColumn : hashDistributionInfo.getDistributionColumns()) {\n-                        distColumnNames.add(distributionColumn.getName());\n-                    }\n-                    DistributionDesc distributionDesc = new HashDistributionDesc(dynamicPartitionProperty.getBuckets(), distColumnNames);\n-\n-                    // add partition according to partition desc and distribution desc\n-                    addPartitionClauses.add(new AddPartitionClause(rangePartitionDesc, distributionDesc, null, false));\n-                }\n+                addPartitionClauses = getAddPartitionClause(olapTable, partitionColumn, partitionFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzI3Mw==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396207273", "createdAt": "2020-03-23T04:25:26Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -168,98 +281,62 @@ private void dynamicAddPartition() {\n                 try {\n                     partitionFormat = DynamicPartitionUtil.getPartitionFormat(partitionColumn);\n                 } catch (DdlException e) {\n-                    recordFailedMsg(olapTable.getName(), e.getMessage());\n+                    recordCreatePartitionFailedMsg(olapTable.getName(), e.getMessage());\n                     continue;\n                 }\n \n-                Calendar calendar = Calendar.getInstance();\n-                TableProperty tableProperty = olapTable.getTableProperty();\n-                DynamicPartitionProperty dynamicPartitionProperty = tableProperty.getDynamicPartitionProperty();\n-\n-                for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n-                    String dynamicPartitionPrefix = dynamicPartitionProperty.getPrefix();\n-                    String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i, (Calendar) calendar.clone(), partitionFormat);\n-                    String partitionName = dynamicPartitionPrefix + DynamicPartitionUtil.getFormattedPartitionName(prevBorder);\n-\n-                    // continue if partition already exists\n-                    String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i + 1, (Calendar) calendar.clone(), partitionFormat);\n-                    PartitionValue lowerValue = new PartitionValue(prevBorder);\n-                    PartitionValue upperValue = new PartitionValue(nextBorder);\n-                    PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n-                    RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n-                    boolean isPartitionExists = false;\n-                    Range<PartitionKey> addPartitionKeyRange = null;\n-                    try {\n-                        PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n-                        PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n-                        addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n-                    } catch (AnalysisException e) {\n-                        // keys.size is always equal to column.size, cannot reach this exception\n-                        LOG.error(\"Keys size is not equl to column size.\");\n-                        continue;\n-                    }\n-                    for (Range<PartitionKey> partitionKeyRange : info.getIdToRange().values()) {\n-                        // only support single column partition now\n-                        try {\n-                            RangeUtils.checkRangeIntersect(partitionKeyRange, addPartitionKeyRange);\n-                        } catch (DdlException e) {\n-                            isPartitionExists = true;\n-                            if (addPartitionKeyRange.equals(partitionKeyRange)) {\n-                                clearFailedMsg(olapTable.getName());\n-                            } else {\n-                                recordFailedMsg(olapTable.getName(), e.getMessage());\n-                            }\n-                            break;\n-                        }\n-                    }\n-                    if (isPartitionExists) {\n-                        continue;\n-                    }\n-\n-                    // construct partition desc\n-                    PartitionKeyDesc partitionKeyDesc = new PartitionKeyDesc(Collections.singletonList(lowerValue), Collections.singletonList(upperValue));\n-                    HashMap<String, String> partitionProperties = new HashMap<>(1);\n-                    partitionProperties.put(\"replication_num\", String.valueOf(DynamicPartitionUtil.estimateReplicateNum(olapTable)));\n-                    SingleRangePartitionDesc rangePartitionDesc = new SingleRangePartitionDesc(true, partitionName,\n-                            partitionKeyDesc, partitionProperties);\n-\n-                    // construct distribution desc\n-                    HashDistributionInfo hashDistributionInfo = (HashDistributionInfo) olapTable.getDefaultDistributionInfo();\n-                    List<String> distColumnNames = new ArrayList<>();\n-                    for (Column distributionColumn : hashDistributionInfo.getDistributionColumns()) {\n-                        distColumnNames.add(distributionColumn.getName());\n-                    }\n-                    DistributionDesc distributionDesc = new HashDistributionDesc(dynamicPartitionProperty.getBuckets(), distColumnNames);\n-\n-                    // add partition according to partition desc and distribution desc\n-                    addPartitionClauses.add(new AddPartitionClause(rangePartitionDesc, distributionDesc, null, false));\n-                }\n+                addPartitionClauses = getAddPartitionClause(olapTable, partitionColumn, partitionFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTM4OA=="}, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk1NzQ5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyODoyNVrOF51Q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyNTo0NVrOF52k9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgyOQ==", "bodyText": "Do not use error level, error means fatal.\nAnd it better to add details in log, such as e.getMessage().\nSame suggest to the getDropPartitionClause()", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396185829", "createdAt": "2020-03-23T02:28:25Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -121,11 +123,118 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n         defaultRuntimeInfo.put(LAST_UPDATE_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(LAST_SCHEDULER_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(DYNAMIC_PARTITION_STATE, State.NORMAL.toString());\n-        defaultRuntimeInfo.put(MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(CREATE_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(DROP_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n         return defaultRuntimeInfo;\n     }\n \n-    private void dynamicAddPartition() {\n+    private ArrayList<AddPartitionClause> getAddPartitionClause(OlapTable olapTable, Column partitionColumn, String partitionFormat) {\n+        ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+        Calendar calendar = Calendar.getInstance();\n+        DynamicPartitionProperty dynamicPartitionProperty = olapTable.getTableProperty().getDynamicPartitionProperty();\n+        for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n+            String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i, (Calendar) calendar.clone(), partitionFormat);\n+            // continue if partition already exists\n+            String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i + 1, (Calendar) calendar.clone(), partitionFormat);\n+            PartitionValue lowerValue = new PartitionValue(prevBorder);\n+            PartitionValue upperValue = new PartitionValue(nextBorder);\n+            PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n+            RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n+            boolean isPartitionExists = false;\n+            Range<PartitionKey> addPartitionKeyRange;\n+            try {\n+                PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n+                PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n+                addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n+            } catch (AnalysisException e) {\n+                // keys.size is always equal to column.size, cannot reach this exception\n+                LOG.error(\"Keys size is not equal to column size.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzM0OA==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396207348", "createdAt": "2020-03-23T04:25:45Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -121,11 +123,118 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n         defaultRuntimeInfo.put(LAST_UPDATE_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(LAST_SCHEDULER_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(DYNAMIC_PARTITION_STATE, State.NORMAL.toString());\n-        defaultRuntimeInfo.put(MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(CREATE_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(DROP_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n         return defaultRuntimeInfo;\n     }\n \n-    private void dynamicAddPartition() {\n+    private ArrayList<AddPartitionClause> getAddPartitionClause(OlapTable olapTable, Column partitionColumn, String partitionFormat) {\n+        ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+        Calendar calendar = Calendar.getInstance();\n+        DynamicPartitionProperty dynamicPartitionProperty = olapTable.getTableProperty().getDynamicPartitionProperty();\n+        for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n+            String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i, (Calendar) calendar.clone(), partitionFormat);\n+            // continue if partition already exists\n+            String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i + 1, (Calendar) calendar.clone(), partitionFormat);\n+            PartitionValue lowerValue = new PartitionValue(prevBorder);\n+            PartitionValue upperValue = new PartitionValue(nextBorder);\n+            PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n+            RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n+            boolean isPartitionExists = false;\n+            Range<PartitionKey> addPartitionKeyRange;\n+            try {\n+                PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n+                PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n+                addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n+            } catch (AnalysisException e) {\n+                // keys.size is always equal to column.size, cannot reach this exception\n+                LOG.error(\"Keys size is not equal to column size.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgyOQ=="}, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgwNzg4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjoyOVrOF6HOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjoyOVrOF6HOBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDAwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());\n          \n          \n            \n                            LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396480004", "createdAt": "2020-03-23T14:12:29Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -150,7 +150,7 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n                 addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n             } catch (AnalysisException e) {\n                 // keys.size is always equal to column.size, cannot reach this exception\n-                LOG.error(\"Keys size is not equal to column size.\");\n+                LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxMzI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozOVrOF6HRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozOVrOF6HRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDkxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());\n          \n          \n            \n                        LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396480911", "createdAt": "2020-03-23T14:13:39Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -211,7 +211,7 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n             reservePartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n         } catch (AnalysisException e) {\n             // keys.size is always equal to column.size, cannot reach this exception\n-            LOG.error(\"Keys size is not equal to column size.\");\n+            LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2099, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}