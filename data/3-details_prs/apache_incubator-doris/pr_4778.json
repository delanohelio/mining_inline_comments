{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MDk1NjA2", "number": 4778, "title": "Error happened when open a view in DBeaver", "bodyText": "Proposed changes\nFix bug #4777\uff1aError happened when open a view in DBeaver\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n Bugfix (non-breaking change which fixes an issue)\n[] New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n[] Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on (Fix #4777), and have described the bug/feature there in detail\n[] Compiling and unit tests pass locally with my changes\n[] I have added tests that prove my fix is effective or that my feature works\n[] If this change need a document change, I have updated the document\n[] Any dependent changes have been merged\n\nFurther comments\nFix bug #4777", "createdAt": "2020-10-22T07:57:43Z", "url": "https://github.com/apache/incubator-doris/pull/4778", "merged": true, "mergeCommit": {"oid": "44498a1ae2f6303a8765e2b537f2bf0a8e848864"}, "closed": true, "closedAt": "2020-10-30T03:44:45Z", "author": {"login": "pengxiangyu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU80bAgH2gAyNTA4MDk1NjA2OmJmYWYxYjY4NGEzYzg2NDlkNzRmOWE1ZTM4OTM1ZGMyYzEyNjZkMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXJI5AgFqTUxOTI5NTg4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bfaf1b684a3c8649d74f9a5e38935dc2c1266d18", "author": {"user": {"login": "pengxiangyu", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/bfaf1b684a3c8649d74f9a5e38935dc2c1266d18", "committedDate": "2020-10-22T07:27:17Z", "message": "Error happened when open a view in DBeaver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c", "author": {"user": {"login": "pengxiangyu", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/bff46c5e55d6117b1e4c27a3abd74d3d42548a3c", "committedDate": "2020-10-22T08:00:10Z", "message": "Fix bug: Error happened when open a view in DBeaver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NzM5NTU1", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-514739555", "createdAt": "2020-10-22T13:42:28Z", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MjoyOVrOHmiZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MjoyOVrOHmiZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3MTYxMQ==", "bodyText": "Add comment for this new field", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r510171611", "createdAt": "2020-10-22T13:42:29Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Table.java", "diffHunk": "@@ -95,6 +95,8 @@\n     // table(view)'s comment\n     protected String comment = \"\";\n \n+    protected String ddlSql = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDQ0MjQy", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-516444242", "createdAt": "2020-10-26T03:05:27Z", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowNToyN1rOHn_mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowNToyN1rOHn_mEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5ODQ0OQ==", "bodyText": "length always 6 and definer always \"root@%\" \uff1f why \uff1f", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511698449", "createdAt": "2020-10-26T03:05:27Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string is_updatable = \"YES\";\n+        str_slot->len = is_updatable.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, is_updatable.c_str(), str_slot->len);\n+    }\n+    // definer\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[6]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string definer = \"root@%\";\n+        str_slot->len = definer.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, definer.c_str(), str_slot->len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDQ1MTEz", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-516445113", "createdAt": "2020-10-26T03:09:13Z", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToxM1rOHn_o2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToxM1rOHn_o2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTE2Mg==", "bodyText": "why this column length is 77, you should add a comment, this column in mysql is 288", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511699162", "createdAt": "2020-10-26T03:09:13Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDQ1MTY4", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-516445168", "createdAt": "2020-10-26T03:09:25Z", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToyNVrOHn_pEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToyNVrOHn_pEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTIxOA==", "bodyText": "why 32", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511699218", "createdAt": "2020-10-26T03:09:25Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))\n+                                        .column(\"CHARACTER_SET_CLIENT\", ScalarType.createVarchar(32))\n+                                        .column(\"COLLATION_CONNECTION\", ScalarType.createVarchar(32))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDQ2NzEy", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-516446712", "createdAt": "2020-10-26T03:16:09Z", "commit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNjowOVrOHn_uSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNjowOVrOHn_uSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                           List<Table> tables = db.getTables();\n          \n          \n            \n                            if (params.isSetType() && \"VIEW\".equals(params.getType())) {\n          \n          \n            \n                                tables = db. getViews();\n          \n          \n            \n                            }", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511700554", "createdAt": "2020-10-26T03:16:09Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -248,7 +248,19 @@ public TListTableStatusResult listTableStatus(TGetTablesParams params) throws TE\n         if (db != null) {\n             db.readLock();\n             try {\n-                for (Table table : db.getTables()) {\n+                List<Table> tables = null;\n+                if (!params.isSetType() || params.getType() == null || params.getType().isEmpty()) {\n+                    tables = db.getTables();\n+                } else {\n+                    switch (params.getType()) {\n+                        case \"VIEW\":\n+                            tables = db.getViews();\n+                            break;\n+                        default:\n+                            tables = db.getTables();\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c58f31bfa130c6a9ebb2ca0c85fa85fc2d4174e7", "author": {"user": {"login": "pengxiangyu", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/c58f31bfa130c6a9ebb2ca0c85fa85fc2d4174e7", "committedDate": "2020-10-27T09:08:43Z", "message": "Fix bug: Error happened when open a view in DBeaver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf", "author": {"user": {"login": "pengxiangyu", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/79be4f098fbffb793193aac8246cedd48cff56bf", "committedDate": "2020-10-27T09:18:41Z", "message": "Fix bug: Error happened when open a view in DBeaver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDkzNjM3", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-517493637", "createdAt": "2020-10-27T09:23:00Z", "commit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzg5NDk0", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-518789494", "createdAt": "2020-10-28T15:27:03Z", "commit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNzowM1rOHpv1xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNzowM1rOHpv1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzQ3OA==", "bodyText": "Better set it to \"No\". Because we do not support DELETE or UPDATE on view.", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r513537478", "createdAt": "2020-10-28T15:27:03Z", "author": {"login": "morningman"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string is_updatable = \"YES\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59066ea666b95e753bd92869a5ea361e9c65c916", "author": {"user": {"login": "pengxiangyu", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/59066ea666b95e753bd92869a5ea361e9c65c916", "committedDate": "2020-10-29T02:14:11Z", "message": "Fix bug: Error happened when open a view in DBeaver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mjk1ODg4", "url": "https://github.com/apache/incubator-doris/pull/4778#pullrequestreview-519295888", "createdAt": "2020-10-29T02:56:21Z", "commit": {"oid": "59066ea666b95e753bd92869a5ea361e9c65c916"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}