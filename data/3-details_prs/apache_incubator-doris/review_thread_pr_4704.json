{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MDM0NTA1", "number": 4704, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjozMDo1N1rOEr38zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzowODoyM1rOEsCmCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDQwOTA4OnYy", "diffSide": "RIGHT", "path": "be/src/common/configbase.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjozMDo1N1rOHe4i8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo1Mzo0OVrOHfc7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE0NTc3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                out << \"# will overwrite the configurations in fe.conf\\n\";\n          \n          \n            \n                out << \"# will overwrite the configurations in be.conf\\n\";", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502145777", "createdAt": "2020-10-09T02:30:57Z", "author": {"login": "acelyc111"}, "path": "be/src/common/configbase.cpp", "diffHunk": "@@ -227,6 +231,34 @@ bool Properties::get(const char* key, const char* defstr, T& retval) const {\n     return strtox(valstr, retval);\n }\n \n+void Properties::set(const std::string& key, const std::string& val) {\n+    file_conf_map.emplace(key, val);\n+}\n+\n+bool Properties::dump(const std::string& conffile) {\n+    std::vector<std::string> files = { conffile };\n+    Status st = FileSystemUtil::remove_paths(files); \n+    if (!st.ok()) {\n+        return false;\n+    }\n+    st = FileSystemUtil::create_file(conffile);\n+    if (!st.ok()) {\n+        return false;\n+    }\n+\n+    std::ofstream out(conffile);\n+    out << \"# THIS IS AN AUTO GENERATED CONFIG FILE.\\n\";\n+    out << \"# You can modify this file manually, and the configurations in this file\\n\";\n+    out << \"# will overwrite the configurations in fe.conf\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTg4NA==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502741884", "createdAt": "2020-10-10T03:53:49Z", "author": {"login": "morningman"}, "path": "be/src/common/configbase.cpp", "diffHunk": "@@ -227,6 +231,34 @@ bool Properties::get(const char* key, const char* defstr, T& retval) const {\n     return strtox(valstr, retval);\n }\n \n+void Properties::set(const std::string& key, const std::string& val) {\n+    file_conf_map.emplace(key, val);\n+}\n+\n+bool Properties::dump(const std::string& conffile) {\n+    std::vector<std::string> files = { conffile };\n+    Status st = FileSystemUtil::remove_paths(files); \n+    if (!st.ok()) {\n+        return false;\n+    }\n+    st = FileSystemUtil::create_file(conffile);\n+    if (!st.ok()) {\n+        return false;\n+    }\n+\n+    std::ofstream out(conffile);\n+    out << \"# THIS IS AN AUTO GENERATED CONFIG FILE.\\n\";\n+    out << \"# You can modify this file manually, and the configurations in this file\\n\";\n+    out << \"# will overwrite the configurations in fe.conf\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE0NTc3Nw=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDQzNzAxOnYy", "diffSide": "RIGHT", "path": "be/src/http/action/update_config_action.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjozOToyOVrOHe404g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo1NDo0OFrOHfc71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MDM3MA==", "bodyText": "I think you should also describe the optional parameter persist in error message.", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502150370", "createdAt": "2020-10-09T02:39:29Z", "author": {"login": "acelyc111"}, "path": "be/src/http/action/update_config_action.cpp", "diffHunk": "@@ -38,25 +38,53 @@ namespace doris {\n \n const static std::string HEADER_JSON = \"application/json\";\n \n+const static std::string PERSIST_PARAM = \"persist\";\n+\n void UpdateConfigAction::handle(HttpRequest* req) {\n     LOG(INFO) << req->debug_string();\n \n     Status s;\n     std::string msg;\n-    if (req->params()->size() != 1) {\n+    // We only support set one config at a time, and along with a optional param \"persist\".\n+    // So the number of query params should at most be 2.\n+    if (req->params()->size() > 2 || req->params()->size() < 1) {\n         s = Status::InvalidArgument(\"\");\n         msg = \"Now only support to set a single config once, via 'config_name=new_value'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTk3NA==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502741974", "createdAt": "2020-10-10T03:54:48Z", "author": {"login": "morningman"}, "path": "be/src/http/action/update_config_action.cpp", "diffHunk": "@@ -38,25 +38,53 @@ namespace doris {\n \n const static std::string HEADER_JSON = \"application/json\";\n \n+const static std::string PERSIST_PARAM = \"persist\";\n+\n void UpdateConfigAction::handle(HttpRequest* req) {\n     LOG(INFO) << req->debug_string();\n \n     Status s;\n     std::string msg;\n-    if (req->params()->size() != 1) {\n+    // We only support set one config at a time, and along with a optional param \"persist\".\n+    // So the number of query params should at most be 2.\n+    if (req->params()->size() > 2 || req->params()->size() < 1) {\n         s = Status::InvalidArgument(\"\");\n         msg = \"Now only support to set a single config once, via 'config_name=new_value'\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MDM3MA=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDQzODQ5OnYy", "diffSide": "RIGHT", "path": "be/src/http/action/update_config_action.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjozOTo1NFrOHe412A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo1NDo1M1rOHfc72A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MDYxNg==", "bodyText": "Same", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502150616", "createdAt": "2020-10-09T02:39:54Z", "author": {"login": "acelyc111"}, "path": "be/src/http/action/update_config_action.cpp", "diffHunk": "@@ -38,25 +38,53 @@ namespace doris {\n \n const static std::string HEADER_JSON = \"application/json\";\n \n+const static std::string PERSIST_PARAM = \"persist\";\n+\n void UpdateConfigAction::handle(HttpRequest* req) {\n     LOG(INFO) << req->debug_string();\n \n     Status s;\n     std::string msg;\n-    if (req->params()->size() != 1) {\n+    // We only support set one config at a time, and along with a optional param \"persist\".\n+    // So the number of query params should at most be 2.\n+    if (req->params()->size() > 2 || req->params()->size() < 1) {\n         s = Status::InvalidArgument(\"\");\n         msg = \"Now only support to set a single config once, via 'config_name=new_value'\";\n     } else {\n-        DCHECK(req->params()->size() == 1);\n-        const std::string& config = req->params()->begin()->first;\n-        const std::string& new_value = req->params()->begin()->second;\n-        s = config::set_config(config, new_value);\n-        if (s.ok()) {\n-            LOG(INFO) << \"set_config \" << config << \"=\" << new_value << \" success\";\n-        } else {\n-            LOG(WARNING) << \"set_config \" << config << \"=\" << new_value << \" failed\";\n-            msg = strings::Substitute(\"set $0=$1 failed, reason: $2\", config, new_value,\n-                                      s.to_string());\n+        if (req->params()->size() == 1) {\n+            const std::string& config = req->params()->begin()->first;\n+            const std::string& new_value = req->params()->begin()->second;\n+            s = config::set_config(config, new_value, false);\n+            if (s.ok()) {\n+                LOG(INFO) << \"set_config \" << config << \"=\" << new_value << \" success\";\n+            } else {\n+                LOG(WARNING) << \"set_config \" << config << \"=\" << new_value << \" failed\";\n+                msg = strings::Substitute(\"set $0=$1 failed, reason: $2\", config, new_value,\n+                        s.to_string());\n+            }\n+        } else if (req->params()->size() == 2) {\n+            if (req->params()->find(PERSIST_PARAM) == req->params()->end()) {\n+                s = Status::InvalidArgument(\"\");\n+                msg = \"Now only support to set a single config once, via 'config_name=new_value'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTk3Ng==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502741976", "createdAt": "2020-10-10T03:54:53Z", "author": {"login": "morningman"}, "path": "be/src/http/action/update_config_action.cpp", "diffHunk": "@@ -38,25 +38,53 @@ namespace doris {\n \n const static std::string HEADER_JSON = \"application/json\";\n \n+const static std::string PERSIST_PARAM = \"persist\";\n+\n void UpdateConfigAction::handle(HttpRequest* req) {\n     LOG(INFO) << req->debug_string();\n \n     Status s;\n     std::string msg;\n-    if (req->params()->size() != 1) {\n+    // We only support set one config at a time, and along with a optional param \"persist\".\n+    // So the number of query params should at most be 2.\n+    if (req->params()->size() > 2 || req->params()->size() < 1) {\n         s = Status::InvalidArgument(\"\");\n         msg = \"Now only support to set a single config once, via 'config_name=new_value'\";\n     } else {\n-        DCHECK(req->params()->size() == 1);\n-        const std::string& config = req->params()->begin()->first;\n-        const std::string& new_value = req->params()->begin()->second;\n-        s = config::set_config(config, new_value);\n-        if (s.ok()) {\n-            LOG(INFO) << \"set_config \" << config << \"=\" << new_value << \" success\";\n-        } else {\n-            LOG(WARNING) << \"set_config \" << config << \"=\" << new_value << \" failed\";\n-            msg = strings::Substitute(\"set $0=$1 failed, reason: $2\", config, new_value,\n-                                      s.to_string());\n+        if (req->params()->size() == 1) {\n+            const std::string& config = req->params()->begin()->first;\n+            const std::string& new_value = req->params()->begin()->second;\n+            s = config::set_config(config, new_value, false);\n+            if (s.ok()) {\n+                LOG(INFO) << \"set_config \" << config << \"=\" << new_value << \" success\";\n+            } else {\n+                LOG(WARNING) << \"set_config \" << config << \"=\" << new_value << \" failed\";\n+                msg = strings::Substitute(\"set $0=$1 failed, reason: $2\", config, new_value,\n+                        s.to_string());\n+            }\n+        } else if (req->params()->size() == 2) {\n+            if (req->params()->find(PERSIST_PARAM) == req->params()->end()) {\n+                s = Status::InvalidArgument(\"\");\n+                msg = \"Now only support to set a single config once, via 'config_name=new_value'\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MDYxNg=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDQ0NDMzOnYy", "diffSide": "RIGHT", "path": "docs/en/administrator-guide/config/be_config.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0MTo0MFrOHe451A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo1NTo1OVrOHfc8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MTYzNg==", "bodyText": "... is used for recording ... ?", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502151636", "createdAt": "2020-10-09T02:41:40Z", "author": {"login": "acelyc111"}, "path": "docs/en/administrator-guide/config/be_config.md", "diffHunk": "@@ -30,51 +30,70 @@ under the License.\n \n This document mainly introduces the relevant configuration items of BE.\n \n+The BE configuration file `be.conf` is usually stored in the `conf/` directory of the BE deployment path. In version 0.14, another configuration file `be_custom.conf` will be introduced. The configuration file is used to record the configuration items that are dynamically configured and persisted by the user during operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MjA2NA==", "bodyText": "This is translated by Google Translator... So, I think it is correct ^^", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502742064", "createdAt": "2020-10-10T03:55:59Z", "author": {"login": "morningman"}, "path": "docs/en/administrator-guide/config/be_config.md", "diffHunk": "@@ -30,51 +30,70 @@ under the License.\n \n This document mainly introduces the relevant configuration items of BE.\n \n+The BE configuration file `be.conf` is usually stored in the `conf/` directory of the BE deployment path. In version 0.14, another configuration file `be_custom.conf` will be introduced. The configuration file is used to record the configuration items that are dynamically configured and persisted by the user during operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MTYzNg=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDQ0OTg5OnYy", "diffSide": "RIGHT", "path": "docs/en/administrator-guide/config/be_config.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0MzoxOVrOHe49aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0MzoxOVrOHe49aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MjU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persis=true'\n          \n          \n            \n                curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persist=true'", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502152555", "createdAt": "2020-10-09T02:43:19Z", "author": {"login": "acelyc111"}, "path": "docs/en/administrator-guide/config/be_config.md", "diffHunk": "@@ -30,51 +30,70 @@ under the License.\n \n This document mainly introduces the relevant configuration items of BE.\n \n+The BE configuration file `be.conf` is usually stored in the `conf/` directory of the BE deployment path. In version 0.14, another configuration file `be_custom.conf` will be introduced. The configuration file is used to record the configuration items that are dynamically configured and persisted by the user during operation.\n+\n+After the BE process is started, it will read the configuration items in `be.conf` first, and then read the configuration items in `be_custom.conf`. The configuration items in `be_custom.conf` will overwrite the same configuration items in `be.conf`.\n+\n ## View configuration items\n-(TODO)\n+\n+Users can view the current configuration items by visiting BE's web page:\n+\n+`http://be_host:be_webserver_port/varz`\n \n ## Set configuration items\n \n There are two ways to configure BE configuration items:\n \n 1. Static configuration\n \n-         Add and set configuration items in the `conf/be.conf` file. The configuration items in `be.conf` will be read when BE starts. Configuration items not in `be.conf` will use default values.\n+    Add and set configuration items in the `conf/be.conf` file. The configuration items in `be.conf` will be read when BE starts. Configuration items not in `be.conf` will use default values.\n \n 2. Dynamic configuration\n \n-         After BE starts, the configuration items can be dynamically set with the following commands.\n+    After BE starts, the configuration items can be dynamically set with the following commands.\n+\n+    ```\n+    curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'\n+    ```\n \n-         ```curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'```\n+    In version 0.13 and before, the configuration items modified in this way will become invalid after the BE process restarts. In 0.14 and later versions, the modified configuration can be persisted through the following command. The modified configuration items are stored in the `be_custom.conf` file.\n \n-         **Configuration items modified in this way will become invalid after the BE process restarts. **\n+    ```\n+    curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persis=true'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjEzODc2OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/config/be_config.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzowNDozM1rOHfI0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo1NjoyM1rOHfc8SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxMjM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persis=true'\n          \n          \n            \n            \tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persist=true'", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502412386", "createdAt": "2020-10-09T13:04:33Z", "author": {"login": "xy720"}, "path": "docs/zh-CN/administrator-guide/config/be_config.md", "diffHunk": "@@ -45,9 +52,15 @@ BE \u7684\u914d\u7f6e\u9879\u6709\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff1a\n \n \tBE \u542f\u52a8\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e0b\u547d\u4ee4\u52a8\u6001\u8bbe\u7f6e\u914d\u7f6e\u9879\u3002\n \n-\t```curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'```\n+\t```\n+\tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'\n+\t```\n \n-\t**\u901a\u8fc7\u8be5\u65b9\u5f0f\u4fee\u6539\u7684\u914d\u7f6e\u9879\u5c06\u5728 BE \u8fdb\u7a0b\u91cd\u542f\u540e\u5931\u6548\u3002**\n+\t\u5728 0.13 \u7248\u672c\u53ca\u4e4b\u524d\uff0c\u901a\u8fc7\u8be5\u65b9\u5f0f\u4fee\u6539\u7684\u914d\u7f6e\u9879\u5c06\u5728 BE \u8fdb\u7a0b\u91cd\u542f\u540e\u5931\u6548\u3002\u5728 0.14 \u53ca\u4e4b\u540e\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6301\u4e45\u5316\u4fee\u6539\u540e\u7684\u914d\u7f6e\u3002\u4fee\u6539\u540e\u7684\u914d\u7f6e\u9879\u5b58\u50a8\u5728 `be_custom.conf` \u6587\u4ef6\u4e2d\u3002\n+\t\n+\t```\n+\tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persis=true'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MjA4OA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502742088", "createdAt": "2020-10-10T03:56:23Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/config/be_config.md", "diffHunk": "@@ -45,9 +52,15 @@ BE \u7684\u914d\u7f6e\u9879\u6709\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff1a\n \n \tBE \u542f\u52a8\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e0b\u547d\u4ee4\u52a8\u6001\u8bbe\u7f6e\u914d\u7f6e\u9879\u3002\n \n-\t```curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'```\n+\t```\n+\tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'\n+\t```\n \n-\t**\u901a\u8fc7\u8be5\u65b9\u5f0f\u4fee\u6539\u7684\u914d\u7f6e\u9879\u5c06\u5728 BE \u8fdb\u7a0b\u91cd\u542f\u540e\u5931\u6548\u3002**\n+\t\u5728 0.13 \u7248\u672c\u53ca\u4e4b\u524d\uff0c\u901a\u8fc7\u8be5\u65b9\u5f0f\u4fee\u6539\u7684\u914d\u7f6e\u9879\u5c06\u5728 BE \u8fdb\u7a0b\u91cd\u542f\u540e\u5931\u6548\u3002\u5728 0.14 \u53ca\u4e4b\u540e\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6301\u4e45\u5316\u4fee\u6539\u540e\u7684\u914d\u7f6e\u3002\u4fee\u6539\u540e\u7684\u914d\u7f6e\u9879\u5b58\u50a8\u5728 `be_custom.conf` \u6587\u4ef6\u4e2d\u3002\n+\t\n+\t```\n+\tcurl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persis=true'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxMjM4Ng=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjE1MzA1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/common/ConfigBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzowODoyM1rOHfI9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDowMjozMFrOHfc96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxNDYwMg==", "bodyText": "I think users can edit this file if they need to.", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502414602", "createdAt": "2020-10-09T13:08:23Z", "author": {"login": "xy720"}, "path": "fe/fe-core/src/main/java/org/apache/doris/common/ConfigBase.java", "diffHunk": "@@ -284,4 +308,31 @@ public synchronized static boolean checkIsMasterOnly(String key) {\n \n         return anno.masterOnly();\n     }\n+\n+    // overwrite configs to customConfFile.\n+    // use synchronized to make sure only one thread modify this file\n+    public synchronized static void persistConfig(Map<String, String> customConf) throws IOException {\n+        File file = new File(customConfFile);\n+        if (!file.exists()) {\n+            file.createNewFile();\n+        } else {\n+            // clear the file content\n+            try (PrintWriter writer = new PrintWriter(file)) {\n+                writer.print(\"\");\n+            }\n+        }\n+\n+        Properties props = new Properties();\n+        props.load(new FileReader(customConfFile));\n+\n+        for (Map.Entry<String, String> entry : customConf.entrySet()) {\n+            props.setProperty(entry.getKey(), entry.getValue());\n+        }\n+\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            props.store(fos, \"THIS IS AN AUTO GENERATED CONFIG FILE. DO NOT EDIT IT!\\n\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MjUwNw==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/4704#discussion_r502742507", "createdAt": "2020-10-10T04:02:30Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/common/ConfigBase.java", "diffHunk": "@@ -284,4 +308,31 @@ public synchronized static boolean checkIsMasterOnly(String key) {\n \n         return anno.masterOnly();\n     }\n+\n+    // overwrite configs to customConfFile.\n+    // use synchronized to make sure only one thread modify this file\n+    public synchronized static void persistConfig(Map<String, String> customConf) throws IOException {\n+        File file = new File(customConfFile);\n+        if (!file.exists()) {\n+            file.createNewFile();\n+        } else {\n+            // clear the file content\n+            try (PrintWriter writer = new PrintWriter(file)) {\n+                writer.print(\"\");\n+            }\n+        }\n+\n+        Properties props = new Properties();\n+        props.load(new FileReader(customConfFile));\n+\n+        for (Map.Entry<String, String> entry : customConf.entrySet()) {\n+            props.setProperty(entry.getKey(), entry.getValue());\n+        }\n+\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            props.store(fos, \"THIS IS AN AUTO GENERATED CONFIG FILE. DO NOT EDIT IT!\\n\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxNDYwMg=="}, "originalCommit": {"oid": "02e5de2a4f9fc5da2f3341ed28096bceab284948"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 964, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}