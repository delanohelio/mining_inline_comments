{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDQ2NDY5", "number": 3453, "title": "Support simple transitivity on join predicate pushdown", "bodyText": "For #3452\nCurrent implement is very simply and conservative, because our query planner is error-prone.\nAfter we implement the new query planner, we could do this work by Predicate Equivalence Class and PredicatePushDown rule like presto.", "createdAt": "2020-05-02T12:43:48Z", "url": "https://github.com/apache/incubator-doris/pull/3453", "merged": true, "mergeCommit": {"oid": "caa7a07c70147ea74243a8ecf1955cd995e09aa4"}, "closed": true, "closedAt": "2020-05-04T07:32:20Z", "author": {"login": "kangkaisen"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdVeESAH2gAyNDEyNDQ2NDY5OmIxZDJkMDQ1NjNiODgzN2Q5OTExNDg0NDFhODVlOTk2YWJiNjQyNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd6ZGqAFqTQwNDc1OTcxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/b1d2d04563b8837d991148441a85e996abb64265", "committedDate": "2020-05-02T12:30:44Z", "message": "Support simple transitivity on join predicate pushdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTkxODEx", "url": "https://github.com/apache/incubator-doris/pull/3453#pullrequestreview-404591811", "createdAt": "2020-05-03T07:58:34Z", "commit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNzo1ODozNFrOGPps4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODowMDo0NVrOGPptyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTA1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);\n          \n          \n            \n                            LOG.debug(\"pushDownConjuncts: {}\", pushDownConjuncts);", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065058", "createdAt": "2020-05-03T07:58:34Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1347,6 +1349,45 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         if (scanNode instanceof OlapScanNode || scanNode instanceof EsScanNode) {\n             Map<String, PartitionColumnFilter> columnFilters = Maps.newHashMap();\n             List<Expr> conjuncts = analyzer.getUnassignedConjuncts(scanNode);\n+\n+            // push down join predicate\n+            List<Expr> pushDownConjuncts = Lists.newArrayList();\n+            TupleId tupleId = tblRef.getId();\n+            List<Expr> eqJoinPredicates = analyzer.getEqJoinConjuncts(tupleId);\n+            if (eqJoinPredicates != null) {\n+                // only inner and left outer join\n+                if ((tblRef.getJoinOp().isInnerJoin() || tblRef.getJoinOp().isLeftOuterJoin())) {\n+                    List<Expr> allConjuncts = analyzer.getConjuncts(analyzer.getAllTupleIds());\n+                    allConjuncts.removeAll(conjuncts);\n+                    for (Expr conjunct: allConjuncts) {\n+                        if (canPushDownPredicate(conjunct)) {\n+                            for (Expr eqJoinPredicate : eqJoinPredicates) {\n+                                // we can ensure slot is left node, because NormalizeBinaryPredicatesRule\n+                                SlotRef otherSlot = conjunct.getChild(0).unwrapSlotRef();\n+\n+                                // ensure the children for eqJoinPredicate both be SlotRef\n+                                if (eqJoinPredicate.getChild(0).unwrapSlotRef() == null || eqJoinPredicate.getChild(1).unwrapSlotRef() == null) {\n+                                    continue;\n+                                }\n+\n+                                SlotRef leftSlot = eqJoinPredicate.getChild(0).unwrapSlotRef();\n+                                SlotRef rightSlot = eqJoinPredicate.getChild(1).unwrapSlotRef();\n+\n+                                // example: t1.id = t2.id and t1.id = 1  => t2.id =1\n+                                if (otherSlot.isBound(leftSlot.getSlotId()) && rightSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, rightSlot));\n+                                } else if (otherSlot.isBound(rightSlot.getSlotId()) && leftSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, leftSlot));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ==", "bodyText": "Better not using static import", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065179", "createdAt": "2020-05-03T07:59:35Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -72,6 +72,8 @@\n import java.util.Map;\n import java.util.UUID;\n \n+import static org.apache.doris.analysis.Predicate.canPushDownPredicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA==", "bodyText": "Add comment for this method?", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065290", "createdAt": "2020-05-03T08:00:45Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1372,6 +1414,24 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         return scanNode;\n     }\n \n+    private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d2d04563b8837d991148441a85e996abb64265"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bafbdd599ec0aec1611987723165ca91d314698", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/5bafbdd599ec0aec1611987723165ca91d314698", "committedDate": "2020-05-04T02:30:10Z", "message": "Update for comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzU5NzE1", "url": "https://github.com/apache/incubator-doris/pull/3453#pullrequestreview-404759715", "createdAt": "2020-05-04T07:31:48Z", "commit": {"oid": "5bafbdd599ec0aec1611987723165ca91d314698"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2925, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}