{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjU2NDIw", "number": 2826, "title": "[UnitTest] Support starting mocked FE and BE process in unit test", "bodyText": "This CL implements a simulated FE process and a simulated BE service.\nYou can view their specific usage methods at\nfe/src/test/java/org/apache/doris/utframe/DemoTest.java\nAt the same time, I modified the configuration of the maven-surefire-plugin plugin,\nso that each unit test runs in a separate JVM, which can avoid conflicts caused by\nvarious singleton classes in FE.\nStarting a separate jvm for each unit test will bring about 30% extra time overhead.\nHowever, you can control the number of concurrency of unit tests by setting the forkCount\nconfiguration of the maven-surefire-plugin plugin in fe/pom.xml. The default configuration\nis still 1 for easy viewing of the output log. If set to 3, the entire FE unit test run time is about\n4 minutes.\nISSUE: #2825", "createdAt": "2020-01-31T16:13:29Z", "url": "https://github.com/apache/incubator-doris/pull/2826", "merged": true, "mergeCommit": {"oid": "bb4a7381ae7c48dcbe7576c2f3171e87208becce"}, "closed": true, "closedAt": "2020-02-03T13:17:59Z", "author": {"login": "morningman"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-_tJfAH2gAyMzY5NjU2NDIwOmI0Mjc4OWY1YzVjNmNjZTFhYjQ2YWU5YjViMTMwYjBjNDliNWE5ZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAsrycAFqTM1MjIzOTU3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b42789f5c5c6cce1ab46ae9b5b130b0c49b5a9d7", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/b42789f5c5c6cce1ab46ae9b5b130b0c49b5a9d7", "committedDate": "2020-01-29T06:11:34Z", "message": "first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02afe8ddd9f66ce999207a540ed75dbd81c76fe5", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/02afe8ddd9f66ce999207a540ed75dbd81c76fe5", "committedDate": "2020-01-29T16:15:03Z", "message": "run demo success"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1c47363c41c8e865384c326e36cfac8d9dbfed", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/fa1c47363c41c8e865384c326e36cfac8d9dbfed", "committedDate": "2020-01-30T08:44:39Z", "message": "second"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b5d7b3c1fe0ff1fa594cc0c89855da91e270d2", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/80b5d7b3c1fe0ff1fa594cc0c89855da91e270d2", "committedDate": "2020-01-30T09:57:39Z", "message": "port problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7d7ff647f9e0d3213935a710ea0abe2f9cad4a", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/6d7d7ff647f9e0d3213935a710ea0abe2f9cad4a", "committedDate": "2020-01-30T10:03:08Z", "message": "add run ut example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29770a72a899c13a141738c8deba8b730ec3f5cd", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/29770a72a899c13a141738c8deba8b730ec3f5cd", "committedDate": "2020-01-30T12:47:02Z", "message": "third"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa3c7896edb1b389caf40ef0c0d184dd86a2a9f", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/6fa3c7896edb1b389caf40ef0c0d184dd86a2a9f", "committedDate": "2020-01-30T13:20:41Z", "message": "4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b964eb968901865e8bda78024b1b1371b5c1b239", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/b964eb968901865e8bda78024b1b1371b5c1b239", "committedDate": "2020-01-30T15:48:56Z", "message": "change meta dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2aad73b8ac7e4aaa8459449fbe9e36aae817a47", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/c2aad73b8ac7e4aaa8459449fbe9e36aae817a47", "committedDate": "2020-01-31T15:45:30Z", "message": "modify pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/4125441f041b8537e4cafdd0fef112752d37a5f0", "committedDate": "2020-01-31T16:14:24Z", "message": "modify pom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDI3Mjg1", "url": "https://github.com/apache/incubator-doris/pull/2826#pullrequestreview-352027285", "createdAt": "2020-02-03T05:31:15Z", "commit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozMToxNVrOFkmuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMzozNFrOFknNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzUwMA==", "bodyText": "System.err", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373927500", "createdAt": "2020-02-03T05:31:15Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/PaloFe.java", "diffHunk": "@@ -51,25 +51,36 @@\n public class PaloFe {\n     private static final Logger LOG = LogManager.getLogger(PaloFe.class);\n \n-    // entrance for palo frontend\n+    public static final String DORIS_HOME_DIR = System.getenv(\"DORIS_HOME\");\n+    public static final String PID_DIR = System.getenv(\"PID_DIR\");\n+\n     public static void main(String[] args) {\n+        start(DORIS_HOME_DIR, PID_DIR, args);\n+    }\n+\n+    // entrance for doris frontend\n+    public static void start(String dorisHomeDir, String pidDir, String[] args) {\n+        if (Strings.isNullOrEmpty(dorisHomeDir)) {\n+            System.out.println(\"env DORIS_HOME is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // we already set these varialbes in constructor. but Catalog is a singleton class.\n          \n          \n            \n                    // we already set these variables in constructor. but Catalog is a singleton class.", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373928012", "createdAt": "2020-02-03T05:34:08Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -635,7 +642,23 @@ private void unlock() {\n         }\n     }\n \n+    public String getBdbDir() {\n+        return bdbDir;\n+    }\n+\n+    public String getImageDir() {\n+        return imageDir;\n+    }\n+\n     public void initialize(String[] args) throws Exception {\n+        // set meta dir first.\n+        // we already set these varialbes in constructor. but Catalog is a singleton class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTQ3MA==", "bodyText": "removed?", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373929470", "createdAt": "2020-02-03T05:42:57Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/qe/ResultReceiver.java", "diffHunk": "@@ -76,7 +76,9 @@ public RowBatch getNext(Status status) throws TException {\n                         throw new TimeoutException(\"query timeout\");\n                     }\n                     try {\n+                        LOG.debug(\"cmy before get next\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjQ2Nw==", "bodyText": "Use a uuid?", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373932467", "createdAt": "2020-02-03T05:59:42Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/AnotherDemoTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo is mainly used to confirm that \n+ * repeatedly starting FE and BE in 2 UnitTest will not cause conflict\n+ */\n+public class AnotherDemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/AnotherDemoTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNTM3Ng==", "bodyText": "getRandomPort  is duplicate with AnotherDemoTest. could move to UtFrameUtils", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373935376", "createdAt": "2020-02-03T06:13:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/DemoTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.alter.AlterJobV2;\n+import org.apache.doris.analysis.AlterTableStmt;\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo shows how to run unit test with mocked FE and BE.\n+ * It will\n+ *  1. start a mocked FE and a mocked BE.\n+ *  2. Create a database and a tbl.\n+ *  3. Make a schema change to tbl.\n+ *  4. send a query and get query plan\n+ */\n+public class DemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/DemoTest\";\n+\n+    @BeforeClass\n+    public static void beforeClass() throws EnvVarNotSetException, IOException,\n+            FeStartException, NotInitException, DdlException, InterruptedException {\n+        // get DORIS_HOME\n+        final String dorisHome = System.getenv(\"DORIS_HOME\");\n+        if (Strings.isNullOrEmpty(dorisHome)) {\n+            throw new EnvVarNotSetException(\"env DORIS_HOME is not set\");\n+        }\n+\n+        getRandomPort();\n+\n+        // start fe in \"DORIS_HOME/fe/mocked/\"\n+        MockedFrontend frontend = MockedFrontend.getInstance();\n+        Map<String, String> feConfMap = Maps.newHashMap();\n+        // set additional fe config\n+        feConfMap.put(\"http_port\", String.valueOf(fe_http_port));\n+        feConfMap.put(\"rpc_port\", String.valueOf(fe_rpc_port));\n+        feConfMap.put(\"query_port\", String.valueOf(fe_query_port));\n+        feConfMap.put(\"edit_log_port\", String.valueOf(fe_edit_log_port));\n+        feConfMap.put(\"tablet_create_timeout_second\", \"10\");\n+        frontend.init(dorisHome + \"/\" + runningDir, feConfMap);\n+        frontend.start(new String[0]);\n+\n+        // start be\n+        MockedBackend backend = MockedBackendFactory.createBackend(\"127.0.0.1\",\n+                be_heartbeat_port, be_thrift_port, be_brpc_port, be_http_port,\n+                new DefaultHeartbeatServiceImpl(be_thrift_port, be_http_port, be_brpc_port),\n+                new DefaultBeThriftServiceImpl(), new DefaultPBackendServiceImpl());\n+        backend.setFeAddress(new TNetworkAddress(\"127.0.0.1\", frontend.getRpcPort()));\n+        backend.start();\n+\n+        // add be\n+        List<Pair<String, Integer>> bes = Lists.newArrayList();\n+        bes.add(Pair.create(backend.getHost(), backend.getHeartbeatPort()));\n+        Catalog.getCurrentSystemInfo().addBackends(bes, false, \"default_cluster\");\n+\n+        // sleep to wait first heartbeat\n+        Thread.sleep(6000);\n+    }\n+\n+    // generate all port from between 20000 ~ 30000\n+    private static void getRandomPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8607ae05ee18873646a1fcd05c65a60efceb02a", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/c8607ae05ee18873646a1fcd05c65a60efceb02a", "committedDate": "2020-02-03T06:50:41Z", "message": "fix by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjM5NTc1", "url": "https://github.com/apache/incubator-doris/pull/2826#pullrequestreview-352239575", "createdAt": "2020-02-03T13:09:44Z", "commit": {"oid": "c8607ae05ee18873646a1fcd05c65a60efceb02a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3672, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}