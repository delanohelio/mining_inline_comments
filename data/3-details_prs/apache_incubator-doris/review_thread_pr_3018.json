{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjc0ODc2", "number": 3018, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDoxODoxMlrODkBlqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDoxODoxMlrODkBlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTAxMzU1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/MaterializedViewSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDoxODoxMlrOFwJeIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDo0NTowMVrOFwTgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMTEzNg==", "bodyText": "Please add a UT to cover this case.", "url": "https://github.com/apache/incubator-doris/pull/3018#discussion_r386031136", "createdAt": "2020-02-29T14:18:12Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/MaterializedViewSelector.java", "diffHunk": "@@ -279,16 +280,30 @@ private void checkCompensatingPredicates(Set<String> columnsInPredicates,\n      * @param candidateIndexIdToSchema\n      */\n \n-    private void checkGrouping(Set<String> columnsInGrouping, Map<Long, List<Column>> candidateIndexIdToSchema) {\n+    private void checkGrouping(Set<String> columnsInGrouping, Map<Long, List<Column>> candidateIndexIdToSchema,\n+            KeysType keysType) {\n         Iterator<Map.Entry<Long, List<Column>>> iterator = candidateIndexIdToSchema.entrySet().iterator();\n         while (iterator.hasNext()) {\n             Map.Entry<Long, List<Column>> entry = iterator.next();\n             Set<String> indexNonAggregatedColumnNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n             List<Column> candidateIndexSchema = entry.getValue();\n             candidateIndexSchema.stream().filter(column -> !column.isAggregated())\n                     .forEach(column -> indexNonAggregatedColumnNames.add(column.getName()));\n-            // When the candidate index is SPJ type, it passes the verification directly\n-            if (indexNonAggregatedColumnNames.size() == candidateIndexSchema.size()) {\n+            /*\n+            If there is no aggregated column in duplicate table, the index will be SPJ.\n+            For example:\n+                duplicate table (k1, k2, v1)\n+                mv index (k1, v1)\n+            When the candidate index is SPJ type, it passes the verification directly\n+\n+            If there is no aggregated column in aggregate index, the index will be deduplicate table.\n+            For example:\n+                aggregate table (k1, k2, v1 sum)\n+                mv index (k1, k2)\n+            This kind of index is SPJG which same as select k1, k2 from aggregate_table group by k1, k2.\n+            It also need to check the grouping column using following steps.\n+             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b922416edf0a4c74ca8b2c4f45bbd134b3dee16"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5NTUzNw==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3018#discussion_r386195537", "createdAt": "2020-03-02T04:45:01Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/planner/MaterializedViewSelector.java", "diffHunk": "@@ -279,16 +280,30 @@ private void checkCompensatingPredicates(Set<String> columnsInPredicates,\n      * @param candidateIndexIdToSchema\n      */\n \n-    private void checkGrouping(Set<String> columnsInGrouping, Map<Long, List<Column>> candidateIndexIdToSchema) {\n+    private void checkGrouping(Set<String> columnsInGrouping, Map<Long, List<Column>> candidateIndexIdToSchema,\n+            KeysType keysType) {\n         Iterator<Map.Entry<Long, List<Column>>> iterator = candidateIndexIdToSchema.entrySet().iterator();\n         while (iterator.hasNext()) {\n             Map.Entry<Long, List<Column>> entry = iterator.next();\n             Set<String> indexNonAggregatedColumnNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n             List<Column> candidateIndexSchema = entry.getValue();\n             candidateIndexSchema.stream().filter(column -> !column.isAggregated())\n                     .forEach(column -> indexNonAggregatedColumnNames.add(column.getName()));\n-            // When the candidate index is SPJ type, it passes the verification directly\n-            if (indexNonAggregatedColumnNames.size() == candidateIndexSchema.size()) {\n+            /*\n+            If there is no aggregated column in duplicate table, the index will be SPJ.\n+            For example:\n+                duplicate table (k1, k2, v1)\n+                mv index (k1, v1)\n+            When the candidate index is SPJ type, it passes the verification directly\n+\n+            If there is no aggregated column in aggregate index, the index will be deduplicate table.\n+            For example:\n+                aggregate table (k1, k2, v1 sum)\n+                mv index (k1, k2)\n+            This kind of index is SPJG which same as select k1, k2 from aggregate_table group by k1, k2.\n+            It also need to check the grouping column using following steps.\n+             */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMTEzNg=="}, "originalCommit": {"oid": "3b922416edf0a4c74ca8b2c4f45bbd134b3dee16"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2054, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}