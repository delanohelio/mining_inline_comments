{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTM2MjYw", "number": 3120, "title": "[Temp Partition] Support loading data into temp partitions", "bodyText": "Related issue: #2663, #2828.\nThis CL support loading data into specified temporary partitions.\nINSERT INTO tbl TEMPORARY PARTITIONS(tp1, tp2, ..) ....;\n\ncurl .... -H \"temporary_partition: tp1, tp, .. \"  ....\n\nLOAD LABEL db1.label1 (\nDATA INFILE(\"xxxx\") \nINTO TABLE `tbl2`\nTEMPORARY PARTITION(tp1, tp2, ...)\n...\n\nNOTICE: this CL change the FE meta version to 77.\nThere 3 major changes in this CL\nSyntax reorganization\nReorganized the syntax related to the specify-partitions. Removed some redundant syntax\ndefinitions, and unified the syntax related to the specify-partitions under one syntax entry.\nMeta refactor\nIn order to be able to support specifying temporary partitions,\nI made some changes to the way the partition information in the table is stored.\nPartition information is now organized as follows:\nThe following two maps are reserved in OlapTable for storing formal partitions:\n```\nidToPartition\nnameToPartition\n```\n\nUse the TempPartitions class for storing temporary partitions.\nAll the partition attributes of the formal partition and the temporary partition,\nsuch as the range, the number of replicas, and the storage medium, are all stored\nin the partitionInfo of the OlapTable.\nIn partitionInfo, we use two maps to store the range of formal partition\nand temporary partition:\n```\nidToRange\nidToTempRange\n```\n\nUse separate map is because the partition ranges of the formal partition and\nthe temporary partition may overlap. Separate map can more easily check the partition range.\nAll partition attributes except the partition range are stored using the same map,\nand the partition id is used as the map key.\nMethod to get partition\nA table may contain both formal and temporary partitions.\nThere are several methods to get the partition of a table.\nTypically divided into two categories:\n\nGet partition by id\nGet partition by name\n\nAccording to different requirements, the caller may want to obtain\na formal partition or a temporary partition. These methods are\ndescribed below in order to obtain the partition by using the correct method.\n\nGet by name\n\nThis type of request usually comes from a user with partition names. Such as\nselect * from tbl partition(p1);.\nThis type of request has clear information to indicate whether to obtain a\nformal or temporary partition.\nTherefore, we need to get the partition through this method:\ngetPartition(String partitionName, boolean isTemp)\nTo avoid modifying too much code, we leave the getPartition(String partitionName), which is same as:\ngetPartition(partitionName, false)\n\nGet by id\n\nThis type of request usually means that the previous step has obtained\ncertain partition ids in some way,\nso we only need to get the corresponding partition through this method:\ngetPartition(long partitionId).\nThis method will try to get both formal partitions and temporary partitions.\n\nGet all partition instances\n\nDepending on the requirements, the caller may want to obtain all formal\npartitions,\nall temporary partitions, or all partitions. Therefore we provide 3 methods,\nthe caller chooses according to needs.\ngetPartitions()\ngetTempPartitions()\ngetAllPartitions()", "createdAt": "2020-03-16T02:30:31Z", "url": "https://github.com/apache/incubator-doris/pull/3120", "merged": true, "mergeCommit": {"oid": "0f14408f1357c3df5f3376d6299bd56a773851b3"}, "closed": true, "closedAt": "2020-03-19T07:07:01Z", "author": {"login": "morningman"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNnAASAH2gAyMzg4OTM2MjYwOjEwNWYzN2UxMTBlMjBhMTE1NmY1MTg5ZjUyOWM3ZmUwZmNmZTdhZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPEA5ogFqTM3NzQxMzE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "105f37e110e20a1156f5189f529c7fe0fcfe7ae1", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/105f37e110e20a1156f5189f529c7fe0fcfe7ae1", "committedDate": "2020-03-14T15:53:24Z", "message": "first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f34a21e2ba98fe981cb51345e9a9e8c3cfe78f1", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/7f34a21e2ba98fe981cb51345e9a9e8c3cfe78f1", "committedDate": "2020-03-14T15:53:24Z", "message": "change meta version to 77"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3abb1666d17aa374899e6f78dba9f69f52fc590d", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/3abb1666d17aa374899e6f78dba9f69f52fc590d", "committedDate": "2020-03-15T09:52:22Z", "message": "2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afcd633d29f915042a27e050ccd0f7f9e3c33ab0", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/afcd633d29f915042a27e050ccd0f7f9e3c33ab0", "committedDate": "2020-03-15T15:20:48Z", "message": "3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40597440ca29fb2ecaf7adc411d9309d7075a91", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/f40597440ca29fb2ecaf7adc411d9309d7075a91", "committedDate": "2020-03-15T15:49:19Z", "message": "4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9d450c3111ead6b460df01930a57554ea03cf9", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/8c9d450c3111ead6b460df01930a57554ea03cf9", "committedDate": "2020-03-15T16:18:07Z", "message": "5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7944542561cf022e28b01b4719e5eb612f750352", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/7944542561cf022e28b01b4719e5eb612f750352", "committedDate": "2020-03-16T02:11:25Z", "message": "6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08fbf5b3d18fb7eb6b58492270518457d9768feb", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/08fbf5b3d18fb7eb6b58492270518457d9768feb", "committedDate": "2020-03-16T08:55:49Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8", "author": {"user": {"login": "morningman", "name": "Mingyu Chen"}}, "url": "https://github.com/apache/incubator-doris/commit/ec4f9b31ebee01b03a0fe213c53c0012341130b8", "committedDate": "2020-03-16T13:46:48Z", "message": "fix ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjM5NjAz", "url": "https://github.com/apache/incubator-doris/pull/3120#pullrequestreview-375239603", "createdAt": "2020-03-16T14:02:05Z", "commit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMjowNVrOF21eQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxNDo0NVrOF22Bog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MzUyMw==", "bodyText": "Could we encapsulate the following logic?\n PartitionNames partitionNames = tblRef.getPartitionNames();\n if (partitionNames != null) {\n            if (partitionNames.isTemp()) {\n                throw new AnalysisException(\"xxxx\");\n            }", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393043523", "createdAt": "2020-03-16T14:02:05Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/AdminRepairTableStmt.java", "diffHunk": "@@ -62,8 +63,12 @@ public void analyze(Analyzer analyzer) throws UserException {\n \n         tblRef.getName().setDb(dbName);\n \n-        if (tblRef.getPartitions() != null && !tblRef.getPartitions().isEmpty()) {\n-            partitions.addAll(tblRef.getPartitions());\n+        PartitionNames partitionNames = tblRef.getPartitionNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MjU3OA==", "bodyText": "Don't need to check again, we have checked in init method.", "url": "https://github.com/apache/incubator-doris/pull/3120#discussion_r393052578", "createdAt": "2020-03-16T14:14:45Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/planner/OlapTableSink.java", "diffHunk": "@@ -293,7 +293,11 @@ private TOlapTableLocationParam createLocation(OlapTable table) throws UserExcep\n         TOlapTableLocationParam locationParam = new TOlapTableLocationParam();\n         // BE id -> path hash\n         Multimap<Long, Long> allBePathsMap = HashMultimap.create();\n-        for (Partition partition : table.getPartitions()) {\n+        for (Partition partition : table.getAllPartitions()) {\n+            if (!partitionIds.isEmpty() && !partitionIds.contains(partition.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NDEzMTg2", "url": "https://github.com/apache/incubator-doris/pull/3120#pullrequestreview-377413186", "createdAt": "2020-03-19T04:15:33Z", "commit": {"oid": "ec4f9b31ebee01b03a0fe213c53c0012341130b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}