{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODk5MjUw", "number": 2650, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMDoxMlrODV5LMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMTozOVrODV5L3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgzNDQxOnYy", "diffSide": "RIGHT", "path": "LICENSE.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMDoxMlrOFaV-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMDoxMlrOFaV-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NzQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be/src/util/utf8_check.h: MIT license\n          \n          \n            \n            be/src/util/utf8_check.cpp: MIT license", "url": "https://github.com/apache/incubator-doris/pull/2650#discussion_r363167486", "createdAt": "2020-01-06T06:00:12Z", "author": {"login": "imay"}, "path": "LICENSE.txt", "diffHunk": "@@ -599,3 +599,26 @@ be/src/util/minizip/* :  Condition of use and distribution are the same than zli\n \n --------------------------------------------------------------------------------\n \n+be/src/util/utf8_check.h: MIT license", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6cac33ca026818743874e4010971495584166d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgzNjE0OnYy", "diffSide": "RIGHT", "path": "be/src/util/utf8_check.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMTozOVrOFaV_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjowMTozOVrOFaV_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NzczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            int utf8_naive(const char *data, int len);\n          \n          \n            \n            bool utf8_naive(const char *data, size_t len);", "url": "https://github.com/apache/incubator-doris/pull/2650#discussion_r363167731", "createdAt": "2020-01-06T06:01:39Z", "author": {"login": "imay"}, "path": "be/src/util/utf8_check.h", "diffHunk": "@@ -0,0 +1,33 @@\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef DORIS_BE_SRC_UTIL_UTF8_CHECK_H\n+#define DORIS_BE_SRC_UTIL_UTF8_CHECK_H\n+\n+#include <cstddef>\n+\n+namespace doris {\n+// check utf8 code using simd instructions\n+// Return true - success,  false fail\n+bool validate_utf8(const char *src, size_t len);\n+// chech utf8 use naive c++\n+// Return 0 - success,  >0 - index(1 based) of first error char\n+int utf8_naive(const char *data, int len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6cac33ca026818743874e4010971495584166d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2278, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}