{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTcxMjc0", "number": 4424, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODoxNlrOEa7cLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODo0N1rOEa7cuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjcyMzAwOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODoxNlrOHEpY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODoxNlrOHEpY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzNDQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // explicitly told\n          \n          \n            \n                            // respect user join hint", "url": "https://github.com/apache/incubator-doris/pull/4424#discussion_r474634489", "createdAt": "2020-08-21T11:18:16Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -361,13 +361,17 @@ private PlanFragment createHashJoinFragment(HashJoinNode node, PlanFragment righ\n         //   side to be partitioned for correctness)\n         // - and the expected size of the hash tbl doesn't exceed perNodeMemLimit\n         // we set partition join as default when broadcast join cost equals partition join cost\n-        if (node.getJoinOp() != JoinOperator.RIGHT_OUTER_JOIN\n-                && node.getJoinOp() != JoinOperator.FULL_OUTER_JOIN\n-                && (perNodeMemLimit == 0 || Math.round(\n-                (double) rhsDataSize * PlannerContext.HASH_TBL_SPACE_OVERHEAD) <= perNodeMemLimit)\n-                && (node.getInnerRef().isBroadcastJoin() || (!node.getInnerRef().isPartitionJoin()\n-                && isBroadcastCostSmaller(broadcastCost, partitionCost)))) {\n-            doBroadcast = true;\n+        if (node.getJoinOp() != JoinOperator.RIGHT_OUTER_JOIN && node.getJoinOp() != JoinOperator.FULL_OUTER_JOIN) {\n+            if (node.getInnerRef().isBroadcastJoin()) {\n+                // explicitly told", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e82d8ce8c68980285b510cc862f226170d9380"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjcyNDQwOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODo0N1rOHEpZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMToxODo0N1rOHEpZvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzNDY4Ng==", "bodyText": "Could move node.getInnerRef().isPartitionJoin() to first", "url": "https://github.com/apache/incubator-doris/pull/4424#discussion_r474634686", "createdAt": "2020-08-21T11:18:47Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -361,13 +361,17 @@ private PlanFragment createHashJoinFragment(HashJoinNode node, PlanFragment righ\n         //   side to be partitioned for correctness)\n         // - and the expected size of the hash tbl doesn't exceed perNodeMemLimit\n         // we set partition join as default when broadcast join cost equals partition join cost\n-        if (node.getJoinOp() != JoinOperator.RIGHT_OUTER_JOIN\n-                && node.getJoinOp() != JoinOperator.FULL_OUTER_JOIN\n-                && (perNodeMemLimit == 0 || Math.round(\n-                (double) rhsDataSize * PlannerContext.HASH_TBL_SPACE_OVERHEAD) <= perNodeMemLimit)\n-                && (node.getInnerRef().isBroadcastJoin() || (!node.getInnerRef().isPartitionJoin()\n-                && isBroadcastCostSmaller(broadcastCost, partitionCost)))) {\n-            doBroadcast = true;\n+        if (node.getJoinOp() != JoinOperator.RIGHT_OUTER_JOIN && node.getJoinOp() != JoinOperator.FULL_OUTER_JOIN) {\n+            if (node.getInnerRef().isBroadcastJoin()) {\n+                // explicitly told\n+                doBroadcast = true;\n+            } else if ((perNodeMemLimit == 0 ||\n+                        Math.round((double) rhsDataSize * PlannerContext.HASH_TBL_SPACE_OVERHEAD) <= perNodeMemLimit)\n+                    && (!node.getInnerRef().isPartitionJoin() && isBroadcastCostSmaller(broadcastCost, partitionCost))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e82d8ce8c68980285b510cc862f226170d9380"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1168, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}