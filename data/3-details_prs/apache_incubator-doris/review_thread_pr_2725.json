{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjYyOTM1", "number": 2725, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMzo1NzoyM1rODXC__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzozOTozNVrODXheTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDkyOTg5OnYy", "diffSide": "RIGHT", "path": "be/src/exprs/timestamp_functions.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMzo1NzoyM1rOFcJvzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDowNToxNlrOFcJ0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDE0MQ==", "bodyText": "remove it?", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365064141", "createdAt": "2020-01-10T03:57:23Z", "author": {"login": "kangkaisen"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -351,6 +351,92 @@ DateTimeVal TimestampFunctions::timestamp_time_op(\n     return new_ts_val;\n }\n \n+BigIntVal TimestampFunctions::years_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<YEAR>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::months_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<MONTH>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::weeks_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<WEEK>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::days_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<DAY>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::hours_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<HOUR>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::minutes_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<MINUTE>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::seconds_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<SECOND>(ctx, ts_val1, ts_val2);\n+}\n+\n+template <TimeUnit unit>\n+BigIntVal TimestampFunctions::timestamp_diff(FunctionContext* ctx, const DateTimeVal& ts_val2, const DateTimeVal& ts_val1) {\n+    std::cout << \"null\" << std::endl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NTMwNA==", "bodyText": "Sorry, I forget", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365065304", "createdAt": "2020-01-10T04:05:16Z", "author": {"login": "HangyuanLiu"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -351,6 +351,92 @@ DateTimeVal TimestampFunctions::timestamp_time_op(\n     return new_ts_val;\n }\n \n+BigIntVal TimestampFunctions::years_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<YEAR>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::months_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<MONTH>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::weeks_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<WEEK>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::days_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<DAY>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::hours_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<HOUR>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::minutes_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<MINUTE>(ctx, ts_val1, ts_val2);\n+}\n+\n+BigIntVal TimestampFunctions::seconds_diff(\n+        FunctionContext* ctx, const DateTimeVal& ts_val1, const DateTimeVal& ts_val2) {\n+    return timestamp_diff<SECOND>(ctx, ts_val1, ts_val2);\n+}\n+\n+template <TimeUnit unit>\n+BigIntVal TimestampFunctions::timestamp_diff(FunctionContext* ctx, const DateTimeVal& ts_val2, const DateTimeVal& ts_val1) {\n+    std::cout << \"null\" << std::endl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDE0MQ=="}, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDkzMjQ3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDowMDowMFrOFcJxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDowNToyM1rOFcJ0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDUyNw==", "bodyText": "remove this comment?", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365064527", "createdAt": "2020-01-10T04:00:00Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "diffHunk": "@@ -120,65 +120,142 @@ private Type fixType() {\n     @Override\n     public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         // Check if name of function call is date_sub or date_add.\n+        String funcOpName;\n         if (funcName != null) {\n-            if (funcName.toUpperCase().equals(\"DATE_ADD\")\n-                    || funcName.toUpperCase().equals(\"DAYS_ADD\")\n-                    || funcName.toUpperCase().equals(\"ADDDATE\")) {\n-                op = ArithmeticExpr.Operator.ADD;\n-            } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n-                    || funcName.toUpperCase().equals(\"DAYS_SUB\")\n-                    || funcName.toUpperCase().equals(\"SUBDATE\")) {\n-                op = ArithmeticExpr.Operator.SUBTRACT;\n+            if (funcName.equalsIgnoreCase(\"TIMESTAMPDIFF\")) {\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                // The first child must return a timestamp or null.\n+                if (!getChild(1).getType().isDateType() && !getChild(1).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 1);\n+                }\n+\n+                type = Type.BIGINT;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit, \"DIFF\");\n             } else {\n-                throw new AnalysisException(\"Encountered function name '\" + funcName\n-                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n-                        + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE'\"\n-                        + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                if (funcName.toUpperCase().equals(\"DATE_ADD\")\n+                        || funcName.toUpperCase().equals(\"DAYS_ADD\")\n+                        || funcName.toUpperCase().equals(\"ADDDATE\")\n+                        || funcName.toUpperCase().equals(\"TIMESTAMPADD\")) {\n+                    op = ArithmeticExpr.Operator.ADD;\n+                } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n+                        || funcName.toUpperCase().equals(\"DAYS_SUB\")\n+                        || funcName.toUpperCase().equals(\"SUBDATE\")) {\n+                    op = ArithmeticExpr.Operator.SUBTRACT;\n+                } else {\n+                    throw new AnalysisException(\"Encountered function name '\" + funcName\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n+                            + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE/TIMESTAMPADD'\"\n+                            + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                }\n+\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                if (!getChild(1).getType().isScalarType()) {\n+                    throw new AnalysisException(\"must be a scalar type.\");\n+                }\n+\n+                // The second child must be of type 'INT' or castable to it.\n+                if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                    if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                    }\n+                    castChild(Type.INT, 1);\n+                }\n+\n+                type = dateType;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                        (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+                // For the month interval, use the invisible special-case implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NTMyMg==", "bodyText": "Done", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365065322", "createdAt": "2020-01-10T04:05:23Z", "author": {"login": "HangyuanLiu"}, "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "diffHunk": "@@ -120,65 +120,142 @@ private Type fixType() {\n     @Override\n     public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         // Check if name of function call is date_sub or date_add.\n+        String funcOpName;\n         if (funcName != null) {\n-            if (funcName.toUpperCase().equals(\"DATE_ADD\")\n-                    || funcName.toUpperCase().equals(\"DAYS_ADD\")\n-                    || funcName.toUpperCase().equals(\"ADDDATE\")) {\n-                op = ArithmeticExpr.Operator.ADD;\n-            } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n-                    || funcName.toUpperCase().equals(\"DAYS_SUB\")\n-                    || funcName.toUpperCase().equals(\"SUBDATE\")) {\n-                op = ArithmeticExpr.Operator.SUBTRACT;\n+            if (funcName.equalsIgnoreCase(\"TIMESTAMPDIFF\")) {\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                // The first child must return a timestamp or null.\n+                if (!getChild(1).getType().isDateType() && !getChild(1).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 1);\n+                }\n+\n+                type = Type.BIGINT;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit, \"DIFF\");\n             } else {\n-                throw new AnalysisException(\"Encountered function name '\" + funcName\n-                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n-                        + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE'\"\n-                        + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                if (funcName.toUpperCase().equals(\"DATE_ADD\")\n+                        || funcName.toUpperCase().equals(\"DAYS_ADD\")\n+                        || funcName.toUpperCase().equals(\"ADDDATE\")\n+                        || funcName.toUpperCase().equals(\"TIMESTAMPADD\")) {\n+                    op = ArithmeticExpr.Operator.ADD;\n+                } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n+                        || funcName.toUpperCase().equals(\"DAYS_SUB\")\n+                        || funcName.toUpperCase().equals(\"SUBDATE\")) {\n+                    op = ArithmeticExpr.Operator.SUBTRACT;\n+                } else {\n+                    throw new AnalysisException(\"Encountered function name '\" + funcName\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n+                            + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE/TIMESTAMPADD'\"\n+                            + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                }\n+\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                if (!getChild(1).getType().isScalarType()) {\n+                    throw new AnalysisException(\"must be a scalar type.\");\n+                }\n+\n+                // The second child must be of type 'INT' or castable to it.\n+                if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                    if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                    }\n+                    castChild(Type.INT, 1);\n+                }\n+\n+                type = dateType;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                        (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+                // For the month interval, use the invisible special-case implementation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDUyNw=="}, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDkzMzk1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDowMToxMlrOFcJyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNDowNTozNlrOFcJ0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDc0MQ==", "bodyText": "fn is {} name is {} thie log should be remove or change to debug level.  There will be a lot of this log from doris 0.11", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365064741", "createdAt": "2020-01-10T04:01:12Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "diffHunk": "@@ -120,65 +120,142 @@ private Type fixType() {\n     @Override\n     public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         // Check if name of function call is date_sub or date_add.\n+        String funcOpName;\n         if (funcName != null) {\n-            if (funcName.toUpperCase().equals(\"DATE_ADD\")\n-                    || funcName.toUpperCase().equals(\"DAYS_ADD\")\n-                    || funcName.toUpperCase().equals(\"ADDDATE\")) {\n-                op = ArithmeticExpr.Operator.ADD;\n-            } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n-                    || funcName.toUpperCase().equals(\"DAYS_SUB\")\n-                    || funcName.toUpperCase().equals(\"SUBDATE\")) {\n-                op = ArithmeticExpr.Operator.SUBTRACT;\n+            if (funcName.equalsIgnoreCase(\"TIMESTAMPDIFF\")) {\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                // The first child must return a timestamp or null.\n+                if (!getChild(1).getType().isDateType() && !getChild(1).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 1);\n+                }\n+\n+                type = Type.BIGINT;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit, \"DIFF\");\n             } else {\n-                throw new AnalysisException(\"Encountered function name '\" + funcName\n-                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n-                        + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE'\"\n-                        + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                if (funcName.toUpperCase().equals(\"DATE_ADD\")\n+                        || funcName.toUpperCase().equals(\"DAYS_ADD\")\n+                        || funcName.toUpperCase().equals(\"ADDDATE\")\n+                        || funcName.toUpperCase().equals(\"TIMESTAMPADD\")) {\n+                    op = ArithmeticExpr.Operator.ADD;\n+                } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n+                        || funcName.toUpperCase().equals(\"DAYS_SUB\")\n+                        || funcName.toUpperCase().equals(\"SUBDATE\")) {\n+                    op = ArithmeticExpr.Operator.SUBTRACT;\n+                } else {\n+                    throw new AnalysisException(\"Encountered function name '\" + funcName\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n+                            + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE/TIMESTAMPADD'\"\n+                            + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                }\n+\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                if (!getChild(1).getType().isScalarType()) {\n+                    throw new AnalysisException(\"must be a scalar type.\");\n+                }\n+\n+                // The second child must be of type 'INT' or castable to it.\n+                if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                    if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                    }\n+                    castChild(Type.INT, 1);\n+                }\n+\n+                type = dateType;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                        (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+                // For the month interval, use the invisible special-case implementation.\n+                // \"ADD_MONTHS(t, m)\" by definition is different from \"t + INTERVAL m MONTHS\".\n+                // if (timeUnit == TimeUnit.MONTH) {\n+                //     funcOpName += \"_INTERVAL\";\n+                // }\n+            }\n+        } else {\n+            timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+            if (timeUnit == null) {\n+                throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n             }\n-        }\n-        timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n-        if (timeUnit == null) {\n-            throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n-                    + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n-        }\n \n-        Type dateType = fixType();\n-        if (dateType.isDate() && timeUnit.isDateTime()) {\n-            dateType = Type.DATETIME;\n-        }\n-        // The first child must return a timestamp or null.\n-        if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n-            if (!dateType.isValid()) {\n-                throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n-                        + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n-                        + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+            Type dateType = fixType();\n+            if (dateType.isDate() && timeUnit.isDateTime()) {\n+                dateType = Type.DATETIME;\n+            }\n+            // The first child must return a timestamp or null.\n+            if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                if (!dateType.isValid()) {\n+                    throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                            + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                            + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                }\n+                castChild(dateType, 0);\n             }\n-            castChild(dateType, 0);\n-        }\n \n-        if (!getChild(1).getType().isScalarType()) {\n-            throw new AnalysisException(\"must be a scalar type.\");\n-        }\n+            if (!getChild(1).getType().isScalarType()) {\n+                throw new AnalysisException(\"must be a scalar type.\");\n+            }\n \n-        // The second child must be of type 'INT' or castable to it.\n-        if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n-            if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n-                throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n-                        + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n-                        + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+            // The second child must be of type 'INT' or castable to it.\n+            if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                    throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                            + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                            + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                }\n+                castChild(Type.INT, 1);\n             }\n-            castChild(Type.INT, 1);\n-        }\n \n-        type = dateType;\n-        opcode = getOpCode();\n-        String funcOpName = String.format(\"%sS_%s\",  timeUnit,\n-                (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n-        // For the month interval, use the invisible special-case implementation.\n-        // \"ADD_MONTHS(t, m)\" by definition is different from \"t + INTERVAL m MONTHS\".\n-        // if (timeUnit == TimeUnit.MONTH) {\n-        //     funcOpName += \"_INTERVAL\";\n-        // }\n+            type = dateType;\n+            opcode = getOpCode();\n+            funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                    (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+        }\n \n         fn = getBuiltinFunction(analyzer, funcOpName.toLowerCase(),\n                 collectChildReturnTypes(), Function.CompareMode.IS_NONSTRICT_SUPERTYPE_OF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NTM1MA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365065350", "createdAt": "2020-01-10T04:05:36Z", "author": {"login": "HangyuanLiu"}, "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "diffHunk": "@@ -120,65 +120,142 @@ private Type fixType() {\n     @Override\n     public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         // Check if name of function call is date_sub or date_add.\n+        String funcOpName;\n         if (funcName != null) {\n-            if (funcName.toUpperCase().equals(\"DATE_ADD\")\n-                    || funcName.toUpperCase().equals(\"DAYS_ADD\")\n-                    || funcName.toUpperCase().equals(\"ADDDATE\")) {\n-                op = ArithmeticExpr.Operator.ADD;\n-            } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n-                    || funcName.toUpperCase().equals(\"DAYS_SUB\")\n-                    || funcName.toUpperCase().equals(\"SUBDATE\")) {\n-                op = ArithmeticExpr.Operator.SUBTRACT;\n+            if (funcName.equalsIgnoreCase(\"TIMESTAMPDIFF\")) {\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                // The first child must return a timestamp or null.\n+                if (!getChild(1).getType().isDateType() && !getChild(1).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 1);\n+                }\n+\n+                type = Type.BIGINT;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit, \"DIFF\");\n             } else {\n-                throw new AnalysisException(\"Encountered function name '\" + funcName\n-                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n-                        + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE'\"\n-                        + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                if (funcName.toUpperCase().equals(\"DATE_ADD\")\n+                        || funcName.toUpperCase().equals(\"DAYS_ADD\")\n+                        || funcName.toUpperCase().equals(\"ADDDATE\")\n+                        || funcName.toUpperCase().equals(\"TIMESTAMPADD\")) {\n+                    op = ArithmeticExpr.Operator.ADD;\n+                } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n+                        || funcName.toUpperCase().equals(\"DAYS_SUB\")\n+                        || funcName.toUpperCase().equals(\"SUBDATE\")) {\n+                    op = ArithmeticExpr.Operator.SUBTRACT;\n+                } else {\n+                    throw new AnalysisException(\"Encountered function name '\" + funcName\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'. \"\n+                            + \"Expected function name 'DATE_ADD/DAYS_ADD/ADDDATE/TIMESTAMPADD'\"\n+                            + \"or 'DATE_SUB/DAYS_SUB/SUBDATE\");\n+                }\n+\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }\n+\n+                if (!getChild(1).getType().isScalarType()) {\n+                    throw new AnalysisException(\"must be a scalar type.\");\n+                }\n+\n+                // The second child must be of type 'INT' or castable to it.\n+                if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                    if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                    }\n+                    castChild(Type.INT, 1);\n+                }\n+\n+                type = dateType;\n+                opcode = getOpCode();\n+                funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                        (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+                // For the month interval, use the invisible special-case implementation.\n+                // \"ADD_MONTHS(t, m)\" by definition is different from \"t + INTERVAL m MONTHS\".\n+                // if (timeUnit == TimeUnit.MONTH) {\n+                //     funcOpName += \"_INTERVAL\";\n+                // }\n+            }\n+        } else {\n+            timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+            if (timeUnit == null) {\n+                throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                        + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n             }\n-        }\n-        timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n-        if (timeUnit == null) {\n-            throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n-                    + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n-        }\n \n-        Type dateType = fixType();\n-        if (dateType.isDate() && timeUnit.isDateTime()) {\n-            dateType = Type.DATETIME;\n-        }\n-        // The first child must return a timestamp or null.\n-        if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n-            if (!dateType.isValid()) {\n-                throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n-                        + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n-                        + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+            Type dateType = fixType();\n+            if (dateType.isDate() && timeUnit.isDateTime()) {\n+                dateType = Type.DATETIME;\n+            }\n+            // The first child must return a timestamp or null.\n+            if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                if (!dateType.isValid()) {\n+                    throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                            + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                            + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                }\n+                castChild(dateType, 0);\n             }\n-            castChild(dateType, 0);\n-        }\n \n-        if (!getChild(1).getType().isScalarType()) {\n-            throw new AnalysisException(\"must be a scalar type.\");\n-        }\n+            if (!getChild(1).getType().isScalarType()) {\n+                throw new AnalysisException(\"must be a scalar type.\");\n+            }\n \n-        // The second child must be of type 'INT' or castable to it.\n-        if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n-            if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n-                throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n-                        + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n-                        + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+            // The second child must be of type 'INT' or castable to it.\n+            if (!getChild(1).getType().isScalarType(PrimitiveType.INT)) {\n+                if (!ScalarType.canCastTo((ScalarType) getChild(1).getType(), Type.INT)) {\n+                    throw new AnalysisException(\"Operand '\" + getChild(1).toSql()\n+                            + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                            + getChild(1).getType() + \"' which is incompatible with expected type 'INT'.\");\n+                }\n+                castChild(Type.INT, 1);\n             }\n-            castChild(Type.INT, 1);\n-        }\n \n-        type = dateType;\n-        opcode = getOpCode();\n-        String funcOpName = String.format(\"%sS_%s\",  timeUnit,\n-                (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n-        // For the month interval, use the invisible special-case implementation.\n-        // \"ADD_MONTHS(t, m)\" by definition is different from \"t + INTERVAL m MONTHS\".\n-        // if (timeUnit == TimeUnit.MONTH) {\n-        //     funcOpName += \"_INTERVAL\";\n-        // }\n+            type = dateType;\n+            opcode = getOpCode();\n+            funcOpName = String.format(\"%sS_%s\", timeUnit,\n+                    (op == ArithmeticExpr.Operator.ADD) ? \"ADD\" : \"SUB\");\n+        }\n \n         fn = getBuiltinFunction(analyzer, funcOpName.toLowerCase(),\n                 collectChildReturnTypes(), Function.CompareMode.IS_NONSTRICT_SUPERTYPE_OF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA2NDc0MQ=="}, "originalCommit": {"oid": "f5bd079a53cf6b6e0a38375fd58e95283ec90321"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzg5NjU0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/cup/sql_parser.cup", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMjo1ODozOVrOFclk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMjo1ODozOVrOFclk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUyMDExNw==", "bodyText": "should add this new keyword to keywords rule", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365520117", "createdAt": "2020-01-11T12:58:39Z", "author": {"login": "imay"}, "path": "fe/src/main/cup/sql_parser.cup", "diffHunk": "@@ -3779,8 +3783,29 @@ timestamp_arithmetic_expr ::=\n \n     RESULT = new TimestampArithmeticExpr(functionName.getFunction(), l.get(0), v, u);\n   :}\n+  | function_name:functionName LPAREN unit:u COMMA expr:e1 COMMA expr:e2 RPAREN\n+  {:\n+    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), e2, e1, u);\n+  :}\n   ;\n \n+unit ::=\n+    KW_YEAR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d576b34594911b5ac7d561c493df77c05b3ec"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzkwMTEyOnYy", "diffSide": "RIGHT", "path": "docs/documentation/cn/sql-reference/sql-functions/date-time-functions/timestampadd.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMzoxMToyNFrOFclnMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMzoxMToyNFrOFclnMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUyMDY4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # day\n          \n          \n            \n            # TIMESTAMPADD", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365520689", "createdAt": "2020-01-11T13:11:24Z", "author": {"login": "imay"}, "path": "docs/documentation/cn/sql-reference/sql-functions/date-time-functions/timestampadd.md", "diffHunk": "@@ -0,0 +1,52 @@\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# day", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d576b34594911b5ac7d561c493df77c05b3ec"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzkwMTIwOnYy", "diffSide": "RIGHT", "path": "docs/documentation/cn/sql-reference/sql-functions/date-time-functions/timestampdiff.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMzoxMTozN1rOFclnOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMzoxMTozN1rOFclnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUyMDY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # day\n          \n          \n            \n            # TIMESTAMPDIFF", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365520698", "createdAt": "2020-01-11T13:11:37Z", "author": {"login": "imay"}, "path": "docs/documentation/cn/sql-reference/sql-functions/date-time-functions/timestampdiff.md", "diffHunk": "@@ -0,0 +1,60 @@\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# day", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d576b34594911b5ac7d561c493df77c05b3ec"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTkyMjcwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzozOTozNVrOFc3I7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzozOTozNVrOFc3I7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwNzg1NA==", "bodyText": "seems that these codes are the same with others.\nCould you try to reduce these same code?", "url": "https://github.com/apache/incubator-doris/pull/2725#discussion_r365807854", "createdAt": "2020-01-13T13:39:35Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/TimestampArithmeticExpr.java", "diffHunk": "@@ -120,69 +120,141 @@ private Type fixType() {\n     @Override\n     public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         // Check if name of function call is date_sub or date_add.\n+        String funcOpName;\n         if (funcName != null) {\n-            if (funcName.toUpperCase().equals(\"DATE_ADD\")\n-                    || funcName.toUpperCase().equals(\"DAYS_ADD\")\n-                    || funcName.toUpperCase().equals(\"ADDDATE\")) {\n-                op = ArithmeticExpr.Operator.ADD;\n-            } else if (funcName.toUpperCase().equals(\"DATE_SUB\")\n-                    || funcName.toUpperCase().equals(\"DAYS_SUB\")\n-                    || funcName.toUpperCase().equals(\"SUBDATE\")) {\n-                op = ArithmeticExpr.Operator.SUBTRACT;\n+            if (funcName.equalsIgnoreCase(\"TIMESTAMPDIFF\")) {\n+                timeUnit = TIME_UNITS_MAP.get(timeUnitIdent.toUpperCase());\n+                if (timeUnit == null) {\n+                    throw new AnalysisException(\"Invalid time unit '\" + timeUnitIdent\n+                            + \"' in timestamp arithmetic expression '\" + toSql() + \"'.\");\n+                }\n+                Type dateType = fixType();\n+                if (dateType.isDate() && timeUnit.isDateTime()) {\n+                    dateType = Type.DATETIME;\n+                }\n+                // The first child must return a timestamp or null.\n+                if (!getChild(0).getType().isDateType() && !getChild(0).getType().isNull()) {\n+                    if (!dateType.isValid()) {\n+                        throw new AnalysisException(\"Operand '\" + getChild(0).toSql()\n+                                + \"' of timestamp arithmetic expression '\" + toSql() + \"' returns type '\"\n+                                + getChild(0).getType() + \"'. Expected type 'TIMESTAMP/DATE/DATETIME'.\");\n+                    }\n+                    castChild(dateType, 0);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afeaba2202af796189bedb6ddbabbbeb51de1094"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2327, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}