{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODA1Mjk2", "number": 3386, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMDozN1rOD1TbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1OTowMlrOD1UaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjE5NDUyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMDozN1rOGKrKJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMDozN1rOGKrKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NjA1Mw==", "bodyText": "Could add a comment to explain the usage of this class?", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413846053", "createdAt": "2020-04-23T14:30:37Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI4Mjg2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NjoxOVrOGKsAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NjoxOVrOGKsAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTg5OQ==", "bodyText": "Better define this 60 as a static field in frontend of the class", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413859899", "createdAt": "2020-04-23T14:46:19Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {\n+\n+    private static Map<String, ThreadPoolExecutor> nameToThreadPool = Maps.newConcurrentMap();\n+\n+    private static String[] poolMerticTypes = {\"pool_size\", \"active_thread_num\", \"task_in_queue\"};\n+\n+    public static void registerAllThreadPoolMetric() {\n+        for (Map.Entry<String, ThreadPoolExecutor> entry : nameToThreadPool.entrySet()) {\n+            registerThreadPoolMetric(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public static void registerThreadPoolMetric(String poolName, ThreadPoolExecutor threadPool) {\n+        for (String poolMetricType : poolMerticTypes) {\n+            GaugeMetric<Integer> gauge = new GaugeMetric<Integer>(\"thread_pool\", \"thread_pool statistics\") {\n+                @Override\n+                public Integer getValue() {\n+                    String metricType = this.getLabels().get(1).getValue();\n+                    switch (metricType) {\n+                        case \"pool_size\":\n+                            return threadPool.getPoolSize();\n+                        case \"active_thread_num\":\n+                            return threadPool.getActiveCount();\n+                        case \"task_in_queue\":\n+                            return threadPool.getQueue().size();\n+                        default:\n+                            return 0;\n+                    }\n+                }\n+            };\n+            gauge.addLabel(new MetricLabel(\"name\", poolName))\n+                    .addLabel(new MetricLabel(\"type\", poolMetricType));\n+            MetricRepo.addMetric(gauge);\n+        }\n+    }\n+\n+    public static ThreadPoolExecutor newDaemonCacheThreadPool(int maxNumThread, String poolName) {\n+        return newDaemonThreadPool(0, maxNumThread, 60L, TimeUnit.SECONDS, new SynchronousQueue(), new LogDiscardPolicy(poolName), poolName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjM1NTU4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/mysql/nio/NMysqlServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1OTowMlrOGKssbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjowOTowOVrOGLe4Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTIxNA==", "bodyText": "The origin taskService is not a daemon thread, does not matter?", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413871214", "createdAt": "2020-04-23T14:59:02Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/mysql/nio/NMysqlServer.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private AcceptingChannel<StreamConnection> server;\n \n     // default task service.\n-    private ExecutorService taskService = Executors.newCachedThreadPool((new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"doris-mysql-nio TASK\").build()));\n+    private ExecutorService taskService = ThreadPoolManager.newDaemonCacheThreadPool(Config.max_mysql_service_task_threads_num, \"doris-mysql-nio-pool\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MzM5MQ==", "bodyText": "It doesn't matter, because nio threads \"doris-mysql-nio\" are not daemon. for the whole fe jvm process, only when there are no non-daemon threads will cause jvm process exit", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r414693391", "createdAt": "2020-04-24T16:09:09Z", "author": {"login": "caiconghui"}, "path": "fe/src/main/java/org/apache/doris/mysql/nio/NMysqlServer.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private AcceptingChannel<StreamConnection> server;\n \n     // default task service.\n-    private ExecutorService taskService = Executors.newCachedThreadPool((new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"doris-mysql-nio TASK\").build()));\n+    private ExecutorService taskService = ThreadPoolManager.newDaemonCacheThreadPool(Config.max_mysql_service_task_threads_num, \"doris-mysql-nio-pool\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTIxNA=="}, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1677, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}