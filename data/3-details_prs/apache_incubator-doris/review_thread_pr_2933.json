{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NTcwMzEy", "number": 2933, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyMTo0OFrODgsOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyMTo0OFrODgsOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjA1NzAwOnYy", "diffSide": "RIGHT", "path": "be/src/olap/memtable_flush_executor.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyMTo0OFrOFrCD6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxOTozNFrOFrgayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Njg1OA==", "bodyText": "why not use const std::shared_ptr<MemTable>& to avoid a copy assignment?", "url": "https://github.com/apache/incubator-doris/pull/2933#discussion_r380666858", "createdAt": "2020-02-18T13:21:48Z", "author": {"login": "imay"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -35,15 +31,15 @@ std::ostream& operator<<(std::ostream& os, const FlushStatistic& stat) {\n }\n \n OLAPStatus FlushToken::submit(std::shared_ptr<MemTable> memtable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d869da287690e18ae57e666cae221296fe689b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MzY1OQ==", "bodyText": "After the submit() returns, the upper layer will immediately reset the memtable (let it be nullptr), and the lower thread pool may not yet start processing it. If a reference is used, when the thread pool starts to process this memtable, the corresponding object may have become invalid.", "url": "https://github.com/apache/incubator-doris/pull/2933#discussion_r380753659", "createdAt": "2020-02-18T15:40:37Z", "author": {"login": "lingbin"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -35,15 +31,15 @@ std::ostream& operator<<(std::ostream& os, const FlushStatistic& stat) {\n }\n \n OLAPStatus FlushToken::submit(std::shared_ptr<MemTable> memtable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Njg1OA=="}, "originalCommit": {"oid": "7d869da287690e18ae57e666cae221296fe689b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyNjE5OQ==", "bodyText": "std::bind below copies memtable, which will keep it valid in your mentioned situation. So I think it is OK to make the function's argument reference.", "url": "https://github.com/apache/incubator-doris/pull/2933#discussion_r381026199", "createdAt": "2020-02-19T01:11:30Z", "author": {"login": "imay"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -35,15 +31,15 @@ std::ostream& operator<<(std::ostream& os, const FlushStatistic& stat) {\n }\n \n OLAPStatus FlushToken::submit(std::shared_ptr<MemTable> memtable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Njg1OA=="}, "originalCommit": {"oid": "7d869da287690e18ae57e666cae221296fe689b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NDIzMw==", "bodyText": "Oh, I get you. I will change the param to a reference.", "url": "https://github.com/apache/incubator-doris/pull/2933#discussion_r381164233", "createdAt": "2020-02-19T09:19:34Z", "author": {"login": "lingbin"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -35,15 +31,15 @@ std::ostream& operator<<(std::ostream& os, const FlushStatistic& stat) {\n }\n \n OLAPStatus FlushToken::submit(std::shared_ptr<MemTable> memtable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Njg1OA=="}, "originalCommit": {"oid": "7d869da287690e18ae57e666cae221296fe689b6"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2256, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}