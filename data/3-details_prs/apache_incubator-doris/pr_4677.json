{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjc5NTQ4", "number": 4677, "title": "Support Bucket Shuffle Join", "bodyText": "issue:#4394\nProposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n[] Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at dev@doris.apache.org by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-09-27T06:49:21Z", "url": "https://github.com/apache/incubator-doris/pull/4677", "merged": true, "mergeCommit": {"oid": "04f26e4b7f9b929c9c713fb01e513f5c80b494c0"}, "closed": true, "closedAt": "2020-10-11T07:37:33Z", "author": {"login": "HappenLee"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdM5NBGAH2gAyNDkzNjc5NTQ4Ojg4Mjk5ODI0M2FkOGYxNzM5ZjQxZTViNjY1ZjA1YzM4N2UwNWVmYTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRKy90AFqTUwNjA5NzUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/882998243ad8f1739f41e5b665f05c387e05efa3", "committedDate": "2020-09-27T06:43:08Z", "message": "Support Bucket Shuffle Join.\n\nissue:#4394"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDc1MzY4", "url": "https://github.com/apache/incubator-doris/pull/4677#pullrequestreview-497075368", "createdAt": "2020-09-27T11:40:36Z", "commit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo0MDozNlrOHYm09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo1MjoxOVrOHYm4pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg==", "bodyText": "Why comment is fvn hash but code is crc32 hash?", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564022", "createdAt": "2020-09-27T11:40:36Z", "author": {"login": "kangkaisen"}, "path": "be/src/runtime/data_stream_sender.cpp", "diffHunk": "@@ -479,7 +495,30 @@ Status DataStreamSender::send(RuntimeState* state, RowBatch* batch) {\n                 hash_val = RawValue::get_hash_value_fvn(\n                     partition_val, ctx->root()->type(), hash_val);\n             }\n-            RETURN_IF_ERROR(_channels[hash_val % num_channels]->add_row(row));\n+            auto target_channel_id = hash_val % num_channels;\n+            RETURN_IF_ERROR(_channels[target_channel_id]->add_row(row));\n+        }\n+    } else if (_part_type == TPartitionType::BUCKET_SHFFULE_HASH_PARTITIONED) {\n+        // hash-partition batch's rows across channels\n+        int num_channels = _channel_shared_ptrs.size();\n+\n+        for (int i = 0; i < batch->num_rows(); ++i) {\n+            TupleRow* row = batch->get_row(i);\n+            size_t hash_val = 0;\n+\n+            for (auto ctx : _partition_expr_ctxs) {\n+                void* partition_val = ctx->get_value(row);\n+                // We can't use the crc hash function here because it does not result\n+                // in uncorrelated hashes with different seeds.  Instead we must use\n+                // fvn hash.\n+                // TODO: fix crc hash/GetHashValue()\n+                //hash_val = RawValue::get_hash_value_fvn(\n+                //    partition_val, ctx->root()->type(), hash_val);\n+                hash_val = RawValue::zlib_crc32(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDEwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket shuffle join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564103", "createdAt": "2020-09-27T11:41:36Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw==", "bodyText": "If you could abstract the query schedule strategy like Presto and refactor this class, which would be very great.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564967", "createdAt": "2020-09-27T11:52:19Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -783,13 +784,39 @@ private void computeFragmentExecParams() throws Exception {\n                         params.instanceExecParams.size() + destParams.perExchNumSenders.get(exchId.asInt()));\n             }\n \n-            // add destination host to this fragment's destination\n-            for (int j = 0; j < destParams.instanceExecParams.size(); ++j) {\n-                TPlanFragmentDestination dest = new TPlanFragmentDestination();\n-                dest.fragment_instance_id = destParams.instanceExecParams.get(j).instanceId;\n-                dest.server = toRpcHost(destParams.instanceExecParams.get(j).host);\n-                dest.setBrpcServer(toBrpcHost(destParams.instanceExecParams.get(j).host));\n-                params.destinations.add(dest);\n+            if (bucketShuffleJoinController.isBucketShuffleJoin(destFragment.getFragmentId().asInt())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d36cc45260b69e38ce8fa9a95c603a1d19dc31", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/05d36cc45260b69e38ce8fa9a95c603a1d19dc31", "committedDate": "2020-09-27T12:18:38Z", "message": "change some code comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDU5NDk2", "url": "https://github.com/apache/incubator-doris/pull/4677#pullrequestreview-497059496", "createdAt": "2020-09-27T07:38:39Z", "commit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzozODo0MFrOHYlcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwOToxMzoxM1rOHYl-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // bucket shuffle join is better than boradcast and shuffle join\n          \n          \n            \n                    // bucket shuffle join is better than broadcast and shuffle join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541353", "createdAt": "2020-09-27T07:38:40Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -390,6 +390,28 @@ private PlanFragment createHashJoinFragment(HashJoinNode node, PlanFragment righ\n             node.setColocate(false, reason.get(0));\n         }\n \n+        // bucket shuffle join is better than boradcast and shuffle join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541405", "createdAt": "2020-09-27T07:39:27Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTUyNQ==", "bodyText": "And I think if user specify [SHUFFLE] hint, we should try to do bucket shuffle too.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541525", "createdAt": "2020-09-27T07:40:33Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzEyMA==", "bodyText": "Comment is wrong", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543120", "createdAt": "2020-09-27T07:58:55Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543527", "createdAt": "2020-09-27T08:03:02Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode\n+        if (leftRoot instanceof OlapScanNode) {\n+            return canBucketShuffleJoin(node, leftRoot, rhsHashExprs);\n+        }\n+\n+        return false;\n+    }\n+\n+    //the join expr must contian left table distribute column\n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanNode leftRoot,\n+                                    List<Expr> rhsJoinExprs) {\n+        OlapScanNode leftScanNode = ((OlapScanNode) leftRoot);\n+\n+        //1 the left table must be only one partition\n+        if (leftScanNode.getSelectedPartitionIds().size() > 1) {\n+            return false;\n+        }\n+\n+        DistributionInfo leftDistribution = leftScanNode.getOlapTable().getDefaultDistributionInfo();\n+\n+        if (leftDistribution instanceof HashDistributionInfo ) {\n+            List<Column> leftDistributeColumns = ((HashDistributionInfo) leftDistribution).getDistributionColumns();\n+\n+            List<Column> leftJoinColumns = new ArrayList<>();\n+            List<Expr> rightExprs = new ArrayList<>();\n+            List<BinaryPredicate> eqJoinConjuncts = node.getEqJoinConjuncts();\n+\n+            for (BinaryPredicate eqJoinPredicate : eqJoinConjuncts) {\n+                Expr lhsJoinExpr = eqJoinPredicate.getChild(0);\n+                Expr rhsJoinExpr = eqJoinPredicate.getChild(1);\n+                if (lhsJoinExpr.unwrapSlotRef() == null || rhsJoinExpr.unwrapSlotRef() == null) {\n+                    continue;\n+                }\n+\n+                SlotDescriptor leftSlot = lhsJoinExpr.unwrapSlotRef().getDesc();\n+\n+                leftJoinColumns.add(leftSlot.getColumn());\n+                rightExprs.add(rhsJoinExpr);\n+            }\n+\n+            //2 the join columns should contains all left table distribute columns to enable bucket shuffle join\n+            for (Column distributeColumn : leftDistributeColumns) {\n+                int loc = leftJoinColumns.indexOf(distributeColumn);\n+                // TODO: now support bucket shuffle join when distribute column type different with\n+                // right expr type\n+                if (loc == -1 || !rightExprs.get(loc).getType().equals(distributeColumn.getType())) {\n+                    return false;\n+                }\n+                rhsJoinExprs.add(rightExprs.get(loc));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MDE5Mg==", "bodyText": "Add comment for this class", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495550192", "createdAt": "2020-09-27T09:13:13Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1399,6 +1429,175 @@ public boolean isDone() {\n \n     }\n \n+    class BucketShuffleJoinController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac5e79f50d989c40ebeed2d9521cbf3e58c87a0", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/5ac5e79f50d989c40ebeed2d9521cbf3e58c87a0", "committedDate": "2020-09-28T07:47:26Z", "message": "Revise some mistake comment and code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDk3NTEy", "url": "https://github.com/apache/incubator-doris/pull/4677#pullrequestreview-506097512", "createdAt": "2020-10-10T13:28:40Z", "commit": {"oid": "5ac5e79f50d989c40ebeed2d9521cbf3e58c87a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}