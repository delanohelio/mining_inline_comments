{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjY3Mjcz", "number": 3383, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNjowMVrOD1WnkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNzo0NVrOD1WrOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjcxNjk3OnYy", "diffSide": "RIGHT", "path": "be/src/exec/olap_scan_node.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNjowMVrOGKwFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowMzo1MVrOGLERyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjY3Ng==", "bodyText": "Can you tell the side effect of this operation? Will this thread hang if there is not enough thread resource?", "url": "https://github.com/apache/incubator-doris/pull/3383#discussion_r413926676", "createdAt": "2020-04-23T16:06:01Z", "author": {"login": "imay"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -1038,6 +1038,7 @@ Status OlapScanNode::normalize_binary_predicate(SlotDescriptor* slot, ColumnValu\n \n void OlapScanNode::transfer_thread(RuntimeState* state) {\n     // scanner open pushdown to scanThread\n+    state->resource_pool()->acquire_thread_token();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9e3893538fca148723287d6fdfdc3dda501e89"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NzYwOQ==", "bodyText": "Add this operation just to Make AverageThreadTokens more accurate\n\nAverageThreadTokens: 1.00\n\nDo not warry thread hang on this operation\u3002\nacquire_thread_token() just do a lightweight add operation without doing the really thread assignment\ninline void ThreadResourceMgr::ResourcePool::acquire_thread_token() {\n__sync_fetch_and_add(&_num_threads, 1);\n}\n@imay", "url": "https://github.com/apache/incubator-doris/pull/3383#discussion_r414257609", "createdAt": "2020-04-24T03:03:51Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -1038,6 +1038,7 @@ Status OlapScanNode::normalize_binary_predicate(SlotDescriptor* slot, ColumnValu\n \n void OlapScanNode::transfer_thread(RuntimeState* state) {\n     // scanner open pushdown to scanThread\n+    state->resource_pool()->acquire_thread_token();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjY3Ng=="}, "originalCommit": {"oid": "ac9e3893538fca148723287d6fdfdc3dda501e89"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjcyNjM0OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/runtime_state.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNzo0NVrOGKwKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowNzowMlrOGLEVqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyODA4Mw==", "bodyText": "If you add profile for this memory tracker, why not _instance_mem_tracker?", "url": "https://github.com/apache/incubator-doris/pull/3383#discussion_r413928083", "createdAt": "2020-04-23T16:07:45Z", "author": {"login": "imay"}, "path": "be/src/runtime/runtime_state.cpp", "diffHunk": "@@ -226,8 +226,12 @@ Status RuntimeState::init_mem_trackers(const TUniqueId& query_id) {\n \n     // _query_mem_tracker = MemTracker::get_query_mem_tracker(\n     //         query_id, bytes_limit, _exec_env->process_mem_tracker());\n+\n+    auto mem_tracker_counter = ADD_COUNTER(&_profile, \"MemoryLimit\", TUnit::BYTES);\n+    mem_tracker_counter->set(bytes_limit);\n+\n     _query_mem_tracker.reset(\n-            new MemTracker(bytes_limit, runtime_profile()->name(), _exec_env->process_mem_tracker()));\n+            new MemTracker(&_profile, bytes_limit, runtime_profile()->name(), _exec_env->process_mem_tracker()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9e3893538fca148723287d6fdfdc3dda501e89"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1ODYwMQ==", "bodyText": "yes\uff0cI check code\u3002the _instance_mem_tracker is more appropriate", "url": "https://github.com/apache/incubator-doris/pull/3383#discussion_r414258601", "createdAt": "2020-04-24T03:07:02Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/runtime_state.cpp", "diffHunk": "@@ -226,8 +226,12 @@ Status RuntimeState::init_mem_trackers(const TUniqueId& query_id) {\n \n     // _query_mem_tracker = MemTracker::get_query_mem_tracker(\n     //         query_id, bytes_limit, _exec_env->process_mem_tracker());\n+\n+    auto mem_tracker_counter = ADD_COUNTER(&_profile, \"MemoryLimit\", TUnit::BYTES);\n+    mem_tracker_counter->set(bytes_limit);\n+\n     _query_mem_tracker.reset(\n-            new MemTracker(bytes_limit, runtime_profile()->name(), _exec_env->process_mem_tracker()));\n+            new MemTracker(&_profile, bytes_limit, runtime_profile()->name(), _exec_env->process_mem_tracker()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyODA4Mw=="}, "originalCommit": {"oid": "ac9e3893538fca148723287d6fdfdc3dda501e89"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1675, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}