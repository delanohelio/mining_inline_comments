{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTYxNzI2", "number": 3081, "title": "[Dynamic Partition] Support for automatically drop partitions", "bodyText": "For #3080", "createdAt": "2020-03-11T09:00:56Z", "url": "https://github.com/apache/incubator-doris/pull/3081", "merged": true, "mergeCommit": {"oid": "3cff89df7fdab5cd596df2c1fe40ff75d943ff47"}, "closed": true, "closedAt": "2020-03-25T02:24:47Z", "author": {"login": "WingsGo"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMPxTUAH2gAyMzg2NTYxNzI2OjkzMjBjMGY1ZDQ0NWYzYWRiYzQ5NmVlMTA1NDYxNmI1Mzk0OTA2MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQp_JUgFqTM3OTk3MDM4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9320c0f5d445f3adbc496ee1054616b539490620", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/9320c0f5d445f3adbc496ee1054616b539490620", "committedDate": "2020-03-10T10:15:36Z", "message": "[Dynamic Partition]Support dynamic drop partition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c175ac84471194b4a85261f25781e3fdb1b863", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/33c175ac84471194b4a85261f25781e3fdb1b863", "committedDate": "2020-03-10T11:24:25Z", "message": "fix default start"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4592093a7c3f8e3b4c748d2c7874e9e44bfc1f88", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/4592093a7c3f8e3b4c748d2c7874e9e44bfc1f88", "committedDate": "2020-03-10T12:57:47Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bdc5acd9b0511431e202d810954329847407d0f", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/4bdc5acd9b0511431e202d810954329847407d0f", "committedDate": "2020-03-11T08:54:58Z", "message": "complete drop logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/5b7c26d4fe66900d49d0a552683110171d623a66", "committedDate": "2020-03-12T09:41:55Z", "message": "fix miss start property in alter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTQyODAy", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-374142802", "createdAt": "2020-03-13T09:09:53Z", "commit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowOTo1M1rOF18SYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNDo0OVrOF18bSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNjU5Mg==", "bodyText": "-3?", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392106592", "createdAt": "2020-03-13T09:09:53Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/persist/ModifyDynamicPartitionInfoTest.java", "diffHunk": "@@ -49,6 +49,7 @@ public void testNormal() throws IOException {\n         HashMap<String, String> properties = new HashMap<>();\n         properties.put(DynamicPartitionProperty.ENABLE, \"true\");\n         properties.put(DynamicPartitionProperty.TIME_UNIT, \"day\");\n+        properties.put(DynamicPartitionProperty.START, \"3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNjcxMA==", "bodyText": "-3", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392106710", "createdAt": "2020-03-13T09:10:08Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/catalog/TablePropertyTest.java", "diffHunk": "@@ -49,6 +49,7 @@ public void testNormal() throws IOException {\n         HashMap<String, String> properties = new HashMap<>();\n         properties.put(DynamicPartitionProperty.ENABLE, \"true\");\n         properties.put(DynamicPartitionProperty.TIME_UNIT, \"day\");\n+        properties.put(DynamicPartitionProperty.START, \"3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzcxNg==", "bodyText": "You could refer to QueryPlanTest, and create real table.", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392107716", "createdAt": "2020-03-13T09:12:14Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/catalog/DynamicPartitionTableTest.java", "diffHunk": "@@ -293,6 +294,50 @@ public void testMissTimeUnit(@Injectable SystemInfoService systemInfoService,\n         catalog.createTable(stmt);\n     }\n \n+    @Test\n+    public void testMissSTART(@Injectable SystemInfoService systemInfoService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNzg1Mw==", "bodyText": "Why add this file?", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392107853", "createdAt": "2020-03-13T09:12:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/service/Untitled-2.md", "diffHunk": "@@ -0,0 +1 @@\n+# 1 Master + 2 Follower", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODg3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConfField(mutable = false, masterOnly = true)\n          \n          \n            \n                @ConfField", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392108873", "createdAt": "2020-03-13T09:14:49Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/common/Config.java", "diffHunk": "@@ -981,7 +981,7 @@\n     /*\n      * Decide how often to check dynamic partition\n      */\n-    @ConfField(mutable = true, masterOnly = true)\n+    @ConfField(mutable = false, masterOnly = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzYyMzg2", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-374362386", "createdAt": "2020-03-13T14:50:43Z", "commit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MDo0M1rOF2GmjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MDo0M1rOF2GmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTU5Ng==", "bodyText": "the pattern should be:\ndb.readLock();\ntry {\n    OlapTable olapTable = (OlapTable) db.getTable(tableId);\n    .....\n} finally {\n    db.readUnlock();\n}", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r392275596", "createdAt": "2020-03-13T14:50:43Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -136,12 +245,15 @@ private void dynamicAddPartition() {\n                 iterator.remove();\n                 continue;\n             }\n-            String tableName;\n-            ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+\n             db.readLock();\n+            ArrayList<AddPartitionClause> addPartitionClauses;\n+            ArrayList<DropPartitionClause> dropPartitionClauses;\n+            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n+            String tableName;\n+            boolean skipAddPartition = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7c26d4fe66900d49d0a552683110171d623a66"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83648e4109e53ec672275e8185a9b8b663fadac3", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/83648e4109e53ec672275e8185a9b8b663fadac3", "committedDate": "2020-03-13T15:12:46Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2acca757b6f0d199cec93474e0275fbce7442c5", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/a2acca757b6f0d199cec93474e0275fbce7442c5", "committedDate": "2020-03-13T15:35:44Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b7ff050e0c99399aa96f5994d05fe688ac31f4", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/71b7ff050e0c99399aa96f5994d05fe688ac31f4", "committedDate": "2020-03-18T11:11:50Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad", "committedDate": "2020-03-19T03:29:22Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDk5MzMw", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-379099330", "createdAt": "2020-03-23T02:25:50Z", "commit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyNTo1MVrOF51PLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyODoyNVrOF51Q5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTM4OA==", "bodyText": "No need to get add partition clause is skipAddPartition is true.", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396185388", "createdAt": "2020-03-23T02:25:51Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -168,98 +281,62 @@ private void dynamicAddPartition() {\n                 try {\n                     partitionFormat = DynamicPartitionUtil.getPartitionFormat(partitionColumn);\n                 } catch (DdlException e) {\n-                    recordFailedMsg(olapTable.getName(), e.getMessage());\n+                    recordCreatePartitionFailedMsg(olapTable.getName(), e.getMessage());\n                     continue;\n                 }\n \n-                Calendar calendar = Calendar.getInstance();\n-                TableProperty tableProperty = olapTable.getTableProperty();\n-                DynamicPartitionProperty dynamicPartitionProperty = tableProperty.getDynamicPartitionProperty();\n-\n-                for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n-                    String dynamicPartitionPrefix = dynamicPartitionProperty.getPrefix();\n-                    String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i, (Calendar) calendar.clone(), partitionFormat);\n-                    String partitionName = dynamicPartitionPrefix + DynamicPartitionUtil.getFormattedPartitionName(prevBorder);\n-\n-                    // continue if partition already exists\n-                    String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n-                            i + 1, (Calendar) calendar.clone(), partitionFormat);\n-                    PartitionValue lowerValue = new PartitionValue(prevBorder);\n-                    PartitionValue upperValue = new PartitionValue(nextBorder);\n-                    PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n-                    RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n-                    boolean isPartitionExists = false;\n-                    Range<PartitionKey> addPartitionKeyRange = null;\n-                    try {\n-                        PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n-                        PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n-                        addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n-                    } catch (AnalysisException e) {\n-                        // keys.size is always equal to column.size, cannot reach this exception\n-                        LOG.error(\"Keys size is not equl to column size.\");\n-                        continue;\n-                    }\n-                    for (Range<PartitionKey> partitionKeyRange : info.getIdToRange().values()) {\n-                        // only support single column partition now\n-                        try {\n-                            RangeUtils.checkRangeIntersect(partitionKeyRange, addPartitionKeyRange);\n-                        } catch (DdlException e) {\n-                            isPartitionExists = true;\n-                            if (addPartitionKeyRange.equals(partitionKeyRange)) {\n-                                clearFailedMsg(olapTable.getName());\n-                            } else {\n-                                recordFailedMsg(olapTable.getName(), e.getMessage());\n-                            }\n-                            break;\n-                        }\n-                    }\n-                    if (isPartitionExists) {\n-                        continue;\n-                    }\n-\n-                    // construct partition desc\n-                    PartitionKeyDesc partitionKeyDesc = new PartitionKeyDesc(Collections.singletonList(lowerValue), Collections.singletonList(upperValue));\n-                    HashMap<String, String> partitionProperties = new HashMap<>(1);\n-                    partitionProperties.put(\"replication_num\", String.valueOf(DynamicPartitionUtil.estimateReplicateNum(olapTable)));\n-                    SingleRangePartitionDesc rangePartitionDesc = new SingleRangePartitionDesc(true, partitionName,\n-                            partitionKeyDesc, partitionProperties);\n-\n-                    // construct distribution desc\n-                    HashDistributionInfo hashDistributionInfo = (HashDistributionInfo) olapTable.getDefaultDistributionInfo();\n-                    List<String> distColumnNames = new ArrayList<>();\n-                    for (Column distributionColumn : hashDistributionInfo.getDistributionColumns()) {\n-                        distColumnNames.add(distributionColumn.getName());\n-                    }\n-                    DistributionDesc distributionDesc = new HashDistributionDesc(dynamicPartitionProperty.getBuckets(), distColumnNames);\n-\n-                    // add partition according to partition desc and distribution desc\n-                    addPartitionClauses.add(new AddPartitionClause(rangePartitionDesc, distributionDesc, null, false));\n-                }\n+                addPartitionClauses = getAddPartitionClause(olapTable, partitionColumn, partitionFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgyOQ==", "bodyText": "Do not use error level, error means fatal.\nAnd it better to add details in log, such as e.getMessage().\nSame suggest to the getDropPartitionClause()", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396185829", "createdAt": "2020-03-23T02:28:25Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -121,11 +123,118 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n         defaultRuntimeInfo.put(LAST_UPDATE_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(LAST_SCHEDULER_TIME, DEFAULT_RUNTIME_VALUE);\n         defaultRuntimeInfo.put(DYNAMIC_PARTITION_STATE, State.NORMAL.toString());\n-        defaultRuntimeInfo.put(MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(CREATE_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n+        defaultRuntimeInfo.put(DROP_PARTITION_MSG, DEFAULT_RUNTIME_VALUE);\n         return defaultRuntimeInfo;\n     }\n \n-    private void dynamicAddPartition() {\n+    private ArrayList<AddPartitionClause> getAddPartitionClause(OlapTable olapTable, Column partitionColumn, String partitionFormat) {\n+        ArrayList<AddPartitionClause> addPartitionClauses = new ArrayList<>();\n+        Calendar calendar = Calendar.getInstance();\n+        DynamicPartitionProperty dynamicPartitionProperty = olapTable.getTableProperty().getDynamicPartitionProperty();\n+        for (int i = 0; i <= dynamicPartitionProperty.getEnd(); i++) {\n+            String prevBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i, (Calendar) calendar.clone(), partitionFormat);\n+            // continue if partition already exists\n+            String nextBorder = DynamicPartitionUtil.getPartitionRange(dynamicPartitionProperty.getTimeUnit(),\n+                    i + 1, (Calendar) calendar.clone(), partitionFormat);\n+            PartitionValue lowerValue = new PartitionValue(prevBorder);\n+            PartitionValue upperValue = new PartitionValue(nextBorder);\n+            PartitionInfo partitionInfo = olapTable.getPartitionInfo();\n+            RangePartitionInfo info = (RangePartitionInfo) (partitionInfo);\n+            boolean isPartitionExists = false;\n+            Range<PartitionKey> addPartitionKeyRange;\n+            try {\n+                PartitionKey lowerBound = PartitionKey.createPartitionKey(Collections.singletonList(lowerValue), Collections.singletonList(partitionColumn));\n+                PartitionKey upperBound = PartitionKey.createPartitionKey(Collections.singletonList(upperValue), Collections.singletonList(partitionColumn));\n+                addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n+            } catch (AnalysisException e) {\n+                // keys.size is always equal to column.size, cannot reach this exception\n+                LOG.error(\"Keys size is not equal to column size.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793aa9ea8f7a1cf33d555d616ffb3c8e880c88ad"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3", "committedDate": "2020-03-23T04:25:08Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDY2NDQz", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-379466443", "createdAt": "2020-03-23T14:12:29Z", "commit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjoyOVrOF6HOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzozOVrOF6HRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());\n          \n          \n            \n                            LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396480004", "createdAt": "2020-03-23T14:12:29Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -150,7 +150,7 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n                 addPartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n             } catch (AnalysisException e) {\n                 // keys.size is always equal to column.size, cannot reach this exception\n-                LOG.error(\"Keys size is not equal to column size.\");\n+                LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDkxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());\n          \n          \n            \n                        LOG.warn(\"Keys size is not equal to column size. Error={}\", e.getMessage());", "url": "https://github.com/apache/incubator-doris/pull/3081#discussion_r396480911", "createdAt": "2020-03-23T14:13:39Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -211,7 +211,7 @@ public void createOrUpdateRuntimeInfo(String tableName, String key, String value\n             reservePartitionKeyRange = Range.closedOpen(lowerBound, upperBound);\n         } catch (AnalysisException e) {\n             // keys.size is always equal to column.size, cannot reach this exception\n-            LOG.error(\"Keys size is not equal to column size.\");\n+            LOG.warn(\"Keys size is not equal to column size. Error=\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2ee87ad2a9ea5f73d21636b408a1b5c36353cb3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df557ced76add264eb637204db5b37810104bff8", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/df557ced76add264eb637204db5b37810104bff8", "committedDate": "2020-03-23T14:21:49Z", "message": "fix error msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba8ffcdada1f1e4ea8bad071ec740a39cc552db7", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/ba8ffcdada1f1e4ea8bad071ec740a39cc552db7", "committedDate": "2020-03-23T14:23:31Z", "message": "Merge branch 'master' into add_auto_delete_partition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80e0bbea2803b0493778f66782ba719914331bb7", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/80e0bbea2803b0493778f66782ba719914331bb7", "committedDate": "2020-03-23T14:32:33Z", "message": "Merge branch 'add_auto_delete_partition' of github.com:WingsGo/incubator-doris into add_auto_delete_partition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba93d294bc316d8e5432414e3e79dd3e986a46e1", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/ba93d294bc316d8e5432414e3e79dd3e986a46e1", "committedDate": "2020-03-23T14:35:36Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDk0NDgy", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-379494482", "createdAt": "2020-03-23T14:41:26Z", "commit": {"oid": "ba93d294bc316d8e5432414e3e79dd3e986a46e1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8708c758d6a26c645b6e7f1b5cecf87d8f30df3b", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/8708c758d6a26c645b6e7f1b5cecf87d8f30df3b", "committedDate": "2020-03-24T00:04:43Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36bf515deca6ac0220590485445fe5de50f96202", "author": {"user": {"login": "WingsGo", "name": "WangCong"}}, "url": "https://github.com/apache/incubator-doris/commit/36bf515deca6ac0220590485445fe5de50f96202", "committedDate": "2020-03-24T00:04:58Z", "message": "Merge branch 'add_auto_delete_partition' of github.com:WingsGo/incubator-doris into add_auto_delete_partition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTcwMzgy", "url": "https://github.com/apache/incubator-doris/pull/3081#pullrequestreview-379970382", "createdAt": "2020-03-24T03:03:57Z", "commit": {"oid": "36bf515deca6ac0220590485445fe5de50f96202"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3556, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}