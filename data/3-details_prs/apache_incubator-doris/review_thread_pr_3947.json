{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5ODUwMzMz", "number": 3947, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo0MTozOFrOEJFltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo0NTozNlrOEJFpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTY0MjE1OnYy", "diffSide": "RIGHT", "path": "be/src/exprs/timestamp_functions.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo0MTozOFrOGpcRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0ODoyMVrOGphlmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODA5MQ==", "bodyText": "why \"+00:00\" modify to \"+0:00\"", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446108091", "createdAt": "2020-06-26T10:41:38Z", "author": {"login": "wutiangan"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -599,7 +673,7 @@ IntVal TimestampFunctions::to_unix(\n \n DateTimeVal TimestampFunctions::utc_timestamp(FunctionContext* context) {\n     DateTimeValue dtv;\n-    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+00:00\")) {\n+    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+0:00\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NTA5OQ==", "bodyText": "My bad, I will change it back.", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446195099", "createdAt": "2020-06-26T13:48:21Z", "author": {"login": "morningman"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -599,7 +673,7 @@ IntVal TimestampFunctions::to_unix(\n \n DateTimeVal TimestampFunctions::utc_timestamp(FunctionContext* context) {\n     DateTimeValue dtv;\n-    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+00:00\")) {\n+    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+0:00\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODA5MQ=="}, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTY0NjY3OnYy", "diffSide": "RIGHT", "path": "be/src/exprs/timestamp_functions.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo0MzoyN1rOGpcUeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0NzoyMFrOGphjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODc5NA==", "bodyText": "in old code, first invoke function \"compute_format_len\" , then invoke function \"convert_format\", but your call sequence is the opposite , is it matter?", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446108794", "createdAt": "2020-06-26T10:43:27Z", "author": {"login": "wutiangan"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -451,20 +451,79 @@ BigIntVal TimestampFunctions::timestamp_diff(FunctionContext* ctx, const DateTim\n     }\n }\n \n+void TimestampFunctions::format_prepare(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+\n+    if (scope != FunctionContext::FRAGMENT_LOCAL\n+            || context->get_num_args() < 2\n+            || context->get_arg_type(1)->type != doris_udf::FunctionContext::Type::TYPE_VARCHAR\n+            || !context->is_arg_constant(1)) {\n+        VLOG(10) << \"format_prepare returned\";\n+        return;\n+    }\n+\n+    FormatCtx* fc = new FormatCtx();\n+    context->set_function_state(scope, fc);\n+\n+    StringVal* format = reinterpret_cast<StringVal*>(context->get_constant_arg(1));\n+    if (UNLIKELY(format->is_null)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->fmt = convert_format(context, *format);\n+    int format_len = DateTimeValue::compute_format_len((const char*) fc->fmt.ptr, fc->fmt.len);\n+    if (UNLIKELY(format_len >= 128)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->is_valid = true;\n+    return;\n+}\n+\n+void TimestampFunctions::format_close(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+    if (scope != FunctionContext::FRAGMENT_LOCAL) {\n+        return;\n+    }\n+\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(context->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (fc != nullptr) {\n+        delete fc;\n+    }\n+}\n+\n StringVal TimestampFunctions::date_format(\n         FunctionContext* ctx, const DateTimeVal& ts_val, const StringVal& format) {\n     if (ts_val.is_null || format.is_null) {\n         return StringVal::null();\n     }\n+\n     DateTimeValue ts_value = DateTimeValue::from_datetime_val(ts_val);\n-    if (ts_value.compute_format_len((const char*)format.ptr, format.len) >= 128) {\n-        return StringVal::null();\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(ctx->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (UNLIKELY(fc == nullptr)) {\n+        // prepare phase failed, calculate at runtime\n+        StringVal new_fmt = convert_format(ctx, format);\n+        if (DateTimeValue::compute_format_len((const char*) new_fmt.ptr, new_fmt.len) >= 128) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NDU1MA==", "bodyText": "Doesn't matter, the old code's order is incorrect, but it doesn't matter, because compute_format_len will return < 128 in most cases.", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446194550", "createdAt": "2020-06-26T13:47:20Z", "author": {"login": "morningman"}, "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -451,20 +451,79 @@ BigIntVal TimestampFunctions::timestamp_diff(FunctionContext* ctx, const DateTim\n     }\n }\n \n+void TimestampFunctions::format_prepare(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+\n+    if (scope != FunctionContext::FRAGMENT_LOCAL\n+            || context->get_num_args() < 2\n+            || context->get_arg_type(1)->type != doris_udf::FunctionContext::Type::TYPE_VARCHAR\n+            || !context->is_arg_constant(1)) {\n+        VLOG(10) << \"format_prepare returned\";\n+        return;\n+    }\n+\n+    FormatCtx* fc = new FormatCtx();\n+    context->set_function_state(scope, fc);\n+\n+    StringVal* format = reinterpret_cast<StringVal*>(context->get_constant_arg(1));\n+    if (UNLIKELY(format->is_null)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->fmt = convert_format(context, *format);\n+    int format_len = DateTimeValue::compute_format_len((const char*) fc->fmt.ptr, fc->fmt.len);\n+    if (UNLIKELY(format_len >= 128)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->is_valid = true;\n+    return;\n+}\n+\n+void TimestampFunctions::format_close(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+    if (scope != FunctionContext::FRAGMENT_LOCAL) {\n+        return;\n+    }\n+\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(context->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (fc != nullptr) {\n+        delete fc;\n+    }\n+}\n+\n StringVal TimestampFunctions::date_format(\n         FunctionContext* ctx, const DateTimeVal& ts_val, const StringVal& format) {\n     if (ts_val.is_null || format.is_null) {\n         return StringVal::null();\n     }\n+\n     DateTimeValue ts_value = DateTimeValue::from_datetime_val(ts_val);\n-    if (ts_value.compute_format_len((const char*)format.ptr, format.len) >= 128) {\n-        return StringVal::null();\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(ctx->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (UNLIKELY(fc == nullptr)) {\n+        // prepare phase failed, calculate at runtime\n+        StringVal new_fmt = convert_format(ctx, format);\n+        if (DateTimeValue::compute_format_len((const char*) new_fmt.ptr, new_fmt.len) >= 128) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODc5NA=="}, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTY1MTY4OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/datetime_value.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo0NTozN1rOGpcXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNToyNVrOGpmwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwOTYwNQ==", "bodyText": "can ctz put it into cache like 'data foramt' function?", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446109605", "createdAt": "2020-06-26T10:45:37Z", "author": {"login": "wutiangan"}, "path": "be/src/runtime/datetime_value.cpp", "diffHunk": "@@ -1535,7 +1521,10 @@ bool DateTimeValue::unix_timestamp(int64_t* timestamp, const std::string& timezo\n     if (!find_cctz_time_zone(timezone, ctz)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTcwNg==", "bodyText": "It needs a thread safe cache.\nSince there is not much calls of find_cctz_time_zone(), I think we can improve it later.", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446279706", "createdAt": "2020-06-26T16:15:25Z", "author": {"login": "morningman"}, "path": "be/src/runtime/datetime_value.cpp", "diffHunk": "@@ -1535,7 +1521,10 @@ bool DateTimeValue::unix_timestamp(int64_t* timestamp, const std::string& timezo\n     if (!find_cctz_time_zone(timezone, ctz)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwOTYwNQ=="}, "originalCommit": {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1316, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}