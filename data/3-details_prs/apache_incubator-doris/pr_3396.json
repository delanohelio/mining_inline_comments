{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODY1NjI5", "number": 3396, "title": "(#3395)calculate 'case when expr' when possible", "bodyText": "(#3395)\ncalculate 'case when expr' when possible", "createdAt": "2020-04-25T07:30:02Z", "url": "https://github.com/apache/incubator-doris/pull/3396", "merged": true, "mergeCommit": {"oid": "d60bb81cb02bd12be6142c975ed78ecfcb5e518d"}, "closed": true, "closedAt": "2020-05-07T14:04:09Z", "author": {"login": "wangbo"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbA8MTgH2gAyNDA4ODY1NjI5OjgxOTBhNmM2OTgxN2QxOTI1NzNlMGE4NTdlNDAzZWQ3MzdlZTM5ZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce9xmqAFqTQwNzUwMjY5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8190a6c69817d192573e0a857e403ed737ee39da", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/8190a6c69817d192573e0a857e403ed737ee39da", "committedDate": "2020-04-25T07:27:47Z", "message": "(#3395)calculate 'case when expr' when possible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzY5NzY5", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-400369769", "createdAt": "2020-04-25T07:45:40Z", "commit": {"oid": "8190a6c69817d192573e0a857e403ed737ee39da"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "committedDate": "2020-04-25T13:58:47Z", "message": "add ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTI3OTkx", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-400927991", "createdAt": "2020-04-27T13:02:08Z", "commit": {"oid": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzowMjowOVrOGMh9yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzowMjowOVrOGMh9yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MjU4NQ==", "bodyText": "This is not right, the CaseExpr has multi child\n\noptional case expr\noptional list<when expr, then expr>\noptional else expr.\n\nThe following SQL will return wrong result after applying your rewrite rule:\nselect case when false then 2 when true then 3 else 0 end;\n\nExpect: 3, return 1.", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r415792585", "createdAt": "2020-04-27T13:02:09Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java", "diffHunk": "@@ -48,6 +50,12 @@\n \n     @Override\n     public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        // evaluate case when expr\n+        if (expr instanceof CaseExpr && expr.getChild(0) instanceof BoolLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/507bd161dbb30944a9fd3069b6e001e58c7274a3", "committedDate": "2020-04-29T05:24:55Z", "message": "1 support case when and case xxx when\n2 add ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzc4MjU1", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-402778255", "createdAt": "2020-04-29T15:23:30Z", "commit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyMzozMVrOGOENgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MToyMlrOGOFCqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjI0Mw==", "bodyText": "you could use org.apache.commons.lang3.StringUtils.containsIgnoreCase", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417402243", "createdAt": "2020-04-29T15:23:31Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {\n+        // basic test\n+        String caseWhenSql = \"select \"\n+                + \"case when date_format(now(),'%H%i')  < 123 then 1 else 0 end as col \"\n+                + \"from test.test1 \"\n+                + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n+        SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n+        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA==", "bodyText": "Don't need to add this method. you could use getSQLPlanOrErrorMsg method.", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404580", "createdAt": "2020-04-29T15:26:36Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDk5MA==", "bodyText": "Please move this test to ConstantExpressTest", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404990", "createdAt": "2020-04-29T15:27:06Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMDAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //pre return when the `when expr` can't be converted to constants\n          \n          \n            \n                    // Early return when the `when expr` can't be converted to constants", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417410004", "createdAt": "2020-04-29T15:33:27Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;\n+        int size = expr.getChildren().size() - 1;\n+        if (expr.hasCaseExpr()) {\n+            // just deal literal here\n+            // and avoid `float compute` in java,float should be dealt in be\n+            Expr caseChildExpr = expr.getChild(0);\n+            if (!caseChildExpr.isLiteral()\n+                    || caseChildExpr instanceof DecimalLiteral || caseChildExpr instanceof FloatLiteral) {\n+                return expr;\n+            }\n+            caseExpr = (LiteralExpr) expr.getChild(0);\n+            startIndex++;\n+            size--;\n+        } else {\n+            caseExpr = new BoolLiteral(true);\n+        }\n+\n+        if (expr.hasElseExpr) {\n+            size--;\n+        }\n+\n+        //pre return when the `when expr` can't be converted to constants", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTg1MA==", "bodyText": "would better rename startIndex  and size .\nThe size compute logic seems not consistent with BE \uff1f\n        int loop_start = has_case_expr() ? 1 : 0; \\\n        int loop_end = (has_else_expr()) ? num_children - 1 : num_children; \\", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417415850", "createdAt": "2020-04-29T15:41:22Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd9bedd5801e10b039cddcaaa241900750764777", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/cd9bedd5801e10b039cddcaaa241900750764777", "committedDate": "2020-04-30T05:31:00Z", "message": "1 support skip null\n2 add more ut\n3 fix logic bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "committedDate": "2020-05-02T08:10:43Z", "message": "1 use UtFrameUtils.getSQLPlanOrErrorMsg to check plan\n2 clone a new expr when return CaseExpr which has been changed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTI1OTQ5", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-404525949", "createdAt": "2020-05-02T12:51:10Z", "commit": {"oid": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjo1MToxMFrOGPjAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjo1MToxMFrOGPjAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NTM5MQ==", "bodyText": "These two methods could also be removed?", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r418955391", "createdAt": "2020-05-02T12:51:10Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java", "diffHunk": "@@ -96,6 +100,34 @@ public static StatementBase parseAndAnalyzeStmt(String originStmt, ConnectContex\n         return statementBase;\n     }\n \n+    public static StatementBase rewriteStmt(StatementBase stmt, ConnectContext ctx) throws AnalysisException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "committedDate": "2020-05-03T05:39:32Z", "message": "remove useless method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91302dea19c50983e39e4218b29b9b08e73b10b0", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/91302dea19c50983e39e4218b29b9b08e73b10b0", "committedDate": "2020-05-03T05:34:09Z", "message": "remove useless method"}, "afterCommit": {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "committedDate": "2020-05-03T05:39:32Z", "message": "remove useless method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Njc5OTkx", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-404679991", "createdAt": "2020-05-04T01:33:38Z", "commit": {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b7602417d3cd825caa356767f266352060339c", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/44b7602417d3cd825caa356767f266352060339c", "committedDate": "2020-05-05T06:08:19Z", "message": "[UT] Fix UT bug (#3456)\n\nSSD cool downtime shouldn't be fix time in UT;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "committedDate": "2020-05-05T06:13:19Z", "message": "Merge branch 'upstream_master' into eval_case_when_expr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Nzc1NjI3", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-405775627", "createdAt": "2020-05-05T13:16:00Z", "commit": {"oid": "b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb256e9d73d2cbd142e811e07806bf9a92038b6e", "author": {"user": {"login": "wangbo", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/bb256e9d73d2cbd142e811e07806bf9a92038b6e", "committedDate": "2020-05-06T12:57:20Z", "message": "Merge branch 'upstream_master' into eval_case_when_expr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTAyNjk1", "url": "https://github.com/apache/incubator-doris/pull/3396#pullrequestreview-407502695", "createdAt": "2020-05-07T14:02:12Z", "commit": {"oid": "bb256e9d73d2cbd142e811e07806bf9a92038b6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}