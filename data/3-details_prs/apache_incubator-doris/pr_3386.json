{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODA1Mjk2", "number": 3386, "title": "User ThreadPoolManager to create threadPool and add some prothemus metric about pool", "bodyText": "This PR to to resolve the problem that the usage of CachedPool or FixedThreadPool which not limit thread num or blocked task num  may cause jvm process crashed due to too much thread or oom, we must construct threadpool explicitly, and know the runtime state about threadpool.", "createdAt": "2020-04-23T09:52:01Z", "url": "https://github.com/apache/incubator-doris/pull/3386", "merged": true, "mergeCommit": {"oid": "42d14028a0f543e3f8dfec1d9c33cd25d82188a6"}, "closed": true, "closedAt": "2020-04-25T07:57:15Z", "author": {"login": "caiconghui"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaHPUjgH2gAyNDA3ODA1Mjk2OjI2YjFhMmU2NWMxY2I2ZDYyZGVkNWU0MTQwN2ZhYjQ2MDJkMDgzNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbBWULgFqTQwMDM3MDQ0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26b1a2e65c1cb6d62ded5e41407fab4602d08341", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/26b1a2e65c1cb6d62ded5e41407fab4602d08341", "committedDate": "2020-04-22T12:14:11Z", "message": "Support construct thread pool by ThreadPoolManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01192021a6cef5fd5e646670be09a6b7e44e7d8", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/f01192021a6cef5fd5e646670be09a6b7e44e7d8", "committedDate": "2020-04-22T14:53:38Z", "message": "Support prometheus metrics for thread-pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9360430e20e222f8a5070c102b28b1c6ff625a29", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/9360430e20e222f8a5070c102b28b1c6ff625a29", "committedDate": "2020-04-22T15:36:56Z", "message": "Add unittest for ThreadPoolManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27520cadb65de6b4fcf30d8947a9d3a20438935e", "author": {"user": {"login": "caiconghui", "name": "caiconghui"}}, "url": "https://github.com/apache/incubator-doris/commit/27520cadb65de6b4fcf30d8947a9d3a20438935e", "committedDate": "2020-04-22T16:29:57Z", "message": "Add unittest for ThreadPoolManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/3962ee2814ea06e50346d3fca381f0ae13b1d849", "committedDate": "2020-04-23T08:40:20Z", "message": "fix regiter metric error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTU3MTUx", "url": "https://github.com/apache/incubator-doris/pull/3386#pullrequestreview-399157151", "createdAt": "2020-04-23T14:30:37Z", "commit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMDozN1rOGKrKJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMDozN1rOGKrKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NjA1Mw==", "bodyText": "Could add a comment to explain the usage of this class?", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413846053", "createdAt": "2020-04-23T14:30:37Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb22e27704f2f4f2712aaeedf03e31daa211ccc9", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/cb22e27704f2f4f2712aaeedf03e31daa211ccc9", "committedDate": "2020-04-24T03:14:19Z", "message": "Add a comment to explain the usage of ThreadPoolManager class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a7480d3564f2a14b8d1132c493329cd80bbda7", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/b5a7480d3564f2a14b8d1132c493329cd80bbda7", "committedDate": "2020-04-24T03:19:20Z", "message": "fix some typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTczMzI4", "url": "https://github.com/apache/incubator-doris/pull/3386#pullrequestreview-399173328", "createdAt": "2020-04-23T14:46:19Z", "commit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NjoxOVrOGKsAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1OTowMlrOGKssbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTg5OQ==", "bodyText": "Better define this 60 as a static field in frontend of the class", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413859899", "createdAt": "2020-04-23T14:46:19Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {\n+\n+    private static Map<String, ThreadPoolExecutor> nameToThreadPool = Maps.newConcurrentMap();\n+\n+    private static String[] poolMerticTypes = {\"pool_size\", \"active_thread_num\", \"task_in_queue\"};\n+\n+    public static void registerAllThreadPoolMetric() {\n+        for (Map.Entry<String, ThreadPoolExecutor> entry : nameToThreadPool.entrySet()) {\n+            registerThreadPoolMetric(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public static void registerThreadPoolMetric(String poolName, ThreadPoolExecutor threadPool) {\n+        for (String poolMetricType : poolMerticTypes) {\n+            GaugeMetric<Integer> gauge = new GaugeMetric<Integer>(\"thread_pool\", \"thread_pool statistics\") {\n+                @Override\n+                public Integer getValue() {\n+                    String metricType = this.getLabels().get(1).getValue();\n+                    switch (metricType) {\n+                        case \"pool_size\":\n+                            return threadPool.getPoolSize();\n+                        case \"active_thread_num\":\n+                            return threadPool.getActiveCount();\n+                        case \"task_in_queue\":\n+                            return threadPool.getQueue().size();\n+                        default:\n+                            return 0;\n+                    }\n+                }\n+            };\n+            gauge.addLabel(new MetricLabel(\"name\", poolName))\n+                    .addLabel(new MetricLabel(\"type\", poolMetricType));\n+            MetricRepo.addMetric(gauge);\n+        }\n+    }\n+\n+    public static ThreadPoolExecutor newDaemonCacheThreadPool(int maxNumThread, String poolName) {\n+        return newDaemonThreadPool(0, maxNumThread, 60L, TimeUnit.SECONDS, new SynchronousQueue(), new LogDiscardPolicy(poolName), poolName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTIxNA==", "bodyText": "The origin taskService is not a daemon thread, does not matter?", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413871214", "createdAt": "2020-04-23T14:59:02Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/mysql/nio/NMysqlServer.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private AcceptingChannel<StreamConnection> server;\n \n     // default task service.\n-    private ExecutorService taskService = Executors.newCachedThreadPool((new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"doris-mysql-nio TASK\").build()));\n+    private ExecutorService taskService = ThreadPoolManager.newDaemonCacheThreadPool(Config.max_mysql_service_task_threads_num, \"doris-mysql-nio-pool\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15b8a6f99c85c5ddde5cdd6e0415ba33ce52542", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/d15b8a6f99c85c5ddde5cdd6e0415ba33ce52542", "committedDate": "2020-04-24T14:32:43Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6bf01b9902624102297e9e7da841b698acfa72", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/fe6bf01b9902624102297e9e7da841b698acfa72", "committedDate": "2020-04-24T14:33:31Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzcwNDQy", "url": "https://github.com/apache/incubator-doris/pull/3386#pullrequestreview-400370442", "createdAt": "2020-04-25T07:56:19Z", "commit": {"oid": "fe6bf01b9902624102297e9e7da841b698acfa72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2856, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}