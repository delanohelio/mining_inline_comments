{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTM3Mjc2", "number": 5158, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzoyNToxMFrOFJs5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzozNjoxOVrOFJtAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE3MDg2OnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzoyNToxMFrOIMIzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODozMDoxMVrOIMJ3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5Nzk1Mg==", "bodyText": "There is a case that disable_storage_page_cache  is true at first, then changed to false, will the memory used by cache has no chance to free?", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549597952", "createdAt": "2020-12-29T07:25:10Z", "author": {"login": "acelyc111"}, "path": "be/src/common/config.h", "diffHunk": "@@ -256,21 +222,18 @@ CONF_Int32(file_descriptor_cache_capacity, \"32768\");\n // modify them upon necessity\n CONF_Int32(min_file_descriptor_number, \"60000\");\n CONF_Int64(index_stream_cache_capacity, \"10737418240\");\n-// CONF_Int64(max_packed_row_block_size, \"20971520\");\n \n // Cache for storage page size\n CONF_String(storage_page_cache_limit, \"20%\");\n // whether to disable page cache feature in storage\n-CONF_Bool(disable_storage_page_cache, \"false\");\n+CONF_mBool(disable_storage_page_cache, \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTU1MQ==", "bodyText": "The config disable_storage_page_cacheis not used to close cache but to choose whether to use the cache during read.  So the memory used by cache will not be freed.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549615551", "createdAt": "2020-12-29T08:30:11Z", "author": {"login": "weizuo93"}, "path": "be/src/common/config.h", "diffHunk": "@@ -256,21 +222,18 @@ CONF_Int32(file_descriptor_cache_capacity, \"32768\");\n // modify them upon necessity\n CONF_Int32(min_file_descriptor_number, \"60000\");\n CONF_Int64(index_stream_cache_capacity, \"10737418240\");\n-// CONF_Int64(max_packed_row_block_size, \"20971520\");\n \n // Cache for storage page size\n CONF_String(storage_page_cache_limit, \"20%\");\n // whether to disable page cache feature in storage\n-CONF_Bool(disable_storage_page_cache, \"false\");\n+CONF_mBool(disable_storage_page_cache, \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5Nzk1Mg=="}, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE3ODI2OnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzoyOToxM1rOIMI2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzoyOToxM1rOIMI2zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5ODkyNA==", "bodyText": "There is a memory leak risk, enable_partitioned_aggregation is true at first and then changed to false, memory allocated has no chance to free.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549598924", "createdAt": "2020-12-29T07:29:13Z", "author": {"login": "acelyc111"}, "path": "be/src/common/config.h", "diffHunk": "@@ -424,8 +378,7 @@ CONF_Bool(enable_quadratic_probing, \"false\");\n CONF_String(pprof_profile_dir, \"${DORIS_HOME}/log\");\n \n // for partition\n-// CONF_Bool(enable_partitioned_hash_join, \"false\")\n-CONF_Bool(enable_partitioned_aggregation, \"true\");\n+CONF_mBool(enable_partitioned_aggregation, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE4NTEzOnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzozMzozOVrOIMI6fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODozMTozNVrOIMJ5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5OTg2OQ==", "bodyText": "I think you can remove this config, and define it as a static const value, there is no reason to update it.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549599869", "createdAt": "2020-12-29T07:33:39Z", "author": {"login": "acelyc111"}, "path": "be/src/common/config.h", "diffHunk": "@@ -472,7 +412,7 @@ CONF_String(buffer_pool_clean_pages_limit, \"20G\");\n CONF_mInt64(memory_maintenance_sleep_time_s, \"10\");\n \n // Alignment\n-CONF_Int32(memory_max_alignment, \"16\");\n+CONF_mInt32(memory_max_alignment, \"16\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTkzOQ==", "bodyText": "OK.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549615939", "createdAt": "2020-12-29T08:31:35Z", "author": {"login": "weizuo93"}, "path": "be/src/common/config.h", "diffHunk": "@@ -472,7 +412,7 @@ CONF_String(buffer_pool_clean_pages_limit, \"20G\");\n CONF_mInt64(memory_maintenance_sleep_time_s, \"10\");\n \n // Alignment\n-CONF_Int32(memory_max_alignment, \"16\");\n+CONF_mInt32(memory_max_alignment, \"16\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5OTg2OQ=="}, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE4OTgwOnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzozNjoxOVrOIMI87A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODozMTo1MVrOIMJ5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYwMDQ5Mg==", "bodyText": "These 2 configs are only used in LoadChannelMgr's init function, which will be called only once when server start, they are immutable.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549600492", "createdAt": "2020-12-29T07:36:19Z", "author": {"login": "acelyc111"}, "path": "be/src/common/config.h", "diffHunk": "@@ -482,8 +422,8 @@ CONF_mInt64(write_buffer_size, \"104857600\");\n // NOTICE(cmy): set these default values very large because we don't want to\n // impact the load performance when user upgrading Doris.\n // user should set these configs properly if necessary.\n-CONF_Int64(load_process_max_memory_limit_bytes, \"107374182400\"); // 100GB\n-CONF_Int32(load_process_max_memory_limit_percent, \"80\");         // 80%\n+CONF_mInt64(load_process_max_memory_limit_bytes, \"107374182400\"); // 100GB\n+CONF_mInt32(load_process_max_memory_limit_percent, \"80\");         // 80%", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNjAyMQ==", "bodyText": "OK.", "url": "https://github.com/apache/incubator-doris/pull/5158#discussion_r549616021", "createdAt": "2020-12-29T08:31:51Z", "author": {"login": "weizuo93"}, "path": "be/src/common/config.h", "diffHunk": "@@ -482,8 +422,8 @@ CONF_mInt64(write_buffer_size, \"104857600\");\n // NOTICE(cmy): set these default values very large because we don't want to\n // impact the load performance when user upgrading Doris.\n // user should set these configs properly if necessary.\n-CONF_Int64(load_process_max_memory_limit_bytes, \"107374182400\"); // 100GB\n-CONF_Int32(load_process_max_memory_limit_percent, \"80\");         // 80%\n+CONF_mInt64(load_process_max_memory_limit_bytes, \"107374182400\"); // 100GB\n+CONF_mInt32(load_process_max_memory_limit_percent, \"80\");         // 80%", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYwMDQ5Mg=="}, "originalCommit": {"oid": "9c7a35b14527c35e93d21d60717205f60bf4c940"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 855, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}