{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1Mjc3NzY2", "number": 4756, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxMDoxMlrOEvxJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzozNDoxN1rOEwxQEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTIzODQ2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/ExprRewriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxMDoxMlrOHk7klg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxMDoxMlrOHk7klg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4NjgwNg==", "bodyText": "Why not check the type in analysis state?", "url": "https://github.com/apache/incubator-doris/pull/4756#discussion_r508486806", "createdAt": "2020-10-20T13:10:12Z", "author": {"login": "xy720"}, "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/ExprRewriter.java", "diffHunk": "@@ -55,6 +58,12 @@ public Expr rewrite(Expr expr, Analyzer analyzer) throws AnalysisException {\n                 rewrittenExpr = applyRuleRepeatedly(rewrittenExpr, rule, analyzer);\n             }\n         } while (oldNumChanges != numChanges_);\n+        if (expr instanceof BinaryPredicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab58cbd3dc2cbd0c7358c5847eef3f8aad8bfcf0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTI1MTIxOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/ExprRewriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxMjo1NVrOHk7sbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0MTozNVrOHleXmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4ODgxNQ==", "bodyText": "I think throwing a exception is not the best solution of this problem, may be rewrite the binary expr day = '2020-10-32' to something like contant expr BoolLiteral[false] in where statement is better. We should discuss it first.", "url": "https://github.com/apache/incubator-doris/pull/4756#discussion_r508488815", "createdAt": "2020-10-20T13:12:55Z", "author": {"login": "xy720"}, "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/ExprRewriter.java", "diffHunk": "@@ -55,6 +58,12 @@ public Expr rewrite(Expr expr, Analyzer analyzer) throws AnalysisException {\n                 rewrittenExpr = applyRuleRepeatedly(rewrittenExpr, rule, analyzer);\n             }\n         } while (oldNumChanges != numChanges_);\n+        if (expr instanceof BinaryPredicate) {\n+            Expr valueExpr = ((BinaryPredicate) expr).getBinding();\n+            if(valueExpr != null && valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr) {\n+                throw new AnalysisException(\"invalid date type :\" + valueExpr.toSql());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab58cbd3dc2cbd0c7358c5847eef3f8aad8bfcf0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NjkyMw==", "bodyText": "I think throwing a exception is not the best solution of this problem, may be rewrite the binary expr day = '2020-10-32' to something like contant expr BoolLiteral[false] in where statement is better. We should discuss it first.\n\nok\uff0cI will modify it;", "url": "https://github.com/apache/incubator-doris/pull/4756#discussion_r509056923", "createdAt": "2020-10-21T07:41:35Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/ExprRewriter.java", "diffHunk": "@@ -55,6 +58,12 @@ public Expr rewrite(Expr expr, Analyzer analyzer) throws AnalysisException {\n                 rewrittenExpr = applyRuleRepeatedly(rewrittenExpr, rule, analyzer);\n             }\n         } while (oldNumChanges != numChanges_);\n+        if (expr instanceof BinaryPredicate) {\n+            Expr valueExpr = ((BinaryPredicate) expr).getBinding();\n+            if(valueExpr != null && valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr) {\n+                throw new AnalysisException(\"invalid date type :\" + valueExpr.toSql());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4ODgxNQ=="}, "originalCommit": {"oid": "ab58cbd3dc2cbd0c7358c5847eef3f8aad8bfcf0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTc0MDMyOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/BinaryPredicatesDateRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzozNDoxN1rOHmiB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0MDo0MFrOHm7GaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE2NTQ5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr) {\n          \n          \n            \n                    if(valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr && valueExpr.getChild(0).getType() == Type.VARCHAR) {\n          \n      \n    \n    \n  \n\nThere is something wrong with this If statement.\nFor example, where day = 20201030 will rewrite to where false, which is not right.\nYou should only support covert StringLiteral now:\nwhere day = '20201032' -> where false", "url": "https://github.com/apache/incubator-doris/pull/4756#discussion_r510165496", "createdAt": "2020-10-22T13:34:17Z", "author": {"login": "xy720"}, "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/BinaryPredicatesDateRule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.BinaryPredicate;\n+import org.apache.doris.analysis.CastExpr;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.BoolLiteral;\n+import org.apache.doris.catalog.Type;\n+import org.apache.doris.common.AnalysisException;\n+\n+/**\n+ * Binary predicaate date rule try to convert date expression, if date is invalid, it will be\n+ * convert into bool literal to avoid to scan all partitions\n+ * Examples:\n+ * date = \"2020-10-32\" => FALSE\n+ */\n+public class BinaryPredicatesDateRule implements ExprRewriteRule {\n+    public static ExprRewriteRule INSTANCE = new BinaryPredicatesDateRule();\n+\n+    @Override\n+    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        if (!(expr instanceof BinaryPredicate)) return expr;\n+        Expr valueExpr = expr.getChild(1);\n+        if(valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87378184aa355d7acffc6c250cc1d5a19f83b5ce"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NjIzMg==", "bodyText": "The rule of FoldConstantsRule will convert where day = 20201030 into where day='2020-10-30 00:00:00', whic is DateLiteral type.", "url": "https://github.com/apache/incubator-doris/pull/4756#discussion_r510576232", "createdAt": "2020-10-23T03:40:40Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/main/java/org/apache/doris/rewrite/BinaryPredicatesDateRule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.rewrite;\n+\n+import org.apache.doris.analysis.Analyzer;\n+import org.apache.doris.analysis.BinaryPredicate;\n+import org.apache.doris.analysis.CastExpr;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.BoolLiteral;\n+import org.apache.doris.catalog.Type;\n+import org.apache.doris.common.AnalysisException;\n+\n+/**\n+ * Binary predicaate date rule try to convert date expression, if date is invalid, it will be\n+ * convert into bool literal to avoid to scan all partitions\n+ * Examples:\n+ * date = \"2020-10-32\" => FALSE\n+ */\n+public class BinaryPredicatesDateRule implements ExprRewriteRule {\n+    public static ExprRewriteRule INSTANCE = new BinaryPredicatesDateRule();\n+\n+    @Override\n+    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        if (!(expr instanceof BinaryPredicate)) return expr;\n+        Expr valueExpr = expr.getChild(1);\n+        if(valueExpr.getType() == Type.DATETIME && valueExpr instanceof CastExpr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE2NTQ5Ng=="}, "originalCommit": {"oid": "87378184aa355d7acffc6c250cc1d5a19f83b5ce"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 983, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}