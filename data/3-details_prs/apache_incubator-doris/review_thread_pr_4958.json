{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3ODY2OTI5", "number": 4958, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0MToxN1rOE-JWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0MToxN1rOE-JWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjAwMjg2OnYy", "diffSide": "RIGHT", "path": "be/src/olap/collect_iterator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0MToxN1rOH7MThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0MToxN1rOH7MThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTYzNw==", "bodyText": "We can first check the size of _children, then decide whether to find the base rowset.\nAnd there is a memory leak of cumu_iter", "url": "https://github.com/apache/incubator-doris/pull/4958#discussion_r531829637", "createdAt": "2020-11-28T03:41:17Z", "author": {"login": "morningman"}, "path": "be/src/olap/collect_iterator.cpp", "diffHunk": "@@ -0,0 +1,328 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/collect_iterator.h\"\n+\n+#include \"olap/reader.h\"\n+#include \"olap/row.h\"\n+#include \"olap/row_block.h\"\n+#include \"olap/row_cursor.h\"\n+\n+namespace doris {\n+\n+CollectIterator::~CollectIterator() {\n+    for (auto child : _children) {\n+        if (child != nullptr) {\n+            delete child;\n+            child = nullptr;\n+        }\n+    }\n+}\n+\n+void CollectIterator::init(Reader* reader) {\n+    _reader = reader;\n+    // when aggregate is enabled or key_type is DUP_KEYS, we don't merge\n+    // multiple data to aggregate for performance in user fetch\n+    if (_reader->_reader_type == READER_QUERY &&\n+        (_reader->_aggregation || _reader->_tablet->keys_type() == KeysType::DUP_KEYS)) {\n+        _merge = false;\n+    }\n+}\n+\n+OLAPStatus CollectIterator::add_child(RowsetReaderSharedPtr rs_reader) {\n+    std::unique_ptr<LevelIterator> child(new Level0Iterator(rs_reader, _reader));\n+    RETURN_NOT_OK(child->init());\n+    if (child->current_row() == nullptr) {\n+        return OLAP_SUCCESS;\n+    }\n+\n+    LevelIterator* child_ptr = child.release();\n+    _children.push_back(child_ptr);\n+    _rs_readers.push_back(rs_reader);\n+    return OLAP_SUCCESS;\n+}\n+\n+// Build a merge heap. If _merge is true, a rowset with the max rownum\n+// status will be used as the base rowset, and the other rowsets will be merged first and\n+// then merged with the base rowset.\n+void CollectIterator::build_heap() {\n+    DCHECK(_rs_readers.size() == _children.size());\n+    _reverse = _reader->_tablet->tablet_schema().keys_type() == KeysType::UNIQUE_KEYS;\n+    if (_children.empty()) {\n+        _inner_iter.reset(nullptr);\n+        return;\n+    } else if (_merge) {\n+        DCHECK(!_rs_readers.empty());\n+        // find base rowset(max rownum),\n+        RowsetReaderSharedPtr base_reader = _rs_readers[0];\n+        int base_reader_idx = 0;\n+        for (size_t i = 1; i < _rs_readers.size(); ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "195c39c713eea3a229afe7360191fcbdf32ddfac"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}