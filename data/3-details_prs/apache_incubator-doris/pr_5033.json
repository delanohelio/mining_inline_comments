{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMzUzMDc4", "number": 5033, "title": "[ODBC] Support ODBC Sink for insert into data to ODBC external table", "bodyText": "issue:#5031\n\nRefactoring code of ODBC scanner to ODBC connecter to ODBC Sink for insert into data to ODBC external table.\nSupport Transaction for ODBC sink to make sure insert into data is atomicital.\nThe document about ODBC sink has been modified\n\nProposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n Documentation Update (if none of the other choices apply)\n Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged", "createdAt": "2020-12-07T04:01:20Z", "url": "https://github.com/apache/incubator-doris/pull/5033", "merged": true, "mergeCommit": {"oid": "115d4332aaf40adc380b0ed8570b0b57dc3896fd"}, "closed": true, "closedAt": "2020-12-13T13:53:28Z", "author": {"login": "HappenLee"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjtWhpgH2gAyNTMzMzUzMDc4OmMwZmQ2N2NhNThhOWZhMzM3NDVlY2FjMWM5YzA5ODdkM2RkODdiYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlc1fWAFqTU1MDc3NTA1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "committedDate": "2020-12-07T03:54:55Z", "message": "[ODBC] Support ODBC Sink for insert into data to ODBC external table.\n\nissue:#5031\n\n1. Support ODBC Sink for insert into data to ODBC external table.\n2. Support Transaction for ODBC sink to make sure insert into data is atomicital.\n3. The document about ODBC sink has been modified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODUyOTI5", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-545852929", "createdAt": "2020-12-07T06:09:05Z", "commit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowOTowNVrOIAXXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowOTowNVrOIAXXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MzY2NQ==", "bodyText": "if use mysql statement,  table name better to surrounded by `", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537253665", "createdAt": "2020-12-07T06:09:05Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/odbc_connecter.cpp", "diffHunk": "@@ -172,7 +180,175 @@ Status ODBCScanner::get_next_row(bool* eos) {\n     return Status::OK();\n }\n \n-Status ODBCScanner::error_status(const std::string& prefix, const std::string& error_msg) {\n+Status ODBCConnecter::init_to_write() {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Init before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::append(const std::string& table_name, RowBatch *batch) {\n+    if (batch == nullptr || batch->num_rows() == 0) {\n+        return Status::OK();\n+    }\n+\n+    int num_rows = batch->num_rows();\n+    for (int i = 0; i < num_rows; ++i) {\n+        RETURN_IF_ERROR(insert_row(table_name, batch->get_row(i)));\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::insert_row(const std::string& table_name, TupleRow *row) {\n+    std::stringstream ss;\n+\n+    // Construct Insert statement of mysql\n+    ss << \"INSERT INTO \" << table_name << \" VALUES (\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODUzODY2", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-545853866", "createdAt": "2020-12-07T06:11:51Z", "commit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMTo1MVrOIAXa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMTo1MVrOIAXa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NDYyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Translate utf8 string to utf16 to use unicode codeing\n          \n          \n            \n                // Translate utf8 string to utf16 to use unicode encoding", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537254626", "createdAt": "2020-12-07T06:11:51Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/odbc_connecter.cpp", "diffHunk": "@@ -172,7 +180,175 @@ Status ODBCScanner::get_next_row(bool* eos) {\n     return Status::OK();\n }\n \n-Status ODBCScanner::error_status(const std::string& prefix, const std::string& error_msg) {\n+Status ODBCConnecter::init_to_write() {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Init before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::append(const std::string& table_name, RowBatch *batch) {\n+    if (batch == nullptr || batch->num_rows() == 0) {\n+        return Status::OK();\n+    }\n+\n+    int num_rows = batch->num_rows();\n+    for (int i = 0; i < num_rows; ++i) {\n+        RETURN_IF_ERROR(insert_row(table_name, batch->get_row(i)));\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::insert_row(const std::string& table_name, TupleRow *row) {\n+    std::stringstream ss;\n+\n+    // Construct Insert statement of mysql\n+    ss << \"INSERT INTO \" << table_name << \" VALUES (\";\n+    int num_columns = _output_expr_ctxs.size();\n+    for (int i = 0; i < num_columns; ++i) {\n+        if (i != 0) {\n+            ss << \", \";\n+        }\n+        void* item = _output_expr_ctxs[i]->get_value(row);\n+        if (item == nullptr) {\n+            ss << \"NULL\";\n+            continue;\n+        }\n+        switch (_output_expr_ctxs[i]->root()->type().type) {\n+            case TYPE_BOOLEAN:\n+            case TYPE_TINYINT:\n+                ss << (int)*static_cast<int8_t*>(item);\n+                break;\n+            case TYPE_SMALLINT:\n+                ss << *static_cast<int16_t*>(item);\n+                break;\n+            case TYPE_INT:\n+                ss << *static_cast<int32_t*>(item);\n+                break;\n+            case TYPE_BIGINT:\n+                ss << *static_cast<int64_t*>(item);\n+                break;\n+            case TYPE_FLOAT:\n+                ss << *static_cast<float*>(item);\n+                break;\n+            case TYPE_DOUBLE:\n+                ss << *static_cast<double*>(item);\n+                break;\n+            case TYPE_DATE:\n+            case TYPE_DATETIME: {\n+                char buf[64];\n+                const DateTimeValue* time_val = (const DateTimeValue*)(item);\n+                time_val->to_string(buf);\n+                ss << \"\\'\" << buf << \"\\'\";\n+                break;\n+            }\n+            case TYPE_VARCHAR:\n+            case TYPE_CHAR: {\n+                const StringValue* string_val = (const StringValue*)(item);\n+\n+                if (string_val->ptr == NULL) {\n+                    if (string_val->len == 0) {\n+                        ss << \"\\'\\'\";\n+                    } else {\n+                        ss << \"NULL\";\n+                    }\n+                } else {\n+                    ss << \"\\'\";\n+                    for (int j = 0; j < string_val->len ; ++j) {\n+                        ss << string_val->ptr[j];\n+                    }\n+                    ss << \"\\'\";\n+                }\n+                break;\n+            }\n+            case TYPE_DECIMAL: {\n+                const DecimalValue* decimal_val = reinterpret_cast<const DecimalValue*>(item);\n+                std::string decimal_str;\n+                int output_scale = _output_expr_ctxs[i]->root()->output_scale();\n+\n+                if (output_scale > 0 && output_scale <= 30) {\n+                    decimal_str = decimal_val->to_string(output_scale);\n+                } else {\n+                    decimal_str = decimal_val->to_string();\n+                }\n+                ss << decimal_str;\n+                break;\n+            }\n+            case TYPE_DECIMALV2: {\n+                const DecimalV2Value decimal_val(reinterpret_cast<const PackedInt128*>(item)->value);\n+                std::string decimal_str;\n+                int output_scale = _output_expr_ctxs[i]->root()->output_scale();\n+\n+                if (output_scale > 0 && output_scale <= 30) {\n+                    decimal_str = decimal_val.to_string(output_scale);\n+                } else {\n+                    decimal_str = decimal_val.to_string();\n+                }\n+                ss << decimal_str;\n+                break;\n+            }\n+\n+            default: {\n+                std::stringstream err_ss;\n+                err_ss << \"can't convert this type to mysql type. type = \" <<\n+                       _output_expr_ctxs[i]->root()->type();\n+                return Status::InternalError(err_ss.str());\n+            }\n+        }\n+    }\n+    ss << \")\";\n+\n+    // Translate utf8 string to utf16 to use unicode codeing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODU0MzUw", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-545854350", "createdAt": "2020-12-07T06:13:09Z", "commit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMzowOVrOIAXctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMzowOVrOIAXctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NTA5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class ODBCConnecter {\n          \n          \n            \n            class ODBCConnector {", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537255093", "createdAt": "2020-12-07T06:13:09Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/odbc_connecter.h", "diffHunk": "@@ -52,32 +58,46 @@ struct DataBinding : public boost::noncopyable {\n     ~DataBinding() { free(target_value_ptr); }\n };\n \n-// ODBC Scanner for scan data from ODBC\n-class ODBCScanner {\n+// ODBC Connecter for scan data from ODBC\n+class ODBCConnecter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODU1NDg1", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-545855485", "createdAt": "2020-12-07T06:16:28Z", "commit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxNjoyOFrOIAXhFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxNjoyOFrOIAXhFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NjIxNA==", "bodyText": "maybe use_transaction is better", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537256214", "createdAt": "2020-12-07T06:16:28Z", "author": {"login": "yangzhg"}, "path": "gensrc/thrift/DataSinks.thrift", "diffHunk": "@@ -82,6 +83,12 @@ struct TMysqlTableSink {\n     6: required string table\n }\n \n+struct TOdbcTableSink {\n+    1: optional string connect_string\n+    2: optional string table\n+    3: optional bool is_transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ffc5320dfa3de2726a17b3c419f5634a958c50", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/40ffc5320dfa3de2726a17b3c419f5634a958c50", "committedDate": "2020-12-07T07:54:16Z", "message": "change code by comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f160abef4e271f59e7d1dccf60ef12ed077a3545", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/f160abef4e271f59e7d1dccf60ef12ed077a3545", "committedDate": "2020-12-07T07:49:55Z", "message": "change code by comment"}, "afterCommit": {"oid": "40ffc5320dfa3de2726a17b3c419f5634a958c50", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/40ffc5320dfa3de2726a17b3c419f5634a958c50", "committedDate": "2020-12-07T07:54:16Z", "message": "change code by comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzgxMTA4", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-547781108", "createdAt": "2020-12-09T02:06:06Z", "commit": {"oid": "047ba10105c6dddccb1e4841b31e01477ac2ab94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjowNjowNlrOIB-1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjowNjowNlrOIB-1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0ODkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ODBCConnector::ODBCConnector(const ODBCConneterParam& param)\n          \n          \n            \n            ODBCConnector::ODBCConnector(const ODBCConnetorParam& param)", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r538948912", "createdAt": "2020-12-09T02:06:06Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/odbc_connector.cpp", "diffHunk": "@@ -48,18 +50,24 @@ static std::u16string utf8_to_wstring(const std::string& str) {\n \n namespace doris {\n \n-ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+ODBCConnector::ODBCConnector(const ODBCConneterParam& param)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047ba10105c6dddccb1e4841b31e01477ac2ab94"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e546fbad8d4b6063562b48095944fc838e8839f", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/7e546fbad8d4b6063562b48095944fc838e8839f", "committedDate": "2020-12-09T03:03:18Z", "message": "rename connecter to connector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "047ba10105c6dddccb1e4841b31e01477ac2ab94", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/047ba10105c6dddccb1e4841b31e01477ac2ab94", "committedDate": "2020-12-08T12:11:17Z", "message": "rename connecter to connector"}, "afterCommit": {"oid": "7e546fbad8d4b6063562b48095944fc838e8839f", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/7e546fbad8d4b6063562b48095944fc838e8839f", "committedDate": "2020-12-09T03:03:18Z", "message": "rename connecter to connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzc1MDU2", "url": "https://github.com/apache/incubator-doris/pull/5033#pullrequestreview-550775056", "createdAt": "2020-12-12T13:48:12Z", "commit": {"oid": "7e546fbad8d4b6063562b48095944fc838e8839f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4692, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}