{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzQ4MzM3", "number": 2847, "title": "Doris support in memory olap table", "bodyText": "For #2846\nThe doc and schema change support will do in next PR.", "createdAt": "2020-02-06T07:26:42Z", "url": "https://github.com/apache/incubator-doris/pull/2847", "merged": true, "mergeCommit": {"oid": "625411bd280270e1aa026a03632f3f7f6140653d"}, "closed": true, "closedAt": "2020-02-18T02:45:55Z", "author": {"login": "kangkaisen"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBontdgBqjMwMTM0MjU1Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFNq1DgFqTM1OTc0NzkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23dfe875ee918aba902b20064b5ddb928642a670", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/23dfe875ee918aba902b20064b5ddb928642a670", "committedDate": "2020-02-06T07:17:03Z", "message": "Doris support in memory olap table"}, "afterCommit": {"oid": "773e0e34a57ed1c4edccc45735dc5fe80ba4d97f", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/773e0e34a57ed1c4edccc45735dc5fe80ba4d97f", "committedDate": "2020-02-06T10:57:22Z", "message": "Fix UT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODg1ODcx", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-354885871", "createdAt": "2020-02-07T01:37:51Z", "commit": {"oid": "773e0e34a57ed1c4edccc45735dc5fe80ba4d97f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozNzo1MlrOFmv5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozNzo1MlrOFmv5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NTAxMg==", "bodyText": "Could we put this isInMemory in tableProperty to avoid modifying meta version?", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r376175012", "createdAt": "2020-02-07T01:37:52Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -1011,17 +1010,17 @@ public void readFields(DataInput in) throws IOException {\n                 tableProperty = TableProperty.read(in);\n             }\n         }\n+        // inMemory\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_72) {\n+            isInMemory = in.readBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773e0e34a57ed1c4edccc45735dc5fe80ba4d97f"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTk1ODA2", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-355995806", "createdAt": "2020-02-10T14:50:38Z", "commit": {"oid": "564e1cb6a7c600b197b1dbc57bfbdb168b1413a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo1MDozOVrOFno4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo1NDo1NVrOFnpC5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwODU2Mw==", "bodyText": "String errMsg; can be put in the following if clause", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377108563", "createdAt": "2020-02-10T14:50:39Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeHandler.java", "diffHunk": "@@ -1405,6 +1420,88 @@ private void sendClearAlterTask(Database db, OlapTable olapTable) {\n         LOG.info(\"send clear alter task for table {}, number: {}\", olapTable.getName(), batchTask.getTaskNum());\n     }\n \n+    public void sendUpdateTabletMetaInfoTask(Database db, OlapTable olapTable, boolean isInMemory) throws DdlException {\n+        List<Partition> partitions = Lists.newArrayList();\n+        db.readLock();\n+        try {\n+            partitions.addAll(olapTable.getPartitions());\n+        } finally {\n+            db.readUnlock();\n+        }\n+        for(Partition partition: partitions) {\n+            sendUpdateTabletMetaTaskForPartition(db, olapTable, partition, isInMemory);\n+        }\n+    }\n+\n+    public void sendUpdateTabletMetaTaskForPartition(Database db,\n+                                                     OlapTable olapTable,\n+                                                     Partition partition,\n+                                                     boolean isInMemory) throws DdlException {\n+        // be id -> <tablet id,schemaHash>\n+        Map<Long, Set<Pair<Long, Integer>>> beIdToTabletIdWithHash = Maps.newHashMap();\n+        db.readLock();\n+        try {\n+            for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.VISIBLE)) {\n+                int schemaHash = olapTable.getSchemaHashByIndexId(index.getId());\n+                for (Tablet tablet : index.getTablets()) {\n+                    for (Replica replica : tablet.getReplicas()) {\n+                        Set<Pair<Long, Integer>> tabletIdWithHash = beIdToTabletIdWithHash.computeIfAbsent(replica.getBackendId(), k -> Sets.newHashSet());\n+                        tabletIdWithHash.add(new Pair<>(tablet.getId(), schemaHash));\n+                    }\n+                }\n+            }\n+        } finally {\n+            db.readUnlock();\n+        }\n+\n+        int totalTaskNum = beIdToTabletIdWithHash.keySet().size();\n+        MarkedCountDownLatch<Long, Set<Pair<Long, Integer>>> countDownLatch = new MarkedCountDownLatch<>(totalTaskNum);\n+        AgentBatchTask batchTask = new AgentBatchTask();\n+        for(Map.Entry<Long, Set<Pair<Long, Integer>>> kv: beIdToTabletIdWithHash.entrySet()) {\n+            countDownLatch.addMark(kv.getKey(), kv.getValue());\n+            UpdateTabletMetaInfoTask task = new UpdateTabletMetaInfoTask(kv.getKey(), kv.getValue(),\n+                                                isInMemory,countDownLatch);\n+            batchTask.addTask(task);\n+        }\n+        if (!FeConstants.runningUnitTest) {\n+            // send all tasks and wait them finished\n+            AgentTaskQueue.addBatchTask(batchTask);\n+            AgentTaskExecutor.submit(batchTask);\n+            LOG.info(\"send update tablet meta task for table {}, partitions {}, number: {}\",\n+                    olapTable.getName(), partition.getName(), batchTask.getTaskNum());\n+\n+            // estimate timeout\n+            long timeout = Config.tablet_create_timeout_second * 1000L * totalTaskNum;\n+            timeout = Math.min(timeout, Config.max_create_table_timeout_second * 1000);\n+            boolean ok = false;\n+            try {\n+                ok = countDownLatch.await(timeout, TimeUnit.MILLISECONDS);\n+            } catch (InterruptedException e) {\n+                LOG.warn(\"InterruptedException: \", e);\n+            }\n+\n+            String errMsg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564e1cb6a7c600b197b1dbc57bfbdb168b1413a3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExMTI2OQ==", "bodyText": "sendUpdateTabletMetaTaskForPartition()\nwhat if this method is partial success? And some of the tablet's meta on BE changed to in memory and some are not?", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377111269", "createdAt": "2020-02-10T14:54:55Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeHandler.java", "diffHunk": "@@ -1405,6 +1420,88 @@ private void sendClearAlterTask(Database db, OlapTable olapTable) {\n         LOG.info(\"send clear alter task for table {}, number: {}\", olapTable.getName(), batchTask.getTaskNum());\n     }\n \n+    public void sendUpdateTabletMetaInfoTask(Database db, OlapTable olapTable, boolean isInMemory) throws DdlException {\n+        List<Partition> partitions = Lists.newArrayList();\n+        db.readLock();\n+        try {\n+            partitions.addAll(olapTable.getPartitions());\n+        } finally {\n+            db.readUnlock();\n+        }\n+        for(Partition partition: partitions) {\n+            sendUpdateTabletMetaTaskForPartition(db, olapTable, partition, isInMemory);\n+        }\n+    }\n+\n+    public void sendUpdateTabletMetaTaskForPartition(Database db,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564e1cb6a7c600b197b1dbc57bfbdb168b1413a3"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTEzMTI4", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-357113128", "createdAt": "2020-02-12T00:19:48Z", "commit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxOTo0OFrOFod4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo0ODoxNFrOFoeZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NjkxNQ==", "bodyText": "I think is_durable is a better name?", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377976915", "createdAt": "2020-02-12T00:19:48Z", "author": {"login": "kangpinghuang"}, "path": "be/src/olap/page_cache.cpp", "diffHunk": "@@ -42,11 +42,18 @@ bool StoragePageCache::lookup(const CacheKey& key, PageCacheHandle* handle) {\n     return true;\n }\n \n-void StoragePageCache::insert(const CacheKey& key, const Slice& data, PageCacheHandle* handle) {\n+void StoragePageCache::insert(const CacheKey& key, const Slice& data, PageCacheHandle* handle,\n+                              bool in_memory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzA4OQ==", "bodyText": "add some comment for this variable", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377977089", "createdAt": "2020-02-12T00:20:28Z", "author": {"login": "kangpinghuang"}, "path": "be/src/olap/page_cache.h", "diffHunk": "@@ -74,7 +74,7 @@ class StoragePageCache {\n     // Given hanlde will be set to valid reference.\n     // This function is thread-safe, and when two clients insert two same key\n     // concurrently, this function can assure that only one page is cached.\n-    void insert(const CacheKey& key, const Slice& data, PageCacheHandle* handle);\n+    void insert(const CacheKey& key, const Slice& data, PageCacheHandle* handle, bool in_memory = false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mzg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void handleSetTabletMetaInfo(long backendId, Set<Pair<Long, Integer>>tabletWithoutPartitionId) {\n          \n          \n            \n                private static void handleSetTabletMetaInfo(long backendId, Set<Pair<Long, Integer>> tabletWithoutPartitionId) {", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377983847", "createdAt": "2020-02-12T00:43:19Z", "author": {"login": "kangpinghuang"}, "path": "fe/src/main/java/org/apache/doris/master/ReportHandler.java", "diffHunk": "@@ -884,13 +885,14 @@ private static void handleForceCreateReplica(List<CreateReplicaTask> createRepli\n     }\n     \n \n-    private static void handleSetTabletMetaInfo(long backendId, SetMultimap<Long, Integer> tabletWithoutPartitionId) {\n+    private static void handleSetTabletMetaInfo(long backendId, Set<Pair<Long, Integer>>tabletWithoutPartitionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NTMzOQ==", "bodyText": "I think this name is ambiguous, Is INMEMORY can not has partitionid?", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r377985339", "createdAt": "2020-02-12T00:48:14Z", "author": {"login": "kangpinghuang"}, "path": "gensrc/thrift/AgentService.thrift", "diffHunk": "@@ -233,10 +234,17 @@ struct TRecoverTabletReq {\n     4: optional Types.TVersionHash version_hash // Deprecated\n }\n \n+enum TTabletMetaType {\n+    PARTITIONID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63fed51361332b4d3ec4576874ae3fcf13eba28b", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/63fed51361332b4d3ec4576874ae3fcf13eba28b", "committedDate": "2020-02-11T04:26:19Z", "message": "Update"}, "afterCommit": {"oid": "13ce036e71cd4670c192b6f74832c5288d380949", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/13ce036e71cd4670c192b6f74832c5288d380949", "committedDate": "2020-02-12T07:41:40Z", "message": "Doris support in memory olap table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDYzMTMz", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-357463133", "createdAt": "2020-02-12T13:48:14Z", "commit": {"oid": "13ce036e71cd4670c192b6f74832c5288d380949"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13ce036e71cd4670c192b6f74832c5288d380949", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/13ce036e71cd4670c192b6f74832c5288d380949", "committedDate": "2020-02-12T07:41:40Z", "message": "Doris support in memory olap table"}, "afterCommit": {"oid": "1fd2014747a61ce7f62159429a8a65a5cedf013b", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/1fd2014747a61ce7f62159429a8a65a5cedf013b", "committedDate": "2020-02-16T09:59:18Z", "message": "Add disable_storage_page_cache config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fd2014747a61ce7f62159429a8a65a5cedf013b", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/1fd2014747a61ce7f62159429a8a65a5cedf013b", "committedDate": "2020-02-16T09:59:18Z", "message": "Add disable_storage_page_cache config"}, "afterCommit": {"oid": "13ce036e71cd4670c192b6f74832c5288d380949", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/13ce036e71cd4670c192b6f74832c5288d380949", "committedDate": "2020-02-12T07:41:40Z", "message": "Doris support in memory olap table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13ce036e71cd4670c192b6f74832c5288d380949", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/13ce036e71cd4670c192b6f74832c5288d380949", "committedDate": "2020-02-12T07:41:40Z", "message": "Doris support in memory olap table"}, "afterCommit": {"oid": "1c1d00950ac102e00c0e89e6042538f793b28929", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/1c1d00950ac102e00c0e89e6042538f793b28929", "committedDate": "2020-02-17T05:27:30Z", "message": "Doris support in memory olap table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjYxMDUy", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-359661052", "createdAt": "2020-02-17T11:16:11Z", "commit": {"oid": "1c1d00950ac102e00c0e89e6042538f793b28929"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMToxNjoxMVrOFqg41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozNDozMlrOFqhXDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMzM1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            switch(tablet_meta_info.meta_type) {\n          \n          \n            \n                            switch (tablet_meta_info.meta_type) {", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r380123351", "createdAt": "2020-02-17T11:16:11Z", "author": {"login": "imay"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -846,7 +846,19 @@ void* TaskWorkerPool::_update_tablet_meta_worker_thread_callback(void* arg_this)\n                 continue;\n             }\n             WriteLock wrlock(tablet->get_header_lock_ptr());\n-            tablet->set_partition_id(tablet_meta_info.partition_id);\n+            // update tablet meta\n+            if (!tablet_meta_info.__isset.meta_type) {\n+                 tablet->set_partition_id(tablet_meta_info.partition_id);\n+            } else {\n+                switch(tablet_meta_info.meta_type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1d00950ac102e00c0e89e6042538f793b28929"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyOTI3NA==", "bodyText": "Prefer mutable_tablet_schema() to return a pointer.\nNormally, const modification is required when returning a reference", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r380129274", "createdAt": "2020-02-17T11:30:09Z", "author": {"login": "imay"}, "path": "be/src/olap/tablet_meta.h", "diffHunk": "@@ -155,7 +155,7 @@ class TabletMeta {\n     inline const bool in_restore_mode() const;\n     inline OLAPStatus set_in_restore_mode(bool in_restore_mode);\n \n-    inline const TabletSchema& tablet_schema() const;\n+    inline TabletSchema& tablet_schema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1d00950ac102e00c0e89e6042538f793b28929"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTA4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for(Triple<Long, Integer, Boolean> triple: tabletToInMemory) {\n          \n          \n            \n                                for (Triple<Long, Integer, Boolean> triple: tabletToInMemory) {", "url": "https://github.com/apache/incubator-doris/pull/2847#discussion_r380131087", "createdAt": "2020-02-17T11:34:32Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/task/UpdateTabletMetaInfoTask.java", "diffHunk": "@@ -18,50 +18,134 @@\n package org.apache.doris.task;\n \n import java.util.List;\n-import java.util.Map;\n+import java.util.Set;\n \n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.doris.catalog.Catalog;\n import org.apache.doris.catalog.TabletMeta;\n+import org.apache.doris.common.MarkedCountDownLatch;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.common.Status;\n+import org.apache.doris.thrift.TStatusCode;\n import org.apache.doris.thrift.TTabletMetaInfo;\n+import org.apache.doris.thrift.TTabletMetaType;\n import org.apache.doris.thrift.TTaskType;\n import org.apache.doris.thrift.TUpdateTabletMetaInfoReq;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n import com.google.common.collect.Lists;\n-import com.google.common.collect.SetMultimap;\n \n public class UpdateTabletMetaInfoTask extends AgentTask {\n \n-    private static final Logger LOG = LogManager.getLogger(ClearTransactionTask.class);\n+    private static final Logger LOG = LogManager.getLogger(UpdateTabletMetaInfoTask.class);\n \n-    private SetMultimap<Long, Integer> tabletWithoutPartitionId;\n+    // used for synchronous process\n+    private MarkedCountDownLatch<Long, Set<Pair<Long, Integer>>> latch;\n \n-    public UpdateTabletMetaInfoTask(long backendId, SetMultimap<Long, Integer> tabletWithoutPartitionId) {\n-        super(null, backendId, TTaskType.UPDATE_TABLET_META_INFO, -1L, -1L, -1L, -1L, -1L, backendId);\n-        this.tabletWithoutPartitionId = tabletWithoutPartitionId;\n+    private Set<Pair<Long, Integer>> tableIdWithSchemaHash;\n+    private boolean isInMemory;\n+    private TTabletMetaType metaType;\n+\n+    // <tablet id, tablet schema hash, tablet in memory>\n+    private List<Triple<Long, Integer, Boolean>> tabletToInMemory;\n+\n+    public UpdateTabletMetaInfoTask(long backendId, Set<Pair<Long, Integer>> tableIdWithSchemaHash,\n+                                    TTabletMetaType metaType) {\n+        super(null, backendId, TTaskType.UPDATE_TABLET_META_INFO,\n+                -1L, -1L, -1L, -1L, -1L, tableIdWithSchemaHash.hashCode());\n+        this.tableIdWithSchemaHash = tableIdWithSchemaHash;\n+        this.metaType = metaType;\n+    }\n+\n+    public UpdateTabletMetaInfoTask(long backendId,\n+                                    Set<Pair<Long, Integer>> tableIdWithSchemaHash,\n+                                    boolean isInMemory,\n+                                    MarkedCountDownLatch<Long, Set<Pair<Long, Integer>>> latch) {\n+        this(backendId, tableIdWithSchemaHash, TTabletMetaType.INMEMORY);\n+        this.isInMemory = isInMemory;\n+        this.latch = latch;\n+    }\n+\n+    public UpdateTabletMetaInfoTask(long backendId,\n+                                    List<Triple<Long, Integer, Boolean>> tabletToInMemory) {\n+        super(null, backendId, TTaskType.UPDATE_TABLET_META_INFO,\n+                -1L, -1L, -1L, -1L, -1L, tabletToInMemory.hashCode());\n+        this.metaType = TTabletMetaType.INMEMORY;\n+        this.tabletToInMemory = tabletToInMemory;\n+    }\n+\n+    public void countDownLatch(long backendId, Set<Pair<Long, Integer>> tablets) {\n+        if (this.latch != null) {\n+            if (latch.markedCountDown(backendId, tablets)) {\n+                LOG.debug(\"UpdateTabletMetaInfoTask current latch count: {}, backend: {}, tablets:{}\",\n+                        latch.getCount(), backendId, tablets);\n+            }\n+        }\n+    }\n+\n+    // call this always means one of tasks is failed. count down to zero to finish entire task\n+    public void countDownToZero(String errMsg) {\n+        if (this.latch != null) {\n+            latch.countDownToZero(new Status(TStatusCode.CANCELLED, errMsg));\n+            LOG.debug(\"UpdateTabletMetaInfoTask count down to zero. error msg: {}\", errMsg);\n+        }\n+    }\n+\n+    public Set<Pair<Long, Integer>> getTablets() {\n+        return tableIdWithSchemaHash;\n     }\n     \n     public TUpdateTabletMetaInfoReq toThrift() {\n         TUpdateTabletMetaInfoReq updateTabletMetaInfoReq = new TUpdateTabletMetaInfoReq();\n         List<TTabletMetaInfo> metaInfos = Lists.newArrayList();\n-        int tabletEntryNum = 0;\n-        for (Map.Entry<Long, Integer> entry : tabletWithoutPartitionId.entries()) {\n-            // add at most 10000 tablet meta during one sync to avoid too large task\n-            if (tabletEntryNum > 10000) {\n+        switch (metaType) {\n+            case PARTITIONID: {\n+                int tabletEntryNum = 0;\n+                for (Pair<Long, Integer> pair : tableIdWithSchemaHash) {\n+                    // add at most 10000 tablet meta during one sync to avoid too large task\n+                    if (tabletEntryNum > 10000) {\n+                        break;\n+                    }\n+                    TTabletMetaInfo metaInfo = new TTabletMetaInfo();\n+                    metaInfo.setTablet_id(pair.first);\n+                    metaInfo.setSchema_hash(pair.second);\n+                    TabletMeta tabletMeta = Catalog.getInstance().getTabletInvertedIndex().getTabletMeta(pair.first);\n+                    if (tabletMeta == null) {\n+                        LOG.warn(\"could not find tablet [{}] in meta ignore it\", pair.second);\n+                        continue;\n+                    }\n+                    metaInfo.setPartition_id(tabletMeta.getPartitionId());\n+                    metaInfo.setMeta_type(metaType);\n+                    metaInfos.add(metaInfo);\n+                    ++tabletEntryNum;\n+                }\n                 break;\n             }\n-            TTabletMetaInfo metaInfo = new TTabletMetaInfo();\n-            metaInfo.setTablet_id(entry.getKey());\n-            metaInfo.setSchema_hash(entry.getValue());\n-            TabletMeta tabletMeta = Catalog.getInstance().getTabletInvertedIndex().getTabletMeta(entry.getKey());\n-            if (tabletMeta == null) {\n-                LOG.warn(\"could not find tablet [{}] in meta ignore it\", entry.getKey());\n-                continue;\n+            case INMEMORY: {\n+                if (latch != null) {\n+                    // for schema change\n+                    for (Pair<Long, Integer> pair: tableIdWithSchemaHash) {\n+                        TTabletMetaInfo metaInfo = new TTabletMetaInfo();\n+                        metaInfo.setTablet_id(pair.first);\n+                        metaInfo.setSchema_hash(pair.second);\n+                        metaInfo.setIs_in_memory(isInMemory);\n+                        metaInfo.setMeta_type(metaType);\n+                        metaInfos.add(metaInfo);\n+                    }\n+                } else {\n+                   // for ReportHandler\n+                    for(Triple<Long, Integer, Boolean> triple: tabletToInMemory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1d00950ac102e00c0e89e6042538f793b28929"}, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86799297874d1b3ce2aa86e64dd17d541f71e660", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/86799297874d1b3ce2aa86e64dd17d541f71e660", "committedDate": "2020-02-17T13:46:43Z", "message": "Doris support in memory olap table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5b48549f31dd6013c5cbe3ffe1aa1a8d3b832a", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/5c5b48549f31dd6013c5cbe3ffe1aa1a8d3b832a", "committedDate": "2020-02-17T13:48:02Z", "message": "Fix code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4767c8ce65f9d552ca64186b64f9cb2380735dbe", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/4767c8ce65f9d552ca64186b64f9cb2380735dbe", "committedDate": "2020-02-17T12:31:53Z", "message": "Fix code style"}, "afterCommit": {"oid": "5c5b48549f31dd6013c5cbe3ffe1aa1a8d3b832a", "author": {"user": {"login": "kangkaisen", "name": "kangkaisen "}}, "url": "https://github.com/apache/incubator-doris/commit/5c5b48549f31dd6013c5cbe3ffe1aa1a8d3b832a", "committedDate": "2020-02-17T13:48:02Z", "message": "Fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzQ3OTE5", "url": "https://github.com/apache/incubator-doris/pull/2847#pullrequestreview-359747919", "createdAt": "2020-02-17T13:51:15Z", "commit": {"oid": "5c5b48549f31dd6013c5cbe3ffe1aa1a8d3b832a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}