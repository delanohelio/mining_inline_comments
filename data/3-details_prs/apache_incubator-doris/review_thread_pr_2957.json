{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3Njc0NjY5", "number": 2957, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNjo1Mjo1NlrODiEYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxNToxNVrODiEbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDQ5ODk1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNjo1Mjo1NlrOFtJ4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNjo1Mjo1NlrOFtJ4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjIxMA==", "bodyText": "Looks like these 3 containsXXXNode does not use?", "url": "https://github.com/apache/incubator-doris/pull/2957#discussion_r382892210", "createdAt": "2020-02-22T06:52:56Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -809,6 +812,63 @@ private boolean containsUnionNode(PlanNode node) {\n         return false;\n     }\n \n+    // estimate if this fragment contains IntersectNode\n+    private boolean containsIntersectNode(PlanNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9ffeff3a06c69ac5aa4fcb768176c62e295884"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwNjE2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxMjowNlrOFtJ8Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxMjowNlrOFtJ8Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzA5NQ==", "bodyText": "Add comments for this method.", "url": "https://github.com/apache/incubator-doris/pull/2957#discussion_r382893095", "createdAt": "2020-02-22T07:12:06Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1609,6 +1668,40 @@ private PlanNode createSetOperationPlan(SetOperationStmt setOperationStmt, Analy\n         return result;\n     }\n \n+    private PlanNode createPartialSetOperationPlan(Analyzer analyzer, SetOperationStmt setOperationStmt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9ffeff3a06c69ac5aa4fcb768176c62e295884"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwNjk3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxMzo1NVrOFtJ8jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxMzo1NVrOFtJ8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzE5OQ==", "bodyText": "Could you add more comment to explain the logic here?\nAnd better to add Unit test to test it. You can reference to bitmap function test.", "url": "https://github.com/apache/incubator-doris/pull/2957#discussion_r382893199", "createdAt": "2020-02-22T07:13:55Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1590,16 +1619,46 @@ private PlanNode createSetOperationPlan(SetOperationStmt setOperationStmt, Analy\n         setOperationStmt.materializeRequiredSlots(analyzer);\n \n         PlanNode result = null;\n-        // create DISTINCT tree\n-        if (setOperationStmt.hasDistinctOps()) {\n-            result = createUnionPlan(\n-                    analyzer, setOperationStmt, setOperationStmt.getDistinctOperands(), null, defaultOrderByLimit);\n-            result = new AggregationNode(ctx_.getNextNodeId(), result, setOperationStmt.getDistinctAggInfo());\n-            result.init(analyzer);\n+        SetOperationStmt.Operation operation = null;\n+        SetOperationStmt.Qualifier exceptQualifier = null;\n+        List<SetOperationStmt.SetOperand> partialOperands = new ArrayList<>();\n+        // create plan for a union b intersect c except b to three fragments\n+        // 3:[2:[1:[a union b] intersect c] except c]\n+        // EXCEPT operator is NOT commutative, it IS important which query is first,\n+        // which second using EXCEPT operator, so EXCEPT operator cannot merge all distinct op to one node all all\n+        // op to another node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9ffeff3a06c69ac5aa4fcb768176c62e295884"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwNzQyOnYy", "diffSide": "RIGHT", "path": "be/src/exec/intersect_node.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxNToxNVrOFtJ8zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxNToxNVrOFtJ8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Node that alulate the interscet results of its children by either materializing their\n          \n          \n            \n            // Node that calculate the intersect results of its children by either materializing their", "url": "https://github.com/apache/incubator-doris/pull/2957#discussion_r382893263", "createdAt": "2020-02-22T07:15:15Z", "author": {"login": "morningman"}, "path": "be/src/exec/intersect_node.h", "diffHunk": "@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+\n+#ifndef  DORIS_BE_SRC_QUERY_EXEC_INTERSECT_NODE_H\n+#define  DORIS_BE_SRC_QUERY_EXEC_INTERSECT_NODE_H\n+\n+#include \"exec/exec_node.h\"\n+#include \"runtime/row_batch.h\"\n+#include \"runtime/runtime_state.h\"\n+\n+namespace doris {\n+\n+// Node that alulate the interscet results of its children by either materializing their", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9ffeff3a06c69ac5aa4fcb768176c62e295884"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2015, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}