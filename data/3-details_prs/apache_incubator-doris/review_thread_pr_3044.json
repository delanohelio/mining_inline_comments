{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTk5MDAy", "number": 3044, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1MDozM1rODlqhpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyNjowMVrODlsPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODIwNjQ1OnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_snapshot_converter.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1MDozM1rOFyrp1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzo0OToyOFrOFysaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODM0MA==", "bodyText": "This function name indicates filling content from olap_header. It is not a good idea to change olap_header's content.\nAnd comment about what will be done in this function is needed.", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388688340", "createdAt": "2020-03-06T02:50:33Z", "author": {"login": "imay"}, "path": "be/src/olap/olap_snapshot_converter.cpp", "diffHunk": "@@ -89,27 +93,27 @@ OLAPStatus OlapSnapshotConverter::to_olap_header(const TabletMetaPB& tablet_meta\n     return OLAP_SUCCESS;\n }\n \n-OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(const OLAPHeaderMessage& olap_header,\n+OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(OLAPHeaderMessage* olap_header,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6699221c9bf8f9166a338c8dd6fe628e276830ee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwMDY5NA==", "bodyText": "Because PDelta can not corresponds with RowsetMeta.\nSo before calling convert_to_rowset_meta, I add delete predicate to PDelta to store delete predicate.\nOK, I use a PDelta temp variable to get rid of OLAPHeaderMessage.", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388700694", "createdAt": "2020-03-06T03:49:28Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_snapshot_converter.cpp", "diffHunk": "@@ -89,27 +93,27 @@ OLAPStatus OlapSnapshotConverter::to_olap_header(const TabletMetaPB& tablet_meta\n     return OLAP_SUCCESS;\n }\n \n-OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(const OLAPHeaderMessage& olap_header,\n+OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(OLAPHeaderMessage* olap_header,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODM0MA=="}, "originalCommit": {"oid": "6699221c9bf8f9166a338c8dd6fe628e276830ee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODIwOTgzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_snapshot_converter.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1Mjo0M1rOFyrryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1Mjo0M1rOFyrryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODg0MQ==", "bodyText": "Originally, this function only converts the header to meta.\nCan you implement another function to finish new added operation to make it less complicate?", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388688841", "createdAt": "2020-03-06T02:52:43Z", "author": {"login": "imay"}, "path": "be/src/olap/olap_snapshot_converter.h", "diffHunk": "@@ -47,7 +47,7 @@ class OlapSnapshotConverter {\n     // convert olap header to tablet meta pb, convert delta to rowsetmetapb\n     // pending delta is not in tablet meta any more, so that convert pending delta to rowset and add it to pending rowsets\n     // as a return value\n-    OLAPStatus to_tablet_meta_pb(const OLAPHeaderMessage& olap_header, TabletMetaPB* tablet_meta_pb, \n+    OLAPStatus to_tablet_meta_pb(OLAPHeaderMessage* olap_header, TabletMetaPB* tablet_meta_pb,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6699221c9bf8f9166a338c8dd6fe628e276830ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ3OTM4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_snapshot_converter.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyMTowOFrOFyuOtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyMTowOFrOFyuOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMDU1MQ==", "bodyText": "align", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388730551", "createdAt": "2020-03-06T06:21:08Z", "author": {"login": "imay"}, "path": "be/src/olap/olap_snapshot_converter.cpp", "diffHunk": "@@ -131,11 +136,23 @@ OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(const OLAPHeaderMessage& ola\n     }\n \n     std::unordered_map<Version, RowsetMetaPB*, HashOfVersion> _rs_version_map;\n+    const DelPredicateArray& delete_conditions = olap_header.delete_data_conditions();\n     for (auto& delta : olap_header.delta()) {\n         RowsetId next_id = StorageEngine::instance()->next_rowset_id();\n         RowsetMetaPB* rowset_meta = tablet_meta_pb->add_rs_metas();\n-        convert_to_rowset_meta(delta, next_id, olap_header.tablet_id(), olap_header.schema_hash(), rowset_meta);\n-        Version rowset_version = { delta.start_version(), delta.end_version() };\n+        PDelta temp_delta = delta;\n+        // PDelta is not corresponding with RowsetMeta in DeletePredicate\n+        // Add delete predicate to PDelta from OLAPHeaderMessage.\n+        // Only after this, convert from PDelta to RowsetMeta is valid.\n+        for (auto& del_pred : delete_conditions) {\n+            if (temp_delta.start_version() == temp_delta.end_version()\n+                && temp_delta.start_version() == del_pred.version()) {\n+                    DeletePredicatePB* delete_condition = temp_delta.mutable_delete_condition();\n+                    *delete_condition = del_pred;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da90067cedce8eaf6a3c0e7f419ce2d3d4e94b3a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ4MzgzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_snapshot_converter.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyMzo0OVrOFyuRXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyMzo0OVrOFyuRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMTIyOQ==", "bodyText": "align", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388731229", "createdAt": "2020-03-06T06:23:49Z", "author": {"login": "imay"}, "path": "be/src/olap/olap_snapshot_converter.cpp", "diffHunk": "@@ -150,7 +167,15 @@ OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(const OLAPHeaderMessage& ola\n         }\n         RowsetId next_id = StorageEngine::instance()->next_rowset_id();\n         RowsetMetaPB* rowset_meta = tablet_meta_pb->add_inc_rs_metas();\n-        convert_to_rowset_meta(inc_delta, next_id, olap_header.tablet_id(), olap_header.schema_hash(), rowset_meta);\n+        PDelta temp_inc_delta = inc_delta;\n+        for (auto& del_pred : delete_conditions) {\n+            if (temp_inc_delta.start_version() == temp_inc_delta.end_version()\n+                && temp_inc_delta.start_version() == del_pred.version()) {\n+                    DeletePredicatePB* delete_condition = temp_inc_delta.mutable_delete_condition();\n+                    *delete_condition = del_pred;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da90067cedce8eaf6a3c0e7f419ce2d3d4e94b3a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ4NzQzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_snapshot_converter.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyNjowMVrOFyuTeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoyNjowMVrOFyuTeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMTc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (auto& del_pred : delete_conditions) {\n          \n          \n            \n                        if (temp_delta.start_version() == temp_delta.end_version()\n          \n          \n            \n                            && temp_delta.start_version() == del_pred.version()) {\n          \n          \n            \n                                DeletePredicatePB* delete_condition = temp_delta.mutable_delete_condition();\n          \n          \n            \n                                *delete_condition = del_pred;\n          \n          \n            \n                            }\n          \n          \n            \n                    if (temp_delta.start_version() == temp_delta.end_version()) {\n          \n          \n            \n                        for (auto& del_pred : delete_conditions) {\n          \n          \n            \n                            if (temp_delta.start_version() == del_pred.version()) {\n          \n          \n            \n                                DeletePredicatePB* delete_condition = temp_delta.mutable_delete_condition();\n          \n          \n            \n                                *delete_condition = del_pred;\n          \n          \n            \n                            }", "url": "https://github.com/apache/incubator-doris/pull/3044#discussion_r388731769", "createdAt": "2020-03-06T06:26:01Z", "author": {"login": "imay"}, "path": "be/src/olap/olap_snapshot_converter.cpp", "diffHunk": "@@ -131,11 +136,23 @@ OLAPStatus OlapSnapshotConverter::to_tablet_meta_pb(const OLAPHeaderMessage& ola\n     }\n \n     std::unordered_map<Version, RowsetMetaPB*, HashOfVersion> _rs_version_map;\n+    const DelPredicateArray& delete_conditions = olap_header.delete_data_conditions();\n     for (auto& delta : olap_header.delta()) {\n         RowsetId next_id = StorageEngine::instance()->next_rowset_id();\n         RowsetMetaPB* rowset_meta = tablet_meta_pb->add_rs_metas();\n-        convert_to_rowset_meta(delta, next_id, olap_header.tablet_id(), olap_header.schema_hash(), rowset_meta);\n-        Version rowset_version = { delta.start_version(), delta.end_version() };\n+        PDelta temp_delta = delta;\n+        // PDelta is not corresponding with RowsetMeta in DeletePredicate\n+        // Add delete predicate to PDelta from OLAPHeaderMessage.\n+        // Only after this, convert from PDelta to RowsetMeta is valid.\n+        for (auto& del_pred : delete_conditions) {\n+            if (temp_delta.start_version() == temp_delta.end_version()\n+                && temp_delta.start_version() == del_pred.version()) {\n+                    DeletePredicatePB* delete_condition = temp_delta.mutable_delete_condition();\n+                    *delete_condition = del_pred;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da90067cedce8eaf6a3c0e7f419ce2d3d4e94b3a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2072, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}