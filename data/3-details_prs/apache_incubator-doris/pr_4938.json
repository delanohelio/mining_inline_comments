{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NTUyNTg3", "number": 4938, "title": "[Schema change] Support More column type in schema change", "bodyText": "Support modify column type CHAR to TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE/DATE\nand TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE convert to a wider range of numeric types (#4937)\n\n\nUse template to refactor code of types.h and schema_change.cpp to delete redundant code.\n\n\nfix issue:#4937\nProposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged", "createdAt": "2020-11-23T08:25:19Z", "url": "https://github.com/apache/incubator-doris/pull/4938", "merged": true, "mergeCommit": {"oid": "55ce88da340284d2ee9d68f56aa4a6d3f5adaa7c"}, "closed": true, "closedAt": "2020-11-28T01:52:29Z", "author": {"login": "HappenLee"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfQzd1gH2gAyNTI1NTUyNTg3OjA4ZjIyOGIyNTcxMDI0NzAxMDVlOTdjMzE4ODgzOTk3MzhlZmVmYjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgkSUOAFqTUzOTgzNDA3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "08f228b257102470105e97c31888399738efefb0", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/08f228b257102470105e97c31888399738efefb0", "committedDate": "2020-11-23T08:23:35Z", "message": "[Schema change] This pr of 2 mainly change\n\n1. Support modify column type CHAR to TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE/DATE\nand TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE convert to a wider range of numeric types (#4937)\n\n2. Use template to refactor code of types.h and schema_change.cpp to delete redundant code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ae5cd15e6bc696dc8a46734f77ae3000e8cff66", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/7ae5cd15e6bc696dc8a46734f77ae3000e8cff66", "committedDate": "2020-11-23T10:33:59Z", "message": "change indent"}, "afterCommit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/534836046f33a01463d02790847a2c508d1dd88e", "committedDate": "2020-11-23T10:38:41Z", "message": "change indent and remove some code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDUxODg2", "url": "https://github.com/apache/incubator-doris/pull/4938#pullrequestreview-537051886", "createdAt": "2020-11-24T03:31:09Z", "commit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzozMToxMFrOH4qh5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzo0NDo0N1rOH4qxAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTExMA==", "bodyText": "There may use traits ?\nOr use if constexpr (std::is_floating_point_v)) to distinguish the two cases.", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529179110", "createdAt": "2020-11-24T03:31:10Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/types.h", "diffHunk": "@@ -495,12 +496,32 @@ struct BaseFieldtypeTraits : public CppTypeTraits<field_type> {\n     }\n };\n \n+static void prepare_char_before_convert(const void* src) {\n+    Slice* slice = const_cast<Slice*>(reinterpret_cast<const Slice*>(src));\n+    char* buf = slice->data;\n+    auto p = slice->size - 1;\n+    while (p >= 0 && buf[p] == '\\0') {\n+        p--;\n+    }\n+    slice->size = p + 1;\n+}\n+\n template <typename T>\n-OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType*>(src);\n+T convert_from_varchar(const Slice* src_value, StringParser::ParseResult& parse_res, std::true_type) {\n+    return StringParser::string_to_int<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n+}\n+\n+template <typename T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4MjQ2NQ==", "bodyText": "use std::is_signed for what?", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529182465", "createdAt": "2020-11-24T03:43:13Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/types.h", "diffHunk": "@@ -509,98 +530,55 @@ OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n }\n \n template <typename T>\n-OLAPStatus convert_float_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType *>(src);\n-    StringParser::ParseResult parse_res;\n-    T result = StringParser::string_to_float<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n-    if (UNLIKELY(parse_res != StringParser::PARSE_SUCCESS)) {\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-    *reinterpret_cast<T*>(dest) = result;\n-    return OLAPStatus::OLAP_SUCCESS;\n+OLAPStatus arithmetic_convert_from_char(void* dest, const void* src) {\n+    prepare_char_before_convert(src);\n+    return arithmetic_convert_from_varchar<T>(dest, src);\n }\n \n-template<FieldType field_type>\n-struct FieldTypeTraits : public BaseFieldtypeTraits<field_type> { };\n+// Using ArithmeTicFieldtypeTraits to Derived code for OLAP_FIELD_TYPE_XXXINT, OLAP_FIELD_TYPE_FLOAT,\n+// OLAP_FIELD_TYPE_DOUBLE, to reduce redundant code\n+template <FieldType fieldType, bool isArithmetic>\n+struct ArithmeTicFieldtypeTraits : public BaseFieldtypeTraits<fieldType> {\n+    using CppType = typename CppTypeTraits<fieldType>::CppType;\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_BOOL> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_BOOL> {\n     static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const bool*>(src));\n-        return std::string(buf);\n+        return std::to_string(*reinterpret_cast<const CppType*>(src));\n     }\n-    static void set_to_max(void* buf) {\n-        (*(bool*)buf) = true;\n-    }\n-    static void set_to_min(void* buf) {\n-        (*(bool*)buf) = false;\n-    }\n-};\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_TINYINT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_TINYINT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int8_t*>(src));\n-        return std::string(buf);\n-    }\n     static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n         if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n+            return arithmetic_convert_from_varchar<CppType>(dest, src);\n+        } else if (src_type->type() == OLAP_FIELD_TYPE_CHAR) {\n+            return arithmetic_convert_from_char<CppType>(dest, src);\n         }\n         return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n     }\n };\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_SMALLINT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_SMALLINT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int16_t*>(src));\n-        return std::string(buf);\n-    }\n-    static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n-        if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n-        }\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-};\n+template <FieldType fieldType>\n+struct ArithmeTicFieldtypeTraits<fieldType, false> : public BaseFieldtypeTraits<fieldType> {};\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_INT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_INT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int32_t *>(src));\n-        return std::string(buf);\n-    }\n-    static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n-        if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n-        }\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-};\n+template <FieldType fieldType>\n+struct FieldTypeTraits : public ArithmeTicFieldtypeTraits<fieldType,\n+        std::is_arithmetic<typename BaseFieldtypeTraits<fieldType>::CppType>::value && std::is_signed<typename BaseFieldtypeTraits<fieldType>::CppType>::value> {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4Mjk3OQ==", "bodyText": "Numeric may be a better name.", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529182979", "createdAt": "2020-11-24T03:44:47Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/types.h", "diffHunk": "@@ -509,98 +530,55 @@ OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n }\n \n template <typename T>\n-OLAPStatus convert_float_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType *>(src);\n-    StringParser::ParseResult parse_res;\n-    T result = StringParser::string_to_float<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n-    if (UNLIKELY(parse_res != StringParser::PARSE_SUCCESS)) {\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-    *reinterpret_cast<T*>(dest) = result;\n-    return OLAPStatus::OLAP_SUCCESS;\n+OLAPStatus arithmetic_convert_from_char(void* dest, const void* src) {\n+    prepare_char_before_convert(src);\n+    return arithmetic_convert_from_varchar<T>(dest, src);\n }\n \n-template<FieldType field_type>\n-struct FieldTypeTraits : public BaseFieldtypeTraits<field_type> { };\n+// Using ArithmeTicFieldtypeTraits to Derived code for OLAP_FIELD_TYPE_XXXINT, OLAP_FIELD_TYPE_FLOAT,\n+// OLAP_FIELD_TYPE_DOUBLE, to reduce redundant code\n+template <FieldType fieldType, bool isArithmetic>\n+struct ArithmeTicFieldtypeTraits : public BaseFieldtypeTraits<fieldType> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5137decbbcb8a201a3e390f87ad770bdcc9693de", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/5137decbbcb8a201a3e390f87ad770bdcc9693de", "committedDate": "2020-11-24T10:20:43Z", "message": "change indent and remove some code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "534836046f33a01463d02790847a2c508d1dd88e", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/534836046f33a01463d02790847a2c508d1dd88e", "committedDate": "2020-11-23T10:38:41Z", "message": "change indent and remove some code"}, "afterCommit": {"oid": "5137decbbcb8a201a3e390f87ad770bdcc9693de", "author": {"user": {"login": "HappenLee", "name": "HappenLee"}}, "url": "https://github.com/apache/incubator-doris/commit/5137decbbcb8a201a3e390f87ad770bdcc9693de", "committedDate": "2020-11-24T10:20:43Z", "message": "change indent and remove some code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODM0MDc3", "url": "https://github.com/apache/incubator-doris/pull/4938#pullrequestreview-539834077", "createdAt": "2020-11-27T09:39:24Z", "commit": {"oid": "5137decbbcb8a201a3e390f87ad770bdcc9693de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4625, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}