{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzQyNjY0", "number": 3597, "title": "[Bug] fix OrCompoundPredicate predicate fold bug #3596", "bodyText": "fix OrCompoundPredicate predicate fold bug #3596", "createdAt": "2020-05-15T02:37:26Z", "url": "https://github.com/apache/incubator-doris/pull/3597", "merged": true, "mergeCommit": {"oid": "e6588981b4f129fdbb5c1c2e34bd69016259d466"}, "closed": true, "closedAt": "2020-05-18T02:36:14Z", "author": {"login": "wutiangan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchYhy0gH2gAyNDE4MzQyNjY0OjA5MTk0MDcwOTI0MGMwMGM3OGE1M2JiNzNlODg1NDg3MDRiZmM2YmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch2w7dAFqTQxMzA3NzE2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb", "author": {"user": {"login": "wutiangan", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/091940709240c00c78a53bb73e88548704bfc6bb", "committedDate": "2020-05-15T02:20:13Z", "message": "[Bug] fix OrCompoundPredicate predicate fold bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzEzODc0", "url": "https://github.com/apache/incubator-doris/pull/3597#pullrequestreview-412313874", "createdAt": "2020-05-15T02:54:52Z", "commit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1NDo1MlrOGV0x5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1NDo1MlrOGV0x5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzODAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n          \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build (predicate) and (.. or ..)  predicate in", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425538020", "createdAt": "2020-05-15T02:54:52Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzE1MDA0", "url": "https://github.com/apache/incubator-doris/pull/3597#pullrequestreview-412315004", "createdAt": "2020-05-15T02:58:57Z", "commit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1ODo1OFrOGV02Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjo1ODo1OFrOGV02Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzOTA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 if (LOG.isDebugEnabled) {\n          \n          \n            \n                      LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 }", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425539095", "createdAt": "2020-05-15T02:58:58Z", "author": {"login": "wuyunfeng"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n+            // step 1: will build (.. or ..)\n+            result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n+                    temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n+                    : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        }\n         LOG.debug(\"rewrite ors: \" + result.toSql());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091940709240c00c78a53bb73e88548704bfc6bb"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be10dca05ac43f90ebb5069aa306356127448e8", "author": {"user": {"login": "wutiangan", "name": null}}, "url": "https://github.com/apache/incubator-doris/commit/8be10dca05ac43f90ebb5069aa306356127448e8", "committedDate": "2020-05-15T04:10:19Z", "message": "fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc3MTYw", "url": "https://github.com/apache/incubator-doris/pull/3597#pullrequestreview-413077160", "createdAt": "2020-05-16T13:33:54Z", "commit": {"oid": "8be10dca05ac43f90ebb5069aa306356127448e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2652, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}