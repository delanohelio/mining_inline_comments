{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjc5NTQ4", "number": 4677, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzozODozOVrOEn0Ecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo1MjoxOVrOEn1Q1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTgzMDI2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzozODo0MFrOHYlcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzozODo0MFrOHYlcaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // bucket shuffle join is better than boradcast and shuffle join\n          \n          \n            \n                    // bucket shuffle join is better than broadcast and shuffle join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541353", "createdAt": "2020-09-27T07:38:40Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -390,6 +390,28 @@ private PlanFragment createHashJoinFragment(HashJoinNode node, PlanFragment righ\n             node.setColocate(false, reason.get(0));\n         }\n \n+        // bucket shuffle join is better than boradcast and shuffle join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTgzMDY5OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzozOToyN1rOHYlcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzo0MDozM1rOHYldFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541405", "createdAt": "2020-09-27T07:39:27Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTUyNQ==", "bodyText": "And I think if user specify [SHUFFLE] hint, we should try to do bucket shuffle too.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541525", "createdAt": "2020-09-27T07:40:33Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTg0NDY0OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzo1ODo1NVrOHYljUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNzo1ODo1NVrOHYljUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzEyMA==", "bodyText": "Comment is wrong", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543120", "createdAt": "2020-09-27T07:58:55Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTg0ODA4OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwODowMzowMlrOHYlk5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwODowMzowMlrOHYlk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543527", "createdAt": "2020-09-27T08:03:02Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode\n+        if (leftRoot instanceof OlapScanNode) {\n+            return canBucketShuffleJoin(node, leftRoot, rhsHashExprs);\n+        }\n+\n+        return false;\n+    }\n+\n+    //the join expr must contian left table distribute column\n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanNode leftRoot,\n+                                    List<Expr> rhsJoinExprs) {\n+        OlapScanNode leftScanNode = ((OlapScanNode) leftRoot);\n+\n+        //1 the left table must be only one partition\n+        if (leftScanNode.getSelectedPartitionIds().size() > 1) {\n+            return false;\n+        }\n+\n+        DistributionInfo leftDistribution = leftScanNode.getOlapTable().getDefaultDistributionInfo();\n+\n+        if (leftDistribution instanceof HashDistributionInfo ) {\n+            List<Column> leftDistributeColumns = ((HashDistributionInfo) leftDistribution).getDistributionColumns();\n+\n+            List<Column> leftJoinColumns = new ArrayList<>();\n+            List<Expr> rightExprs = new ArrayList<>();\n+            List<BinaryPredicate> eqJoinConjuncts = node.getEqJoinConjuncts();\n+\n+            for (BinaryPredicate eqJoinPredicate : eqJoinConjuncts) {\n+                Expr lhsJoinExpr = eqJoinPredicate.getChild(0);\n+                Expr rhsJoinExpr = eqJoinPredicate.getChild(1);\n+                if (lhsJoinExpr.unwrapSlotRef() == null || rhsJoinExpr.unwrapSlotRef() == null) {\n+                    continue;\n+                }\n+\n+                SlotDescriptor leftSlot = lhsJoinExpr.unwrapSlotRef().getDesc();\n+\n+                leftJoinColumns.add(leftSlot.getColumn());\n+                rightExprs.add(rhsJoinExpr);\n+            }\n+\n+            //2 the join columns should contains all left table distribute columns to enable bucket shuffle join\n+            for (Column distributeColumn : leftDistributeColumns) {\n+                int loc = leftJoinColumns.indexOf(distributeColumn);\n+                // TODO: now support bucket shuffle join when distribute column type different with\n+                // right expr type\n+                if (loc == -1 || !rightExprs.get(loc).getType().equals(distributeColumn.getType())) {\n+                    return false;\n+                }\n+                rhsJoinExprs.add(rightExprs.get(loc));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTkwMzI1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwOToxMzoxM1rOHYl-8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwOToxMzoxM1rOHYl-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MDE5Mg==", "bodyText": "Add comment for this class", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495550192", "createdAt": "2020-09-27T09:13:13Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1399,6 +1429,175 @@ public boolean isDone() {\n \n     }\n \n+    class BucketShuffleJoinController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjAxNzc1OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/data_stream_sender.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo0MDozNlrOHYm09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMjoxMDo1MlrOHYm-tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg==", "bodyText": "Why comment is fvn hash but code is crc32 hash?", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564022", "createdAt": "2020-09-27T11:40:36Z", "author": {"login": "kangkaisen"}, "path": "be/src/runtime/data_stream_sender.cpp", "diffHunk": "@@ -479,7 +495,30 @@ Status DataStreamSender::send(RuntimeState* state, RowBatch* batch) {\n                 hash_val = RawValue::get_hash_value_fvn(\n                     partition_val, ctx->root()->type(), hash_val);\n             }\n-            RETURN_IF_ERROR(_channels[hash_val % num_channels]->add_row(row));\n+            auto target_channel_id = hash_val % num_channels;\n+            RETURN_IF_ERROR(_channels[target_channel_id]->add_row(row));\n+        }\n+    } else if (_part_type == TPartitionType::BUCKET_SHFFULE_HASH_PARTITIONED) {\n+        // hash-partition batch's rows across channels\n+        int num_channels = _channel_shared_ptrs.size();\n+\n+        for (int i = 0; i < batch->num_rows(); ++i) {\n+            TupleRow* row = batch->get_row(i);\n+            size_t hash_val = 0;\n+\n+            for (auto ctx : _partition_expr_ctxs) {\n+                void* partition_val = ctx->get_value(row);\n+                // We can't use the crc hash function here because it does not result\n+                // in uncorrelated hashes with different seeds.  Instead we must use\n+                // fvn hash.\n+                // TODO: fix crc hash/GetHashValue()\n+                //hash_val = RawValue::get_hash_value_fvn(\n+                //    partition_val, ctx->root()->type(), hash_val);\n+                hash_val = RawValue::zlib_crc32(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjA5OA==", "bodyText": "This comment is not right\uff0c It should be deleted.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566098", "createdAt": "2020-09-27T12:06:00Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/data_stream_sender.cpp", "diffHunk": "@@ -479,7 +495,30 @@ Status DataStreamSender::send(RuntimeState* state, RowBatch* batch) {\n                 hash_val = RawValue::get_hash_value_fvn(\n                     partition_val, ctx->root()->type(), hash_val);\n             }\n-            RETURN_IF_ERROR(_channels[hash_val % num_channels]->add_row(row));\n+            auto target_channel_id = hash_val % num_channels;\n+            RETURN_IF_ERROR(_channels[target_channel_id]->add_row(row));\n+        }\n+    } else if (_part_type == TPartitionType::BUCKET_SHFFULE_HASH_PARTITIONED) {\n+        // hash-partition batch's rows across channels\n+        int num_channels = _channel_shared_ptrs.size();\n+\n+        for (int i = 0; i < batch->num_rows(); ++i) {\n+            TupleRow* row = batch->get_row(i);\n+            size_t hash_val = 0;\n+\n+            for (auto ctx : _partition_expr_ctxs) {\n+                void* partition_val = ctx->get_value(row);\n+                // We can't use the crc hash function here because it does not result\n+                // in uncorrelated hashes with different seeds.  Instead we must use\n+                // fvn hash.\n+                // TODO: fix crc hash/GetHashValue()\n+                //hash_val = RawValue::get_hash_value_fvn(\n+                //    partition_val, ctx->root()->type(), hash_val);\n+                hash_val = RawValue::zlib_crc32(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjUxNg==", "bodyText": "This comment is not right\uff0c I will change this part.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566516", "createdAt": "2020-09-27T12:10:52Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/data_stream_sender.cpp", "diffHunk": "@@ -479,7 +495,30 @@ Status DataStreamSender::send(RuntimeState* state, RowBatch* batch) {\n                 hash_val = RawValue::get_hash_value_fvn(\n                     partition_val, ctx->root()->type(), hash_val);\n             }\n-            RETURN_IF_ERROR(_channels[hash_val % num_channels]->add_row(row));\n+            auto target_channel_id = hash_val % num_channels;\n+            RETURN_IF_ERROR(_channels[target_channel_id]->add_row(row));\n+        }\n+    } else if (_part_type == TPartitionType::BUCKET_SHFFULE_HASH_PARTITIONED) {\n+        // hash-partition batch's rows across channels\n+        int num_channels = _channel_shared_ptrs.size();\n+\n+        for (int i = 0; i < batch->num_rows(); ++i) {\n+            TupleRow* row = batch->get_row(i);\n+            size_t hash_val = 0;\n+\n+            for (auto ctx : _partition_expr_ctxs) {\n+                void* partition_val = ctx->get_value(row);\n+                // We can't use the crc hash function here because it does not result\n+                // in uncorrelated hashes with different seeds.  Instead we must use\n+                // fvn hash.\n+                // TODO: fix crc hash/GetHashValue()\n+                //hash_val = RawValue::get_hash_value_fvn(\n+                //    partition_val, ctx->root()->type(), hash_val);\n+                hash_val = RawValue::zlib_crc32(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjAxODQ2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo0MTozNlrOHYm1Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo0MTozNlrOHYm1Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket shuffle join", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564103", "createdAt": "2020-09-27T11:41:36Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjAyNTgwOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo1MjoxOVrOHYm4pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNDozNDoyNVrOHYuK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw==", "bodyText": "If you could abstract the query schedule strategy like Presto and refactor this class, which would be very great.", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564967", "createdAt": "2020-09-27T11:52:19Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -783,13 +784,39 @@ private void computeFragmentExecParams() throws Exception {\n                         params.instanceExecParams.size() + destParams.perExchNumSenders.get(exchId.asInt()));\n             }\n \n-            // add destination host to this fragment's destination\n-            for (int j = 0; j < destParams.instanceExecParams.size(); ++j) {\n-                TPlanFragmentDestination dest = new TPlanFragmentDestination();\n-                dest.fragment_instance_id = destParams.instanceExecParams.get(j).instanceId;\n-                dest.server = toRpcHost(destParams.instanceExecParams.get(j).host);\n-                dest.setBrpcServer(toBrpcHost(destParams.instanceExecParams.get(j).host));\n-                params.destinations.add(dest);\n+            if (bucketShuffleJoinController.isBucketShuffleJoin(destFragment.getFragmentId().asInt())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjQ0OA==", "bodyText": "Yes, It is the future work to do. But this part is complex and has a great impact. I think we need to this work gradually", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566448", "createdAt": "2020-09-27T12:10:05Z", "author": {"login": "HappenLee"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -783,13 +784,39 @@ private void computeFragmentExecParams() throws Exception {\n                         params.instanceExecParams.size() + destParams.perExchNumSenders.get(exchId.asInt()));\n             }\n \n-            // add destination host to this fragment's destination\n-            for (int j = 0; j < destParams.instanceExecParams.size(); ++j) {\n-                TPlanFragmentDestination dest = new TPlanFragmentDestination();\n-                dest.fragment_instance_id = destParams.instanceExecParams.get(j).instanceId;\n-                dest.server = toRpcHost(destParams.instanceExecParams.get(j).host);\n-                dest.setBrpcServer(toBrpcHost(destParams.instanceExecParams.get(j).host));\n-                params.destinations.add(dest);\n+            if (bucketShuffleJoinController.isBucketShuffleJoin(destFragment.getFragmentId().asInt())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NDMwNA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495684304", "createdAt": "2020-09-28T04:34:25Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -783,13 +784,39 @@ private void computeFragmentExecParams() throws Exception {\n                         params.instanceExecParams.size() + destParams.perExchNumSenders.get(exchId.asInt()));\n             }\n \n-            // add destination host to this fragment's destination\n-            for (int j = 0; j < destParams.instanceExecParams.size(); ++j) {\n-                TPlanFragmentDestination dest = new TPlanFragmentDestination();\n-                dest.fragment_instance_id = destParams.instanceExecParams.get(j).instanceId;\n-                dest.server = toRpcHost(destParams.instanceExecParams.get(j).host);\n-                dest.setBrpcServer(toBrpcHost(destParams.instanceExecParams.get(j).host));\n-                params.destinations.add(dest);\n+            if (bucketShuffleJoinController.isBucketShuffleJoin(destFragment.getFragmentId().asInt())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw=="}, "originalCommit": {"oid": "882998243ad8f1739f41e5b665f05c387e05efa3"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}