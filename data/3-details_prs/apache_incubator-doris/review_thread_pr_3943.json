{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTk1OTgy", "number": 3943, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjozNjo0OVrOEJTp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjowNzo0NlrOEJZnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk0Njc2OnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjozNjo0OVrOGpynoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTo1NzozM1rOGp5ndA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NDE0NA==", "bodyText": "Should the column_cond be null here?\nWe already filter the data by column conditions before.", "url": "https://github.com/apache/incubator-doris/pull/3943#discussion_r446474144", "createdAt": "2020-06-27T02:36:49Z", "author": {"login": "morningman"}, "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "diffHunk": "@@ -253,30 +253,37 @@ Status SegmentIterator::_get_row_ranges_from_conditions(RowRanges* condition_row\n     _opts.stats->rows_bf_filtered += (pre_size - condition_row_ranges->count());\n \n     RowRanges zone_map_row_ranges = RowRanges::create_single(num_rows());\n-    std::map<int, std::vector<CondColumn*>> column_delete_conditions;\n-    // zone map will use delete conditions\n-    for (auto& delete_condition : _opts.delete_conditions) {\n-        for (auto& column_condition : delete_condition->columns()) {\n-            cids.insert(column_condition.first);\n-            std::vector<CondColumn*>& conditions = column_delete_conditions[column_condition.first];\n-            conditions.emplace_back(column_condition.second);\n-        }\n-    }\n+    // second filter data by zone map\n     for (auto& cid : cids) {\n         // get row ranges by zone map of this column,\n         RowRanges column_row_ranges = RowRanges::create_single(num_rows());\n-        CondColumn* column_cond = nullptr;\n-        if (_opts.conditions != nullptr) {\n-            column_cond = _opts.conditions->get_column(cid);\n-        }\n+        CondColumn* column_cond = _opts.conditions->get_column(cid);\n         RETURN_IF_ERROR(\n-            _column_iterators[cid]->get_row_ranges_by_zone_map(\n-                column_cond,\n-                column_delete_conditions[cid],\n-                &column_row_ranges));\n-        // intersection different columns's row ranges to get final row ranges by zone map\n+                _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                        column_cond,\n+                        nullptr,\n+                        &column_row_ranges));\n+        // intersect different columns's row ranges to get final row ranges by zone map\n         RowRanges::ranges_intersection(zone_map_row_ranges, column_row_ranges, &zone_map_row_ranges);\n     }\n+\n+    // final filter data with delete conditions\n+    for (auto& delete_condition : _opts.delete_conditions) {\n+        RowRanges delete_condition_row_ranges = RowRanges::create_single(0);\n+        for (auto& delete_column_condition : delete_condition->columns()) {\n+            const int32_t cid = delete_column_condition.first;\n+            CondColumn* column_cond = _opts.conditions->get_column(cid);\n+            RowRanges single_delete_condition_row_ranges = RowRanges::create_single(num_rows());\n+            RETURN_IF_ERROR(\n+                    _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                            column_cond,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b585a16288148620c3d54058892d2e2c6b1ac3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNjExNg==", "bodyText": "@morningman here we use column_cond to skip zone that not need read, so we don't need to process skipped zone with delete conditions", "url": "https://github.com/apache/incubator-doris/pull/3943#discussion_r446526116", "createdAt": "2020-06-27T13:19:46Z", "author": {"login": "caiconghui"}, "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "diffHunk": "@@ -253,30 +253,37 @@ Status SegmentIterator::_get_row_ranges_from_conditions(RowRanges* condition_row\n     _opts.stats->rows_bf_filtered += (pre_size - condition_row_ranges->count());\n \n     RowRanges zone_map_row_ranges = RowRanges::create_single(num_rows());\n-    std::map<int, std::vector<CondColumn*>> column_delete_conditions;\n-    // zone map will use delete conditions\n-    for (auto& delete_condition : _opts.delete_conditions) {\n-        for (auto& column_condition : delete_condition->columns()) {\n-            cids.insert(column_condition.first);\n-            std::vector<CondColumn*>& conditions = column_delete_conditions[column_condition.first];\n-            conditions.emplace_back(column_condition.second);\n-        }\n-    }\n+    // second filter data by zone map\n     for (auto& cid : cids) {\n         // get row ranges by zone map of this column,\n         RowRanges column_row_ranges = RowRanges::create_single(num_rows());\n-        CondColumn* column_cond = nullptr;\n-        if (_opts.conditions != nullptr) {\n-            column_cond = _opts.conditions->get_column(cid);\n-        }\n+        CondColumn* column_cond = _opts.conditions->get_column(cid);\n         RETURN_IF_ERROR(\n-            _column_iterators[cid]->get_row_ranges_by_zone_map(\n-                column_cond,\n-                column_delete_conditions[cid],\n-                &column_row_ranges));\n-        // intersection different columns's row ranges to get final row ranges by zone map\n+                _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                        column_cond,\n+                        nullptr,\n+                        &column_row_ranges));\n+        // intersect different columns's row ranges to get final row ranges by zone map\n         RowRanges::ranges_intersection(zone_map_row_ranges, column_row_ranges, &zone_map_row_ranges);\n     }\n+\n+    // final filter data with delete conditions\n+    for (auto& delete_condition : _opts.delete_conditions) {\n+        RowRanges delete_condition_row_ranges = RowRanges::create_single(0);\n+        for (auto& delete_column_condition : delete_condition->columns()) {\n+            const int32_t cid = delete_column_condition.first;\n+            CondColumn* column_cond = _opts.conditions->get_column(cid);\n+            RowRanges single_delete_condition_row_ranges = RowRanges::create_single(num_rows());\n+            RETURN_IF_ERROR(\n+                    _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                            column_cond,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NDE0NA=="}, "originalCommit": {"oid": "b3b585a16288148620c3d54058892d2e2c6b1ac3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4ODc4OA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3943#discussion_r446588788", "createdAt": "2020-06-28T01:57:33Z", "author": {"login": "morningman"}, "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "diffHunk": "@@ -253,30 +253,37 @@ Status SegmentIterator::_get_row_ranges_from_conditions(RowRanges* condition_row\n     _opts.stats->rows_bf_filtered += (pre_size - condition_row_ranges->count());\n \n     RowRanges zone_map_row_ranges = RowRanges::create_single(num_rows());\n-    std::map<int, std::vector<CondColumn*>> column_delete_conditions;\n-    // zone map will use delete conditions\n-    for (auto& delete_condition : _opts.delete_conditions) {\n-        for (auto& column_condition : delete_condition->columns()) {\n-            cids.insert(column_condition.first);\n-            std::vector<CondColumn*>& conditions = column_delete_conditions[column_condition.first];\n-            conditions.emplace_back(column_condition.second);\n-        }\n-    }\n+    // second filter data by zone map\n     for (auto& cid : cids) {\n         // get row ranges by zone map of this column,\n         RowRanges column_row_ranges = RowRanges::create_single(num_rows());\n-        CondColumn* column_cond = nullptr;\n-        if (_opts.conditions != nullptr) {\n-            column_cond = _opts.conditions->get_column(cid);\n-        }\n+        CondColumn* column_cond = _opts.conditions->get_column(cid);\n         RETURN_IF_ERROR(\n-            _column_iterators[cid]->get_row_ranges_by_zone_map(\n-                column_cond,\n-                column_delete_conditions[cid],\n-                &column_row_ranges));\n-        // intersection different columns's row ranges to get final row ranges by zone map\n+                _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                        column_cond,\n+                        nullptr,\n+                        &column_row_ranges));\n+        // intersect different columns's row ranges to get final row ranges by zone map\n         RowRanges::ranges_intersection(zone_map_row_ranges, column_row_ranges, &zone_map_row_ranges);\n     }\n+\n+    // final filter data with delete conditions\n+    for (auto& delete_condition : _opts.delete_conditions) {\n+        RowRanges delete_condition_row_ranges = RowRanges::create_single(0);\n+        for (auto& delete_column_condition : delete_condition->columns()) {\n+            const int32_t cid = delete_column_condition.first;\n+            CondColumn* column_cond = _opts.conditions->get_column(cid);\n+            RowRanges single_delete_condition_row_ranges = RowRanges::create_single(num_rows());\n+            RETURN_IF_ERROR(\n+                    _column_iterators[cid]->get_row_ranges_by_zone_map(\n+                            column_cond,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NDE0NA=="}, "originalCommit": {"oid": "b3b585a16288148620c3d54058892d2e2c6b1ac3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjkyMzE1OnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjowNzo0NlrOGp5qPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoyNDowMlrOGp5uXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTUwMw==", "bodyText": "_opts.conditions may be nullptr here.\nYou need to check it before use, like the old way.", "url": "https://github.com/apache/incubator-doris/pull/3943#discussion_r446589503", "createdAt": "2020-06-28T02:07:46Z", "author": {"login": "morningman"}, "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "diffHunk": "@@ -253,30 +253,37 @@ Status SegmentIterator::_get_row_ranges_from_conditions(RowRanges* condition_row\n     _opts.stats->rows_bf_filtered += (pre_size - condition_row_ranges->count());\n \n     RowRanges zone_map_row_ranges = RowRanges::create_single(num_rows());\n-    std::map<int, std::vector<CondColumn*>> column_delete_conditions;\n-    // zone map will use delete conditions\n-    for (auto& delete_condition : _opts.delete_conditions) {\n-        for (auto& column_condition : delete_condition->columns()) {\n-            cids.insert(column_condition.first);\n-            std::vector<CondColumn*>& conditions = column_delete_conditions[column_condition.first];\n-            conditions.emplace_back(column_condition.second);\n-        }\n-    }\n+    // second filter data by zone map\n     for (auto& cid : cids) {\n         // get row ranges by zone map of this column,\n         RowRanges column_row_ranges = RowRanges::create_single(num_rows());\n-        CondColumn* column_cond = nullptr;\n-        if (_opts.conditions != nullptr) {\n-            column_cond = _opts.conditions->get_column(cid);\n-        }\n+        CondColumn* column_cond = _opts.conditions->get_column(cid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b585a16288148620c3d54058892d2e2c6b1ac3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDU1OA==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/3943#discussion_r446590558", "createdAt": "2020-06-28T02:24:02Z", "author": {"login": "caiconghui"}, "path": "be/src/olap/rowset/segment_v2/segment_iterator.cpp", "diffHunk": "@@ -253,30 +253,37 @@ Status SegmentIterator::_get_row_ranges_from_conditions(RowRanges* condition_row\n     _opts.stats->rows_bf_filtered += (pre_size - condition_row_ranges->count());\n \n     RowRanges zone_map_row_ranges = RowRanges::create_single(num_rows());\n-    std::map<int, std::vector<CondColumn*>> column_delete_conditions;\n-    // zone map will use delete conditions\n-    for (auto& delete_condition : _opts.delete_conditions) {\n-        for (auto& column_condition : delete_condition->columns()) {\n-            cids.insert(column_condition.first);\n-            std::vector<CondColumn*>& conditions = column_delete_conditions[column_condition.first];\n-            conditions.emplace_back(column_condition.second);\n-        }\n-    }\n+    // second filter data by zone map\n     for (auto& cid : cids) {\n         // get row ranges by zone map of this column,\n         RowRanges column_row_ranges = RowRanges::create_single(num_rows());\n-        CondColumn* column_cond = nullptr;\n-        if (_opts.conditions != nullptr) {\n-            column_cond = _opts.conditions->get_column(cid);\n-        }\n+        CondColumn* column_cond = _opts.conditions->get_column(cid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTUwMw=="}, "originalCommit": {"oid": "b3b585a16288148620c3d54058892d2e2c6b1ac3"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1311, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}