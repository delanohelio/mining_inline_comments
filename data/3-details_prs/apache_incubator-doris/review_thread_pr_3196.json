{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDUwMDAy", "number": 3196, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NzozOFrODrI4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1NTo1OFrODrqCUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYwNzgxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NzozOFrOF7Tj7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNToxNDowNlrOF73pEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMDc5OQ==", "bodyText": "the method is low efficiency, use sourceTableIdList.retainAll(targetTableIdList);sourceTableIdList.isEmpty() instread?", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r397730799", "createdAt": "2020-03-25T09:57:38Z", "author": {"login": "WingsGo"}, "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "diffHunk": "@@ -821,6 +821,24 @@ public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId)\n         }\n         return true;\n     }\n+\n+    // check if there exists a intersection between the source tableId list and target tableId list\n+    // if one of them is null or empty, that means that we don't know related tables in tableList,\n+    // we think the two lists may have intersection for right ordered txns\n+    public boolean isIntersectionNotEmpty(List<Long> sourceTableIdList, List<Long> targetTableIdList) {\n+        if (sourceTableIdList == null || sourceTableIdList.isEmpty() || targetTableIdList == null ||\n+                targetTableIdList.isEmpty()) {\n+            return true;\n+        }\n+        for (int i = 0; i < sourceTableIdList.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b320477b482e575eb226598f01a7414e5540a35"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyMTkzNg==", "bodyText": "the method is low efficiency, use sourceTableIdList.retainAll(targetTableIdList);sourceTableIdList.isEmpty() instread?\n\nin most case the table list size is 1, and we should not modify the table list content", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398321936", "createdAt": "2020-03-26T05:14:06Z", "author": {"login": "caiconghui"}, "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "diffHunk": "@@ -821,6 +821,24 @@ public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId)\n         }\n         return true;\n     }\n+\n+    // check if there exists a intersection between the source tableId list and target tableId list\n+    // if one of them is null or empty, that means that we don't know related tables in tableList,\n+    // we think the two lists may have intersection for right ordered txns\n+    public boolean isIntersectionNotEmpty(List<Long> sourceTableIdList, List<Long> targetTableIdList) {\n+        if (sourceTableIdList == null || sourceTableIdList.isEmpty() || targetTableIdList == null ||\n+                targetTableIdList.isEmpty()) {\n+            return true;\n+        }\n+        for (int i = 0; i < sourceTableIdList.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMDc5OQ=="}, "originalCommit": {"oid": "4b320477b482e575eb226598f01a7414e5540a35"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDc2MzMzOnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/load/loadv2/LoadJobTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MTozNVrOF8FXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MTozNVrOF8FXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0Njc5OA==", "bodyText": "unused imported\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398546798", "createdAt": "2020-03-26T12:51:35Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/load/loadv2/LoadJobTest.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n package org.apache.doris.load.loadv2;\n \n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDc2OTQ3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MzoxM1rOF8FbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1MzoxM1rOF8FbZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NzgxNQ==", "bodyText": "init tableIdList to new list. empty list size is also zero, then we don't need this if else.", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398547815", "createdAt": "2020-03-26T12:53:13Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "diffHunk": "@@ -533,6 +544,14 @@ public void write(DataOutput out) throws IOException {\n         }\n         out.writeLong(callbackId);\n         out.writeLong(timeoutMs);\n+        if (tableIdList != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDc4NzA4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1Nzo0MlrOF8FmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMjo1Nzo0MlrOF8FmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MDYxMw==", "bodyText": "could use CollectionUtils.isEmpty", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398550613", "createdAt": "2020-03-26T12:57:42Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "diffHunk": "@@ -802,25 +802,38 @@ public void finishTransaction(long transactionId, Set<Long> errorReplicaIds) thr\n     }\n     \n     // check if there exists a load job before the endTransactionId have all finished\n-    // load job maybe started but could not know the affected table id, so that we not check by table\n-    public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId) {\n-        readLock();\n-        try {\n-            for (Map.Entry<Long, TransactionState> entry : idToTransactionState.entrySet()) {\n-                if (entry.getValue().getDbId() != dbId || !entry.getValue().isRunning()) {\n-                    continue;\n-                }\n-                if (entry.getKey() <= endTransactionId) {\n-                    LOG.debug(\"find a running txn with txn_id={} on db: {}, less than watermark txn_id {}\",\n-                            entry.getKey(), dbId, endTransactionId);\n-                    return false;\n-                }\n+    public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId, List<Long> tableIdList) {\n+        for (Map.Entry<Long, TransactionState> entry : idToTransactionState.entrySet()) {\n+            if (entry.getValue().getDbId() != dbId || !isIntersectionNotEmpty(entry.getValue().getTableIdList(),\n+                    tableIdList) || !entry.getValue().isRunning()) {\n+                continue;\n+            }\n+            if (entry.getKey() <= endTransactionId) {\n+                LOG.debug(\"find a running txn with txn_id={} on db: {}, less than watermark txn_id {}\",\n+                        entry.getKey(), dbId, endTransactionId);\n+                return false;\n             }\n-        } finally {\n-            readUnlock();\n         }\n         return true;\n     }\n+\n+    // check if there exists a intersection between the source tableId list and target tableId list\n+    // if one of them is null or empty, that means that we don't know related tables in tableList,\n+    // we think the two lists may have intersection for right ordered txns\n+    public boolean isIntersectionNotEmpty(List<Long> sourceTableIdList, List<Long> targetTableIdList) {\n+        if (sourceTableIdList == null || sourceTableIdList.isEmpty() || targetTableIdList == null ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDgzNDQ4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowOTo0MlrOF8GDoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzowOTo0MlrOF8GDoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1ODExMw==", "bodyText": "Why not use equals\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398558113", "createdAt": "2020-03-26T13:09:42Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "diffHunk": "@@ -802,25 +802,38 @@ public void finishTransaction(long transactionId, Set<Long> errorReplicaIds) thr\n     }\n     \n     // check if there exists a load job before the endTransactionId have all finished\n-    // load job maybe started but could not know the affected table id, so that we not check by table\n-    public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId) {\n-        readLock();\n-        try {\n-            for (Map.Entry<Long, TransactionState> entry : idToTransactionState.entrySet()) {\n-                if (entry.getValue().getDbId() != dbId || !entry.getValue().isRunning()) {\n-                    continue;\n-                }\n-                if (entry.getKey() <= endTransactionId) {\n-                    LOG.debug(\"find a running txn with txn_id={} on db: {}, less than watermark txn_id {}\",\n-                            entry.getKey(), dbId, endTransactionId);\n-                    return false;\n-                }\n+    public boolean isPreviousTransactionsFinished(long endTransactionId, long dbId, List<Long> tableIdList) {\n+        for (Map.Entry<Long, TransactionState> entry : idToTransactionState.entrySet()) {\n+            if (entry.getValue().getDbId() != dbId || !isIntersectionNotEmpty(entry.getValue().getTableIdList(),\n+                    tableIdList) || !entry.getValue().isRunning()) {\n+                continue;\n+            }\n+            if (entry.getKey() <= endTransactionId) {\n+                LOG.debug(\"find a running txn with txn_id={} on db: {}, less than watermark txn_id {}\",\n+                        entry.getKey(), dbId, endTransactionId);\n+                return false;\n             }\n-        } finally {\n-            readUnlock();\n         }\n         return true;\n     }\n+\n+    // check if there exists a intersection between the source tableId list and target tableId list\n+    // if one of them is null or empty, that means that we don't know related tables in tableList,\n+    // we think the two lists may have intersection for right ordered txns\n+    public boolean isIntersectionNotEmpty(List<Long> sourceTableIdList, List<Long> targetTableIdList) {\n+        if (sourceTableIdList == null || sourceTableIdList.isEmpty() || targetTableIdList == null ||\n+                targetTableIdList.isEmpty()) {\n+            return true;\n+        }\n+        for (int i = 0; i < sourceTableIdList.size(); i++) {\n+            for (int j = 0; j < targetTableIdList.size(); j++) {\n+                if (sourceTableIdList.get(i).longValue() == targetTableIdList.get(j).longValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTAzMjczOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1NDoxOFrOF8IACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1NDoxOFrOF8IACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTk2MQ==", "bodyText": "Why init with size 1?", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398589961", "createdAt": "2020-03-26T13:54:18Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "diffHunk": "@@ -564,5 +583,13 @@ public void readFields(DataInput in) throws IOException {\n             callbackId = in.readLong();\n             timeoutMs = in.readLong();\n         }\n+\n+        if (Catalog.getCurrentCatalogJournalVersion() >= FeMetaVersion.VERSION_79) {\n+            tableIdList = new ArrayList<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTA0MDgwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo1NTo1OFrOF8IFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0NjoxMVrOF8KcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5MTI1OA==", "bodyText": "How about using a HashSet to speed up the find?", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398591258", "createdAt": "2020-03-26T13:55:58Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "diffHunk": "@@ -126,6 +129,7 @@ public String toString() {\n     }\n \n     private long dbId;\n+    private List<Long> tableIdList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyOTkyMg==", "bodyText": "actually, in most case ,the table list size is 1, and use list instead of set ,we can reduce memory usage if there are many trasactions with little performance loss", "url": "https://github.com/apache/incubator-doris/pull/3196#discussion_r398629922", "createdAt": "2020-03-26T14:46:11Z", "author": {"login": "caiconghui"}, "path": "fe/src/main/java/org/apache/doris/transaction/TransactionState.java", "diffHunk": "@@ -126,6 +129,7 @@ public String toString() {\n     }\n \n     private long dbId;\n+    private List<Long> tableIdList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5MTI1OA=="}, "originalCommit": {"oid": "66cad442740f6b4b87f001a60d0ce3ed657f3e96"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1813, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}