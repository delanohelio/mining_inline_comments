{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjg1MDA1", "number": 5104, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1NDo0OVrOFJqnlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowOToxOFrOFJu_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc5NzY0OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1NDo0OVrOIMF2jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1NDo0OVrOIMF2jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTcxMA==", "bodyText": "Please update the old comment", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549549710", "createdAt": "2020-12-29T02:54:49Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1276,10 +1276,22 @@ private void computeScanRangeAssignmentByColocate(\n     }\n \n     // randomly choose a backend from the TScanRangeLocations for a certain bucket sequence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa6aba9853ee555a70ba6cd78754de43f742d802"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgwMDQ1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo1Njo0N1rOIMF4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxNTozOVrOIMKtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MDA4Mw==", "bodyText": "These codes are also used in computeScanRangeAssignmentByScheduler, would better abstract these codes to a method\n            Long minAssignedBytes = Long.MAX_VALUE;\n            TScanRangeLocation minLocation = null;\n            for (final TScanRangeLocation location : scanRangeLocations.getLocations()) {\n                Long assignedBytes = findOrInsert(assignedBytesPerHost, location.server, 0L);\n                if (assignedBytes < minAssignedBytes) {\n                    minAssignedBytes = assignedBytes;\n                    minLocation = location;\n                }\n            }", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549550083", "createdAt": "2020-12-29T02:56:47Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1276,10 +1276,22 @@ private void computeScanRangeAssignmentByColocate(\n     }\n \n     // randomly choose a backend from the TScanRangeLocations for a certain bucket sequence.\n-    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq) throws Exception {\n-        int randomLocation = new Random().nextInt(seqLocation.locations.size());\n+    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq,\n+                                                          HashMap<TNetworkAddress, Long> assignedBytesPerHost) throws Exception {\n+        Long minAssignedBytes = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa6aba9853ee555a70ba6cd78754de43f742d802"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyOTM1NQ==", "bodyText": "Thanks for your code review. The code has been improved.", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549629355", "createdAt": "2020-12-29T09:15:39Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1276,10 +1276,22 @@ private void computeScanRangeAssignmentByColocate(\n     }\n \n     // randomly choose a backend from the TScanRangeLocations for a certain bucket sequence.\n-    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq) throws Exception {\n-        int randomLocation = new Random().nextInt(seqLocation.locations.size());\n+    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq,\n+                                                          HashMap<TNetworkAddress, Long> assignedBytesPerHost) throws Exception {\n+        Long minAssignedBytes = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MDA4Mw=="}, "originalCommit": {"oid": "aa6aba9853ee555a70ba6cd78754de43f742d802"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwNzgyOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/SimpleScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNjo0NlrOIMLtqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyNTowMlrOIMMEWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTczNw==", "bodyText": "Why add this method?  The diff between getLocation and getHost is first arg, but we could get long backendId from TScanRangeLocation minLocation?", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549645737", "createdAt": "2020-12-29T10:06:46Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/SimpleScheduler.java", "diffHunk": "@@ -92,6 +92,38 @@ public static TNetworkAddress getHost(long backendId,\n                         backends, locations.size()));\n     }\n \n+    public static TScanRangeLocation getLocation(TScanRangeLocation minLocation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3819fb6639599cdef5258c4c8ddd58ab23cc634"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU0NA==", "bodyText": "Because function computeScanRangeAssignmentByScheduler need minLocation to set volume_id. Therefore it must return param minLocation\n// Volume is optional, so we need to set the value and the is-set bit\nscanRangeParams.setVolumeId(minLocation.volume_id);", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549651544", "createdAt": "2020-12-29T10:25:02Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/SimpleScheduler.java", "diffHunk": "@@ -92,6 +92,38 @@ public static TNetworkAddress getHost(long backendId,\n                         backends, locations.size()));\n     }\n \n+    public static TScanRangeLocation getLocation(TScanRangeLocation minLocation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTczNw=="}, "originalCommit": {"oid": "b3819fb6639599cdef5258c4c8ddd58ab23cc634"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxNDA1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowOToxOFrOIMLxPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyNToxOFrOIMMEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjY1NQ==", "bodyText": "I think we need a more concrete name. Such as selectBackendsByRoundRobin", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549646655", "createdAt": "2020-12-29T10:09:18Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1275,15 +1275,40 @@ private void computeScanRangeAssignmentByColocate(\n         }\n     }\n \n-    // randomly choose a backend from the TScanRangeLocations for a certain bucket sequence.\n-    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq) throws Exception {\n-        int randomLocation = new Random().nextInt(seqLocation.locations.size());\n+    //ensure bucket sequence distribued to every host evenly\n+    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq,\n+                                                          HashMap<TNetworkAddress, Long> assignedBytesPerHost) throws Exception {\n         Reference<Long> backendIdRef = new Reference<Long>();\n-        TNetworkAddress execHostPort = SimpleScheduler.getHost(seqLocation.locations.get(randomLocation).backend_id, seqLocation.locations, this.idToBackend, backendIdRef);\n+        distributeHost(seqLocation, assignedBytesPerHost, backendIdRef);\n+        Backend backend = this.idToBackend.get(backendIdRef.getRef());\n+        TNetworkAddress execHostPort = new TNetworkAddress(backend.getHost(), backend.getBePort());\n         this.addressToBackendID.put(execHostPort, backendIdRef.getRef());\n         this.fragmentIdToSeqToAddressMap.get(fragmentId).put(bucketSeq, execHostPort);\n     }\n \n+    public TScanRangeLocation distributeHost(TScanRangeLocations seqLocation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3819fb6639599cdef5258c4c8ddd58ab23cc634"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTYxNQ==", "bodyText": "ok. I will modify it.", "url": "https://github.com/apache/incubator-doris/pull/5104#discussion_r549651615", "createdAt": "2020-12-29T10:25:18Z", "author": {"login": "xinghuayu007"}, "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1275,15 +1275,40 @@ private void computeScanRangeAssignmentByColocate(\n         }\n     }\n \n-    // randomly choose a backend from the TScanRangeLocations for a certain bucket sequence.\n-    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq) throws Exception {\n-        int randomLocation = new Random().nextInt(seqLocation.locations.size());\n+    //ensure bucket sequence distribued to every host evenly\n+    private void getExecHostPortForFragmentIDAndBucketSeq(TScanRangeLocations seqLocation, PlanFragmentId fragmentId, Integer bucketSeq,\n+                                                          HashMap<TNetworkAddress, Long> assignedBytesPerHost) throws Exception {\n         Reference<Long> backendIdRef = new Reference<Long>();\n-        TNetworkAddress execHostPort = SimpleScheduler.getHost(seqLocation.locations.get(randomLocation).backend_id, seqLocation.locations, this.idToBackend, backendIdRef);\n+        distributeHost(seqLocation, assignedBytesPerHost, backendIdRef);\n+        Backend backend = this.idToBackend.get(backendIdRef.getRef());\n+        TNetworkAddress execHostPort = new TNetworkAddress(backend.getHost(), backend.getBePort());\n         this.addressToBackendID.put(execHostPort, backendIdRef.getRef());\n         this.fragmentIdToSeqToAddressMap.get(fragmentId).put(bucketSeq, execHostPort);\n     }\n \n+    public TScanRangeLocation distributeHost(TScanRangeLocations seqLocation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjY1NQ=="}, "originalCommit": {"oid": "b3819fb6639599cdef5258c4c8ddd58ab23cc634"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}