{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTk0MTQx", "number": 4705, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxMDo1NVrOEroiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxNTo0MlrOErorbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTg4Mzc1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/cup/sql_parser.cup", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxMDo1NVrOHegi3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1Mjo0OFrOHenoew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MjU0Mw==", "bodyText": "is opt_external:isExternal necessary?", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501752543", "createdAt": "2020-10-08T14:10:55Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/cup/sql_parser.cup", "diffHunk": "@@ -1128,6 +1128,10 @@ create_stmt ::=\n         RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, indexes, engineName, keys, partition,\n         distribution, tblProperties, extProperties, tableComment, index);\n     :}\n+    | KW_CREATE opt_external:isExternal KW_TABLE opt_if_not_exists:ifNotExists table_name:name KW_LIKE table_name:existed_name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2ODY2Nw==", "bodyText": "yes, it is unnecessary, but if I remove it, it will cause shift/reduce conflict, maybe you can help me how to fix it?", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501868667", "createdAt": "2020-10-08T16:52:48Z", "author": {"login": "WingsGo"}, "path": "fe/fe-core/src/main/cup/sql_parser.cup", "diffHunk": "@@ -1128,6 +1128,10 @@ create_stmt ::=\n         RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, indexes, engineName, keys, partition,\n         distribution, tblProperties, extProperties, tableComment, index);\n     :}\n+    | KW_CREATE opt_external:isExternal KW_TABLE opt_if_not_exists:ifNotExists table_name:name KW_LIKE table_name:existed_name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MjU0Mw=="}, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTkwNzAzOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/CreateTableLikeStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxNTo0MlrOHegxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1Mjo1NFrOHenouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjE5NA==", "bodyText": "line 102 to line 118 is better moved to createTableLike() in Catalog.java.\nBecause analysis phase is usually used to analyze grammar, not semantics.", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501756194", "createdAt": "2020-10-08T14:15:42Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/CreateTableLikeStmt.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.util.SqlParserUtils;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+\n+/**\n+ * @author wangcong\n+ * @version 1.0\n+ * @date 2020/10/7 10:32 \u4e0a\u5348\n+ */\n+public class CreateTableLikeStmt extends DdlStmt {\n+    private static final Logger LOG = LogManager.getLogger(CreateTableLikeStmt.class);\n+\n+    private CreateTableStmt parsedCreateTableStmt;\n+    private final boolean isExternal;\n+    private final boolean ifNotExists;\n+    private final TableName tableName;\n+    private final TableName existedTableName;\n+\n+    public CreateTableLikeStmt(boolean ifNotExists, boolean isExternal, TableName tableName, TableName existedTableName) {\n+        this.ifNotExists = ifNotExists;\n+        this.isExternal = isExternal;\n+        this.tableName = tableName;\n+        this.existedTableName = existedTableName;\n+    }\n+\n+    public boolean isSetIfNotExists() {\n+        return ifNotExists;\n+    }\n+\n+    public boolean isExternal() {\n+        return isExternal;\n+    }\n+\n+    public String getDbName() {\n+        return tableName.getDb();\n+    }\n+\n+    public String getTableName() {\n+        return tableName.getTbl();\n+    }\n+\n+    public String getExistedDbName() {\n+        return existedTableName.getDb();\n+    }\n+\n+    public String getExistedTableName() {\n+        return existedTableName.getTbl();\n+    }\n+\n+    public CreateTableStmt getParsedCreateTableStmt() {\n+        return parsedCreateTableStmt;\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws UserException {\n+        super.analyze(analyzer);\n+        existedTableName.analyze(analyzer);\n+        ConnectContext ctx = ConnectContext.get();\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, existedTableName.getDb(),\n+                existedTableName.getTbl(), PrivPredicate.SELECT)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"SELECT\");\n+        }\n+\n+        tableName.analyze(analyzer);\n+        FeNameFormat.checkTableName(getTableName());\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, tableName.getDb(),\n+                tableName.getTbl(), PrivPredicate.CREATE)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CREATE\");\n+        }\n+\n+        Database db = Catalog.getCurrentCatalog().getDb(getExistedDbName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2ODcyOA==", "bodyText": "done", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501868728", "createdAt": "2020-10-08T16:52:54Z", "author": {"login": "WingsGo"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/CreateTableLikeStmt.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.util.SqlParserUtils;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+\n+/**\n+ * @author wangcong\n+ * @version 1.0\n+ * @date 2020/10/7 10:32 \u4e0a\u5348\n+ */\n+public class CreateTableLikeStmt extends DdlStmt {\n+    private static final Logger LOG = LogManager.getLogger(CreateTableLikeStmt.class);\n+\n+    private CreateTableStmt parsedCreateTableStmt;\n+    private final boolean isExternal;\n+    private final boolean ifNotExists;\n+    private final TableName tableName;\n+    private final TableName existedTableName;\n+\n+    public CreateTableLikeStmt(boolean ifNotExists, boolean isExternal, TableName tableName, TableName existedTableName) {\n+        this.ifNotExists = ifNotExists;\n+        this.isExternal = isExternal;\n+        this.tableName = tableName;\n+        this.existedTableName = existedTableName;\n+    }\n+\n+    public boolean isSetIfNotExists() {\n+        return ifNotExists;\n+    }\n+\n+    public boolean isExternal() {\n+        return isExternal;\n+    }\n+\n+    public String getDbName() {\n+        return tableName.getDb();\n+    }\n+\n+    public String getTableName() {\n+        return tableName.getTbl();\n+    }\n+\n+    public String getExistedDbName() {\n+        return existedTableName.getDb();\n+    }\n+\n+    public String getExistedTableName() {\n+        return existedTableName.getTbl();\n+    }\n+\n+    public CreateTableStmt getParsedCreateTableStmt() {\n+        return parsedCreateTableStmt;\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws UserException {\n+        super.analyze(analyzer);\n+        existedTableName.analyze(analyzer);\n+        ConnectContext ctx = ConnectContext.get();\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, existedTableName.getDb(),\n+                existedTableName.getTbl(), PrivPredicate.SELECT)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"SELECT\");\n+        }\n+\n+        tableName.analyze(analyzer);\n+        FeNameFormat.checkTableName(getTableName());\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, tableName.getDb(),\n+                tableName.getTbl(), PrivPredicate.CREATE)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CREATE\");\n+        }\n+\n+        Database db = Catalog.getCurrentCatalog().getDb(getExistedDbName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjE5NA=="}, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 967, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}