{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTc4ODYz", "number": 3898, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozMDowOFrOEGrIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo0MToxNFrOEHFlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDMzNTI5OnYy", "diffSide": "RIGHT", "path": "be/src/exprs/cast_functions.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozMDowOFrOGlnWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNTozOFrOGlrWvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NTI0Nw==", "bodyText": "Brackets is not aligned.", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442095247", "createdAt": "2020-06-18T09:30:08Z", "author": {"login": "chaoyli"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;\n+        BooleanVal ret;\n+        ret.val = StringParser::string_to_bool(reinterpret_cast<char*>(val.ptr), val.len, &result);\n+        if (UNLIKELY(result != StringParser::PARSE_SUCCESS || std::isnan(ret.val) || std::isinf(ret.val))) { \n+            return BooleanVal::null();\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d153c7a1ed85c47edd987502ad3205078bc58ce8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MDgzMA==", "bodyText": "Please review it again @chaoyli", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442160830", "createdAt": "2020-06-18T11:35:38Z", "author": {"login": "yangzhg"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;\n+        BooleanVal ret;\n+        ret.val = StringParser::string_to_bool(reinterpret_cast<char*>(val.ptr), val.len, &result);\n+        if (UNLIKELY(result != StringParser::PARSE_SUCCESS || std::isnan(ret.val) || std::isinf(ret.val))) { \n+            return BooleanVal::null();\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NTI0Nw=="}, "originalCommit": {"oid": "d153c7a1ed85c47edd987502ad3205078bc58ce8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM0ODQzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/utils.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNDoxMFrOGlnfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjowMToxNVrOGmJArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzQ5Ng==", "bodyText": "I found string_to_bool will convert \"Truetest\" to be true, it is ok?\n543 inline bool StringParser::string_to_bool_internal(const char* s, int len, ParseResult* result) {\n544     *result = PARSE_SUCCESS;\n545\n546     if (len >= 4 && (s[0] == 't' || s[0] == 'T')) {\n547         bool match = (s[1] == 'r' || s[1] == 'R') &&\n548             (s[2] == 'u' || s[2] == 'U') &&\n549             (s[3] == 'e' || s[3] == 'E');\n550         if (match && LIKELY(is_all_whitespace(s + 4, len - 4))) {\n551             return true;\n552         }\n553     } else if (len >= 5 && (s[0] == 'f' || s[0] == 'F')) {\n554         bool match = (s[1] == 'a' || s[1] == 'A') &&\n555             (s[2] == 'l' || s[2] == 'L') &&\n556             (s[3] == 's' || s[3] == 'S') &&\n557             (s[4] == 'e' || s[4] == 'E');\n558         if (match && LIKELY(is_all_whitespace(s + 5, len - 5))){\n559             return false;\n560         }\n561     }", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442097496", "createdAt": "2020-06-18T09:34:10Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/utils.cpp", "diffHunk": "@@ -1264,6 +1265,15 @@ bool valid_datetime(const string &value_str) {\n     }\n }\n \n+bool valid_bool(const std::string& value_str) {\n+    if (value_str == \"0\" || value_str == \"1\") {\n+        return true;\n+    }\n+    StringParser::ParseResult result;\n+    StringParser::string_to_bool(value_str.c_str(), value_str.length(), &result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d153c7a1ed85c47edd987502ad3205078bc58ce8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MDE2NQ==", "bodyText": "\"Truetest\" won't be converted to true  because of is_all_whitespace(), it will return  PARSE_FAILURE. In additional, this is just test the string is true or false ignore case;", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442160165", "createdAt": "2020-06-18T11:34:08Z", "author": {"login": "yangzhg"}, "path": "be/src/olap/utils.cpp", "diffHunk": "@@ -1264,6 +1265,15 @@ bool valid_datetime(const string &value_str) {\n     }\n }\n \n+bool valid_bool(const std::string& value_str) {\n+    if (value_str == \"0\" || value_str == \"1\") {\n+        return true;\n+    }\n+    StringParser::ParseResult result;\n+    StringParser::string_to_bool(value_str.c_str(), value_str.length(), &result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzQ5Ng=="}, "originalCommit": {"oid": "d153c7a1ed85c47edd987502ad3205078bc58ce8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NjcwMg==", "bodyText": "If \"true \" will be ok ? @yangzhg", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442646702", "createdAt": "2020-06-19T06:01:15Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/utils.cpp", "diffHunk": "@@ -1264,6 +1265,15 @@ bool valid_datetime(const string &value_str) {\n     }\n }\n \n+bool valid_bool(const std::string& value_str) {\n+    if (value_str == \"0\" || value_str == \"1\") {\n+        return true;\n+    }\n+    StringParser::ParseResult result;\n+    StringParser::string_to_bool(value_str.c_str(), value_str.length(), &result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzQ5Ng=="}, "originalCommit": {"oid": "d153c7a1ed85c47edd987502ad3205078bc58ce8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYyMTczOnYy", "diffSide": "RIGHT", "path": "be/src/exprs/cast_functions.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMTozNVrOGmRZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMTozNVrOGmRZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NDE1Mw==", "bodyText": "modify the indent", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442784153", "createdAt": "2020-06-19T11:21:35Z", "author": {"login": "wutiangan"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad5390eac365cdd23e0b0206774136b3a73fc64"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODY2MTE3OnYy", "diffSide": "RIGHT", "path": "be/src/exprs/cast_functions.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozNzo0NVrOGmRyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozNzo0NVrOGmRyXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MDQ5NQ==", "bodyText": "why you add the \"std::isnan(ret.val) || std::isinf(ret.val)\"\uff1fif result == StringParser::PARSE_SUCCESS, can val be nan or inf ?", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442790495", "createdAt": "2020-06-19T11:37:45Z", "author": {"login": "wutiangan"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;\n+        BooleanVal ret;\n+        ret.val = StringParser::string_to_bool(reinterpret_cast<char*>(val.ptr), val.len, &result);\n+        if (UNLIKELY(result != StringParser::PARSE_SUCCESS || std::isnan(ret.val) || std::isinf(ret.val))) { ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad5390eac365cdd23e0b0206774136b3a73fc64"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODY2OTkxOnYy", "diffSide": "RIGHT", "path": "be/src/exprs/cast_functions.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo0MToxNFrOGmR30g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoxNjozN1rOGmSukA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MTg5MA==", "bodyText": "StringParser::string_to_bool will consider \"1\" to false, is it ok?", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442791890", "createdAt": "2020-06-19T11:41:14Z", "author": {"login": "wutiangan"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;\n+        BooleanVal ret;\n+        ret.val = StringParser::string_to_bool(reinterpret_cast<char*>(val.ptr), val.len, &result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad5390eac365cdd23e0b0206774136b3a73fc64"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNTkwNA==", "bodyText": "\"1\" will convert to int  not bool", "url": "https://github.com/apache/incubator-doris/pull/3898#discussion_r442805904", "createdAt": "2020-06-19T12:16:37Z", "author": {"login": "yangzhg"}, "path": "be/src/exprs/cast_functions.cpp", "diffHunk": "@@ -229,6 +229,17 @@ StringVal CastFunctions::cast_to_string_val(FunctionContext* ctx, const StringVa\n   return sv;\n }\n \n+BooleanVal CastFunctions::cast_to_boolean_val(FunctionContext* ctx, const StringVal& val) {\n+    if (val.is_null) return BooleanVal::null(); \n+        StringParser::ParseResult result;\n+        BooleanVal ret;\n+        ret.val = StringParser::string_to_bool(reinterpret_cast<char*>(val.ptr), val.len, &result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MTg5MA=="}, "originalCommit": {"oid": "9ad5390eac365cdd23e0b0206774136b3a73fc64"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1524, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}