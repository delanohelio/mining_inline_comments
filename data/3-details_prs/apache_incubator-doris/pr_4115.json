{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxOTc2NjQ5", "number": 4115, "title": "[metrics] Redesign metrics to 3 layers", "bodyText": "Proposed changes\nIn order to support more fine-grained metrics, like table or tablet level metrics, I redesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nThe roles in the new design:\n\nMetricRegistry\nthe register center\nMetricEntity\nthe enity registered on MetricRegistry.\nGenerally a MetricRegistry can be registered on serveral MetricEntities, each of MetricEntity is an independent entity, such as server, disk_devices, data_directories, thrift clients and servers, and so on.\nMetric\nmetrics of an entity.\nSuch as fragment_requests_total on server entity, disk_bytes_read on a disk_device entity, thrift_opened_clients on a thrift_client entity.\nMetricPrototype\nThe type of a Metric.\nMetricPrototype is a global variable, can be shared by the same metrics across different MetricEntities.\nFor example, different tablets can share the same MetricPrototype, but own it's own Metrics which have different values.\n\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n Documentation Update (if none of the other choices apply)\n\nAll metrics HTTP interfaces have the same format of output as before.\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on Doris's issues, and have described the bug/feature there in detail\n Commit messages in my PR start with the related issues ID, like \"#4071 Add pull request template to doris project\"\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at dev@doris.apache.org by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-07-18T15:03:57Z", "url": "https://github.com/apache/incubator-doris/pull/4115", "merged": true, "mergeCommit": {"oid": "e71152132c460d3524a3b4b898b5fa10c5888523"}, "closed": true, "closedAt": "2020-08-08T03:23:02Z", "author": {"login": "acelyc111"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3wbiHAFqTQ1NDE5NDk1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8iRaoAFqTQ2MzIyMTY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTk0OTU0", "url": "https://github.com/apache/incubator-doris/pull/4115#pullrequestreview-454194954", "createdAt": "2020-07-23T14:34:52Z", "commit": {"oid": "6408d940d09614e6351f9eb3fcec1b775392c679"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozNDo1MlrOG2Nd2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozNDo1OVrOG2NeRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NjkyMA==", "bodyText": "Use 4 space instead of tab", "url": "https://github.com/apache/incubator-doris/pull/4115#discussion_r459496920", "createdAt": "2020-07-23T14:34:52Z", "author": {"login": "morningman"}, "path": "be/src/util/doris_metrics.h", "diffHunk": "@@ -28,163 +28,152 @@\n \n namespace doris {\n \n-class IntGaugeMetricsMap {\n-public:\n-    void set_metric(const std::string& key, int64_t val) {\n-        auto metric = metrics.find(key);\n-        if (metric != metrics.end()) {\n-            metric->second->set_value(val);\n-        }\n-    }\n-\n-    IntGauge* add_metric(const std::string& key, const MetricUnit unit) {\n-        metrics.emplace(key, new IntGauge(unit));\n-        return metrics.find(key)->second.get();\n-    }\n-\n-private:\n-    std::unordered_map<std::string, std::unique_ptr<IntGauge>> metrics;\n-};\n-\n-#define REGISTER_GAUGE_DORIS_METRIC(name, func) \\\n-  DorisMetrics::instance()->metrics()->register_metric(#name, &DorisMetrics::instance()->name); \\\n-  DorisMetrics::instance()->metrics()->register_hook(#name, [&]() { \\\n+#define REGISTER_HOOK_METRIC(name, func) \\\n+  DorisMetrics::instance()->server_entity()->register_metric(&METRIC_##name, &DorisMetrics::instance()->name); \\\n+  DorisMetrics::instance()->server_entity()->register_hook(#name, [&]() { \\\n       DorisMetrics::instance()->name.set_value(func());  \\\n });\n \n+#define DEREGISTER_HOOK_METRIC(name) \\\n+  DorisMetrics::instance()->server_entity()->deregister_metric(&METRIC_##name); \\\n+  DorisMetrics::instance()->server_entity()->deregister_hook(#name);\n+\n class DorisMetrics {\n public:\n-    // counters\n-    METRIC_DEFINE_INT_COUNTER(fragment_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(fragment_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(http_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(http_request_send_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(query_scan_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(query_scan_rows, MetricUnit::ROWS);\n-    METRIC_DEFINE_INT_COUNTER(push_requests_success_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(push_requests_fail_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(push_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(push_request_write_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(push_request_write_rows, MetricUnit::ROWS);\n-    METRIC_DEFINE_INT_COUNTER(create_tablet_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_tablet_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(drop_tablet_requests_total, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(report_all_tablets_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_all_tablets_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_tablet_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_tablet_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_disk_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_disk_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_task_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_task_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(schema_change_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(schema_change_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_rollup_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_rollup_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(storage_migrate_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(delete_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(delete_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(clone_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(clone_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(finish_task_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(finish_task_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_request_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_request_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_deltas_total, MetricUnit::ROWSETS);\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_bytes_total, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_deltas_total, MetricUnit::ROWSETS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_bytes_total, MetricUnit::BYTES);\n-\n-    METRIC_DEFINE_INT_COUNTER(publish_task_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(publish_task_failed_total, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(meta_write_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(meta_write_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(meta_read_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(meta_read_request_duration_us, MetricUnit::MICROSECONDS);\n+    //METRIC_DEFINE_INT_COUNTER(load_rows_total, MetricUnit::ROWS);\n+    //METRIC_DEFINE_INT_COUNTER(load_bytes_total, MetricUnit::BYTES);\n+\n+    //IntGaugeMetricsMap disks_total_capacity;\n+    //IntGaugeMetricsMap disks_avail_capacity;\n+    //IntGaugeMetricsMap disks_data_used_capacity;\n+    //IntGaugeMetricsMap disks_state;\n+\n+    IntCounter fragment_requests_total;\n+\tIntCounter fragment_request_duration_us;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6408d940d09614e6351f9eb3fcec1b775392c679"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NzAyOA==", "bodyText": "Remove the unused code", "url": "https://github.com/apache/incubator-doris/pull/4115#discussion_r459497028", "createdAt": "2020-07-23T14:34:59Z", "author": {"login": "morningman"}, "path": "be/src/util/doris_metrics.h", "diffHunk": "@@ -28,163 +28,152 @@\n \n namespace doris {\n \n-class IntGaugeMetricsMap {\n-public:\n-    void set_metric(const std::string& key, int64_t val) {\n-        auto metric = metrics.find(key);\n-        if (metric != metrics.end()) {\n-            metric->second->set_value(val);\n-        }\n-    }\n-\n-    IntGauge* add_metric(const std::string& key, const MetricUnit unit) {\n-        metrics.emplace(key, new IntGauge(unit));\n-        return metrics.find(key)->second.get();\n-    }\n-\n-private:\n-    std::unordered_map<std::string, std::unique_ptr<IntGauge>> metrics;\n-};\n-\n-#define REGISTER_GAUGE_DORIS_METRIC(name, func) \\\n-  DorisMetrics::instance()->metrics()->register_metric(#name, &DorisMetrics::instance()->name); \\\n-  DorisMetrics::instance()->metrics()->register_hook(#name, [&]() { \\\n+#define REGISTER_HOOK_METRIC(name, func) \\\n+  DorisMetrics::instance()->server_entity()->register_metric(&METRIC_##name, &DorisMetrics::instance()->name); \\\n+  DorisMetrics::instance()->server_entity()->register_hook(#name, [&]() { \\\n       DorisMetrics::instance()->name.set_value(func());  \\\n });\n \n+#define DEREGISTER_HOOK_METRIC(name) \\\n+  DorisMetrics::instance()->server_entity()->deregister_metric(&METRIC_##name); \\\n+  DorisMetrics::instance()->server_entity()->deregister_hook(#name);\n+\n class DorisMetrics {\n public:\n-    // counters\n-    METRIC_DEFINE_INT_COUNTER(fragment_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(fragment_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(http_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(http_request_send_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(query_scan_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(query_scan_rows, MetricUnit::ROWS);\n-    METRIC_DEFINE_INT_COUNTER(push_requests_success_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(push_requests_fail_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(push_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(push_request_write_bytes, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(push_request_write_rows, MetricUnit::ROWS);\n-    METRIC_DEFINE_INT_COUNTER(create_tablet_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_tablet_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(drop_tablet_requests_total, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(report_all_tablets_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_all_tablets_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_tablet_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_tablet_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_disk_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_disk_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_task_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(report_task_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(schema_change_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(schema_change_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_rollup_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(create_rollup_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(storage_migrate_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(delete_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(delete_requests_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(clone_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(clone_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(finish_task_requests_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(finish_task_requests_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_request_failed, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_request_failed, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_deltas_total, MetricUnit::ROWSETS);\n-    METRIC_DEFINE_INT_COUNTER(base_compaction_bytes_total, MetricUnit::BYTES);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_deltas_total, MetricUnit::ROWSETS);\n-    METRIC_DEFINE_INT_COUNTER(cumulative_compaction_bytes_total, MetricUnit::BYTES);\n-\n-    METRIC_DEFINE_INT_COUNTER(publish_task_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(publish_task_failed_total, MetricUnit::REQUESTS);\n-\n-    METRIC_DEFINE_INT_COUNTER(meta_write_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(meta_write_request_duration_us, MetricUnit::MICROSECONDS);\n-    METRIC_DEFINE_INT_COUNTER(meta_read_request_total, MetricUnit::REQUESTS);\n-    METRIC_DEFINE_INT_COUNTER(meta_read_request_duration_us, MetricUnit::MICROSECONDS);\n+    //METRIC_DEFINE_INT_COUNTER(load_rows_total, MetricUnit::ROWS);\n+    //METRIC_DEFINE_INT_COUNTER(load_bytes_total, MetricUnit::BYTES);\n+\n+    //IntGaugeMetricsMap disks_total_capacity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6408d940d09614e6351f9eb3fcec1b775392c679"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6408d940d09614e6351f9eb3fcec1b775392c679", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/6408d940d09614e6351f9eb3fcec1b775392c679", "committedDate": "2020-07-17T08:39:58Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}, "afterCommit": {"oid": "1ee00bd5f87832b71b61d82a569d0fb48bc80fea", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/1ee00bd5f87832b71b61d82a569d0fb48bc80fea", "committedDate": "2020-07-27T08:21:52Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ee00bd5f87832b71b61d82a569d0fb48bc80fea", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/1ee00bd5f87832b71b61d82a569d0fb48bc80fea", "committedDate": "2020-07-27T08:21:52Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}, "afterCommit": {"oid": "c30137953e6b61d7308acebab4f9aabee67a6f79", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/c30137953e6b61d7308acebab4f9aabee67a6f79", "committedDate": "2020-07-27T08:39:41Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c30137953e6b61d7308acebab4f9aabee67a6f79", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/c30137953e6b61d7308acebab4f9aabee67a6f79", "committedDate": "2020-07-27T08:39:41Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}, "afterCommit": {"oid": "6d0da8c1e1b9041c3c9dfe8e2214921a4dd2328f", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/6d0da8c1e1b9041c3c9dfe8e2214921a4dd2328f", "committedDate": "2020-07-28T16:26:13Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7899daec7d0d5b3b46ab038f99a23194613436f", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/d7899daec7d0d5b3b46ab038f99a23194613436f", "committedDate": "2020-07-29T06:46:43Z", "message": "gauge counter"}, "afterCommit": {"oid": "26cf5b213c006da9aeb3ccf9acfc568ad470d5d9", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/26cf5b213c006da9aeb3ccf9acfc568ad470d5d9", "committedDate": "2020-08-01T02:25:24Z", "message": "gauge counter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629574b90721433f09acf7eec54136021666aef4", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/629574b90721433f09acf7eec54136021666aef4", "committedDate": "2020-08-06T14:36:47Z", "message": "[metrics] Redesign metrics to 3 layers\n\nRedesign metrics to 3 layers:\nMetricRegistry - MetricEntity - Metrics\nMetricRegistry: the register center\nMetricEntity: the enity registered on MetricRegistry. Generally a MetricRegistry\ncan be registered on serveral MetricEntities, each of MetricEntity is an\nindependent entity, such as server, disk_devices, data_directories,\nthrift clients and servers, and so on.\nMetric: metrics of an entity. Such as fragment_requests_total on server\nentity, disk_bytes_read on a disk_device entity, thrift_opened_clients\non a thrift_client entity.\nMetricPrototype: the type of a metric. MetricPrototype is a global\nvariable, can be shared by the same metrics across different\nMetricEntities.\n\nThe output of /metrics interface also keep compatiable with old versions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba12868e86f10e613896356237bc1c8a1641faf1", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/ba12868e86f10e613896356237bc1c8a1641faf1", "committedDate": "2020-08-06T14:36:47Z", "message": "force"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5463cc3e194faa45b161ad1674af82ef37a48075", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/5463cc3e194faa45b161ad1674af82ef37a48075", "committedDate": "2020-08-06T14:36:47Z", "message": "gauge counter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5c8fff631d0dc83eefa442a3c7c55a79e7d20c", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/be5c8fff631d0dc83eefa442a3c7c55a79e7d20c", "committedDate": "2020-08-06T14:36:47Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/b9d906ec5fadbcfea164828e86b8028a67e9b38c", "committedDate": "2020-08-06T14:36:47Z", "message": "update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e071c6519a1511b6ad34795edeaae1d0634e321", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/6e071c6519a1511b6ad34795edeaae1d0634e321", "committedDate": "2020-08-01T06:43:07Z", "message": "update"}, "afterCommit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/b9d906ec5fadbcfea164828e86b8028a67e9b38c", "committedDate": "2020-08-06T14:36:47Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTk1NTU4", "url": "https://github.com/apache/incubator-doris/pull/4115#pullrequestreview-462995558", "createdAt": "2020-08-07T02:28:46Z", "commit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTI0OTU0", "url": "https://github.com/apache/incubator-doris/pull/4115#pullrequestreview-463124954", "createdAt": "2020-08-07T08:21:29Z", "commit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyMTozMFrOG9RB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyMjoyOVrOG9RDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NTMxOQ==", "bodyText": "may be used DEFINE_METRIC_PROTOTYPE better", "url": "https://github.com/apache/incubator-doris/pull/4115#discussion_r466895319", "createdAt": "2020-08-07T08:21:30Z", "author": {"login": "chaoyli"}, "path": "be/src/util/metrics.h", "diffHunk": "@@ -193,230 +174,163 @@ class CoreLocalCounter : public Metric {\n     void increment(const T& delta) {\n         __sync_fetch_and_add(_value.access(), delta);\n     }\n+\n+    rj::Value to_json_value() const override {\n+        return rj::Value(value());\n+    }\n+\n protected:\n     CoreLocalValue<T> _value;\n };\n \n template<typename T>\n class AtomicCounter : public AtomicMetric<T> {\n public:\n-    AtomicCounter(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~AtomicCounter() { }\n+    AtomicCounter() {}\n+    virtual ~AtomicCounter() {}\n };\n \n template<typename T>\n class AtomicGauge : public AtomicMetric<T> {\n public:\n-    AtomicGauge(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~AtomicGauge() { }\n+    AtomicGauge() : AtomicMetric<T>() {}\n+    virtual ~AtomicGauge() {}\n };\n \n template<typename T>\n class LockCounter : public LockSimpleMetric<T> {\n public:\n-    LockCounter(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~LockCounter() { }\n+    LockCounter() : LockSimpleMetric<T>() {}\n+    virtual ~LockCounter() {}\n };\n \n // This can only used for trival type\n template<typename T>\n class LockGauge : public LockSimpleMetric<T> {\n public:\n-    LockGauge(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~LockGauge() { }\n+    LockGauge() : LockSimpleMetric<T>() {}\n+    virtual ~LockGauge() {}\n };\n \n-// one key-value pair used to\n-struct MetricLabel {\n+using Labels = std::unordered_map<std::string, std::string>;\n+struct MetricPrototype {\n+public:\n+    MetricPrototype(MetricType type_,\n+                    MetricUnit unit_,\n+                    std::string name_,\n+                    std::string description_ = \"\",\n+                    std::string group_name_ = \"\",\n+                    Labels labels_ = Labels(),\n+                    bool is_core_metric_ = false)\n+        : is_core_metric(is_core_metric_),\n+          type(type_),\n+          unit(unit_),\n+          name(std::move(name_)),\n+          description(std::move(description_)),\n+          group_name(std::move(group_name_)),\n+          labels(std::move(labels_)) {}\n+\n+    std::string simple_name() const;\n+    std::string combine_name(const std::string& registry_name) const;\n+\n+    bool is_core_metric;\n+    MetricType type;\n+    MetricUnit unit;\n     std::string name;\n-    std::string value;\n+    std::string description;\n+    std::string group_name;\n+    Labels labels;\n+};\n \n-    MetricLabel() { }\n-    MetricLabel(const std::string& name_, const std::string& value_) :name(name_), value(value_) {\n-    }\n+#define DEFINE_METRIC(name, type, unit, desc, group, labels, core)      \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NTY0MA==", "bodyText": "What's the purpose of MetricPrototype?\nUnder which circumstance, MetricPrototype can be used to split the Metric.", "url": "https://github.com/apache/incubator-doris/pull/4115#discussion_r466895640", "createdAt": "2020-08-07T08:22:06Z", "author": {"login": "chaoyli"}, "path": "be/src/util/metrics.h", "diffHunk": "@@ -193,230 +174,163 @@ class CoreLocalCounter : public Metric {\n     void increment(const T& delta) {\n         __sync_fetch_and_add(_value.access(), delta);\n     }\n+\n+    rj::Value to_json_value() const override {\n+        return rj::Value(value());\n+    }\n+\n protected:\n     CoreLocalValue<T> _value;\n };\n \n template<typename T>\n class AtomicCounter : public AtomicMetric<T> {\n public:\n-    AtomicCounter(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~AtomicCounter() { }\n+    AtomicCounter() {}\n+    virtual ~AtomicCounter() {}\n };\n \n template<typename T>\n class AtomicGauge : public AtomicMetric<T> {\n public:\n-    AtomicGauge(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~AtomicGauge() { }\n+    AtomicGauge() : AtomicMetric<T>() {}\n+    virtual ~AtomicGauge() {}\n };\n \n template<typename T>\n class LockCounter : public LockSimpleMetric<T> {\n public:\n-    LockCounter(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~LockCounter() { }\n+    LockCounter() : LockSimpleMetric<T>() {}\n+    virtual ~LockCounter() {}\n };\n \n // This can only used for trival type\n template<typename T>\n class LockGauge : public LockSimpleMetric<T> {\n public:\n-    LockGauge(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~LockGauge() { }\n+    LockGauge() : LockSimpleMetric<T>() {}\n+    virtual ~LockGauge() {}\n };\n \n-// one key-value pair used to\n-struct MetricLabel {\n+using Labels = std::unordered_map<std::string, std::string>;\n+struct MetricPrototype {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NTgxMA==", "bodyText": "MetricMap is better name or not?", "url": "https://github.com/apache/incubator-doris/pull/4115#discussion_r466895810", "createdAt": "2020-08-07T08:22:29Z", "author": {"login": "chaoyli"}, "path": "be/src/util/metrics.h", "diffHunk": "@@ -193,230 +174,163 @@ class CoreLocalCounter : public Metric {\n     void increment(const T& delta) {\n         __sync_fetch_and_add(_value.access(), delta);\n     }\n+\n+    rj::Value to_json_value() const override {\n+        return rj::Value(value());\n+    }\n+\n protected:\n     CoreLocalValue<T> _value;\n };\n \n template<typename T>\n class AtomicCounter : public AtomicMetric<T> {\n public:\n-    AtomicCounter(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~AtomicCounter() { }\n+    AtomicCounter() {}\n+    virtual ~AtomicCounter() {}\n };\n \n template<typename T>\n class AtomicGauge : public AtomicMetric<T> {\n public:\n-    AtomicGauge(MetricUnit unit)\n-            : AtomicMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~AtomicGauge() { }\n+    AtomicGauge() : AtomicMetric<T>() {}\n+    virtual ~AtomicGauge() {}\n };\n \n template<typename T>\n class LockCounter : public LockSimpleMetric<T> {\n public:\n-    LockCounter(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::COUNTER, unit) {}\n-    virtual ~LockCounter() { }\n+    LockCounter() : LockSimpleMetric<T>() {}\n+    virtual ~LockCounter() {}\n };\n \n // This can only used for trival type\n template<typename T>\n class LockGauge : public LockSimpleMetric<T> {\n public:\n-    LockGauge(MetricUnit unit)\n-      : LockSimpleMetric<T>(MetricType::GAUGE, unit) {}\n-    virtual ~LockGauge() { }\n+    LockGauge() : LockSimpleMetric<T>() {}\n+    virtual ~LockGauge() {}\n };\n \n-// one key-value pair used to\n-struct MetricLabel {\n+using Labels = std::unordered_map<std::string, std::string>;\n+struct MetricPrototype {\n+public:\n+    MetricPrototype(MetricType type_,\n+                    MetricUnit unit_,\n+                    std::string name_,\n+                    std::string description_ = \"\",\n+                    std::string group_name_ = \"\",\n+                    Labels labels_ = Labels(),\n+                    bool is_core_metric_ = false)\n+        : is_core_metric(is_core_metric_),\n+          type(type_),\n+          unit(unit_),\n+          name(std::move(name_)),\n+          description(std::move(description_)),\n+          group_name(std::move(group_name_)),\n+          labels(std::move(labels_)) {}\n+\n+    std::string simple_name() const;\n+    std::string combine_name(const std::string& registry_name) const;\n+\n+    bool is_core_metric;\n+    MetricType type;\n+    MetricUnit unit;\n     std::string name;\n-    std::string value;\n+    std::string description;\n+    std::string group_name;\n+    Labels labels;\n+};\n \n-    MetricLabel() { }\n-    MetricLabel(const std::string& name_, const std::string& value_) :name(name_), value(value_) {\n-    }\n+#define DEFINE_METRIC(name, type, unit, desc, group, labels, core)      \\\n+    ::doris::MetricPrototype METRIC_##name(type, unit, #name, desc, group, labels, core)\n \n-    bool operator==(const MetricLabel& other) const {\n-        return name == other.name && value == other.value;\n-    }\n-    bool operator!=(const MetricLabel& other) const {\n-        return !(*this == other);\n-    }\n-    bool operator<(const MetricLabel& other) const {\n-        auto res = name.compare(other.name);\n-        if (res == 0) {\n-            return value < other.value;\n-        }\n-        return res < 0;\n-    }\n-    int compare(const MetricLabel& other) const {\n-        auto res = name.compare(other.name);\n-        if (res == 0) {\n-            return value.compare(other.value);\n-        }\n-        return res;\n-    }\n-    std::string to_string() const {\n-        return name + \"=\" + value;\n-    }\n-};\n+#define DEFINE_COUNTER_METRIC_2ARG(name, unit)                          \\\n+    DEFINE_METRIC(name, MetricType::COUNTER, unit, \"\", \"\", Labels(), false)\n \n-struct MetricLabels {\n-    static MetricLabels EmptyLabels;\n-    // used std::set to sort MetricLabel so that we can get compare two MetricLabels\n-    std::set<MetricLabel> labels;\n+#define DEFINE_COUNTER_METRIC_3ARG(name, unit, desc)                    \\\n+    DEFINE_METRIC(name, MetricType::COUNTER, unit, desc, \"\", Labels(), false)\n \n-    MetricLabels& add(const std::string& name, const std::string& value) {\n-        labels.emplace(name, value);\n-        return *this;\n-    }\n+#define DEFINE_COUNTER_METRIC_5ARG(name, unit, desc, group, labels)     \\\n+    DEFINE_METRIC(name, MetricType::COUNTER, unit, desc, #group, labels, false)\n \n-    bool operator==(const MetricLabels& other) const {\n-        if (labels.size() != other.labels.size()) {\n-            return false;\n-        }\n-        auto it = labels.begin();\n-        auto other_it = other.labels.begin();\n-        while (it != labels.end()) {\n-            if (*it != *other_it) {\n-                return false;\n-            }\n-            ++it;\n-            ++other_it;\n-        }\n-        return true;\n-    }\n-    bool operator<(const MetricLabels& other) const {\n-        auto it = labels.begin();\n-        auto other_it = other.labels.begin();\n-        while (it != labels.end() && other_it != other.labels.end()) {\n-            auto res = it->compare(*other_it);\n-            if (res < 0) {\n-                return true;\n-            } else if (res > 0) {\n-                return false;\n-            }\n-            ++it;\n-            ++other_it;\n-        }\n-        if (it == labels.end()) {\n-            if (other_it == other.labels.end()) {\n-                return false;\n-            }\n-            return true;\n-        } else {\n-            return false;\n-        }\n-    }\n-    bool empty() const {\n-        return labels.empty();\n+#define DEFINE_GAUGE_METRIC_2ARG(name, unit)                            \\\n+    DEFINE_METRIC(name, MetricType::GAUGE, unit, \"\", \"\", Labels(), false)\n+\n+#define DEFINE_CORE_GAUGE_METRIC_2ARG(name, unit)                       \\\n+    DEFINE_METRIC(name, MetricType::GAUGE, unit, \"\", \"\", Labels(), true)\n+\n+#define DEFINE_GAUGE_METRIC_3ARG(name, unit, desc)                      \\\n+    DEFINE_METRIC(name, MetricType::GAUGE, unit, desc, \"\", Labels(), false)\n+\n+#define METRIC_REGISTER(entity, metric)                                 \\\n+    entity->register_metric(&METRIC_##metric, &metric)\n+\n+#define METRIC_DEREGISTER(entity, metric)                               \\\n+    entity->deregister_metric(&METRIC_##metric)\n+\n+// For 'metrics' in MetricEntity.\n+struct MetricPrototypeHash {\n+    size_t operator()(const MetricPrototype* metric_prototype) const {\n+        return std::hash<std::string>()(metric_prototype->group_name.empty() ? metric_prototype->name : metric_prototype->group_name);\n     }\n+};\n \n-    std::string to_string() const {\n-        std::stringstream ss;\n-        int i = 0;\n-        for (auto& label : labels) {\n-            if (i++ > 0) {\n-                ss << \",\";\n-            }\n-            ss << label.to_string();\n-        }\n-        return ss.str();\n+struct MetricPrototypeEqualTo {\n+    bool operator()(const MetricPrototype* first, const MetricPrototype* second) const {\n+        return first->group_name == second->group_name && first->name == second->name;\n     }\n };\n \n-class MetricCollector;\n+using MetricByType = std::unordered_map<const MetricPrototype*, Metric*, MetricPrototypeHash, MetricPrototypeEqualTo>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d906ec5fadbcfea164828e86b8028a67e9b38c"}, "originalPosition": 354}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c540096f5893b5dea331b096d86dc0aa7c3995d", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/9c540096f5893b5dea331b096d86dc0aa7c3995d", "committedDate": "2020-08-07T09:44:21Z", "message": "DEFINE_METRIC -> DEFINE_METRIC_PROTOTYPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa27a6386759189c7800a05475966dd6f8fa3908", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/fa27a6386759189c7800a05475966dd6f8fa3908", "committedDate": "2020-08-07T09:46:00Z", "message": "MetricByType -> MetricMap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjIxNjcw", "url": "https://github.com/apache/incubator-doris/pull/4115#pullrequestreview-463221670", "createdAt": "2020-08-07T10:57:20Z", "commit": {"oid": "fa27a6386759189c7800a05475966dd6f8fa3908"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1962, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}