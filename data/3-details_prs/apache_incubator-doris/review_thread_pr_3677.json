{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTA4ODgz", "number": 3677, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo0NTozMFrOECzK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNTozMVrOEOqScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzcwOTk4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo0NTozMFrOGfenYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo0NTozMFrOGfenYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MDY0Mw==", "bodyText": "Comment about what does this code do", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435660643", "createdAt": "2020-06-05T02:45:30Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2052dc4f9c787b52635937df05c6498cd3a3d730"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzcyMjU3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1Mzo0MVrOGfeu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1Mzo0MVrOGfeu5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MjU2Ng==", "bodyText": "In general, use to in map's name.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();\n          \n          \n            \n                    Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435662566", "createdAt": "2020-06-05T02:53:41Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2052dc4f9c787b52635937df05c6498cd3a3d730"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzkxMDAxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNTowNTo1OFrOGfghhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNTowNTo1OFrOGfghhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5MTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //The extension column of the materialized view is added to the expression evaluation of load\n          \n          \n            \n                    // The extension column of the materialized view is added to the expression evaluation of load", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435691910", "createdAt": "2020-06-05T05:05:58Z", "author": {"login": "imay"}, "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        //The extension column of the materialized view is added to the expression evaluation of load", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2052dc4f9c787b52635937df05c6498cd3a3d730"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTcyOTg1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0ODowN1rOGgWnfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0ODowN1rOGgWnfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3ODE3Mg==", "bodyText": "Please add some example", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436578172", "createdAt": "2020-06-08T09:48:07Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        // The extension column of the materialized view is added to the expression evaluation of load", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTc0NDIxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo1MjoxNVrOGgWwag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzowODoxNlrOGiM_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4MDQ1OA==", "bodyText": "Are you sure that this is correctcolumn(a, tmp_c) set(b=f(c), c=b)\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436580458", "createdAt": "2020-06-08T09:52:15Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        // The extension column of the materialized view is added to the expression evaluation of load\n+        for (Column column : tbl.getFullSchema()) {\n+            if (column.getDefineExpr() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNzY0NQ==", "bodyText": "Are you sure that this is correctcolumn(a, tmp_c) set(b=f(c), c=b)\uff1f\n\nFix done", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r438517645", "createdAt": "2020-06-11T03:08:16Z", "author": {"login": "HangyuanLiu"}, "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        // The extension column of the materialized view is added to the expression evaluation of load\n+        for (Column column : tbl.getFullSchema()) {\n+            if (column.getDefineExpr() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4MDQ1OA=="}, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTgyNDY3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNjoyN1rOGgXiUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNjoyN1rOGgXiUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIzNQ==", "bodyText": "Please abstract function name getRefColumn in Column", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436593235", "createdAt": "2020-06-08T10:16:27Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n+        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n+            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+            if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n+                List<Expr> slots = new ArrayList<>();\n+                column.getDefineExpr().collect(SlotRef.class, slots);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTg4MTg5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDozNDo0NlrOGgYGEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDozNDo0NlrOGgYGEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwMjM4Nw==", "bodyText": "Do not use the index of origin col. The fullSchema may be rebuilt and the index of origin col may be changed.", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436602387", "createdAt": "2020-06-08T10:34:46Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDA1NjU3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozNTowNlrOGgZzGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozNTowNlrOGgZzGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMDI5Ng==", "bodyText": "mvColumnIdxToOrigColumnIdx?", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436630296", "createdAt": "2020-06-08T11:35:06Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n+        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n+            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+            if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n+                List<Expr> slots = new ArrayList<>();\n+                column.getDefineExpr().collect(SlotRef.class, slots);\n+                //We only support one children of define expr in materialized view column\n+                Preconditions.checkArgument(slots.size() == 1);\n+                String origName = ((SlotRef) slots.get(0)).getColumnName();\n+                for (int originColumnIdx = 0; originColumnIdx < targetColumns.size(); originColumnIdx++) {\n+                    if (targetColumns.get(originColumnIdx).nameEquals(origName, false)) {\n+                        origColIdx2MvColIdx.put(mvColumnIdx, originColumnIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDA2NzAyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozODo1NlrOGgZ5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTozODo1NlrOGgZ5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMTk4MA==", "bodyText": "The key of origColIdx2MvColIdx is mvColIdx. The mvColumn has been supplied at the end of result exprs in query stmt. So I think it is not match.", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436631980", "createdAt": "2020-06-08T11:38:56Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -519,17 +556,23 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n         }\n \n         // expand baseTblResultExprs and colLabels in QueryStmt\n-        if (!origColIdxsForShadowCols.isEmpty()) {\n+        if (!origColIdxsForShadowCols.isEmpty() || !origColIdx2MvColIdx.isEmpty()) {\n             if (queryStmt.getResultExprs().size() != queryStmt.getBaseTblResultExprs().size()) {\n                 for (Integer idx : origColIdxsForShadowCols) {\n                     queryStmt.getBaseTblResultExprs().add(queryStmt.getBaseTblResultExprs().get(idx));\n                 }\n+                for (Integer idx : origColIdx2MvColIdx.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDExMjIwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTo1NDo1OVrOGgaVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTo1NDo1OVrOGgaVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzOTEyNg==", "bodyText": "Please add example of mv column and schema change column", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436639126", "createdAt": "2020-06-08T11:54:59Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDc4MDg3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzo1MToxNVrOGjicZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzo1MToxNVrOGjicZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxNzY3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"\n          \n          \n            \n                     * origColIdx2MVColumn has 1 element: \"2, __doris_materialized_view_bitmap_union_C\"", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439917670", "createdAt": "2020-06-15T03:51:15Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,19 +454,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        //Get the correspondence of this column to the original column through defineExpr\n-        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n-        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n-            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+        /*\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDc4Mjc2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzo1Mjo0MlrOGjidgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzo1Mjo0MlrOGjidgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxNzk1Mg==", "bodyText": "Better  to show which field is error.", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439917952", "createdAt": "2020-06-15T03:52:42Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,19 +454,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        //Get the correspondence of this column to the original column through defineExpr\n-        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n-        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n-            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+        /*\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"\n+         * will be used in as a mapping from queryStmt.getResultExprs() to targetColumns define expr\n+         */\n+        List<Pair<Integer, Column>>  origColIdx2MVColumn = Lists.newArrayList();\n+        for (Column column : targetTable.getFullSchema()) {\n             if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n-                List<Expr> slots = new ArrayList<>();\n-                column.getDefineExpr().collect(SlotRef.class, slots);\n-                //We only support one children of define expr in materialized view column\n-                Preconditions.checkArgument(slots.size() == 1);\n-                String origName = ((SlotRef) slots.get(0)).getColumnName();\n+                SlotRef refColumn = column.getRefColumn();\n+                if (refColumn == null) {\n+                    ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_FIELD_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDg1MTU4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNDo0NzowMlrOGjjFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNDo0NzowMlrOGjjFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyODIxOQ==", "bodyText": "What's different between resultExpr and baseTblResultExpr", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439928219", "createdAt": "2020-06-15T04:47:02Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -521,22 +530,22 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n                 // extend the result expr by duplicating the related exprs\n                 for (Integer idx : origColIdxsForShadowCols) {\n                     queryStmt.getResultExprs().add(queryStmt.getResultExprs().get(idx));\n+                    queryStmt.getBaseTblResultExprs().add(queryStmt.getResultExprs().get(idx));\n                 }\n             }\n \n-            if (!origColIdx2MvColIdx.isEmpty()) {\n-                origColIdx2MvColIdx.forEach((key, value) -> {\n-                    Column mvColumn = targetTable.getFullSchema().get(key);\n-                    Expr expr = mvColumn.getDefineExpr();\n-                    ArrayList<SlotRef> slots = new ArrayList<>();\n-                    expr.collect(SlotRef.class, slots);\n-\n+            if (!origColIdx2MVColumn.isEmpty()) {\n+                origColIdx2MVColumn.forEach(entry -> {\n+                    Integer origColIdx = entry.first;\n+                    Column mvColumn = entry.second;\n                     //substitute define expr slot with select statement result expr\n                     ExprSubstitutionMap smap = new ExprSubstitutionMap();\n-                    smap.getLhs().add(slots.get(0));\n-                    smap.getRhs().add(queryStmt.getResultExprs().get(value));\n+                    smap.getLhs().add(mvColumn.getRefColumn());\n+                    smap.getRhs().add(queryStmt.getResultExprs().get(origColIdx));\n \n-                    queryStmt.getResultExprs().add(Expr.substituteList(Lists.newArrayList(expr), smap, analyzer, false).get(0));\n+                    Expr e = Expr.substituteList(Lists.newArrayList(mvColumn.getDefineExpr()), smap, analyzer, false).get(0);\n+                    queryStmt.getResultExprs().add(e);\n+                    queryStmt.getBaseTblResultExprs().add(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODA0ODMzOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxNTo0MFrOGx7WWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxNTo0MFrOGx7WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNTc4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n          \n          \n            \n                     * eg: origin targetColumns: (A,B,C), shadow column: mv_bitmap_union_C", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455005784", "createdAt": "2020-07-15T12:15:40Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6b589c583fbd3153995a44279b3e4f0fed972e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODA0OTI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxNTo1MFrOGx7WyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxNTo1MFrOGx7WyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNTg5Nw==", "bodyText": "same as above", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455005897", "createdAt": "2020-07-15T12:15:50Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6b589c583fbd3153995a44279b3e4f0fed972e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODA2MjA4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxOToyOFrOGx7ebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoxOToyOFrOGx7ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNzg1NQ==", "bodyText": "The shadow cols is not meaningful. Maybe extend ?", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455007855", "createdAt": "2020-07-15T12:19:28Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"2, __doris_materialized_view_bitmap_union_C\"\n+         * will be used in as a mapping from queryStmt.getResultExprs() to targetColumns define expr\n          */\n-        List<Integer> origColIdxsForShadowCols = Lists.newArrayList();\n+        List<Pair<Integer, Column>> origColIdxsForShadowCols = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6b589c583fbd3153995a44279b3e4f0fed972e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODA4MzY5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNTozMVrOGx7reQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNTozMVrOGx7reQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMTE5Mw==", "bodyText": "Totally same as the result expr of query stmt?", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455011193", "createdAt": "2020-07-15T12:25:31Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -518,17 +550,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        // expand baseTblResultExprs and colLabels in QueryStmt\n+        // expand colLabels in QueryStmt\n         if (!origColIdxsForShadowCols.isEmpty()) {\n             if (queryStmt.getResultExprs().size() != queryStmt.getBaseTblResultExprs().size()) {\n-                for (Integer idx : origColIdxsForShadowCols) {\n-                    queryStmt.getBaseTblResultExprs().add(queryStmt.getBaseTblResultExprs().get(idx));\n+                for (Pair<Integer, Column> entry  : origColIdxsForShadowCols) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6b589c583fbd3153995a44279b3e4f0fed972e"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1611, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}