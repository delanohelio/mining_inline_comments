{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDczMjM4", "number": 4152, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo0MzoxM1rOERUpOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozMDoyMFrOERX6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk5NDgzOnYy", "diffSide": "RIGHT", "path": "be/src/runtime/bufferpool/suballocator.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo0MzoxM1rOG19-7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo0MzoxM1rOG19-7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MzI0NQ==", "bodyText": "CheckFreeListHeadIsNotNull", "url": "https://github.com/apache/incubator-doris/pull/4152#discussion_r459243245", "createdAt": "2020-07-23T06:43:13Z", "author": {"login": "wutiangan"}, "path": "be/src/runtime/bufferpool/suballocator.cc", "diffHunk": "@@ -219,6 +230,10 @@ unique_ptr<Suballocation> Suballocator::PopFreeListHead(int list_idx) {\n   return result;\n }\n \n+bool Suballocator::CheckFreeListHead(int list_idx) const {\n+    return free_lists_[list_idx] != nullptr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332054e415310340131a8a89ae4a87b7611f4cbb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjAwODAwOnYy", "diffSide": "RIGHT", "path": "be/src/runtime/bufferpool/suballocator.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo0ODoxNlrOG1-GHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowMzoyMVrOG2CGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTA4Nw==", "bodyText": "Modify annotation\uff0c the annotation is not consistent with function.", "url": "https://github.com/apache/incubator-doris/pull/4152#discussion_r459245087", "createdAt": "2020-07-23T06:48:16Z", "author": {"login": "wutiangan"}, "path": "be/src/runtime/bufferpool/suballocator.h", "diffHunk": "@@ -128,6 +129,10 @@ class Suballocator {\n   // if list is empty.\n   std::unique_ptr<Suballocation> PopFreeListHead(int list_idx);\n \n+  // Get the allocation at the head of the free list at index 'list_idx'. Return nullptr\n+  // if list is empty.\n+  bool CheckFreeListHead(int list_idx) const;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332054e415310340131a8a89ae4a87b7611f4cbb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMDYyNA==", "bodyText": "ok\uff0cI will change the name", "url": "https://github.com/apache/incubator-doris/pull/4152#discussion_r459310624", "createdAt": "2020-07-23T09:03:21Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/bufferpool/suballocator.h", "diffHunk": "@@ -128,6 +129,10 @@ class Suballocator {\n   // if list is empty.\n   std::unique_ptr<Suballocation> PopFreeListHead(int list_idx);\n \n+  // Get the allocation at the head of the free list at index 'list_idx'. Return nullptr\n+  // if list is empty.\n+  bool CheckFreeListHead(int list_idx) const;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTA4Nw=="}, "originalCommit": {"oid": "332054e415310340131a8a89ae4a87b7611f4cbb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjUyOTM2OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/buffered_tuple_stream2.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozMDoyMFrOG2C-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjoyNjo1N1rOG2hdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNTAwMw==", "bodyText": "I think the implementation isn't consistent with the method comment and name.\nOnly if there has one tuple. _fixed_tuple_row_size will large than zero.\n    for (int i = 0; i < _desc.tuple_descriptors().size(); ++i) {\n        const TupleDescriptor* tuple_desc = _desc.tuple_descriptors()[i];\n        const int tuple_byte_size = tuple_desc->byte_size();\n        _fixed_tuple_row_size += tuple_byte_size;\n        if (!tuple_desc->string_slots().empty()) {\n            _string_slots.push_back(make_pair(i, tuple_desc->string_slots()));\n        }\n        // if (!tuple_desc->collection_slots().empty()) {\n        //     _collection_slots.push_back(make_pair(i, tuple_desc->collection_slots()));\n        // }\n    }", "url": "https://github.com/apache/incubator-doris/pull/4152#discussion_r459325003", "createdAt": "2020-07-23T09:30:20Z", "author": {"login": "kangkaisen"}, "path": "be/src/runtime/buffered_tuple_stream2.h", "diffHunk": "@@ -257,6 +257,11 @@ class BufferedTupleStream2 {\n     bool has_tuple_footprint() const {\n         return _fixed_tuple_row_size > 0 || !_string_slots.empty() || _nullable_tuple;\n     }\n+    /// Returns true if the row consumes any memory. If false, the stream only needs to\n+    /// store the count of rows.\n+    bool row_consumes_memory() const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd5ccf43330201f47c503ab52fa154d9d1d29aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNDQ0Nw==", "bodyText": "I will change the fun name", "url": "https://github.com/apache/incubator-doris/pull/4152#discussion_r459824447", "createdAt": "2020-07-24T02:26:57Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/buffered_tuple_stream2.h", "diffHunk": "@@ -257,6 +257,11 @@ class BufferedTupleStream2 {\n     bool has_tuple_footprint() const {\n         return _fixed_tuple_row_size > 0 || !_string_slots.empty() || _nullable_tuple;\n     }\n+    /// Returns true if the row consumes any memory. If false, the stream only needs to\n+    /// store the count of rows.\n+    bool row_consumes_memory() const {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNTAwMw=="}, "originalCommit": {"oid": "8dd5ccf43330201f47c503ab52fa154d9d1d29aa"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1223, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}