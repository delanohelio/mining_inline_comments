{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDkxNDU4", "number": 4438, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNjozNlrOEbkHyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxNzoyMlrOEl89jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzM4ODI1OnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scan_node.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNjozNlrOHFkMfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNjozNlrOHFkMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5Nzk0OQ==", "bodyText": "asii --> ascii", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475597949", "createdAt": "2020-08-24T13:26:36Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/odbc_scan_node.cpp", "diffHunk": "@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"odbc_scan_node.h\"\n+\n+#include <sstream>\n+\n+#include \"exec/text_converter.hpp\"\n+#include \"gen_cpp/PlanNodes_types.h\"\n+#include \"runtime/runtime_state.h\"\n+#include \"runtime/row_batch.h\"\n+#include \"runtime/string_value.h\"\n+#include \"runtime/tuple_row.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+\n+OdbcScanNode::OdbcScanNode(ObjectPool* pool, const TPlanNode& tnode,\n+                             const DescriptorTbl& descs)\n+        : ScanNode(pool, tnode, descs),\n+          _is_init(false),\n+          _table_name(tnode.odbc_scan_node.table_name),\n+          _tuple_id(tnode.odbc_scan_node.tuple_id),\n+          _columns(tnode.odbc_scan_node.columns),\n+          _filters(tnode.odbc_scan_node.filters),\n+          _tuple_desc(nullptr) {\n+}\n+\n+OdbcScanNode::~OdbcScanNode() {\n+}\n+\n+Status OdbcScanNode::prepare(RuntimeState* state) {\n+    VLOG(1) << \"OdbcScanNode::Prepare\";\n+\n+    if (_is_init) {\n+        return Status::OK();\n+    }\n+\n+    if (NULL == state) {\n+        return Status::InternalError(\"input pointer is NULL.\");\n+    }\n+\n+    RETURN_IF_ERROR(ScanNode::prepare(state));\n+    // get tuple desc\n+    _tuple_desc = state->desc_tbl().get_tuple_descriptor(_tuple_id);\n+\n+    if (NULL == _tuple_desc) {\n+        return Status::InternalError(\"Failed to get tuple descriptor.\");\n+    }\n+\n+    _slot_num = _tuple_desc->slots().size();\n+    // get odbc table info\n+    const ODBCTableDescriptor* odbc_table =\n+            static_cast<const ODBCTableDescriptor*>(_tuple_desc->table_desc());\n+\n+    if (NULL == odbc_table) {\n+        return Status::InternalError(\"odbc table pointer is NULL.\");\n+    }\n+\n+    _odbc_param.host = odbc_table->host();\n+    _odbc_param.port = odbc_table->port();\n+    _odbc_param.user = odbc_table->user();\n+    _odbc_param.passwd = odbc_table->passwd();\n+    _odbc_param.db = odbc_table->db();\n+    _odbc_param.drivier = odbc_table->driver();\n+    _odbc_param.type = odbc_table->type();\n+    _odbc_param.tuple_desc = _tuple_desc;\n+\n+    _odbc_scanner.reset(new (std::nothrow)ODBCScanner(_odbc_param));\n+\n+    if (_odbc_scanner.get() == nullptr) {\n+        return Status::InternalError(\"new a odbc scanner failed.\");\n+    }\n+\n+    _tuple_pool.reset(new(std::nothrow) MemPool(mem_tracker().get()));\n+\n+    if (_tuple_pool.get() == NULL) {\n+        return Status::InternalError(\"new a mem pool failed.\");\n+    }\n+\n+    _text_converter.reset(new(std::nothrow) TextConverter('\\\\'));\n+\n+    if (_text_converter.get() == NULL) {\n+        return Status::InternalError(\"new a text convertor failed.\");\n+    }\n+\n+    _is_init = true;\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::open(RuntimeState* state) {\n+    RETURN_IF_ERROR(ExecNode::open(state));\n+    VLOG(1) << \"OdbcScanNode::Open\";\n+\n+    if (NULL == state) {\n+        return Status::InternalError(\"input pointer is NULL.\");\n+    }\n+\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialize.\");\n+    }\n+\n+    RETURN_IF_ERROR(exec_debug_action(TExecNodePhase::OPEN));\n+    RETURN_IF_CANCELLED(state);\n+    SCOPED_TIMER(_runtime_profile->total_time_counter());\n+    RETURN_IF_ERROR(_odbc_scanner->open());\n+    RETURN_IF_ERROR(_odbc_scanner->query(_table_name, _columns, _filters));\n+    // check materialize slot num\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::write_text_slot(char* value, int value_length,\n+                                      SlotDescriptor* slot, RuntimeState* state) {\n+    if (!_text_converter->write_slot(slot, _tuple, value, value_length,\n+                                     true, false, _tuple_pool.get())) {\n+        std::stringstream ss;\n+        ss << \"fail to convert odbc value '\" << value << \"' TO \" << slot->type();\n+        return Status::InternalError(ss.str());\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::get_next(RuntimeState* state, RowBatch* row_batch, bool* eos) {\n+    VLOG(1) << \"OdbcScanNode::GetNext\";\n+\n+    if (NULL == state || NULL == row_batch || NULL == eos) {\n+        return Status::InternalError(\"input is NULL pointer\");\n+    }\n+\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialize.\");\n+    }\n+\n+    RETURN_IF_ERROR(exec_debug_action(TExecNodePhase::GETNEXT));\n+    RETURN_IF_CANCELLED(state);\n+    SCOPED_TIMER(_runtime_profile->total_time_counter());\n+    SCOPED_TIMER(materialize_tuple_timer());\n+\n+    if (reached_limit()) {\n+        *eos = true;\n+        return Status::OK();\n+    }\n+\n+    // create new tuple buffer for row_batch\n+    int tuple_buffer_size = row_batch->capacity() * _tuple_desc->byte_size();\n+    void* tuple_buffer = _tuple_pool->allocate(tuple_buffer_size);\n+\n+    if (NULL == tuple_buffer) {\n+        return Status::InternalError(\"Allocate memory failed.\");\n+    }\n+\n+    _tuple = reinterpret_cast<Tuple*>(tuple_buffer);\n+    // Indicates whether there are more rows to process. Set in _hbase_scanner.next().\n+    bool odbc_eos = false;\n+\n+    while (true) {\n+        RETURN_IF_CANCELLED(state);\n+\n+        if (reached_limit() || row_batch->is_full()) {\n+            // hang on to last allocated chunk in pool, we'll keep writing into it in the\n+            // next get_next() call\n+            row_batch->tuple_data_pool()->acquire_data(_tuple_pool.get(), !reached_limit());\n+            *eos = reached_limit();\n+            return Status::OK();\n+        }\n+\n+        RETURN_IF_ERROR(_odbc_scanner->get_next_row(&odbc_eos));\n+\n+        if (odbc_eos) {\n+            row_batch->tuple_data_pool()->acquire_data(_tuple_pool.get(), false);\n+            *eos = true;\n+            return Status::OK();\n+        }\n+\n+        int row_idx = row_batch->add_row();\n+        TupleRow* row = row_batch->get_row(row_idx);\n+        // scan node is the first tuple of tuple row\n+        row->set_tuple(0, _tuple);\n+        memset(_tuple, 0, _tuple_desc->num_null_bytes());\n+        int j = 0;\n+\n+        for (int i = 0; i < _slot_num; ++i) {\n+            auto slot_desc = _tuple_desc->slots()[i];\n+            // because the fe planner filter the non_materialize column\n+            if (!slot_desc->is_materialized()) {\n+                continue;\n+            }\n+\n+            const auto& column_data = _odbc_scanner->get_column_data(j);\n+            if (column_data.strlen_or_ind == SQL_NULL_DATA) {\n+                if (slot_desc->is_nullable()) {\n+                    _tuple->set_null(slot_desc->null_indicator_offset());\n+                } else {\n+                    std::stringstream ss;\n+                    ss << \"nonnull column contains NULL. table=\" << _table_name\n+                       << \", column=\" << slot_desc->col_name();\n+                    return Status::InternalError(ss.str());\n+                }\n+            } else if (column_data.strlen_or_ind > column_data.buffer_length) {\n+                std::stringstream ss;\n+                ss << \"nonnull column contains NULL. table=\" << _table_name\n+                   << \", column=\" << slot_desc->col_name();\n+                return Status::InternalError(ss.str());\n+            } else {\n+                    RETURN_IF_ERROR(\n+                            write_text_slot(static_cast<char*>(column_data.target_value_ptr), column_data.strlen_or_ind, slot_desc, state));\n+            }\n+            j++;\n+        }\n+\n+        // Before we fix the problem utf8 encode sql query in SQLexecDirect\n+        // we need to check some filter can not encode in asii code, like chinese", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzM4OTUxOnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scan_node.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNjo1MVrOHFkNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNjo1MVrOHFkNMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5ODEzMA==", "bodyText": "_hbase_scanner?", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475598130", "createdAt": "2020-08-24T13:26:51Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/odbc_scan_node.cpp", "diffHunk": "@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"odbc_scan_node.h\"\n+\n+#include <sstream>\n+\n+#include \"exec/text_converter.hpp\"\n+#include \"gen_cpp/PlanNodes_types.h\"\n+#include \"runtime/runtime_state.h\"\n+#include \"runtime/row_batch.h\"\n+#include \"runtime/string_value.h\"\n+#include \"runtime/tuple_row.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+\n+OdbcScanNode::OdbcScanNode(ObjectPool* pool, const TPlanNode& tnode,\n+                             const DescriptorTbl& descs)\n+        : ScanNode(pool, tnode, descs),\n+          _is_init(false),\n+          _table_name(tnode.odbc_scan_node.table_name),\n+          _tuple_id(tnode.odbc_scan_node.tuple_id),\n+          _columns(tnode.odbc_scan_node.columns),\n+          _filters(tnode.odbc_scan_node.filters),\n+          _tuple_desc(nullptr) {\n+}\n+\n+OdbcScanNode::~OdbcScanNode() {\n+}\n+\n+Status OdbcScanNode::prepare(RuntimeState* state) {\n+    VLOG(1) << \"OdbcScanNode::Prepare\";\n+\n+    if (_is_init) {\n+        return Status::OK();\n+    }\n+\n+    if (NULL == state) {\n+        return Status::InternalError(\"input pointer is NULL.\");\n+    }\n+\n+    RETURN_IF_ERROR(ScanNode::prepare(state));\n+    // get tuple desc\n+    _tuple_desc = state->desc_tbl().get_tuple_descriptor(_tuple_id);\n+\n+    if (NULL == _tuple_desc) {\n+        return Status::InternalError(\"Failed to get tuple descriptor.\");\n+    }\n+\n+    _slot_num = _tuple_desc->slots().size();\n+    // get odbc table info\n+    const ODBCTableDescriptor* odbc_table =\n+            static_cast<const ODBCTableDescriptor*>(_tuple_desc->table_desc());\n+\n+    if (NULL == odbc_table) {\n+        return Status::InternalError(\"odbc table pointer is NULL.\");\n+    }\n+\n+    _odbc_param.host = odbc_table->host();\n+    _odbc_param.port = odbc_table->port();\n+    _odbc_param.user = odbc_table->user();\n+    _odbc_param.passwd = odbc_table->passwd();\n+    _odbc_param.db = odbc_table->db();\n+    _odbc_param.drivier = odbc_table->driver();\n+    _odbc_param.type = odbc_table->type();\n+    _odbc_param.tuple_desc = _tuple_desc;\n+\n+    _odbc_scanner.reset(new (std::nothrow)ODBCScanner(_odbc_param));\n+\n+    if (_odbc_scanner.get() == nullptr) {\n+        return Status::InternalError(\"new a odbc scanner failed.\");\n+    }\n+\n+    _tuple_pool.reset(new(std::nothrow) MemPool(mem_tracker().get()));\n+\n+    if (_tuple_pool.get() == NULL) {\n+        return Status::InternalError(\"new a mem pool failed.\");\n+    }\n+\n+    _text_converter.reset(new(std::nothrow) TextConverter('\\\\'));\n+\n+    if (_text_converter.get() == NULL) {\n+        return Status::InternalError(\"new a text convertor failed.\");\n+    }\n+\n+    _is_init = true;\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::open(RuntimeState* state) {\n+    RETURN_IF_ERROR(ExecNode::open(state));\n+    VLOG(1) << \"OdbcScanNode::Open\";\n+\n+    if (NULL == state) {\n+        return Status::InternalError(\"input pointer is NULL.\");\n+    }\n+\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialize.\");\n+    }\n+\n+    RETURN_IF_ERROR(exec_debug_action(TExecNodePhase::OPEN));\n+    RETURN_IF_CANCELLED(state);\n+    SCOPED_TIMER(_runtime_profile->total_time_counter());\n+    RETURN_IF_ERROR(_odbc_scanner->open());\n+    RETURN_IF_ERROR(_odbc_scanner->query(_table_name, _columns, _filters));\n+    // check materialize slot num\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::write_text_slot(char* value, int value_length,\n+                                      SlotDescriptor* slot, RuntimeState* state) {\n+    if (!_text_converter->write_slot(slot, _tuple, value, value_length,\n+                                     true, false, _tuple_pool.get())) {\n+        std::stringstream ss;\n+        ss << \"fail to convert odbc value '\" << value << \"' TO \" << slot->type();\n+        return Status::InternalError(ss.str());\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status OdbcScanNode::get_next(RuntimeState* state, RowBatch* row_batch, bool* eos) {\n+    VLOG(1) << \"OdbcScanNode::GetNext\";\n+\n+    if (NULL == state || NULL == row_batch || NULL == eos) {\n+        return Status::InternalError(\"input is NULL pointer\");\n+    }\n+\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialize.\");\n+    }\n+\n+    RETURN_IF_ERROR(exec_debug_action(TExecNodePhase::GETNEXT));\n+    RETURN_IF_CANCELLED(state);\n+    SCOPED_TIMER(_runtime_profile->total_time_counter());\n+    SCOPED_TIMER(materialize_tuple_timer());\n+\n+    if (reached_limit()) {\n+        *eos = true;\n+        return Status::OK();\n+    }\n+\n+    // create new tuple buffer for row_batch\n+    int tuple_buffer_size = row_batch->capacity() * _tuple_desc->byte_size();\n+    void* tuple_buffer = _tuple_pool->allocate(tuple_buffer_size);\n+\n+    if (NULL == tuple_buffer) {\n+        return Status::InternalError(\"Allocate memory failed.\");\n+    }\n+\n+    _tuple = reinterpret_cast<Tuple*>(tuple_buffer);\n+    // Indicates whether there are more rows to process. Set in _hbase_scanner.next().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzM5NzQ2OnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyODo1M1rOHFkR6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyODo1M1rOHFkR6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5OTMzNg==", "bodyText": "equeal  -> equal", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475599336", "createdAt": "2020-08-24T13:28:53Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/odbc_scanner.cpp", "diffHunk": "@@ -0,0 +1,248 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <codecvt>\n+#include <sqlext.h>\n+\n+#include \"exec/odbc_scanner.h\"\n+#include \"common/logging.h\"\n+#include \"runtime/primitive_type.h\"\n+\n+#define ODBC_DISPOSE(h, ht, x, op) { auto rc = x;\\\n+                                if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) \\\n+                                { \\\n+                                    return error_status(op, handle_diagnostic_record(h, ht, rc)); \\\n+                                } \\\n+                                if (rc == SQL_ERROR) \\\n+                                { \\\n+                                    auto err_msg = std::string(\"Errro in\") + std::string(op); \\\n+                                    return Status::InternalError(err_msg.c_str()); \\\n+                                }  \\\n+                            } \\\n+\n+static constexpr uint32_t SMALL_COLUMN_SIZE_BUFFER = 100;\n+// Now we only treat HLL, CHAR, VARCHAR as big column\n+static constexpr uint32_t BIG_COLUMN_SIZE_BUFFER = 65535;\n+\n+namespace doris {\n+\n+ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+        : _connect_string(build_connect_string(param)),\n+          _type(param.type),\n+          _tuple_desc(param.tuple_desc),\n+          _is_open(false),\n+          _field_num(0),\n+          _row_count(0),\n+          _env(nullptr),\n+          _dbc(nullptr),\n+          _stmt(nullptr) {\n+}\n+\n+ODBCScanner::~ODBCScanner() {\n+    if (_stmt != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_STMT, _stmt);\n+    }\n+\n+    if (_dbc != nullptr) {\n+        SQLDisconnect(_dbc);\n+        SQLFreeHandle(SQL_HANDLE_DBC, _dbc);\n+    }\n+\n+    if (_env != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_ENV, _env);\n+    }\n+}\n+\n+Status ODBCScanner::open() {\n+    if (_is_open) {\n+        LOG(INFO) << \"this scanner already opened\";\n+        return Status::OK();\n+    }\n+\n+    // Allocate an environment\n+    if (SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_env) != SQL_SUCCESS) {\n+        return Status::InternalError(\"alloc env failed\");\n+    }\n+    // We want ODBC 3 support\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLSetEnvAttr(_env, SQL_ATTR_ODBC_VERSION, (void *) SQL_OV_ODBC3, 0), \"set env attr\");\n+    // Allocate a connection handle\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLAllocHandle(SQL_HANDLE_DBC, _env, &_dbc), \"alloc dbc\");\n+    // Connect to the Database\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLDriverConnect(_dbc, NULL, (SQLCHAR*)_connect_string.c_str(), SQL_NTS,\n+                           NULL, 0, NULL, SQL_DRIVER_COMPLETE_REQUIRED), \"driver connect\");\n+\n+    LOG(INFO) << \"connect success:\";\n+\n+    _is_open = true;\n+    return Status::OK();\n+}\n+\n+Status ODBCScanner::query(const std::string& query) {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Query before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    ODBC_DISPOSE(_stmt, SQL_HANDLE_STMT, SQLExecDirect(_stmt, (SQLCHAR*)(query.c_str()), SQL_NTS), \"exec direct\");\n+    // How many columns are there */\n+    ODBC_DISPOSE(_stmt, SQL_HANDLE_STMT, SQLNumResultCols(_stmt, &_field_num), \"count num colomn\");\n+\n+    LOG(INFO) << \"execute success:\" << query <<  \" column count:\" << _field_num;\n+\n+    // check materialize num equeal _field_num", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzQxNTI3OnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozMzoxMFrOHFkc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozMzoxMFrOHFkc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMjE0OA==", "bodyText": "add some comments", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475602148", "createdAt": "2020-08-24T13:33:10Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/odbc_scanner.cpp", "diffHunk": "@@ -0,0 +1,248 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <codecvt>\n+#include <sqlext.h>\n+\n+#include \"exec/odbc_scanner.h\"\n+#include \"common/logging.h\"\n+#include \"runtime/primitive_type.h\"\n+\n+#define ODBC_DISPOSE(h, ht, x, op) { auto rc = x;\\\n+                                if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) \\\n+                                { \\\n+                                    return error_status(op, handle_diagnostic_record(h, ht, rc)); \\\n+                                } \\\n+                                if (rc == SQL_ERROR) \\\n+                                { \\\n+                                    auto err_msg = std::string(\"Errro in\") + std::string(op); \\\n+                                    return Status::InternalError(err_msg.c_str()); \\\n+                                }  \\\n+                            } \\\n+\n+static constexpr uint32_t SMALL_COLUMN_SIZE_BUFFER = 100;\n+// Now we only treat HLL, CHAR, VARCHAR as big column\n+static constexpr uint32_t BIG_COLUMN_SIZE_BUFFER = 65535;\n+\n+namespace doris {\n+\n+ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+        : _connect_string(build_connect_string(param)),\n+          _type(param.type),\n+          _tuple_desc(param.tuple_desc),\n+          _is_open(false),\n+          _field_num(0),\n+          _row_count(0),\n+          _env(nullptr),\n+          _dbc(nullptr),\n+          _stmt(nullptr) {\n+}\n+\n+ODBCScanner::~ODBCScanner() {\n+    if (_stmt != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_STMT, _stmt);\n+    }\n+\n+    if (_dbc != nullptr) {\n+        SQLDisconnect(_dbc);\n+        SQLFreeHandle(SQL_HANDLE_DBC, _dbc);\n+    }\n+\n+    if (_env != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_ENV, _env);\n+    }\n+}\n+\n+Status ODBCScanner::open() {\n+    if (_is_open) {\n+        LOG(INFO) << \"this scanner already opened\";\n+        return Status::OK();\n+    }\n+\n+    // Allocate an environment\n+    if (SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_env) != SQL_SUCCESS) {\n+        return Status::InternalError(\"alloc env failed\");\n+    }\n+    // We want ODBC 3 support\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLSetEnvAttr(_env, SQL_ATTR_ODBC_VERSION, (void *) SQL_OV_ODBC3, 0), \"set env attr\");\n+    // Allocate a connection handle\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLAllocHandle(SQL_HANDLE_DBC, _env, &_dbc), \"alloc dbc\");\n+    // Connect to the Database\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLDriverConnect(_dbc, NULL, (SQLCHAR*)_connect_string.c_str(), SQL_NTS,\n+                           NULL, 0, NULL, SQL_DRIVER_COMPLETE_REQUIRED), \"driver connect\");\n+\n+    LOG(INFO) << \"connect success:\";\n+\n+    _is_open = true;\n+    return Status::OK();\n+}\n+\n+Status ODBCScanner::query(const std::string& query) {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Query before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    ODBC_DISPOSE(_stmt, SQL_HANDLE_STMT, SQLExecDirect(_stmt, (SQLCHAR*)(query.c_str()), SQL_NTS), \"exec direct\");\n+    // How many columns are there */\n+    ODBC_DISPOSE(_stmt, SQL_HANDLE_STMT, SQLNumResultCols(_stmt, &_field_num), \"count num colomn\");\n+\n+    LOG(INFO) << \"execute success:\" << query <<  \" column count:\" << _field_num;\n+\n+    // check materialize num equeal _field_num\n+    int materialize_num = 0;\n+    for (int i = 0; i < _tuple_desc->slots().size(); ++i) {\n+        if (_tuple_desc->slots()[i]->is_materialized()) {\n+            materialize_num++;\n+        }\n+    }\n+    if (_field_num != materialize_num) {\n+        return Status::InternalError(\"input and output not equal.\");\n+    }\n+\n+    // allocate memory for the binding\n+    for (int i = 0 ; i < _field_num ; i++ ) {\n+        DataBinding* column_data = new DataBinding;\n+        column_data->target_type = SQL_C_CHAR;\n+        auto type = _tuple_desc->slots()[i]->type().type;\n+        column_data->buffer_length = (type == TYPE_HLL || type == TYPE_CHAR || type == TYPE_VARCHAR) ? BIG_COLUMN_SIZE_BUFFER :\n+                SMALL_COLUMN_SIZE_BUFFER;\n+        column_data->target_value_ptr = malloc(sizeof(char) * column_data->buffer_length);\n+        _columns_data.push_back(column_data);\n+    }\n+\n+    // setup the binding\n+    for (int i = 0 ; i < _field_num ; i++ ) {\n+        ODBC_DISPOSE(_stmt, SQL_HANDLE_STMT, SQLBindCol(_stmt, (SQLUSMALLINT)i + 1, _columns_data[i].target_type,\n+                              _columns_data[i].target_value_ptr, _columns_data[i].buffer_length, &(_columns_data[i].strlen_or_ind)), \"bind col\");\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCScanner::query(const std::string& table, const std::vector<std::string>& fields,\n+                       const std::vector<std::string>& filters) {\n+    if (!_is_open) {\n+        return Status::InternalError(\"Query before open.\");\n+    }\n+\n+    _sql_str = \"SELECT \";\n+\n+    for (int i = 0; i < fields.size(); ++i) {\n+        if (0 != i) {\n+            _sql_str += \",\";\n+        }\n+\n+        _sql_str += fields[i];\n+    }\n+\n+    _sql_str += \" FROM \" + table;\n+\n+    if (!filters.empty()) {\n+        _sql_str += \" WHERE \";\n+\n+        for (int i = 0; i < filters.size(); ++i) {\n+            if (0 != i) {\n+                _sql_str += \" AND\";\n+            }\n+\n+            _sql_str += \" (\" + filters[i] + \") \";\n+        }\n+    }\n+\n+    return query(_sql_str);\n+}\n+\n+Status ODBCScanner::get_next_row(bool* eos) {\n+    if (!_is_open) {\n+        return Status::InternalError(\"GetNextRow before open.\");\n+    }\n+\n+    auto ret = SQLFetch(_stmt);\n+    if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {\n+        return Status::OK();\n+    } else if (ret != SQL_NO_DATA_FOUND) {\n+        return error_status(\"result fetch\", handle_diagnostic_record(_stmt, SQL_HANDLE_STMT, ret));\n+    }\n+\n+    *eos = true;\n+    return Status::OK();\n+}\n+\n+Status ODBCScanner::error_status(const std::string& prefix, const std::string& error_msg) {\n+    std::stringstream msg;\n+    msg << prefix << \" Err: \" << error_msg;\n+    LOG(WARNING) << msg.str();\n+    return Status::InternalError(msg.str());\n+}\n+\n+std::string ODBCScanner::handle_diagnostic_record(SQLHANDLE      hHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzQyNzQ5OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozNjowMVrOHFkkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNToyN1rOHHDShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNDAxOQ==", "bodyText": "hll data type?\ndatetime data type?", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475604019", "createdAt": "2020-08-24T13:36:01Z", "author": {"login": "wutiangan"}, "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "diffHunk": "@@ -0,0 +1,172 @@\n+---\n+{\n+    \"title\": \"ODBC of Doris\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# ODBC External Table Of Doris\n+\n+ODBC External Table Of Doris \u63d0\u4f9b\u4e86Doris\u901a\u8fc7\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u6807\u51c6\u63a5\u53e3(ODBC)\u6765\u8bbf\u95ee\u5916\u90e8\u8868\uff0c\u5916\u90e8\u8868\u7701\u53bb\u4e86\u7e41\u7410\u7684\u6570\u636e\u5bfc\u5165\u5de5\u4f5c\uff0c\u8ba9Doris\u53ef\u4ee5\u5177\u6709\u4e86\u8bbf\u95ee\u5404\u5f0f\u6570\u636e\u5e93\u7684\u80fd\u529b\uff0c\u5e76\u501f\u52a9Doris\u672c\u8eab\u7684OLAP\u7684\u80fd\u529b\u6765\u89e3\u51b3\u5916\u90e8\u8868\u7684\u6570\u636e\u5206\u6790\u95ee\u9898\uff1a\n+ \n+ 1. \u652f\u6301\u5404\u79cd\u6570\u636e\u6e90\u63a5\u5165Doris\n+ 2. \u652f\u6301Doris\u4e0e\u5404\u79cd\u6570\u636e\u6e90\u4e2d\u7684\u8868\u8054\u5408\u67e5\u8be2\uff0c\u8fdb\u884c\u66f4\u52a0\u590d\u6742\u7684\u5206\u6790\u64cd\u4f5c\n+\n+\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u3001\u4f7f\u7528\u65b9\u5f0f\u7b49\u3002\n+\n+## \u540d\u8bcd\u89e3\u91ca\n+\n+### Doirs\u76f8\u5173\n+* FE\uff1aFrontend\uff0cDoris \u7684\u524d\u7aef\u8282\u70b9,\u8d1f\u8d23\u5143\u6570\u636e\u7ba1\u7406\u548c\u8bf7\u6c42\u63a5\u5165\n+* BE\uff1aBackend\uff0cDoris \u7684\u540e\u7aef\u8282\u70b9,\u8d1f\u8d23\u67e5\u8be2\u6267\u884c\u548c\u6570\u636e\u5b58\u50a8\n+\n+## \u4f7f\u7528\u65b9\u6cd5\n+\n+### Doris\u4e2d\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+```\n+CREATE EXTERNAL TABLE `baseall_oracle` (\n+  `k1` decimal(9, 3) NOT NULL COMMENT \"\",\n+  `k2` char(10) NOT NULL COMMENT \"\",\n+  `k3` datetime NOT NULL COMMENT \"\",\n+  `k5` varchar(20) NOT NULL COMMENT \"\",\n+  `k6` double NOT NULL COMMENT \"\"\n+) ENGINE=ODBC\n+COMMENT \"ODBC\"\n+PROPERTIES (\n+\"host\" = \"192.168.0.1\",\n+\"port\" = \"8086\",\n+\"user\" = \"test\",\n+\"password\" = \"test\",\n+\"database\" = \"test\",\n+\"table\" = \"baseall\",\n+\"driver\" = \"Oracle 19 ODBC driver\",\n+\"type\" = \"oracle\"\n+);\n+```\n+\n+\u53c2\u6570\u8bf4\u660e\uff1a\n+\n+\u53c2\u6570 | \u8bf4\u660e\n+---|---\n+**hosts** | \u5916\u8868\u6570\u636e\u5e93\u7684IP\u5730\u5740\n+**driver** | ODBC\u5916\u8868\u7684Driver\u540d\uff0c\u8be5\u540d\u5b57\u9700\u8981\u548cbe/conf/odbcinst.ini\u4e2d\u7684Driver\u540d\u4e00\u81f4\u3002\n+**type** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301oracle\u4e0emysql\n+**user** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\n+**password** | \u5bf9\u5e94\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\n+\n+\n+##### ODBC Driver\u7684\u5b89\u88c5\u548c\u914d\u7f6e\n+\u5404\u5927\u4e3b\u6d41\u6570\u636e\u5e93\u90fd\u4f1a\u63d0\u4f9bODBC\u7684\u8bbf\u95eeDriver\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u53c2\u7167\u53c2\u7167\u5404\u6570\u636e\u5e93\u5b98\u65b9\u63a8\u8350\u7684\u65b9\u5f0f\u5b89\u88c5\u5bf9\u5e94\u7684ODBC Driver LiB\u5e93\u3002\n+\n+\n+\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u7684Driver Lib\u5e93\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u4fee\u6539be/conf/odbcinst.ini\u7684\u914d\u7f6e\uff1a\n+```\n+[MySQL Driver]\n+Description     = ODBC for MySQL\n+Driver          = /usr/lib64/libmyodbc8w.so\n+FileUsage       = 1 \n+```\n+* \u4e0a\u8ff0\u914d\u7f6e`[]`\u91cc\u7684\u5bf9\u5e94\u7684\u662fDriver\u540d\uff0c\u5728\u5efa\u7acb\u5916\u90e8\u8868\u65f6\u9700\u8981\u4fdd\u6301\u5916\u90e8\u8868\u7684Driver\u540d\u548c\u914d\u7f6e\u6587\u4ef6\u4e4b\u4e2d\u7684\u4e00\u81f4\u3002\n+* `Driver=`  \u8fd9\u4e2a\u8981\u6839\u636e\u5b9e\u9645BE\u5b89\u88c5Driver\u7684\u8def\u5f84\u6765\u586b\u5199\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u5e93\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u4fdd\u8bc1\u8be5\u52a8\u6001\u5e93\u7684\u524d\u7f6e\u4f9d\u8d56\u90fd\u88ab\u6ee1\u8db3\u3002\n+\n+**\u5207\u8bb0\uff0c\u8fd9\u91cc\u8981\u6c42\u6240\u6709\u7684BE\u8282\u70b9\u90fd\u5b89\u88c5\u4e0a\u76f8\u540c\u7684Driver\uff0c\u5e76\u4e14\u5b89\u88c5\u8def\u5f84\u76f8\u540c\uff0c\u540c\u65f6\u6709\u76f8\u540c\u7684be/conf/odbcinst.ini\u7684\u914d\u7f6e\u3002**\n+\n+\n+### \u67e5\u8be2\u7528\u6cd5\n+\n+\u5b8c\u6210\u5728Doris\u4e2d\u5efa\u7acbODBC\u5916\u8868\u540e\uff0c\u9664\u4e86\u65e0\u6cd5\u4f7f\u7528Doris\u4e2d\u7684\u6570\u636e\u6a21\u578b(rollup\u3001\u9884\u805a\u5408\u3001\u7269\u5316\u89c6\u56fe\u7b49)\u5916\uff0c\u4e0e\u666e\u901a\u7684Doris\u8868\u5e76\u65e0\u533a\u522b\n+\n+\n+```\n+select * from oracle_table where k1 > 1000 and k3 ='term' or k4 like '%doris'\n+```\n+\n+\n+\n+## \u7c7b\u578b\u5339\u914d\n+\n+\u5404\u4e2a\u6570\u636e\u4e4b\u95f4\u6570\u636e\u7c7b\u578b\u5b58\u5728\u4e0d\u540c\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u5404\u4e2a\u6570\u636e\u5e93\u4e2d\u7684\u7c7b\u578b\u548cDoris\u4e4b\u4e2d\u6570\u636e\u7c7b\u578b\u5339\u914d\u7684\u60c5\u51b5\u3002\n+\n+### MySQL\u7c7b\u578b\n+\n+|  MySQL  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  BOOLEAN  | BOOLEAN  |                         |\n+|   CHAR   |  CHAR  |            \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801            |\n+| VARCHAR | VARCHAR |       \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801       |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|   TINYINT   | TINYINT |  |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   BIGINT  | BIGINT |  |\n+|   DOUBLE  | DOUBLE |  |\n+|   DATE  | DATE |  |\n+|   DECIMAL  | DECIMAL |  |\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NTk3Mg==", "bodyText": "mysql now do not support hll, i will add datetime type in doc", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r477155972", "createdAt": "2020-08-26T09:15:27Z", "author": {"login": "HappenLee"}, "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "diffHunk": "@@ -0,0 +1,172 @@\n+---\n+{\n+    \"title\": \"ODBC of Doris\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# ODBC External Table Of Doris\n+\n+ODBC External Table Of Doris \u63d0\u4f9b\u4e86Doris\u901a\u8fc7\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u6807\u51c6\u63a5\u53e3(ODBC)\u6765\u8bbf\u95ee\u5916\u90e8\u8868\uff0c\u5916\u90e8\u8868\u7701\u53bb\u4e86\u7e41\u7410\u7684\u6570\u636e\u5bfc\u5165\u5de5\u4f5c\uff0c\u8ba9Doris\u53ef\u4ee5\u5177\u6709\u4e86\u8bbf\u95ee\u5404\u5f0f\u6570\u636e\u5e93\u7684\u80fd\u529b\uff0c\u5e76\u501f\u52a9Doris\u672c\u8eab\u7684OLAP\u7684\u80fd\u529b\u6765\u89e3\u51b3\u5916\u90e8\u8868\u7684\u6570\u636e\u5206\u6790\u95ee\u9898\uff1a\n+ \n+ 1. \u652f\u6301\u5404\u79cd\u6570\u636e\u6e90\u63a5\u5165Doris\n+ 2. \u652f\u6301Doris\u4e0e\u5404\u79cd\u6570\u636e\u6e90\u4e2d\u7684\u8868\u8054\u5408\u67e5\u8be2\uff0c\u8fdb\u884c\u66f4\u52a0\u590d\u6742\u7684\u5206\u6790\u64cd\u4f5c\n+\n+\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u3001\u4f7f\u7528\u65b9\u5f0f\u7b49\u3002\n+\n+## \u540d\u8bcd\u89e3\u91ca\n+\n+### Doirs\u76f8\u5173\n+* FE\uff1aFrontend\uff0cDoris \u7684\u524d\u7aef\u8282\u70b9,\u8d1f\u8d23\u5143\u6570\u636e\u7ba1\u7406\u548c\u8bf7\u6c42\u63a5\u5165\n+* BE\uff1aBackend\uff0cDoris \u7684\u540e\u7aef\u8282\u70b9,\u8d1f\u8d23\u67e5\u8be2\u6267\u884c\u548c\u6570\u636e\u5b58\u50a8\n+\n+## \u4f7f\u7528\u65b9\u6cd5\n+\n+### Doris\u4e2d\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+```\n+CREATE EXTERNAL TABLE `baseall_oracle` (\n+  `k1` decimal(9, 3) NOT NULL COMMENT \"\",\n+  `k2` char(10) NOT NULL COMMENT \"\",\n+  `k3` datetime NOT NULL COMMENT \"\",\n+  `k5` varchar(20) NOT NULL COMMENT \"\",\n+  `k6` double NOT NULL COMMENT \"\"\n+) ENGINE=ODBC\n+COMMENT \"ODBC\"\n+PROPERTIES (\n+\"host\" = \"192.168.0.1\",\n+\"port\" = \"8086\",\n+\"user\" = \"test\",\n+\"password\" = \"test\",\n+\"database\" = \"test\",\n+\"table\" = \"baseall\",\n+\"driver\" = \"Oracle 19 ODBC driver\",\n+\"type\" = \"oracle\"\n+);\n+```\n+\n+\u53c2\u6570\u8bf4\u660e\uff1a\n+\n+\u53c2\u6570 | \u8bf4\u660e\n+---|---\n+**hosts** | \u5916\u8868\u6570\u636e\u5e93\u7684IP\u5730\u5740\n+**driver** | ODBC\u5916\u8868\u7684Driver\u540d\uff0c\u8be5\u540d\u5b57\u9700\u8981\u548cbe/conf/odbcinst.ini\u4e2d\u7684Driver\u540d\u4e00\u81f4\u3002\n+**type** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301oracle\u4e0emysql\n+**user** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\n+**password** | \u5bf9\u5e94\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\n+\n+\n+##### ODBC Driver\u7684\u5b89\u88c5\u548c\u914d\u7f6e\n+\u5404\u5927\u4e3b\u6d41\u6570\u636e\u5e93\u90fd\u4f1a\u63d0\u4f9bODBC\u7684\u8bbf\u95eeDriver\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u53c2\u7167\u53c2\u7167\u5404\u6570\u636e\u5e93\u5b98\u65b9\u63a8\u8350\u7684\u65b9\u5f0f\u5b89\u88c5\u5bf9\u5e94\u7684ODBC Driver LiB\u5e93\u3002\n+\n+\n+\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u7684Driver Lib\u5e93\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u4fee\u6539be/conf/odbcinst.ini\u7684\u914d\u7f6e\uff1a\n+```\n+[MySQL Driver]\n+Description     = ODBC for MySQL\n+Driver          = /usr/lib64/libmyodbc8w.so\n+FileUsage       = 1 \n+```\n+* \u4e0a\u8ff0\u914d\u7f6e`[]`\u91cc\u7684\u5bf9\u5e94\u7684\u662fDriver\u540d\uff0c\u5728\u5efa\u7acb\u5916\u90e8\u8868\u65f6\u9700\u8981\u4fdd\u6301\u5916\u90e8\u8868\u7684Driver\u540d\u548c\u914d\u7f6e\u6587\u4ef6\u4e4b\u4e2d\u7684\u4e00\u81f4\u3002\n+* `Driver=`  \u8fd9\u4e2a\u8981\u6839\u636e\u5b9e\u9645BE\u5b89\u88c5Driver\u7684\u8def\u5f84\u6765\u586b\u5199\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u5e93\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u4fdd\u8bc1\u8be5\u52a8\u6001\u5e93\u7684\u524d\u7f6e\u4f9d\u8d56\u90fd\u88ab\u6ee1\u8db3\u3002\n+\n+**\u5207\u8bb0\uff0c\u8fd9\u91cc\u8981\u6c42\u6240\u6709\u7684BE\u8282\u70b9\u90fd\u5b89\u88c5\u4e0a\u76f8\u540c\u7684Driver\uff0c\u5e76\u4e14\u5b89\u88c5\u8def\u5f84\u76f8\u540c\uff0c\u540c\u65f6\u6709\u76f8\u540c\u7684be/conf/odbcinst.ini\u7684\u914d\u7f6e\u3002**\n+\n+\n+### \u67e5\u8be2\u7528\u6cd5\n+\n+\u5b8c\u6210\u5728Doris\u4e2d\u5efa\u7acbODBC\u5916\u8868\u540e\uff0c\u9664\u4e86\u65e0\u6cd5\u4f7f\u7528Doris\u4e2d\u7684\u6570\u636e\u6a21\u578b(rollup\u3001\u9884\u805a\u5408\u3001\u7269\u5316\u89c6\u56fe\u7b49)\u5916\uff0c\u4e0e\u666e\u901a\u7684Doris\u8868\u5e76\u65e0\u533a\u522b\n+\n+\n+```\n+select * from oracle_table where k1 > 1000 and k3 ='term' or k4 like '%doris'\n+```\n+\n+\n+\n+## \u7c7b\u578b\u5339\u914d\n+\n+\u5404\u4e2a\u6570\u636e\u4e4b\u95f4\u6570\u636e\u7c7b\u578b\u5b58\u5728\u4e0d\u540c\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u5404\u4e2a\u6570\u636e\u5e93\u4e2d\u7684\u7c7b\u578b\u548cDoris\u4e4b\u4e2d\u6570\u636e\u7c7b\u578b\u5339\u914d\u7684\u60c5\u51b5\u3002\n+\n+### MySQL\u7c7b\u578b\n+\n+|  MySQL  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  BOOLEAN  | BOOLEAN  |                         |\n+|   CHAR   |  CHAR  |            \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801            |\n+| VARCHAR | VARCHAR |       \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801       |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|   TINYINT   | TINYINT |  |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   BIGINT  | BIGINT |  |\n+|   DOUBLE  | DOUBLE |  |\n+|   DATE  | DATE |  |\n+|   DECIMAL  | DECIMAL |  |\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNDAxOQ=="}, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzQzNDI1OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozNzowNVrOHFkoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODowMDoxNFrOHHAcAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNTE2MA==", "bodyText": "\u8fd9\u4e2a\u53c2\u6570\u5982\u679c\u76f4\u63a5\u653e\u5230be\u7684\u542f\u52a8\u811a\u672c\u91cc\u4f1a\u6709\u5565\u5f71\u54cd\uff1f", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475605160", "createdAt": "2020-08-24T13:37:05Z", "author": {"login": "wutiangan"}, "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "diffHunk": "@@ -0,0 +1,172 @@\n+---\n+{\n+    \"title\": \"ODBC of Doris\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# ODBC External Table Of Doris\n+\n+ODBC External Table Of Doris \u63d0\u4f9b\u4e86Doris\u901a\u8fc7\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u6807\u51c6\u63a5\u53e3(ODBC)\u6765\u8bbf\u95ee\u5916\u90e8\u8868\uff0c\u5916\u90e8\u8868\u7701\u53bb\u4e86\u7e41\u7410\u7684\u6570\u636e\u5bfc\u5165\u5de5\u4f5c\uff0c\u8ba9Doris\u53ef\u4ee5\u5177\u6709\u4e86\u8bbf\u95ee\u5404\u5f0f\u6570\u636e\u5e93\u7684\u80fd\u529b\uff0c\u5e76\u501f\u52a9Doris\u672c\u8eab\u7684OLAP\u7684\u80fd\u529b\u6765\u89e3\u51b3\u5916\u90e8\u8868\u7684\u6570\u636e\u5206\u6790\u95ee\u9898\uff1a\n+ \n+ 1. \u652f\u6301\u5404\u79cd\u6570\u636e\u6e90\u63a5\u5165Doris\n+ 2. \u652f\u6301Doris\u4e0e\u5404\u79cd\u6570\u636e\u6e90\u4e2d\u7684\u8868\u8054\u5408\u67e5\u8be2\uff0c\u8fdb\u884c\u66f4\u52a0\u590d\u6742\u7684\u5206\u6790\u64cd\u4f5c\n+\n+\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u3001\u4f7f\u7528\u65b9\u5f0f\u7b49\u3002\n+\n+## \u540d\u8bcd\u89e3\u91ca\n+\n+### Doirs\u76f8\u5173\n+* FE\uff1aFrontend\uff0cDoris \u7684\u524d\u7aef\u8282\u70b9,\u8d1f\u8d23\u5143\u6570\u636e\u7ba1\u7406\u548c\u8bf7\u6c42\u63a5\u5165\n+* BE\uff1aBackend\uff0cDoris \u7684\u540e\u7aef\u8282\u70b9,\u8d1f\u8d23\u67e5\u8be2\u6267\u884c\u548c\u6570\u636e\u5b58\u50a8\n+\n+## \u4f7f\u7528\u65b9\u6cd5\n+\n+### Doris\u4e2d\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+```\n+CREATE EXTERNAL TABLE `baseall_oracle` (\n+  `k1` decimal(9, 3) NOT NULL COMMENT \"\",\n+  `k2` char(10) NOT NULL COMMENT \"\",\n+  `k3` datetime NOT NULL COMMENT \"\",\n+  `k5` varchar(20) NOT NULL COMMENT \"\",\n+  `k6` double NOT NULL COMMENT \"\"\n+) ENGINE=ODBC\n+COMMENT \"ODBC\"\n+PROPERTIES (\n+\"host\" = \"192.168.0.1\",\n+\"port\" = \"8086\",\n+\"user\" = \"test\",\n+\"password\" = \"test\",\n+\"database\" = \"test\",\n+\"table\" = \"baseall\",\n+\"driver\" = \"Oracle 19 ODBC driver\",\n+\"type\" = \"oracle\"\n+);\n+```\n+\n+\u53c2\u6570\u8bf4\u660e\uff1a\n+\n+\u53c2\u6570 | \u8bf4\u660e\n+---|---\n+**hosts** | \u5916\u8868\u6570\u636e\u5e93\u7684IP\u5730\u5740\n+**driver** | ODBC\u5916\u8868\u7684Driver\u540d\uff0c\u8be5\u540d\u5b57\u9700\u8981\u548cbe/conf/odbcinst.ini\u4e2d\u7684Driver\u540d\u4e00\u81f4\u3002\n+**type** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301oracle\u4e0emysql\n+**user** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\n+**password** | \u5bf9\u5e94\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\n+\n+\n+##### ODBC Driver\u7684\u5b89\u88c5\u548c\u914d\u7f6e\n+\u5404\u5927\u4e3b\u6d41\u6570\u636e\u5e93\u90fd\u4f1a\u63d0\u4f9bODBC\u7684\u8bbf\u95eeDriver\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u53c2\u7167\u53c2\u7167\u5404\u6570\u636e\u5e93\u5b98\u65b9\u63a8\u8350\u7684\u65b9\u5f0f\u5b89\u88c5\u5bf9\u5e94\u7684ODBC Driver LiB\u5e93\u3002\n+\n+\n+\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u7684Driver Lib\u5e93\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u4fee\u6539be/conf/odbcinst.ini\u7684\u914d\u7f6e\uff1a\n+```\n+[MySQL Driver]\n+Description     = ODBC for MySQL\n+Driver          = /usr/lib64/libmyodbc8w.so\n+FileUsage       = 1 \n+```\n+* \u4e0a\u8ff0\u914d\u7f6e`[]`\u91cc\u7684\u5bf9\u5e94\u7684\u662fDriver\u540d\uff0c\u5728\u5efa\u7acb\u5916\u90e8\u8868\u65f6\u9700\u8981\u4fdd\u6301\u5916\u90e8\u8868\u7684Driver\u540d\u548c\u914d\u7f6e\u6587\u4ef6\u4e4b\u4e2d\u7684\u4e00\u81f4\u3002\n+* `Driver=`  \u8fd9\u4e2a\u8981\u6839\u636e\u5b9e\u9645BE\u5b89\u88c5Driver\u7684\u8def\u5f84\u6765\u586b\u5199\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u5e93\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u4fdd\u8bc1\u8be5\u52a8\u6001\u5e93\u7684\u524d\u7f6e\u4f9d\u8d56\u90fd\u88ab\u6ee1\u8db3\u3002\n+\n+**\u5207\u8bb0\uff0c\u8fd9\u91cc\u8981\u6c42\u6240\u6709\u7684BE\u8282\u70b9\u90fd\u5b89\u88c5\u4e0a\u76f8\u540c\u7684Driver\uff0c\u5e76\u4e14\u5b89\u88c5\u8def\u5f84\u76f8\u540c\uff0c\u540c\u65f6\u6709\u76f8\u540c\u7684be/conf/odbcinst.ini\u7684\u914d\u7f6e\u3002**\n+\n+\n+### \u67e5\u8be2\u7528\u6cd5\n+\n+\u5b8c\u6210\u5728Doris\u4e2d\u5efa\u7acbODBC\u5916\u8868\u540e\uff0c\u9664\u4e86\u65e0\u6cd5\u4f7f\u7528Doris\u4e2d\u7684\u6570\u636e\u6a21\u578b(rollup\u3001\u9884\u805a\u5408\u3001\u7269\u5316\u89c6\u56fe\u7b49)\u5916\uff0c\u4e0e\u666e\u901a\u7684Doris\u8868\u5e76\u65e0\u533a\u522b\n+\n+\n+```\n+select * from oracle_table where k1 > 1000 and k3 ='term' or k4 like '%doris'\n+```\n+\n+\n+\n+## \u7c7b\u578b\u5339\u914d\n+\n+\u5404\u4e2a\u6570\u636e\u4e4b\u95f4\u6570\u636e\u7c7b\u578b\u5b58\u5728\u4e0d\u540c\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u5404\u4e2a\u6570\u636e\u5e93\u4e2d\u7684\u7c7b\u578b\u548cDoris\u4e4b\u4e2d\u6570\u636e\u7c7b\u578b\u5339\u914d\u7684\u60c5\u51b5\u3002\n+\n+### MySQL\u7c7b\u578b\n+\n+|  MySQL  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  BOOLEAN  | BOOLEAN  |                         |\n+|   CHAR   |  CHAR  |            \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801            |\n+| VARCHAR | VARCHAR |       \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801       |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|   TINYINT   | TINYINT |  |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   BIGINT  | BIGINT |  |\n+|   DOUBLE  | DOUBLE |  |\n+|   DATE  | DATE |  |\n+|   DECIMAL  | DECIMAL |  |\n+\n+### Oracle\u7c7b\u578b                          \n+\n+|  Oracle  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  \u4e0d\u652f\u6301 | BOOLEAN  |          Oracle\u53ef\u7528number(1) \u66ff\u6362boolean               |\n+|   CHAR   |  CHAR  |                       |\n+| VARCHAR | VARCHAR |              |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|  \u65e0   | TINYINT | Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   \u65e0  | BIGINT |  Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   \u65e0  | DOUBLE | Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   DATE  | DATE |  |\n+|   NUMBER  | DECIMAL |  |\n+\n+## Q&A\n+\n+1. \u4e0e\u539f\u5148\u7684MySQL\u5916\u8868\u7684\u5173\u7cfb\n+\n+    \u5728\u63a5\u5165ODBC\u5916\u8868\u4e4b\u540e\uff0c\u539f\u5148\u7684\u8bbf\u95eeMySQL\u5916\u8868\u7684\u65b9\u5f0f\u5c06\u88ab\u9010\u6e10\u5f03\u7528\u3002\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7MySQL\u5916\u8868\uff0c\u5efa\u8bae\u65b0\u63a5\u5165\u7684MySQL\u8868\u76f4\u63a5\u4f7f\u7528ODBC\u7684MySQL\u5916\u8868\u3002\n+    \n+2. \u9664\u4e86MySQL\u548cOracle\uff0c\u662f\u5426\u80fd\u591f\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u5e93\n+\n+    \u76ee\u524dDoris\u53ea\u9002\u914d\u4e86MySQL\u548cOracle\uff0c\u5173\u4e8e\u5176\u4ed6\u7684\u6570\u636e\u5e93\u7684\u9002\u914d\u5de5\u4f5c\u6b63\u5728\u89c4\u5212\u4e4b\u4e2d\uff0c\u539f\u5219\u4e0a\u6765\u8bf4\u4efb\u4f55\u652f\u6301ODBC\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u90fd\u80fd\u901a\u8fc7ODBC\u5916\u8868\u6765\u8bbf\u95ee\u3002\u5982\u679c\u60a8\u6709\u8bbf\u95ee\u5176\u4ed6\u5916\u8868\u7684\u9700\u6c42\uff0c\u6b22\u8fce\u4fee\u6539\u4ee3\u7801\u5e76\u8d21\u732e\u7ed9Doris\u3002\n+\n+3. \u4ec0\u4e48\u573a\u5408\u9002\u5408\u901a\u8fc7\u5916\u8868\u8bbf\u95ee\n+\n+    \u901a\u5e38\u5728\u5916\u8868\u6570\u636e\u91cf\u8f83\u5c0f\uff0c\u5c11\u4e8e100W\u6761\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u90e8\u8868\u7684\u65b9\u5f0f\u8bbf\u95ee\u3002\u7531\u4e8e\u5916\u8868\u65e0\u6cd5\u53d1\u6325Doris\u5728\u5b58\u50a8\u5f15\u64ce\u90e8\u5206\u7684\u80fd\u529b\u548c\u4f1a\u5e26\u6765\u989d\u5916\u7684\u7f51\u7edc\u5f00\u9500\uff0c\u6240\u4ee5\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u5bf9\u67e5\u8be2\u7684\u8bbf\u95ee\u65f6\u5ef6\u8981\u6c42\u6765\u786e\u5b9a\u662f\u5426\u901a\u8fc7\u5916\u90e8\u8868\u8bbf\u95ee\u8fd8\u662f\u5c06\u6570\u636e\u5bfc\u5165Doris\u4e4b\u4e2d\u3002\n+\n+4. \u901a\u8fc7Oracle\u8bbf\u95ee\u51fa\u73b0\u4e71\u7801\n+\n+   \u5c1d\u8bd5\u5728BE\u542f\u52a8\u811a\u672c\u4e4b\u4e2d\u6dfb\u52a0\u5982\u4e0b\u53c2\u6570\uff1a`export NLS_LANG=AMERICAN_AMERICA.AL32UTF8`\uff0c \u5e76\u91cd\u65b0\u542f\u52a8\u6240\u6709BE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwOTI1MA==", "bodyText": "\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u662f\u539f\u5219\u4e0a\u4e0d\u4f7f\u7528oracle\u6570\u636e\u5e93\u7684\u8bdd\u662f\u7528\u4e0d\u5230\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u7684", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r477109250", "createdAt": "2020-08-26T08:00:14Z", "author": {"login": "HappenLee"}, "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "diffHunk": "@@ -0,0 +1,172 @@\n+---\n+{\n+    \"title\": \"ODBC of Doris\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# ODBC External Table Of Doris\n+\n+ODBC External Table Of Doris \u63d0\u4f9b\u4e86Doris\u901a\u8fc7\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u6807\u51c6\u63a5\u53e3(ODBC)\u6765\u8bbf\u95ee\u5916\u90e8\u8868\uff0c\u5916\u90e8\u8868\u7701\u53bb\u4e86\u7e41\u7410\u7684\u6570\u636e\u5bfc\u5165\u5de5\u4f5c\uff0c\u8ba9Doris\u53ef\u4ee5\u5177\u6709\u4e86\u8bbf\u95ee\u5404\u5f0f\u6570\u636e\u5e93\u7684\u80fd\u529b\uff0c\u5e76\u501f\u52a9Doris\u672c\u8eab\u7684OLAP\u7684\u80fd\u529b\u6765\u89e3\u51b3\u5916\u90e8\u8868\u7684\u6570\u636e\u5206\u6790\u95ee\u9898\uff1a\n+ \n+ 1. \u652f\u6301\u5404\u79cd\u6570\u636e\u6e90\u63a5\u5165Doris\n+ 2. \u652f\u6301Doris\u4e0e\u5404\u79cd\u6570\u636e\u6e90\u4e2d\u7684\u8868\u8054\u5408\u67e5\u8be2\uff0c\u8fdb\u884c\u66f4\u52a0\u590d\u6742\u7684\u5206\u6790\u64cd\u4f5c\n+\n+\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u3001\u4f7f\u7528\u65b9\u5f0f\u7b49\u3002\n+\n+## \u540d\u8bcd\u89e3\u91ca\n+\n+### Doirs\u76f8\u5173\n+* FE\uff1aFrontend\uff0cDoris \u7684\u524d\u7aef\u8282\u70b9,\u8d1f\u8d23\u5143\u6570\u636e\u7ba1\u7406\u548c\u8bf7\u6c42\u63a5\u5165\n+* BE\uff1aBackend\uff0cDoris \u7684\u540e\u7aef\u8282\u70b9,\u8d1f\u8d23\u67e5\u8be2\u6267\u884c\u548c\u6570\u636e\u5b58\u50a8\n+\n+## \u4f7f\u7528\u65b9\u6cd5\n+\n+### Doris\u4e2d\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+```\n+CREATE EXTERNAL TABLE `baseall_oracle` (\n+  `k1` decimal(9, 3) NOT NULL COMMENT \"\",\n+  `k2` char(10) NOT NULL COMMENT \"\",\n+  `k3` datetime NOT NULL COMMENT \"\",\n+  `k5` varchar(20) NOT NULL COMMENT \"\",\n+  `k6` double NOT NULL COMMENT \"\"\n+) ENGINE=ODBC\n+COMMENT \"ODBC\"\n+PROPERTIES (\n+\"host\" = \"192.168.0.1\",\n+\"port\" = \"8086\",\n+\"user\" = \"test\",\n+\"password\" = \"test\",\n+\"database\" = \"test\",\n+\"table\" = \"baseall\",\n+\"driver\" = \"Oracle 19 ODBC driver\",\n+\"type\" = \"oracle\"\n+);\n+```\n+\n+\u53c2\u6570\u8bf4\u660e\uff1a\n+\n+\u53c2\u6570 | \u8bf4\u660e\n+---|---\n+**hosts** | \u5916\u8868\u6570\u636e\u5e93\u7684IP\u5730\u5740\n+**driver** | ODBC\u5916\u8868\u7684Driver\u540d\uff0c\u8be5\u540d\u5b57\u9700\u8981\u548cbe/conf/odbcinst.ini\u4e2d\u7684Driver\u540d\u4e00\u81f4\u3002\n+**type** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301oracle\u4e0emysql\n+**user** | \u5916\u8868\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\n+**password** | \u5bf9\u5e94\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\n+\n+\n+##### ODBC Driver\u7684\u5b89\u88c5\u548c\u914d\u7f6e\n+\u5404\u5927\u4e3b\u6d41\u6570\u636e\u5e93\u90fd\u4f1a\u63d0\u4f9bODBC\u7684\u8bbf\u95eeDriver\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u53c2\u7167\u53c2\u7167\u5404\u6570\u636e\u5e93\u5b98\u65b9\u63a8\u8350\u7684\u65b9\u5f0f\u5b89\u88c5\u5bf9\u5e94\u7684ODBC Driver LiB\u5e93\u3002\n+\n+\n+\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u7684Driver Lib\u5e93\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u4fee\u6539be/conf/odbcinst.ini\u7684\u914d\u7f6e\uff1a\n+```\n+[MySQL Driver]\n+Description     = ODBC for MySQL\n+Driver          = /usr/lib64/libmyodbc8w.so\n+FileUsage       = 1 \n+```\n+* \u4e0a\u8ff0\u914d\u7f6e`[]`\u91cc\u7684\u5bf9\u5e94\u7684\u662fDriver\u540d\uff0c\u5728\u5efa\u7acb\u5916\u90e8\u8868\u65f6\u9700\u8981\u4fdd\u6301\u5916\u90e8\u8868\u7684Driver\u540d\u548c\u914d\u7f6e\u6587\u4ef6\u4e4b\u4e2d\u7684\u4e00\u81f4\u3002\n+* `Driver=`  \u8fd9\u4e2a\u8981\u6839\u636e\u5b9e\u9645BE\u5b89\u88c5Driver\u7684\u8def\u5f84\u6765\u586b\u5199\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u5e93\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u4fdd\u8bc1\u8be5\u52a8\u6001\u5e93\u7684\u524d\u7f6e\u4f9d\u8d56\u90fd\u88ab\u6ee1\u8db3\u3002\n+\n+**\u5207\u8bb0\uff0c\u8fd9\u91cc\u8981\u6c42\u6240\u6709\u7684BE\u8282\u70b9\u90fd\u5b89\u88c5\u4e0a\u76f8\u540c\u7684Driver\uff0c\u5e76\u4e14\u5b89\u88c5\u8def\u5f84\u76f8\u540c\uff0c\u540c\u65f6\u6709\u76f8\u540c\u7684be/conf/odbcinst.ini\u7684\u914d\u7f6e\u3002**\n+\n+\n+### \u67e5\u8be2\u7528\u6cd5\n+\n+\u5b8c\u6210\u5728Doris\u4e2d\u5efa\u7acbODBC\u5916\u8868\u540e\uff0c\u9664\u4e86\u65e0\u6cd5\u4f7f\u7528Doris\u4e2d\u7684\u6570\u636e\u6a21\u578b(rollup\u3001\u9884\u805a\u5408\u3001\u7269\u5316\u89c6\u56fe\u7b49)\u5916\uff0c\u4e0e\u666e\u901a\u7684Doris\u8868\u5e76\u65e0\u533a\u522b\n+\n+\n+```\n+select * from oracle_table where k1 > 1000 and k3 ='term' or k4 like '%doris'\n+```\n+\n+\n+\n+## \u7c7b\u578b\u5339\u914d\n+\n+\u5404\u4e2a\u6570\u636e\u4e4b\u95f4\u6570\u636e\u7c7b\u578b\u5b58\u5728\u4e0d\u540c\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u5404\u4e2a\u6570\u636e\u5e93\u4e2d\u7684\u7c7b\u578b\u548cDoris\u4e4b\u4e2d\u6570\u636e\u7c7b\u578b\u5339\u914d\u7684\u60c5\u51b5\u3002\n+\n+### MySQL\u7c7b\u578b\n+\n+|  MySQL  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  BOOLEAN  | BOOLEAN  |                         |\n+|   CHAR   |  CHAR  |            \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801            |\n+| VARCHAR | VARCHAR |       \u5f53\u524d\u4ec5\u652f\u6301UTF8\u7f16\u7801       |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|   TINYINT   | TINYINT |  |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   BIGINT  | BIGINT |  |\n+|   DOUBLE  | DOUBLE |  |\n+|   DATE  | DATE |  |\n+|   DECIMAL  | DECIMAL |  |\n+\n+### Oracle\u7c7b\u578b                          \n+\n+|  Oracle  | Doris  |             \u66ff\u6362\u65b9\u6848              |\n+| :------: | :----: | :-------------------------------: |\n+|  \u4e0d\u652f\u6301 | BOOLEAN  |          Oracle\u53ef\u7528number(1) \u66ff\u6362boolean               |\n+|   CHAR   |  CHAR  |                       |\n+| VARCHAR | VARCHAR |              |\n+|   DATE   |  DATE  |                                   |\n+|  FLOAT   |  FLOAT  |                                   |\n+|  \u65e0   | TINYINT | Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   SMALLINT  | SMALLINT |  |\n+|   INT  | INT |  |\n+|   \u65e0  | BIGINT |  Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   \u65e0  | DOUBLE | Oracle\u53ef\u7531NUMMBER\u66ff\u6362 |\n+|   DATE  | DATE |  |\n+|   NUMBER  | DECIMAL |  |\n+\n+## Q&A\n+\n+1. \u4e0e\u539f\u5148\u7684MySQL\u5916\u8868\u7684\u5173\u7cfb\n+\n+    \u5728\u63a5\u5165ODBC\u5916\u8868\u4e4b\u540e\uff0c\u539f\u5148\u7684\u8bbf\u95eeMySQL\u5916\u8868\u7684\u65b9\u5f0f\u5c06\u88ab\u9010\u6e10\u5f03\u7528\u3002\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7MySQL\u5916\u8868\uff0c\u5efa\u8bae\u65b0\u63a5\u5165\u7684MySQL\u8868\u76f4\u63a5\u4f7f\u7528ODBC\u7684MySQL\u5916\u8868\u3002\n+    \n+2. \u9664\u4e86MySQL\u548cOracle\uff0c\u662f\u5426\u80fd\u591f\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u5e93\n+\n+    \u76ee\u524dDoris\u53ea\u9002\u914d\u4e86MySQL\u548cOracle\uff0c\u5173\u4e8e\u5176\u4ed6\u7684\u6570\u636e\u5e93\u7684\u9002\u914d\u5de5\u4f5c\u6b63\u5728\u89c4\u5212\u4e4b\u4e2d\uff0c\u539f\u5219\u4e0a\u6765\u8bf4\u4efb\u4f55\u652f\u6301ODBC\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u90fd\u80fd\u901a\u8fc7ODBC\u5916\u8868\u6765\u8bbf\u95ee\u3002\u5982\u679c\u60a8\u6709\u8bbf\u95ee\u5176\u4ed6\u5916\u8868\u7684\u9700\u6c42\uff0c\u6b22\u8fce\u4fee\u6539\u4ee3\u7801\u5e76\u8d21\u732e\u7ed9Doris\u3002\n+\n+3. \u4ec0\u4e48\u573a\u5408\u9002\u5408\u901a\u8fc7\u5916\u8868\u8bbf\u95ee\n+\n+    \u901a\u5e38\u5728\u5916\u8868\u6570\u636e\u91cf\u8f83\u5c0f\uff0c\u5c11\u4e8e100W\u6761\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u90e8\u8868\u7684\u65b9\u5f0f\u8bbf\u95ee\u3002\u7531\u4e8e\u5916\u8868\u65e0\u6cd5\u53d1\u6325Doris\u5728\u5b58\u50a8\u5f15\u64ce\u90e8\u5206\u7684\u80fd\u529b\u548c\u4f1a\u5e26\u6765\u989d\u5916\u7684\u7f51\u7edc\u5f00\u9500\uff0c\u6240\u4ee5\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u5bf9\u67e5\u8be2\u7684\u8bbf\u95ee\u65f6\u5ef6\u8981\u6c42\u6765\u786e\u5b9a\u662f\u5426\u901a\u8fc7\u5916\u90e8\u8868\u8bbf\u95ee\u8fd8\u662f\u5c06\u6570\u636e\u5bfc\u5165Doris\u4e4b\u4e2d\u3002\n+\n+4. \u901a\u8fc7Oracle\u8bbf\u95ee\u51fa\u73b0\u4e71\u7801\n+\n+   \u5c1d\u8bd5\u5728BE\u542f\u52a8\u811a\u672c\u4e4b\u4e2d\u6dfb\u52a0\u5982\u4e0b\u53c2\u6570\uff1a`export NLS_LANG=AMERICAN_AMERICA.AL32UTF8`\uff0c \u5e76\u91cd\u65b0\u542f\u52a8\u6240\u6709BE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNTE2MA=="}, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzQ0MDU0OnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scanner.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozNzo1NFrOHFks5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNTozNVrOHHDTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNjI0Ng==", "bodyText": "add more detail informaton in log", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r475606246", "createdAt": "2020-08-24T13:37:54Z", "author": {"login": "wutiangan"}, "path": "be/src/exec/odbc_scanner.cpp", "diffHunk": "@@ -0,0 +1,248 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <codecvt>\n+#include <sqlext.h>\n+\n+#include \"exec/odbc_scanner.h\"\n+#include \"common/logging.h\"\n+#include \"runtime/primitive_type.h\"\n+\n+#define ODBC_DISPOSE(h, ht, x, op) { auto rc = x;\\\n+                                if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) \\\n+                                { \\\n+                                    return error_status(op, handle_diagnostic_record(h, ht, rc)); \\\n+                                } \\\n+                                if (rc == SQL_ERROR) \\\n+                                { \\\n+                                    auto err_msg = std::string(\"Errro in\") + std::string(op); \\\n+                                    return Status::InternalError(err_msg.c_str()); \\\n+                                }  \\\n+                            } \\\n+\n+static constexpr uint32_t SMALL_COLUMN_SIZE_BUFFER = 100;\n+// Now we only treat HLL, CHAR, VARCHAR as big column\n+static constexpr uint32_t BIG_COLUMN_SIZE_BUFFER = 65535;\n+\n+namespace doris {\n+\n+ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+        : _connect_string(build_connect_string(param)),\n+          _type(param.type),\n+          _tuple_desc(param.tuple_desc),\n+          _is_open(false),\n+          _field_num(0),\n+          _row_count(0),\n+          _env(nullptr),\n+          _dbc(nullptr),\n+          _stmt(nullptr) {\n+}\n+\n+ODBCScanner::~ODBCScanner() {\n+    if (_stmt != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_STMT, _stmt);\n+    }\n+\n+    if (_dbc != nullptr) {\n+        SQLDisconnect(_dbc);\n+        SQLFreeHandle(SQL_HANDLE_DBC, _dbc);\n+    }\n+\n+    if (_env != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_ENV, _env);\n+    }\n+}\n+\n+Status ODBCScanner::open() {\n+    if (_is_open) {\n+        LOG(INFO) << \"this scanner already opened\";\n+        return Status::OK();\n+    }\n+\n+    // Allocate an environment\n+    if (SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_env) != SQL_SUCCESS) {\n+        return Status::InternalError(\"alloc env failed\");\n+    }\n+    // We want ODBC 3 support\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLSetEnvAttr(_env, SQL_ATTR_ODBC_VERSION, (void *) SQL_OV_ODBC3, 0), \"set env attr\");\n+    // Allocate a connection handle\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLAllocHandle(SQL_HANDLE_DBC, _env, &_dbc), \"alloc dbc\");\n+    // Connect to the Database\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLDriverConnect(_dbc, NULL, (SQLCHAR*)_connect_string.c_str(), SQL_NTS,\n+                           NULL, 0, NULL, SQL_DRIVER_COMPLETE_REQUIRED), \"driver connect\");\n+\n+    LOG(INFO) << \"connect success:\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjIwMw==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r477156203", "createdAt": "2020-08-26T09:15:35Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/odbc_scanner.cpp", "diffHunk": "@@ -0,0 +1,248 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <codecvt>\n+#include <sqlext.h>\n+\n+#include \"exec/odbc_scanner.h\"\n+#include \"common/logging.h\"\n+#include \"runtime/primitive_type.h\"\n+\n+#define ODBC_DISPOSE(h, ht, x, op) { auto rc = x;\\\n+                                if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) \\\n+                                { \\\n+                                    return error_status(op, handle_diagnostic_record(h, ht, rc)); \\\n+                                } \\\n+                                if (rc == SQL_ERROR) \\\n+                                { \\\n+                                    auto err_msg = std::string(\"Errro in\") + std::string(op); \\\n+                                    return Status::InternalError(err_msg.c_str()); \\\n+                                }  \\\n+                            } \\\n+\n+static constexpr uint32_t SMALL_COLUMN_SIZE_BUFFER = 100;\n+// Now we only treat HLL, CHAR, VARCHAR as big column\n+static constexpr uint32_t BIG_COLUMN_SIZE_BUFFER = 65535;\n+\n+namespace doris {\n+\n+ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+        : _connect_string(build_connect_string(param)),\n+          _type(param.type),\n+          _tuple_desc(param.tuple_desc),\n+          _is_open(false),\n+          _field_num(0),\n+          _row_count(0),\n+          _env(nullptr),\n+          _dbc(nullptr),\n+          _stmt(nullptr) {\n+}\n+\n+ODBCScanner::~ODBCScanner() {\n+    if (_stmt != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_STMT, _stmt);\n+    }\n+\n+    if (_dbc != nullptr) {\n+        SQLDisconnect(_dbc);\n+        SQLFreeHandle(SQL_HANDLE_DBC, _dbc);\n+    }\n+\n+    if (_env != nullptr) {\n+        SQLFreeHandle(SQL_HANDLE_ENV, _env);\n+    }\n+}\n+\n+Status ODBCScanner::open() {\n+    if (_is_open) {\n+        LOG(INFO) << \"this scanner already opened\";\n+        return Status::OK();\n+    }\n+\n+    // Allocate an environment\n+    if (SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &_env) != SQL_SUCCESS) {\n+        return Status::InternalError(\"alloc env failed\");\n+    }\n+    // We want ODBC 3 support\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLSetEnvAttr(_env, SQL_ATTR_ODBC_VERSION, (void *) SQL_OV_ODBC3, 0), \"set env attr\");\n+    // Allocate a connection handle\n+    ODBC_DISPOSE(_env, SQL_HANDLE_ENV, SQLAllocHandle(SQL_HANDLE_DBC, _env, &_dbc), \"alloc dbc\");\n+    // Connect to the Database\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLDriverConnect(_dbc, NULL, (SQLCHAR*)_connect_string.c_str(), SQL_NTS,\n+                           NULL, 0, NULL, SQL_DRIVER_COMPLETE_REQUIRED), \"driver connect\");\n+\n+    LOG(INFO) << \"connect success:\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNjI0Ng=="}, "originalCommit": {"oid": "4a1f645b15baf4dcde74d275459b0d2521fb39b4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjI3MzczOnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scan_node.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowMzowOVrOHVsong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzowMzowOVrOHVsong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzQzOA==", "bodyText": "Modify the comment", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r492513438", "createdAt": "2020-09-22T07:03:09Z", "author": {"login": "morningman"}, "path": "be/src/exec/odbc_scan_node.h", "diffHunk": "@@ -0,0 +1,96 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef  DORIS_BE_SRC_QUERY_EXEC_ODBC_SCAN_NODE_H\n+#define  DORIS_BE_SRC_QUERY_EXEC_ODBC_SCAN_NODE_H\n+\n+#include <memory>\n+\n+#include \"runtime/descriptors.h\"\n+#include \"exec/scan_node.h\"\n+#include \"exec/odbc_scanner.h\"\n+\n+namespace doris {\n+\n+class TextConverter;\n+class Tuple;\n+class TupleDescriptor;\n+class RuntimeState;\n+class MemPool;\n+class Status;\n+\n+class OdbcScanNode : public ScanNode {\n+public:\n+    OdbcScanNode(ObjectPool* pool, const TPlanNode& tnode, const DescriptorTbl& descs);\n+    ~OdbcScanNode();\n+\n+    // initialize _mysql_scanner, and create _text_converter.\n+    virtual Status prepare(RuntimeState* state);\n+\n+    // Start MySQL scan using _mysql_scanner.\n+    virtual Status open(RuntimeState* state);\n+\n+    // Fill the next row batch by calling next() on the _mysql_scanner,\n+    // converting text data in MySQL cells to binary data.\n+    virtual Status get_next(RuntimeState* state, RowBatch* row_batch, bool* eos);\n+\n+    // Close the _mysql_scanner, and report errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b4a77e58cdbaff926380b1304ce6aea8f969cd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjI5Mjk2OnYy", "diffSide": "RIGHT", "path": "be/src/exec/odbc_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxMDowMVrOHVs0WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxMDowMVrOHVs0WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxNjQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            static std::u16string utf8_to_wstring (const std::string& str)\n          \n          \n            \n            static std::u16string utf8_to_wstring(const std::string& str)", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r492516441", "createdAt": "2020-09-22T07:10:01Z", "author": {"login": "morningman"}, "path": "be/src/exec/odbc_scanner.cpp", "diffHunk": "@@ -0,0 +1,257 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <codecvt>\n+#include <sqlext.h>\n+\n+#include \"exec/odbc_scanner.h\"\n+#include \"common/logging.h\"\n+#include \"runtime/primitive_type.h\"\n+\n+#define ODBC_DISPOSE(h, ht, x, op) { auto rc = x;\\\n+                                if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) \\\n+                                { \\\n+                                    return error_status(op, handle_diagnostic_record(h, ht, rc)); \\\n+                                } \\\n+                                if (rc == SQL_ERROR) \\\n+                                { \\\n+                                    auto err_msg = std::string(\"Errro in\") + std::string(op); \\\n+                                    return Status::InternalError(err_msg.c_str()); \\\n+                                }  \\\n+                            } \\\n+\n+static constexpr uint32_t SMALL_COLUMN_SIZE_BUFFER = 100;\n+// Now we only treat HLL, CHAR, VARCHAR as big column\n+static constexpr uint32_t BIG_COLUMN_SIZE_BUFFER = 65535;\n+\n+static std::u16string utf8_to_wstring (const std::string& str)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b4a77e58cdbaff926380b1304ce6aea8f969cd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjMxNTY0OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxNzoyMlrOHVtB3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxNzoyMlrOHVtB3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxOTkwMg==", "bodyText": "Indent", "url": "https://github.com/apache/incubator-doris/pull/4438#discussion_r492519902", "createdAt": "2020-09-22T07:17:22Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/extending-doris/odbc-of-doris.md", "diffHunk": "@@ -0,0 +1,217 @@\n+---\n+{\n+    \"title\": \"ODBC of Doris\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# ODBC External Table Of Doris\n+\n+ODBC External Table Of Doris \u63d0\u4f9b\u4e86Doris\u901a\u8fc7\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u6807\u51c6\u63a5\u53e3(ODBC)\u6765\u8bbf\u95ee\u5916\u90e8\u8868\uff0c\u5916\u90e8\u8868\u7701\u53bb\u4e86\u7e41\u7410\u7684\u6570\u636e\u5bfc\u5165\u5de5\u4f5c\uff0c\u8ba9Doris\u53ef\u4ee5\u5177\u6709\u4e86\u8bbf\u95ee\u5404\u5f0f\u6570\u636e\u5e93\u7684\u80fd\u529b\uff0c\u5e76\u501f\u52a9Doris\u672c\u8eab\u7684OLAP\u7684\u80fd\u529b\u6765\u89e3\u51b3\u5916\u90e8\u8868\u7684\u6570\u636e\u5206\u6790\u95ee\u9898\uff1a\n+\n+ 1. \u652f\u6301\u5404\u79cd\u6570\u636e\u6e90\u63a5\u5165Doris\n+ 2. \u652f\u6301Doris\u4e0e\u5404\u79cd\u6570\u636e\u6e90\u4e2d\u7684\u8868\u8054\u5408\u67e5\u8be2\uff0c\u8fdb\u884c\u66f4\u52a0\u590d\u6742\u7684\u5206\u6790\u64cd\u4f5c\n+\n+\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u3001\u4f7f\u7528\u65b9\u5f0f\u7b49\u3002\n+\n+## \u540d\u8bcd\u89e3\u91ca\n+\n+### Doirs\u76f8\u5173\n+* FE\uff1aFrontend\uff0cDoris \u7684\u524d\u7aef\u8282\u70b9,\u8d1f\u8d23\u5143\u6570\u636e\u7ba1\u7406\u548c\u8bf7\u6c42\u63a5\u5165\n+* BE\uff1aBackend\uff0cDoris \u7684\u540e\u7aef\u8282\u70b9,\u8d1f\u8d23\u67e5\u8be2\u6267\u884c\u548c\u6570\u636e\u5b58\u50a8\n+\n+## \u4f7f\u7528\u65b9\u6cd5\n+\n+### Doris\u4e2d\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+#### 1. \u4e0d\u4f7f\u7528Resource\u521b\u5efaODBC\u7684\u5916\u8868\n+\n+```\n+CREATE EXTERNAL TABLE `baseall_oracle` (\n+  `k1` decimal(9, 3) NOT NULL COMMENT \"\",\n+  `k2` char(10) NOT NULL COMMENT \"\",\n+  `k3` datetime NOT NULL COMMENT \"\",\n+  `k5` varchar(20) NOT NULL COMMENT \"\",\n+  `k6` double NOT NULL COMMENT \"\"\n+) ENGINE=ODBC\n+COMMENT \"ODBC\"\n+PROPERTIES (\n+\"host\" = \"192.168.0.1\",\n+\"port\" = \"8086\",\n+\"user\" = \"test\",\n+\"password\" = \"test\",\n+\"database\" = \"test\",\n+\"table\" = \"baseall\",\n+\"driver\" = \"Oracle 19 ODBC driver\",\n+\"odbc_type\" = \"oracle\"\n+);\n+```\n+\n+#### 2. \u901a\u8fc7ODBC_Resource\u6765\u521b\u5efaODBC\u5916\u8868 (\u63a8\u8350\u4f7f\u7528\u7684\u65b9\u5f0f)\n+```\n+create external resource \"oracle_odbc\"\n+    properties ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b4a77e58cdbaff926380b1304ce6aea8f969cd"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1177, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}