{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjI2OTg1", "number": 2953, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0Nzo1NlrODhjZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo0MToyOVrODjC2WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTA5NTAwOnYy", "diffSide": "RIGHT", "path": "gensrc/proto/segment_v2.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0Nzo1NlrOFsWNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozMDoxNlrOFtbyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NTQ3NA==", "bodyText": "Better reserve 0, and start from 1", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r382045474", "createdAt": "2020-02-20T14:47:56Z", "author": {"login": "imay"}, "path": "gensrc/proto/segment_v2.proto", "diffHunk": "@@ -205,22 +191,52 @@ message IndexedColumnMetaPB {\n     optional uint64 size = 7;\n }\n \n-message BitmapIndexColumnPB {\n+// -------------------------------------------------------------\n+// Column Index Metadata\n+// -------------------------------------------------------------\n+\n+enum ColumnIndexTypePB {\n+    ORDINAL_INDEX = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a69428935ce434fced27ad8be9808492b4e5ff1"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4NTUxNA==", "bodyText": "OK, I'll also reserve 0 for PageTypePB", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383185514", "createdAt": "2020-02-24T10:30:16Z", "author": {"login": "gaodayue"}, "path": "gensrc/proto/segment_v2.proto", "diffHunk": "@@ -205,22 +191,52 @@ message IndexedColumnMetaPB {\n     optional uint64 size = 7;\n }\n \n-message BitmapIndexColumnPB {\n+// -------------------------------------------------------------\n+// Column Index Metadata\n+// -------------------------------------------------------------\n+\n+enum ColumnIndexTypePB {\n+    ORDINAL_INDEX = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NTQ3NA=="}, "originalCommit": {"oid": "6a69428935ce434fced27ad8be9808492b4e5ff1"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTA5Njc3OnYy", "diffSide": "RIGHT", "path": "gensrc/proto/segment_v2.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0ODoxOVrOFsWOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozODo0NFrOFtcDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NTcyNw==", "bodyText": "Why not use 2,3,4,5", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r382045727", "createdAt": "2020-02-20T14:48:19Z", "author": {"login": "imay"}, "path": "gensrc/proto/segment_v2.proto", "diffHunk": "@@ -205,22 +191,52 @@ message IndexedColumnMetaPB {\n     optional uint64 size = 7;\n }\n \n-message BitmapIndexColumnPB {\n+// -------------------------------------------------------------\n+// Column Index Metadata\n+// -------------------------------------------------------------\n+\n+enum ColumnIndexTypePB {\n+    ORDINAL_INDEX = 0;\n+    ZONE_MAP_INDEX = 1;\n+    BITMAP_INDEX = 2;\n+    BLOOM_FILTER_INDEX = 3;\n+}\n+\n+message ColumnIndexMetaPB {\n+    optional ColumnIndexTypePB type = 1;\n+    optional OrdinalIndexPB ordinal_index = 7;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a69428935ce434fced27ad8be9808492b4e5ff1"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTg5Ng==", "bodyText": "Ordinal 2 to 6 is reserved for other common fields that may be added in the future. PageFooterPB uses the same method", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383189896", "createdAt": "2020-02-24T10:38:44Z", "author": {"login": "gaodayue"}, "path": "gensrc/proto/segment_v2.proto", "diffHunk": "@@ -205,22 +191,52 @@ message IndexedColumnMetaPB {\n     optional uint64 size = 7;\n }\n \n-message BitmapIndexColumnPB {\n+// -------------------------------------------------------------\n+// Column Index Metadata\n+// -------------------------------------------------------------\n+\n+enum ColumnIndexTypePB {\n+    ORDINAL_INDEX = 0;\n+    ZONE_MAP_INDEX = 1;\n+    BITMAP_INDEX = 2;\n+    BLOOM_FILTER_INDEX = 3;\n+}\n+\n+message ColumnIndexMetaPB {\n+    optional ColumnIndexTypePB type = 1;\n+    optional OrdinalIndexPB ordinal_index = 7;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NTcyNw=="}, "originalCommit": {"oid": "6a69428935ce434fced27ad8be9808492b4e5ff1"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgyNDM3OnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/parsed_page.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNzo0MVrOFt5rJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxMToyOFrOFt8F3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NTE3NA==", "bodyText": "If this type is changed to ordinal_t, is it better to change name to first_oid?", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383675174", "createdAt": "2020-02-25T06:07:41Z", "author": {"login": "imay"}, "path": "be/src/olap/rowset/segment_v2/parsed_page.h", "diffHunk": "@@ -17,47 +17,88 @@\n \n #pragma once\n \n-#include \"olap/rowset/segment_v2/page_decoder.h\" // for PagePointer\n-#include \"util/rle_encoding.h\" // for RleDecoder\n+#include <memory>\n+\n+#include \"common/status.h\"\n+#include \"gen_cpp/segment_v2.pb.h\"\n+#include \"olap/rowset/segment_v2/common.h\"\n+#include \"olap/rowset/segment_v2/encoding_info.h\"\n+#include \"olap/rowset/segment_v2/options.h\"\n+#include \"olap/rowset/segment_v2/page_decoder.h\"\n+#include \"olap/rowset/segment_v2/page_handle.h\"\n+#include \"util/rle_encoding.h\"\n \n namespace doris {\n namespace segment_v2 {\n \n-class PageHandle;\t\n-struct PagePointer;\n-\n // This contains information when one page is loaded, and ready for read\n // This struct can be reused, client should call reset first before reusing\n // this object\n struct ParsedPage {\n-    ParsedPage() { }\n+\n+    static Status create(PageHandle handle,\n+                         const Slice& body,\n+                         const DataPageFooterPB& footer,\n+                         const EncodingInfo* encoding,\n+                         const PagePointer& page_pointer,\n+                         uint32_t page_index,\n+                         std::unique_ptr<ParsedPage>* result) {\n+        std::unique_ptr<ParsedPage> page(new ParsedPage);\n+        page->page_handle = std::move(handle);\n+\n+        auto null_size = footer.nullmap_size();\n+        page->has_null = null_size > 0;\n+        page->null_bitmap = Slice(body.data + body.size - null_size, null_size);\n+\n+        if (page->has_null) {\n+            page->null_decoder = RleDecoder<bool>(\n+                    (const uint8_t*) page->null_bitmap.data, null_size, 1);\n+        }\n+\n+        Slice data_slice(body.data, body.size - null_size);\n+        PageDecoderOptions opts;\n+        RETURN_IF_ERROR(encoding->create_page_decoder(data_slice, opts, &page->data_decoder));\n+        RETURN_IF_ERROR(page->data_decoder->init());\n+\n+        page->first_rowid = footer.first_ordinal();\n+        page->num_rows = footer.num_values();\n+        page->page_pointer = page_pointer;\n+        page->page_index = page_index;\n+\n+        *result = std::move(page);\n+        return Status::OK();\n+    }\n+\n     ~ParsedPage() {\n         delete data_decoder;\n     }\n \n-    PagePointer page_pointer;\n     PageHandle page_handle;\n \n+    bool has_null;\n     Slice null_bitmap;\n     RleDecoder<bool> null_decoder;\n     PageDecoder* data_decoder = nullptr;\n \n     // first rowid for this page\n-    rowid_t first_rowid = 0;\n-\n+    ordinal_t first_rowid = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d9e48135b03fe1b781c89792725d49814d60d8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNDc4MA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383714780", "createdAt": "2020-02-25T08:11:28Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/segment_v2/parsed_page.h", "diffHunk": "@@ -17,47 +17,88 @@\n \n #pragma once\n \n-#include \"olap/rowset/segment_v2/page_decoder.h\" // for PagePointer\n-#include \"util/rle_encoding.h\" // for RleDecoder\n+#include <memory>\n+\n+#include \"common/status.h\"\n+#include \"gen_cpp/segment_v2.pb.h\"\n+#include \"olap/rowset/segment_v2/common.h\"\n+#include \"olap/rowset/segment_v2/encoding_info.h\"\n+#include \"olap/rowset/segment_v2/options.h\"\n+#include \"olap/rowset/segment_v2/page_decoder.h\"\n+#include \"olap/rowset/segment_v2/page_handle.h\"\n+#include \"util/rle_encoding.h\"\n \n namespace doris {\n namespace segment_v2 {\n \n-class PageHandle;\t\n-struct PagePointer;\n-\n // This contains information when one page is loaded, and ready for read\n // This struct can be reused, client should call reset first before reusing\n // this object\n struct ParsedPage {\n-    ParsedPage() { }\n+\n+    static Status create(PageHandle handle,\n+                         const Slice& body,\n+                         const DataPageFooterPB& footer,\n+                         const EncodingInfo* encoding,\n+                         const PagePointer& page_pointer,\n+                         uint32_t page_index,\n+                         std::unique_ptr<ParsedPage>* result) {\n+        std::unique_ptr<ParsedPage> page(new ParsedPage);\n+        page->page_handle = std::move(handle);\n+\n+        auto null_size = footer.nullmap_size();\n+        page->has_null = null_size > 0;\n+        page->null_bitmap = Slice(body.data + body.size - null_size, null_size);\n+\n+        if (page->has_null) {\n+            page->null_decoder = RleDecoder<bool>(\n+                    (const uint8_t*) page->null_bitmap.data, null_size, 1);\n+        }\n+\n+        Slice data_slice(body.data, body.size - null_size);\n+        PageDecoderOptions opts;\n+        RETURN_IF_ERROR(encoding->create_page_decoder(data_slice, opts, &page->data_decoder));\n+        RETURN_IF_ERROR(page->data_decoder->init());\n+\n+        page->first_rowid = footer.first_ordinal();\n+        page->num_rows = footer.num_values();\n+        page->page_pointer = page_pointer;\n+        page->page_index = page_index;\n+\n+        *result = std::move(page);\n+        return Status::OK();\n+    }\n+\n     ~ParsedPage() {\n         delete data_decoder;\n     }\n \n-    PagePointer page_pointer;\n     PageHandle page_handle;\n \n+    bool has_null;\n     Slice null_bitmap;\n     RleDecoder<bool> null_decoder;\n     PageDecoder* data_decoder = nullptr;\n \n     // first rowid for this page\n-    rowid_t first_rowid = 0;\n-\n+    ordinal_t first_rowid = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NTE3NA=="}, "originalCommit": {"oid": "e9d9e48135b03fe1b781c89792725d49814d60d8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgzMzAwOnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxMzowMlrOFt5wRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxMzoxNVrOFt8Itg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NjQ4Ng==", "bodyText": "Better to handle case when uncompressed_size is 0.", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383676486", "createdAt": "2020-02-25T06:13:02Z", "author": {"login": "imay"}, "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "diffHunk": "@@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/rowset/segment_v2/page_io.h\"\n+\n+#include <cstring>\n+#include <string>\n+\n+#include \"common/logging.h\"\n+#include \"env/env.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"olap/page_cache.h\"\n+#include \"util/block_compression.h\"\n+#include \"util/coding.h\"\n+#include \"util/crc32c.h\"\n+#include \"util/faststring.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+namespace segment_v2 {\n+\n+using strings::Substitute;\n+\n+Status PageIO::compress_page_body(const BlockCompressionCodec* codec,\n+                                  double min_space_saving,\n+                                  const std::vector<Slice>& body,\n+                                  OwnedSlice* compressed_body) {\n+    if (codec != nullptr) {\n+        size_t uncompressed_size = Slice::compute_total_size(body);\n+        size_t max_compressed_size = codec->max_compressed_len(uncompressed_size);\n+        faststring buf;\n+        buf.resize(max_compressed_size);\n+        Slice compressed_slice(buf);\n+        RETURN_IF_ERROR(codec->compress(body, &compressed_slice));\n+        buf.resize(compressed_slice.get_size());\n+\n+        double space_saving = 1.0 - static_cast<double>(buf.size()) / uncompressed_size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d9e48135b03fe1b781c89792725d49814d60d8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNTUxMA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r383715510", "createdAt": "2020-02-25T08:13:15Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "diffHunk": "@@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/rowset/segment_v2/page_io.h\"\n+\n+#include <cstring>\n+#include <string>\n+\n+#include \"common/logging.h\"\n+#include \"env/env.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"olap/page_cache.h\"\n+#include \"util/block_compression.h\"\n+#include \"util/coding.h\"\n+#include \"util/crc32c.h\"\n+#include \"util/faststring.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+namespace segment_v2 {\n+\n+using strings::Substitute;\n+\n+Status PageIO::compress_page_body(const BlockCompressionCodec* codec,\n+                                  double min_space_saving,\n+                                  const std::vector<Slice>& body,\n+                                  OwnedSlice* compressed_body) {\n+    if (codec != nullptr) {\n+        size_t uncompressed_size = Slice::compute_total_size(body);\n+        size_t max_compressed_size = codec->max_compressed_len(uncompressed_size);\n+        faststring buf;\n+        buf.resize(max_compressed_size);\n+        Slice compressed_slice(buf);\n+        RETURN_IF_ERROR(codec->compress(body, &compressed_slice));\n+        buf.resize(compressed_slice.get_size());\n+\n+        double space_saving = 1.0 - static_cast<double>(buf.size()) / uncompressed_size;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NjQ4Ng=="}, "originalCommit": {"oid": "e9d9e48135b03fe1b781c89792725d49814d60d8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDYyMDEzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMzozOVrOFunSsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo1NDo0OVrOFuouuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjU3Nw==", "bodyText": "add a default and check", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r384422577", "createdAt": "2020-02-26T11:03:39Z", "author": {"login": "kangpinghuang"}, "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "diffHunk": "@@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/rowset/segment_v2/page_io.h\"\n+\n+#include <cstring>\n+#include <string>\n+\n+#include \"common/logging.h\"\n+#include \"env/env.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"olap/page_cache.h\"\n+#include \"util/block_compression.h\"\n+#include \"util/coding.h\"\n+#include \"util/crc32c.h\"\n+#include \"util/faststring.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+namespace segment_v2 {\n+\n+using strings::Substitute;\n+\n+Status PageIO::compress_page_body(const BlockCompressionCodec* codec,\n+                                  double min_space_saving,\n+                                  const std::vector<Slice>& body,\n+                                  OwnedSlice* compressed_body) {\n+    size_t uncompressed_size = Slice::compute_total_size(body);\n+    if (codec != nullptr && uncompressed_size > 0) {\n+        size_t max_compressed_size = codec->max_compressed_len(uncompressed_size);\n+        faststring buf;\n+        buf.resize(max_compressed_size);\n+        Slice compressed_slice(buf);\n+        RETURN_IF_ERROR(codec->compress(body, &compressed_slice));\n+        buf.resize(compressed_slice.get_size());\n+\n+        double space_saving = 1.0 - static_cast<double>(buf.size()) / uncompressed_size;\n+        // return compressed body only when it saves more than min_space_saving\n+        if (space_saving > 0 && space_saving >= min_space_saving) {\n+            *compressed_body = buf.build();\n+            return Status::OK();\n+        }\n+    }\n+    // otherwise, do not compress\n+    OwnedSlice empty;\n+    *compressed_body = std::move(empty);\n+    return Status::OK();\n+}\n+\n+Status PageIO::write_page(WritableFile* file,\n+                          const std::vector<Slice>& body,\n+                          const PageFooterPB& footer,\n+                          PagePointer* result) {\n+    // sanity check of page footer\n+    CHECK(footer.has_type()) << \"type must be set\";\n+    CHECK(footer.has_uncompressed_size()) << \"uncompressed_size must be set\";\n+    switch (footer.type()) {\n+    case DATA_PAGE:\n+        CHECK(footer.has_data_page_footer());\n+        break;\n+    case INDEX_PAGE:\n+        CHECK(footer.has_index_page_footer());\n+        break;\n+    case DICTIONARY_PAGE:\n+        CHECK(footer.has_dict_page_footer());\n+        break;\n+    case SHORT_KEY_PAGE:\n+        CHECK(footer.has_short_key_page_footer());\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55fa068ceab95a7feabb23416ffbc30f4d7c66d4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0NjEzOQ==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r384446139", "createdAt": "2020-02-26T11:54:49Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/segment_v2/page_io.cpp", "diffHunk": "@@ -0,0 +1,205 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/rowset/segment_v2/page_io.h\"\n+\n+#include <cstring>\n+#include <string>\n+\n+#include \"common/logging.h\"\n+#include \"env/env.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"olap/page_cache.h\"\n+#include \"util/block_compression.h\"\n+#include \"util/coding.h\"\n+#include \"util/crc32c.h\"\n+#include \"util/faststring.h\"\n+#include \"util/runtime_profile.h\"\n+\n+namespace doris {\n+namespace segment_v2 {\n+\n+using strings::Substitute;\n+\n+Status PageIO::compress_page_body(const BlockCompressionCodec* codec,\n+                                  double min_space_saving,\n+                                  const std::vector<Slice>& body,\n+                                  OwnedSlice* compressed_body) {\n+    size_t uncompressed_size = Slice::compute_total_size(body);\n+    if (codec != nullptr && uncompressed_size > 0) {\n+        size_t max_compressed_size = codec->max_compressed_len(uncompressed_size);\n+        faststring buf;\n+        buf.resize(max_compressed_size);\n+        Slice compressed_slice(buf);\n+        RETURN_IF_ERROR(codec->compress(body, &compressed_slice));\n+        buf.resize(compressed_slice.get_size());\n+\n+        double space_saving = 1.0 - static_cast<double>(buf.size()) / uncompressed_size;\n+        // return compressed body only when it saves more than min_space_saving\n+        if (space_saving > 0 && space_saving >= min_space_saving) {\n+            *compressed_body = buf.build();\n+            return Status::OK();\n+        }\n+    }\n+    // otherwise, do not compress\n+    OwnedSlice empty;\n+    *compressed_body = std::move(empty);\n+    return Status::OK();\n+}\n+\n+Status PageIO::write_page(WritableFile* file,\n+                          const std::vector<Slice>& body,\n+                          const PageFooterPB& footer,\n+                          PagePointer* result) {\n+    // sanity check of page footer\n+    CHECK(footer.has_type()) << \"type must be set\";\n+    CHECK(footer.has_uncompressed_size()) << \"uncompressed_size must be set\";\n+    switch (footer.type()) {\n+    case DATA_PAGE:\n+        CHECK(footer.has_data_page_footer());\n+        break;\n+    case INDEX_PAGE:\n+        CHECK(footer.has_index_page_footer());\n+        break;\n+    case DICTIONARY_PAGE:\n+        CHECK(footer.has_dict_page_footer());\n+        break;\n+    case SHORT_KEY_PAGE:\n+        CHECK(footer.has_short_key_page_footer());\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjU3Nw=="}, "originalCommit": {"oid": "55fa068ceab95a7feabb23416ffbc30f4d7c66d4"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDczNDMzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/segment_v2/column_zone_map.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo0MToyOVrOFuoXSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo1NDozOFrOFuoudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MDEzNw==", "bodyText": "rename this file name to zone_map_index.h", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r384440137", "createdAt": "2020-02-26T11:41:29Z", "author": {"login": "kangpinghuang"}, "path": "be/src/olap/rowset/segment_v2/column_zone_map.h", "diffHunk": "@@ -17,8 +17,9 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55fa068ceab95a7feabb23416ffbc30f4d7c66d4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0NjA3MA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2953#discussion_r384446070", "createdAt": "2020-02-26T11:54:38Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/segment_v2/column_zone_map.h", "diffHunk": "@@ -17,8 +17,9 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MDEzNw=="}, "originalCommit": {"oid": "55fa068ceab95a7feabb23416ffbc30f4d7c66d4"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2012, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}