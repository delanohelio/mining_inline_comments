{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTk5ODEx", "number": 3808, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1ODoyOFrOEE9AOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNTo0OVrOEE-RUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjI5MjQyOnYy", "diffSide": "RIGHT", "path": "docs/en/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1ODoyOFrOGi5MMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyMjoyOVrOGi5xmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MTc3OQ==", "bodyText": "You already change this param name above.", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439241779", "createdAt": "2020-06-12T06:58:28Z", "author": {"login": "EmmyMiao87"}, "path": "docs/en/administrator-guide/running-profile.md", "diffHunk": "@@ -127,21 +127,105 @@ There are many statistical information collected at BE.  so we list the correspo\n   - HashProbe:  Number of hashtable probe\n   - HashTravelLength:  The number of steps moved when hashtable queries\n \n-#### OLAP_SCAN_NODE:\n- - BytesRead: Total data\n- - TotalReadThroughput\uff1aThroughput = BytesRead / Time\n- - TabletCount: Number of scanned tablets\n- - RowsPushedCondFiltered\uff1aNumber of filters pushed down\n- - RawRowsRead: Number of rows read\n- - RowsReturned: Number of rows returned by the node\n- - RowsReturnedRate: Rate of rows returned\n- - PeakMemoryUsage: Peak memory usage of the node\n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+The `OLAP_SCAN_NODE` is responsible for specific data scanning tasks. One `OLAP_SCAN_NODE` will generate one or more `OlapScanner` threads. Each Scanner thread is responsible for scanning part of the data.\n+\n+Some or all of the predicate conditions in the query will be pushed to `OLAP_SCAN_NODE`. Some of these predicate conditions will continue to be pushed down to the storage engine in order to use the storage engine's index for data filtering. The other part will be kept in `OLAP_SCAN_NODE` to filter the data returned from the storage engine.\n+\n+The profile of a typical `OLAP_SCAN_NODE` is as follows. Some indicators will have different meanings depending on the storage format (V1 or V2).\n+\n+```\n+OLAP_SCAN_NODE (id=0): (Active: 4.050ms, non-child: 35.68%)\n+   -BitmapIndexFilterCount: 0   # Number of rows filtered by bitmap index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1MTM1Mg==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439251352", "createdAt": "2020-06-12T07:22:29Z", "author": {"login": "morningman"}, "path": "docs/en/administrator-guide/running-profile.md", "diffHunk": "@@ -127,21 +127,105 @@ There are many statistical information collected at BE.  so we list the correspo\n   - HashProbe:  Number of hashtable probe\n   - HashTravelLength:  The number of steps moved when hashtable queries\n \n-#### OLAP_SCAN_NODE:\n- - BytesRead: Total data\n- - TotalReadThroughput\uff1aThroughput = BytesRead / Time\n- - TabletCount: Number of scanned tablets\n- - RowsPushedCondFiltered\uff1aNumber of filters pushed down\n- - RawRowsRead: Number of rows read\n- - RowsReturned: Number of rows returned by the node\n- - RowsReturnedRate: Rate of rows returned\n- - PeakMemoryUsage: Peak memory usage of the node\n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+The `OLAP_SCAN_NODE` is responsible for specific data scanning tasks. One `OLAP_SCAN_NODE` will generate one or more `OlapScanner` threads. Each Scanner thread is responsible for scanning part of the data.\n+\n+Some or all of the predicate conditions in the query will be pushed to `OLAP_SCAN_NODE`. Some of these predicate conditions will continue to be pushed down to the storage engine in order to use the storage engine's index for data filtering. The other part will be kept in `OLAP_SCAN_NODE` to filter the data returned from the storage engine.\n+\n+The profile of a typical `OLAP_SCAN_NODE` is as follows. Some indicators will have different meanings depending on the storage format (V1 or V2).\n+\n+```\n+OLAP_SCAN_NODE (id=0): (Active: 4.050ms, non-child: 35.68%)\n+   -BitmapIndexFilterCount: 0   # Number of rows filtered by bitmap index", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MTc3OQ=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjI5NjgxOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzowMDozNlrOGi5PIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyMjoyN1rOGi5xhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MjUzMA==", "bodyText": "You already change this param name", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439242530", "createdAt": "2020-06-12T07:00:36Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1MTMzNA==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439251334", "createdAt": "2020-06-12T07:22:27Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MjUzMA=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjM2MzkxOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyNjo1MFrOGi54uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyNjo1MFrOGi54uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1MzE3Nw==", "bodyText": "\u5e94\u8be5\u662f\u8bf4\uff0c\u6709\u4e9b\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u6ca1\u6709\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u901a\u8fc7\u7d22\u5f15\u8fc7\u6ee4\u5427\uff1f\u800cScanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u6bd4\u5b58\u50a8\u5f15\u64ce\u4e2d\u5229\u7528\u7d22\u5f15\u8fc7\u6ee4\u6548\u7387\u5dee\u3002", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439253177", "createdAt": "2020-06-12T07:26:50Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+\n+    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+\n+    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n+    \n+    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n+    \n+    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n+    \n+    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n+`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n+\n+    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n+    \n+    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjM3NzQ4OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzozMTo1OFrOGi6BRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMzo1MFrOGi7eig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NTM2Nw==", "bodyText": "\u8fd9\u4e9b\u6307\u6807 V1 \u4e5f\u6709\u5427", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439255367", "createdAt": "2020-06-12T07:31:58Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTI0Mg==", "bodyText": "V1 \u4e5f\u6709\uff0c\u4f46\u662fv1\u6bd4\u8f83\u4e71\uff0c\u5c31\u4e0d\u5199\u4e86", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439279242", "createdAt": "2020-06-12T08:23:50Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NTM2Nw=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjM5MzUyOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzozODoxMVrOGi6LTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozODo0N1rOGi777A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NzkzMw==", "bodyText": "\u8fd9\u91cc\u662f\u4e0d\u662f\u5e94\u8be5\u5148\u603b\u8bf4\u4e00\u4e0b\uff0c\u5b58\u50a8\u5f15\u64ce\u5148\u6839\u636e\u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u7136\u540escan \u518d\u8fc7\u6ee4\u4e00\u6b21\u3002\u7136\u540e\u5728\u5b58\u50a8\u5f15\u64ce\u7684\u90e8\u5206\u518d\u628a v1 \u548c v2\u5206\u7740\u8bf4\u3002", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439257933", "createdAt": "2020-06-12T07:38:11Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4Njc2NA==", "bodyText": "\u6211\u589e\u52a0\u4e00\u4e0b\u8bf4\u660e\u3002\u8fd9\u91cc\u4e0d\u5199v1\u4e86", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439286764", "createdAt": "2020-06-12T08:38:47Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NzkzMw=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjQ0NDM0OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo1NTo1NlrOGi6rEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo1NTo1NlrOGi6rEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2NjA2Ng==", "bodyText": "\u8fd9\u4e00\u884c\u7684\u683c\u5f0f\u662f\u4e0d\u662f\u6709\u95ee\u9898\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439266066", "createdAt": "2020-06-12T07:55:56Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+\n+    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+\n+    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n+    \n+    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n+    \n+    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n+    \n+    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n+`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n+\n+    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n+    \n+    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002\n+    \n+* Scan Node Profile \u7684\u7b80\u5355\u5206\u6790\n+\n+    OlapScanNode \u7684 Profile \u901a\u5e38\u7528\u4e8e\u5206\u6790\u6570\u636e\u626b\u63cf\u7684\u6548\u7387\u3002\u9664\u4e86\u524d\u9762\u4ecb\u7ecd\u7684\u901a\u8fc7\u884c\u6570\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u63a8\u65ad\u8c13\u8bcd\u6761\u4ef6\u4e0b\u63a8\u548c\u7d22\u5f15\u4f7f\u7528\u60c5\u51b5\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002\n+    \n+    * \u9996\u5148\uff0c\u5f88\u591a\u6307\u6807\uff0c\u5982 `IOTimer`\uff0c`BlockFetchTime` \u7b49\u90fd\u662f\u6240\u6709 Scanner \u7ebf\u7a0b\u6307\u6807\u7684\u7d2f\u52a0\uff0c\u56e0\u6b64\u6570\u503c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5927\u3002\u5e76\u4e14\u56e0\u4e3a Scanner \u7ebf\u7a0b\u662f\u5f02\u6b65\u8bfb\u53d6\u6570\u636e\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7d2f\u52a0\u6307\u6807\u53ea\u80fd\u53cd\u6620 Scanner \u7d2f\u52a0\u7684\u5de5\u4f5c\u65f6\u95f4\uff0c\u5e76\u4e0d\u76f4\u63a5\u4ee3\u8868 ScanNode \u7684\u8017\u65f6\u3002ScanNode \u5728\u6574\u4e2a\u67e5\u8be2\u8ba1\u5212\u4e2d\u7684\u8017\u65f6\u5360\u6bd4\u4e3a `Active` \u5b57\u6bb5\u8bb0\u5f55\u7684\u503c\u3002\u6709\u65f6\u4f1a\u51fa\u73b0\u6bd4\u5982 `IOTimer` \u6709\u51e0\u5341\u79d2\uff0c\u800c `Active` \u5b9e\u9645\u53ea\u6709\u51e0\u79d2\u949f\u3002\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u56e0\u4e3a\uff1a1. `IOTimer` \u4e3a\u591a\u4e2a Scanner \u7684\u7d2f\u52a0\u65f6\u95f4\uff0c\u800c Scanner \u6570\u91cf\u8f83\u591a\u30022. \u4e0a\u5c42\u8282\u70b9\u6bd4\u8f83\u8017\u65f6\u3002\u6bd4\u5982\u4e0a\u5c42\u8282\u70b9\u8017\u65f6 100\u79d2\uff0c\u800c\u5e95\u5c42 ScanNode \u53ea\u9700 10\u79d2\u3002\u5219\u53cd\u6620\u5728 `Active` \u7684\u5b57\u6bb5\u53ef\u80fd\u53ea\u6709\u51e0\u6beb\u79d2\u3002\u56e0\u4e3a\u5728\u4e0a\u5c42\u5904\u7406\u6570\u636e\u7684\u540c\u65f6\uff0cScanNode \u5df2\u7ecf\u5f02\u6b65\u7684\u8fdb\u884c\u4e86\u6570\u636e\u626b\u63cf\u5e76\u51c6\u5907\u597d\u4e86\u6570\u636e\u3002\u5f53\u4e0a\u5c42\u8282\u70b9\u4ece ScanNode \u83b7\u53d6\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u5230\u5df2\u7ecf\u51c6\u5907\u597d\u7684\u6570\u636e\uff0c\u56e0\u6b64 Active \u65f6\u95f4\u5f88\u77ed\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUwMDAwOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/running-profile.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNTo0OVrOGi7OyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDowNzo1MVrOGi-ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NTIwOQ==", "bodyText": "\u611f\u89c9\u8fd9\u4e00\u6bb5\u4e5f\u50cf\u7b80\u5355\u5206\u6790\uff1f\u8981\u4e0d \u76f4\u63a5\u628a\u8bf4\u5b8c\u6307\u6807\u7684\u542b\u4e49\uff0c\u76f4\u63a5\u5230\u7b80\u5355\u5206\u6790\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439275209", "createdAt": "2020-06-12T08:15:49Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+\n+    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+\n+    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n+    \n+    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n+    \n+    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n+    \n+    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n+`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n+\n+    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n+    \n+    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NzYwOQ==", "bodyText": "\u4e0a\u9762\u4e00\u8282\u662f\u5355\u72ec\u63cf\u8ff0\u4e86\u4e0b\u8fc7\u6ee4\u884c\u6570\u76f8\u5173\u7684\u8bf4\u660e\u3002\n\u7b80\u5355\u5206\u6790 \u4e3b\u8981\u662f\u4ece\u6574\u4f53\u505a\u5206\u6790\u3002", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439287609", "createdAt": "2020-06-12T08:40:34Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+\n+    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+\n+    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n+    \n+    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n+    \n+    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n+    \n+    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n+`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n+\n+    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n+    \n+    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NTIwOQ=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMyOTQwNg==", "bodyText": "\u597d\u5427", "url": "https://github.com/apache/incubator-doris/pull/3808#discussion_r439329406", "createdAt": "2020-06-12T10:07:51Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -130,22 +133,105 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n   - HashProbe:  HashTable\u67e5\u8be2\u7684\u6b21\u6570\n   - HashTravelLength:  HashTable\u67e5\u8be2\u65f6\u79fb\u52a8\u7684\u6b65\u6570\n \n-#### OLAP_SCAN_NODE:\n- - RowsProduced: \u751f\u6210\u7ed3\u679c\u7684\u884c\u6570\n- - BytesRead: scan node \u626b\u63cf\u6570\u636e\u7684\u603b\u91cf\n- - TotalReadThroughput\uff1a\u541e\u5410\u91cf\n- - TabletCount: tablet \u7684\u6570\u76ee\n- - RowsPushedCondFiltered\uff1a\u4e0b\u63a8\u7684\u8fc7\u6ee4\u5668\n- - RawRowsRead: \u5b9e\u9645\u8bfb\u53d6\u7684\u884c\u6570\n- - RowsReturned: \u8be5\u8282\u70b9\u8fd4\u56de\u7684\u884c\u6570\n- - RowsReturnedRate: \u8fd4\u56de\u884c\u6570\u7684\u901f\u7387\n- - PeakMemoryUsage \u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c  \n-\n-#### Buffer pool:\n+#### `OLAP_SCAN_NODE`\n+\n+`OLAP_SCAN_NODE` \u8282\u70b9\u8d1f\u8d23\u5177\u4f53\u7684\u6570\u636e\u626b\u63cf\u4efb\u52a1\u3002\u4e00\u4e2a `OLAP_SCAN_NODE` \u4f1a\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a `OlapScanner` \u7ebf\u7a0b\u3002\u6bcf\u4e2a Scanner \u7ebf\u7a0b\u8d1f\u8d23\u626b\u63cf\u90e8\u5206\u6570\u636e\u3002\n+\n+\u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n+\n+\u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n+\n+```\n+OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n+   - BitmapIndexFilterCount: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n+   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n+   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n+   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n+   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n+   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n+   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n+     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n+     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n+     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n+   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n+   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n+   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n+   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+```\n+\n+* V2 \u683c\u5f0f\u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n+\n+    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n+    \n+    * RowsKeyRangeFiltered\n+    * RowsBitmapIndexFiltered\n+    * RowsBloomFilterFiltered\n+    * RowsStatsFiltered\n+    * RowsDelFiltered\n+    * RawRowsRead\n+    * RowsRead\n+    * RowsReturned\n+\n+    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+\n+    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n+    \n+    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n+    \n+    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n+    \n+    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n+`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n+\n+    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n+    \n+    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NTIwOQ=="}, "originalCommit": {"oid": "dcd79636a3d21e2ddd0f105c0896a3348a53ec93"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1482, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}