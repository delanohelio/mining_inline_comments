{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MDk1NjA2", "number": 4778, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MjoyOVrOEwxfKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNzowM1rOEy3jkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTc3ODk2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Table.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MjoyOVrOHmiZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MjoyOVrOHmiZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3MTYxMQ==", "bodyText": "Add comment for this new field", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r510171611", "createdAt": "2020-10-22T13:42:29Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Table.java", "diffHunk": "@@ -95,6 +95,8 @@\n     // table(view)'s comment\n     protected String comment = \"\";\n \n+    protected String ddlSql = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg3MjE0OnYy", "diffSide": "RIGHT", "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowNToyN1rOHn_mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo0OTo0OVrOHoxHfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5ODQ0OQ==", "bodyText": "length always 6 and definer always \"root@%\" \uff1f why \uff1f", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511698449", "createdAt": "2020-10-26T03:05:27Z", "author": {"login": "yangzhg"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string is_updatable = \"YES\";\n+        str_slot->len = is_updatable.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, is_updatable.c_str(), str_slot->len);\n+    }\n+    // definer\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[6]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string definer = \"root@%\";\n+        str_slot->len = definer.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, definer.c_str(), str_slot->len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwOTgyMw==", "bodyText": "this is column for table views in mysql, palo has no this information, we can only set a default one", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r512509823", "createdAt": "2020-10-27T08:49:49Z", "author": {"login": "pengxiangyu"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string is_updatable = \"YES\";\n+        str_slot->len = is_updatable.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, is_updatable.c_str(), str_slot->len);\n+    }\n+    // definer\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[6]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string definer = \"root@%\";\n+        str_slot->len = definer.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, definer.c_str(), str_slot->len);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5ODQ0OQ=="}, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg3Njk1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToxM1rOHn_o2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo1MTo0OVrOHoxMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTE2Mg==", "bodyText": "why this column length is 77, you should add a comment, this column in mysql is 288", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511699162", "createdAt": "2020-10-26T03:09:13Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMTExOA==", "bodyText": "Maybe you get another version of mysql. the sql I got is like this.", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r512511118", "createdAt": "2020-10-27T08:51:49Z", "author": {"login": "pengxiangyu"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTE2Mg=="}, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg3NzM0OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowOToyNVrOHn_pEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo1MjowOVrOHoxNdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTIxOA==", "bodyText": "why 32", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511699218", "createdAt": "2020-10-26T03:09:25Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))\n+                                        .column(\"CHARACTER_SET_CLIENT\", ScalarType.createVarchar(32))\n+                                        .column(\"COLLATION_CONNECTION\", ScalarType.createVarchar(32))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMTM0OA==", "bodyText": "the sql I got is like this.", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r512511348", "createdAt": "2020-10-27T08:52:09Z", "author": {"login": "pengxiangyu"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/SchemaTable.java", "diffHunk": "@@ -281,6 +281,23 @@ public static Builder builder() {\n                                                  .column(\"XA\", ScalarType.createVarchar(3))\n                                                  .column(\"SAVEPOINTS\", ScalarType.createVarchar(3))\n                                                  .build()))\n+                    .put(\"views\",\n+                        new SchemaTable(\n+                                SystemIdGenerator.getNextId(),\n+                                \"views\",\n+                                TableType.SCHEMA,\n+                                builder()\n+                                        .column(\"TABLE_CATALOG\", ScalarType.createVarchar(512))\n+                                        .column(\"TABLE_SCHEMA\", ScalarType.createVarchar(64))\n+                                        .column(\"TABLE_NAME\", ScalarType.createVarchar(64))\n+                                        .column(\"VIEW_DEFINITION\", ScalarType.createVarchar(8096))\n+                                        .column(\"CHECK_OPTION\", ScalarType.createVarchar(8))\n+                                        .column(\"IS_UPDATABLE\", ScalarType.createVarchar(3))\n+                                        .column(\"DEFINER\", ScalarType.createVarchar(77))\n+                                        .column(\"SECURITY_TYPE\", ScalarType.createVarchar(7))\n+                                        .column(\"CHARACTER_SET_CLIENT\", ScalarType.createVarchar(32))\n+                                        .column(\"COLLATION_CONNECTION\", ScalarType.createVarchar(32))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5OTIxOA=="}, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg4NzAzOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNjowOVrOHn_uSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo1Njo1NVrOHoxZdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                           List<Table> tables = db.getTables();\n          \n          \n            \n                            if (params.isSetType() && \"VIEW\".equals(params.getType())) {\n          \n          \n            \n                                tables = db. getViews();\n          \n          \n            \n                            }", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r511700554", "createdAt": "2020-10-26T03:16:09Z", "author": {"login": "yangzhg"}, "path": "fe/fe-core/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -248,7 +248,19 @@ public TListTableStatusResult listTableStatus(TGetTablesParams params) throws TE\n         if (db != null) {\n             db.readLock();\n             try {\n-                for (Table table : db.getTables()) {\n+                List<Table> tables = null;\n+                if (!params.isSetType() || params.getType() == null || params.getType().isEmpty()) {\n+                    tables = db.getTables();\n+                } else {\n+                    switch (params.getType()) {\n+                        case \"VIEW\":\n+                            tables = db.getViews();\n+                            break;\n+                        default:\n+                            tables = db.getTables();\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxNDQyMg==", "bodyText": "If type is view, this will call getTables() which is not required. When the count of tables in this db is too many, this will take more time.", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r512514422", "createdAt": "2020-10-27T08:56:55Z", "author": {"login": "pengxiangyu"}, "path": "fe/fe-core/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -248,7 +248,19 @@ public TListTableStatusResult listTableStatus(TGetTablesParams params) throws TE\n         if (db != null) {\n             db.readLock();\n             try {\n-                for (Table table : db.getTables()) {\n+                List<Table> tables = null;\n+                if (!params.isSetType() || params.getType() == null || params.getType().isEmpty()) {\n+                    tables = db.getTables();\n+                } else {\n+                    switch (params.getType()) {\n+                        case \"VIEW\":\n+                            tables = db.getViews();\n+                            break;\n+                        default:\n+                            tables = db.getTables();\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDU1NA=="}, "originalCommit": {"oid": "bff46c5e55d6117b1e4c27a3abd74d3d42548a3c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzc0NDgyOnYy", "diffSide": "RIGHT", "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToyNzowM1rOHpv1xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo1NTo1MVrOHqGBzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzQ3OA==", "bodyText": "Better set it to \"No\". Because we do not support DELETE or UPDATE on view.", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r513537478", "createdAt": "2020-10-28T15:27:03Z", "author": {"login": "morningman"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string is_updatable = \"YES\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkwMTAwNQ==", "bodyText": "DONE", "url": "https://github.com/apache/incubator-doris/pull/4778#discussion_r513901005", "createdAt": "2020-10-29T02:55:51Z", "author": {"login": "pengxiangyu"}, "path": "be/src/exec/schema_scanner/schema_views_scanner.cpp", "diffHunk": "@@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"exec/schema_scanner/schema_helper.h\"\n+#include \"exec/schema_scanner/schema_views_scanner.h\"\n+#include \"runtime/primitive_type.h\"\n+#include \"runtime/string_value.h\"\n+//#include \"runtime/datetime_value.h\"\n+\n+namespace doris\n+{\n+\n+SchemaScanner::ColumnDesc SchemaViewsScanner::_s_tbls_columns[] = {\n+    //   name,       type,          size,     is_null\n+    { \"TABLE_CATALOG\", TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"TABLE_SCHEMA\", TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"TABLE_NAME\",   TYPE_VARCHAR, sizeof(StringValue), false},\n+    { \"VIEW_DEFINITION\",   TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHECK_OPTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"IS_UPDATABLE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"DEFINER\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"SECURITY_TYPE\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"CHARACTER_SET_CLIENT\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+    { \"COLLATION_CONNECTION\",       TYPE_VARCHAR, sizeof(StringValue), true},\n+};\n+\n+SchemaViewsScanner::SchemaViewsScanner()\n+        : SchemaScanner(_s_tbls_columns,\n+                        sizeof(_s_tbls_columns) / sizeof(SchemaScanner::ColumnDesc)),\n+        _db_index(0),\n+        _table_index(0) {\n+}\n+\n+SchemaViewsScanner::~SchemaViewsScanner() {\n+}\n+\n+Status SchemaViewsScanner::start(RuntimeState *state) {\n+    if (!_is_init) {\n+        return Status::InternalError(\"used before initialized.\");\n+    }\n+    TGetDbsParams db_params;\n+    if (NULL != _param->db) {\n+        db_params.__set_pattern(*(_param->db));\n+    }\n+    if (NULL != _param->current_user_ident) {\n+        db_params.__set_current_user_ident(*(_param->current_user_ident));\n+    } else {\n+        if (NULL != _param->user) {\n+            db_params.__set_user(*(_param->user));\n+        }\n+        if (NULL != _param->user_ip) {\n+            db_params.__set_user_ip(*(_param->user_ip));\n+        }\n+    }\n+\n+    if (NULL != _param->ip && 0 != _param->port) {\n+        RETURN_IF_ERROR(SchemaHelper::get_db_names(*(_param->ip),\n+                    _param->port, db_params, &_db_result));\n+    } else {\n+        return Status::InternalError(\"IP or port doesn't exists\");\n+    }\n+    return Status::OK();\n+}\n+\n+Status SchemaViewsScanner::fill_one_row(Tuple *tuple, MemPool *pool) {\n+    // set all bit to not null\n+    memset((void *)tuple, 0, _tuple_desc->num_null_bytes());\n+    const TTableStatus& tbl_status = _table_result.tables[_table_index];\n+    // catalog\n+    {\n+        tuple->set_null(_tuple_desc->slots()[0]->null_indicator_offset());\n+    }\n+    // schema\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[1]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        std::string db_name = SchemaHelper::extract_db_name(_db_result.dbs[_db_index - 1]);\n+        str_slot->ptr = (char *)pool->allocate(db_name.size());\n+        str_slot->len = db_name.size();\n+        memcpy(str_slot->ptr, db_name.c_str(), str_slot->len);\n+    }\n+    // name\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[2]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* src = &tbl_status.name;\n+        str_slot->len = src->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, src->c_str(), str_slot->len);\n+    }\n+    // definition\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[3]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        const std::string* ddl_sql = &tbl_status.ddl_sql;\n+        str_slot->len = ddl_sql->length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, ddl_sql->c_str(), str_slot->len);\n+    }\n+    // check_option\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[4]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string check_option = \"NONE\";\n+        str_slot->len = check_option.length();\n+        str_slot->ptr = (char *)pool->allocate(str_slot->len);\n+        if (NULL == str_slot->ptr) {\n+            return Status::InternalError(\"Allocate memcpy failed.\");\n+        }\n+        memcpy(str_slot->ptr, check_option.c_str(), str_slot->len);\n+    }\n+    // is_updatable\n+    {\n+        void *slot = tuple->get_slot(_tuple_desc->slots()[5]->tuple_offset());\n+        StringValue* str_slot = reinterpret_cast<StringValue*>(slot);\n+        // This is from views in mysql\n+        const std::string is_updatable = \"YES\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzQ3OA=="}, "originalCommit": {"oid": "79be4f098fbffb793193aac8246cedd48cff56bf"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 998, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}