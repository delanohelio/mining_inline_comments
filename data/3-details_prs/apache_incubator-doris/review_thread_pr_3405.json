{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDkyNTA0", "number": 3405, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDo0N1rOD2uPEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1NzozNlrOD3eZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzA3MjE5OnYy", "diffSide": "LEFT", "path": "be/src/exec/exec_node.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDo0N1rOGMm-Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyMTo0NVrOGNAyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NDY0Mg==", "bodyText": "It seem that the false here is to distinguish child[0] and other children.\nAre you sure this is more readable? You can put the result screenshots here to explain.", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r415874642", "createdAt": "2020-04-27T14:44:47Z", "author": {"login": "morningman"}, "path": "be/src/exec/exec_node.cpp", "diffHunk": "@@ -339,7 +337,7 @@ Status ExecNode::create_tree_helper(\n     }\n \n     if (!node->_children.empty()) {\n-        node->runtime_profile()->add_child(node->_children[0]->runtime_profile(), false, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NzUxNg==", "bodyText": "after change the true, we can eaily know olap_scan_node is child of aggregation_node.", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416297516", "createdAt": "2020-04-28T03:21:45Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/exec_node.cpp", "diffHunk": "@@ -339,7 +337,7 @@ Status ExecNode::create_tree_helper(\n     }\n \n     if (!node->_children.empty()) {\n-        node->runtime_profile()->add_child(node->_children[0]->runtime_profile(), false, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NDY0Mg=="}, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzA4NzkxOnYy", "diffSide": "RIGHT", "path": "be/src/exec/olap_scan_node.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NzoyOVrOGMnHlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyMjoyNlrOGNAy2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzAxNA==", "bodyText": "disk_set is a set, so no need to find and insert, just insert is OK.", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r415877014", "createdAt": "2020-04-27T14:47:29Z", "author": {"login": "morningman"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NzY4OQ==", "bodyText": "yes\uff0ci will change the code\u3002", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416297689", "createdAt": "2020-04-28T03:22:26Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzAxNA=="}, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTY3NjE2OnYy", "diffSide": "RIGHT", "path": "be/src/exec/olap_scan_node.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToyMTowM1rOGM-Zmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoyNTo1M1rOGNB9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1ODQ1OA==", "bodyText": "What is this metric used for? If this metric is not useful, just remove it", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416258458", "createdAt": "2020-04-28T01:21:03Z", "author": {"login": "imay"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());\n+            }\n         }\n     }\n+    COUNTER_SET(_num_disks_accessed_counter, static_cast<int64_t>(disk_set.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5ODA5Mw==", "bodyText": "The metric help we now how many disk accessed in olap scan node scan data", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416298093", "createdAt": "2020-04-28T03:23:45Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());\n+            }\n         }\n     }\n+    COUNTER_SET(_num_disks_accessed_counter, static_cast<int64_t>(disk_set.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1ODQ1OA=="}, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwMDcyOQ==", "bodyText": "What can it be used for when you know how many disks accessed?", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416300729", "createdAt": "2020-04-28T03:32:04Z", "author": {"login": "imay"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());\n+            }\n         }\n     }\n+    COUNTER_SET(_num_disks_accessed_counter, static_cast<int64_t>(disk_set.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1ODQ1OA=="}, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNjc2OQ==", "bodyText": "We can know whether the tablet of a query is allocated on different disks to know whether is IO bottleneck in disk", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416316769", "createdAt": "2020-04-28T04:25:53Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/olap_scan_node.cpp", "diffHunk": "@@ -702,8 +694,13 @@ Status OlapScanNode::start_scan_thread(RuntimeState* state) {\n                 state, this, _olap_scan_node.is_preaggregation, _need_agg_finalize, *scan_range, scanner_ranges);\n             _scanner_pool->add(scanner);\n             _olap_scanners.push_back(scanner);\n+\n+            if (disk_set.find(scanner->scan_disk()) == disk_set.end()) {\n+                disk_set.insert(scanner->scan_disk());\n+            }\n         }\n     }\n+    COUNTER_SET(_num_disks_accessed_counter, static_cast<int64_t>(disk_set.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1ODQ1OA=="}, "originalCommit": {"oid": "e90e0cf00e2ebf7e79263f167b381d14ed3994e0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTA3ODIxOnYy", "diffSide": "LEFT", "path": "be/src/exec/exec_node.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOToyMzowM1rOGNK8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1NzoyNlrOGODA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2NDA2Mw==", "bodyText": "You'd better remove this field if it's not used. Btw, _memory_used_counter seems to be used by HashJoinNode::close, is it really ok to remove it?", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r416464063", "createdAt": "2020-04-28T09:23:03Z", "author": {"login": "gaodayue"}, "path": "be/src/exec/exec_node.cpp", "diffHunk": "@@ -172,15 +172,13 @@ Status ExecNode::prepare(RuntimeState* state) {\n     DCHECK(_runtime_profile.get() != NULL);\n     _rows_returned_counter =\n         ADD_COUNTER(_runtime_profile, \"RowsReturned\", TUnit::UNIT);\n-    _memory_used_counter =\n-        ADD_COUNTER(_runtime_profile, \"MemoryUsed\", TUnit::BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NjE5OA==", "bodyText": "Hi, as we can see. this counter _memory_used_counter is only used for count mem used for _tuple_pool and _hash_tbl.\nBut the _tuple_pool and _hash_tbl was already track the mem used by MemTracker and counted mem used in PeakMemoryUsage counter.  We do really need this counter _memory_used_counter?\n\nSo, I think keep the _memory_used_counter   named MemoryUsed is confusing.\nI have two different suggestions\n\nDelete all code use _memory_used_counter in the future, all mem used is tracked by MemTracker, we show peakmemusage it by the counter in MemTracker.\nKeep the counter _memory_used_counter, but change the name MemoryUsed to MemoryUsedByHashBTAndTuplePool.\n\nWhich suggestion do you think is more suitable\uff1f@gaodayue", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r417076198", "createdAt": "2020-04-29T05:35:00Z", "author": {"login": "HappenLee"}, "path": "be/src/exec/exec_node.cpp", "diffHunk": "@@ -172,15 +172,13 @@ Status ExecNode::prepare(RuntimeState* state) {\n     DCHECK(_runtime_profile.get() != NULL);\n     _rows_returned_counter =\n         ADD_COUNTER(_runtime_profile, \"RowsReturned\", TUnit::UNIT);\n-    _memory_used_counter =\n-        ADD_COUNTER(_runtime_profile, \"MemoryUsed\", TUnit::BYTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2NDA2Mw=="}, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MjYyOQ==", "bodyText": "Delete all code use _memory_used_counter in the future, all mem used is tracked by MemTracker, we show peakmemusage it by the counter in MemTracker.\n\nI prefer this.", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r417382629", "createdAt": "2020-04-29T14:57:26Z", "author": {"login": "kangkaisen"}, "path": "be/src/exec/exec_node.cpp", "diffHunk": "@@ -172,15 +172,13 @@ Status ExecNode::prepare(RuntimeState* state) {\n     DCHECK(_runtime_profile.get() != NULL);\n     _rows_returned_counter =\n         ADD_COUNTER(_runtime_profile, \"RowsReturned\", TUnit::UNIT);\n-    _memory_used_counter =\n-        ADD_COUNTER(_runtime_profile, \"MemoryUsed\", TUnit::BYTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2NDA2Mw=="}, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk2MjM5OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/bufferpool/buffer_pool_counters.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1NzoyMVrOGNvviA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTozNToxMlrOGNwUDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2Njg4OA==", "bodyText": "not used profile can be removed", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r417066888", "createdAt": "2020-04-29T04:57:21Z", "author": {"login": "chaoyli"}, "path": "be/src/runtime/bufferpool/buffer_pool_counters.h", "diffHunk": "@@ -35,19 +35,19 @@ struct BufferPoolClientCounters {\n   RuntimeProfile::Counter* cumulative_bytes_alloced;\n \n   /// Amount of time spent waiting for reads from disk to complete.\n-  RuntimeProfile::Counter* read_wait_time;\n+  //RuntimeProfile::Counter* read_wait_time;\n \n   /// Total number of read I/O operations issued.\n-  RuntimeProfile::Counter* read_io_ops;\n+  //RuntimeProfile::Counter* read_io_ops;\n \n   /// Total bytes read from disk.\n   RuntimeProfile::Counter* bytes_read;\n \n   /// Amount of time spent waiting for writes to disk to complete.\n-  RuntimeProfile::Counter* write_wait_time;\n+  //RuntimeProfile::Counter* write_wait_time;\n \n   /// Total number of write I/O operations issued.\n-  RuntimeProfile::Counter* write_io_ops;\n+  //RuntimeProfile::Counter* write_io_ops;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NjIzOA==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r417076238", "createdAt": "2020-04-29T05:35:12Z", "author": {"login": "HappenLee"}, "path": "be/src/runtime/bufferpool/buffer_pool_counters.h", "diffHunk": "@@ -35,19 +35,19 @@ struct BufferPoolClientCounters {\n   RuntimeProfile::Counter* cumulative_bytes_alloced;\n \n   /// Amount of time spent waiting for reads from disk to complete.\n-  RuntimeProfile::Counter* read_wait_time;\n+  //RuntimeProfile::Counter* read_wait_time;\n \n   /// Total number of read I/O operations issued.\n-  RuntimeProfile::Counter* read_io_ops;\n+  //RuntimeProfile::Counter* read_io_ops;\n \n   /// Total bytes read from disk.\n   RuntimeProfile::Counter* bytes_read;\n \n   /// Amount of time spent waiting for writes to disk to complete.\n-  RuntimeProfile::Counter* write_wait_time;\n+  //RuntimeProfile::Counter* write_wait_time;\n \n   /// Total number of write I/O operations issued.\n-  RuntimeProfile::Counter* write_io_ops;\n+  //RuntimeProfile::Counter* write_io_ops;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2Njg4OA=="}, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk2MjgwOnYy", "diffSide": "RIGHT", "path": "be/src/runtime/bufferpool/buffer_pool.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1NzozNlrOGNvvyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1NzozNlrOGNvvyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2Njk1NA==", "bodyText": "not used profile can be removed.", "url": "https://github.com/apache/incubator-doris/pull/3405#discussion_r417066954", "createdAt": "2020-04-29T04:57:36Z", "author": {"login": "chaoyli"}, "path": "be/src/runtime/bufferpool/buffer_pool.cc", "diffHunk": "@@ -392,11 +392,11 @@ BufferPool::Client::Client(BufferPool* pool, //TmpFileMgr::FileGroup* file_group\n       ADD_COUNTER(child_profile, \"CumulativeAllocations\", TUnit::UNIT);\n   counters_.cumulative_bytes_alloced =\n       ADD_COUNTER(child_profile, \"CumulativeAllocationBytes\", TUnit::BYTES);\n-  counters_.read_wait_time = ADD_TIMER(child_profile, \"ReadIoWaitTime\");\n-  counters_.read_io_ops = ADD_COUNTER(child_profile, \"ReadIoOps\", TUnit::UNIT);\n+//  counters_.read_wait_time = ADD_TIMER(child_profile, \"ReadIoWaitTime\");\n+//  counters_.read_io_ops = ADD_COUNTER(child_profile, \"ReadIoOps\", TUnit::UNIT);\n   counters_.bytes_read = ADD_COUNTER(child_profile, \"ReadIoBytes\", TUnit::BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5be321ce04ee39dc182614320bd32247c7cf94"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1687, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}