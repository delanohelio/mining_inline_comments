{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTE1MDc0", "number": 2824, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo1NjoyN1rODcg4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToyMzozN1rODcmXhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI1NDkxOnYy", "diffSide": "LEFT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzo1NjoyN1rOFkl3iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODo0ODoyNVrOFkp2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzQ4MA==", "bodyText": "Private contructor could be mocked also.", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373913480", "createdAt": "2020-02-03T03:56:27Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroup.java", "diffHunk": "@@ -77,8 +77,8 @@\n     // filter the data which has been conformed\n     private Expr whereExpr;\n \n-    // Used for recovery from edit log\n-    private BrokerFileGroup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk3ODY3NA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373978674", "createdAt": "2020-02-03T08:48:25Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroup.java", "diffHunk": "@@ -77,8 +77,8 @@\n     // filter the data which has been conformed\n     private Expr whereExpr;\n \n-    // Used for recovery from edit log\n-    private BrokerFileGroup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzQ4MA=="}, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjI2OTEyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDoxMDozNlrOFkl_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTowOTo1NVrOFkqafw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNTU1Mg==", "bodyText": "The max filter ratio belongs to the whole broker load instead of single data desc . So it does not change the \"max_filter_ratio\" when the system aggregate data desc automatically. Right?", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373915552", "createdAt": "2020-02-03T04:10:36Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk4Nzk2Nw==", "bodyText": "No, it's not. for example\nAssume that file1 should be loaded to p1 and p2,\nand file2 should be loaded to p2 and p3.\nboth file1 and file2 contain data half in p1 and half in p3. so if we set max_filter_ratio to 0.5, this load\nshould succeed.\nIn this case, if we do the aggregation, the result should be:\nfile1 to p1\nfile2 to p3\nfile1+file2 to p2\nand if max_filter_ratio still be 0.5, the load will be failed.\nassume each file has 10 lines:\n[file1 to p1] results in, eg, 5 lines ok, 5 lines error.\n[file2 to p3] results in 5 lines ok, 5 lines error.\n[file1+file2 to p2] reuslts in 0 line ok, 20 lines error.\nso the total error line is 30, and total line is 40, 30/40 > 0.5", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373987967", "createdAt": "2020-02-03T09:09:55Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNTU1Mg=="}, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjUzOTI5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzo0MTo1N1rOFkoelw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzo0MTo1N1rOFkoelw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1NjI0Nw==", "bodyText": "Maybe public class is better.", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373956247", "createdAt": "2020-02-03T07:41:57Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();\n+    // auxiliary structure, tbl id -> set of partition ids.\n+    // used to exam the overlapping partitions of same table.\n+    private Map<Long, Set<Long>> tableIdToPartitioIds = Maps.newHashMap();\n+\n+    // this inner class This class is used to distinguish different combinations of table and partitions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjU1ODk0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzo1MTo1MFrOFkop5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMzo1NFrOFkqyVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1OTE0Mg==", "bodyText": "It can be omitted.", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373959142", "createdAt": "2020-02-03T07:51:50Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();\n+    // auxiliary structure, tbl id -> set of partition ids.\n+    // used to exam the overlapping partitions of same table.\n+    private Map<Long, Set<Long>> tableIdToPartitioIds = Maps.newHashMap();\n+\n+    // this inner class This class is used to distinguish different combinations of table and partitions\n+    public static class FileGroupAggKey {\n+        private long tableId;\n+        private Set<Long> partitionIds; // empty means partition is not specified\n+\n+        public FileGroupAggKey(long tableId, List<Long> partitionIds) {\n+            this.tableId = tableId;\n+            if (partitionIds != null) {\n+                this.partitionIds = Sets.newHashSet(partitionIds);\n+            } else {\n+                this.partitionIds = Sets.newHashSet();\n+            }\n+        }\n+\n+        public long getTableId() {\n+            return tableId;\n+        }\n+\n+        public Set<Long> getPartitionIds() {\n+            return partitionIds;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof FileGroupAggKey)) {\n+                return false;\n+            }\n+\n+            FileGroupAggKey other = (FileGroupAggKey) obj;\n+            return other.tableId == this.tableId && other.partitionIds.equals(this.partitionIds);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tableId, partitionIds);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"[\").append(tableId).append(\": \").append(partitionIds).append(\"]\");\n+            return sb.toString();\n+        }\n+    }\n+\n+    public BrokerFileGroupAggInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDA2OQ==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373994069", "createdAt": "2020-02-03T09:23:54Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();\n+    // auxiliary structure, tbl id -> set of partition ids.\n+    // used to exam the overlapping partitions of same table.\n+    private Map<Long, Set<Long>> tableIdToPartitioIds = Maps.newHashMap();\n+\n+    // this inner class This class is used to distinguish different combinations of table and partitions\n+    public static class FileGroupAggKey {\n+        private long tableId;\n+        private Set<Long> partitionIds; // empty means partition is not specified\n+\n+        public FileGroupAggKey(long tableId, List<Long> partitionIds) {\n+            this.tableId = tableId;\n+            if (partitionIds != null) {\n+                this.partitionIds = Sets.newHashSet(partitionIds);\n+            } else {\n+                this.partitionIds = Sets.newHashSet();\n+            }\n+        }\n+\n+        public long getTableId() {\n+            return tableId;\n+        }\n+\n+        public Set<Long> getPartitionIds() {\n+            return partitionIds;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof FileGroupAggKey)) {\n+                return false;\n+            }\n+\n+            FileGroupAggKey other = (FileGroupAggKey) obj;\n+            return other.tableId == this.tableId && other.partitionIds.equals(this.partitionIds);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tableId, partitionIds);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"[\").append(tableId).append(\": \").append(partitionIds).append(\"]\");\n+            return sb.toString();\n+        }\n+    }\n+\n+    public BrokerFileGroupAggInfo() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1OTE0Mg=="}, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjU5NjI2OnYy", "diffSide": "LEFT", "path": "fe/src/main/java/org/apache/doris/load/PullLoadSourceInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODowOTo0MlrOFko_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyNDo1M1rOFkqz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2NDcyMg==", "bodyText": "This class has been consistent in the old version. Maybe you should keep it .", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373964722", "createdAt": "2020-02-03T08:09:42Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/PullLoadSourceInfo.java", "diffHunk": "@@ -1,119 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQ4OQ==", "bodyText": "It ok, I checked it, it does no use at all now. and the old load job are gone before Doris version 0.11.", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373994489", "createdAt": "2020-02-03T09:24:53Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/PullLoadSourceInfo.java", "diffHunk": "@@ -1,119 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2NDcyMg=="}, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjYwNzYwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODoxNTozM1rOFkpGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyNTo0MlrOFkq1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2NjQ3OA==", "bodyText": "Maybe in is a PullLoadSourceInfo??", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373966478", "createdAt": "2020-02-03T08:15:33Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();\n+    // auxiliary structure, tbl id -> set of partition ids.\n+    // used to exam the overlapping partitions of same table.\n+    private Map<Long, Set<Long>> tableIdToPartitioIds = Maps.newHashMap();\n+\n+    // this inner class This class is used to distinguish different combinations of table and partitions\n+    public static class FileGroupAggKey {\n+        private long tableId;\n+        private Set<Long> partitionIds; // empty means partition is not specified\n+\n+        public FileGroupAggKey(long tableId, List<Long> partitionIds) {\n+            this.tableId = tableId;\n+            if (partitionIds != null) {\n+                this.partitionIds = Sets.newHashSet(partitionIds);\n+            } else {\n+                this.partitionIds = Sets.newHashSet();\n+            }\n+        }\n+\n+        public long getTableId() {\n+            return tableId;\n+        }\n+\n+        public Set<Long> getPartitionIds() {\n+            return partitionIds;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof FileGroupAggKey)) {\n+                return false;\n+            }\n+\n+            FileGroupAggKey other = (FileGroupAggKey) obj;\n+            return other.tableId == this.tableId && other.partitionIds.equals(this.partitionIds);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tableId, partitionIds);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"[\").append(tableId).append(\": \").append(partitionIds).append(\"]\");\n+            return sb.toString();\n+        }\n+    }\n+\n+    public BrokerFileGroupAggInfo() {\n+\n+    }\n+\n+    public void addFileGroup(BrokerFileGroup fileGroup) throws DdlException {\n+        FileGroupAggKey fileGroupAggKey = new FileGroupAggKey(fileGroup.getTableId(), fileGroup.getPartitionIds());\n+        List<BrokerFileGroup> fileGroupList = aggKeyToFileGroups.get(fileGroupAggKey);\n+        if (fileGroupList == null) {\n+            // check if there are overlapping partitions of same table\n+            if (tableIdToPartitioIds.containsKey(fileGroup.getTableId()) \n+                    && tableIdToPartitioIds.get(fileGroup.getTableId()).stream().anyMatch(id -> fileGroup.getPartitionIds().contains(id))) {\n+                throw new DdlException(\"There are overlapping partitions of same table in data descrition of load job stmt\");\n+            }\n+            \n+            fileGroupList = Lists.newArrayList();\n+            aggKeyToFileGroups.put(fileGroupAggKey, fileGroupList);\n+        }\n+        // exist, aggregate them\n+        fileGroupList.add(fileGroup);\n+\n+        // update tableIdToPartitioIds\n+        Set<Long> partitionIds = tableIdToPartitioIds.get(fileGroup.getTableId());\n+        if (partitionIds == null) {\n+            partitionIds = Sets.newHashSet();\n+            tableIdToPartitioIds.put(fileGroup.getTableId(), partitionIds);\n+        }\n+        if (fileGroup.getPartitionIds() != null) {\n+            partitionIds.addAll(fileGroup.getPartitionIds());\n+        }\n+    }\n+\n+    public Set<Long> getAllTableIds() {\n+        return aggKeyToFileGroups.keySet().stream().map(k -> k.tableId).collect(Collectors.toSet());\n+    }\n+\n+    public Map<FileGroupAggKey, List<BrokerFileGroup>> getAggKeyToFileGroups() {\n+        return aggKeyToFileGroups;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(aggKeyToFileGroups);\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {\n+        // The pull load source info doesn't need to be persisted.\n+        // It will be recreated by origin stmt in prepare of load job.\n+        // write 0 just for compatibility\n+        out.writeInt(0);\n+    }\n+\n+    public void readFields(DataInput in) throws IOException {\n+        in.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDg4OQ==", "bodyText": "It won't, we already solve this in version 0.11", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373994889", "createdAt": "2020-02-03T09:25:42Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();\n+    // auxiliary structure, tbl id -> set of partition ids.\n+    // used to exam the overlapping partitions of same table.\n+    private Map<Long, Set<Long>> tableIdToPartitioIds = Maps.newHashMap();\n+\n+    // this inner class This class is used to distinguish different combinations of table and partitions\n+    public static class FileGroupAggKey {\n+        private long tableId;\n+        private Set<Long> partitionIds; // empty means partition is not specified\n+\n+        public FileGroupAggKey(long tableId, List<Long> partitionIds) {\n+            this.tableId = tableId;\n+            if (partitionIds != null) {\n+                this.partitionIds = Sets.newHashSet(partitionIds);\n+            } else {\n+                this.partitionIds = Sets.newHashSet();\n+            }\n+        }\n+\n+        public long getTableId() {\n+            return tableId;\n+        }\n+\n+        public Set<Long> getPartitionIds() {\n+            return partitionIds;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof FileGroupAggKey)) {\n+                return false;\n+            }\n+\n+            FileGroupAggKey other = (FileGroupAggKey) obj;\n+            return other.tableId == this.tableId && other.partitionIds.equals(this.partitionIds);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(tableId, partitionIds);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"[\").append(tableId).append(\": \").append(partitionIds).append(\"]\");\n+            return sb.toString();\n+        }\n+    }\n+\n+    public BrokerFileGroupAggInfo() {\n+\n+    }\n+\n+    public void addFileGroup(BrokerFileGroup fileGroup) throws DdlException {\n+        FileGroupAggKey fileGroupAggKey = new FileGroupAggKey(fileGroup.getTableId(), fileGroup.getPartitionIds());\n+        List<BrokerFileGroup> fileGroupList = aggKeyToFileGroups.get(fileGroupAggKey);\n+        if (fileGroupList == null) {\n+            // check if there are overlapping partitions of same table\n+            if (tableIdToPartitioIds.containsKey(fileGroup.getTableId()) \n+                    && tableIdToPartitioIds.get(fileGroup.getTableId()).stream().anyMatch(id -> fileGroup.getPartitionIds().contains(id))) {\n+                throw new DdlException(\"There are overlapping partitions of same table in data descrition of load job stmt\");\n+            }\n+            \n+            fileGroupList = Lists.newArrayList();\n+            aggKeyToFileGroups.put(fileGroupAggKey, fileGroupList);\n+        }\n+        // exist, aggregate them\n+        fileGroupList.add(fileGroup);\n+\n+        // update tableIdToPartitioIds\n+        Set<Long> partitionIds = tableIdToPartitioIds.get(fileGroup.getTableId());\n+        if (partitionIds == null) {\n+            partitionIds = Sets.newHashSet();\n+            tableIdToPartitioIds.put(fileGroup.getTableId(), partitionIds);\n+        }\n+        if (fileGroup.getPartitionIds() != null) {\n+            partitionIds.addAll(fileGroup.getPartitionIds());\n+        }\n+    }\n+\n+    public Set<Long> getAllTableIds() {\n+        return aggKeyToFileGroups.keySet().stream().map(k -> k.tableId).collect(Collectors.toSet());\n+    }\n+\n+    public Map<FileGroupAggKey, List<BrokerFileGroup>> getAggKeyToFileGroups() {\n+        return aggKeyToFileGroups;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(aggKeyToFileGroups);\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {\n+        // The pull load source info doesn't need to be persisted.\n+        // It will be recreated by origin stmt in prepare of load job.\n+        // write 0 just for compatibility\n+        out.writeInt(0);\n+    }\n+\n+    public void readFields(DataInput in) throws IOException {\n+        in.readInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2NjQ3OA=="}, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjYxMzIxOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODoxODoxM1rOFkpJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwODoxODoxM1rOFkpJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk2NzMzNA==", "bodyText": "Maybe Map<tableId, List> is useful.", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r373967334", "createdAt": "2020-02-03T08:18:13Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.load;\n+\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.io.Writable;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/*\n+ * This class is mainly used to aggregate information of multiple DataDescriptors.\n+ * When the table name and specified partitions in the two DataDescriptors are same,\n+ * the BrokerFileGroup information corresponding to the two DataDescriptors will be aggregated together.\n+ * eg1\uff1a\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ *\n+ *  will be aggregated together, because they have same table name and specified partitions\n+ *  =>\n+ *  FileGroupAggKey(tbl1, [p1, p2]) => List(file1, file2);\n+ * \n+ * eg2:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ * \n+ *  will NOT be aggregated together, because they have same table name but different specified partitions\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file2);\n+ * \n+ * eg3:\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1, p2)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2, p3)\n+ * \n+ *  will throw an Exception, because there is an overlap partition(p2) between 2 data descriptions. And we\n+ *  currently not allow this. You can rewrite the data descriptions like this:\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p1)\n+ * \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p3) \n+ *  \n+ *  and\n+ * \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file1\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2) \n+ *  \n+ *  and\n+ *  \n+ *  DATA INFILE(\"hdfs://hdfs_host:hdfs_port/input/file2\")\n+ *  INTO TABLE `tbl1`\n+ *  PARTITION (p2)\n+ *  \n+ *  they will be aggregate like:\n+ *  FileGroupAggKey(tbl1, [p1]) => List(file1);\n+ *  FileGroupAggKey(tbl1, [p3]) => List(file2);\n+ *  FileGroupAggKey(tbl1, [p2]) => List(file1, file2);\n+ *  \n+ *  Although this transformation can be done automatically by system, but it change the \"max_filter_ratio\".\n+ *  So we have to let user decide what to do.\n+ */\n+public class BrokerFileGroupAggInfo implements Writable {\n+    private static final Logger LOG = LogManager.getLogger(BrokerFileGroupAggInfo.class);\n+\n+    private Map<FileGroupAggKey, List<BrokerFileGroup>> aggKeyToFileGroups = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063543a16e9d39e94f0dba6361c1ef1f7ad91093"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzE1MzMyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToyMzozN1rOFkuMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToyMzozN1rOFkuMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0OTgxMQ==", "bodyText": "A warning log is better ~", "url": "https://github.com/apache/incubator-doris/pull/2824#discussion_r374049811", "createdAt": "2020-02-03T11:23:37Z", "author": {"login": "EmmyMiao87"}, "path": "fe/src/main/java/org/apache/doris/load/BrokerFileGroupAggInfo.java", "diffHunk": "@@ -224,7 +224,15 @@ public void write(DataOutput out) throws IOException {\n     }\n \n     public void readFields(DataInput in) throws IOException {\n-        in.readInt();\n+        int mapSize = in.readInt();\n+        // just for compatibility, the following read objects are useless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bf8b552943d2f5d40f2d6d4638436a7a1ba6e4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2172, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}