{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NTE1MTgx", "number": 4198, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1Njo0NFrOESwk1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowNzoyMFrOEYBesw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTA1Njg3OnYy", "diffSide": "RIGHT", "path": "docs/.vuepress/sidebar/en.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1Njo0NFrOG4HWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1Njo0NFrOG4HWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5Mzk0NQ==", "bodyText": "Please remove md", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461493945", "createdAt": "2020-07-28T10:56:44Z", "author": {"login": "EmmyMiao87"}, "path": "docs/.vuepress/sidebar/en.js", "diffHunk": "@@ -148,7 +148,9 @@ module.exports = [\n           {\n             title: \"Users contribute UDF\",\n             directoryPath: \"contrib/\",\n-            children:[],       \n+            children:[\n+                \"udaf-bitmap-manual.md\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTA1NzI2OnYy", "diffSide": "RIGHT", "path": "docs/.vuepress/sidebar/zh-CN.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1Njo1MlrOG4HW-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1Njo1MlrOG4HW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NDAxMQ==", "bodyText": "Same as above", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461494011", "createdAt": "2020-07-28T10:56:52Z", "author": {"login": "EmmyMiao87"}, "path": "docs/.vuepress/sidebar/zh-CN.js", "diffHunk": "@@ -159,7 +159,9 @@ module.exports = [\n           {\n             title: \"\u7528\u6237\u8d21\u732e\u7684 UDF\",\n             directoryPath: \"contrib/\",\n-            children:[],       \n+            children:[\n+                \"udaf-bitmap-manual.md\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTA1ODcyOnYy", "diffSide": "RIGHT", "path": "docs/en/extending-doris/udf/contrib/udaf-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1NzoyMlrOG4HX2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1NzoyMlrOG4HX2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NDIzNQ==", "bodyText": "Please add a space at the beginning of title", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461494235", "createdAt": "2020-07-28T10:57:22Z", "author": {"login": "EmmyMiao87"}, "path": "docs/en/extending-doris/udf/contrib/udaf-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,217 @@\n+---\n+{\n+    \"title\": \"bitmap longitudinal cutting udaf\",\n+    \"language\": \"en\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+\n+#Bitmap longitudinal cutting udaf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTA1OTY3OnYy", "diffSide": "RIGHT", "path": "docs/en/extending-doris/udf/contrib/udaf-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1NzozOFrOG4HYYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDo1NzozOFrOG4HYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NDM3MQ==", "bodyText": "Same as above", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461494371", "createdAt": "2020-07-28T10:57:38Z", "author": {"login": "EmmyMiao87"}, "path": "docs/en/extending-doris/udf/contrib/udaf-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,217 @@\n+---\n+{\n+    \"title\": \"bitmap longitudinal cutting udaf\",\n+    \"language\": \"en\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+\n+#Bitmap longitudinal cutting udaf\n+\n+\n+## Create table\n+\n+We need to use the aggregation model when building tables. The data type is bitmap, and the aggregation function is bitmap_ union\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"user tag\",\n+  `hid` smallint(6) NULL COMMENT \"Bucket ID\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+The HID column is added to the table schema to indicate the ID range as a hash bucket column.\n+\n+Note: the HID number and buckets should be set reasonably, and the HID number should be set at least 5 times of buckets, so as to make the data hash bucket division as balanced as possible\n+\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\n+Data format:\n+\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\n+Note: the first column represents the user tags, such as' male ',' post-90s', '100000-200000', etc., which have been converted from Chinese into numbers\n+\n+When the data is loaded, the user's bitmap is cut vertically. For example, if the HID of the user ID in the range of 1-5000000 is the same, those with the same hid will be evenly allocated to the back-end be instances for union aggregation. After computing, all the nodes can be calculated in the intersection of local nodes, which can make full use of the computing characteristics of local bitmbe.\n+\n+\n+\n+##Custom udaf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTE3MjIyOnYy", "diffSide": "RIGHT", "path": "contrib/udf/src/udaf_bitmap/bitmap_value.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTozMjo1N1rOG4IcwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowNTozM1rOG4vfCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMTg3Mg==", "bodyText": "Is this file same as the be/src/util/bitmap_value.h ?", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461511872", "createdAt": "2020-07-28T11:32:57Z", "author": {"login": "EmmyMiao87"}, "path": "contrib/udf/src/udaf_bitmap/bitmap_value.h", "diffHunk": "@@ -0,0 +1,1326 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef DORIS_CONTRIB_UDF_SRC_UDAF_BITMAP_BITMAP_VALUE_H", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MTQzNQ==", "bodyText": "Because it can not be reused, so it is copy, but a small change.", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462151435", "createdAt": "2020-07-29T09:05:33Z", "author": {"login": "zhbinbin"}, "path": "contrib/udf/src/udaf_bitmap/bitmap_value.h", "diffHunk": "@@ -0,0 +1,1326 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef DORIS_CONTRIB_UDF_SRC_UDAF_BITMAP_BITMAP_VALUE_H", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMTg3Mg=="}, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTE3NjU1OnYy", "diffSide": "RIGHT", "path": "contrib/udf/src/udaf_bitmap/custom_bitmap_function.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTozNDoyMFrOG4Ifag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTozNDoyMFrOG4Ifag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMjU1NA==", "bodyText": "Please add class description.", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461512554", "createdAt": "2020-07-28T11:34:20Z", "author": {"login": "EmmyMiao87"}, "path": "contrib/udf/src/udaf_bitmap/custom_bitmap_function.h", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+#pragma once\n+\n+#include \"udf.h\"\n+\n+namespace doris_udf {\n+\n+class CustomBitmapFunctions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTE3OTQzOnYy", "diffSide": "RIGHT", "path": "contrib/udf/src/udaf_bitmap/custom_bitmap_function.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTozNToxMlrOG4IhHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTozNToxMlrOG4IhHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMjk5MA==", "bodyText": "The class name should best reflect the meaning of dealing with orthogonal bitmap.", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r461512990", "createdAt": "2020-07-28T11:35:12Z", "author": {"login": "EmmyMiao87"}, "path": "contrib/udf/src/udaf_bitmap/custom_bitmap_function.h", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+#pragma once\n+\n+#include \"udf.h\"\n+\n+namespace doris_udf {\n+\n+class CustomBitmapFunctions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e7679652541e4c9cc3c8e50a050b5863dd690"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg3MjUzOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzoyMjo1NFrOG5RqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzoyMjo1NFrOG5RqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMTM1NQ==", "bodyText": "\u6b63\u4ea4\u7684BITMAP\u8ba1\u7b97UDAF", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462711355", "createdAt": "2020-07-30T03:22:54Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg3Mjg4OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzoyMzowOFrOG5RqcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzoyMzowOFrOG5RqcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMTQwOA==", "bodyText": "same as above", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462711408", "createdAt": "2020-07-30T03:23:08Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5ODQ3OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozODoyNFrOG5R5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozODoyNFrOG5R5SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTIwOA==", "bodyText": "\u9996\u5148\u9700\u8981\u6709\u51fd\u6570\u7684\u4ecb\u7ecd\uff0c\u5c31\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u884c\u4e3a\u662f\u4ec0\u4e48\uff1f\u662f\u7528\u6765\u5e72\u5565\u7684", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462715208", "createdAt": "2020-07-30T03:38:24Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5OTk4OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOToxN1rOG5R6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOToxN1rOG5R6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTQxOQ==", "bodyText": "\u6bcf\u4e2a\u53c2\u6570\u7684\u4ecb\u7ecd\u662f\u9700\u8981\u5305\u542b\uff0c\u6bcf\u4e2a\u53c2\u6570\u662f\u4ec0\u4e48\u610f\u601d\u7684\u7684\uff0c\u6bd4\u5982\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b\u662fbitmap\uff0c\u662f\u5f85\u6c42\u4ea4\u96c6\u7684\u5217\u3002", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462715419", "createdAt": "2020-07-30T03:39:17Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkwNTU3OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0MjoyMVrOG5R9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0MjoyMVrOG5R9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNjI1MA==", "bodyText": "\u53ef\u4ee5\u5148\u603b\u8bf4\uff0c\u89e3\u51b3\u601d\u8def\u662f\u4ec0\u4e48\u3002\u6bd4\u5982\u601d\u8def\u662f\u5c06 bitmap\u5217\u7684\u503c\u5148\u6309\u7167range\u5212\u5206\uff0c\u4e0d\u540crange\u7684\u503c\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5206\u6876\u4e2d\u3002\u4fdd\u8bc1\u4e0d\u540c\u5206\u6876\u4e4b\u95f4\u7684bitmap\u503c\u662f\u6b63\u4ea4\u7684\u3002\u7136\u540e\u518d\u8bf4\u600e\u4e48\u8be6\u7ec6\uff0c\u6700\u540e\u8bf4\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u53ef\u4ee5\u52a0\u901f\u67e5\u8be2", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462716250", "createdAt": "2020-07-30T03:42:21Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkxMzA2OnYy", "diffSide": "RIGHT", "path": "contrib/udf/src/udaf_orthogonal_bitmap/orthogonal_bitmap_function.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0Njo1OVrOG5SBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0Njo1OVrOG5SBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNzM3Mg==", "bodyText": "Will dst be bitmap value?", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462717372", "createdAt": "2020-07-30T03:46:59Z", "author": {"login": "EmmyMiao87"}, "path": "contrib/udf/src/udaf_orthogonal_bitmap/orthogonal_bitmap_function.cpp", "diffHunk": "@@ -0,0 +1,492 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"orthogonal_bitmap_function.h\"\n+#include \"bitmap_value.h\"\n+#include \"string_value.h\"\n+#include <iostream>\n+\n+namespace doris_udf {\n+\n+namespace detail {\n+\n+const int DATETIME_PACKED_TIME_BYTE_SIZE = 8;\n+const int DATETIME_TYPE_BYTE_SIZE = 4;\n+\n+const int DECIMAL_BYTE_SIZE = 16;\n+\n+// get_val start\n+template<typename ValType, typename T>\n+T get_val(const ValType& x) {\n+    return x.val;\n+}\n+\n+template<>\n+StringValue get_val(const StringVal& x) {\n+    return StringValue::from_string_val(x);\n+}\n+// get_val end\n+\n+// serialize_size start\n+template<typename T>\n+int32_t serialize_size(const T& v) {\n+    return sizeof(T);\n+}\n+\n+template<>\n+int32_t serialize_size(const StringValue& v) {\n+    return v.len + 4;\n+}\n+// serialize_size end\n+\n+// write_to start\n+template<typename T>\n+char* write_to(const T& v, char* dest) {\n+    size_t type_size = sizeof(T);\n+    memcpy(dest, &v, type_size);\n+    dest += type_size;\n+    return dest;\n+}\n+\n+template<>\n+char* write_to(const StringValue& v, char* dest) {\n+    *(int32_t*)dest = v.len;\n+    dest += 4;\n+    memcpy(dest, v.ptr, v.len);\n+    dest += v.len;\n+    return dest;\n+}\n+// write_to end\n+\n+// read_from start\n+template<typename T>\n+void read_from(const char** src, T* result) {\n+    size_t type_size = sizeof(T);\n+    memcpy(result, *src, type_size);\n+    *src += type_size;\n+}\n+\n+template<>\n+void read_from(const char** src, StringValue* result) {\n+    int32_t length = *(int32_t*)(*src);\n+    *src += 4;\n+    *result = StringValue((char *)*src, length);\n+    *src += length;\n+}\n+// read_from end\n+\n+} // namespace detail\n+\n+static StringVal serialize(FunctionContext* ctx, BitmapValue* value) {\n+    StringVal result(ctx, value->getSizeInBytes());\n+    value->write((char*) result.ptr);\n+    return result;\n+}\n+\n+// Calculate the intersection of two or more bitmaps\n+template<typename T>\n+struct BitmapIntersect {\n+public:\n+    BitmapIntersect() {}\n+\n+    explicit BitmapIntersect(const char* src) {\n+        deserialize(src);\n+    }\n+\n+    void add_key(const T key) {\n+        BitmapValue empty_bitmap;\n+        _bitmaps[key] = empty_bitmap;\n+    }\n+\n+    void update(const T& key, const BitmapValue& bitmap) {\n+        if (_bitmaps.find(key) != _bitmaps.end()) {\n+            _bitmaps[key] |= bitmap;\n+        }\n+    }\n+\n+    void merge(const BitmapIntersect& other) {\n+        for (auto& kv: other._bitmaps) {\n+            if (_bitmaps.find(kv.first) != _bitmaps.end()) {\n+                _bitmaps[kv.first] |= kv.second;\n+            } else {\n+                _bitmaps[kv.first] = kv.second;\n+            }\n+        }\n+    }\n+\n+    // calculate the intersection for _bitmaps's bitmap values\n+    int64_t intersect_count() const {\n+        if (_bitmaps.empty()) {\n+            return 0;\n+        }\n+\n+        BitmapValue result;\n+        auto it = _bitmaps.begin();\n+        result |= it->second;\n+        it++;\n+        for (;it != _bitmaps.end(); it++) {\n+            result &= it->second;\n+        }\n+\n+        return result.cardinality();\n+    }\n+\n+    // intersection\n+    BitmapValue intersect() {\n+        BitmapValue result;\n+        auto it = _bitmaps.begin();\n+        result |= it->second;\n+        it++;\n+        for (;it != _bitmaps.end(); it++) {\n+            result &= it->second;\n+        }\n+        return result;\n+    }\n+\n+    // the serialize size\n+    size_t size() {\n+        size_t size = 4;\n+        for (auto& kv: _bitmaps) {\n+            size +=  detail::serialize_size(kv.first);;\n+            size +=  kv.second.getSizeInBytes();\n+        }\n+        return size;\n+    }\n+\n+    //must call size() first\n+    void serialize(char* dest) {\n+        char* writer = dest;\n+        *(int32_t*)writer = _bitmaps.size();\n+        writer += 4;\n+        for (auto& kv: _bitmaps) {\n+            writer = detail::write_to(kv.first, writer);\n+            kv.second.write(writer);\n+            writer += kv.second.getSizeInBytes();\n+        }\n+    }\n+\n+    void deserialize(const char* src) {\n+        const char* reader = src;\n+        int32_t bitmaps_size = *(int32_t*)reader;\n+        reader += 4;\n+        for (int32_t i = 0; i < bitmaps_size; i++) {\n+            T key;\n+            detail::read_from(&reader, &key);\n+            BitmapValue bitmap(reader);\n+            reader += bitmap.getSizeInBytes();\n+            _bitmaps[key] = bitmap;\n+        }\n+    }\n+\n+private:\n+    std::map<T, BitmapValue> _bitmaps;\n+};\n+\n+void OrthogonalBitmapFunctions::init() {\n+}\n+\n+void OrthogonalBitmapFunctions::bitmap_union_count_init(FunctionContext* ctx, StringVal* dst) {\n+    dst->is_null = false;\n+    dst->len = sizeof(BitmapValue);\n+    dst->ptr = (uint8_t*)new BitmapValue();\n+}\n+\n+void OrthogonalBitmapFunctions::bitmap_union(FunctionContext* ctx, const StringVal& src, StringVal* dst) {\n+    if (src.is_null) {\n+        return;\n+    }\n+    auto dst_bitmap = reinterpret_cast<BitmapValue*>(dst->ptr);\n+    // zero size means the src input is a agg object\n+    if (src.len == 0) {\n+        (*dst_bitmap) |= *reinterpret_cast<BitmapValue*>(src.ptr);\n+    } else {\n+        (*dst_bitmap) |= BitmapValue((char*) src.ptr);\n+    }\n+}\n+\n+StringVal OrthogonalBitmapFunctions::bitmap_serialize(FunctionContext* ctx, const StringVal& src) {\n+    if (src.is_null) {\n+        return src;\n+    }\n+\n+    auto src_bitmap = reinterpret_cast<BitmapValue*>(src.ptr);\n+    StringVal result = serialize(ctx, src_bitmap);\n+    delete src_bitmap;\n+    return result;\n+}\n+\n+StringVal OrthogonalBitmapFunctions::bitmap_count_serialize(FunctionContext* ctx, const StringVal& src) {\n+    if (src.is_null) {\n+        return src;\n+    }\n+\n+    auto src_bitmap = reinterpret_cast<BitmapValue*>(src.ptr);\n+    int64_t val = src_bitmap->cardinality();\n+    StringVal result(ctx, sizeof(int64_t));\n+\n+    *(int64_t*)result.ptr = val;\n+    delete src_bitmap;\n+    return result;\n+\n+}\n+\n+// This is a init function for bitmap_intersect.\n+template<typename T, typename ValType>\n+void OrthogonalBitmapFunctions::bitmap_intersect_init(FunctionContext* ctx, StringVal* dst) {\n+    // constant args start from index 2\n+    if (ctx->get_num_constant_args() > 1) {\n+        dst->is_null = false;\n+        dst->len = sizeof(BitmapIntersect<T>);\n+        auto intersect = new BitmapIntersect<T>();\n+\n+        for (int i = 2; i < ctx->get_num_constant_args(); ++i) {\n+            ValType* arg = reinterpret_cast<ValType*>(ctx->get_constant_arg(i));\n+            intersect->add_key(detail::get_val<ValType, T>(*arg));\n+        }\n+\n+        dst->ptr = (uint8_t*)intersect;\n+    } else {\n+        dst->is_null = false;\n+        dst->len = sizeof(BitmapValue);\n+        dst->ptr = (uint8_t*)new BitmapValue();\n+    }\n+}\n+\n+// This is a init function for intersect_count.\n+template<typename T, typename ValType>\n+void OrthogonalBitmapFunctions::bitmap_intersect_count_init(FunctionContext* ctx, StringVal* dst) {\n+    if (ctx->get_num_constant_args() > 1) {\n+        dst->is_null = false;\n+        dst->len = sizeof(BitmapIntersect<T>);\n+        auto intersect = new BitmapIntersect<T>();\n+\n+        // constant args start from index 2\n+        for (int i = 2; i < ctx->get_num_constant_args(); ++i) {\n+            ValType* arg = reinterpret_cast<ValType*>(ctx->get_constant_arg(i));\n+            intersect->add_key(detail::get_val<ValType, T>(*arg));\n+        }\n+\n+        dst->ptr = (uint8_t*)intersect;\n+    } else {\n+        dst->is_null = false;\n+        dst->len = sizeof(int64_t);\n+        dst->ptr = (uint8_t*)new int64_t;\n+        *(int64_t *)dst->ptr = 0;\n+    }\n+}\n+\n+template<typename T, typename ValType>\n+void OrthogonalBitmapFunctions::bitmap_intersect_update(FunctionContext* ctx, const StringVal& src, const ValType& key,\n+                                              int num_key, const ValType* keys, const StringVal* dst) {\n+    auto* dst_bitmap = reinterpret_cast<BitmapIntersect<T>*>(dst->ptr);\n+    // zero size means the src input is a agg object\n+    if (src.len == 0) {\n+        dst_bitmap->update(detail::get_val<ValType, T>(key), *reinterpret_cast<BitmapValue*>(src.ptr));\n+    } else {\n+        dst_bitmap->update(detail::get_val<ValType, T>(key), BitmapValue((char*)src.ptr));\n+    }\n+}\n+\n+template<typename T>\n+void OrthogonalBitmapFunctions::bitmap_intersect_merge(FunctionContext* ctx, const StringVal& src, const StringVal* dst) {\n+    auto* dst_bitmap = reinterpret_cast<BitmapIntersect<T>*>(dst->ptr);\n+    dst_bitmap->merge(BitmapIntersect<T>((char*)src.ptr));\n+}\n+\n+template<typename T>\n+StringVal OrthogonalBitmapFunctions::bitmap_intersect_serialize(FunctionContext* ctx, const StringVal& src) {\n+    auto* src_bitmap = reinterpret_cast<BitmapIntersect<T>*>(src.ptr);\n+    StringVal result(ctx, src_bitmap->size());\n+    src_bitmap->serialize((char*)result.ptr);\n+    delete src_bitmap;\n+    return result;\n+}\n+\n+template<typename T>\n+BigIntVal OrthogonalBitmapFunctions::bitmap_intersect_finalize(FunctionContext* ctx, const StringVal& src) {\n+    auto* src_bitmap = reinterpret_cast<BitmapIntersect<T>*>(src.ptr);\n+    BigIntVal result = BigIntVal(src_bitmap->intersect_count());\n+    delete src_bitmap;\n+    return result;\n+}\n+\n+void OrthogonalBitmapFunctions::bitmap_count_merge(FunctionContext* context, const StringVal& src, StringVal* dst) {\n+    if (dst->len != sizeof(int64_t)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkxNzY4OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0OTo1M1rOG5SEVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0OTo1M1rOG5SEVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODAzNw==", "bodyText": "\u540d\u5b57\u597d\u50cf\u662f\uff1f libudaf_orthogonal_bitmap.so?", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462718037", "createdAt": "2020-07-30T03:49:53Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a\n+   \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+   \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u805a\u5408\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9(merge\u3001finalize)\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684bitmap\u503c\u5faa\u73af\u6c42\u5e76\u96c6\n+   \n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_intersect_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions30bitmap_intersect_and_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions16bitmap_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+\n+```\n+\u6ce8\u610f\uff1a\n+1.column_to_filter, filter_values\u5217\u8fd9\u91cc\u8bbe\u7f6e\u4e3aBIGINT\u7c7b\u578b\uff1b\n+2.\u51fd\u6570\u7b26\u53f7\u901a\u8fc7nm /xxx/xxx/libudaf_bitmap.so|grep \"bitmap_intersect\" \u67e5\u627e\n+\n+\u6837\u4f8b\uff1a\n+```\n+select BITMAP_COUNT(bitmap_orthogonal_intersect(user_id, tag, 13080800, 11110200)) from user_tag_bitmap  where tag in (13080800, 11110200);\n+\n+```\n+\n+### bitmap_orthogonal_intersect_count  \n+\u6c42\u4ea4\u96c6count\u51fd\u6570\uff1a\n+  bitmap_orthogonal_intersect_count(bitmap_column, column_to_filter, filter_values)\n+\n+\u53c2\u6570\uff1a\n+  \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+  \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\u5b9a\u4e49\u540c\u539f\u7248intersect_count\uff0c\u4f46\u5b9e\u73b0\u4e0d\u540c\u3002\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u805a\u5408\u4e0a\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u518d\u5bf9\u4ea4\u96c6\u7ed3\u679c\u6c42count\uff0ccount\u503c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9\uff08merge\u3001finalize\uff09\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684count\u503c\u5faa\u73af\u6c42sum\n+  \n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions27bitmap_intersect_count_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions32bitmap_intersect_count_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+### bitmap_orthogonal_union_count \n+\u6c42\u5e76\u96c6count\u51fd\u6570\uff1a\n+  bitmap_orthogonal_union_count(bitmap_column)\n+  \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\u5b9a\u4e49\u540c\u539f\u7248bitmap_union_count\uff0c\u4f46\u5b9e\u73b0\u4e0d\u540c\u3002\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5bf9\u6240\u6709bitmap\u6c42\u5e76\u96c6\uff0c\u518d\u5bf9\u5e76\u96c6\u7684\u7ed3\u679cbitmap\u6c42count\uff0ccount\u503c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9\uff08merge\u3001finalize\uff09\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684count\u503c\u5faa\u73af\u6c42sum\n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_union_count(BITMAP);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_union_count(BITMAP) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_union_count_initEPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions22bitmap_count_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+## \u6e90\u7801\u53ca\u7f16\u8bd1\n+\u6e90\u4ee3\u7801\uff1a\n+```\n+contrib/udf/src/udaf_bitmap/\n+|-- bitmap_value.h\n+|-- CMakeLists.txt\n+|-- custom_bitmap_function.cpp\n+|-- custom_bitmap_function.h\n+`-- string_value.h\n+```\n+\u7f16\u8bd1UDAF\uff1a\n+```\n+$cd contrib/udf\n+$ sh build_udf.sh\n+\n+```\n+libudaf_bitmap.so\u4ea7\u51fa\u76ee\u5f55\uff1a\n+```\n+output/contrib/udf/lib/udaf_bitmap/libudaf_bitmap.so", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkxOTQxOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MDo0N1rOG5SFRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MDo0N1rOG5SFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODI3Nw==", "bodyText": "\u540d\u79f0\u7edf\u4e00\u4e00\u4e0b\uff0c\u6bd4\u5982 \u90fd\u7528udaf_orthogonal_bitmap", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462718277", "createdAt": "2020-07-30T03:50:47Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a\n+   \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+   \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u805a\u5408\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9(merge\u3001finalize)\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684bitmap\u503c\u5faa\u73af\u6c42\u5e76\u96c6\n+   \n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_intersect_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions30bitmap_intersect_and_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions16bitmap_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+\n+```\n+\u6ce8\u610f\uff1a\n+1.column_to_filter, filter_values\u5217\u8fd9\u91cc\u8bbe\u7f6e\u4e3aBIGINT\u7c7b\u578b\uff1b\n+2.\u51fd\u6570\u7b26\u53f7\u901a\u8fc7nm /xxx/xxx/libudaf_bitmap.so|grep \"bitmap_intersect\" \u67e5\u627e\n+\n+\u6837\u4f8b\uff1a\n+```\n+select BITMAP_COUNT(bitmap_orthogonal_intersect(user_id, tag, 13080800, 11110200)) from user_tag_bitmap  where tag in (13080800, 11110200);\n+\n+```\n+\n+### bitmap_orthogonal_intersect_count  \n+\u6c42\u4ea4\u96c6count\u51fd\u6570\uff1a\n+  bitmap_orthogonal_intersect_count(bitmap_column, column_to_filter, filter_values)\n+\n+\u53c2\u6570\uff1a\n+  \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+  \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\u5b9a\u4e49\u540c\u539f\u7248intersect_count\uff0c\u4f46\u5b9e\u73b0\u4e0d\u540c\u3002\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u805a\u5408\u4e0a\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u518d\u5bf9\u4ea4\u96c6\u7ed3\u679c\u6c42count\uff0ccount\u503c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9\uff08merge\u3001finalize\uff09\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684count\u503c\u5faa\u73af\u6c42sum\n+  \n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions27bitmap_intersect_count_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions32bitmap_intersect_count_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+### bitmap_orthogonal_union_count \n+\u6c42\u5e76\u96c6count\u51fd\u6570\uff1a\n+  bitmap_orthogonal_union_count(bitmap_column)\n+  \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\u5b9a\u4e49\u540c\u539f\u7248bitmap_union_count\uff0c\u4f46\u5b9e\u73b0\u4e0d\u540c\u3002\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5bf9\u6240\u6709bitmap\u6c42\u5e76\u96c6\uff0c\u518d\u5bf9\u5e76\u96c6\u7684\u7ed3\u679cbitmap\u6c42count\uff0ccount\u503c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9\uff08merge\u3001finalize\uff09\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684count\u503c\u5faa\u73af\u6c42sum\n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_union_count(BITMAP);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_union_count(BITMAP) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_union_count_initEPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions22bitmap_count_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+## \u6e90\u7801\u53ca\u7f16\u8bd1\n+\u6e90\u4ee3\u7801\uff1a\n+```\n+contrib/udf/src/udaf_bitmap/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkyMDA4OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MToxNFrOG5SFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowMjo0M1rOHAIazQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODM4Ng==", "bodyText": "\u6ce8\u610f\u6587\u6863\u4e2d\u7684\u540d\u79f0\u7edf\u4e00", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462718386", "createdAt": "2020-07-30T03:51:14Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a\n+   \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+   \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u805a\u5408\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9(merge\u3001finalize)\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684bitmap\u503c\u5faa\u73af\u6c42\u5e76\u96c6\n+   \n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1OTMyMA==", "bodyText": "\u8fd9\u4e2a\u662f\u6307\u54ea\u4e2a\u540d\u79f0\uff1f", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r463459320", "createdAt": "2020-07-31T07:51:37Z", "author": {"login": "zhbinbin"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a\n+   \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+   \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u805a\u5408\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9(merge\u3001finalize)\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684bitmap\u503c\u5faa\u73af\u6c42\u5e76\u96c6\n+   \n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODM4Ng=="}, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5OTk4MQ==", "bodyText": "\u6bd4\u5982\u524d\u9762\u90fd\u662f orthogonal_bitmap \u90a3\u4e48\u8fd9\u91cc\u4e5f\u6700\u597d\u662f orthogonal_bitmap", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r469899981", "createdAt": "2020-08-13T12:02:43Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,209 @@\n+---\n+{\n+    \"title\": \"BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# BITMAP\u6b63\u4ea4\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982\u6570\u636e\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u65b9\u6848\u662f\u5efa\u8868\u65f6\u589e\u52a0hid\u5217\uff0c\u7f50\u5e93\u65f6hid\u5217\u6309\u7167bitmap\u5217\u7684range\u5212\u5206\uff0c\u5e76\u4e14\u6309hid\u5747\u5300\u5206\u6876\u3002\u8fd9\u6837\u6309range\u5212\u5206\u7684\u805a\u5408bitmap\u6570\u636e\u4f1a\u5747\u5300\u5730\u5206\u5e03\u5728\u6240\u6709\u540e\u7aefbe\u5b9e\u4f8b\u4e0a\u3002\u5728schema\u8868\u7684\u57fa\u7840\u4e0a\uff0c\u4f18\u5316udaf\u805a\u5408\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u6240\u6709\u626b\u63cf\u8282\u70b9\u53c2\u4e0e\u5206\u5e03\u5f0f\u6b63\u4ea4\u5e76\u7b97\uff0c\u7136\u540e\u5728\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\n+\n+## Create table\n+\n+\u5efa\u8868\u65f6\u9700\u8981\u4f7f\u7528\u805a\u5408\u6a21\u578b\uff0c\u6570\u636e\u7c7b\u578b\u662f bitmap , \u805a\u5408\u51fd\u6570\u662f bitmap_union\n+\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"\u7528\u6237\u6807\u7b7e\",\n+  `hid` smallint(6) NULL COMMENT \"\u5206\u6876id\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+\u8868schema\u589e\u52a0hid\u5217\uff0c\u8868\u793aid\u8303\u56f4, \u4f5c\u4e3ahash\u5206\u6876\u5217\u3002\n+\n+\u6ce8\uff1ahid\u6570\u548cBUCKETS\u8981\u8bbe\u7f6e\u5408\u7406\uff0chid\u6570\u8bbe\u7f6e\u81f3\u5c11\u662fBUCKETS\u76845\u500d\u4ee5\u4e0a\uff0c\u4ee5\u4f7f\u6570\u636ehash\u5206\u6876\u5c3d\u91cf\u5747\u8861\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\u6570\u636e\u683c\u5f0f\uff1a\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\u6ce8\uff1a\u7b2c\u4e00\u5217\u4ee3\u8868\u7528\u6237\u6807\u7b7e\uff0c\u5982'\u7537', '90\u540e', '10-20\u4e07'\u7b49\uff0c\u5df2\u7531\u4e2d\u6587\u8f6c\u6362\u6210\u6570\u5b57\n+\n+load\u6570\u636e\u65f6\uff0c\u5bf9\u7528\u6237bitmap\u8fdb\u884c\u7eb5\u5411\u5207\u5272\uff0c\u4f8b\u5982\uff0c\u7528\u6237id\u57281-5000000\u8303\u56f4\u5185\u7684hid\u76f8\u540c\uff0chid\u76f8\u540c\u7684\u4f1a\u88ab\u5747\u5300\u7684hash\u5206\u914d\u540e\u7aefbe\u5b9e\u4f8b\u8fdb\u884cunion\u805a\u5408\u3002\u5728bitmap\u7684udaf\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528tablet\u5728be\u4e0a\u5e73\u5747\u5206\u6563\u7684\u7279\u6027\uff0c\u5728local\u8282\u70b9scan\u6570\u636e\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u8ba1\u7b97\uff0c\u5728top\u8282\u70b9merge\u9636\u6bb5\u8fdb\u884c\u6c47\u603b\u8ba1\u7b97\u7ed3\u679c\uff0c\u6b64\u8bbe\u8ba1\u80fd\u5145\u5206\u53d1\u6325\u6240\u6709be\u5e76\u53d1\u8ba1\u7b97\u7684\u7279\u6027\u3002\n+\n+## \u81ea\u5b9a\u4e49UDAF\n+Doris\u67e5\u8be2\u524d\u8bbe\u7f6e\u53c2\u6570\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\u6ce8\uff1a\u6839\u636e\u96c6\u7fa4\u60c5\u51b5\u8bbe\u7f6e\u5e76\u53d1\u53c2\u6570\uff0c\u63d0\u9ad8\u5e76\u53d1\u8ba1\u7b97\u6027\u80fd\n+\n+\u65b0udaf\u9700\u8981\u5728doris\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u65f6\u6ce8\u518c\u51fd\u6570\u7b26\u53f7\uff0c\u51fd\u6570\u7b26\u53f7\u901a\u8fc7\u52a8\u6001\u5e93.so\u7684\u65b9\u5f0f\u88ab\u52a0\u8f7d\u3002\n+\n+### bitmap_orthogonal_intersect \n+\n+\u6c42\u4ea4\u96c6\u51fd\u6570\n+  bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+  \n+\u53c2\u6570\uff1a\n+   \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fBitmap\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8fc7\u6ee4\u7684\u7ef4\u5ea6\u5217\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u662f\u53d8\u957f\u53c2\u6570\uff0c\u542b\u4e49\u662f\u8fc7\u6ee4\u7ef4\u5ea6\u5217\u7684\u4e0d\u540c\u53d6\u503c\n+   \n+\u8bf4\u660e\uff1a\n+  \u6b64udaf\uff0c\u5728\u6b64\u8868schema\u7684\u57fa\u7840\u4e0a\uff0c\u67e5\u8be2\u89c4\u5212\u4e0a\u805a\u5408\u52062\u5c42\uff0c\u5728\u7b2c\u4e00\u5c42be\u8282\u70b9\uff08update\u3001serialize\uff09\u5148\u6309filter_values\u4e3akey\u8fdb\u884chash\u805a\u5408\uff0c\u7136\u540e\u5bf9\u6240\u6709key\u7684bitmap\u6c42\u4ea4\u96c6\uff0c\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u53d1\u9001\u81f3\u7b2c\u4e8c\u5c42be\u8282\u70b9(merge\u3001finalize)\uff0c\u5728\u7b2c\u4e8c\u5c42be\u8282\u70b9\u5bf9\u6240\u6709\u6765\u6e90\u4e8e\u7b2c\u4e00\u5c42\u8282\u70b9\u7684bitmap\u503c\u5faa\u73af\u6c42\u5e76\u96c6\n+   \n+\n+\u5b9a\u4e49\uff1a\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODM4Ng=="}, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkyMjE3OnYy", "diffSide": "RIGHT", "path": "docs/en/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MjozM1rOG5SG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MjozM1rOG5SG1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |-- custom_bitmap_function.cpp\n          \n          \n            \n            |-- orthogonal_bitmap_function.cpp", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r462718678", "createdAt": "2020-07-30T03:52:33Z", "author": {"login": "EmmyMiao87"}, "path": "docs/en/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,239 @@\n+---\n+{\n+    \"title\": \"bitmap orthogonal calculation udaf\",\n+    \"language\": \"en\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# Bitmap orthogonal calculation udaf\n+\n+## Background\n+\n+The original bitmap aggregate function designed by Doris is more general, but it has poor performance for the intersection and union of bitmap large cardinality above 100 million level. There are two main reasons for checking the bitmap aggregate function logic of the back-end be. First, when the bitmap cardinality is large, if the data size exceeds 1g, the network / disk IO processing time is relatively long; second, after the scan data, all the back-end be instances are transmitted to the top-level node for intersection and union operation, which brings pressure on the top-level single node and becomes the processing bottleneck.\n+\n+The solution is to add the HID column when creating the table, divide the HID column according to the range of the bitmap column, and evenly divide the buckets according to the HID. In this way, the aggregated bitmap data divided by range is evenly distributed across all back-end be instances. Based on the schema table, the udaf aggregation function is optimized to make it participate in distributed orthogonal calculation at all scanning nodes, and then summarize at the top node, which will greatly improve the computational efficiency.\n+\n+## Create table\n+\n+We need to use the aggregation model when building tables. The data type is bitmap, and the aggregation function is bitmap_ union\n+```\n+CREATE TABLE `user_tag_bitmap` (\n+  `tag` bigint(20) NULL COMMENT \"user tag\",\n+  `hid` smallint(6) NULL COMMENT \"Bucket ID\",\n+  `user_id` bitmap BITMAP_UNION NULL COMMENT \"\"\n+) ENGINE=OLAP\n+AGGREGATE KEY(`tag`, `hid`)\n+COMMENT \"OLAP\"\n+DISTRIBUTED BY HASH(`hid`) BUCKETS 3\n+```\n+The HID column is added to the table schema to indicate the ID range as a hash bucket column.\n+\n+Note: the HID number and buckets should be set reasonably, and the HID number should be set at least 5 times of buckets, so as to make the data hash bucket division as balanced as possible\n+\n+\n+## Data Load\n+\n+``` \n+LOAD LABEL user_tag_bitmap_test\n+(\n+DATA INFILE('hdfs://abc')\n+INTO TABLE user_tag_bitmap\n+COLUMNS TERMINATED BY ','\n+(tmp_tag, tmp_user_id)\n+SET (\n+tag = tmp_tag,\n+hid = ceil(tmp_user_id/5000000),\n+user_id = to_bitmap(tmp_user_id)\n+)\n+)\n+...\n+```\n+\n+Data format:\n+\n+``` \n+11111111,1\n+11111112,2\n+11111113,3\n+11111114,4\n+...\n+```\n+\n+Note: the first column represents the user tags, such as' male ',' post-90s', '100000-200000', etc., which have been converted from Chinese into numbers\n+\n+When the data is loaded, the user's bitmap is cut vertically. For example, if the HID of the user ID in the range of 1-5000000 is the same, those with the same hid will be evenly allocated to the back-end be instances for union aggregation. After computing, all the nodes can be calculated in the intersection of local nodes, which can make full use of the computing characteristics of local bitmbe.\n+\n+## Custom udaf\n+\n+Setting parameters before Doris query\n+\n+```\n+set parallel_fragment_exec_instance_num=5\n+```\n+\n+Note: set concurrency parameters according to cluster conditions to improve concurrent computing performance\n+\n+The new udaf needs to register function symbols when Doris defines aggregate functions. Function symbols are loaded by dynamic library. So.\n+\n+### bitmap_orthogonal_intersect \n+\n+\n+Orthogonal intersection function\n+\n+bitmap_orthogonal_intersect(bitmap_column, column_to_filter, filter_values)\n+\n+Parameters:\n+\n+the first parameter is the bitmap column, the second parameter is the dimension column for filtering, and the third parameter is the variable length parameter, which means different values of the filter dimension column\n+\n+Explain:\n+\n+on the basis of this table schema, this udaf has two levels of aggregation in query planning. In the first layer, be nodes (update and serialize) first press filter_ Values are used to hash aggregate the keys, and then the bitmaps of all keys are intersected. The results are serialized and sent to the second level be nodes (merge and finalize). In the second level be nodes, all the bitmap values from the first level nodes are combined circularly\n+\n+Definition:\n+\n+```\n+drop FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect(BITMAP,BIGINT,BIGINT, ...) RETURNS BITMAP INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_intersect_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions30bitmap_intersect_and_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions16bitmap_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+\n+```\n+\n+Note:\n+\n+1. column_to_filter, filter_values column is set to bigint type here;\n+\n+2. the function symbol passes through nm /xxx/xxx/libudaf_bitmap.so|grep \"bitmap_\" \n+\n+Example:\n+\n+```\n+select BITMAP_COUNT(bitmap_orthogonal_intersect(user_id, tag, 13080800, 11110200)) from user_tag_bitmap  where tag in (13080800, 11110200);\n+\n+```\n+\n+### bitmap_orthogonal_intersect_count \n+\n+Calculate the intersection count function:\n+\n+bitmap_orthogonal_intersect_count(bitmap_column, column_to_filter, filter_values)\n+\n+Parameters:\n+\n+The first parameter is the bitmap column, the second parameter is the dimension column for filtering, and the third parameter is the variable length parameter, which means different values of the filter dimension column\n+\n+Explain:\n+\n+this udaf definition is the same as the original intersect_count, but the implementation is different.\n+\n+on the basis of this table schema, the query planning aggregation is divided into two layers. In the first layer, be nodes (update and serialize) first press filter_ Values are used to hash aggregate the keys, and then the intersection of bitmaps of all keys is performed, and then the intersection results are counted. The count values are serialized and sent to the second level be nodes (merge and finalize). In the second level be nodes, the sum of all the count values from the first level nodes is calculated circularly\n+\n+Definition:\n+\n+```\n+drop FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_intersect_count(BITMAP,BIGINT,BIGINT, ...) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions27bitmap_intersect_count_initIlNS_9BigIntValEEEvPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_intersect_updateIlNS_9BigIntValEEEvPNS_15FunctionContextERKNS_9StringValERKT0_iPS9_PS6_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions32bitmap_intersect_count_serializeIlEENS_9StringValEPNS_15FunctionContextERKS2_\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+### bitmap_orthogonal_union_count \n+\n+Union count function:\n+\n+bitmap_orthogonal_union_count(bitmap_column)\n+\n+Explain:\n+\n+this udaf definition is the same as the original bitmap_ union_ Count, but the implementation is different.\n+\n+on the basis of this table schema, this udaf is divided into two layers. In the first layer, be nodes (update and serialize) merge all the bitmaps, and then count the resulting bitmaps. The count values are serialized and sent to the second level be nodes (merge and finalize). In the second layer, the be nodes are used to calculate the sum of all the count values from the first level nodes\n+\n+Definition:\n+\n+```\n+drop FUNCTION bitmap_orthogonal_union_count(BITMAP);\n+CREATE AGGREGATE FUNCTION bitmap_orthogonal_union_count(BITMAP) RETURNS BIGINT INTERMEDIATE varchar(1)\n+PROPERTIES (\n+\"init_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions23bitmap_union_count_initEPNS_15FunctionContextEPNS_9StringValE\",\n+\"update_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions12bitmap_unionEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"serialize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions22bitmap_count_serializeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"merge_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions18bitmap_count_mergeEPNS_15FunctionContextERKNS_9StringValEPS3_\",\n+\"finalize_fn\"=\"_ZN9doris_udf25OrthogonalBitmapFunctions21bitmap_count_finalizeEPNS_15FunctionContextERKNS_9StringValE\",\n+\"object_file\"=\"http://ip:port/libudaf_orthogonal_bitmap.so\" );\n+```\n+\n+## Source code and compilation\n+\n+Source code:\n+\n+```\n+contrib/udf/src/udaf_bitmap/\n+|-- bitmap_value.h\n+|-- CMakeLists.txt\n+|-- custom_bitmap_function.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fe5bc0379423030d08be70879862b89757495e"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjI0MzM5OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowNDowNVrOHAIdfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowNDowNVrOHAIdfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwMDY2OA==", "bodyText": "\u8fd9\u4e00\u53e5\u6709\u70b9\u6b67\u4e49 \u5728\u6bcf\u4e2a\u5206\u6876\u4e2d\u5c06\u6b63\u4ea4\u7684BITMAP\u8fdb\u884c\u805a\u5408\u8ba1\u7b97 \u662f\u5426\u6539\u4e3a \u5148\u5206\u522b\u5bf9\u4e0d\u540c\u5206\u6876\u4e2d\u7684\u6b63\u4ea4bitmap\u8fdb\u884c\u805a\u5408\u8ba1\u7b97\uff0c \u7136\u540e\u9876\u5c42\u8282\u70b9\u76f4\u63a5\u5c06\u805a\u5408\u8ba1\u7b97\u540e\u7684\u503c\u5408\u5e76\u6c47\u603b\uff0c\u5e76\u8f93\u51fa\u3002", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r469900668", "createdAt": "2020-08-13T12:04:05Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,228 @@\n+---\n+{\n+    \"title\": \"\u6b63\u4ea4\u7684BITMAP\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# \u6b63\u4ea4\u7684BITMAP\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982bitmap\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u601d\u8def\u662f\u5c06bitmap\u5217\u7684\u503c\u6309\u7167range\u5212\u5206\uff0c\u4e0d\u540crange\u7684\u503c\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5206\u6876\u4e2d\uff0c\u4fdd\u8bc1\u4e86\u4e0d\u540c\u5206\u6876\u7684bitmap\u503c\u662f\u6b63\u4ea4\u7684\u3002\u8fd9\u6837\uff0c\u6570\u636e\u5206\u5e03\u66f4\u5747\u5300\uff0c\u4e00\u4e2a\u67e5\u8be2\u4f1a\u626b\u63cf\u6240\u6709\u5206\u6876\uff0c\u5728\u6bcf\u4e2a\u5206\u6876\u4e2d\u5c06\u6b63\u4ea4\u7684BITMAP\u8fdb\u884c\u805a\u5408\u8ba1\u7b97\uff0c\u7136\u540e\u628a\u8ba1\u7b97\u7ed3\u679c\u4f20\u8f93\u81f3\u9876\u5c42\u8282\u70b9\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u89e3\u51b3\u4e86\u9876\u5c42\u5355\u8282\u70b9\u8ba1\u7b97\u74f6\u9888\u95ee\u9898\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d348d335d334612221fffd6237d2b9bbad2f89aa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjI1NTIzOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowNzoyMFrOHAIkOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjowNzoyMFrOHAIkOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwMjM5NA==", "bodyText": "\u8fd9\u91cc\u53ef\u4ee5\u52a0\u4e00\u4e2a\u603b\u8bf4\uff0c\n\u7b2c\u4e00\u6b65\uff1a\u5efa\u8868\u3002\u8fd9\u4e00\u6b65\u4e3b\u8981\u662f\u4e3a\u4e86xxx\n\u7b2c\u4e8c\u6b65\uff1a\u7f16\u8bd1 udaf\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1 xxx\uff0c \u662f\u4e3a\u4e86xxx\n\u7b2c\u4e09\u6b65\uff1a\u5c06udaf \u6ce8\u518c\u5230doris\u4e2d\n\u7b2c\u56db\u90e8\uff1a\u5982\u4f55\u4f7f\u7528\n\u7136\u540e\u518d\u9488\u5bf9\u6bcf\u9879\u5206\u522b\u8bf4\u3002", "url": "https://github.com/apache/incubator-doris/pull/4198#discussion_r469902394", "createdAt": "2020-08-13T12:07:20Z", "author": {"login": "EmmyMiao87"}, "path": "docs/zh-CN/extending-doris/udf/contrib/udaf-orthogonal-bitmap-manual.md", "diffHunk": "@@ -0,0 +1,228 @@\n+---\n+{\n+    \"title\": \"\u6b63\u4ea4\u7684BITMAP\u8ba1\u7b97UDAF\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# \u6b63\u4ea4\u7684BITMAP\u8ba1\u7b97UDAF\n+\n+## \u80cc\u666f\n+\n+Doris\u539f\u6709\u7684Bitmap\u805a\u5408\u51fd\u6570\u8bbe\u8ba1\u6bd4\u8f83\u901a\u7528\uff0c\u4f46\u5bf9\u4ebf\u7ea7\u522b\u4ee5\u4e0abitmap\u5927\u57fa\u6570\u7684\u4ea4\u5e76\u96c6\u8ba1\u7b97\u6027\u80fd\u8f83\u5dee\u3002\u6392\u67e5\u540e\u7aefbe\u7684bitmap\u805a\u5408\u51fd\u6570\u903b\u8f91\uff0c\u53d1\u73b0\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u4e00\u662f\u5f53bitmap\u57fa\u6570\u8f83\u5927\u65f6\uff0c\u5982bitmap\u5927\u5c0f\u8d85\u8fc71g\uff0c\u7f51\u7edc/\u78c1\u76d8IO\u5904\u7406\u65f6\u95f4\u6bd4\u8f83\u957f\uff1b\u4e8c\u662f\u540e\u7aefbe\u5b9e\u4f8b\u5728scan\u6570\u636e\u540e\u5168\u90e8\u4f20\u8f93\u5230\u9876\u5c42\u8282\u70b9\u8fdb\u884c\u6c42\u4ea4\u548c\u5e76\u8fd0\u7b97\uff0c\u7ed9\u9876\u5c42\u5355\u8282\u70b9\u5e26\u6765\u538b\u529b\uff0c\u6210\u4e3a\u5904\u7406\u74f6\u9888\u3002\n+\n+\u89e3\u51b3\u601d\u8def\u662f\u5c06bitmap\u5217\u7684\u503c\u6309\u7167range\u5212\u5206\uff0c\u4e0d\u540crange\u7684\u503c\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5206\u6876\u4e2d\uff0c\u4fdd\u8bc1\u4e86\u4e0d\u540c\u5206\u6876\u7684bitmap\u503c\u662f\u6b63\u4ea4\u7684\u3002\u8fd9\u6837\uff0c\u6570\u636e\u5206\u5e03\u66f4\u5747\u5300\uff0c\u4e00\u4e2a\u67e5\u8be2\u4f1a\u626b\u63cf\u6240\u6709\u5206\u6876\uff0c\u5728\u6bcf\u4e2a\u5206\u6876\u4e2d\u5c06\u6b63\u4ea4\u7684BITMAP\u8fdb\u884c\u805a\u5408\u8ba1\u7b97\uff0c\u7136\u540e\u628a\u8ba1\u7b97\u7ed3\u679c\u4f20\u8f93\u81f3\u9876\u5c42\u8282\u70b9\u6c47\u603b\uff0c\u5982\u6b64\u4f1a\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u89e3\u51b3\u4e86\u9876\u5c42\u5355\u8282\u70b9\u8ba1\u7b97\u74f6\u9888\u95ee\u9898\u3002\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d55a57836ba5da902c6699df80e8e5d31bc02ead"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1250, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}