{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjYyMTQ0", "number": 2891, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNjoxOFrODfMHgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDoxMzo0OFrODfMTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDMwOTc4OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memtable_flush_executor.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNjoxOFrOFovyng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxNzoxM1rOFoynGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDM2Ng==", "bodyText": "Those on_xxx methods of FlushHandler should be public. FlushHandler is independent of MemTableFlushExecutor. Just because FlushHandler is a friend class of MemTableFlushExecutor, so that you can change it to private.", "url": "https://github.com/apache/incubator-doris/pull/2891#discussion_r378270366", "createdAt": "2020-02-12T14:06:18Z", "author": {"login": "morningman"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -42,7 +44,7 @@ OLAPStatus FlushHandler::wait() {\n     return _last_flush_status.load();\n }\n \n-void FlushHandler::on_flush_finished(const FlushResult& res) {\n+void FlushHandler::_on_flush_finished(const FlushResult& res) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f36797b94c3d986cf98c54bf18aa6adf5bbf91cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI4NTAyMA==", "bodyText": "It is precisely because these on_xxx() methods can only be called by MemTableFlushExecutor, so we should set them to be private, that is, they should not be exposed to users.", "url": "https://github.com/apache/incubator-doris/pull/2891#discussion_r378285020", "createdAt": "2020-02-12T14:29:29Z", "author": {"login": "lingbin"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -42,7 +44,7 @@ OLAPStatus FlushHandler::wait() {\n     return _last_flush_status.load();\n }\n \n-void FlushHandler::on_flush_finished(const FlushResult& res) {\n+void FlushHandler::_on_flush_finished(const FlushResult& res) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDM2Ng=="}, "originalCommit": {"oid": "f36797b94c3d986cf98c54bf18aa6adf5bbf91cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjU3MQ==", "bodyText": "Anyway, because this code will be refactored soon, and future FlushHandler (may be FlushToken) will only expose the submit() and wait() interfaces, so now I won't change it here.", "url": "https://github.com/apache/incubator-doris/pull/2891#discussion_r378316571", "createdAt": "2020-02-12T15:17:13Z", "author": {"login": "lingbin"}, "path": "be/src/olap/memtable_flush_executor.cpp", "diffHunk": "@@ -42,7 +44,7 @@ OLAPStatus FlushHandler::wait() {\n     return _last_flush_status.load();\n }\n \n-void FlushHandler::on_flush_finished(const FlushResult& res) {\n+void FlushHandler::_on_flush_finished(const FlushResult& res) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDM2Ng=="}, "originalCommit": {"oid": "f36797b94c3d986cf98c54bf18aa6adf5bbf91cf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDM0MDI1OnYy", "diffSide": "RIGHT", "path": "be/src/runtime/stream_load/stream_load_executor.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDoxMzo0OFrOFowEzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDoxODozMlrOFowQxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3NTAyMg==", "bodyText": "Do not change this error msg, leave it as \"too many filtered rows\". It is long history, and some user may depends on this certain msg.", "url": "https://github.com/apache/incubator-doris/pull/2891#discussion_r378275022", "createdAt": "2020-02-12T14:13:48Z", "author": {"login": "morningman"}, "path": "be/src/runtime/stream_load/stream_load_executor.cpp", "diffHunk": "@@ -61,12 +61,10 @@ Status StreamLoadExecutor::execute_plan_fragment(StreamLoadContext* ctx) {\n                 ctx->number_filtered_rows = executor->runtime_state()->num_rows_load_filtered();\n                 ctx->number_unselected_rows = executor->runtime_state()->num_rows_load_unselected();\n \n-                int64_t num_selected_rows =\n-                    ctx->number_total_rows - ctx->number_unselected_rows;\n-                if ((0.0 + ctx->number_filtered_rows) / num_selected_rows > ctx->max_filter_ratio) {\n-                    status = Status::InternalError(\"too many filtered rows\");\n-                }\n-                else if(ctx->number_loaded_rows == 0){\n+                int64_t num_selected_rows = ctx->number_total_rows - ctx->number_unselected_rows;\n+                if ((double)ctx->number_filtered_rows / num_selected_rows > ctx->max_filter_ratio) {\n+                    status = Status::InternalError(\"too many rows are filtered out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f36797b94c3d986cf98c54bf18aa6adf5bbf91cf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3ODA4NQ==", "bodyText": "Ok", "url": "https://github.com/apache/incubator-doris/pull/2891#discussion_r378278085", "createdAt": "2020-02-12T14:18:32Z", "author": {"login": "lingbin"}, "path": "be/src/runtime/stream_load/stream_load_executor.cpp", "diffHunk": "@@ -61,12 +61,10 @@ Status StreamLoadExecutor::execute_plan_fragment(StreamLoadContext* ctx) {\n                 ctx->number_filtered_rows = executor->runtime_state()->num_rows_load_filtered();\n                 ctx->number_unselected_rows = executor->runtime_state()->num_rows_load_unselected();\n \n-                int64_t num_selected_rows =\n-                    ctx->number_total_rows - ctx->number_unselected_rows;\n-                if ((0.0 + ctx->number_filtered_rows) / num_selected_rows > ctx->max_filter_ratio) {\n-                    status = Status::InternalError(\"too many filtered rows\");\n-                }\n-                else if(ctx->number_loaded_rows == 0){\n+                int64_t num_selected_rows = ctx->number_total_rows - ctx->number_unselected_rows;\n+                if ((double)ctx->number_filtered_rows / num_selected_rows > ctx->max_filter_ratio) {\n+                    status = Status::InternalError(\"too many rows are filtered out\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3NTAyMg=="}, "originalCommit": {"oid": "f36797b94c3d986cf98c54bf18aa6adf5bbf91cf"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2235, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}