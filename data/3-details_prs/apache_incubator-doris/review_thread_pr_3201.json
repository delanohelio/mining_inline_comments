{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjI1Mjkw", "number": 3201, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTozNFrODrpB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozMDo1NFrODrpVPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3NTk4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/AlterOpType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTozNFrOF8GdZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0Mzo1N1rOF8KViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDcwOA==", "bodyText": "If true means 2 operations have no conflict. which should be compatibilityMatrix.", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398564708", "createdAt": "2020-03-26T13:19:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/AlterOpType.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.alter;\n+\n+public enum AlterOpType {\n+    // rollup\n+    ADD_ROLLUP,\n+    DROP_ROLLUP,\n+    // schema change\n+    SCHEMA_CHANGE,\n+    // partition\n+    ADD_PARTITION,\n+    DROP_PARTITION,\n+    REPLACE_PARTITION,\n+    MODIFY_PARTITION,\n+    // rename\n+    RENAME,\n+    // table property\n+    MODIFY_TABLE_PROPERTY,\n+    MODIFY_TABLE_PROPERTY_SYNC, // Some operations are performed synchronously, so we distinguish them by suffix _SYNC\n+    // others operation, such as add/drop backend. currently we do not care about them\n+    ALTER_OTHER,\n+\n+    INVALID_OP;\n+\n+    // true means 2 operations have no conflict.\n+    public static Boolean[][] CONFLICT_MATRIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyODIzMg==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398628232", "createdAt": "2020-03-26T14:43:57Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/AlterOpType.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.alter;\n+\n+public enum AlterOpType {\n+    // rollup\n+    ADD_ROLLUP,\n+    DROP_ROLLUP,\n+    // schema change\n+    SCHEMA_CHANGE,\n+    // partition\n+    ADD_PARTITION,\n+    DROP_PARTITION,\n+    REPLACE_PARTITION,\n+    MODIFY_PARTITION,\n+    // rename\n+    RENAME,\n+    // table property\n+    MODIFY_TABLE_PROPERTY,\n+    MODIFY_TABLE_PROPERTY_SYNC, // Some operations are performed synchronously, so we distinguish them by suffix _SYNC\n+    // others operation, such as add/drop backend. currently we do not care about them\n+    ALTER_OTHER,\n+\n+    INVALID_OP;\n+\n+    // true means 2 operations have no conflict.\n+    public static Boolean[][] CONFLICT_MATRIX;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDcwOA=="}, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg5OTMyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/alter/AlterOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyNDo1MFrOF8Gr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0NTo1OVrOF8KbjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2ODQyNg==", "bodyText": "This comment could remove.", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398568426", "createdAt": "2020-03-26T13:24:50Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/alter/AlterOperations.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.alter;\n+\n+import org.apache.doris.analysis.AlterClause;\n+import org.apache.doris.common.DdlException;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.Sets;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/*\n+ * AlterOperations contains a set alter operations generated from a AlterStmt's alter clause.\n+ * This class is mainly used to integrate these operation types and check whether they have conflicts.\n+ */\n+public class AlterOperations {\n+    private Set<AlterOpType> currentOps = Sets.newHashSet();\n+    \n+    public AlterOperations() {\n+    }\n+\n+    public Set<AlterOpType> getCurrentOps() {\n+        return currentOps;\n+    }\n+\n+    // check the conflicts of the given list of alter clauses\n+    public void checkConflict(List<AlterClause> alterClauses) throws DdlException {\n+        for (AlterClause alterClause : alterClauses) {\n+            checkOp(alterClause.getOpType());\n+        }\n+    }\n+\n+    // some operations take up disk space. so we need to check the disk capacity before processing.\n+    // return true if we see these kind of opertions.\n+    public boolean needCheckCapacity() {\n+        for (AlterOpType currentOp : currentOps) {\n+            if (currentOp.needCheckCapacity()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean hasPartitionOp() {\n+        return currentOps.contains(AlterOpType.ADD_PARTITION) || currentOps.contains(AlterOpType.DROP_PARTITION)\n+                || currentOps.contains(AlterOpType.REPLACE_PARTITION) || currentOps.contains(AlterOpType.MODIFY_PARTITION);\n+    }\n+\n+    // MODIFY_TABLE_PROPERTY is also processed by SchemaChangeHandler\n+    public boolean hasSchemaChangeOp() {\n+        return currentOps.contains(AlterOpType.SCHEMA_CHANGE) || currentOps.contains(AlterOpType.MODIFY_TABLE_PROPERTY);\n+    }\n+\n+    public boolean hasRollupOp() {\n+        return currentOps.contains(AlterOpType.ADD_ROLLUP) || currentOps.contains(AlterOpType.DROP_ROLLUP);\n+    }\n+\n+    public boolean hasRenameOp() {\n+        return currentOps.contains(AlterOpType.RENAME);\n+    }\n+\n+    // return true if it has specified operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyOTc3Mw==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398629773", "createdAt": "2020-03-26T14:45:59Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/alter/AlterOperations.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.alter;\n+\n+import org.apache.doris.analysis.AlterClause;\n+import org.apache.doris.common.DdlException;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.Sets;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/*\n+ * AlterOperations contains a set alter operations generated from a AlterStmt's alter clause.\n+ * This class is mainly used to integrate these operation types and check whether they have conflicts.\n+ */\n+public class AlterOperations {\n+    private Set<AlterOpType> currentOps = Sets.newHashSet();\n+    \n+    public AlterOperations() {\n+    }\n+\n+    public Set<AlterOpType> getCurrentOps() {\n+        return currentOps;\n+    }\n+\n+    // check the conflicts of the given list of alter clauses\n+    public void checkConflict(List<AlterClause> alterClauses) throws DdlException {\n+        for (AlterClause alterClause : alterClauses) {\n+            checkOp(alterClause.getOpType());\n+        }\n+    }\n+\n+    // some operations take up disk space. so we need to check the disk capacity before processing.\n+    // return true if we see these kind of opertions.\n+    public boolean needCheckCapacity() {\n+        for (AlterOpType currentOp : currentOps) {\n+            if (currentOp.needCheckCapacity()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean hasPartitionOp() {\n+        return currentOps.contains(AlterOpType.ADD_PARTITION) || currentOps.contains(AlterOpType.DROP_PARTITION)\n+                || currentOps.contains(AlterOpType.REPLACE_PARTITION) || currentOps.contains(AlterOpType.MODIFY_PARTITION);\n+    }\n+\n+    // MODIFY_TABLE_PROPERTY is also processed by SchemaChangeHandler\n+    public boolean hasSchemaChangeOp() {\n+        return currentOps.contains(AlterOpType.SCHEMA_CHANGE) || currentOps.contains(AlterOpType.MODIFY_TABLE_PROPERTY);\n+    }\n+\n+    public boolean hasRollupOp() {\n+        return currentOps.contains(AlterOpType.ADD_ROLLUP) || currentOps.contains(AlterOpType.DROP_ROLLUP);\n+    }\n+\n+    public boolean hasRenameOp() {\n+        return currentOps.contains(AlterOpType.RENAME);\n+    }\n+\n+    // return true if it has specified operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2ODQyNg=="}, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDkyNTQzOnYy", "diffSide": "LEFT", "path": "fe/src/main/java/org/apache/doris/analysis/AddPartitionClause.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozMDo1NFrOF8G8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0NjozMVrOF8KdJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MjU1Ng==", "bodyText": "Why remove this code\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398572556", "createdAt": "2020-03-26T13:30:54Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/analysis/AddPartitionClause.java", "diffHunk": "@@ -46,12 +47,11 @@ public AddPartitionClause(SingleRangePartitionDesc partitionDesc,\n                               DistributionDesc distributionDesc,\n                               Map<String, String> properties,\n                               boolean isTempPartition) {\n+        super(AlterOpType.ADD_PARTITION);\n         this.partitionDesc = partitionDesc;\n         this.distributionDesc = distributionDesc;\n         this.properties = properties;\n         this.isTempPartition = isTempPartition;\n-        \n-        this.needTableStable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMDE4Mw==", "bodyText": "Add it back", "url": "https://github.com/apache/incubator-doris/pull/3201#discussion_r398630183", "createdAt": "2020-03-26T14:46:31Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/analysis/AddPartitionClause.java", "diffHunk": "@@ -46,12 +47,11 @@ public AddPartitionClause(SingleRangePartitionDesc partitionDesc,\n                               DistributionDesc distributionDesc,\n                               Map<String, String> properties,\n                               boolean isTempPartition) {\n+        super(AlterOpType.ADD_PARTITION);\n         this.partitionDesc = partitionDesc;\n         this.distributionDesc = distributionDesc;\n         this.properties = properties;\n         this.isTempPartition = isTempPartition;\n-        \n-        this.needTableStable = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MjU1Ng=="}, "originalCommit": {"oid": "57e1ff8d407811ac4abb1c97a10d216d6ba2c8c3"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1816, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}