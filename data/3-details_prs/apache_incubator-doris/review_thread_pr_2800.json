{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTM0MDc0", "number": 2800, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToxOToxMVrODZDXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyMzo0MVrODZDYRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTk2MTQwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToxOToxMVrOFfPWRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToxOToxMVrOFfPWRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // sort function rows by fisrt column asec\n          \n          \n            \n                    // sort function rows by first column asc", "url": "https://github.com/apache/incubator-doris/pull/2800#discussion_r368301637", "createdAt": "2020-01-19T15:19:11Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "diffHunk": "@@ -302,44 +304,77 @@ private void handleShowEngines() {\n         resultSet = new ShowResultSet(showStmt.getMetaData(), rowSet);\n     }\n \n-    // Handle show function\n-    private void handleShowFunction() throws AnalysisException {\n-        ShowFunctionStmt showStmt = (ShowFunctionStmt) stmt;\n-\n+    // Handle show functions\n+    private void handleShowFunctions() throws AnalysisException {\n+        ShowFunctionsStmt showStmt = (ShowFunctionsStmt) stmt;\n         Database db = ctx.getCatalog().getDb(showStmt.getDbName());\n         if (db == null) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_DB_ERROR, showStmt.getDbName());\n         }\n-        List<Function> functions = db.getFunctions();\n+        List<Function> functions = showStmt.getIsBuiltin() ? ctx.getCatalog().getBuiltinFunctions() :\n+            db.getFunctions();\n \n-        List<List<String>> rowSet = Lists.newArrayList();\n+        List<List<Comparable>> rowSet = Lists.newArrayList();\n         for (Function function : functions) {\n-            List<String> row = Lists.newArrayList();\n-            // signature\n-            row.add(function.getSignature());\n-            // return type\n-            row.add(function.getReturnType().getPrimitiveType().toString());\n-            // function type\n-            // intermediate type\n-            if (function instanceof ScalarFunction) {\n-                row.add(\"Scalar\");\n-                row.add(\"NULL\");\n-            } else {\n-                row.add(\"Aggregate\");\n-                AggregateFunction aggFunc = (AggregateFunction) function;\n-                Type intermediateType = aggFunc.getIntermediateType();\n-                if (intermediateType != null) {\n-                    row.add(intermediateType.getPrimitiveType().toString());\n-                } else {\n+            List<Comparable> row = Lists.newArrayList();\n+            if (showStmt.getIsVerbose()) {\n+                // signature\n+                row.add(function.getSignature());\n+                // return type\n+                row.add(function.getReturnType().getPrimitiveType().toString());\n+                // function type\n+                // intermediate type\n+                if (function instanceof ScalarFunction) {\n+                    row.add(\"Scalar\");\n                     row.add(\"NULL\");\n+                } else {\n+                    row.add(\"Aggregate\");\n+                    AggregateFunction aggFunc = (AggregateFunction) function;\n+                    Type intermediateType = aggFunc.getIntermediateType();\n+                    if (intermediateType != null) {\n+                        row.add(intermediateType.getPrimitiveType().toString());\n+                    } else {\n+                        row.add(\"NULL\");\n+                    }\n                 }\n+                // property\n+                row.add(function.getProperties());\n+            } else {\n+                row.add(function.functionName());\n+            }\n+\n+            // like predicate\n+            if (showStmt.getWild() == null || showStmt.like(function.functionName())) {\n+                rowSet.add(row);\n             }\n-            // property\n-            row.add(function.getProperties());\n-            rowSet.add(row);\n         }\n+\n+        // sort function rows by fisrt column asec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2605af1bf162af9af0898302b8905bd4fda552ac"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTk2MTY3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyMDoyMlrOFfPWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyMDoyMlrOFfPWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTY4MQ==", "bodyText": "I think the row built here can be implemented in Function. eg:\nfunction.getInfo(row, isVerbose);", "url": "https://github.com/apache/incubator-doris/pull/2800#discussion_r368301681", "createdAt": "2020-01-19T15:20:22Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "diffHunk": "@@ -302,44 +304,77 @@ private void handleShowEngines() {\n         resultSet = new ShowResultSet(showStmt.getMetaData(), rowSet);\n     }\n \n-    // Handle show function\n-    private void handleShowFunction() throws AnalysisException {\n-        ShowFunctionStmt showStmt = (ShowFunctionStmt) stmt;\n-\n+    // Handle show functions\n+    private void handleShowFunctions() throws AnalysisException {\n+        ShowFunctionsStmt showStmt = (ShowFunctionsStmt) stmt;\n         Database db = ctx.getCatalog().getDb(showStmt.getDbName());\n         if (db == null) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_DB_ERROR, showStmt.getDbName());\n         }\n-        List<Function> functions = db.getFunctions();\n+        List<Function> functions = showStmt.getIsBuiltin() ? ctx.getCatalog().getBuiltinFunctions() :\n+            db.getFunctions();\n \n-        List<List<String>> rowSet = Lists.newArrayList();\n+        List<List<Comparable>> rowSet = Lists.newArrayList();\n         for (Function function : functions) {\n-            List<String> row = Lists.newArrayList();\n-            // signature\n-            row.add(function.getSignature());\n-            // return type\n-            row.add(function.getReturnType().getPrimitiveType().toString());\n-            // function type\n-            // intermediate type\n-            if (function instanceof ScalarFunction) {\n-                row.add(\"Scalar\");\n-                row.add(\"NULL\");\n-            } else {\n-                row.add(\"Aggregate\");\n-                AggregateFunction aggFunc = (AggregateFunction) function;\n-                Type intermediateType = aggFunc.getIntermediateType();\n-                if (intermediateType != null) {\n-                    row.add(intermediateType.getPrimitiveType().toString());\n-                } else {\n+            List<Comparable> row = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2605af1bf162af9af0898302b8905bd4fda552ac"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTk2MzU2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/cup/sql_parser.cup", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyMzo0MVrOFfPXVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyMzo0MVrOFfPXVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTkxMQ==", "bodyText": "Add newly added keyword to keyword ::=", "url": "https://github.com/apache/incubator-doris/pull/2800#discussion_r368301911", "createdAt": "2020-01-19T15:23:41Z", "author": {"login": "morningman"}, "path": "fe/src/main/cup/sql_parser.cup", "diffHunk": "@@ -194,14 +194,14 @@ parser code {:\n \n // Total keywords of doris\n terminal String KW_ADD, KW_ADMIN, KW_AFTER, KW_AGGREGATE, KW_ALL, KW_ALTER, KW_AND, KW_ANTI, KW_AS, KW_ASC, KW_AUTHORS, \n-    KW_BACKEND, KW_BACKUP, KW_BETWEEN, KW_BEGIN, KW_BIGINT, KW_BITMAP, KW_BITMAP_UNION, KW_BOOLEAN, KW_BOTH, KW_BROKER, KW_BACKENDS, KW_BY,\n+    KW_BACKEND, KW_BACKUP, KW_BETWEEN, KW_BEGIN, KW_BIGINT, KW_BITMAP, KW_BITMAP_UNION, KW_BOOLEAN, KW_BOTH, KW_BROKER, KW_BACKENDS, KW_BY, KW_BUILTIN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2605af1bf162af9af0898302b8905bd4fda552ac"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2151, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}