{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTUwMjUz", "number": 3391, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0OTo1MFrOD2E5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0OTo1NFrOD2E5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDI5OTg2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0OTo1MFrOGLyo4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzo0NjoxMFrOGL1oTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNzE4NQ==", "bodyText": "Maybe change \u201cbeId\u201d to \u201dbackendId\u201c is better\uff0cat before you use unfinished\u201cBackendIds\u201d  and all\u201dBackendIds\u201c", "url": "https://github.com/apache/incubator-doris/pull/3391#discussion_r415017185", "createdAt": "2020-04-25T08:49:50Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "diffHunk": "@@ -138,30 +139,41 @@\n         // load task id -> fragment id -> rows count\n         private Table<TUniqueId, TUniqueId, Long> counterTbl = HashBasedTable.create();\n \n+        // load task id -> unfinished backend id list\n+        private Map<TUniqueId, List<Long>> unfinishedBackendIds = Maps.newHashMap();\n+        // load task id -> all backend id list\n+        private Map<TUniqueId, List<Long>> allBackendIds = Maps.newHashMap();\n+\n         // number of file to be loaded\n         public int fileNum = 0;\n         public long totalFileSizeB = 0;\n \n         // init the statistic of specified load task\n-        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds) {\n+        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds, List<Long> relatedBackendIds) {\n             counterTbl.rowMap().remove(loadId);\n             for (TUniqueId fragId : fragmentIds) {\n                 counterTbl.put(loadId, fragId, 0L);\n             }\n+            allBackendIds.put(loadId, relatedBackendIds);\n+            // need to get a copy of relatedBackendIds, so that when we modify the \"relatedBackendIds\" in\n+            // allBackendIds, the list in unfinishedBackendIds will not be changed.\n+            unfinishedBackendIds.put(loadId, Lists.newArrayList(relatedBackendIds));\n         }\n \n         public synchronized void removeLoad(TUniqueId loadId) {\n             counterTbl.rowMap().remove(loadId);\n+            unfinishedBackendIds.remove(loadId);\n+            allBackendIds.remove(loadId);\n         }\n \n-        public synchronized void updateLoad(TUniqueId loadId, TUniqueId fragmentId, long rows) {\n+        public synchronized void updateLoadProgress(long beId, TUniqueId loadId, TUniqueId fragmentId, long rows,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325446458e3116ab358a3902c8d6b1474efaad5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2NjE5MQ==", "bodyText": "changed", "url": "https://github.com/apache/incubator-doris/pull/3391#discussion_r415066191", "createdAt": "2020-04-25T13:46:10Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "diffHunk": "@@ -138,30 +139,41 @@\n         // load task id -> fragment id -> rows count\n         private Table<TUniqueId, TUniqueId, Long> counterTbl = HashBasedTable.create();\n \n+        // load task id -> unfinished backend id list\n+        private Map<TUniqueId, List<Long>> unfinishedBackendIds = Maps.newHashMap();\n+        // load task id -> all backend id list\n+        private Map<TUniqueId, List<Long>> allBackendIds = Maps.newHashMap();\n+\n         // number of file to be loaded\n         public int fileNum = 0;\n         public long totalFileSizeB = 0;\n \n         // init the statistic of specified load task\n-        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds) {\n+        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds, List<Long> relatedBackendIds) {\n             counterTbl.rowMap().remove(loadId);\n             for (TUniqueId fragId : fragmentIds) {\n                 counterTbl.put(loadId, fragId, 0L);\n             }\n+            allBackendIds.put(loadId, relatedBackendIds);\n+            // need to get a copy of relatedBackendIds, so that when we modify the \"relatedBackendIds\" in\n+            // allBackendIds, the list in unfinishedBackendIds will not be changed.\n+            unfinishedBackendIds.put(loadId, Lists.newArrayList(relatedBackendIds));\n         }\n \n         public synchronized void removeLoad(TUniqueId loadId) {\n             counterTbl.rowMap().remove(loadId);\n+            unfinishedBackendIds.remove(loadId);\n+            allBackendIds.remove(loadId);\n         }\n \n-        public synchronized void updateLoad(TUniqueId loadId, TUniqueId fragmentId, long rows) {\n+        public synchronized void updateLoadProgress(long beId, TUniqueId loadId, TUniqueId fragmentId, long rows,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNzE4NQ=="}, "originalCommit": {"oid": "9325446458e3116ab358a3902c8d6b1474efaad5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDI5OTk5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODo0OTo1NFrOGLyo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzo0Mzo1NVrOGL1m0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNzIwMg==", "bodyText": "can unfinishedBackendIds.get(loadId) be empty\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3391#discussion_r415017202", "createdAt": "2020-04-25T08:49:54Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "diffHunk": "@@ -138,30 +139,41 @@\n         // load task id -> fragment id -> rows count\n         private Table<TUniqueId, TUniqueId, Long> counterTbl = HashBasedTable.create();\n \n+        // load task id -> unfinished backend id list\n+        private Map<TUniqueId, List<Long>> unfinishedBackendIds = Maps.newHashMap();\n+        // load task id -> all backend id list\n+        private Map<TUniqueId, List<Long>> allBackendIds = Maps.newHashMap();\n+\n         // number of file to be loaded\n         public int fileNum = 0;\n         public long totalFileSizeB = 0;\n \n         // init the statistic of specified load task\n-        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds) {\n+        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds, List<Long> relatedBackendIds) {\n             counterTbl.rowMap().remove(loadId);\n             for (TUniqueId fragId : fragmentIds) {\n                 counterTbl.put(loadId, fragId, 0L);\n             }\n+            allBackendIds.put(loadId, relatedBackendIds);\n+            // need to get a copy of relatedBackendIds, so that when we modify the \"relatedBackendIds\" in\n+            // allBackendIds, the list in unfinishedBackendIds will not be changed.\n+            unfinishedBackendIds.put(loadId, Lists.newArrayList(relatedBackendIds));\n         }\n \n         public synchronized void removeLoad(TUniqueId loadId) {\n             counterTbl.rowMap().remove(loadId);\n+            unfinishedBackendIds.remove(loadId);\n+            allBackendIds.remove(loadId);\n         }\n \n-        public synchronized void updateLoad(TUniqueId loadId, TUniqueId fragmentId, long rows) {\n+        public synchronized void updateLoadProgress(long beId, TUniqueId loadId, TUniqueId fragmentId, long rows,\n+                boolean isDone) {\n             if (counterTbl.contains(loadId, fragmentId)) {\n                 counterTbl.put(loadId, fragmentId, rows);\n             }\n-        }\n-\n-        public synchronized void clearAllLoads() {\n-            counterTbl.clear();\n+            if (isDone && unfinishedBackendIds.containsKey(loadId)) {\n+                unfinishedBackendIds.get(loadId).remove(beId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9325446458e3116ab358a3902c8d6b1474efaad5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2NTgxMA==", "bodyText": "It won't, there is at least one BE for a load job", "url": "https://github.com/apache/incubator-doris/pull/3391#discussion_r415065810", "createdAt": "2020-04-25T13:43:55Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/load/loadv2/LoadJob.java", "diffHunk": "@@ -138,30 +139,41 @@\n         // load task id -> fragment id -> rows count\n         private Table<TUniqueId, TUniqueId, Long> counterTbl = HashBasedTable.create();\n \n+        // load task id -> unfinished backend id list\n+        private Map<TUniqueId, List<Long>> unfinishedBackendIds = Maps.newHashMap();\n+        // load task id -> all backend id list\n+        private Map<TUniqueId, List<Long>> allBackendIds = Maps.newHashMap();\n+\n         // number of file to be loaded\n         public int fileNum = 0;\n         public long totalFileSizeB = 0;\n \n         // init the statistic of specified load task\n-        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds) {\n+        public synchronized void initLoad(TUniqueId loadId, Set<TUniqueId> fragmentIds, List<Long> relatedBackendIds) {\n             counterTbl.rowMap().remove(loadId);\n             for (TUniqueId fragId : fragmentIds) {\n                 counterTbl.put(loadId, fragId, 0L);\n             }\n+            allBackendIds.put(loadId, relatedBackendIds);\n+            // need to get a copy of relatedBackendIds, so that when we modify the \"relatedBackendIds\" in\n+            // allBackendIds, the list in unfinishedBackendIds will not be changed.\n+            unfinishedBackendIds.put(loadId, Lists.newArrayList(relatedBackendIds));\n         }\n \n         public synchronized void removeLoad(TUniqueId loadId) {\n             counterTbl.rowMap().remove(loadId);\n+            unfinishedBackendIds.remove(loadId);\n+            allBackendIds.remove(loadId);\n         }\n \n-        public synchronized void updateLoad(TUniqueId loadId, TUniqueId fragmentId, long rows) {\n+        public synchronized void updateLoadProgress(long beId, TUniqueId loadId, TUniqueId fragmentId, long rows,\n+                boolean isDone) {\n             if (counterTbl.contains(loadId, fragmentId)) {\n                 counterTbl.put(loadId, fragmentId, rows);\n             }\n-        }\n-\n-        public synchronized void clearAllLoads() {\n-            counterTbl.clear();\n+            if (isDone && unfinishedBackendIds.containsKey(loadId)) {\n+                unfinishedBackendIds.get(loadId).remove(beId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNzIwMg=="}, "originalCommit": {"oid": "9325446458e3116ab358a3902c8d6b1474efaad5"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1680, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}