{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MzcyNTY2", "number": 4136, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNToyNjoyNFrOEQ5OZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMTowNlrOETO1Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUwMjQ2OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNToyNjoyNFrOG1TM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNToyNjoyNFrOG1TM1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0MjI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Status st = _generater_json_paths(jsonpath, _parsed_jsonpaths);\n          \n          \n            \n                    Status st = _generate_json_paths(jsonpath, _parsed_jsonpaths);", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458542292", "createdAt": "2020-07-22T05:26:24Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.cpp", "diffHunk": "@@ -197,30 +201,52 @@ JsonReader::~JsonReader() {\n     _close();\n }\n \n-Status JsonReader::init() {\n+Status JsonReader::init(std::string& jsonpath, std::string& json_root) {\n     // parse jsonpath\n+    if (!jsonpath.empty()) {\n+        Status st = _generater_json_paths(jsonpath, _parsed_jsonpaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUwNTA4OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNToyNzo1MFrOG1TOXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNToyNzo1MFrOG1TOXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0MjY4Ng==", "bodyText": "Why _parsed_json_root is a vector?", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458542686", "createdAt": "2020-07-22T05:27:50Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.cpp", "diffHunk": "@@ -257,26 +283,38 @@ Status JsonReader::_parse_json_doc(bool* eof) {\n         delete[] json_str;\n         return Status::DataQualityError(str_error.str());\n     }\n+    delete[] json_str;\n \n-    if (_json_doc.IsArray() && !_strip_outer_array) {\n-        delete[] json_str;\n+    // set json root\n+    if (_parsed_json_root.size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUxMTg1OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozMToyM1rOG1TScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNzoyNlrOG1UNsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0MzczMQ==", "bodyText": "We only support one json root, so we can check it here, and return error if json root more than one.", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458543731", "createdAt": "2020-07-22T05:31:23Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.cpp", "diffHunk": "@@ -197,30 +201,52 @@ JsonReader::~JsonReader() {\n     _close();\n }\n \n-Status JsonReader::init() {\n+Status JsonReader::init(std::string& jsonpath, std::string& json_root) {\n     // parse jsonpath\n+    if (!jsonpath.empty()) {\n+        Status st = _generater_json_paths(jsonpath, _parsed_jsonpaths);\n+        RETURN_IF_ERROR(st);\n+    }\n+    if (!json_root.empty()) {\n+        std::vector<JsonPath> parsed_paths;\n+        JsonFunctions::parse_json_paths(json_root, &parsed_paths);\n+        _parsed_json_root.push_back(parsed_paths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1ODg5Ng==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458558896", "createdAt": "2020-07-22T06:17:26Z", "author": {"login": "worker24h"}, "path": "be/src/exec/json_scanner.cpp", "diffHunk": "@@ -197,30 +201,52 @@ JsonReader::~JsonReader() {\n     _close();\n }\n \n-Status JsonReader::init() {\n+Status JsonReader::init(std::string& jsonpath, std::string& json_root) {\n     // parse jsonpath\n+    if (!jsonpath.empty()) {\n+        Status st = _generater_json_paths(jsonpath, _parsed_jsonpaths);\n+        RETURN_IF_ERROR(st);\n+    }\n+    if (!json_root.empty()) {\n+        std::vector<JsonPath> parsed_paths;\n+        JsonFunctions::parse_json_paths(json_root, &parsed_paths);\n+        _parsed_json_root.push_back(parsed_paths);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0MzczMQ=="}, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUyOTA0OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTozOTozMlrOG1Tctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNzo0MVrOG1UN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0NjM1OQ==", "bodyText": "Can these parameters be changed to const &?", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458546359", "createdAt": "2020-07-22T05:39:32Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -106,33 +105,31 @@ struct JsonPath;\n class JsonReader {\n public:\n     JsonReader(RuntimeState* state, ScannerCounter* counter, RuntimeProfile* profile, FileReader* file_reader,\n-            std::string& jsonpath, bool strip_outer_array);\n+            bool strip_outer_array);\n     ~JsonReader();\n \n-    Status init(); // must call before use\n+    Status init(std::string& jsonpath, std::string& json_root); // must call before use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1ODk2OQ==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458558969", "createdAt": "2020-07-22T06:17:41Z", "author": {"login": "worker24h"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -106,33 +105,31 @@ struct JsonPath;\n class JsonReader {\n public:\n     JsonReader(RuntimeState* state, ScannerCounter* counter, RuntimeProfile* profile, FileReader* file_reader,\n-            std::string& jsonpath, bool strip_outer_array);\n+            bool strip_outer_array);\n     ~JsonReader();\n \n-    Status init(); // must call before use\n+    Status init(std::string& jsonpath, std::string& json_root); // must call before use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0NjM1OQ=="}, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTUzMjgyOnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo0MToxOFrOG1TfBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo0MToxOFrOG1TfBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0Njk1MA==", "bodyText": "Remove this method", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458546950", "createdAt": "2020-07-22T05:41:18Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -106,33 +105,31 @@ struct JsonPath;\n class JsonReader {\n public:\n     JsonReader(RuntimeState* state, ScannerCounter* counter, RuntimeProfile* profile, FileReader* file_reader,\n-            std::string& jsonpath, bool strip_outer_array);\n+            bool strip_outer_array);\n     ~JsonReader();\n \n-    Status init(); // must call before use\n+    Status init(std::string& jsonpath, std::string& json_root); // must call before use\n \n     Status read(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n \n private:\n+    Status (JsonReader::*_handle_json_callback)(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n     Status _handle_simple_json(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n-    Status _handle_complex_json(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n     Status _handle_flat_array_complex_json(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n     Status _handle_nested_complex_json(Tuple* tuple, const std::vector<SlotDescriptor*>& slot_descs, MemPool* tuple_pool, bool* eof);\n \n     void _fill_slot(Tuple* tuple, SlotDescriptor* slot_desc, MemPool* mem_pool, const uint8_t* value, int32_t len);\n-    void _assemble_jmap(const std::vector<SlotDescriptor*>& slot_descs);\n+    int _assemble_jmap(const std::vector<SlotDescriptor*>& slot_descs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTU0NzM1OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo0OTowNFrOG1ToFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxODoyOVrOG1UPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0OTI3MQ==", "bodyText": "change the name of _json_root. This name is easily confused with _parsed_json_root.\nMy suggestion: _final_json_doc. And add comment to explain that this is generated from _json_doc", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458549271", "createdAt": "2020-07-22T05:49:04Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -144,9 +141,9 @@ class JsonReader {\n     RuntimeProfile::Counter* _bytes_read_counter;\n     RuntimeProfile::Counter* _read_timer;\n     std::vector<std::vector<JsonPath>> _parsed_jsonpaths;\n+    std::vector<std::vector<JsonPath>> _parsed_json_root;\n     rapidjson::Document _json_doc;\n-    //key: column name\n-    std::unordered_map<std::string, JsonDataInternal> _jmap;\n+    rapidjson::Value *_json_root;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1OTI1Mg==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r458559252", "createdAt": "2020-07-22T06:18:29Z", "author": {"login": "worker24h"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -144,9 +141,9 @@ class JsonReader {\n     RuntimeProfile::Counter* _bytes_read_counter;\n     RuntimeProfile::Counter* _read_timer;\n     std::vector<std::vector<JsonPath>> _parsed_jsonpaths;\n+    std::vector<std::vector<JsonPath>> _parsed_json_root;\n     rapidjson::Document _json_doc;\n-    //key: column name\n-    std::unordered_map<std::string, JsonDataInternal> _jmap;\n+    rapidjson::Value *_json_root;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0OTI3MQ=="}, "originalCommit": {"oid": "b3e8409a8423e9d0a86c9aa5023fbaf91ccb1057"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTY5MTcwOnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo1MzoyMVrOG4zLMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyMDo0MVrOG412fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxMTg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                rapidjson::Document _orinal_json_doc; // orinal json document object from parsed json string\n          \n          \n            \n                rapidjson::Document _origin_json_doc; // orinal json document object from parsed json string", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462211888", "createdAt": "2020-07-29T10:53:21Z", "author": {"login": "morningman"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -143,10 +140,12 @@ class JsonReader {\n     bool _strip_outer_array;\n     RuntimeProfile::Counter* _bytes_read_counter;\n     RuntimeProfile::Counter* _read_timer;\n+\n     std::vector<std::vector<JsonPath>> _parsed_jsonpaths;\n-    rapidjson::Document _json_doc;\n-    //key: column name\n-    std::unordered_map<std::string, JsonDataInternal> _jmap;\n+    std::vector<JsonPath> _parsed_json_root;\n+\n+    rapidjson::Document _orinal_json_doc; // orinal json document object from parsed json string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1NTc0Mw==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462255743", "createdAt": "2020-07-29T12:20:41Z", "author": {"login": "worker24h"}, "path": "be/src/exec/json_scanner.h", "diffHunk": "@@ -143,10 +140,12 @@ class JsonReader {\n     bool _strip_outer_array;\n     RuntimeProfile::Counter* _bytes_read_counter;\n     RuntimeProfile::Counter* _read_timer;\n+\n     std::vector<std::vector<JsonPath>> _parsed_jsonpaths;\n-    rapidjson::Document _json_doc;\n-    //key: column name\n-    std::unordered_map<std::string, JsonDataInternal> _jmap;\n+    std::vector<JsonPath> _parsed_json_root;\n+\n+    rapidjson::Document _orinal_json_doc; // orinal json document object from parsed json string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxMTg4OA=="}, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5MTA3OnYy", "diffSide": "RIGHT", "path": "be/src/http/http_common.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1NjoxN1rOG41DTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyMDo0NlrOG412nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MjYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            static const std::string HTTP_EXEC_JSONROOT  = \"json_root\";\n          \n          \n            \n            static const std::string HTTP_JSONROOT  = \"json_root\";\n          \n      \n    \n    \n  \n\nEXEC is not some kind of prfix, it is with EXEC_MEM_LIMIT.\nAlso modify HTTP_EXEC_JSONPATHS to HTTP_JSONPATHS", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462242637", "createdAt": "2020-07-29T11:56:17Z", "author": {"login": "morningman"}, "path": "be/src/http/http_common.h", "diffHunk": "@@ -37,6 +37,7 @@ static const std::string HTTP_STRICT_MODE = \"strict_mode\";\n static const std::string HTTP_TIMEZONE = \"timezone\";\n static const std::string HTTP_EXEC_MEM_LIMIT = \"exec_mem_limit\";\n static const std::string HTTP_EXEC_JSONPATHS  = \"jsonpaths\";\n+static const std::string HTTP_EXEC_JSONROOT  = \"json_root\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1NTc3NQ==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462255775", "createdAt": "2020-07-29T12:20:46Z", "author": {"login": "worker24h"}, "path": "be/src/http/http_common.h", "diffHunk": "@@ -37,6 +37,7 @@ static const std::string HTTP_STRICT_MODE = \"strict_mode\";\n static const std::string HTTP_TIMEZONE = \"timezone\";\n static const std::string HTTP_EXEC_MEM_LIMIT = \"exec_mem_limit\";\n static const std::string HTTP_EXEC_JSONPATHS  = \"jsonpaths\";\n+static const std::string HTTP_EXEC_JSONROOT  = \"json_root\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MjYzNw=="}, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5NjA0OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1NzozOVrOG41GMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyMDo0OVrOG412yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzM3OA==", "bodyText": "Import order", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462243378", "createdAt": "2020-07-29T11:57:39Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java", "diffHunk": "@@ -17,6 +17,14 @@\n \n package org.apache.doris.load.routineload;\n \n+import com.google.common.base.Joiner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1NTgxNg==", "bodyText": "ok", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462255816", "createdAt": "2020-07-29T12:20:49Z", "author": {"login": "worker24h"}, "path": "fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java", "diffHunk": "@@ -17,6 +17,14 @@\n \n package org.apache.doris.load.routineload;\n \n+import com.google.common.base.Joiner;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzM3OA=="}, "originalCommit": {"oid": "2456e8c5cf56c0d091f116f826fd0b66690d7c10"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAwOTc5OnYy", "diffSide": "RIGHT", "path": "docs/en/sql-reference/sql-statements/Data Manipulation/ROUTINE LOAD.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyOTo1N1rOG42KTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyOTo1N1rOG42KTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MDgxNA==", "bodyText": "What is the json_root default value? Please let others know", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462260814", "createdAt": "2020-07-29T12:29:57Z", "author": {"login": "imay"}, "path": "docs/en/sql-reference/sql-statements/Data Manipulation/ROUTINE LOAD.md", "diffHunk": "@@ -178,6 +178,9 @@ FROM data_source\n     8. `strip_outer_array`\n         Boolean type, true to indicate that json data starts with an array object and flattens objects in the array object, default value is false.\n \n+    9. `json_root`\n+        User specifies the JSON root node as the valid JSONPath string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93437d5353059476781eb72fda581f3bdf7a467a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAxNDI3OnYy", "diffSide": "RIGHT", "path": "be/src/exec/json_scanner.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMTowNlrOG42M8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMTowNlrOG42M8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MTQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Status JsonReader::_generate_json_paths(const std::string& jsonpath, std::vector<std::vector<JsonPath>>& vect) {\n          \n          \n            \n            Status JsonReader::_generate_json_paths(const std::string& jsonpath, std::vector<std::vector<JsonPath>>* vect) {", "url": "https://github.com/apache/incubator-doris/pull/4136#discussion_r462261490", "createdAt": "2020-07-29T12:31:06Z", "author": {"login": "imay"}, "path": "be/src/exec/json_scanner.cpp", "diffHunk": "@@ -197,30 +201,50 @@ JsonReader::~JsonReader() {\n     _close();\n }\n \n-Status JsonReader::init() {\n+Status JsonReader::init(const std::string& jsonpath, const std::string& json_root) {\n     // parse jsonpath\n+    if (!jsonpath.empty()) {\n+        Status st = _generate_json_paths(jsonpath, _parsed_jsonpaths);\n+        RETURN_IF_ERROR(st);\n+    }\n+    if (!json_root.empty()) {\n+        JsonFunctions::parse_json_paths(json_root, &_parsed_json_root);\n+    }\n+\n+    //improve performance\n+    if (_parsed_jsonpaths.empty()) { // input is a simple json-string\n+        _handle_json_callback = &JsonReader::_handle_simple_json;\n+    } else { // input is a complex json-string and a json-path\n+        if (_strip_outer_array) {\n+            _handle_json_callback = &JsonReader::_handle_flat_array_complex_json;\n+        } else {\n+            _handle_json_callback = &JsonReader::_handle_nested_complex_json;\n+        }\n+    }\n+    return Status::OK();\n+}\n+\n+Status JsonReader::_generate_json_paths(const std::string& jsonpath, std::vector<std::vector<JsonPath>>& vect) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93437d5353059476781eb72fda581f3bdf7a467a"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1210, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}