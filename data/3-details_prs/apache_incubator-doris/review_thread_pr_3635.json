{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDg0NDM3", "number": 3635, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNjo1OFrOD9yycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTowMTowOFrOD_aTEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTIxODQzOnYy", "diffSide": "RIGHT", "path": "be/src/http/action/metrics_action.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNjo1OFrOGXf69g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjozNzo1MFrOGacRIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzQzMA==", "bodyText": "Why not using rapidjson lib to generate the json object?", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427293430", "createdAt": "2020-05-19T13:16:58Z", "author": {"login": "morningman"}, "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3OTI5OA==", "bodyText": "I change it to rapidjson", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r430379298", "createdAt": "2020-05-26T12:37:50Z", "author": {"login": "chaoyli"}, "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzQzMA=="}, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTIxOTM0OnYy", "diffSide": "RIGHT", "path": "be/src/http/action/metrics_action.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoxNzoxMlrOGXf7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo0MzoxOFrOGYxXzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzU4NA==", "bodyText": "what is agent mean?", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427293584", "createdAt": "2020-05-19T13:17:12Z", "author": {"login": "morningman"}, "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";\n+            _ss << \"\\t\\t\\\"metric\\\":\\\"\" << name << \"\\\"\";\n+            // labels\n+            if (!labels.empty()) {\n+                _ss << \",\\n\";\n+                int i = 0;\n+                for (auto& label : labels.labels) {\n+                    if (i++ > 0) {\n+                        _ss << \",\\n\";\n+                    }\n+                    _ss << \"\\t\\t\\\"\" << label.name << \"\\\":\\\"\" << label.value << \"\\\"\";\n+                }\n+            }\n+            _ss << \"\\n\\t},\\n\";\n+            _ss << \"\\t\\\"unit\\\":\\\"\" << metric->unit() << \"\\\",\\n\";\n+            _ss << \"\\t\\\"value\\\":\" << metric->to_string() << \"\\n\";\n+            _ss << \"},\\n\";\n+        }\n+        break;\n+    default:\n+        break;\n+    }\n+}\n+\n void MetricsAction::handle(HttpRequest* req) {\n     const std::string& type = req->param(\"type\");\n     std::string str;\n-    if (type != \"core\") {\n-        PrometheusMetricsVisitor visitor;\n+    if (type == \"core\") {\n+        SimpleCoreMetricsVisitor visitor;\n+        _metrics->collect(&visitor);\n+        str.assign(visitor.to_string());\n+    } else if (type == \"agent\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzkxOQ==", "bodyText": "The request is comes from a agent installed outof doris_be.", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428627919", "createdAt": "2020-05-21T12:43:18Z", "author": {"login": "chaoyli"}, "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";\n+            _ss << \"\\t\\t\\\"metric\\\":\\\"\" << name << \"\\\"\";\n+            // labels\n+            if (!labels.empty()) {\n+                _ss << \",\\n\";\n+                int i = 0;\n+                for (auto& label : labels.labels) {\n+                    if (i++ > 0) {\n+                        _ss << \",\\n\";\n+                    }\n+                    _ss << \"\\t\\t\\\"\" << label.name << \"\\\":\\\"\" << label.value << \"\\\"\";\n+                }\n+            }\n+            _ss << \"\\n\\t},\\n\";\n+            _ss << \"\\t\\\"unit\\\":\\\"\" << metric->unit() << \"\\\",\\n\";\n+            _ss << \"\\t\\\"value\\\":\" << metric->to_string() << \"\\n\";\n+            _ss << \"},\\n\";\n+        }\n+        break;\n+    default:\n+        break;\n+    }\n+}\n+\n void MetricsAction::handle(HttpRequest* req) {\n     const std::string& type = req->param(\"type\");\n     std::string str;\n-    if (type != \"core\") {\n-        PrometheusMetricsVisitor visitor;\n+    if (type == \"core\") {\n+        SimpleCoreMetricsVisitor visitor;\n+        _metrics->collect(&visitor);\n+        str.assign(visitor.to_string());\n+    } else if (type == \"agent\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzU4NA=="}, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI1MjQ5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNDozMVrOGXgQGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNDozMVrOGXgQGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5ODg0MQ==", "bodyText": "Modify the comment", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427298841", "createdAt": "2020-05-19T13:24:31Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI1NDI5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNDo1N1rOGXgRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNDo1N1rOGXgRQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTEzNg==", "bodyText": "Useless", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427299136", "createdAt": "2020-05-19T13:24:57Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */\n+public class JsonMetricVisitor extends MetricVisitor {\n+    // jvm\n+    private static final String JVM_HEAP_SIZE_BYTES = \"jvm_heap_size_bytes\";\n+    private static final String JVM_NON_HEAP_SIZE_BYTES = \"jvm_non_heap_size_bytes\";\n+    private static final String JVM_YOUNG_SIZE_BYTES = \"jvm_young_size_bytes\";\n+    private static final String JVM_OLD_SIZE_BYTES = \"jvm_old_size_bytes\";\n+    private static final String JVM_DIRECT_BUFFER_POOL_SIZE_BYTES = \"jvm_direct_buffer_pool_size_bytes\";\n+    private static final String JVM_YOUNG_GC = \"jvm_young_gc\";\n+    private static final String JVM_OLD_GC = \"jvm_old_gc\";\n+    private static final String JVM_THREAD = \"jvm_thread\";\n+\n+    private static final String HELP = \"# HELP \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI1NjE5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNToyNFrOGXgSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowNToyMVrOGYyA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTQ1MA==", "bodyText": "You can use Gson lib to generate json object", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427299450", "createdAt": "2020-05-19T13:25:24Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */\n+public class JsonMetricVisitor extends MetricVisitor {\n+    // jvm\n+    private static final String JVM_HEAP_SIZE_BYTES = \"jvm_heap_size_bytes\";\n+    private static final String JVM_NON_HEAP_SIZE_BYTES = \"jvm_non_heap_size_bytes\";\n+    private static final String JVM_YOUNG_SIZE_BYTES = \"jvm_young_size_bytes\";\n+    private static final String JVM_OLD_SIZE_BYTES = \"jvm_old_size_bytes\";\n+    private static final String JVM_DIRECT_BUFFER_POOL_SIZE_BYTES = \"jvm_direct_buffer_pool_size_bytes\";\n+    private static final String JVM_YOUNG_GC = \"jvm_young_gc\";\n+    private static final String JVM_OLD_GC = \"jvm_old_gc\";\n+    private static final String JVM_THREAD = \"jvm_thread\";\n+\n+    private static final String HELP = \"# HELP \";\n+    private static final String TYPE = \"# TYPE \";\n+    private int ordinal = 0;\n+    private int metric_number = 0;\n+\n+    public JsonMetricVisitor(String prefix) {\n+        super(prefix);\n+    }\n+\n+    @Override\n+    public void setMetricNumber(int metric_number) {\n+        this.metric_number = metric_number;\n+    }\n+\n+    @Override\n+    public void visitJvm(StringBuilder sb, JvmStats jvmStats) {\n+        return;\n+    }\n+\n+    @Override\n+    public void visit(StringBuilder sb, @SuppressWarnings(\"rawtypes\") Metric metric) {\n+        if (ordinal++ == 0) {\n+            sb.append(\"[\\n\");\n+        }\n+        sb.append(\"{\\n\\t\\\"tags\\\":\\n\\t{\\n\");\n+        sb.append(\"\\t\\t\\\"metric\\\":\\\"\").append(metric.getName()).append(\"\\\"\");\n+\n+        // name\n+        @SuppressWarnings(\"unchecked\")\n+        List<MetricLabel> labels = metric.getLabels();\n+        if (!labels.isEmpty()) {\n+            sb.append(\",\\n\");\n+            int i = 0;\n+            for (MetricLabel label : labels) {\n+                if (i++ > 0) {\n+                    sb.append(\",\\n\");\n+                }\n+                sb.append(\"\\t\\t\\\"\").append(label.getKey()).append(\"\\\":\\\"\").append(label.getValue()).append(\"\\\"\");\n+            }\n+        }\n+        sb.append(\"\\n\\t},\\n\");\n+        sb.append(\"\\t\\\"unit\\\":\\\"\").append(metric.getUnit().name().toLowerCase()).append( \"\\\",\\n\");\n+\n+        // value\n+        sb.append(\"\\t\\\"value\\\":\").append(metric.getValue().toString()).append(\"\\n}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzODQzNw==", "bodyText": "Gson can convert the object to JSON. But in our MetricLabel, key and value is all defined as variable. If I use Gson to convert to JSON, the result is not what I wanted.", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428638437", "createdAt": "2020-05-21T13:05:21Z", "author": {"login": "chaoyli"}, "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */\n+public class JsonMetricVisitor extends MetricVisitor {\n+    // jvm\n+    private static final String JVM_HEAP_SIZE_BYTES = \"jvm_heap_size_bytes\";\n+    private static final String JVM_NON_HEAP_SIZE_BYTES = \"jvm_non_heap_size_bytes\";\n+    private static final String JVM_YOUNG_SIZE_BYTES = \"jvm_young_size_bytes\";\n+    private static final String JVM_OLD_SIZE_BYTES = \"jvm_old_size_bytes\";\n+    private static final String JVM_DIRECT_BUFFER_POOL_SIZE_BYTES = \"jvm_direct_buffer_pool_size_bytes\";\n+    private static final String JVM_YOUNG_GC = \"jvm_young_gc\";\n+    private static final String JVM_OLD_GC = \"jvm_old_gc\";\n+    private static final String JVM_THREAD = \"jvm_thread\";\n+\n+    private static final String HELP = \"# HELP \";\n+    private static final String TYPE = \"# TYPE \";\n+    private int ordinal = 0;\n+    private int metric_number = 0;\n+\n+    public JsonMetricVisitor(String prefix) {\n+        super(prefix);\n+    }\n+\n+    @Override\n+    public void setMetricNumber(int metric_number) {\n+        this.metric_number = metric_number;\n+    }\n+\n+    @Override\n+    public void visitJvm(StringBuilder sb, JvmStats jvmStats) {\n+        return;\n+    }\n+\n+    @Override\n+    public void visit(StringBuilder sb, @SuppressWarnings(\"rawtypes\") Metric metric) {\n+        if (ordinal++ == 0) {\n+            sb.append(\"[\\n\");\n+        }\n+        sb.append(\"{\\n\\t\\\"tags\\\":\\n\\t{\\n\");\n+        sb.append(\"\\t\\t\\\"metric\\\":\\\"\").append(metric.getName()).append(\"\\\"\");\n+\n+        // name\n+        @SuppressWarnings(\"unchecked\")\n+        List<MetricLabel> labels = metric.getLabels();\n+        if (!labels.isEmpty()) {\n+            sb.append(\",\\n\");\n+            int i = 0;\n+            for (MetricLabel label : labels) {\n+                if (i++ > 0) {\n+                    sb.append(\",\\n\");\n+                }\n+                sb.append(\"\\t\\t\\\"\").append(label.getKey()).append(\"\\\":\\\"\").append(label.getValue()).append(\"\\\"\");\n+            }\n+        }\n+        sb.append(\"\\n\\t},\\n\");\n+        sb.append(\"\\t\\\"unit\\\":\\\"\").append(metric.getUnit().name().toLowerCase()).append( \"\\\",\\n\");\n+\n+        // value\n+        sb.append(\"\\t\\\"value\\\":\").append(metric.getValue().toString()).append(\"\\n}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTQ1MA=="}, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI2MTc3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNjo0NlrOGXgWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNjo0NlrOGXgWKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int metric_number = 0;\n          \n          \n            \n                private int metricNumber = 0;", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300392", "createdAt": "2020-05-19T13:26:46Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "diffHunk": "@@ -56,6 +56,9 @@\n \n     public static final String MAX_TABLET_COMPACTION_SCORE = \"max_tablet_compaction_score\";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI2MjMwOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNjo1NVrOGXgWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNjo1NVrOGXgWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMetricNumber(int metric_number) {\n          \n          \n            \n                public void setMetricNumber(int metricNumber) {", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300494", "createdAt": "2020-05-19T13:26:55Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "diffHunk": "@@ -71,6 +74,11 @@ public SimpleCoreMetricVisitor(String prefix) {\n         super(prefix);\n     }\n \n+    @Override\n+    public void setMetricNumber(int metric_number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI2Mjg3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzowMlrOGXgW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzowMlrOGXgW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int metric_number = 0;\n          \n          \n            \n                private int metricNumber = 0;", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300578", "createdAt": "2020-05-19T13:27:02Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "diffHunk": "@@ -52,10 +52,18 @@\n     private static final String HELP = \"# HELP \";\n     private static final String TYPE = \"# TYPE \";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI2MzY5OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzoxMlrOGXgXXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzoxMlrOGXgXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMetricNumber(int metric_number) {\n          \n          \n            \n                public void setMetricNumber(int metricNumber) {", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300701", "createdAt": "2020-05-19T13:27:12Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "diffHunk": "@@ -52,10 +52,18 @@\n     private static final String HELP = \"# HELP \";\n     private static final String TYPE = \"# TYPE \";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;\n+\n     public PrometheusMetricVisitor(String prefix) {\n         super(prefix);\n     }\n \n+    @Override\n+    public void setMetricNumber(int metric_number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI2NjEyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzo0MVrOGXgYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyNzo0MVrOGXgYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMTA2OA==", "bodyText": "What is the COUNTER_LOAD_FINISHED means? If it means that load is done successfully,\nthis counter should be added after commitAndPublishTransaction()", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427301068", "createdAt": "2020-05-19T13:27:41Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -683,6 +684,7 @@ private void handleInsertStmt() throws Exception {\n                 return;\n             }\n \n+            MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTI3MTkyOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyODo1OFrOGXgcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyODo1OFrOGXgcgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMjAxNg==", "bodyText": "after commitAndPublishTransaction()?", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427302016", "createdAt": "2020-05-19T13:28:58Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -757,6 +759,7 @@ private boolean loadTxnCommitImpl(TLoadTxnCommitRequest request) throws UserExce\n             throw new UserException(\"unknown database, database=\" + dbName);\n         }\n \n+        MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07baab5334f6998f687e42bd4ec0140d7eb455ea"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTY1NDExOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMjozNFrOGYy5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMjozNFrOGYy5mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1Mjk1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {\n          \n          \n            \n                public static synchronized Multimap<Long, Long> getTabletIdsByType(TTaskType type) {", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428652955", "createdAt": "2020-05-21T13:32:34Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "diffHunk": "@@ -215,6 +217,20 @@ public static synchronized int getTaskNum() {\n         return taskNum;\n     }\n \n+    public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a6b2fdd24357cd0e5b4c3ee7dd329964bd602"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTY1NTU4OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMjo1N1rOGYy6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozMjo1N1rOGYy6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MzE5Ng==", "bodyText": "why call clear here?", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428653196", "createdAt": "2020-05-21T13:32:57Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "diffHunk": "@@ -215,6 +217,20 @@ public static synchronized int getTaskNum() {\n         return taskNum;\n     }\n \n+    public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {\n+        Multimap<Long, Long> tabletIds = HashMultimap.create();\n+        tabletIds.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a6b2fdd24357cd0e5b4c3ee7dd329964bd602"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODE3NzQ1OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNTowMTowOFrOGaD2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzoyMjozMlrOGaNe1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3OTIwMg==", "bodyText": "public static LongCounterMetric COUNTER_TXN_REJECT;\npublic static LongCounterMetric COUNTER_TXN_BEGIN;\npublic static LongCounterMetric COUNTER_TXN_FAILED;\npublic static LongCounterMetric COUNTER_TXN_SUCCESS;\n\nWe already have 4 metrics to monitor the transaction, is it necessary to add COUNTER_LOAD_FINISHED and COUNTER_LOAD_ADD?", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r429979202", "createdAt": "2020-05-25T15:01:08Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -757,10 +759,15 @@ private boolean loadTxnCommitImpl(TLoadTxnCommitRequest request) throws UserExce\n             throw new UserException(\"unknown database, database=\" + dbName);\n         }\n \n-        return Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n-                db, request.getTxnId(),\n-                TabletCommitInfo.fromThrift(request.getCommitInfos()),\n-                5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        boolean ret = Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n+                        db, request.getTxnId(),\n+                        TabletCommitInfo.fromThrift(request.getCommitInfos()),\n+                        5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        if (ret) {\n+            // if commit and publish is success, load can be regarded as success\n+            MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "360af326b339a74478d1c522f39e6788ad4a363c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNzA0NQ==", "bodyText": "I thins COUNTER_TXN_SUCCESS will use for another logic like schema change/rollup/clone in the future. It may be confused.", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r430137045", "createdAt": "2020-05-26T03:22:32Z", "author": {"login": "chaoyli"}, "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -757,10 +759,15 @@ private boolean loadTxnCommitImpl(TLoadTxnCommitRequest request) throws UserExce\n             throw new UserException(\"unknown database, database=\" + dbName);\n         }\n \n-        return Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n-                db, request.getTxnId(),\n-                TabletCommitInfo.fromThrift(request.getCommitInfos()),\n-                5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        boolean ret = Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n+                        db, request.getTxnId(),\n+                        TabletCommitInfo.fromThrift(request.getCommitInfos()),\n+                        5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        if (ret) {\n+            // if commit and publish is success, load can be regarded as success\n+            MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3OTIwMg=="}, "originalCommit": {"oid": "360af326b339a74478d1c522f39e6788ad4a363c"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1581, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}