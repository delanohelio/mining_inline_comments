{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTk0MTQx", "number": 4705, "title": "[CREATE TABLE]Support new syntax CREATE TABLE LIKE to clone an existe\u2026", "bodyText": "Proposed changes\nSupport new synatx CREATE TABLE [IF NOT EXISTS] [db_name].table_name AS [db_name2].table_name2; to create a new table from existed table with same table schema.Ref ISSUE: #4355\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n[] Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I have updated the document\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at dev@doris.apache.org by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-10-08T00:57:40Z", "url": "https://github.com/apache/incubator-doris/pull/4705", "merged": true, "mergeCommit": {"oid": "28f4e922a75c37904f267c075ff82f048cb5a853"}, "closed": true, "closedAt": "2020-10-10T13:16:54Z", "author": {"login": "WingsGo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQWxBmgH2gAyNDk5NTk0MTQxOjdkMmEyZmEwYmQyOTU2ZTdiZGJlNzJiZmMyNGIzYmNhNDM4MDJiNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQssXFAFqTUwNTMxOTAwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d2a2fa0bd2956e7bdbe72bfc24b3bca43802b75", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/7d2a2fa0bd2956e7bdbe72bfc24b3bca43802b75", "committedDate": "2020-10-08T00:51:29Z", "message": "[CREATE TABLE]Support new syntax CREATE TABLE LIKE to clone an existed table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/4dd98d3515b79c62381a659d89ba94514f688511", "committedDate": "2020-10-08T01:23:18Z", "message": "add docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODI1NjIz", "url": "https://github.com/apache/incubator-doris/pull/4705#pullrequestreview-504825623", "createdAt": "2020-10-08T14:10:55Z", "commit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxMDo1NVrOHegi3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxNTo0MlrOHegxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MjU0Mw==", "bodyText": "is opt_external:isExternal necessary?", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501752543", "createdAt": "2020-10-08T14:10:55Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/cup/sql_parser.cup", "diffHunk": "@@ -1128,6 +1128,10 @@ create_stmt ::=\n         RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, indexes, engineName, keys, partition,\n         distribution, tblProperties, extProperties, tableComment, index);\n     :}\n+    | KW_CREATE opt_external:isExternal KW_TABLE opt_if_not_exists:ifNotExists table_name:name KW_LIKE table_name:existed_name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjE5NA==", "bodyText": "line 102 to line 118 is better moved to createTableLike() in Catalog.java.\nBecause analysis phase is usually used to analyze grammar, not semantics.", "url": "https://github.com/apache/incubator-doris/pull/4705#discussion_r501756194", "createdAt": "2020-10-08T14:15:42Z", "author": {"login": "morningman"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/CreateTableLikeStmt.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.FeNameFormat;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.util.SqlParserUtils;\n+import org.apache.doris.mysql.privilege.PrivPredicate;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+\n+/**\n+ * @author wangcong\n+ * @version 1.0\n+ * @date 2020/10/7 10:32 \u4e0a\u5348\n+ */\n+public class CreateTableLikeStmt extends DdlStmt {\n+    private static final Logger LOG = LogManager.getLogger(CreateTableLikeStmt.class);\n+\n+    private CreateTableStmt parsedCreateTableStmt;\n+    private final boolean isExternal;\n+    private final boolean ifNotExists;\n+    private final TableName tableName;\n+    private final TableName existedTableName;\n+\n+    public CreateTableLikeStmt(boolean ifNotExists, boolean isExternal, TableName tableName, TableName existedTableName) {\n+        this.ifNotExists = ifNotExists;\n+        this.isExternal = isExternal;\n+        this.tableName = tableName;\n+        this.existedTableName = existedTableName;\n+    }\n+\n+    public boolean isSetIfNotExists() {\n+        return ifNotExists;\n+    }\n+\n+    public boolean isExternal() {\n+        return isExternal;\n+    }\n+\n+    public String getDbName() {\n+        return tableName.getDb();\n+    }\n+\n+    public String getTableName() {\n+        return tableName.getTbl();\n+    }\n+\n+    public String getExistedDbName() {\n+        return existedTableName.getDb();\n+    }\n+\n+    public String getExistedTableName() {\n+        return existedTableName.getTbl();\n+    }\n+\n+    public CreateTableStmt getParsedCreateTableStmt() {\n+        return parsedCreateTableStmt;\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws UserException {\n+        super.analyze(analyzer);\n+        existedTableName.analyze(analyzer);\n+        ConnectContext ctx = ConnectContext.get();\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, existedTableName.getDb(),\n+                existedTableName.getTbl(), PrivPredicate.SELECT)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"SELECT\");\n+        }\n+\n+        tableName.analyze(analyzer);\n+        FeNameFormat.checkTableName(getTableName());\n+        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ctx, tableName.getDb(),\n+                tableName.getTbl(), PrivPredicate.CREATE)) {\n+            ErrorReport.reportAnalysisException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CREATE\");\n+        }\n+\n+        Database db = Catalog.getCurrentCatalog().getDb(getExistedDbName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd98d3515b79c62381a659d89ba94514f688511"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af53fb47089a96175f9523cc09fc9938f778b395", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/af53fb47089a96175f9523cc09fc9938f778b395", "committedDate": "2020-10-08T15:26:15Z", "message": "fix by review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1deab7942dd3bc65bb60d14f9a8cff338bf231b5", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/1deab7942dd3bc65bb60d14f9a8cff338bf231b5", "committedDate": "2020-10-08T16:37:18Z", "message": "fix unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e4524d4a0d097ec65d27715b8490254f5fc61dc", "author": {"user": null}, "url": "https://github.com/apache/incubator-doris/commit/6e4524d4a0d097ec65d27715b8490254f5fc61dc", "committedDate": "2020-10-08T16:53:28Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzE5MDA5", "url": "https://github.com/apache/incubator-doris/pull/4705#pullrequestreview-505319009", "createdAt": "2020-10-09T02:24:18Z", "commit": {"oid": "6e4524d4a0d097ec65d27715b8490254f5fc61dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4733, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}