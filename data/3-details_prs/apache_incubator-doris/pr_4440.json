{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTY4MDEz", "number": 4440, "title": "[refactor] Optimize threads usage mode in BE", "bodyText": "Proposed changes\nBE can not graceful exit because some threads are running in endless\nloop. This patch do the following optimization:\n\nUse the well encapsulated Thread and ThreadPool instead of std::thread\nand std::vectorstd::thread\nUse CountDownLatch in thread's loop condition to avoid endless loop\nIntroduce a new class Daemon for daemon works, like tcmalloc_gc,\nmemory_maintenance and calculate_metrics\nDecouple statistics type TaskWorkerPool and StorageEngine notification\nby submit tasks to TaskWorkerPool's queue\nReorder objects' stop and deconstruct in main(), i.e. stop network\nservices at first, then internal services\nUse libevent in pthreads mode, by calling evthread_use_pthreads(),\nthen EvHttpServer can exit gracefully in multi-threads\nCall brpc::Server's Stop() and ClearServices() explicitly\n\nTypes of changes\nWhat types of changes does your code introduce to Doris?\nPut an x in the boxes that apply\n\n[] Bugfix (non-breaking change which fixes an issue)\n[] New feature (non-breaking change which adds functionality)\n[] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n[] Documentation Update (if none of the other choices apply)\n Code refactor (Modify the code structure, format the code, etc...)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n[] I have create an issue on (Fix #ISSUE), and have described the bug/feature there in detail\n Compiling and unit tests pass locally with my changes\n[] I have added tests that prove my fix is effective or that my feature works\n[] If this change need a document change, I have updated the document\n[] Any dependent changes have been merged\n\nFurther comments\nnone", "createdAt": "2020-08-24T14:39:55Z", "url": "https://github.com/apache/incubator-doris/pull/4440", "merged": true, "mergeCommit": {"oid": "b780df697a2137556a789cb7e9fd722d5f132660"}, "closed": true, "closedAt": "2020-09-06T12:19:15Z", "author": {"login": "acelyc111"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDRlOLgFqTQ3NzU4Mjc2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE5o81gFqTQ4MDY5NjI4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTgyNzYy", "url": "https://github.com/apache/incubator-doris/pull/4440#pullrequestreview-477582762", "createdAt": "2020-08-28T09:28:03Z", "commit": {"oid": "c5fd736c11ceaf6e0f59b7ab55b9724bfed9d827"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "250e9b30b769dc81650b3b186e22ace6c2311950", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/250e9b30b769dc81650b3b186e22ace6c2311950", "committedDate": "2020-08-28T14:11:28Z", "message": "[refactor] Optimize threads usage mode in BE\n\nBE can not graceful exit because some threads are running in endless\nloop. This patch do the following optimization:\n- Use the well encapsulated Thread and ThreadPool instead of std::thread\n  and std::vector<std::thread>\n- Use CountDownLatch in thread's loop condition to avoid endless loop\n- Introduce a new class Daemon for daemon works, like tcmalloc_gc,\n  memory_maintenance and calculate_metrics\n- Decouple statistics type TaskWorkerPool and StorageEngine notification\n  by submit tasks to TaskWorkerPool's queue\n- Reorder objects' stop and deconstruct in main(), i.e. stop network\n  services at first, then internal services\n- Use libevent in pthreads mode, by calling evthread_use_pthreads(),\n  then EvHttpServer can exit gracefully in multi-threads\n- Call brpc::Server's Stop() and ClearServices() explicitly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/9413ab409579cd8c20f5c1831d242b31ecb3e153", "committedDate": "2020-08-28T14:11:28Z", "message": "remove comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5fd736c11ceaf6e0f59b7ab55b9724bfed9d827", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/c5fd736c11ceaf6e0f59b7ab55b9724bfed9d827", "committedDate": "2020-08-24T15:12:40Z", "message": "remove comments"}, "afterCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/9413ab409579cd8c20f5c1831d242b31ecb3e153", "committedDate": "2020-08-28T14:11:28Z", "message": "remove comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTE4MTA3", "url": "https://github.com/apache/incubator-doris/pull/4440#pullrequestreview-480518107", "createdAt": "2020-09-02T06:29:20Z", "commit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyOToyMFrOHLdy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozOTo0MFrOHLeP7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDU1NA==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481784554", "createdAt": "2020-09-02T06:29:20Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -263,27 +238,24 @@ void* StorageEngine::_garbage_sweeper_thread_callback(void* arg) {\n             // do nothing. continue next loop.\n         }\n     }\n-\n-    return nullptr;\n }\n \n-void* StorageEngine::_disk_stat_monitor_thread_callback(void* arg) {\n+void StorageEngine::_disk_stat_monitor_thread_callback() {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n-    while (!_stop_bg_worker) {\n+\n+    int32_t interval = config::disk_stat_monitor_interval;\n+    do {\n         _start_disk_stat_monitor();\n \n-        int32_t interval = config::disk_stat_monitor_interval;\n+        interval = config::disk_stat_monitor_interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDc2Mw==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481784763", "createdAt": "2020-09-02T06:29:39Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -330,108 +303,92 @@ void* StorageEngine::_cumulative_compaction_thread_callback(void* arg, DataDir*\n                 _perform_cumulative_compaction(data_dir);\n             }\n         }\n-        int32_t interval = config::cumulative_compaction_check_interval_seconds;\n+\n+        interval = config::cumulative_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NTE2Nw==", "bodyText": "redundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481785167", "createdAt": "2020-09-02T06:30:14Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -330,108 +303,92 @@ void* StorageEngine::_cumulative_compaction_thread_callback(void* arg, DataDir*\n                 _perform_cumulative_compaction(data_dir);\n             }\n         }\n-        int32_t interval = config::cumulative_compaction_check_interval_seconds;\n+\n+        interval = config::cumulative_compaction_check_interval_seconds;\n         if (interval <= 0) {\n             LOG(WARNING) << \"cumulative compaction check interval config is illegal:\" << interval\n                         << \"will be forced set to one\";\n             interval = 1;\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-void* StorageEngine::_unused_rowset_monitor_thread_callback(void* arg) {\n+void StorageEngine::_unused_rowset_monitor_thread_callback() {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::unused_rowset_monitor_interval;\n+    do {\n         start_delete_unused_rowset();\n \n-        int32_t interval = config::unused_rowset_monitor_interval;\n+        interval = config::unused_rowset_monitor_interval;\n         if (interval <= 0) {\n             LOG(WARNING) << \"unused_rowset_monitor_interval config is illegal: \" << interval\n                          << \", force set to 1\";\n             interval = 1;\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-\n-\n-void* StorageEngine::_path_gc_thread_callback(void* arg) {\n+void StorageEngine::_path_gc_thread_callback(DataDir* data_dir) {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n \n     LOG(INFO) << \"try to start path gc thread!\";\n-\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::path_gc_check_interval_second;\n+    do {\n         LOG(INFO) << \"try to perform path gc by tablet!\";\n-        ((DataDir*)arg)->perform_path_gc_by_tablet();\n+        data_dir->perform_path_gc_by_tablet();\n         \n         LOG(INFO) << \"try to perform path gc by rowsetid!\";\n-        // perform path gc by rowset id\n-        ((DataDir*)arg)->perform_path_gc_by_rowsetid();\n+        data_dir->perform_path_gc_by_rowsetid();\n \n-        int32_t interval = config::path_gc_check_interval_second;\n+        interval = config::path_gc_check_interval_second;\n         if (interval <= 0) {\n             LOG(WARNING) << \"path gc thread check interval config is illegal:\" << interval\n                          << \"will be forced set to half hour\";\n             interval = 1800; // 0.5 hour\n         }\n-        SLEEP_IN_BG_WORKER(interval);\n-    }\n-\n-    return nullptr;\n+    } while (!_stop_background_threads_latch.wait_for(MonoDelta::FromSeconds(interval)));\n }\n \n-void* StorageEngine::_path_scan_thread_callback(void* arg) {\n+void StorageEngine::_path_scan_thread_callback(DataDir* data_dir) {\n #ifdef GOOGLE_PROFILER\n     ProfilerRegisterThread();\n #endif\n \n-    LOG(INFO) << \"try to start path scan thread!\";\n-\n-    while (!_stop_bg_worker) {\n+    int32_t interval = config::path_scan_interval_second;\n+    do {\n         LOG(INFO) << \"try to perform path scan!\";\n-        ((DataDir*)arg)->perform_path_scan();\n+        data_dir->perform_path_scan();\n \n         int32_t interval = config::path_scan_interval_second;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 393}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MTk4MA==", "bodyText": "abundant assignment", "url": "https://github.com/apache/incubator-doris/pull/4440#discussion_r481791980", "createdAt": "2020-09-02T06:39:40Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -208,20 +186,17 @@ void* StorageEngine::_base_compaction_thread_callback(void* arg, DataDir* data_d\n             }\n         }\n \n-        int32_t interval = config::base_compaction_check_interval_seconds;\n+        interval = config::base_compaction_check_interval_seconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9413ab409579cd8c20f5c1831d242b31ecb3e153"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f878abbf846b9359086b6a4315ce102087cad32", "author": {"user": {"login": "acelyc111", "name": "Yingchun Lai"}}, "url": "https://github.com/apache/incubator-doris/commit/2f878abbf846b9359086b6a4315ce102087cad32", "committedDate": "2020-09-02T06:51:56Z", "message": "fix redundant assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTM5NjY3", "url": "https://github.com/apache/incubator-doris/pull/4440#pullrequestreview-480539667", "createdAt": "2020-09-02T07:08:42Z", "commit": {"oid": "2f878abbf846b9359086b6a4315ce102087cad32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjk2Mjg2", "url": "https://github.com/apache/incubator-doris/pull/4440#pullrequestreview-480696286", "createdAt": "2020-09-02T10:42:15Z", "commit": {"oid": "2f878abbf846b9359086b6a4315ce102087cad32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1902, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}