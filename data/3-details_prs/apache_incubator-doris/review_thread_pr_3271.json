{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTExMzg2", "number": 3271, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNVrODvdChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNVrODvdChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg1NDQ0OnYy", "diffSide": "RIGHT", "path": "be/src/olap/rowset/rowset.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNVrOGB4m6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzo0OTo0MlrOGCeCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIyNQ==", "bodyText": "Better to use function in util/time.h.", "url": "https://github.com/apache/incubator-doris/pull/3271#discussion_r404629225", "createdAt": "2020-04-07T08:27:25Z", "author": {"login": "imay"}, "path": "be/src/olap/rowset/rowset.cpp", "diffHunk": "@@ -65,6 +67,9 @@ void Rowset::make_visible(Version version, VersionHash version_hash) {\n     _rowset_meta->set_version(version);\n     _rowset_meta->set_version_hash(version_hash);\n     _rowset_meta->set_rowset_state(VISIBLE);\n+    // update create time to the visible time,\n+    // it's used to skip recently published version during compaction\n+    _rowset_meta->set_creation_time(time(nullptr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e1cb062bf9126a4988d9556038199ae88b2d4d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3ODQ0Mw==", "bodyText": "You mean UnixMillis() / 1000? Any reason for that, it seems more verbose than time(nullptr).", "url": "https://github.com/apache/incubator-doris/pull/3271#discussion_r404778443", "createdAt": "2020-04-07T12:44:15Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/rowset.cpp", "diffHunk": "@@ -65,6 +67,9 @@ void Rowset::make_visible(Version version, VersionHash version_hash) {\n     _rowset_meta->set_version(version);\n     _rowset_meta->set_version_hash(version_hash);\n     _rowset_meta->set_rowset_state(VISIBLE);\n+    // update create time to the visible time,\n+    // it's used to skip recently published version during compaction\n+    _rowset_meta->set_creation_time(time(nullptr));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIyNQ=="}, "originalCommit": {"oid": "64e1cb062bf9126a4988d9556038199ae88b2d4d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4NTk5NA==", "bodyText": "Just to unify. I think it will be better to use functions in this file to get all kinds of current time.\nActually, it is OK for this case to get a monotonic time other than wall time, which will still work when system time rollback.", "url": "https://github.com/apache/incubator-doris/pull/3271#discussion_r404785994", "createdAt": "2020-04-07T12:56:07Z", "author": {"login": "imay"}, "path": "be/src/olap/rowset/rowset.cpp", "diffHunk": "@@ -65,6 +67,9 @@ void Rowset::make_visible(Version version, VersionHash version_hash) {\n     _rowset_meta->set_version(version);\n     _rowset_meta->set_version_hash(version_hash);\n     _rowset_meta->set_rowset_state(VISIBLE);\n+    // update create time to the visible time,\n+    // it's used to skip recently published version during compaction\n+    _rowset_meta->set_creation_time(time(nullptr));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIyNQ=="}, "originalCommit": {"oid": "64e1cb062bf9126a4988d9556038199ae88b2d4d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0MTA3MA==", "bodyText": "OK, I'll use functions in util/time.h instead. However I don't think monotonic time is appropriate here for two reasons\n\nPrevious rowsets use unix timestamp as creation_time, switch to monotonic time will break other parts of code that uses that field\nMonotonic time may go backward after system reboot, which is not suitable for persistence", "url": "https://github.com/apache/incubator-doris/pull/3271#discussion_r405241070", "createdAt": "2020-04-08T03:43:47Z", "author": {"login": "gaodayue"}, "path": "be/src/olap/rowset/rowset.cpp", "diffHunk": "@@ -65,6 +67,9 @@ void Rowset::make_visible(Version version, VersionHash version_hash) {\n     _rowset_meta->set_version(version);\n     _rowset_meta->set_version_hash(version_hash);\n     _rowset_meta->set_rowset_state(VISIBLE);\n+    // update create time to the visible time,\n+    // it's used to skip recently published version during compaction\n+    _rowset_meta->set_creation_time(time(nullptr));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIyNQ=="}, "originalCommit": {"oid": "64e1cb062bf9126a4988d9556038199ae88b2d4d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0MjQ2NQ==", "bodyText": "Yes, you're right. Last night when I remembered that create time will be saved, then I realize that the monotonic time is not suitable.", "url": "https://github.com/apache/incubator-doris/pull/3271#discussion_r405242465", "createdAt": "2020-04-08T03:49:42Z", "author": {"login": "imay"}, "path": "be/src/olap/rowset/rowset.cpp", "diffHunk": "@@ -65,6 +67,9 @@ void Rowset::make_visible(Version version, VersionHash version_hash) {\n     _rowset_meta->set_version(version);\n     _rowset_meta->set_version_hash(version_hash);\n     _rowset_meta->set_rowset_state(VISIBLE);\n+    // update create time to the visible time,\n+    // it's used to skip recently published version during compaction\n+    _rowset_meta->set_creation_time(time(nullptr));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIyNQ=="}, "originalCommit": {"oid": "64e1cb062bf9126a4988d9556038199ae88b2d4d"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1870, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}