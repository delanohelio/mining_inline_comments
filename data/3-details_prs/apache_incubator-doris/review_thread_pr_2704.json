{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzI4NTcy", "number": 2704, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1ODowN1rODXLWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTowNzo1MlrODXLhVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjI5NzI0OnYy", "diffSide": "RIGHT", "path": "be/src/agent/task_worker_pool.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1ODowN1rOFcWglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwODoxNzoxOVrOFck17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3MzIzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                const TTaskType::type task_type = task.task_type;\n          \n          \n            \n                const TTaskType::type& task_type = task.task_type;", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365273238", "createdAt": "2020-01-10T14:58:07Z", "author": {"login": "morningman"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwODA3OQ==", "bodyText": "TTaskType::type is an enum, i.e. it is an \"integer\", so no need to use an reference.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365508079", "createdAt": "2020-01-11T08:17:19Z", "author": {"login": "lingbin"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3MzIzOA=="}, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjMwMzE3OnYy", "diffSide": "LEFT", "path": "be/src/agent/task_worker_pool.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTowMDoxMFrOFcWkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwOToyMjo0NVrOFck_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NDIzMQ==", "bodyText": "we need this queue size log for tracing problems", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365274231", "createdAt": "2020-01-10T15:00:10Z", "author": {"login": "morningman"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;\n     int64_t signature = task.signature;\n-    string user(\"\");\n-    if (task.__isset.resource_info) {\n-        user = task.resource_info.user;\n-    }\n-    bool ret = _record_task_info(task_type, signature, user);\n-    if (ret == true) {\n-        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n-        // set the task receive time\n+\n+    std::string type_str;\n+    EnumToString(TTaskType, task_type, type_str);\n+\n+    if (_check_task_info(task_type, signature)) {\n+        // Set the receiving time of task so that we can determine whether it is timed out later\n         (const_cast<TAgentTaskRequest&>(task)).__set_recv_time(time(nullptr));\n+        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n         _tasks.push_back(task);\n         _worker_thread_condition_lock.notify();\n-    }\n-}\n-\n-bool TaskWorkerPool::_record_task_info(\n-        const TTaskType::type task_type,\n-        int64_t signature,\n-        const string& user) {\n-    bool ret = true;\n-    lock_guard<Mutex> task_signatures_lock(_s_task_signatures_lock);\n-\n-    set<int64_t>& signature_set = _s_task_signatures[task_type];\n-    std::string task_name;\n-    EnumToString(TTaskType, task_type, task_name);\n-    if (signature_set.count(signature) > 0) {\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", already exist\"\n-                  << \". queue size: \" << signature_set.size();\n-        ret = false;\n+        LOG(INFO) << \"success to submit task. type=\" << type_str\n+                  << \", signature=\" << signature;\n     } else {\n-        signature_set.insert(signature);\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", has been inserted\"\n-                  << \", queue size: \" << signature_set.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMDQ4Ng==", "bodyText": "For each type of task, the queue_size and _tasks.size() are related, we can print the size there(together with log in submit_task()).\nBecause submit_task() is the entry point of the TaskWorkerPool, it is more appropriate to print there.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365510486", "createdAt": "2020-01-11T09:22:45Z", "author": {"login": "lingbin"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;\n     int64_t signature = task.signature;\n-    string user(\"\");\n-    if (task.__isset.resource_info) {\n-        user = task.resource_info.user;\n-    }\n-    bool ret = _record_task_info(task_type, signature, user);\n-    if (ret == true) {\n-        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n-        // set the task receive time\n+\n+    std::string type_str;\n+    EnumToString(TTaskType, task_type, type_str);\n+\n+    if (_check_task_info(task_type, signature)) {\n+        // Set the receiving time of task so that we can determine whether it is timed out later\n         (const_cast<TAgentTaskRequest&>(task)).__set_recv_time(time(nullptr));\n+        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n         _tasks.push_back(task);\n         _worker_thread_condition_lock.notify();\n-    }\n-}\n-\n-bool TaskWorkerPool::_record_task_info(\n-        const TTaskType::type task_type,\n-        int64_t signature,\n-        const string& user) {\n-    bool ret = true;\n-    lock_guard<Mutex> task_signatures_lock(_s_task_signatures_lock);\n-\n-    set<int64_t>& signature_set = _s_task_signatures[task_type];\n-    std::string task_name;\n-    EnumToString(TTaskType, task_type, task_name);\n-    if (signature_set.count(signature) > 0) {\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", already exist\"\n-                  << \". queue size: \" << signature_set.size();\n-        ret = false;\n+        LOG(INFO) << \"success to submit task. type=\" << type_str\n+                  << \", signature=\" << signature;\n     } else {\n-        signature_set.insert(signature);\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", has been inserted\"\n-                  << \", queue size: \" << signature_set.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NDIzMQ=="}, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjMwNjcwOnYy", "diffSide": "RIGHT", "path": "be/src/agent/task_worker_pool.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTowMToxOFrOFcWmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwOTowMzo0MFrOFck8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NDc2Mg==", "bodyText": "I think this log should be at frontend of _worker_thread_condition_lock.notify();, to make the log time ordered.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365274762", "createdAt": "2020-01-10T15:01:18Z", "author": {"login": "morningman"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;\n     int64_t signature = task.signature;\n-    string user(\"\");\n-    if (task.__isset.resource_info) {\n-        user = task.resource_info.user;\n-    }\n-    bool ret = _record_task_info(task_type, signature, user);\n-    if (ret == true) {\n-        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n-        // set the task receive time\n+\n+    std::string type_str;\n+    EnumToString(TTaskType, task_type, type_str);\n+\n+    if (_check_task_info(task_type, signature)) {\n+        // Set the receiving time of task so that we can determine whether it is timed out later\n         (const_cast<TAgentTaskRequest&>(task)).__set_recv_time(time(nullptr));\n+        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n         _tasks.push_back(task);\n         _worker_thread_condition_lock.notify();\n-    }\n-}\n-\n-bool TaskWorkerPool::_record_task_info(\n-        const TTaskType::type task_type,\n-        int64_t signature,\n-        const string& user) {\n-    bool ret = true;\n-    lock_guard<Mutex> task_signatures_lock(_s_task_signatures_lock);\n-\n-    set<int64_t>& signature_set = _s_task_signatures[task_type];\n-    std::string task_name;\n-    EnumToString(TTaskType, task_type, task_name);\n-    if (signature_set.count(signature) > 0) {\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", already exist\"\n-                  << \". queue size: \" << signature_set.size();\n-        ret = false;\n+        LOG(INFO) << \"success to submit task. type=\" << type_str", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwOTc2MQ==", "bodyText": "Actually, it will not out of order because it is in a lock. But you remind me that we should not print logs in the lock here.\nShould be modified to:\n{\n    lock_gurad ();\n    xxx.notify ()\n}\nLOG (...);\n\nAs for the order problem, we can print one log at the beginning of the function, which can help us to check the order when tracing problems.\nIn addition, we can print the total number of current queued tasks here too.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365509761", "createdAt": "2020-01-11T09:03:40Z", "author": {"login": "lingbin"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -211,84 +190,55 @@ void TaskWorkerPool::start() {\n }\n \n void TaskWorkerPool::submit_task(const TAgentTaskRequest& task) {\n-    // Submit task to dequeue\n-    TTaskType::type task_type = task.task_type;\n+    const TTaskType::type task_type = task.task_type;\n     int64_t signature = task.signature;\n-    string user(\"\");\n-    if (task.__isset.resource_info) {\n-        user = task.resource_info.user;\n-    }\n-    bool ret = _record_task_info(task_type, signature, user);\n-    if (ret == true) {\n-        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n-        // set the task receive time\n+\n+    std::string type_str;\n+    EnumToString(TTaskType, task_type, type_str);\n+\n+    if (_check_task_info(task_type, signature)) {\n+        // Set the receiving time of task so that we can determine whether it is timed out later\n         (const_cast<TAgentTaskRequest&>(task)).__set_recv_time(time(nullptr));\n+        lock_guard<Mutex> worker_thread_lock(_worker_thread_lock);\n         _tasks.push_back(task);\n         _worker_thread_condition_lock.notify();\n-    }\n-}\n-\n-bool TaskWorkerPool::_record_task_info(\n-        const TTaskType::type task_type,\n-        int64_t signature,\n-        const string& user) {\n-    bool ret = true;\n-    lock_guard<Mutex> task_signatures_lock(_s_task_signatures_lock);\n-\n-    set<int64_t>& signature_set = _s_task_signatures[task_type];\n-    std::string task_name;\n-    EnumToString(TTaskType, task_type, task_name);\n-    if (signature_set.count(signature) > 0) {\n-        LOG(INFO) << \"type: \" << task_name\n-                  << \", signature: \" << signature << \", already exist\"\n-                  << \". queue size: \" << signature_set.size();\n-        ret = false;\n+        LOG(INFO) << \"success to submit task. type=\" << type_str", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NDc2Mg=="}, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjMxMDc0OnYy", "diffSide": "RIGHT", "path": "be/src/agent/task_worker_pool.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTowMjo0M1rOFcWpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwODoyODoyOVrOFck3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NTQyNA==", "bodyText": "change it to LOG(WARNNING)", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365275424", "createdAt": "2020-01-10T15:02:43Z", "author": {"login": "morningman"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -310,20 +260,20 @@ void TaskWorkerPool::_spawn_callback_worker_thread(CALLBACK_FUNCTION callback_fu\n }\n \n void TaskWorkerPool::_finish_task(const TFinishTaskRequest& finish_task_request) {\n-    // Return result to fe\n+    // Return result to FE\n     TMasterResult result;\n-    int32_t try_time = 0;\n+    uint32_t try_time = 0;\n \n     while (try_time < TASK_FINISH_MAX_RETRY) {\n         DorisMetrics::finish_task_requests_total.increment(1);\n         AgentStatus client_status = _master_client->finish_task(finish_task_request, &result);\n \n         if (client_status == DORIS_SUCCESS) {\n-            LOG(INFO) << \"finish task success. result:\" <<  result.status.status_code;\n+            LOG(INFO) << \"finish task success.\";\n             break;\n         } else {\n             DorisMetrics::finish_task_requests_failed.increment(1);\n-            OLAP_LOG_WARNING(\"finish task failed.result: %d\", result.status.status_code);\n+            OLAP_LOG_WARNING(\"finish task failed. result: %d\", result.status.status_code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwODQ5OQ==", "bodyText": "Done.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365508499", "createdAt": "2020-01-11T08:28:29Z", "author": {"login": "lingbin"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -310,20 +260,20 @@ void TaskWorkerPool::_spawn_callback_worker_thread(CALLBACK_FUNCTION callback_fu\n }\n \n void TaskWorkerPool::_finish_task(const TFinishTaskRequest& finish_task_request) {\n-    // Return result to fe\n+    // Return result to FE\n     TMasterResult result;\n-    int32_t try_time = 0;\n+    uint32_t try_time = 0;\n \n     while (try_time < TASK_FINISH_MAX_RETRY) {\n         DorisMetrics::finish_task_requests_total.increment(1);\n         AgentStatus client_status = _master_client->finish_task(finish_task_request, &result);\n \n         if (client_status == DORIS_SUCCESS) {\n-            LOG(INFO) << \"finish task success. result:\" <<  result.status.status_code;\n+            LOG(INFO) << \"finish task success.\";\n             break;\n         } else {\n             DorisMetrics::finish_task_requests_failed.increment(1);\n-            OLAP_LOG_WARNING(\"finish task failed.result: %d\", result.status.status_code);\n+            OLAP_LOG_WARNING(\"finish task failed. result: %d\", result.status.status_code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NTQyNA=="}, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjMyNTk4OnYy", "diffSide": "RIGHT", "path": "be/src/agent/task_worker_pool.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTowNzo1MlrOFcWy1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwODozMzo0OFrOFck4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NzkxMQ==", "bodyText": "better to print res here, and also put the res in the following Status::RuntimeError()", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365277911", "createdAt": "2020-01-10T15:07:52Z", "author": {"login": "morningman"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -826,46 +714,41 @@ void* TaskWorkerPool::_publish_version_worker_thread_callback(void* arg_this) {\n                 break;\n             } else {\n                 OLAP_LOG_WARNING(\"publish version error, retry. \"\n-                                 \"[transaction_id=%ld, error_tablet_size=%d]\",\n+                                 \"[transaction_id=%ld, error_tablets_size=%d]\",\n                                  publish_version_req.transaction_id, error_tablet_ids.size());\n-                retry_time += 1;\n-                sleep(1);\n+                ++retry_time;\n+                SleepForMs(1000);\n             }\n         }\n \n         TFinishTaskRequest finish_task_request;\n         if (res != OLAP_SUCCESS) {\n-            // if publish failed, return failed, fe will ignore this error and \n-            // check error tablet ids and fe will also republish this task\n-            status_code = TStatusCode::RUNTIME_ERROR;\n+            DorisMetrics::publish_task_failed_total.increment(1);\n+            // if publish failed, return failed, FE will ignore this error and\n+            // check error tablet ids and FE will also republish this task\n             LOG(WARNING) << \"publish version failed. signature:\" << agent_task_req.signature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 475}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwODY4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/incubator-doris/pull/2704#discussion_r365508682", "createdAt": "2020-01-11T08:33:48Z", "author": {"login": "lingbin"}, "path": "be/src/agent/task_worker_pool.cpp", "diffHunk": "@@ -826,46 +714,41 @@ void* TaskWorkerPool::_publish_version_worker_thread_callback(void* arg_this) {\n                 break;\n             } else {\n                 OLAP_LOG_WARNING(\"publish version error, retry. \"\n-                                 \"[transaction_id=%ld, error_tablet_size=%d]\",\n+                                 \"[transaction_id=%ld, error_tablets_size=%d]\",\n                                  publish_version_req.transaction_id, error_tablet_ids.size());\n-                retry_time += 1;\n-                sleep(1);\n+                ++retry_time;\n+                SleepForMs(1000);\n             }\n         }\n \n         TFinishTaskRequest finish_task_request;\n         if (res != OLAP_SUCCESS) {\n-            // if publish failed, return failed, fe will ignore this error and \n-            // check error tablet ids and fe will also republish this task\n-            status_code = TStatusCode::RUNTIME_ERROR;\n+            DorisMetrics::publish_task_failed_total.increment(1);\n+            // if publish failed, return failed, FE will ignore this error and\n+            // check error tablet ids and FE will also republish this task\n             LOG(WARNING) << \"publish version failed. signature:\" << agent_task_req.signature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NzkxMQ=="}, "originalCommit": {"oid": "5822c69eacb6a3a21cbd9765592af5ea112c57e9"}, "originalPosition": 475}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2304, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}