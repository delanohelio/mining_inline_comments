{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNzE0MTI3", "number": 2833, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyNzoxNlrODc7W5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyNzoxNlrODc7W5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjU5MjM3OnYy", "diffSide": "RIGHT", "path": "be/src/olap/schema.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyNzoxNlrOFlPE9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1OTowOVrOFlRi3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4ODY2MQ==", "bodyText": "if _col_ids is what you mean in comment, why not just using int32 instead of ColumnId ?", "url": "https://github.com/apache/incubator-doris/pull/2833#discussion_r374588661", "createdAt": "2020-02-04T10:27:16Z", "author": {"login": "morningman"}, "path": "be/src/olap/schema.h", "diffHunk": "@@ -120,39 +119,36 @@ class Schema {\n     bool is_null(const char* row, int index) const {\n         return *reinterpret_cast<const bool*>(row + _col_offsets[index]);\n     }\n-\n     void set_is_null(void* row, uint32_t cid, bool is_null) const {\n         *reinterpret_cast<bool*>((char*)row + _col_offsets[cid]) = is_null;\n     }\n \n-    size_t schema_size() const {\n-        return _schema_size;\n-    }\n-\n     size_t num_columns() const { return _cols.size(); }\n     size_t num_column_ids() const { return _col_ids.size(); }\n     const std::vector<ColumnId>& column_ids() const { return _col_ids; }\n+\n private:\n-    // all valid ColumnIds in this schema\n+    void _init(const std::vector<TabletColumn>& cols,\n+               const std::vector<ColumnId>& col_ids,\n+               size_t num_key_columns);\n+    void _init(const std::vector<const Field*>& cols,\n+               const std::vector<ColumnId>& col_ids,\n+               size_t num_key_columns);\n+\n+    void _copy_from(const Schema& other);\n+\n+    // NOTE: The ColumnId here represents the sequential index number (starting from 0) of\n+    // a column in current row, not the unique id-identifier of each column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6352373c39615da2315d4167285865080b10701a"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTA4NA==", "bodyText": "It seems that the type alias ColumnId really means ColumnIdx in our code\uff0cso It was left there unmodified.", "url": "https://github.com/apache/incubator-doris/pull/2833#discussion_r374629084", "createdAt": "2020-02-04T11:59:09Z", "author": {"login": "lingbin"}, "path": "be/src/olap/schema.h", "diffHunk": "@@ -120,39 +119,36 @@ class Schema {\n     bool is_null(const char* row, int index) const {\n         return *reinterpret_cast<const bool*>(row + _col_offsets[index]);\n     }\n-\n     void set_is_null(void* row, uint32_t cid, bool is_null) const {\n         *reinterpret_cast<bool*>((char*)row + _col_offsets[cid]) = is_null;\n     }\n \n-    size_t schema_size() const {\n-        return _schema_size;\n-    }\n-\n     size_t num_columns() const { return _cols.size(); }\n     size_t num_column_ids() const { return _col_ids.size(); }\n     const std::vector<ColumnId>& column_ids() const { return _col_ids; }\n+\n private:\n-    // all valid ColumnIds in this schema\n+    void _init(const std::vector<TabletColumn>& cols,\n+               const std::vector<ColumnId>& col_ids,\n+               size_t num_key_columns);\n+    void _init(const std::vector<const Field*>& cols,\n+               const std::vector<ColumnId>& col_ids,\n+               size_t num_key_columns);\n+\n+    void _copy_from(const Schema& other);\n+\n+    // NOTE: The ColumnId here represents the sequential index number (starting from 0) of\n+    // a column in current row, not the unique id-identifier of each column", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4ODY2MQ=="}, "originalCommit": {"oid": "6352373c39615da2315d4167285865080b10701a"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2189, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}