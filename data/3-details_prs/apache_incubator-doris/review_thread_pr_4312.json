{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1Mzg5ODk2", "number": 4312, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0Njo0NlrOEWzMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Mzo1MlrOEXRYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQyOTIzOnYy", "diffSide": "RIGHT", "path": "be/src/common/config.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0Njo0N1rOG-PQqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0Njo0N1rOG-PQqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNDkyMQ==", "bodyText": "better called it disable_auto_compaction\na switch usually corresponds to on and off", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467914921", "createdAt": "2020-08-10T13:46:47Z", "author": {"login": "morningman"}, "path": "be/src/common/config.h", "diffHunk": "@@ -256,6 +256,9 @@ namespace config {\n     CONF_Bool(disable_storage_page_cache, \"false\");\n \n     // be policy\n+    // whether open automatic compaction task\n+    CONF_Bool(compaction_automatic_switch, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQzNjgyOnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/http-actions/compaction-action.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0ODozMlrOG-PVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo0ODozMlrOG-PVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNjA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"msg\": \"compaction task is successfully trigged.\"\n          \n          \n            \n                \"msg\": \"compaction task is successfully triggered.\"", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467916068", "createdAt": "2020-08-10T13:48:32Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/http-actions/compaction-action.md", "diffHunk": "@@ -95,5 +95,68 @@ curl -X GET http://192.168.10.24:8040/api/compaction/show?tablet_id=10015\\&schem\n \n ## \u624b\u52a8\u89e6\u53d1 Compaction\n \n-(TODO)\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\\&compact_type=cumulative\n+```\n+\n+\u5f53\u524d\u4ec5\u80fd\u6267\u884c\u4e00\u4e2a\u624b\u52a8compaction\u4efb\u52a1\uff0c\u5176\u4e2dcompact_type\u53d6\u503c\u4e3abase\u6216cumulative\n+\n+\u82e5 tablet \u4e0d\u5b58\u5728\uff0c\u8fd4\u56de JSON \u683c\u5f0f\u7684\u9519\u8bef\uff1a\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"Tablet not found\"\n+}\n+```\n \n+\u82e5 compaction \u6267\u884c\u4efb\u52a1\u89e6\u53d1\u5931\u8d25\u65f6\uff0c\u8fd4\u56de JSON \u683c\u5f0f\u7684\u9519\u8bef\uff1a\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"fail to execute compaction, error = -2000\"\n+}\n+```\n+\n+\u82e5 compaction \u6267\u884c\u89e6\u53d1\u6210\u529f\u65f6\uff0c\u5219\u8fd4\u56de JSON \u683c\u5f0f\u7684\u7ed3\u679c:\n+\n+```\n+{\n+    \"status\": \"Success\",\n+    \"msg\": \"compaction task is successfully trigged.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQ0Nzg3OnYy", "diffSide": "RIGHT", "path": "docs/zh-CN/administrator-guide/http-actions/compaction-action.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo1MTowOVrOG-Pb6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo1MTowOVrOG-Pb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNzgwMw==", "bodyText": "Missing tablet_id and schema_hash?", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467917803", "createdAt": "2020-08-10T13:51:09Z", "author": {"login": "morningman"}, "path": "docs/zh-CN/administrator-guide/http-actions/compaction-action.md", "diffHunk": "@@ -95,5 +95,68 @@ curl -X GET http://192.168.10.24:8040/api/compaction/show?tablet_id=10015\\&schem\n \n ## \u624b\u52a8\u89e6\u53d1 Compaction\n \n-(TODO)\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\\&compact_type=cumulative\n+```\n+\n+\u5f53\u524d\u4ec5\u80fd\u6267\u884c\u4e00\u4e2a\u624b\u52a8compaction\u4efb\u52a1\uff0c\u5176\u4e2dcompact_type\u53d6\u503c\u4e3abase\u6216cumulative\n+\n+\u82e5 tablet \u4e0d\u5b58\u5728\uff0c\u8fd4\u56de JSON \u683c\u5f0f\u7684\u9519\u8bef\uff1a\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"Tablet not found\"\n+}\n+```\n \n+\u82e5 compaction \u6267\u884c\u4efb\u52a1\u89e6\u53d1\u5931\u8d25\u65f6\uff0c\u8fd4\u56de JSON \u683c\u5f0f\u7684\u9519\u8bef\uff1a\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"fail to execute compaction, error = -2000\"\n+}\n+```\n+\n+\u82e5 compaction \u6267\u884c\u89e6\u53d1\u6210\u529f\u65f6\uff0c\u5219\u8fd4\u56de JSON \u683c\u5f0f\u7684\u7ed3\u679c:\n+\n+```\n+{\n+    \"status\": \"Success\",\n+    \"msg\": \"compaction task is successfully trigged.\"\n+}\n+```\n+\n+\u7ed3\u679c\u8bf4\u660e\uff1a\n+\n+* status\uff1a\u89e6\u53d1\u4efb\u52a1\u72b6\u6001\uff0c\u5f53\u6210\u529f\u89e6\u53d1\u65f6\u4e3aSuccess\uff1b\u5f53\u56e0\u67d0\u4e9b\u539f\u56e0\uff08\u6bd4\u5982\uff0c\u6ca1\u6709\u83b7\u53d6\u5230\u5408\u9002\u7684\u7248\u672c\uff09\u65f6\uff0c\u8fd4\u56deFail\u3002\n+* msg\uff1a\u7ed9\u51fa\u5177\u4f53\u7684\u6210\u529f\u6216\u5931\u8d25\u7684\u4fe1\u606f\u3002\n+### \u793a\u4f8b\n+\n+```\n+curl -X GET http://192.168.10.24:8040/api/compaction/run?tablet_id=10015\\&schema_hash=1294206575\\&compact_type=cumulative\n+```\n+\n+## \u624b\u52a8 Compaction \u6267\u884c\u72b6\u6001\n+\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run_status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQ2MDY2OnYy", "diffSide": "RIGHT", "path": "be/src/olap/olap_server.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo1NDowN1rOG-Pjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzo1NDowN1rOG-Pjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxOTc2Mw==", "bodyText": "This config compaction_automatic_switch can be modified at runtime.\nSo I suggest to use this config to disable the compaction thread from running. But the thread will be created here, just not doing anything.", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467919763", "createdAt": "2020-08-10T13:54:07Z", "author": {"login": "morningman"}, "path": "be/src/olap/olap_server.cpp", "diffHunk": "@@ -91,35 +92,38 @@ Status StorageEngine::start_bg_threads() {\n     // calc the max concurrency of compaction tasks\n     int32_t max_compaction_concurrency = config::max_compaction_concurrency;\n     if (max_compaction_concurrency < 0\n-        || max_compaction_concurrency > base_compaction_num_threads + cumulative_compaction_num_threads) {\n-        max_compaction_concurrency = base_compaction_num_threads + cumulative_compaction_num_threads;\n+        || max_compaction_concurrency > base_compaction_num_threads + cumulative_compaction_num_threads + 1) {\n+        // reserve 1 thread for manual execution\n+        max_compaction_concurrency = base_compaction_num_threads + cumulative_compaction_num_threads + 1;\n     }\n     Compaction::init(max_compaction_concurrency);\n \n-    _base_compaction_threads.reserve(base_compaction_num_threads);\n-    for (uint32_t i = 0; i < base_compaction_num_threads; ++i) {\n-        _base_compaction_threads.emplace_back(\n-            [this, data_dir_num, data_dirs, i] {\n-                _base_compaction_thread_callback(nullptr, data_dirs[i % data_dir_num]);\n-            });\n-    }\n-    for (auto& thread : _base_compaction_threads) {\n-        thread.detach();\n-    }\n-    LOG(INFO) << \"base compaction threads started. number: \" << base_compaction_num_threads;\n-\n-    _cumulative_compaction_threads.reserve(cumulative_compaction_num_threads);\n-    for (uint32_t i = 0; i < cumulative_compaction_num_threads; ++i) {\n-        _cumulative_compaction_threads.emplace_back(\n-            [this, data_dir_num, data_dirs, i] {\n-                _cumulative_compaction_thread_callback(nullptr, data_dirs[i % data_dir_num]);\n-            });\n-    }\n-    for (auto& thread : _cumulative_compaction_threads) {\n-        thread.detach();\n+    // check whether automatic switch is on\n+    if (config::compaction_automatic_switch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzQ5ODk0OnYy", "diffSide": "RIGHT", "path": "be/src/http/action/compaction_action.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDowMzoxMFrOG-P7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDowMzoxMFrOG-P7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkyNTg0OA==", "bodyText": "trigged -> triggered", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467925848", "createdAt": "2020-08-10T14:03:10Z", "author": {"login": "morningman"}, "path": "be/src/http/action/compaction_action.cpp", "diffHunk": "@@ -67,6 +72,127 @@ Status CompactionAction::_handle_show_compaction(HttpRequest* req, std::string*\n     return Status::OK();\n }\n \n+Status CompactionAction::_handle_run_compaction(HttpRequest *req, std::string* json_result) {\n+\n+    std::string req_tablet_id = req->param(TABLET_ID_KEY);\n+    std::string req_schema_hash = req->param(TABLET_SCHEMA_HASH_KEY);\n+    std::string compaction_type = req->param(PARAM_COMPACTION_TYPE);\n+\n+    // 1. param check\n+    // check req_tablet_id and req_schema_hash is not empty\n+    if (req_tablet_id == \"\" && req_schema_hash == \"\") {\n+        return Status::NotSupported(\"The overall compaction status is not supported yet\");\n+    }\n+\n+    // check compaction_type is not empty and equals base or cumulative\n+    if (compaction_type == \"\" && !(compaction_type == PARAM_COMPACTION_BASE || compaction_type == PARAM_COMPACTION_CUMULATIVE)) {\n+        return Status::NotSupported(\"The compaction type is not supported\");\n+    }\n+\n+    // convert req_tablet_id amd req_schema_hash to int\n+    uint64_t tablet_id = 0;\n+    uint32_t schema_hash = 0;\n+    try {\n+        tablet_id = std::stoull(req_tablet_id);\n+        schema_hash = std::stoul(req_schema_hash);\n+    } catch (const std::exception& e) {\n+        LOG(WARNING) << \"invalid argument.tablet_id:\" << req_tablet_id\n+                     << \", schema_hash:\" << req_schema_hash;\n+        return Status::InternalError(strings::Substitute(\"convert failed, $0\", e.what()));\n+    }\n+\n+    // 2. fetch the tablet by tablet_id and schema_hash\n+    TabletSharedPtr tablet =\n+            StorageEngine::instance()->tablet_manager()->get_tablet(tablet_id, schema_hash);\n+\n+    if (tablet == nullptr) {\n+        LOG(WARNING) << \"invalid argument.tablet_id:\" << req_tablet_id\n+                     << \", schema_hash:\" << req_schema_hash;\n+        return Status::InternalError(\n+                strings::Substitute(\"fail to get $0, $1\", req_tablet_id, req_schema_hash));\n+    }\n+\n+    // 3. execute compaction task\n+    std::packaged_task<OLAPStatus()> task([this, tablet, compaction_type]() { \n+            return _execute_compaction_callback(tablet, compaction_type);\n+    });\n+    std::future<OLAPStatus> future_obj = task.get_future();\n+\n+    {\n+        // 3.1 check is there compaction running\n+        std::lock_guard<std::mutex> lock(_compaction_running_mutex);\n+        if (_is_compaction_running) {\n+            return Status::TooManyTasks(\"Manual compaction task is running\");\n+        } else {\n+            // 3.2 execute the compaction task and set compaction task running \n+            _is_compaction_running = true;\n+            std::thread(std::move(task)).detach();\n+        }\n+    }\n+\n+    // 4. wait for result for 2 seconds by async\n+    std::future_status status = future_obj.wait_for(std::chrono::seconds(2));\n+    if (status == std::future_status::ready) {\n+        // fetch execute result\n+        OLAPStatus olap_status = future_obj.get();\n+        if (olap_status != OLAP_SUCCESS) {\n+            return Status::InternalError(\n+                    strings::Substitute(\"fail to execute compaction, error = $0\", olap_status));\n+        }\n+    } else {\n+        LOG(INFO) << \"Manual compaction task is timeout for waiting \" << (status == std::future_status::timeout);\n+    }\n+   \n+    LOG(INFO) << \"Manual compaction task is successfully trigged\";\n+    *json_result = \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"compaction task is successfully trigged.\\\"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzkzMjc1OnYy", "diffSide": "RIGHT", "path": "be/src/http/action/compaction_action.h", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTozNzowN1rOG-UGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowOTo0NFrOG-vKVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk5NDMxMA==", "bodyText": "Is an atomic<bool> OK?", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r467994310", "createdAt": "2020-08-10T15:37:07Z", "author": {"login": "acelyc111"}, "path": "be/src/http/action/compaction_action.h", "diffHunk": "@@ -41,8 +52,25 @@ class CompactionAction : public HttpHandler {\n private:\n     Status _handle_show_compaction(HttpRequest *req, std::string* json_result);\n \n+    /// execute compaction request to run compaction task\n+    /// param compact_type in req to distinguish the task type, base or cumulative\n+    Status _handle_run_compaction(HttpRequest *req, std::string* json_result);\n+\n+    /// thread callback function for the tablet to do compaction\n+    OLAPStatus _execute_compaction_callback(TabletSharedPtr tablet, const std::string& compaction_type);\n+\n+    /// fetch compaction running status\n+    Status _handle_run_status_compaction(HttpRequest* req, std::string* json_result);\n+\n private:\n     CompactionActionType _type;\n+\n+    /// running check mutex\n+    static std::mutex _compaction_running_mutex;\n+    /// whether there is manual compaction running\n+    static bool _is_compaction_running;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyNDgwNA==", "bodyText": "already use mutex", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468024804", "createdAt": "2020-08-10T16:20:29Z", "author": {"login": "ZhangYu0123"}, "path": "be/src/http/action/compaction_action.h", "diffHunk": "@@ -41,8 +52,25 @@ class CompactionAction : public HttpHandler {\n private:\n     Status _handle_show_compaction(HttpRequest *req, std::string* json_result);\n \n+    /// execute compaction request to run compaction task\n+    /// param compact_type in req to distinguish the task type, base or cumulative\n+    Status _handle_run_compaction(HttpRequest *req, std::string* json_result);\n+\n+    /// thread callback function for the tablet to do compaction\n+    OLAPStatus _execute_compaction_callback(TabletSharedPtr tablet, const std::string& compaction_type);\n+\n+    /// fetch compaction running status\n+    Status _handle_run_status_compaction(HttpRequest* req, std::string* json_result);\n+\n private:\n     CompactionActionType _type;\n+\n+    /// running check mutex\n+    static std::mutex _compaction_running_mutex;\n+    /// whether there is manual compaction running\n+    static bool _is_compaction_running;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk5NDMxMA=="}, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3NjU2NA==", "bodyText": "I mean, mutex is not needed, you can use atomic instead, I found _compaction_running_mutex  is only aim to protect _is_compaction_running", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468276564", "createdAt": "2020-08-11T01:35:24Z", "author": {"login": "acelyc111"}, "path": "be/src/http/action/compaction_action.h", "diffHunk": "@@ -41,8 +52,25 @@ class CompactionAction : public HttpHandler {\n private:\n     Status _handle_show_compaction(HttpRequest *req, std::string* json_result);\n \n+    /// execute compaction request to run compaction task\n+    /// param compact_type in req to distinguish the task type, base or cumulative\n+    Status _handle_run_compaction(HttpRequest *req, std::string* json_result);\n+\n+    /// thread callback function for the tablet to do compaction\n+    OLAPStatus _execute_compaction_callback(TabletSharedPtr tablet, const std::string& compaction_type);\n+\n+    /// fetch compaction running status\n+    Status _handle_run_status_compaction(HttpRequest* req, std::string* json_result);\n+\n private:\n     CompactionActionType _type;\n+\n+    /// running check mutex\n+    static std::mutex _compaction_running_mutex;\n+    /// whether there is manual compaction running\n+    static bool _is_compaction_running;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk5NDMxMA=="}, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNzU4OA==", "bodyText": "Only use atomic can not cover this scenes, becouse atomic do not have test and set operation.", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468437588", "createdAt": "2020-08-11T09:09:44Z", "author": {"login": "ZhangYu0123"}, "path": "be/src/http/action/compaction_action.h", "diffHunk": "@@ -41,8 +52,25 @@ class CompactionAction : public HttpHandler {\n private:\n     Status _handle_show_compaction(HttpRequest *req, std::string* json_result);\n \n+    /// execute compaction request to run compaction task\n+    /// param compact_type in req to distinguish the task type, base or cumulative\n+    Status _handle_run_compaction(HttpRequest *req, std::string* json_result);\n+\n+    /// thread callback function for the tablet to do compaction\n+    OLAPStatus _execute_compaction_callback(TabletSharedPtr tablet, const std::string& compaction_type);\n+\n+    /// fetch compaction running status\n+    Status _handle_run_status_compaction(HttpRequest* req, std::string* json_result);\n+\n private:\n     CompactionActionType _type;\n+\n+    /// running check mutex\n+    static std::mutex _compaction_running_mutex;\n+    /// whether there is manual compaction running\n+    static bool _is_compaction_running;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk5NDMxMA=="}, "originalCommit": {"oid": "03e4c8bd9df679e7ce2157470eb9def9b9573dcb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTc0OTY3OnYy", "diffSide": "RIGHT", "path": "be/src/http/action/compaction_action.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMTozMjo1MFrOG-lSrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMTozMjo1MFrOG-lSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3NTg4Nw==", "bodyText": "You can use macro RETURN_IF_ERROR to simplify code.", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468275887", "createdAt": "2020-08-11T01:32:50Z", "author": {"login": "acelyc111"}, "path": "be/src/http/action/compaction_action.cpp", "diffHunk": "@@ -30,33 +31,52 @@\n #include \"gutil/strings/substitute.h\"\n #include \"olap/olap_define.h\"\n #include \"olap/storage_engine.h\"\n-#include \"olap/tablet.h\"\n+#include \"olap/base_compaction.h\"\n+#include \"olap/cumulative_compaction.h\"\n #include \"util/json_util.h\"\n \n namespace doris {\n \n const static std::string HEADER_JSON = \"application/json\";\n \n-// for viewing the compaction status\n-Status CompactionAction::_handle_show_compaction(HttpRequest* req, std::string* json_result) {\n+bool CompactionAction::_is_compaction_running = false;\n+std::mutex CompactionAction::_compaction_running_mutex;\n+uint64_t CompactionAction::_current_tablet_id = -1;\n+uint32_t CompactionAction::_current_schema_hash = -1;\n+std::string CompactionAction::_current_compaction_type = \"\";\n+\n+Status CompactionAction::_check_param(HttpRequest* req, uint64_t* tablet_id, uint32_t* schema_hash) {\n+    \n     std::string req_tablet_id = req->param(TABLET_ID_KEY);\n     std::string req_schema_hash = req->param(TABLET_SCHEMA_HASH_KEY);\n     if (req_tablet_id == \"\" && req_schema_hash == \"\") {\n         // TODO(cmy): View the overall compaction status\n         return Status::NotSupported(\"The overall compaction status is not supported yet\");\n     }\n \n-    uint64_t tablet_id = 0;\n-    uint32_t schema_hash = 0;\n     try {\n-        tablet_id = std::stoull(req_tablet_id);\n-        schema_hash = std::stoul(req_schema_hash);\n+        *tablet_id = std::stoull(req_tablet_id);\n+        *schema_hash = std::stoul(req_schema_hash);\n     } catch (const std::exception& e) {\n         LOG(WARNING) << \"invalid argument.tablet_id:\" << req_tablet_id\n                      << \", schema_hash:\" << req_schema_hash;\n         return Status::InternalError(strings::Substitute(\"convert failed, $0\", e.what()));\n     }\n \n+    return Status::OK();\n+}\n+\n+// for viewing the compaction status\n+Status CompactionAction::_handle_show_compaction(HttpRequest* req, std::string* json_result) {\n+    \n+    uint64_t tablet_id = 0;\n+    uint32_t schema_hash = 0;\n+    \n+    Status status = _check_param(req, &tablet_id, &schema_hash);\n+    if (!status.ok()) {\n+        return status;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fed635bc6b3e3dc991e98ca2823ba4daf409c9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjYyMzcyOnYy", "diffSide": "RIGHT", "path": "docs/en/administrator-guide/http-actions/compaction-action.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoxODo0MlrOG-tTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoyOToyOFrOG-x1_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNzE1MQ==", "bodyText": "Why use GET method? I think POST method is more suitable.", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468407151", "createdAt": "2020-08-11T08:18:42Z", "author": {"login": "imay"}, "path": "docs/en/administrator-guide/http-actions/compaction-action.md", "diffHunk": "@@ -95,4 +95,96 @@ curl -X GET http://192.168.10.24:8040/api/compaction/show?tablet_id=10015\\&schem\n \n ## Manually trigger Compaction\n \n-(TODO)\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\\&compact_type=cumulative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a38a488d93468fc164f4642f5e0905ffde6b25d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4MTUzMg==", "bodyText": "The document is wrong and has been modified", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468481532", "createdAt": "2020-08-11T10:29:28Z", "author": {"login": "ZhangYu0123"}, "path": "docs/en/administrator-guide/http-actions/compaction-action.md", "diffHunk": "@@ -95,4 +95,96 @@ curl -X GET http://192.168.10.24:8040/api/compaction/show?tablet_id=10015\\&schem\n \n ## Manually trigger Compaction\n \n-(TODO)\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\\&compact_type=cumulative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNzE1MQ=="}, "originalCommit": {"oid": "a38a488d93468fc164f4642f5e0905ffde6b25d0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjkxODg0OnYy", "diffSide": "RIGHT", "path": "docs/en/administrator-guide/http-actions/compaction-action.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTozNjozOVrOG-wG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTozNjozOVrOG-wG8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1MzEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\n          \n          \n            \n            curl -X GET http://be_host:webserver_port/api/compaction/run_status?tablet_id=xxxx\\&schema_hash=yyyy", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468453107", "createdAt": "2020-08-11T09:36:39Z", "author": {"login": "imay"}, "path": "docs/en/administrator-guide/http-actions/compaction-action.md", "diffHunk": "@@ -95,4 +95,96 @@ curl -X GET http://192.168.10.24:8040/api/compaction/show?tablet_id=10015\\&schem\n \n ## Manually trigger Compaction\n \n-(TODO)\n+```\n+curl -X POST http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy\\&compact_type=cumulative\n+```\n+\n+The only one manual compaction task that can be performed at a moment, and the value range of compact_type is base or cumulative\n+\n+If the tablet does not exist, an error in JSON format is returned:\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"Tablet not found\"\n+}\n+```\n+\n+If the compaction execution task fails to be triggered, an error in JSON format is returned:\n+\n+```\n+{\n+    \"status\": \"Fail\",\n+    \"msg\": \"fail to execute compaction, error = -2000\"\n+}\n+```\n+\n+If the compaction execution task successes to be triggered, an error in JSON format is returned:\n+\n+```\n+{\n+    \"status\": \"Success\",\n+    \"msg\": \"compaction task is successfully triggered.\"\n+}\n+```\n+\n+Explanation of results:\n+\n+* status: Trigger task status, when it is successfully triggered, it is Success; when for some reason (for example, the appropriate version is not obtained), it returns Fail.\n+* msg: Give specific success or failure information.\n+\n+### Examples\n+\n+```\n+curl -X POST http://192.168.10.24:8040/api/compaction/run?tablet_id=10015\\&schema_hash=1294206575\\&compact_type=cumulative\n+```\n+\n+## Manual Compaction execution status\n+\n+```\n+curl -X GET http://be_host:webserver_port/api/compaction/run?tablet_id=xxxx\\&schema_hash=yyyy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776febb26e88477cab8faebab27bf6623134298e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODM3NDkzOnYy", "diffSide": "RIGHT", "path": "be/src/http/action/compaction_action.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Mzo1MlrOG-9_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTo0Mzo1MlrOG-9_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4MDU4OQ==", "bodyText": "Miss to unlock?", "url": "https://github.com/apache/incubator-doris/pull/4312#discussion_r468680589", "createdAt": "2020-08-11T15:43:52Z", "author": {"login": "morningman"}, "path": "be/src/http/action/compaction_action.cpp", "diffHunk": "@@ -67,6 +82,167 @@ Status CompactionAction::_handle_show_compaction(HttpRequest* req, std::string*\n     return Status::OK();\n }\n \n+Status CompactionAction::_handle_run_compaction(HttpRequest *req, std::string* json_result) {\n+\n+    // 1. param check\n+    uint64_t tablet_id = 0;\n+    uint32_t schema_hash = 0;\n+    \n+    // check req_tablet_id and req_schema_hash is not empty\n+    Status check_status = _check_param(req, &tablet_id, &schema_hash);\n+    RETURN_IF_ERROR(check_status);\n+\n+    std::string compaction_type = req->param(PARAM_COMPACTION_TYPE);\n+    // check compaction_type is not empty and equals base or cumulative\n+    if (compaction_type == \"\" && !(compaction_type == PARAM_COMPACTION_BASE || compaction_type == PARAM_COMPACTION_CUMULATIVE)) {\n+        return Status::NotSupported(\"The compaction type is not supported\");\n+    }\n+\n+    // 2. fetch the tablet by tablet_id and schema_hash\n+    TabletSharedPtr tablet =\n+            StorageEngine::instance()->tablet_manager()->get_tablet(tablet_id, schema_hash);\n+\n+    if (tablet == nullptr) {\n+        LOG(WARNING) << \"invalid argument.tablet_id:\" << tablet_id\n+                     << \", schema_hash:\" << schema_hash;\n+        return Status::InternalError(\n+                strings::Substitute(\"fail to get $0, $1\", tablet_id, schema_hash));\n+    }\n+\n+    // 3. execute compaction task\n+    std::packaged_task<OLAPStatus()> task([this, tablet, compaction_type]() { \n+            return _execute_compaction_callback(tablet, compaction_type);\n+    });\n+    std::future<OLAPStatus> future_obj = task.get_future();\n+\n+    {\n+        // 3.1 check is there compaction running\n+        std::lock_guard<std::mutex> lock(_compaction_running_mutex);\n+        if (_is_compaction_running) {\n+            return Status::TooManyTasks(\"Manual compaction task is running\");\n+        } else {\n+            // 3.2 execute the compaction task and set compaction task running \n+            _is_compaction_running = true;\n+            std::thread(std::move(task)).detach();\n+        }\n+    }\n+\n+    // 4. wait for result for 2 seconds by async\n+    std::future_status status = future_obj.wait_for(std::chrono::seconds(2));\n+    if (status == std::future_status::ready) {\n+        // fetch execute result\n+        OLAPStatus olap_status = future_obj.get();\n+        if (olap_status != OLAP_SUCCESS) {\n+            return Status::InternalError(\n+                    strings::Substitute(\"fail to execute compaction, error = $0\", olap_status));\n+        }\n+    } else {\n+        LOG(INFO) << \"Manual compaction task is timeout for waiting \" << (status == std::future_status::timeout);\n+    }\n+   \n+    LOG(INFO) << \"Manual compaction task is successfully triggered\";\n+    *json_result = \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"compaction task is successfully triggered.\\\"}\";\n+\n+    return Status::OK();\n+}\n+\n+Status CompactionAction::_handle_run_status_compaction(HttpRequest *req, std::string* json_result) {\n+\n+    uint64_t tablet_id = 0;\n+    uint32_t schema_hash = 0;\n+    \n+    // check req_tablet_id and req_schema_hash is not empty\n+    Status check_status = _check_param(req, &tablet_id, &schema_hash);\n+    RETURN_IF_ERROR(check_status);\n+\n+    // fetch the tablet by tablet_id and schema_hash\n+    TabletSharedPtr tablet =\n+            StorageEngine::instance()->tablet_manager()->get_tablet(tablet_id, schema_hash);\n+\n+    if (tablet == nullptr) {\n+        LOG(WARNING) << \"invalid argument.tablet_id:\" << tablet_id\n+                     << \", schema_hash:\" << schema_hash;\n+        return Status::InternalError(\n+                strings::Substitute(\"fail to get $0, $1\", tablet_id, schema_hash));\n+    }\n+\n+    std::string json_template = R\"({\n+        \"status\" : \"Success\",\n+        \"run_status\" : $0,\n+        \"msg\" : \"$1\",\n+        \"tablet_id\" : $2,\n+        \"schema_hash\" : $3,\n+        \"compact_type\" : \"$4\"\n+})\";\n+\n+    std::string msg = \"this tablet_id is not running\";\n+    std::string compaction_type = \"\";\n+    bool run_status = 0;\n+\n+    // use try lock to check this tablet is running cumulative compaction\n+    MutexLock lock_cumulativie(tablet->get_cumulative_lock(), TRY_LOCK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c8f1c91e87b3934e0afd6596310df9c74c13578"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1115, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}