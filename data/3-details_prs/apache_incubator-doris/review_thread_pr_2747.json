{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDkzMzU3", "number": 2747, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTowMzoyNFrODXjMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDoyNDoyMVrODYhPVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDIwNDA3OnYy", "diffSide": "RIGHT", "path": "be/test/util/path_util_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTowMzoyNFrOFc5zxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzoxMzozNlrOFdLH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1MTU4OA==", "bodyText": "can you remove these codes to make it run without conf?", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r365851588", "createdAt": "2020-01-13T15:03:24Z", "author": {"login": "imay"}, "path": "be/test/util/path_util_test.cpp", "diffHunk": "@@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"common/config.h\"\n+#include \"util/logging.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+namespace doris {\n+\n+TEST(TestPathUtil, BaseNameTest) {\n+    ASSERT_EQ(\".\", path_util::base_name(\"\"));\n+    ASSERT_EQ(\".\", path_util::base_name(\".\"));\n+    ASSERT_EQ(\"..\", path_util::base_name(\"..\"));\n+    ASSERT_EQ(\"/\", path_util::base_name(\"/\"));\n+    ASSERT_EQ(\"/\", path_util::base_name(\"//\"));\n+    ASSERT_EQ(\"a\", path_util::base_name(\"a\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"ab\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"ab/\"));\n+    ASSERT_EQ(\"cd\", path_util::base_name(\"ab/cd\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"/ab\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"/ab///\"));\n+    ASSERT_EQ(\"cd\", path_util::base_name(\"/ab/cd\"));\n+}\n+\n+TEST(TestPathUtil, DirNameTest) {\n+    ASSERT_EQ(\".\", path_util::dir_name(\"\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\".\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"..\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/\"));\n+    ASSERT_EQ(\"//\", path_util::dir_name(\"//\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"a\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"ab\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"ab/\"));\n+    ASSERT_EQ(\"ab\", path_util::dir_name(\"ab/cd\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/ab\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/ab///\"));\n+    ASSERT_EQ(\"/ab\", path_util::dir_name(\"/ab/cd\"));\n+}\n+\n+TEST(TestPathUtil, SplitPathTest) {\n+    using Vec = vector<string>;\n+    ASSERT_EQ(Vec({\"/\"}), path_util::split_path(\"/\"));\n+    ASSERT_EQ(Vec({\"/\", \"a\", \"b\"}), path_util::split_path(\"/a/b\"));\n+    ASSERT_EQ(Vec({\"/\", \"a\", \"b\"}), path_util::split_path(\"/a/b/\"));\n+    ASSERT_EQ(Vec({\"a\", \"b\"}), path_util::split_path(\"a/b\"));\n+    ASSERT_EQ(Vec({\".\"}), path_util::split_path(\".\"));\n+    ASSERT_EQ(Vec(), path_util::split_path(\"\"));\n+}\n+\n+} // namespace doris\n+\n+int main(int argc, char* argv[]) {\n+    std::string conffile = std::string(getenv(\"DORIS_HOME\")) + \"/conf/be.conf\";\n+    if (!doris::config::init(conffile.c_str(), false)) {\n+        fprintf(stderr, \"error read config file. \\n\");\n+        return -1;\n+    }\n+    doris::init_glog(\"be-test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNTI4Ng==", "bodyText": "Done.", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r366135286", "createdAt": "2020-01-14T03:13:36Z", "author": {"login": "lingbin"}, "path": "be/test/util/path_util_test.cpp", "diffHunk": "@@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"common/config.h\"\n+#include \"util/logging.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+namespace doris {\n+\n+TEST(TestPathUtil, BaseNameTest) {\n+    ASSERT_EQ(\".\", path_util::base_name(\"\"));\n+    ASSERT_EQ(\".\", path_util::base_name(\".\"));\n+    ASSERT_EQ(\"..\", path_util::base_name(\"..\"));\n+    ASSERT_EQ(\"/\", path_util::base_name(\"/\"));\n+    ASSERT_EQ(\"/\", path_util::base_name(\"//\"));\n+    ASSERT_EQ(\"a\", path_util::base_name(\"a\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"ab\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"ab/\"));\n+    ASSERT_EQ(\"cd\", path_util::base_name(\"ab/cd\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"/ab\"));\n+    ASSERT_EQ(\"ab\", path_util::base_name(\"/ab///\"));\n+    ASSERT_EQ(\"cd\", path_util::base_name(\"/ab/cd\"));\n+}\n+\n+TEST(TestPathUtil, DirNameTest) {\n+    ASSERT_EQ(\".\", path_util::dir_name(\"\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\".\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"..\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/\"));\n+    ASSERT_EQ(\"//\", path_util::dir_name(\"//\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"a\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"ab\"));\n+    ASSERT_EQ(\".\", path_util::dir_name(\"ab/\"));\n+    ASSERT_EQ(\"ab\", path_util::dir_name(\"ab/cd\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/ab\"));\n+    ASSERT_EQ(\"/\", path_util::dir_name(\"/ab///\"));\n+    ASSERT_EQ(\"/ab\", path_util::dir_name(\"/ab/cd\"));\n+}\n+\n+TEST(TestPathUtil, SplitPathTest) {\n+    using Vec = vector<string>;\n+    ASSERT_EQ(Vec({\"/\"}), path_util::split_path(\"/\"));\n+    ASSERT_EQ(Vec({\"/\", \"a\", \"b\"}), path_util::split_path(\"/a/b\"));\n+    ASSERT_EQ(Vec({\"/\", \"a\", \"b\"}), path_util::split_path(\"/a/b/\"));\n+    ASSERT_EQ(Vec({\"a\", \"b\"}), path_util::split_path(\"a/b\"));\n+    ASSERT_EQ(Vec({\".\"}), path_util::split_path(\".\"));\n+    ASSERT_EQ(Vec(), path_util::split_path(\"\"));\n+}\n+\n+} // namespace doris\n+\n+int main(int argc, char* argv[]) {\n+    std::string conffile = std::string(getenv(\"DORIS_HOME\")) + \"/conf/be.conf\";\n+    if (!doris::config::init(conffile.c_str(), false)) {\n+        fprintf(stderr, \"error read config file. \\n\");\n+        return -1;\n+    }\n+    doris::init_glog(\"be-test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1MTU4OA=="}, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDIwNjM4OnYy", "diffSide": "RIGHT", "path": "be/test/util/path_util_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTowNDowOVrOFc51Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzozNzoyOVrOFdLYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1MTk1OA==", "bodyText": "should be STREQ?", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r365851958", "createdAt": "2020-01-13T15:04:09Z", "author": {"login": "imay"}, "path": "be/test/util/path_util_test.cpp", "diffHunk": "@@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"common/config.h\"\n+#include \"util/logging.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+namespace doris {\n+\n+TEST(TestPathUtil, BaseNameTest) {\n+    ASSERT_EQ(\".\", path_util::base_name(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzOTQxNg==", "bodyText": "ASSERT_EQ() use the == operator to compare, so it is wrong to use ASSERT_EQ on two C-strings because it can only test if they are in the same memory location, not if they have the same value.  i.e., only if the two string param both are C-string, ASSERT_STREQ should be used.\non the other hand, If one of the two string param in ASSERT() is not C-string, we should use ASSERT_EQ(), and here, the second param is an std::string type, so use ASSET_EQ() is right.", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r366139416", "createdAt": "2020-01-14T03:37:29Z", "author": {"login": "lingbin"}, "path": "be/test/util/path_util_test.cpp", "diffHunk": "@@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"common/config.h\"\n+#include \"util/logging.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+namespace doris {\n+\n+TEST(TestPathUtil, BaseNameTest) {\n+    ASSERT_EQ(\".\", path_util::base_name(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1MTk1OA=="}, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI1Mzg2OnYy", "diffSide": "RIGHT", "path": "be/src/util/path_util.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToxNzo1N1rOFc6SbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzo0NTozNFrOFdLdVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1OTQzNg==", "bodyText": "I don't think it's a good idea to CHECK common function's input arguments", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r365859436", "createdAt": "2020-01-13T15:17:57Z", "author": {"login": "imay"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+// Use the POSIX version of dirname(3). See `man 3 dirname`\n+#include <libgen.h>\n+\n+#include <cstring>\n+\n+#include <common/logging.h>\n+#include \"gutil/strings/split.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/strip.h\"\n+#include \"env/env.h\"\n+#include \"common/status.h\"\n+\n+using std::string;\n+using std::vector;\n+using strings::SkipEmpty;\n+using strings::Split;\n+\n+namespace doris {\n+namespace path_util {\n+\n+const string kTmpInfix = \".doristmp\";\n+\n+string join_path_segments(const string& a, const string& b) {\n+    CHECK(!a.empty()) << \"empty first component: \" << a;\n+    CHECK(!b.empty() && b[0] != '/')\n+            << \"second path component must be non-empty and relative: \"\n+            << b;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MDc1OA==", "bodyText": "I will change it to DCHECK.\nBTW, for file systems that simulate a hierarchical structure, repeated '/' can be problematic.  For example: in some object-storage-services, it may consider \"/a/b\" and \"/a///b\" as different objects. And during the file operation, no error will be reported, so check here to avoid such errors.", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r366140758", "createdAt": "2020-01-14T03:45:34Z", "author": {"login": "lingbin"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+// Use the POSIX version of dirname(3). See `man 3 dirname`\n+#include <libgen.h>\n+\n+#include <cstring>\n+\n+#include <common/logging.h>\n+#include \"gutil/strings/split.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/strip.h\"\n+#include \"env/env.h\"\n+#include \"common/status.h\"\n+\n+using std::string;\n+using std::vector;\n+using strings::SkipEmpty;\n+using strings::Split;\n+\n+namespace doris {\n+namespace path_util {\n+\n+const string kTmpInfix = \".doristmp\";\n+\n+string join_path_segments(const string& a, const string& b) {\n+    CHECK(!a.empty()) << \"empty first component: \" << a;\n+    CHECK(!b.empty() && b[0] != '/')\n+            << \"second path component must be non-empty and relative: \"\n+            << b;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1OTQzNg=="}, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDM3MDEyOnYy", "diffSide": "RIGHT", "path": "be/src/util/path_util.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDoyNDoyMVrOFebCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMzozNTo1N1rOFeuCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDU1MQ==", "bodyText": "What if i pass \"/a//b///c\" ? Is it valid?", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r367444551", "createdAt": "2020-01-16T14:24:21Z", "author": {"login": "morningman"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+// Use the POSIX version of dirname(3). See `man 3 dirname`\n+#include <libgen.h>\n+\n+#include <cstring>\n+\n+#include <common/logging.h>\n+#include \"gutil/strings/split.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/strip.h\"\n+#include \"env/env.h\"\n+#include \"common/status.h\"\n+\n+using std::string;\n+using std::vector;\n+using strings::SkipEmpty;\n+using strings::Split;\n+\n+namespace doris {\n+namespace path_util {\n+\n+const string kTmpInfix = \".doristmp\";\n+\n+string join_path_segments(const string& a, const string& b) {\n+    CHECK(!a.empty()) << \"empty first component: \" << a;\n+    CHECK(!b.empty() && b[0] != '/')\n+            << \"second path component must be non-empty and relative: \"\n+            << b;\n+    if (a.back() == '/') {\n+        return a + b;\n+    } else {\n+        return a + \"/\" + b;\n+    }\n+}\n+\n+vector<string> join_path_segments_v(const vector<string>& v, const string& s) {\n+    vector<string> out;\n+    for (const string& path : v) {\n+        out.emplace_back(join_path_segments(path, s));\n+    }\n+    return out;\n+}\n+\n+vector<string> split_path(const string& path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1NTgzOA==", "bodyText": "Yes, it still works, I will add a test case.\nBut to be clear: this should not happen in theory. Because the paths we configure will be canonicalized when the process starts, that is to say, the redundant contents such as \"///\" and \"./a/../\" have already been removed.", "url": "https://github.com/apache/incubator-doris/pull/2747#discussion_r367755838", "createdAt": "2020-01-17T03:35:57Z", "author": {"login": "lingbin"}, "path": "be/src/util/path_util.cpp", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"util/path_util.h\"\n+\n+// Use the POSIX version of dirname(3). See `man 3 dirname`\n+#include <libgen.h>\n+\n+#include <cstring>\n+\n+#include <common/logging.h>\n+#include \"gutil/strings/split.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/strip.h\"\n+#include \"env/env.h\"\n+#include \"common/status.h\"\n+\n+using std::string;\n+using std::vector;\n+using strings::SkipEmpty;\n+using strings::Split;\n+\n+namespace doris {\n+namespace path_util {\n+\n+const string kTmpInfix = \".doristmp\";\n+\n+string join_path_segments(const string& a, const string& b) {\n+    CHECK(!a.empty()) << \"empty first component: \" << a;\n+    CHECK(!b.empty() && b[0] != '/')\n+            << \"second path component must be non-empty and relative: \"\n+            << b;\n+    if (a.back() == '/') {\n+        return a + b;\n+    } else {\n+        return a + \"/\" + b;\n+    }\n+}\n+\n+vector<string> join_path_segments_v(const vector<string>& v, const string& s) {\n+    vector<string> out;\n+    for (const string& path : v) {\n+        out.emplace_back(join_path_segments(path, s));\n+    }\n+    return out;\n+}\n+\n+vector<string> split_path(const string& path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDU1MQ=="}, "originalCommit": {"oid": "42dadb44552491b9c3bcf9562c2ce4d108d302dc"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2339, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}