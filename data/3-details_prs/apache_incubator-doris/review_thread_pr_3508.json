{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NjAzMjQ0", "number": 3508, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowNzoyMVrOD6fBzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1OToxMlrOD7OmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjUyMzY2OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/CMakeLists.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowNzoyMVrOGSWe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTozNDozNlrOGS3k7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTkwNA==", "bodyText": "unify the indent", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r421895904", "createdAt": "2020-05-08T02:07:21Z", "author": {"login": "morningman"}, "path": "be/src/olap/memory/CMakeLists.txt", "diffHunk": "@@ -22,6 +22,12 @@ set(LIBRARY_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n set(EXECUTABLE_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n   \n add_library(Memory STATIC\n+\tbuffer.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzODEyNg==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422438126", "createdAt": "2020-05-09T01:34:36Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/CMakeLists.txt", "diffHunk": "@@ -22,6 +22,12 @@ set(LIBRARY_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n set(EXECUTABLE_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n   \n add_library(Memory STATIC\n+\tbuffer.cpp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTkwNA=="}, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjUyMzk1OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/buffer.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjowNzozMVrOGSWfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTozNDoxOVrOGS3k0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTk0NA==", "bodyText": "Comment for this class", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r421895944", "createdAt": "2020-05-08T02:07:31Z", "author": {"login": "morningman"}, "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class Buffer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzODA5OA==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422438098", "createdAt": "2020-05-09T01:34:19Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class Buffer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTk0NA=="}, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODUxODA1OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/column.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTowOTo0OFrOGSo_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNzozNlrOGS7y6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5OTIyMw==", "bodyText": "What is DLOG(INFO) ? Why not using VLOG?", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422199223", "createdAt": "2020-05-08T15:09:48Z", "author": {"login": "morningman"}, "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);\n+    _versions.reserve(64);\n+    _versions.emplace_back(version);\n+    DLOG(INFO) << \"create %s\" << debug_string();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI0Mw==", "bodyText": "This log is only used in debug mode, like DCHECK, it help show more info when debugging, and it has no effect in release build. I can remove them if it's this project's convention.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422507243", "createdAt": "2020-05-09T15:17:36Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);\n+    _versions.reserve(64);\n+    _versions.emplace_back(version);\n+    DLOG(INFO) << \"create %s\" << debug_string();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5OTIyMw=="}, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODUzNDgzOnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/column.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNToxNDo0NlrOGSpKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNToxNDo0NlrOGSpKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMTg4OA==", "bodyText": "Comment", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422201888", "createdAt": "2020-05-08T15:14:46Z", "author": {"login": "morningman"}, "path": "be/src/olap/memory/column.h", "diffHunk": "@@ -0,0 +1,96 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/column_block.h\"\n+#include \"olap/memory/column_delta.h\"\n+#include \"olap/memory/common.h\"\n+#include \"olap/memory/schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class ColumnReader;\n+class ColumnWriter;\n+\n+// Column store all the data of a column, including base and deltas.\n+// It supports single-writer multi-reader concurrency.\n+// It's properties are all immutable except _base and _versions.\n+// _base and _versions use std::vector, which is basically thread-safe\n+// in-practice for single-writer/multi-reader access, if there isn't\n+// any over-capacity realloc or delta compaction/GC caused data change.\n+// When these situations occur, we do a copy-on-write.\n+//\n+// TODO: add column read&writer\n+class Column : public RefCountedThreadSafe<Column> {\n+public:\n+    static const uint32_t BLOCK_SIZE = 1 << 16;\n+    static const uint32_t BLOCK_MASK = 0xffff;\n+\n+    // create a Column which provided column schema, underlying storage_type and initial version\n+    Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version);\n+\n+    // copy-on-write a new Column with new capacity\n+    Column(const Column& rhs, size_t new_base_capacity, size_t new_version_capacity);\n+\n+    // get column schema\n+    const ColumnSchema& schema() { return _cs; }\n+\n+    // get memory usage in bytes\n+    size_t memory() const;\n+\n+    string debug_string() const;\n+\n+    // read this Column at a specific version, get a reader for this Column\n+    // support multiple concurrent readers\n+    Status read(uint64_t version, std::unique_ptr<ColumnReader>* reader);\n+\n+    // write this Column, get a writer for this Column\n+    // caller needs to make sure there is only one or no writer exists at any time\n+    Status write(std::unique_ptr<ColumnWriter>* writer);\n+\n+private:\n+    ColumnSchema _cs;\n+    // For some types the storage_type may be different from actual type from schema.\n+    // For example, string stored in dictionary, so column_block store a integer id,\n+    // and the storage type may change as the dictionary grows, e.g. from uint8 to uint16\n+    ColumnType _storage_type;\n+    // base's position at _versions vector\n+    ssize_t _base_idx;\n+    // base data, a vector of ColumnBlocks\n+    vector<scoped_refptr<ColumnBlock>> _base;\n+    struct VersionInfo {\n+        VersionInfo() = default;\n+        explicit VersionInfo(uint64_t version) : version(version) {}\n+        uint64_t version = 0;\n+        // null if it's base\n+        scoped_refptr<ColumnDelta> delta;\n+    };\n+    // version vector\n+    vector<VersionInfo> _versions;\n+\n+    Status capture_version(uint64_t version, vector<ColumnDelta*>* deltas,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODU4Njk5OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/delta_index.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTozMDoxM1rOGSpqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNDozMDoyM1rOGTAaEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxMDA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Return true this index has any rowid belonging to this block\n          \n          \n            \n                // Return true if this index has any rowid belonging to this block", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422210054", "createdAt": "2020-05-08T15:30:13Z", "author": {"login": "morningman"}, "path": "be/src/olap/memory/delta_index.h", "diffHunk": "@@ -0,0 +1,76 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <vector>\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// DeltaIndex store all the updated rows' id(rowids) for a ColumnDelta.\n+// Rowids are sorted and divided into blocks, each 64K rowid space is a\n+// block. Since each block only have 64K id space, it can be store as uint16_t\n+// rather than uint32_t to save memory.\n+class DeltaIndex : public RefCountedThreadSafe<DeltaIndex> {\n+public:\n+    static const uint32_t npos = 0xffffffffu;\n+\n+    DeltaIndex() = default;\n+\n+    // get memory consumption\n+    size_t memory() const;\n+\n+    // find rowid(rid) in the index,\n+    // return index position if found, else return npos\n+    uint32_t find_idx(uint32_t rid);\n+\n+    // get a block's index position range as [start, end)\n+    void block_range(uint32_t bid, uint32_t* start, uint32_t* end) const {\n+        if (bid < _block_ends.size()) {\n+            *start = bid > 0 ? _block_ends[bid - 1] : 0;\n+            *end = _block_ends[bid];\n+        } else {\n+            *start = 0;\n+            *end = 0;\n+        }\n+    }\n+\n+    // Return true this index has any rowid belonging to this block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4MjgwMQ==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422582801", "createdAt": "2020-05-10T04:30:23Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/delta_index.h", "diffHunk": "@@ -0,0 +1,76 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <vector>\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// DeltaIndex store all the updated rows' id(rowids) for a ColumnDelta.\n+// Rowids are sorted and divided into blocks, each 64K rowid space is a\n+// block. Since each block only have 64K id space, it can be store as uint16_t\n+// rather than uint32_t to save memory.\n+class DeltaIndex : public RefCountedThreadSafe<DeltaIndex> {\n+public:\n+    static const uint32_t npos = 0xffffffffu;\n+\n+    DeltaIndex() = default;\n+\n+    // get memory consumption\n+    size_t memory() const;\n+\n+    // find rowid(rid) in the index,\n+    // return index position if found, else return npos\n+    uint32_t find_idx(uint32_t rid);\n+\n+    // get a block's index position range as [start, end)\n+    void block_range(uint32_t bid, uint32_t* start, uint32_t* end) const {\n+        if (bid < _block_ends.size()) {\n+            *start = bid > 0 ? _block_ends[bid - 1] : 0;\n+            *end = _block_ends[bid];\n+        } else {\n+            *start = 0;\n+            *end = 0;\n+        }\n+    }\n+\n+    // Return true this index has any rowid belonging to this block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxMDA1NA=="}, "originalCommit": {"oid": "840344cdddad3f024bb06029eb34b3ebca540509"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTMzOTA3OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/buffer.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjozODowM1rOGTBO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowNzozOFrOGTging==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ==", "bodyText": "would better naming mutable_data().", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422596311", "createdAt": "2020-05-10T06:38:03Z", "author": {"login": "kangkaisen"}, "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// A generic buffer holding column base and delta data\n+// It can be considered as an array of any primitive type, but it does not\n+// have compile time type information, user can use utility method as<T> to\n+// get typed array view.\n+class Buffer {\n+public:\n+    Buffer() = default;\n+    ~Buffer();\n+\n+    // allocate memory for this buffer, with buffer byte size of bsize\n+    Status alloc(size_t bsize);\n+\n+    // clear buffer, free memory\n+    void clear();\n+\n+    // set all memory content to zero\n+    void set_zero();\n+\n+    // return true if this buffer is not empty\n+    operator bool() const { return _data != nullptr; }\n+\n+    // returns a direct pointer to the memory array\n+    const uint8_t* data() const { return _data; }\n+\n+    // returns a direct pointer to the memory array\n+    uint8_t* data() { return _data; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTA0Mw==", "bodyText": "There are already many places use this naming convention, and class in std also use this convention.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755043", "createdAt": "2020-05-11T03:04:52Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// A generic buffer holding column base and delta data\n+// It can be considered as an array of any primitive type, but it does not\n+// have compile time type information, user can use utility method as<T> to\n+// get typed array view.\n+class Buffer {\n+public:\n+    Buffer() = default;\n+    ~Buffer();\n+\n+    // allocate memory for this buffer, with buffer byte size of bsize\n+    Status alloc(size_t bsize);\n+\n+    // clear buffer, free memory\n+    void clear();\n+\n+    // set all memory content to zero\n+    void set_zero();\n+\n+    // return true if this buffer is not empty\n+    operator bool() const { return _data != nullptr; }\n+\n+    // returns a direct pointer to the memory array\n+    const uint8_t* data() const { return _data; }\n+\n+    // returns a direct pointer to the memory array\n+    uint8_t* data() { return _data; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwOTI3OA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423109278", "createdAt": "2020-05-11T15:07:38Z", "author": {"login": "kangkaisen"}, "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// A generic buffer holding column base and delta data\n+// It can be considered as an array of any primitive type, but it does not\n+// have compile time type information, user can use utility method as<T> to\n+// get typed array view.\n+class Buffer {\n+public:\n+    Buffer() = default;\n+    ~Buffer();\n+\n+    // allocate memory for this buffer, with buffer byte size of bsize\n+    Status alloc(size_t bsize);\n+\n+    // clear buffer, free memory\n+    void clear();\n+\n+    // set all memory content to zero\n+    void set_zero();\n+\n+    // return true if this buffer is not empty\n+    operator bool() const { return _data != nullptr; }\n+\n+    // returns a direct pointer to the memory array\n+    const uint8_t* data() const { return _data; }\n+\n+    // returns a direct pointer to the memory array\n+    uint8_t* data() { return _data; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTM0ODY0OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/column.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjo0ODoyOFrOGTBTSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxMTozMVrOGTLAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzQ1MQ==", "bodyText": "Why use ssize_t?  _base_idx could be negative?", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597451", "createdAt": "2020-05-10T06:48:28Z", "author": {"login": "kangkaisen"}, "path": "be/src/olap/memory/column.h", "diffHunk": "@@ -0,0 +1,101 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/column_block.h\"\n+#include \"olap/memory/column_delta.h\"\n+#include \"olap/memory/common.h\"\n+#include \"olap/memory/schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class ColumnReader;\n+class ColumnWriter;\n+\n+// Column store all the data of a column, including base and deltas.\n+// It supports single-writer multi-reader concurrency.\n+// It's properties are all immutable except _base and _versions.\n+// _base and _versions use std::vector, which is basically thread-safe\n+// in-practice for single-writer/multi-reader access, if there isn't\n+// any over-capacity realloc or delta compaction/GC caused data change.\n+// When these situations occur, we do a copy-on-write.\n+//\n+// TODO: add column read&writer\n+class Column : public RefCountedThreadSafe<Column> {\n+public:\n+    static const uint32_t BLOCK_SIZE = 1 << 16;\n+    static const uint32_t BLOCK_MASK = 0xffff;\n+\n+    // create a Column which provided column schema, underlying storage_type and initial version\n+    Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version);\n+\n+    // copy-on-write a new Column with new capacity\n+    Column(const Column& rhs, size_t new_base_capacity, size_t new_version_capacity);\n+\n+    // get column schema\n+    const ColumnSchema& schema() { return _cs; }\n+\n+    // get memory usage in bytes\n+    size_t memory() const;\n+\n+    string debug_string() const;\n+\n+    // read this Column at a specific version, get a reader for this Column\n+    // support multiple concurrent readers\n+    Status read(uint64_t version, std::unique_ptr<ColumnReader>* reader);\n+\n+    // write this Column, get a writer for this Column\n+    // caller needs to make sure there is only one or no writer exists at any time\n+    Status write(std::unique_ptr<ColumnWriter>* writer);\n+\n+private:\n+    ColumnSchema _cs;\n+    // For some types the storage_type may be different from actual type from schema.\n+    // For example, string stored in dictionary, so column_block store a integer id,\n+    // and the storage type may change as the dictionary grows, e.g. from uint8 to uint16\n+    ColumnType _storage_type;\n+    // base's position at _versions vector\n+    ssize_t _base_idx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NjQ1MQ==", "bodyText": "This is for usage in Column.cpp, but I guess change code in for loop would be better.\n       for (ssize_t i = static_cast<ssize_t>(_base_idx) - 1; i >= 0; i--) {\nfixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422756451", "createdAt": "2020-05-11T03:11:31Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column.h", "diffHunk": "@@ -0,0 +1,101 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/column_block.h\"\n+#include \"olap/memory/column_delta.h\"\n+#include \"olap/memory/common.h\"\n+#include \"olap/memory/schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class ColumnReader;\n+class ColumnWriter;\n+\n+// Column store all the data of a column, including base and deltas.\n+// It supports single-writer multi-reader concurrency.\n+// It's properties are all immutable except _base and _versions.\n+// _base and _versions use std::vector, which is basically thread-safe\n+// in-practice for single-writer/multi-reader access, if there isn't\n+// any over-capacity realloc or delta compaction/GC caused data change.\n+// When these situations occur, we do a copy-on-write.\n+//\n+// TODO: add column read&writer\n+class Column : public RefCountedThreadSafe<Column> {\n+public:\n+    static const uint32_t BLOCK_SIZE = 1 << 16;\n+    static const uint32_t BLOCK_MASK = 0xffff;\n+\n+    // create a Column which provided column schema, underlying storage_type and initial version\n+    Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version);\n+\n+    // copy-on-write a new Column with new capacity\n+    Column(const Column& rhs, size_t new_base_capacity, size_t new_version_capacity);\n+\n+    // get column schema\n+    const ColumnSchema& schema() { return _cs; }\n+\n+    // get memory usage in bytes\n+    size_t memory() const;\n+\n+    string debug_string() const;\n+\n+    // read this Column at a specific version, get a reader for this Column\n+    // support multiple concurrent readers\n+    Status read(uint64_t version, std::unique_ptr<ColumnReader>* reader);\n+\n+    // write this Column, get a writer for this Column\n+    // caller needs to make sure there is only one or no writer exists at any time\n+    Status write(std::unique_ptr<ColumnWriter>* writer);\n+\n+private:\n+    ColumnSchema _cs;\n+    // For some types the storage_type may be different from actual type from schema.\n+    // For example, string stored in dictionary, so column_block store a integer id,\n+    // and the storage type may change as the dictionary grows, e.g. from uint8 to uint16\n+    ColumnType _storage_type;\n+    // base's position at _versions vector\n+    ssize_t _base_idx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzQ1MQ=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTM0OTUwOnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/column.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjo0OTozMVrOGTBTsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxNTowOVrOGTLC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA==", "bodyText": "Why is 64 ? Which should be a const value.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597554", "createdAt": "2020-05-10T06:49:31Z", "author": {"login": "kangkaisen"}, "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTA3Mw==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755073", "createdAt": "2020-05-11T03:05:01Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NzEwOA==", "bodyText": "It's the step size for base vector and version vector when over capacity and need to grow", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422757108", "createdAt": "2020-05-11T03:15:09Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTM1MTUwOnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/column_block.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjo1MTo0OVrOGTBUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowNToxMlrOGTK7Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ==", "bodyText": "esize  means element_size\uff1f would better add a comment for this method.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597789", "createdAt": "2020-05-10T06:51:49Z", "author": {"login": "kangkaisen"}, "path": "be/src/olap/memory/column_block.h", "diffHunk": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// ColumnBlock stores one block of data for a Column\n+class ColumnBlock : public RefCountedThreadSafe<ColumnBlock> {\n+public:\n+    ColumnBlock() = default;\n+\n+    size_t memory() const;\n+\n+    Buffer& data() { return _data; }\n+\n+    Buffer& nulls() { return _nulls; }\n+\n+    Status alloc(size_t size, size_t esize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0ODUzMw==", "bodyText": "Sure", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422748533", "createdAt": "2020-05-11T02:33:04Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column_block.h", "diffHunk": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// ColumnBlock stores one block of data for a Column\n+class ColumnBlock : public RefCountedThreadSafe<ColumnBlock> {\n+public:\n+    ColumnBlock() = default;\n+\n+    size_t memory() const;\n+\n+    Buffer& data() { return _data; }\n+\n+    Buffer& nulls() { return _nulls; }\n+\n+    Status alloc(size_t size, size_t esize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTEwMw==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755103", "createdAt": "2020-05-11T03:05:12Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/column_block.h", "diffHunk": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// ColumnBlock stores one block of data for a Column\n+class ColumnBlock : public RefCountedThreadSafe<ColumnBlock> {\n+public:\n+    ColumnBlock() = default;\n+\n+    size_t memory() const;\n+\n+    Buffer& data() { return _data; }\n+\n+    Buffer& nulls() { return _nulls; }\n+\n+    Status alloc(size_t size, size_t esize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ=="}, "originalCommit": {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAxODg5OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/schema.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMToyNjozM1rOGTYLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowODo1NFrOGT1Vug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MjI5OA==", "bodyText": "spell error, TabletSchema", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422972298", "createdAt": "2020-05-11T11:26:33Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/memory/schema.h", "diffHunk": "@@ -0,0 +1,80 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+#include \"olap/tablet_schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// This file contains type and schema adaptors\n+// from olap's type and schema to memory engine's type and schema\n+\n+// Memory engine's column type, just use FieldType for now\n+typedef FieldType ColumnType;\n+\n+// Memory engine's column schema, simple wrapper of TabletColumn.\n+// TODO: Add more properties and methods later\n+class ColumnSchema {\n+public:\n+    explicit ColumnSchema(const TabletColumn& tcolumn);\n+    ColumnSchema(uint32_t cid, const string& name, ColumnType type, bool nullable, bool is_key);\n+    inline uint32_t cid() const { return static_cast<uint32_t>(_tcolumn.unique_id()); }\n+    inline std::string name() const { return _tcolumn.name(); }\n+    inline ColumnType type() const { return _tcolumn.type(); }\n+    inline bool is_nullable() const { return _tcolumn.is_nullable(); }\n+    inline bool is_key() const { return _tcolumn.is_key(); }\n+\n+    std::string type_name() const;\n+    std::string debug_string() const;\n+\n+private:\n+    TabletColumn _tcolumn;\n+};\n+\n+// Memory engine's tablet schema, simple wrapper of TabletSchema.\n+// Schema have some differences comparing to original TablteSchema:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDA0Mg==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450042", "createdAt": "2020-05-12T04:08:54Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/schema.h", "diffHunk": "@@ -0,0 +1,80 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+#include \"olap/tablet_schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// This file contains type and schema adaptors\n+// from olap's type and schema to memory engine's type and schema\n+\n+// Memory engine's column type, just use FieldType for now\n+typedef FieldType ColumnType;\n+\n+// Memory engine's column schema, simple wrapper of TabletColumn.\n+// TODO: Add more properties and methods later\n+class ColumnSchema {\n+public:\n+    explicit ColumnSchema(const TabletColumn& tcolumn);\n+    ColumnSchema(uint32_t cid, const string& name, ColumnType type, bool nullable, bool is_key);\n+    inline uint32_t cid() const { return static_cast<uint32_t>(_tcolumn.unique_id()); }\n+    inline std::string name() const { return _tcolumn.name(); }\n+    inline ColumnType type() const { return _tcolumn.type(); }\n+    inline bool is_nullable() const { return _tcolumn.is_nullable(); }\n+    inline bool is_key() const { return _tcolumn.is_key(); }\n+\n+    std::string type_name() const;\n+    std::string debug_string() const;\n+\n+private:\n+    TabletColumn _tcolumn;\n+};\n+\n+// Memory engine's tablet schema, simple wrapper of TabletSchema.\n+// Schema have some differences comparing to original TablteSchema:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MjI5OA=="}, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDMxNjQ0OnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/common.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1ODo1NVrOGTbGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowODo1MFrOGT1VrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDA5NA==", "bodyText": "use lower case to name the method will be better.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423020094", "createdAt": "2020-05-11T12:58:55Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDAyOA==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450028", "createdAt": "2020-05-12T04:08:50Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDA5NA=="}, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDMxNzMxOnYy", "diffSide": "RIGHT", "path": "be/src/olap/memory/common.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1OToxMlrOGTbGyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowODo0NVrOGT1VnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDIzNA==", "bodyText": "The same as the above method.", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423020234", "createdAt": "2020-05-11T12:59:12Z", "author": {"login": "chaoyli"}, "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {\n+    return (v + pad - 1) / pad * pad;\n+}\n+\n+template <class T, class ST>\n+inline size_t NBlock(T v, ST bs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDAxMg==", "bodyText": "fixed", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450012", "createdAt": "2020-05-12T04:08:45Z", "author": {"login": "decster"}, "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {\n+    return (v + pad - 1) / pad * pad;\n+}\n+\n+template <class T, class ST>\n+inline size_t NBlock(T v, ST bs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDIzNA=="}, "originalCommit": {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1759, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}