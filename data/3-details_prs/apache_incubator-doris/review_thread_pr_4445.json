{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyOTg1NzAz", "number": 4445, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowMToyNlrOEcBBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMzozMlrOEcCVTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODEyMzQxOnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTowMToyNlrOHGS0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTo0NTo1MlrOHGUSNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2MTg4Mw==", "bodyText": "Because we have NormalizeBinaryPredicatesRule. You could only consider slot in left and string Literal in right", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476361883", "createdAt": "2020-08-25T11:01:26Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "diffHunk": "@@ -307,6 +307,16 @@ private Type getCmpType() {\n             return Type.LARGEINT;\n         }\n \n+        // Try parse varchar to bigint\n+        if (t1 == PrimitiveType.BIGINT && t2 == PrimitiveType.VARCHAR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e67efdb153a3c14e6f93adf692b41ad07651147"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MjEzMQ==", "bodyText": "Because we have NormalizeBinaryPredicatesRule. You could only consider slot in left and string Literal in right\n\u4f46\u662f\u6211\u8bd5\u4e86\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u6ce8\u91ca\u6389\u4ee3\u7801\u540e\uff0c\u5982\u679cSQL\u8fd9\u4e48\u5199\uff0c\u8fd8\u662f\u8f6c\u6210Double\u4e86\uff0c\u867d\u7136\u5f88\u5c11\u6709\u4eba\u8fd9\u4e48\u5199SQL\u3002\nexplain select count()\nfrom app_rt_flow_poi_intent_uv_price_v2\nwhere '20200730'=datekey\n\u6211\u770b\u4e86\u4e00\u4e0b\uff0c\u5728analyzeAndGenerateQueryPlan\u662f\u5148parsedStmt.analyze\u518dparsedStmt.rewriteExprs\u8fd9\u4e2a\u9690\u5f0f\u8f6c\u6362\u662f\u5728analyze\u91cc\u5b8c\u6210\u7684\u3002\u8fd9\u5757\u662f\u4e0d\u662f\u628arewrite\u63d0\u524d\u9762\u4e0d\u592a\u597d\u63d0- -\u3002", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476372131", "createdAt": "2020-08-25T11:22:43Z", "author": {"login": "Astralidea"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "diffHunk": "@@ -307,6 +307,16 @@ private Type getCmpType() {\n             return Type.LARGEINT;\n         }\n \n+        // Try parse varchar to bigint\n+        if (t1 == PrimitiveType.BIGINT && t2 == PrimitiveType.VARCHAR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2MTg4Mw=="}, "originalCommit": {"oid": "0e67efdb153a3c14e6f93adf692b41ad07651147"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4NTg0NQ==", "bodyText": "Yes. you are right. Don't need change this.", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476385845", "createdAt": "2020-08-25T11:45:52Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "diffHunk": "@@ -307,6 +307,16 @@ private Type getCmpType() {\n             return Type.LARGEINT;\n         }\n \n+        // Try parse varchar to bigint\n+        if (t1 == PrimitiveType.BIGINT && t2 == PrimitiveType.VARCHAR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2MTg4Mw=="}, "originalCommit": {"oid": "0e67efdb153a3c14e6f93adf692b41ad07651147"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODE4MDI2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMToxOTo1MVrOHGTXGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMTo1Mjo0MlrOHGUf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDcxMg==", "bodyText": "The method name and logic are a little strange. this method does two things: try to parse a string and decide the type. I think we could better split it.", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476370712", "createdAt": "2020-08-25T11:19:51Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "diffHunk": "@@ -386,6 +386,20 @@ public static Type getAssignmentCompatibleType(Type t1, Type t2, boolean strict)\n         return ScalarType.INVALID;\n     }\n \n+    /**\n+     * Returns Type.BIGINT if this type could parse to long, otherwise Type.DOUBLE.\n+     */\n+    public static Type tryParseToLong(Expr expectStringExpr){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e67efdb153a3c14e6f93adf692b41ad07651147"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4OTM2MQ==", "bodyText": "The method name and logic are a little strange. this method does two things: try to parse a string and decide the type. I think we could better split it.\n\n\u611f\u8c22\u6307\u51fa\u95ee\u9898\uff0c\u6211\u6539\u4e86\u4e00\u4e0b\uff0c\u770b\u770b\u884c\u4e0d\u884c\uff0c\u662f\u5426\u8fd8\u6709\u95ee\u9898\u3002", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476389361", "createdAt": "2020-08-25T11:52:42Z", "author": {"login": "Astralidea"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "diffHunk": "@@ -386,6 +386,20 @@ public static Type getAssignmentCompatibleType(Type t1, Type t2, boolean strict)\n         return ScalarType.INVALID;\n     }\n \n+    /**\n+     * Returns Type.BIGINT if this type could parse to long, otherwise Type.DOUBLE.\n+     */\n+    public static Type tryParseToLong(Expr expectStringExpr){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDcxMg=="}, "originalCommit": {"oid": "0e67efdb153a3c14e6f93adf692b41ad07651147"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODMzMTk2OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMTozMlrOHGUygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMTozMlrOHGUygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5NDExNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(expectStringExpr instanceof StringLiteral) {\n          \n          \n            \n                    if (expectStringExpr instanceof StringLiteral) {", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476394115", "createdAt": "2020-08-25T12:01:32Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "diffHunk": "@@ -386,6 +386,17 @@ public static Type getAssignmentCompatibleType(Type t1, Type t2, boolean strict)\n         return ScalarType.INVALID;\n     }\n \n+    /**\n+     * Returns Type.BIGINT if this type could parse to long, otherwise Type.DOUBLE.\n+     */\n+    public static Long tryParseToLong(Expr expectStringExpr){\n+        if(expectStringExpr instanceof StringLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6639eccb2b38f6d9bf02aa184eeb9fa2a500ff"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODMzMjM4OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMTo0MVrOHGUyyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMTo0MVrOHGUyyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5NDE4Ng==", "bodyText": "update comment", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476394186", "createdAt": "2020-08-25T12:01:41Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Type.java", "diffHunk": "@@ -386,6 +386,17 @@ public static Type getAssignmentCompatibleType(Type t1, Type t2, boolean strict)\n         return ScalarType.INVALID;\n     }\n \n+    /**\n+     * Returns Type.BIGINT if this type could parse to long, otherwise Type.DOUBLE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6639eccb2b38f6d9bf02aa184eeb9fa2a500ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODMzODA1OnYy", "diffSide": "RIGHT", "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMzozMlrOHGU2SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjowMzozMlrOHGU2SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5NTA4MA==", "bodyText": "would better add a comment to describe why do we want to convert string to bigint. add note this is compatible with Mysql", "url": "https://github.com/apache/incubator-doris/pull/4445#discussion_r476395080", "createdAt": "2020-08-25T12:03:32Z", "author": {"login": "kangkaisen"}, "path": "fe/fe-core/src/main/java/org/apache/doris/analysis/BinaryPredicate.java", "diffHunk": "@@ -307,6 +307,22 @@ private Type getCmpType() {\n             return Type.LARGEINT;\n         }\n \n+        // Try parse varchar to bigint and decide type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6639eccb2b38f6d9bf02aa184eeb9fa2a500ff"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1187, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}