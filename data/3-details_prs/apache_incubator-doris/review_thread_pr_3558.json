{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDQ1NTc2", "number": 3558, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNjo1MFrOD7gmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1NjozOVrOD7g8Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2NzY0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNjo1MFrOGT4Asw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjowNjoxMVrOGUe-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzgxMQ==", "bodyText": "why do you only throw exception when expr is \u2018when expr\u2019 and \u2018then expr\u2019\uff1f\nWhether to throw an exception when \u2018case expr\u2019 and \u2018else expr\u2019 is not scarlar type\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423493811", "createdAt": "2020-05-12T06:36:50Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -186,6 +189,9 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n             // Determine maximum compatible type of the then exprs seen so far.\n             // We will add casts to them at the very end.\n             Expr thenExpr = children.get(i + 1);\n+            if (!thenExpr.getType().isScalarType()) {\n+                throw new AnalysisException(\"subquery in case-when must return scala type\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjI4MA==", "bodyText": "if when expor case expr has subquery and subquer returns non-scalar type, the error will be thrown by analyzer.getCompatibleType and the message is  weird, too difficult to understand, so i throw a message here", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424132280", "createdAt": "2020-05-13T02:06:11Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -186,6 +189,9 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n             // Determine maximum compatible type of the then exprs seen so far.\n             // We will add casts to them at the very end.\n             Expr thenExpr = children.get(i + 1);\n+            if (!thenExpr.getType().isScalarType()) {\n+                throw new AnalysisException(\"subquery in case-when must return scala type\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzgxMQ=="}, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMwODk3OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MTo0M1rOGT4amg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjowNzowMlrOGUe_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ0Mg==", "bodyText": "why whenExpr must be BinaryPredicate? can we support query \u201cselect case (select sex from table limit 1) when ''1\u201d then 'male' else 'female'\uff1f", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423500442", "createdAt": "2020-05-12T06:51:43Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjUwNg==", "bodyText": "this is the previous code", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424132506", "createdAt": "2020-05-13T02:07:02Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ0Mg=="}, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMyMzI2OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1NjozOVrOGT4jnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjoxNDowMlrOGUfHPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjc0OA==", "bodyText": "maybe in 1397 line code , \"<=\" need to modify \"<\".\nfor example: case when expr0 then expr1 else expr2.   expr2 will be consider 'when expr' in In the following code", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423502748", "createdAt": "2020-05-12T06:56:39Z", "author": {"login": "wutiangan"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNDQ2Mw==", "bodyText": "after the  loop  the childIdx is 2  childIdx + 2 is 4 not <= caseExpr.getChildren().size() (3) so expr2 will not be consider 'when expr' in In the following code", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424134463", "createdAt": "2020-05-13T02:14:02Z", "author": {"login": "yangzhg"}, "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjc0OA=="}, "originalCommit": {"oid": "58ef16352496f898587100192e2e28f343539069"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1797, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}