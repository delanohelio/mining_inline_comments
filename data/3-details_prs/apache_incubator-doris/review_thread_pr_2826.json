{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjU2NDIw", "number": 2826, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozMToxNVrODchdYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMzozNFrODchxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM0OTE0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/PaloFe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozMToxNVrOFkmuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjozNjo0OVrOFknfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzUwMA==", "bodyText": "System.err", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373927500", "createdAt": "2020-02-03T05:31:15Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/PaloFe.java", "diffHunk": "@@ -51,25 +51,36 @@\n public class PaloFe {\n     private static final Logger LOG = LogManager.getLogger(PaloFe.class);\n \n-    // entrance for palo frontend\n+    public static final String DORIS_HOME_DIR = System.getenv(\"DORIS_HOME\");\n+    public static final String PID_DIR = System.getenv(\"PID_DIR\");\n+\n     public static void main(String[] args) {\n+        start(DORIS_HOME_DIR, PID_DIR, args);\n+    }\n+\n+    // entrance for doris frontend\n+    public static void start(String dorisHomeDir, String pidDir, String[] args) {\n+        if (Strings.isNullOrEmpty(dorisHomeDir)) {\n+            System.out.println(\"env DORIS_HOME is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MDEwNg==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373940106", "createdAt": "2020-02-03T06:36:49Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/PaloFe.java", "diffHunk": "@@ -51,25 +51,36 @@\n public class PaloFe {\n     private static final Logger LOG = LogManager.getLogger(PaloFe.class);\n \n-    // entrance for palo frontend\n+    public static final String DORIS_HOME_DIR = System.getenv(\"DORIS_HOME\");\n+    public static final String PID_DIR = System.getenv(\"PID_DIR\");\n+\n     public static void main(String[] args) {\n+        start(DORIS_HOME_DIR, PID_DIR, args);\n+    }\n+\n+    // entrance for doris frontend\n+    public static void start(String dorisHomeDir, String pidDir, String[] args) {\n+        if (Strings.isNullOrEmpty(dorisHomeDir)) {\n+            System.out.println(\"env DORIS_HOME is not set\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzUwMA=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM1MjUzOnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTozNDowOFrOFkmwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjozODo0OFrOFknhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // we already set these varialbes in constructor. but Catalog is a singleton class.\n          \n          \n            \n                    // we already set these variables in constructor. but Catalog is a singleton class.", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373928012", "createdAt": "2020-02-03T05:34:08Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -635,7 +642,23 @@ private void unlock() {\n         }\n     }\n \n+    public String getBdbDir() {\n+        return bdbDir;\n+    }\n+\n+    public String getImageDir() {\n+        return imageDir;\n+    }\n+\n     public void initialize(String[] args) throws Exception {\n+        // set meta dir first.\n+        // we already set these varialbes in constructor. but Catalog is a singleton class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MDU1Ng==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373940556", "createdAt": "2020-02-03T06:38:48Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -635,7 +642,23 @@ private void unlock() {\n         }\n     }\n \n+    public String getBdbDir() {\n+        return bdbDir;\n+    }\n+\n+    public String getImageDir() {\n+        return imageDir;\n+    }\n+\n     public void initialize(String[] args) throws Exception {\n+        // set meta dir first.\n+        // we already set these varialbes in constructor. but Catalog is a singleton class.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyODAxMg=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM2MTg0OnYy", "diffSide": "RIGHT", "path": "fe/src/main/java/org/apache/doris/qe/ResultReceiver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo0Mjo1N1rOFkm1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjozOToxNVrOFknhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTQ3MA==", "bodyText": "removed?", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373929470", "createdAt": "2020-02-03T05:42:57Z", "author": {"login": "kangkaisen"}, "path": "fe/src/main/java/org/apache/doris/qe/ResultReceiver.java", "diffHunk": "@@ -76,7 +76,9 @@ public RowBatch getNext(Status status) throws TException {\n                         throw new TimeoutException(\"query timeout\");\n                     }\n                     try {\n+                        LOG.debug(\"cmy before get next\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MDY2NA==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373940664", "createdAt": "2020-02-03T06:39:15Z", "author": {"login": "morningman"}, "path": "fe/src/main/java/org/apache/doris/qe/ResultReceiver.java", "diffHunk": "@@ -76,7 +76,9 @@ public RowBatch getNext(Status status) throws TException {\n                         throw new TimeoutException(\"query timeout\");\n                     }\n                     try {\n+                        LOG.debug(\"cmy before get next\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTQ3MA=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjM4MTQyOnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/utframe/AnotherDemoTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1OTo0MlrOFknBsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzoyODoyMFrOFkoPxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjQ2Nw==", "bodyText": "Use a uuid?", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373932467", "createdAt": "2020-02-03T05:59:42Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/AnotherDemoTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo is mainly used to confirm that \n+ * repeatedly starting FE and BE in 2 UnitTest will not cause conflict\n+ */\n+public class AnotherDemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/AnotherDemoTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0Mjg4OQ==", "bodyText": "Using test class name as dir name is more readable. But in case there are 2 tests with same name, I will add a uuid next to it.", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373942889", "createdAt": "2020-02-03T06:48:54Z", "author": {"login": "morningman"}, "path": "fe/src/test/java/org/apache/doris/utframe/AnotherDemoTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo is mainly used to confirm that \n+ * repeatedly starting FE and BE in 2 UnitTest will not cause conflict\n+ */\n+public class AnotherDemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/AnotherDemoTest\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjQ2Nw=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1MjQ1Mg==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373952452", "createdAt": "2020-02-03T07:28:20Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/AnotherDemoTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo is mainly used to confirm that \n+ * repeatedly starting FE and BE in 2 UnitTest will not cause conflict\n+ */\n+public class AnotherDemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/AnotherDemoTest\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMjQ2Nw=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjQwMTA4OnYy", "diffSide": "RIGHT", "path": "fe/src/test/java/org/apache/doris/utframe/DemoTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoxMzozNFrOFknNEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzoyODozNFrOFkoQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNTM3Ng==", "bodyText": "getRandomPort  is duplicate with AnotherDemoTest. could move to UtFrameUtils", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373935376", "createdAt": "2020-02-03T06:13:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/DemoTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.alter.AlterJobV2;\n+import org.apache.doris.analysis.AlterTableStmt;\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo shows how to run unit test with mocked FE and BE.\n+ * It will\n+ *  1. start a mocked FE and a mocked BE.\n+ *  2. Create a database and a tbl.\n+ *  3. Make a schema change to tbl.\n+ *  4. send a query and get query plan\n+ */\n+public class DemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/DemoTest\";\n+\n+    @BeforeClass\n+    public static void beforeClass() throws EnvVarNotSetException, IOException,\n+            FeStartException, NotInitException, DdlException, InterruptedException {\n+        // get DORIS_HOME\n+        final String dorisHome = System.getenv(\"DORIS_HOME\");\n+        if (Strings.isNullOrEmpty(dorisHome)) {\n+            throw new EnvVarNotSetException(\"env DORIS_HOME is not set\");\n+        }\n+\n+        getRandomPort();\n+\n+        // start fe in \"DORIS_HOME/fe/mocked/\"\n+        MockedFrontend frontend = MockedFrontend.getInstance();\n+        Map<String, String> feConfMap = Maps.newHashMap();\n+        // set additional fe config\n+        feConfMap.put(\"http_port\", String.valueOf(fe_http_port));\n+        feConfMap.put(\"rpc_port\", String.valueOf(fe_rpc_port));\n+        feConfMap.put(\"query_port\", String.valueOf(fe_query_port));\n+        feConfMap.put(\"edit_log_port\", String.valueOf(fe_edit_log_port));\n+        feConfMap.put(\"tablet_create_timeout_second\", \"10\");\n+        frontend.init(dorisHome + \"/\" + runningDir, feConfMap);\n+        frontend.start(new String[0]);\n+\n+        // start be\n+        MockedBackend backend = MockedBackendFactory.createBackend(\"127.0.0.1\",\n+                be_heartbeat_port, be_thrift_port, be_brpc_port, be_http_port,\n+                new DefaultHeartbeatServiceImpl(be_thrift_port, be_http_port, be_brpc_port),\n+                new DefaultBeThriftServiceImpl(), new DefaultPBackendServiceImpl());\n+        backend.setFeAddress(new TNetworkAddress(\"127.0.0.1\", frontend.getRpcPort()));\n+        backend.start();\n+\n+        // add be\n+        List<Pair<String, Integer>> bes = Lists.newArrayList();\n+        bes.add(Pair.create(backend.getHost(), backend.getHeartbeatPort()));\n+        Catalog.getCurrentSystemInfo().addBackends(bes, false, \"default_cluster\");\n+\n+        // sleep to wait first heartbeat\n+        Thread.sleep(6000);\n+    }\n+\n+    // generate all port from between 20000 ~ 30000\n+    private static void getRandomPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MjQ5OA==", "bodyText": "Which ports are used is all depends on the caller. Here is just an example to get random ports. And ports set here are all static members of the certain Test class. So the only thing\nthat can be put to UtFrameUtils is:\nRandom r = new Random(System.currentTimeMillis());\nint basePort = 20000 + r.nextInt(9000);\n\nIt seems unnecessary.\nAnotherDemoTest is just a copy of DemoTest, so don't worry about this part of duplicate codes.", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373942498", "createdAt": "2020-02-03T06:47:06Z", "author": {"login": "morningman"}, "path": "fe/src/test/java/org/apache/doris/utframe/DemoTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.alter.AlterJobV2;\n+import org.apache.doris.analysis.AlterTableStmt;\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo shows how to run unit test with mocked FE and BE.\n+ * It will\n+ *  1. start a mocked FE and a mocked BE.\n+ *  2. Create a database and a tbl.\n+ *  3. Make a schema change to tbl.\n+ *  4. send a query and get query plan\n+ */\n+public class DemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/DemoTest\";\n+\n+    @BeforeClass\n+    public static void beforeClass() throws EnvVarNotSetException, IOException,\n+            FeStartException, NotInitException, DdlException, InterruptedException {\n+        // get DORIS_HOME\n+        final String dorisHome = System.getenv(\"DORIS_HOME\");\n+        if (Strings.isNullOrEmpty(dorisHome)) {\n+            throw new EnvVarNotSetException(\"env DORIS_HOME is not set\");\n+        }\n+\n+        getRandomPort();\n+\n+        // start fe in \"DORIS_HOME/fe/mocked/\"\n+        MockedFrontend frontend = MockedFrontend.getInstance();\n+        Map<String, String> feConfMap = Maps.newHashMap();\n+        // set additional fe config\n+        feConfMap.put(\"http_port\", String.valueOf(fe_http_port));\n+        feConfMap.put(\"rpc_port\", String.valueOf(fe_rpc_port));\n+        feConfMap.put(\"query_port\", String.valueOf(fe_query_port));\n+        feConfMap.put(\"edit_log_port\", String.valueOf(fe_edit_log_port));\n+        feConfMap.put(\"tablet_create_timeout_second\", \"10\");\n+        frontend.init(dorisHome + \"/\" + runningDir, feConfMap);\n+        frontend.start(new String[0]);\n+\n+        // start be\n+        MockedBackend backend = MockedBackendFactory.createBackend(\"127.0.0.1\",\n+                be_heartbeat_port, be_thrift_port, be_brpc_port, be_http_port,\n+                new DefaultHeartbeatServiceImpl(be_thrift_port, be_http_port, be_brpc_port),\n+                new DefaultBeThriftServiceImpl(), new DefaultPBackendServiceImpl());\n+        backend.setFeAddress(new TNetworkAddress(\"127.0.0.1\", frontend.getRpcPort()));\n+        backend.start();\n+\n+        // add be\n+        List<Pair<String, Integer>> bes = Lists.newArrayList();\n+        bes.add(Pair.create(backend.getHost(), backend.getHeartbeatPort()));\n+        Catalog.getCurrentSystemInfo().addBackends(bes, false, \"default_cluster\");\n+\n+        // sleep to wait first heartbeat\n+        Thread.sleep(6000);\n+    }\n+\n+    // generate all port from between 20000 ~ 30000\n+    private static void getRandomPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNTM3Ng=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1MjUzMQ==", "bodyText": "OK", "url": "https://github.com/apache/incubator-doris/pull/2826#discussion_r373952531", "createdAt": "2020-02-03T07:28:34Z", "author": {"login": "kangkaisen"}, "path": "fe/src/test/java/org/apache/doris/utframe/DemoTest.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.utframe;\n+\n+import org.apache.doris.alter.AlterJobV2;\n+import org.apache.doris.analysis.AlterTableStmt;\n+import org.apache.doris.analysis.CreateDbStmt;\n+import org.apache.doris.analysis.CreateTableStmt;\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.OlapTable;\n+import org.apache.doris.common.DdlException;\n+import org.apache.doris.common.Pair;\n+import org.apache.doris.planner.OlapScanNode;\n+import org.apache.doris.planner.PlanFragment;\n+import org.apache.doris.planner.Planner;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.qe.StmtExecutor;\n+import org.apache.doris.thrift.TNetworkAddress;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultBeThriftServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultHeartbeatServiceImpl;\n+import org.apache.doris.utframe.MockedBackendFactory.DefaultPBackendServiceImpl;\n+import org.apache.doris.utframe.MockedFrontend.EnvVarNotSetException;\n+import org.apache.doris.utframe.MockedFrontend.FeStartException;\n+import org.apache.doris.utframe.MockedFrontend.NotInitException;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/*\n+ * This demo shows how to run unit test with mocked FE and BE.\n+ * It will\n+ *  1. start a mocked FE and a mocked BE.\n+ *  2. Create a database and a tbl.\n+ *  3. Make a schema change to tbl.\n+ *  4. send a query and get query plan\n+ */\n+public class DemoTest {\n+\n+    private static int fe_http_port;\n+    private static int fe_rpc_port;\n+    private static int fe_query_port;\n+    private static int fe_edit_log_port;\n+\n+    private static int be_heartbeat_port;\n+    private static int be_thrift_port;\n+    private static int be_brpc_port;\n+    private static int be_http_port;\n+    // use a unique dir so that it won't be conflict with other unit test which\n+    // may also start a Mocked Frontend\n+    private static String runningDir = \"fe/mocked/DemoTest\";\n+\n+    @BeforeClass\n+    public static void beforeClass() throws EnvVarNotSetException, IOException,\n+            FeStartException, NotInitException, DdlException, InterruptedException {\n+        // get DORIS_HOME\n+        final String dorisHome = System.getenv(\"DORIS_HOME\");\n+        if (Strings.isNullOrEmpty(dorisHome)) {\n+            throw new EnvVarNotSetException(\"env DORIS_HOME is not set\");\n+        }\n+\n+        getRandomPort();\n+\n+        // start fe in \"DORIS_HOME/fe/mocked/\"\n+        MockedFrontend frontend = MockedFrontend.getInstance();\n+        Map<String, String> feConfMap = Maps.newHashMap();\n+        // set additional fe config\n+        feConfMap.put(\"http_port\", String.valueOf(fe_http_port));\n+        feConfMap.put(\"rpc_port\", String.valueOf(fe_rpc_port));\n+        feConfMap.put(\"query_port\", String.valueOf(fe_query_port));\n+        feConfMap.put(\"edit_log_port\", String.valueOf(fe_edit_log_port));\n+        feConfMap.put(\"tablet_create_timeout_second\", \"10\");\n+        frontend.init(dorisHome + \"/\" + runningDir, feConfMap);\n+        frontend.start(new String[0]);\n+\n+        // start be\n+        MockedBackend backend = MockedBackendFactory.createBackend(\"127.0.0.1\",\n+                be_heartbeat_port, be_thrift_port, be_brpc_port, be_http_port,\n+                new DefaultHeartbeatServiceImpl(be_thrift_port, be_http_port, be_brpc_port),\n+                new DefaultBeThriftServiceImpl(), new DefaultPBackendServiceImpl());\n+        backend.setFeAddress(new TNetworkAddress(\"127.0.0.1\", frontend.getRpcPort()));\n+        backend.start();\n+\n+        // add be\n+        List<Pair<String, Integer>> bes = Lists.newArrayList();\n+        bes.add(Pair.create(backend.getHost(), backend.getHeartbeatPort()));\n+        Catalog.getCurrentSystemInfo().addBackends(bes, false, \"default_cluster\");\n+\n+        // sleep to wait first heartbeat\n+        Thread.sleep(6000);\n+    }\n+\n+    // generate all port from between 20000 ~ 30000\n+    private static void getRandomPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNTM3Ng=="}, "originalCommit": {"oid": "4125441f041b8537e4cafdd0fef112752d37a5f0"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2176, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}