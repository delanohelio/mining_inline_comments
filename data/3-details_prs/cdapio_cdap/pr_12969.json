{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTQxMDQx", "number": 12969, "title": "[CDAP-17466] Authentication functionality for CDAP on Kubernetes setup", "bodyText": "Design document: https://wiki.cask.co/display/CE/Authentication+feature+for+CDAP+on+Kubernetes+deployment\nJIRA Ticket: https://cdap.atlassian.net/browse/CDAP-17466", "createdAt": "2020-12-20T22:24:02Z", "url": "https://github.com/cdapio/cdap/pull/12969", "merged": true, "mergeCommit": {"oid": "34ce269624a50a1a45cd9854dc6eaab1a7afad5a"}, "closed": true, "closedAt": "2021-02-26T18:47:02Z", "author": {"login": "edvinas-maciulis"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnfCwcgH2gAyNTQzMTQxMDQxOmFhYTQ2NTkxMGZlZDRhZmVmZjk1ZmFiNDdlOTcyNzAwNTU4NjA4NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9wMhQAFqTU5OTE5Mzc3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aaa465910fed4afeff95fab47e97270055860843", "author": {"user": {"login": "edvinas-maciulis", "name": "Ed"}}, "url": "https://github.com/cdapio/cdap/commit/aaa465910fed4afeff95fab47e97270055860843", "committedDate": "2020-12-18T21:30:21Z", "message": "[CDAP-17466] Implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODI0NzUy", "url": "https://github.com/cdapio/cdap/pull/12969#pullrequestreview-564824752", "createdAt": "2021-01-10T03:01:42Z", "commit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwMzowMTo0MlrOIQ0IBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwMzoxMzoyNFrOIQ0LnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjE1MQ==", "bodyText": "Please follow the naming convention to use \"authentication\".", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502151", "createdAt": "2021-01-10T03:01:42Z", "author": {"login": "chtyim"}, "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -122,6 +122,7 @@\n     public static final String EXPLORE_HTTP_USER_SERVICE = \"explore.service\";\n     public static final String MESSAGING_SERVICE = \"messaging.service\";\n     public static final String RUNTIME = \"runtime\";\n+    public static final String AUTHENTICATION = \"Authentication\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjI2Mw==", "bodyText": "Generally the long arguments are aligned like this in the rest of the code base:\nprotected List<Module> getServiceModules(MasterEnvironment masterEnv, \n                                         EnvironmentOptions options, \n                                         CConfiguration cConf) {", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502263", "createdAt": "2021-01-10T03:03:22Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjQ1Mg==", "bodyText": "Remove unnecessary empty lines", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502452", "createdAt": "2021-01-10T03:05:11Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjQ5MA==", "bodyText": "Ideally in k8s environment, we should use ZK for the key store, but instead using k8s secrets. Please open a follow up JIRA for that change. We'll need to update the MasterEnvironment to provide an abstraction for secure store.", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502490", "createdAt": "2021-01-10T03:05:44Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+\n+      services.add(new AbstractService() {\n+\n+        @Override\n+        protected void doStart() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjY2OQ==", "bodyText": "So if it fails to connect to ZK, there is just logging but not failing the pod? Is that an intended behavior?", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502669", "createdAt": "2021-01-10T03:07:32Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+\n+      services.add(new AbstractService() {\n+\n+        @Override\n+        protected void doStart() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);\n+          ExternalAuthenticationServer authServer = injector.getInstance(ExternalAuthenticationServer.class);\n+\n+          try {\n+            LOG.info(\"Starting AuthenticationServer.\");\n+\n+            // Enable Kerberos login\n+            SecurityUtil.enableKerberosLogin(configuration);\n+\n+            io.cdap.cdap.common.service.Services.startAndWait(\n+                zkClientService,\n+                configuration.getLong(\n+                    Constants.Zookeeper.CLIENT_STARTUP_TIMEOUT_MILLIS),\n+                TimeUnit.MILLISECONDS,\n+                String.format(\n+                    \"Connection timed out while trying to start \" +\n+                        \"ZooKeeper client. Please verify that the \" +\n+                        \"ZooKeeper quorum settings are correct in \" +\n+                        \"cdap-site.xml. Currently configured as: %s\",\n+                    configuration.get(Constants.Zookeeper.QUORUM)));\n+            authServer.startAndWait();\n+\n+            notifyStarted();\n+          } catch (Exception e) {\n+            Throwable rootCause = Throwables.getRootCause(e);\n+            if (rootCause instanceof ServiceBindException) {\n+              LOG.error(\"Failed to start Authentication Server: {}\", rootCause.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjgxNw==", "bodyText": "It's not good to assume that the ZKClientService is a singleton binding.", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502817", "createdAt": "2021-01-10T03:09:28Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+\n+      services.add(new AbstractService() {\n+\n+        @Override\n+        protected void doStart() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);\n+          ExternalAuthenticationServer authServer = injector.getInstance(ExternalAuthenticationServer.class);\n+\n+          try {\n+            LOG.info(\"Starting AuthenticationServer.\");\n+\n+            // Enable Kerberos login\n+            SecurityUtil.enableKerberosLogin(configuration);\n+\n+            io.cdap.cdap.common.service.Services.startAndWait(\n+                zkClientService,\n+                configuration.getLong(\n+                    Constants.Zookeeper.CLIENT_STARTUP_TIMEOUT_MILLIS),\n+                TimeUnit.MILLISECONDS,\n+                String.format(\n+                    \"Connection timed out while trying to start \" +\n+                        \"ZooKeeper client. Please verify that the \" +\n+                        \"ZooKeeper quorum settings are correct in \" +\n+                        \"cdap-site.xml. Currently configured as: %s\",\n+                    configuration.get(Constants.Zookeeper.QUORUM)));\n+            authServer.startAndWait();\n+\n+            notifyStarted();\n+          } catch (Exception e) {\n+            Throwable rootCause = Throwables.getRootCause(e);\n+            if (rootCause instanceof ServiceBindException) {\n+              LOG.error(\"Failed to start Authentication Server: {}\", rootCause.getMessage());\n+            } else {\n+              LOG.error(\"Failed to start Authentication Server\", e);\n+            }\n+          }\n+        }\n+\n+        @Override\n+        protected void doStop() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMjg2MA==", "bodyText": "Same as above", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554502860", "createdAt": "2021-01-10T03:09:58Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+\n+      services.add(new AbstractService() {\n+\n+        @Override\n+        protected void doStart() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);\n+          ExternalAuthenticationServer authServer = injector.getInstance(ExternalAuthenticationServer.class);\n+\n+          try {\n+            LOG.info(\"Starting AuthenticationServer.\");\n+\n+            // Enable Kerberos login\n+            SecurityUtil.enableKerberosLogin(configuration);\n+\n+            io.cdap.cdap.common.service.Services.startAndWait(\n+                zkClientService,\n+                configuration.getLong(\n+                    Constants.Zookeeper.CLIENT_STARTUP_TIMEOUT_MILLIS),\n+                TimeUnit.MILLISECONDS,\n+                String.format(\n+                    \"Connection timed out while trying to start \" +\n+                        \"ZooKeeper client. Please verify that the \" +\n+                        \"ZooKeeper quorum settings are correct in \" +\n+                        \"cdap-site.xml. Currently configured as: %s\",\n+                    configuration.get(Constants.Zookeeper.QUORUM)));\n+            authServer.startAndWait();\n+\n+            notifyStarted();\n+          } catch (Exception e) {\n+            Throwable rootCause = Throwables.getRootCause(e);\n+            if (rootCause instanceof ServiceBindException) {\n+              LOG.error(\"Failed to start Authentication Server: {}\", rootCause.getMessage());\n+            } else {\n+              LOG.error(\"Failed to start Authentication Server\", e);\n+            }\n+          }\n+        }\n+\n+        @Override\n+        protected void doStop() {\n+\n+          ZKClientService zkClientService = injector.getInstance(ZKClientService.class);\n+          ExternalAuthenticationServer authServer = injector.getInstance(ExternalAuthenticationServer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUwMzA2OA==", "bodyText": "I don't quite get the idea of this service. It seems like both the ZKClientService and the ExternalAuthenticationServer has been started/stopped twice since they are also added in line 134, 135", "url": "https://github.com/cdapio/cdap/pull/12969#discussion_r554503068", "createdAt": "2021-01-10T03:13:24Z", "author": {"login": "chtyim"}, "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/AuthenticationServiceMain.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.AbstractService;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.cdap.cdap.common.ServiceBindException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.ZKClientModule;\n+import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n+import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.guice.SecurityModules;\n+import io.cdap.cdap.security.impersonation.SecurityUtil;\n+import io.cdap.cdap.security.server.ExternalAuthenticationServer;\n+import org.apache.twill.internal.Services;\n+import org.apache.twill.zookeeper.ZKClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The main class responsible for Authentication  .\n+ */\n+public class AuthenticationServiceMain extends AbstractServiceMain<EnvironmentOptions> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationServiceMain.class);\n+\n+  public static void main(String[] args) throws Exception {\n+    main(AuthenticationServiceMain.class, args);\n+  }\n+\n+  @Override\n+  protected List<Module> getServiceModules(\n+      MasterEnvironment masterEnv, EnvironmentOptions options, CConfiguration cConf) {\n+    return Arrays.asList(\n+        getDataFabricModule(),\n+        new ZKClientModule(),\n+        new SecurityModules().getDistributedModules(),\n+        new MessagingClientModule());\n+  }\n+\n+  @Override\n+  protected void addServices(\n+      Injector injector, List<? super Service> services, List<? super AutoCloseable> closeableResources,\n+      MasterEnvironment masterEnv, MasterEnvironmentContext masterEnvContext, EnvironmentOptions options) {\n+\n+    MessagingService messagingService = injector.getInstance(MessagingService.class);\n+    if (messagingService instanceof Service) {\n+      services.add((Service) messagingService);\n+    }\n+\n+    CConfiguration configuration = injector.getInstance(CConfiguration.class);\n+\n+    if (configuration.getBoolean(Constants.Security.ENABLED)) {\n+\n+      services.add(new AbstractService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa465910fed4afeff95fab47e97270055860843"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2a9edbc992b81735a958d871bdfa87f3346ae4", "author": {"user": {"login": "edvinas-maciulis", "name": "Ed"}}, "url": "https://github.com/cdapio/cdap/commit/4e2a9edbc992b81735a958d871bdfa87f3346ae4", "committedDate": "2021-01-19T21:49:14Z", "message": "Update as per PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6382c0ef9ed0e551fa441d301ea3b27a4620e60f", "author": {"user": {"login": "edvinas-maciulis", "name": "Ed"}}, "url": "https://github.com/cdapio/cdap/commit/6382c0ef9ed0e551fa441d301ea3b27a4620e60f", "committedDate": "2021-01-20T14:56:44Z", "message": "removed unnecessary code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMzA3MjU0", "url": "https://github.com/cdapio/cdap/pull/12969#pullrequestreview-572307254", "createdAt": "2021-01-20T14:57:57Z", "commit": {"oid": "6382c0ef9ed0e551fa441d301ea3b27a4620e60f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efbd2dca4c8c4e7756d972361d06484dbc6808d9", "author": {"user": {"login": "edvinas-maciulis", "name": "Ed"}}, "url": "https://github.com/cdapio/cdap/commit/efbd2dca4c8c4e7756d972361d06484dbc6808d9", "committedDate": "2021-01-23T21:51:20Z", "message": "[CDAP-17466] added missing test Keystore file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e960c5966c33af9a355bb6efdf94ad22537f34f1", "author": {"user": {"login": "edvinas-maciulis", "name": "Ed"}}, "url": "https://github.com/cdapio/cdap/commit/e960c5966c33af9a355bb6efdf94ad22537f34f1", "committedDate": "2021-01-23T22:07:29Z", "message": "[CDAP-17466] holding onto ZKClientService and AuthenticationServer instances - later we are sure that we are stopping the instances we started"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MTkzNzc1", "url": "https://github.com/cdapio/cdap/pull/12969#pullrequestreview-599193775", "createdAt": "2021-02-26T01:55:44Z", "commit": {"oid": "e960c5966c33af9a355bb6efdf94ad22537f34f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}