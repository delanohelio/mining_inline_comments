{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NzQ0MDIx", "number": 12890, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjoyMTozMFrOFCsayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDo0OTozOVrOFDNl3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzY5MjI3OnYy", "diffSide": "RIGHT", "path": "cdap-common/src/main/resources/cdap-default.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjoyMTozMVrOIB_Kxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDoxMDo1MFrOICBb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1NDQzOQ==", "bodyText": "Usually the unit is in the config name. E.g. system.program.scan.interval.seconds", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r538954439", "createdAt": "2020-12-09T02:21:31Z", "author": {"login": "chtyim"}, "path": "cdap-common/src/main/resources/cdap-default.xml", "diffHunk": "@@ -4136,4 +4136,12 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>system.program.scan.interval</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e8e672f05b4cd6d94dad6ee2c87f286c3e00810"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5MTU3Nw==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r538991577", "createdAt": "2020-12-09T04:10:50Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-common/src/main/resources/cdap-default.xml", "diffHunk": "@@ -4136,4 +4136,12 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>system.program.scan.interval</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1NDQzOQ=="}, "originalCommit": {"oid": "3e8e672f05b4cd6d94dad6ee2c87f286c3e00810"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI3OTk5OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowOTozOVrOICEHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDowNDowNVrOICnESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNTU5NA==", "bodyText": "Please override the executor() method to use daemon thread and the shutdown method for executor termination.\nAlternative, you can extend from the AbstractRetryableScheduledService instead. It uses daemon thread, and handle failure retries and logging.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539035594", "createdAt": "2020-12-09T06:09:39Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MDI4Ng==", "bodyText": "Going with first option. Since we run this service very frequently, are retries required on each iteration?", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539560286", "createdAt": "2020-12-09T18:50:03Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNTU5NA=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MjU3NQ==", "bodyText": "The retry strategy simply provide a different delay than the regular one for the next iteration to run. E.g. if it runs regularly at 10 seconds interval, upon failure, you can do an exponential increase of the interval (e.g. 1, 2, 4, 8) till a max depending on the failure type.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539562575", "createdAt": "2020-12-09T18:53:37Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNTU5NA=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwODEzNw==", "bodyText": "Got it, thanks.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539608137", "createdAt": "2020-12-09T20:04:05Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNTU5NA=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI4NzMxOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxMjoyM1rOICELsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0Nzo0OVrOICkDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNjU5NQ==", "bodyText": "Is the Map<String, String> the runtime arguments? If it is, you need to copy the map as well. Better yet, use the Arguments interface.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539036595", "createdAt": "2020-12-09T06:12:23Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODc0NA==", "bodyText": "Using Arguments.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558744", "createdAt": "2020-12-09T18:47:49Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNjU5NQ=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI5MDEyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxMzozNVrOICENTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NzozN1rOICkC7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAwNA==", "bodyText": "No need to copy again since in the set method you always replace with a new Map copy.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539037004", "createdAt": "2020-12-09T06:13:35Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODYzOQ==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558639", "createdAt": "2020-12-09T18:47:37Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAwNA=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI5MTc2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxNDoxOVrOICEOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NzoyOFrOICkCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzIyOQ==", "bodyText": "You can just keep a Set<ProgramRunId> for programRunsToStop.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539037229", "createdAt": "2020-12-09T06:14:19Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODQ5Mg==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558492", "createdAt": "2020-12-09T18:47:28Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzIyOQ=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI5NDI4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxNToxNVrOICEPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NzoxOFrOICkBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzU2Nw==", "bodyText": "It is better to list all program types instead of hardcoded to SERVICE.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539037567", "createdAt": "2020-12-09T06:15:15Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODMyOA==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558328", "createdAt": "2020-12-09T18:47:18Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzU2Nw=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI5OTI2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxNzowMVrOICESMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NzoxMFrOICkBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODI1OA==", "bodyText": "All similar method should use program instead of service (e.g. stopProgram)", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539038258", "createdAt": "2020-12-09T06:17:01Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);\n+    //Find services to delete and already running services\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system services\n+        continue;\n+      }\n+      if (!enabledServices.contains(programId)) {\n+        servicesToStop.add(programId);\n+      } else {\n+        servicesRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find services to start\n+    Set<ProgramId> servicesToStart = enabledServices.stream()\n+      .filter(programId -> !servicesRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start services\n+    startServices(servicesToStart, enabledServicesMap);\n+    //stop services\n+    servicesToStop.forEach(this::stopService);\n+    //stop extra runs for enabled services\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService\n+      .getRunRecordMeta(runtimeInfo.getController().getProgramRunId());\n+    programLastRunMap.putIfAbsent(programId, runRecordMeta);\n+    programLastRunMap.put(programId, getLatestRunRecord(programLastRunMap.get(programId), runRecordMeta));\n+  }\n+\n+  private void startServices(Set<ProgramId> servicesToStart, Map<ProgramId, Map<String, String>> enabledServicesMap) {\n+    for (ProgramId programId : servicesToStart) {\n+      Map<String, String> overrides = enabledServicesMap.get(programId);\n+      LOG.debug(\"Starting program {} with args {}\", programId, overrides);\n+      try {\n+        programLifecycleService.start(programId, overrides, false);\n+      } catch (Exception ex) {\n+        LOG.error(\"Could not start program\", ex);\n+      }\n+    }\n+  }\n+\n+  private void stopService(ProgramId programId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODIwOA==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558208", "createdAt": "2020-12-09T18:47:10Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);\n+    //Find services to delete and already running services\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system services\n+        continue;\n+      }\n+      if (!enabledServices.contains(programId)) {\n+        servicesToStop.add(programId);\n+      } else {\n+        servicesRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find services to start\n+    Set<ProgramId> servicesToStart = enabledServices.stream()\n+      .filter(programId -> !servicesRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start services\n+    startServices(servicesToStart, enabledServicesMap);\n+    //stop services\n+    servicesToStop.forEach(this::stopService);\n+    //stop extra runs for enabled services\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService\n+      .getRunRecordMeta(runtimeInfo.getController().getProgramRunId());\n+    programLastRunMap.putIfAbsent(programId, runRecordMeta);\n+    programLastRunMap.put(programId, getLatestRunRecord(programLastRunMap.get(programId), runRecordMeta));\n+  }\n+\n+  private void startServices(Set<ProgramId> servicesToStart, Map<ProgramId, Map<String, String>> enabledServicesMap) {\n+    for (ProgramId programId : servicesToStart) {\n+      Map<String, String> overrides = enabledServicesMap.get(programId);\n+      LOG.debug(\"Starting program {} with args {}\", programId, overrides);\n+      try {\n+        programLifecycleService.start(programId, overrides, false);\n+      } catch (Exception ex) {\n+        LOG.error(\"Could not start program\", ex);\n+      }\n+    }\n+  }\n+\n+  private void stopService(ProgramId programId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODI1OA=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDMwMzcwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxODo0MVrOICEUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0NzowM1rOICkA5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODg3Nw==", "bodyText": "Please log with more context. E.g. \"LOG.warn(Could not stop program {}. Will be retried\", programId, ex).\nAlso, it should be logged as warning since it is not a fatal error and it will get retried.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539038877", "createdAt": "2020-12-09T06:18:41Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);\n+    //Find services to delete and already running services\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system services\n+        continue;\n+      }\n+      if (!enabledServices.contains(programId)) {\n+        servicesToStop.add(programId);\n+      } else {\n+        servicesRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find services to start\n+    Set<ProgramId> servicesToStart = enabledServices.stream()\n+      .filter(programId -> !servicesRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start services\n+    startServices(servicesToStart, enabledServicesMap);\n+    //stop services\n+    servicesToStop.forEach(this::stopService);\n+    //stop extra runs for enabled services\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService\n+      .getRunRecordMeta(runtimeInfo.getController().getProgramRunId());\n+    programLastRunMap.putIfAbsent(programId, runRecordMeta);\n+    programLastRunMap.put(programId, getLatestRunRecord(programLastRunMap.get(programId), runRecordMeta));\n+  }\n+\n+  private void startServices(Set<ProgramId> servicesToStart, Map<ProgramId, Map<String, String>> enabledServicesMap) {\n+    for (ProgramId programId : servicesToStart) {\n+      Map<String, String> overrides = enabledServicesMap.get(programId);\n+      LOG.debug(\"Starting program {} with args {}\", programId, overrides);\n+      try {\n+        programLifecycleService.start(programId, overrides, false);\n+      } catch (Exception ex) {\n+        LOG.error(\"Could not start program\", ex);\n+      }\n+    }\n+  }\n+\n+  private void stopService(ProgramId programId) {\n+    LOG.debug(\"Stopping program {} \", programId);\n+    try {\n+      programLifecycleService.stop(programId);\n+    } catch (Exception ex) {\n+      LOG.error(\"Could not stop program\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODExNg==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539558116", "createdAt": "2020-12-09T18:47:03Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring services are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Map<String, String>>> programsEnabled;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of services that are currently enabled along with their runtime args.\n+   * The services that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Map<String, String>> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Services to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcileServices();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in reconciling services\", ex);\n+    }\n+  }\n+\n+  private void reconcileServices() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Map<String, String>> enabledServicesMap = new HashMap<>(this.programsEnabled.get());\n+    Set<ProgramId> enabledServices = enabledServicesMap.keySet();\n+    Set<ProgramId> servicesToStop = new HashSet<>();\n+    Set<ProgramId> servicesRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.SERVICE);\n+    //Find services to delete and already running services\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system services\n+        continue;\n+      }\n+      if (!enabledServices.contains(programId)) {\n+        servicesToStop.add(programId);\n+      } else {\n+        servicesRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find services to start\n+    Set<ProgramId> servicesToStart = enabledServices.stream()\n+      .filter(programId -> !servicesRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start services\n+    startServices(servicesToStart, enabledServicesMap);\n+    //stop services\n+    servicesToStop.forEach(this::stopService);\n+    //stop extra runs for enabled services\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService\n+      .getRunRecordMeta(runtimeInfo.getController().getProgramRunId());\n+    programLastRunMap.putIfAbsent(programId, runRecordMeta);\n+    programLastRunMap.put(programId, getLatestRunRecord(programLastRunMap.get(programId), runRecordMeta));\n+  }\n+\n+  private void startServices(Set<ProgramId> servicesToStart, Map<ProgramId, Map<String, String>> enabledServicesMap) {\n+    for (ProgramId programId : servicesToStart) {\n+      Map<String, String> overrides = enabledServicesMap.get(programId);\n+      LOG.debug(\"Starting program {} with args {}\", programId, overrides);\n+      try {\n+        programLifecycleService.start(programId, overrides, false);\n+      } catch (Exception ex) {\n+        LOG.error(\"Could not start program\", ex);\n+      }\n+    }\n+  }\n+\n+  private void stopService(ProgramId programId) {\n+    LOG.debug(\"Stopping program {} \", programId);\n+    try {\n+      programLifecycleService.stop(programId);\n+    } catch (Exception ex) {\n+      LOG.error(\"Could not stop program\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODg3Nw=="}, "originalCommit": {"oid": "4bb974cff883b5e877d8ec4e4f8dcb98ccf0af35"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzgzMDIwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTowNDo1OFrOICkvlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDowNDoxNFrOICnEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MDA3MQ==", "bodyText": "These two lines can be combined as:\nprogramRunsMap.computeIfAbsent(programId, k -> new ArrayList<>()).add(runtimeInfo);", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539570071", "createdAt": "2020-12-09T19:04:58Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcilePrograms();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in iteration of reconciling programs\", ex);\n+    }\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    if (executor != null) {\n+      executor.shutdown();\n+    }\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.values());\n+    //Find programs to delete and already running programs\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system programs\n+        continue;\n+      }\n+      if (!enabledPrograms.contains(programId)) {\n+        programsToStop.add(runtimeInfo.getController().getProgramRunId());\n+      } else {\n+        programsRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find programs to start\n+    Set<ProgramId> programsToStart = enabledPrograms.stream()\n+      .filter(programId -> !programsRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start programs\n+    startPrograms(programsToStart, enabledProgramsMap);\n+    //stop programs\n+    programsToStop.forEach(this::stopProgram);\n+    //stop extra runs for enabled programs\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46bc6926d4eef0b6c84fdf78eabc4f0d88c67ff4"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwODI1Mg==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539608252", "createdAt": "2020-12-09T20:04:14Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcilePrograms();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in iteration of reconciling programs\", ex);\n+    }\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    if (executor != null) {\n+      executor.shutdown();\n+    }\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.values());\n+    //Find programs to delete and already running programs\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system programs\n+        continue;\n+      }\n+      if (!enabledPrograms.contains(programId)) {\n+        programsToStop.add(runtimeInfo.getController().getProgramRunId());\n+      } else {\n+        programsRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find programs to start\n+    Set<ProgramId> programsToStart = enabledPrograms.stream()\n+      .filter(programId -> !programsRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start programs\n+    startPrograms(programsToStart, enabledProgramsMap);\n+    //stop programs\n+    programsToStop.forEach(this::stopProgram);\n+    //stop extra runs for enabled programs\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MDA3MQ=="}, "originalCommit": {"oid": "46bc6926d4eef0b6c84fdf78eabc4f0d88c67ff4"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzgzNjIzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTowNjozMFrOICkzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDowNDo1NFrOICnGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MDk5NQ==", "bodyText": "Why need to load the run record? The runId has time encoded in it. You can simply order the runs by timestamp. See RunIds.getTime() method.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539570995", "createdAt": "2020-12-09T19:06:30Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcilePrograms();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in iteration of reconciling programs\", ex);\n+    }\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    if (executor != null) {\n+      executor.shutdown();\n+    }\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.values());\n+    //Find programs to delete and already running programs\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system programs\n+        continue;\n+      }\n+      if (!enabledPrograms.contains(programId)) {\n+        programsToStop.add(runtimeInfo.getController().getProgramRunId());\n+      } else {\n+        programsRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find programs to start\n+    Set<ProgramId> programsToStart = enabledPrograms.stream()\n+      .filter(programId -> !programsRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start programs\n+    startPrograms(programsToStart, enabledProgramsMap);\n+    //stop programs\n+    programsToStop.forEach(this::stopProgram);\n+    //stop extra runs for enabled programs\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46bc6926d4eef0b6c84fdf78eabc4f0d88c67ff4"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwODcwMg==", "bodyText": "Thanks, this makes it simpler.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539608702", "createdAt": "2020-12-09T20:04:54Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.common.util.concurrent.AbstractScheduledService;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected void runOneIteration() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set\");\n+      return;\n+    }\n+    try {\n+      reconcilePrograms();\n+    } catch (Exception ex) {\n+      //catch here so a single iteration doesn't stop the service\n+      LOG.error(\"Error in iteration of reconciling programs\", ex);\n+    }\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    if (executor != null) {\n+      executor.shutdown();\n+    }\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap = new HashMap<>();\n+    Map<ProgramId, RunRecordDetail> programLatestRunMap = new HashMap<>();\n+    //Get all current runs\n+    List<ProgramRuntimeService.RuntimeInfo> runtimeInfos = programRuntimeService.listAll(ProgramType.values());\n+    //Find programs to delete and already running programs\n+    for (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n+      ProgramId programId = runtimeInfo.getProgramId();\n+      if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n+        //We care only about system programs\n+        continue;\n+      }\n+      if (!enabledPrograms.contains(programId)) {\n+        programsToStop.add(runtimeInfo.getController().getProgramRunId());\n+      } else {\n+        programsRunning.add(programId);\n+        //gather run records to stop extra runs for each program\n+        gatherRunRecords(programRunsMap, programLatestRunMap, runtimeInfo, programId);\n+      }\n+    }\n+    //find programs to start\n+    Set<ProgramId> programsToStart = enabledPrograms.stream()\n+      .filter(programId -> !programsRunning.contains(programId))\n+      .collect(Collectors.toSet());\n+    //start programs\n+    startPrograms(programsToStart, enabledProgramsMap);\n+    //stop programs\n+    programsToStop.forEach(this::stopProgram);\n+    //stop extra runs for enabled programs\n+    pruneRuns(programRunsMap, programLatestRunMap);\n+  }\n+\n+  private void gatherRunRecords(Map<ProgramId, List<ProgramRuntimeService.RuntimeInfo>> programRunsMap,\n+                                Map<ProgramId, RunRecordDetail> programLastRunMap,\n+                                ProgramRuntimeService.RuntimeInfo runtimeInfo, ProgramId programId) throws Exception {\n+    programRunsMap.putIfAbsent(programId, new ArrayList<>());\n+    programRunsMap.get(programId).add(runtimeInfo);\n+    //Gather the latest run as we go\n+    RunRecordDetail runRecordMeta = programLifecycleService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MDk5NQ=="}, "originalCommit": {"oid": "46bc6926d4eef0b6c84fdf78eabc4f0d88c67ff4"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODcyNzI4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0MjoyNlrOICs4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0MjoyNlrOICs4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwMzM4NQ==", "bodyText": "You don't need this. Just do a enabledProgramsMap.contains(programId) check", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539703385", "createdAt": "2020-12-09T22:42:26Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde668f0886a6c1be2335978d16ba76f66dd4687"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODc3NDI5OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1NjoyOFrOICtTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozNToyNVrOICuaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMDIwOQ==", "bodyText": "I think you can simplify these couple maps and sets into this:\nMap<ProgramId, Arguments> programsEnabled = new HashMap<>(this.programsEnabled.get());\nSet<ProgramRunId> programRunsToStop = new HashSet<>();\n\nList<ProgramRuntimeService.RuntimeInfo> runtimeInfos = new ArrayList<>(programRuntimeService.listAll(ProgramType.values()));\n// Sort by descending order of runId time.\nruntimeInfos.sort((o1, o2) -> Long.compare(RunIds.getTime(o2.getController().getRunId(), TimeUnit.MILLISECONDS), \n                                           RunIds.getTime(o1.getController().getRunId(), TimeUnit.MILLISECONDS)));\n\nfor (ProgramRuntimeService.RuntimeInfo runtimeInfo : runtimeInfos) {\n  ProgramId programId = runtimeInfo.getProgramId();\n  if (!programId.getNamespaceId().equals(NamespaceId.SYSTEM)) {\n    continue;\n  }\n  // Remove the enabled program if it already running.\n  // If the program is not in the map, it means this particular run shouldn't be running (either not enabled or have multiple copies running)\n  if (programsEnabled.remove(programId) == null) {\n    programRunsToStop.add(programId.run(runtimeInfo.getController().getRunId());\n  }\n}\n\nstartAllPrograms(programsEnabled);\nstopAllProgramRuns(programRunsToStop);", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539710209", "createdAt": "2020-12-09T22:56:28Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Map<ProgramId, SortedSet<ProgramRunId>> programRunsMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde668f0886a6c1be2335978d16ba76f66dd4687"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyODQ1NA==", "bodyText": "Thanks, cleaned up.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539728454", "createdAt": "2020-12-09T23:35:25Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    //take a copy\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();\n+    Set<ProgramId> enabledPrograms = enabledProgramsMap.keySet();\n+    Set<ProgramId> programsRunning = new HashSet<>();\n+    Set<ProgramRunId> programsToStop = new HashSet<>();\n+    Map<ProgramId, SortedSet<ProgramRunId>> programRunsMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMDIwOQ=="}, "originalCommit": {"oid": "bde668f0886a6c1be2335978d16ba76f66dd4687"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk2OTQxOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1NToyNVrOICu-qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozODozNlrOICwCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNzc2OQ==", "bodyText": "No need to override this method.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539737769", "createdAt": "2020-12-09T23:55:25Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NTIxMA==", "bodyText": "Removed.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539755210", "createdAt": "2020-12-10T00:38:36Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNzc2OQ=="}, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk3MzEzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1Njo0NlrOICvAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozODo0N1rOICwDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODMwNQ==", "bodyText": "Need to make a copy of the map from the atomic reference since we are removing entries from it below", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539738305", "createdAt": "2020-12-09T23:56:46Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NTI3OQ==", "bodyText": "Done.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539755279", "createdAt": "2020-12-10T00:38:47Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;\n+    }\n+    reconcilePrograms();\n+    return scheduleInterval;\n+  }\n+\n+  @Override\n+  protected ScheduledExecutorService executor() {\n+    executor = Executors\n+      .newSingleThreadScheduledExecutor(Threads.createDaemonThreadFactory(this.getClass().getSimpleName()));\n+    return executor;\n+  }\n+\n+  private void reconcilePrograms() throws Exception {\n+    Map<ProgramId, Arguments> enabledProgramsMap = this.programsEnabled.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODMwNQ=="}, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk3ODA4OnYy", "diffSide": "RIGHT", "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1ODozMVrOICvDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozOTowMVrOICwDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5MQ==", "bodyText": "call the variable SYSTEM_PROGRAM_SCAN_INTERVAL_SECONDS", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539738991", "createdAt": "2020-12-09T23:58:31Z", "author": {"login": "chtyim"}, "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -299,6 +299,11 @@\n      */\n     public static final String PROGRAM_STATUS_RECORD_EVENT_TOPIC = \"program.status.record.event.topic\";\n \n+    /**\n+     * Interval at which system programs are monitored\n+     */\n+    public static final String PROGRAM_SCAN_INTERVAL = \"system.program.scan.interval.seconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NTM1OA==", "bodyText": "Changed.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539755358", "createdAt": "2020-12-10T00:39:01Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -299,6 +299,11 @@\n      */\n     public static final String PROGRAM_STATUS_RECORD_EVENT_TOPIC = \"program.status.record.event.topic\";\n \n+    /**\n+     * Interval at which system programs are monitored\n+     */\n+    public static final String PROGRAM_SCAN_INTERVAL = \"system.program.scan.interval.seconds\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5MQ=="}, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk4MjEwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1OTo1OFrOICvFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozOToxMFrOICwDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczOTU3Nw==", "bodyText": "I think the parent class expects the time returned is in milliseconds, while this interval is in seconds. You should do the conversion in the constructor. Generally it is good to carry the unit in the variable name. E.g. scheduleIntervalMillis.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539739577", "createdAt": "2020-12-09T23:59:58Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NTQyMQ==", "bodyText": "Done.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539755421", "createdAt": "2020-12-10T00:39:10Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleInterval;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;\n+\n+  @Inject\n+  SystemProgramManagementService(CConfiguration cConf, ProgramRuntimeService programRuntimeService,\n+                                 ProgramLifecycleService programLifecycleService) {\n+    super(RetryStrategies.fixDelay(cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL), TimeUnit.SECONDS));\n+    this.cConf = cConf;\n+    this.scheduleInterval = cConf.getLong(Constants.AppFabric.PROGRAM_SCAN_INTERVAL);\n+    this.programRuntimeService = programRuntimeService;\n+    this.programLifecycleService = programLifecycleService;\n+    this.programsEnabled = new AtomicReference<>();\n+  }\n+\n+  /**\n+   * Sets the map of programs that are currently enabled along with their runtime args.\n+   * The programs that are not present in map will be stopped during the next run of the service.\n+   *\n+   * @param programsEnabled\n+   */\n+  public void setProgramsEnabled(Map<ProgramId, Arguments> programsEnabled) {\n+    this.programsEnabled.set(new HashMap<>(programsEnabled));\n+  }\n+\n+  @Override\n+  protected long runTask() throws Exception {\n+    if (programsEnabled.get() == null) {\n+      LOG.debug(\"Programs to run not yet set, will be retried.\");\n+      return scheduleInterval;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczOTU3Nw=="}, "originalCommit": {"oid": "45ee879cd15486ef28ed8bb9b0064cd084a70d74"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTEyNzMzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDo0OTozOVrOICwTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxOTo0OVrOICw-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1OTU1MA==", "bodyText": "Unused field?", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539759550", "createdAt": "2020-12-10T00:49:39Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleIntervalInMillis;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115c3fdd83100e893a4d5c3ef6a9e465f2629b03"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDU2Mg==", "bodyText": "Removed.", "url": "https://github.com/cdapio/cdap/pull/12890#discussion_r539770562", "createdAt": "2020-12-10T01:19:49Z", "author": {"login": "greeshmaswaminathan"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/SystemProgramManagementService.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.services;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * System program management service for ensuring programs are running/stopped as expected\n+ */\n+public class SystemProgramManagementService extends AbstractRetryableScheduledService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemProgramManagementService.class);\n+\n+  private final long scheduleIntervalInMillis;\n+  private final CConfiguration cConf;\n+  private final ProgramRuntimeService programRuntimeService;\n+  private final ProgramLifecycleService programLifecycleService;\n+  private final AtomicReference<Map<ProgramId, Arguments>> programsEnabled;\n+  private ScheduledExecutorService executor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1OTU1MA=="}, "originalCommit": {"oid": "115c3fdd83100e893a4d5c3ef6a9e465f2629b03"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2552, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}