{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODY3NDMw", "number": 12708, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0Nzo1OVrOEbogrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxNTo0N1rOE859jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDEwNzMzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0Nzo1OVrOHFrPvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyODozNFrOHHWWvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMzQ3MA==", "bodyText": "This should probably get added to the widget attributes as well.  (Same goes for other widgets).", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r475713470", "createdAt": "2020-08-24T15:47:59Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MjQ2OA==", "bodyText": "I'd prefer to address that for other widgets in another PR. In particular, I'd prefer to have this be disableUnderline as the material-ui components have it, but the default is already set for our widgets. Maybe it can be addressed during the UI framework work.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r476552468", "createdAt": "2020-08-25T15:48:35Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMzQ3MA=="}, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0MDg1MQ==", "bodyText": "Got it. In that case, maybe we can go ahead and create a JIRA for that (or document it elsewhere) and add a TO DO comment?", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477440851", "createdAt": "2020-08-26T16:43:26Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMzQ3MA=="}, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2ODM0OA==", "bodyText": "Added https://issues.cask.co/browse/CDAP-17244", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477468348", "createdAt": "2020-08-26T17:28:34Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMzQ3MA=="}, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTA4MzIxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/parser.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozOTo1NFrOHHWxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDoxMDozMlrOHHb-hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NTEwMg==", "bodyText": "Is there a comma missing after field?", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477475102", "createdAt": "2020-08-26T17:39:54Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/parser.ts", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+export function parse(value) {\n+  const colonIndex = value.indexOf(':');\n+  // const [alias, fn] = value.split(':');\n+  const alias = value.substring(0, colonIndex);\n+  const fn = value.substring(colonIndex + 1);\n+\n+  const defaultResponse = {\n+    alias,\n+    func: '',\n+    field: '',\n+    ignoreNulls: true,\n+    arguments: '',\n+  };\n+\n+  if (!fn) {\n+    return defaultResponse;\n+  }\n+\n+  const openBracketIndex = fn.indexOf('(');\n+  const closeBracketIndex = fn.indexOf(')');\n+\n+  if (openBracketIndex === -1 || closeBracketIndex === -1) {\n+    return defaultResponse;\n+  }\n+\n+  const params = fn.substring(openBracketIndex + 1, closeBracketIndex).split(',');\n+  const field = params[0];\n+  const ignoreNulls = params[params.length - 1] !== 'false';\n+\n+  let args = '';\n+  if (params.length > 2) {\n+    args = decodeURIComponent(params.slice(1, params.length - 1).join(','));\n+  }\n+\n+  return {\n+    alias,\n+    func: fn.substring(0, openBracketIndex),\n+    field,\n+    ignoreNulls,\n+    arguments: args,\n+  };\n+}\n+\n+export function serialize(fields) {\n+  const { field, func, alias, arguments: args, ignoreNulls } = fields;\n+\n+  if (field.length === 0 || func.length === 0 || alias.length === 0) {\n+    return '';\n+  }\n+\n+  const trimmedArgs = args && args.trim();\n+  const argumentString =\n+    trimmedArgs && trimmedArgs.length > 0 ? `,${encodeURIComponent(trimmedArgs)}` : '';\n+\n+  const updatedValue = `${alias}:${func}(${field}${argumentString},${!!ignoreNulls})`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU2MDQ1NA==", "bodyText": "That's handled in argumentString (L68-69)", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477560454", "createdAt": "2020-08-26T20:10:32Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/parser.ts", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+export function parse(value) {\n+  const colonIndex = value.indexOf(':');\n+  // const [alias, fn] = value.split(':');\n+  const alias = value.substring(0, colonIndex);\n+  const fn = value.substring(colonIndex + 1);\n+\n+  const defaultResponse = {\n+    alias,\n+    func: '',\n+    field: '',\n+    ignoreNulls: true,\n+    arguments: '',\n+  };\n+\n+  if (!fn) {\n+    return defaultResponse;\n+  }\n+\n+  const openBracketIndex = fn.indexOf('(');\n+  const closeBracketIndex = fn.indexOf(')');\n+\n+  if (openBracketIndex === -1 || closeBracketIndex === -1) {\n+    return defaultResponse;\n+  }\n+\n+  const params = fn.substring(openBracketIndex + 1, closeBracketIndex).split(',');\n+  const field = params[0];\n+  const ignoreNulls = params[params.length - 1] !== 'false';\n+\n+  let args = '';\n+  if (params.length > 2) {\n+    args = decodeURIComponent(params.slice(1, params.length - 1).join(','));\n+  }\n+\n+  return {\n+    alias,\n+    func: fn.substring(0, openBracketIndex),\n+    field,\n+    ignoreNulls,\n+    arguments: args,\n+  };\n+}\n+\n+export function serialize(fields) {\n+  const { field, func, alias, arguments: args, ignoreNulls } = fields;\n+\n+  if (field.length === 0 || func.length === 0 || alias.length === 0) {\n+    return '';\n+  }\n+\n+  const trimmedArgs = args && args.trim();\n+  const argumentString =\n+    trimmedArgs && trimmedArgs.length > 0 ? `,${encodeURIComponent(trimmedArgs)}` : '';\n+\n+  const updatedValue = `${alias}:${func}(${field}${argumentString},${!!ignoreNulls})`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NTEwMg=="}, "originalCommit": {"oid": "c8979e089763c10343f0b382fba1224f1fc0cd63"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTA5MjYxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/__tests__/parser.tests.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0MjozNlrOHHW3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDoxODozNlrOHHcOcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NjYyNQ==", "bodyText": "Is it possible for an argument to include parentheses?", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477476625", "createdAt": "2020-08-26T17:42:36Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/__tests__/parser.tests.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+\n+describe('FunctionDropdownArgumentsRow', () => {\n+  describe('parser', () => {\n+    describe('parse', () => {\n+      it('should parse a string with no arguments', () => {\n+        expect(parse('myAlias:myFunc(field1,true)')).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: '',\n+        });\n+      });\n+\n+      it('should parse a string with ignoreNulls false', () => {\n+        expect(parse('myAlias:myFunc(field1,false)')).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: false,\n+          arguments: '',\n+        });\n+      });\n+\n+      it('should parse a string with one argument', () => {\n+        expect(parse(`myAlias:myFunc(field1,${encodeURIComponent('a')},true)`)).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: 'a',\n+        });\n+      });\n+\n+      it('should parse a string with multiple arguments', () => {\n+        expect(parse(`myAlias:myFunc(field1,${encodeURIComponent('a,b,c')},true)`)).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: 'a,b,c',\n+        });\n+      });\n+\n+      it('should parse an argument with a colon', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291e2e340babeda4347f498a01acb067ad994e97"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU2NDUzMQ==", "bodyText": "Let me confirm with Bhooshan. For now, I'm assuming \"no\", since encodeURLComponent doesn't encode them.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r477564531", "createdAt": "2020-08-26T20:18:36Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/__tests__/parser.tests.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+\n+describe('FunctionDropdownArgumentsRow', () => {\n+  describe('parser', () => {\n+    describe('parse', () => {\n+      it('should parse a string with no arguments', () => {\n+        expect(parse('myAlias:myFunc(field1,true)')).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: '',\n+        });\n+      });\n+\n+      it('should parse a string with ignoreNulls false', () => {\n+        expect(parse('myAlias:myFunc(field1,false)')).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: false,\n+          arguments: '',\n+        });\n+      });\n+\n+      it('should parse a string with one argument', () => {\n+        expect(parse(`myAlias:myFunc(field1,${encodeURIComponent('a')},true)`)).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: 'a',\n+        });\n+      });\n+\n+      it('should parse a string with multiple arguments', () => {\n+        expect(parse(`myAlias:myFunc(field1,${encodeURIComponent('a,b,c')},true)`)).toEqual({\n+          alias: 'myAlias',\n+          func: 'myFunc',\n+          field: 'field1',\n+          ignoreNulls: true,\n+          arguments: 'a,b,c',\n+        });\n+      });\n+\n+      it('should parse an argument with a colon', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NjYyNQ=="}, "originalCommit": {"oid": "291e2e340babeda4347f498a01acb067ad994e97"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk3ODgwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/Select/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMDoyOVrOH5TZyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyNDozM1rOH5Y1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODc3Ng==", "bodyText": "nit: I believe the theme object gets passed to withStyles? Like here", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529848776", "createdAt": "2020-11-24T20:10:29Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/Select/index.tsx", "diffHunk": "@@ -49,6 +49,18 @@ const CustomizedInput = withStyles(() => {\n   };\n })(InputBase);\n \n+const CustomizedInput = withStyles(() => {\n+  return {\n+    input: {\n+      padding: '7px 18px 7px 12px',\n+      '&:focus': {\n+        backgroundColor: 'transparent',\n+        outline: `1px solid ${blue[100]}`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNzg0OQ==", "bodyText": "Correct, fixed.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529937849", "createdAt": "2020-11-24T22:24:33Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/Select/index.tsx", "diffHunk": "@@ -49,6 +49,18 @@ const CustomizedInput = withStyles(() => {\n   };\n })(InputBase);\n \n+const CustomizedInput = withStyles(() => {\n+  return {\n+    input: {\n+      padding: '7px 18px 7px 12px',\n+      '&:focus': {\n+        backgroundColor: 'transparent',\n+        outline: `1px solid ${blue[100]}`,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODc3Ng=="}, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk4MDc3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMTowNlrOH5Ta8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1NDowNVrOH5UxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTA3Mg==", "bodyText": "nit: Can we have a JIRA for this TODO with a fix version? Otherwise we will seldom revisit this issue.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529849072", "createdAt": "2020-11-24T20:11:06Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean; // TODO Add to all widgets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEyNw==", "bodyText": "Yup, it's here: https://cdap.atlassian.net/browse/CDAP-17244", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529871127", "createdAt": "2020-11-24T20:54:05Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -23,6 +24,7 @@ import { objectQuery } from 'services/helpers';\n interface ITextBoxWidgetProps {\n   placeholder?: string;\n   default?: string;\n+  enableUnderline?: boolean; // TODO Add to all widgets", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTA3Mg=="}, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk4NjMyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMjo0MVrOH5TeDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyMzoyNVrOH5YxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTg2OQ==", "bodyText": "Can we standardize this to id, value. Right now this is scattered and there is no standardization (Reference JIRA https://cdap.atlassian.net/browse/CDAP-17108)", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529849869", "createdAt": "2020-11-24T20:12:41Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import TextBox from 'components/AbstractWidget/FormInputs/TextBox';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Select from 'components/AbstractWidget/FormInputs/Select';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import AbstractRow, {\n+  IAbstractRowProps,\n+  AbstractRowStyles,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+import InputFieldDropdown from 'components/AbstractWidget/InputFieldDropdown';\n+import If from 'components/If';\n+import { IWidgetExtraConfig } from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '1fr 1fr 1fr 1fr 30px 1fr',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+    // Align with surrounding controls\n+    separator: {\n+      paddingTop: '10px',\n+      textAlign: 'center',\n+    },\n+  };\n+};\n+\n+interface IComplexDropdown {\n+  value: string | number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjY0NQ==", "bodyText": "Yes, although MultiSelect uses id and label. I think id and value could be ambiguous, so I'll use label.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529936645", "createdAt": "2020-11-24T22:23:25Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import TextBox from 'components/AbstractWidget/FormInputs/TextBox';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Select from 'components/AbstractWidget/FormInputs/Select';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import AbstractRow, {\n+  IAbstractRowProps,\n+  AbstractRowStyles,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+import InputFieldDropdown from 'components/AbstractWidget/InputFieldDropdown';\n+import If from 'components/If';\n+import { IWidgetExtraConfig } from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '1fr 1fr 1fr 1fr 30px 1fr',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+    // Align with surrounding controls\n+    separator: {\n+      paddingTop: '10px',\n+      textAlign: 'center',\n+    },\n+  };\n+};\n+\n+interface IComplexDropdown {\n+  value: string | number;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTg2OQ=="}, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk5NjYyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxNTo0N1rOH5TkJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjowMDoxOVrOH5XRYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1MTQzMA==", "bodyText": "nit: We right now manually type in the keys of IKeyValueState in different places (say field or ignoreNull). Can we have the keys as enum and use that in both IkeyValueState and in handleWidgetChange function invocation?", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529851430", "createdAt": "2020-11-24T20:15:47Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import TextBox from 'components/AbstractWidget/FormInputs/TextBox';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Select from 'components/AbstractWidget/FormInputs/Select';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import AbstractRow, {\n+  IAbstractRowProps,\n+  AbstractRowStyles,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+import InputFieldDropdown from 'components/AbstractWidget/InputFieldDropdown';\n+import If from 'components/If';\n+import { IWidgetExtraConfig } from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '1fr 1fr 1fr 1fr 30px 1fr',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+    // Align with surrounding controls\n+    separator: {\n+      paddingTop: '10px',\n+      textAlign: 'center',\n+    },\n+  };\n+};\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IFunctionDropdownArgumentsRowProps extends IAbstractRowProps<typeof styles> {\n+  placeholders: Record<string, string>;\n+  dropdownOptions: IDropdownOption[];\n+  extraConfig?: IWidgetExtraConfig;\n+}\n+\n+interface IKeyValueState {\n+  field: string;\n+  func: string;\n+  alias: string;\n+  arguments: string;\n+  ignoreNulls: boolean;\n+}\n+\n+type StateKeys = keyof IKeyValueState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxMjE2Mg==", "bodyText": "Based on a quick look just now - I don't think so. keyof resolves to a string literal union, which is not referenceable at run time.", "url": "https://github.com/cdapio/cdap/pull/12708#discussion_r529912162", "createdAt": "2020-11-24T22:00:19Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/FunctionDropdownArgumentsWidget/FunctionDropdownArgumentsRow.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import TextBox from 'components/AbstractWidget/FormInputs/TextBox';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Select from 'components/AbstractWidget/FormInputs/Select';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import AbstractRow, {\n+  IAbstractRowProps,\n+  AbstractRowStyles,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { parse, serialize } from 'components/AbstractWidget/FunctionDropdownArgumentsWidget/parser';\n+import InputFieldDropdown from 'components/AbstractWidget/InputFieldDropdown';\n+import If from 'components/If';\n+import { IWidgetExtraConfig } from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '1fr 1fr 1fr 1fr 30px 1fr',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+    // Align with surrounding controls\n+    separator: {\n+      paddingTop: '10px',\n+      textAlign: 'center',\n+    },\n+  };\n+};\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IFunctionDropdownArgumentsRowProps extends IAbstractRowProps<typeof styles> {\n+  placeholders: Record<string, string>;\n+  dropdownOptions: IDropdownOption[];\n+  extraConfig?: IWidgetExtraConfig;\n+}\n+\n+interface IKeyValueState {\n+  field: string;\n+  func: string;\n+  alias: string;\n+  arguments: string;\n+  ignoreNulls: boolean;\n+}\n+\n+type StateKeys = keyof IKeyValueState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1MTQzMA=="}, "originalCommit": {"oid": "8650cbbb2ce2377f3b16b26d3d0840542a1167c9"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3127, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}