{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NzAyMTc4", "number": 12440, "title": "[CDAP-17060] Integration test for Secure Key Manager", "bodyText": "Sanity check for Secure Key Manager UI.\n\nAccess and manage a secure key\n\nCreate\nEdit\nDelete\n\n\nSearch on secure keys", "createdAt": "2020-07-07T21:39:20Z", "url": "https://github.com/cdapio/cdap/pull/12440", "merged": true, "mergeCommit": {"oid": "a79f07233b39fbdc6bad820a4245f0a7a6d693ca"}, "closed": true, "closedAt": "2020-08-05T14:54:52Z", "author": {"login": "jennac3"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4GfadgFqTQ1NTAxMTk2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc78HI9gBqjM2MjQ5NTE5Nzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDExOTY2", "url": "https://github.com/cdapio/cdap/pull/12440#pullrequestreview-455011966", "createdAt": "2020-07-24T16:10:01Z", "commit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMDowMVrOG21U6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMjoyNFrOG21aDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTk5NA==", "bodyText": "We should try to avoid explicit wait commands like these, more info here\nHere, you can verify that the alert component is no longer visible likecy.get('selector').should('not.be.visible');", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460149994", "createdAt": "2020-07-24T16:10:01Z", "author": {"login": "itsanudeep"}, "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTI2MQ==", "bodyText": "same as above", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460151261", "createdAt": "2020-07-24T16:12:16Z", "author": {"login": "itsanudeep"}, "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear\n+          }\n+        });\n+      });\n+    });\n+\n+    it('should add secure keys', () => {\n+      MOCK_SECURE_KEYS.forEach((key) => {\n+        cy.get(dataCy('create-secure-key')).click({ force: true });\n+\n+        cy.get(dataCy('secure-key-name'))\n+          .click()\n+          .type(key.name);\n+        cy.get(dataCy('secure-key-description'))\n+          .click()\n+          .type(key.description);\n+        cy.get(dataCy('secure-key-data'))\n+          .click()\n+          .type(key.data);\n+\n+        cy.get(dataCy('save-secure-key')).click();\n+        cy.wait(6000); // wait for success alert component to disappear", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTMwOA==", "bodyText": "same as above", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460151308", "createdAt": "2020-07-24T16:12:24Z", "author": {"login": "itsanudeep"}, "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear\n+          }\n+        });\n+      });\n+    });\n+\n+    it('should add secure keys', () => {\n+      MOCK_SECURE_KEYS.forEach((key) => {\n+        cy.get(dataCy('create-secure-key')).click({ force: true });\n+\n+        cy.get(dataCy('secure-key-name'))\n+          .click()\n+          .type(key.name);\n+        cy.get(dataCy('secure-key-description'))\n+          .click()\n+          .type(key.description);\n+        cy.get(dataCy('secure-key-data'))\n+          .click()\n+          .type(key.data);\n+\n+        cy.get(dataCy('save-secure-key')).click();\n+        cy.wait(6000); // wait for success alert component to disappear\n+      });\n+    });\n+\n+    it('should edit a secure key', () => {\n+      const keyToEdit = MOCK_SECURE_KEYS[0];\n+      const additionalLetter = '1';\n+\n+      // Click on a table row of the first secure key\n+      // This will open a edit dialog\n+      cy.get(dataCy(`secure-key-row-${keyToEdit.name}`)).click();\n+\n+      // edit the description of secure key\n+      cy.get(dataCy('secure-key-description'))\n+        .click()\n+        .type(additionalLetter);\n+\n+      // edit the data of secure key\n+      cy.get(dataCy('secure-key-data'))\n+        .click()\n+        .type(additionalLetter);\n+\n+      cy.get(dataCy('save-secure-key')).click();\n+      cy.wait(6000); // wait for success alert component to disappear", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDI5NzIz", "url": "https://github.com/cdapio/cdap/pull/12440#pullrequestreview-455029723", "createdAt": "2020-07-24T16:36:49Z", "commit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozNjo0OVrOG22LsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozNjo0OVrOG22LsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDAxNg==", "bodyText": "is this for clean up or reset before the test starts?? If it's for cleanup, then it's better to delete in after() method, and just call the API to delete. To reset state in the begining, do them in before() method", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460164016", "createdAt": "2020-07-24T16:36:49Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTYyMjc4", "url": "https://github.com/cdapio/cdap/pull/12440#pullrequestreview-457962278", "createdAt": "2020-07-29T23:19:08Z", "commit": {"oid": "0d2f05d333ade22b8f5b6154381c55b3a50c49e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d5d7cc7beccac42cbd25ff376f22ada454bea4b", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/7d5d7cc7beccac42cbd25ff376f22ada454bea4b", "committedDate": "2020-08-04T23:50:57Z", "message": "merge conflicts"}, "afterCommit": {"oid": "cb9400bb4650f94d3def6bd5bfd177e616f11893", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/cb9400bb4650f94d3def6bd5bfd177e616f11893", "committedDate": "2020-08-05T14:26:32Z", "message": "[CDAP-17060] Integration test for Secure Key Manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a49a1060910350215f79359444430c61bf11f38a", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/a49a1060910350215f79359444430c61bf11f38a", "committedDate": "2020-08-05T14:29:33Z", "message": "[CDAP-17060] Integration test for Secure Key Manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39eb773f1757e2007f4f993a1347a4044292c22a", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/39eb773f1757e2007f4f993a1347a4044292c22a", "committedDate": "2020-08-05T14:28:48Z", "message": "fix merge conflicts"}, "afterCommit": {"oid": "a49a1060910350215f79359444430c61bf11f38a", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/a49a1060910350215f79359444430c61bf11f38a", "committedDate": "2020-08-05T14:29:33Z", "message": "[CDAP-17060] Integration test for Secure Key Manager"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}