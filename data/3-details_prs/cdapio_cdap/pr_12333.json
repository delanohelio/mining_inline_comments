{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODYxNDQ0", "number": 12333, "title": "[CDAP-16871] Configure widget-attributes for each property (plugin JSON creator)", "bodyText": "(Because I accidentally merged #12217 to another branch, I'm making a new PR for this. Please refer to #12217 for previous reviews and histories.)\nJIRA: https://issues.cask.co/browse/CDAP-16871\nLet users configure widget-attributes for their widgets. Depending on the widget-type, it may carry different widget-attributes.\nCurrent Progress\n\nwidget-attributes changes based on the widget-type.\nUsers are able to configure widget-attributes of each widget.\nShow the JSON output including the widget-attributes.\n\nDialog that configure widget properties\n\nChanges are reflected in other components\n\nTODO (to be addressed)\n\nThere are some widgets (e.g. DLPCustomWidget) that haven't been implemented due to their complexities. I will be sure to discuss with @elfenheart and @ajainarayanan regarding this.\nI have stored key-value pairs (widget-type -> corresponding widget-attributes) in constants.ts to implement this feature. Also, there are some widget-attributes with multiple possible types, which I have dealt with by hardcoding. I will try to further address this.", "createdAt": "2020-06-15T22:54:18Z", "url": "https://github.com/cdapio/cdap/pull/12333", "merged": true, "mergeCommit": {"oid": "8d92e445872730a2c1d8c6320115dff3e4fd3053"}, "closed": true, "closedAt": "2020-06-16T19:03:02Z", "author": {"login": "jennac3"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcroyEZgBqjM0NDY1MTI2OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr51_NgBqjM0NTAzOTc0ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3daeee54052746ceeab56f64b4488c0e8b01d3d6", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/3daeee54052746ceeab56f64b4488c0e8b01d3d6", "committedDate": "2020-06-15T22:17:43Z", "message": "[CDAP-16871] Configure widget-attributes for each property (plugin JSON creator)"}, "afterCommit": {"oid": "5b6ec3b185a2444be0d37c75dcd4441dd0325ab3", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/5b6ec3b185a2444be0d37c75dcd4441dd0325ab3", "committedDate": "2020-06-15T22:55:30Z", "message": "[CDAP-16871] Configure widget-attributes for each property (plugin JSON creator)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzAwODAy", "url": "https://github.com/cdapio/cdap/pull/12333#pullrequestreview-431700802", "createdAt": "2020-06-16T16:45:22Z", "commit": {"oid": "2c2a51d1b29dab408f038c7587f7ed88334a9551"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0NToyM1rOGkkPbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0OToyOFrOGkkZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NTY5Mw==", "bodyText": "use objectQuery for this, it will automatically set things to null if the path doesn't exist. It's also safer. services/helpers", "url": "https://github.com/cdapio/cdap/pull/12333#discussion_r440995693", "createdAt": "2020-06-16T16:45:23Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput/index.tsx", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+\n+const AttributeKeyValueInput = ({\n+  keyField,\n+  valueField,\n+  keyRequired,\n+  valueRequired,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const onKeyChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: {\n+        ...prevObjs[widgetID],\n+        [field]: {\n+          ...prevObjs[widgetID][field],\n+          [keyField]: newVal,\n+        },\n+      },\n+    }));\n+  };\n+\n+  const onValueChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: {\n+        ...prevObjs[widgetID],\n+        [field]: {\n+          ...prevObjs[widgetID][field],\n+          [valueField]: newVal,\n+        },\n+      },\n+    }));\n+  };\n+\n+  const keyWidget = {\n+    label: field + ' ' + keyField,\n+    name: keyField,\n+    'widget-type': 'textbox',\n+    'widget-attributes': {},\n+  };\n+\n+  const valueWidget = {\n+    label: field + ' ' + valueField,\n+    name: keyField,\n+    'widget-type': 'textbox',\n+    'widget-attributes': {},\n+  };\n+\n+  const keyProperty = {\n+    required: keyRequired,\n+    name: keyField,\n+  };\n+\n+  const valueProperty = {\n+    required: valueRequired,\n+    name: valueField,\n+  };\n+\n+  const currentKey = widgetToAttributes[widgetID][field][keyField]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2a51d1b29dab408f038c7587f7ed88334a9551"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjQ0MA==", "bodyText": "if it's not supported i think just display a textbox", "url": "https://github.com/cdapio/cdap/pull/12333#discussion_r440996440", "createdAt": "2020-06-16T16:46:40Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+/*\n+ * AttributeMultipleValuesInput is a component used for setting widget-attributes of \"array\" type.\n+ * For instance, users will be able to set following widget attributes.\n+ *\n+ * Example 1)\n+ *     \"options\": [\n+ *       {\n+ *         \"id\": \"true\",\n+ *        \"label\": \"true\"\n+ *       },\n+ *       {\n+ *         \"id\": \"false\",\n+ *         \"label\": \"false\"\n+ *       }\n+ *     ]\n+ * Example 2)\n+ *     \"values\": [\n+ *       \"json\",\n+ *       \"xml\",\n+ *       \"tsv\",\n+ *       \"csv\",\n+ *       \"text\",\n+ *       \"blob\"\n+ *     ],\n+ *\n+ * As we can see from the examples above, this can be an array of string or an array of object (ID-Label pair).\n+ * In this component, a prop named 'supportedTypes' stores all the available types for a certain field.\n+ *\n+ * For instance, 'select' widget has an attribute field called 'options'.\n+ * 'options' can be of different types, therefore its 'supportedTypes' is as following:\n+ *     ['ISelectOptions[]', 'string[]', 'number[]']\n+ * If the user selects ISelectOptions[], then it that means the 'options' field will be\n+ * an array of ISelectOptions.\n+ * Since ISelectOptions interface is defined to be a 'value' and 'label' pair,\n+ * our component should render multiple input rows of key-value pairs.\n+ *\n+ * Some types such as 'IDropdownOption', can be string, number, or value-label pair.\n+ *     export type IDropdownOption = string | number | IComplexDropdown;\n+ *     interface IComplexDropdown {\n+ *       value: string | number;\n+ *       label: string;\n+ *     }\n+ * Therefore, we should futher process IDropdownOption[], by adding all the available types in the function\n+ * 'processSupportedTypes'.\n+ *     supportedTypes.add(SupportedType.String);\n+ *     supportedTypes.add(SupportedType.Number);\n+ *     supportedTypes.add(SupportedType.ValueLabelPair);\n+ */\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2a51d1b29dab408f038c7587f7ed88334a9551"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Nzk0MQ==", "bodyText": "not sure if you are doing this in the optimization, but these construction of the state object should happen at the context level, not at the individual component", "url": "https://github.com/cdapio/cdap/pull/12333#discussion_r440997941", "createdAt": "2020-06-16T16:49:04Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput/index.tsx", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+\n+const AttributeKeyValueInput = ({\n+  keyField,\n+  valueField,\n+  keyRequired,\n+  valueRequired,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const onKeyChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2a51d1b29dab408f038c7587f7ed88334a9551"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5ODE5MQ==", "bodyText": "same comment here regarding setting the state", "url": "https://github.com/cdapio/cdap/pull/12333#discussion_r440998191", "createdAt": "2020-06-16T16:49:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+/*\n+ * AttributeMultipleValuesInput is a component used for setting widget-attributes of \"array\" type.\n+ * For instance, users will be able to set following widget attributes.\n+ *\n+ * Example 1)\n+ *     \"options\": [\n+ *       {\n+ *         \"id\": \"true\",\n+ *        \"label\": \"true\"\n+ *       },\n+ *       {\n+ *         \"id\": \"false\",\n+ *         \"label\": \"false\"\n+ *       }\n+ *     ]\n+ * Example 2)\n+ *     \"values\": [\n+ *       \"json\",\n+ *       \"xml\",\n+ *       \"tsv\",\n+ *       \"csv\",\n+ *       \"text\",\n+ *       \"blob\"\n+ *     ],\n+ *\n+ * As we can see from the examples above, this can be an array of string or an array of object (ID-Label pair).\n+ * In this component, a prop named 'supportedTypes' stores all the available types for a certain field.\n+ *\n+ * For instance, 'select' widget has an attribute field called 'options'.\n+ * 'options' can be of different types, therefore its 'supportedTypes' is as following:\n+ *     ['ISelectOptions[]', 'string[]', 'number[]']\n+ * If the user selects ISelectOptions[], then it that means the 'options' field will be\n+ * an array of ISelectOptions.\n+ * Since ISelectOptions interface is defined to be a 'value' and 'label' pair,\n+ * our component should render multiple input rows of key-value pairs.\n+ *\n+ * Some types such as 'IDropdownOption', can be string, number, or value-label pair.\n+ *     export type IDropdownOption = string | number | IComplexDropdown;\n+ *     interface IComplexDropdown {\n+ *       value: string | number;\n+ *       label: string;\n+ *     }\n+ * Therefore, we should futher process IDropdownOption[], by adding all the available types in the function\n+ * 'processSupportedTypes'.\n+ *     supportedTypes.add(SupportedType.String);\n+ *     supportedTypes.add(SupportedType.Number);\n+ *     supportedTypes.add(SupportedType.ValueLabelPair);\n+ */\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;\n+    }\n+  });\n+  return allTypes;\n+};\n+\n+const AttributeMultipleValuesInputView = ({\n+  classes,\n+  supportedTypes,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const cleanSupportedTypes = Array.from(processSupportedTypes(supportedTypes).values());\n+  const [selectedType, setSelectedType] = React.useState(null);\n+  const [currentInput, setCurrentInput] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    const initialType = getInitialType();\n+    setSelectedType(initialType);\n+    setCurrentInput(getCurrentWidgetAttributeValues(initialType));\n+  }, []);\n+\n+  /*\n+   * The input fields can have some pre-populated values.\n+   * For instance, when the user imports a plugin JSON file into the UI,\n+   * It should parse those pre-populated values of widget attributes\n+   * and decide what should be 'selectedType' for the component.\n+   */\n+  function getInitialType() {\n+    const widgetAttributeValues = widgetToAttributes[widgetID][field];\n+    let newType;\n+    if (!widgetAttributeValues || widgetAttributeValues.length === 0) {\n+      newType = cleanSupportedTypes[0];\n+    } else if (widgetAttributeValues[0].value) {\n+      newType = SupportedType.ValueLabelPair;\n+    } else if (widgetAttributeValues[0].id) {\n+      newType = SupportedType.IDLabelPair;\n+    } else {\n+      newType = SupportedType.String;\n+    }\n+    return newType;\n+  }\n+\n+  /*\n+   * The input fields can have some pre-populated values.\n+   * For instance, when the user imports a plugin JSON file into the UI,\n+   * it should parse those pre-populated values of widget attributes\n+   * and populate the input fields.\n+   */\n+  function getCurrentWidgetAttributeValues(newType) {\n+    if (!newType) {\n+      return '';\n+    } else if (newType === SupportedType.Number || newType === SupportedType.String) {\n+      return processAttributeValues();\n+    } else {\n+      return processKeyValueAttributeValues();\n+    }\n+  }\n+\n+  /*\n+   * Process simple attribute values in order to pass them to the input component.\n+   * The component 'CSVWidget' receives the data of following structure.\n+   *\n+   * Example)\n+   *     \"GET,POST,PUT,DELETE\"\n+   */\n+  function processAttributeValues() {\n+    const widgetAttributeValues = widgetToAttributes[widgetID][field];\n+    return widgetAttributeValues ? widgetAttributeValues.join(COMMON_DELIMITER) : '';\n+  }\n+\n+  /*\n+   * Process key-value attribute values in order to pass the values to the input component.\n+   * The component 'KeyValuePairs' receives the data of following structure.\n+   *    { pairs: [{ key: '', value: '' }] }\n+   */\n+  function processKeyValueAttributeValues() {\n+    const widgetAttributeValues = widgetToAttributes[widgetID][field];\n+    if (widgetAttributeValues && widgetAttributeValues.length > 0) {\n+      return {\n+        pairs: widgetAttributeValues.map((keyvalue) => {\n+          if (keyvalue.id) {\n+            return {\n+              key: keyvalue.id,\n+              value: keyvalue.label,\n+            };\n+          } else {\n+            return {\n+              key: keyvalue.value,\n+              value: keyvalue.label,\n+            };\n+          }\n+        }),\n+      };\n+    } else {\n+      return { pairs: [{ key: '', value: '' }] };\n+    }\n+  }\n+\n+  const switchInputType = (newType) => {\n+    setSelectedType(newType);\n+    setCurrentInput(getCurrentWidgetAttributeValues(newType));\n+\n+    // When user switches the 'selectedType', the value will reset back to an empty array.\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: [] },\n+    }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2a51d1b29dab408f038c7587f7ed88334a9551"}, "originalPosition": 225}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzk3MzAw", "url": "https://github.com/cdapio/cdap/pull/12333#pullrequestreview-431797300", "createdAt": "2020-06-16T18:46:52Z", "commit": {"oid": "1a69a28434745f8f78c871ca74b2084b92f182b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08763e18def6f62d3af7bc66fcffdd860f33f9b2", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/08763e18def6f62d3af7bc66fcffdd860f33f9b2", "committedDate": "2020-06-16T18:48:10Z", "message": "[CDAP-16871] Configure widget-attributes for each property (plugin JSON creator)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a69a28434745f8f78c871ca74b2084b92f182b5", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/1a69a28434745f8f78c871ca74b2084b92f182b5", "committedDate": "2020-06-16T18:45:09Z", "message": "address comments\""}, "afterCommit": {"oid": "08763e18def6f62d3af7bc66fcffdd860f33f9b2", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/08763e18def6f62d3af7bc66fcffdd860f33f9b2", "committedDate": "2020-06-16T18:48:10Z", "message": "[CDAP-16871] Configure widget-attributes for each property (plugin JSON creator)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2028, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}