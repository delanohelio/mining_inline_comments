{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODk1OTA4", "number": 12399, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjowNDoxMVrOEMjjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzowNDo1NlrOEPVeXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjAwODMwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/GroupActionButtons/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjowNDoxMVrOGuu_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0NzoxOFrOGyPR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NzU1Nw==", "bodyText": "nit: I think we usually end the data-cy attribute of buttons with \"-btn\"", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r451657557", "createdAt": "2020-07-08T16:04:11Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/GroupActionButtons/index.tsx", "diffHunk": "@@ -40,10 +40,14 @@ const GroupActionButtonsView: React.FC<IGroupActionButtonsProps> = ({\n }) => {\n   return (\n     <div className={classes.groupActionButtons}>\n-      <IconButton onClick={onAddConfigurationGroup}>\n+      <IconButton onClick={onAddConfigurationGroup} data-cy=\"add-configuration-group\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMzMjMyMQ==", "bodyText": "Resolved", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r455332321", "createdAt": "2020-07-15T20:47:18Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/GroupActionButtons/index.tsx", "diffHunk": "@@ -40,10 +40,14 @@ const GroupActionButtonsView: React.FC<IGroupActionButtonsProps> = ({\n }) => {\n   return (\n     <div className={classes.groupActionButtons}>\n-      <IconButton onClick={onAddConfigurationGroup}>\n+      <IconButton onClick={onAddConfigurationGroup} data-cy=\"add-configuration-group\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NzU1Nw=="}, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjA0NzQ2OnYy", "diffSide": "RIGHT", "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoxNDoxMFrOGuvYvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTozMjozNlrOGyRVIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2NDA2MA==", "bodyText": "Why do we need the force:true?", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r451664060", "createdAt": "2020-07-08T16:14:10Z", "author": {"login": "yukiej"}, "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_PLUGIN_INFO = {\n+  pluginName: 'Database',\n+  displayName: 'Database',\n+  pluginType: 'batchsource',\n+};\n+\n+const MOCK_CONFIGURATION_GROUPS: any[] = [\n+  {\n+    label: 'new group label',\n+    properties: [\n+      {\n+        'widget-type': 'number',\n+        label: 'new widget label',\n+        name: 'new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          min: '0',\n+          max: '1',\n+          default: '1',\n+        },\n+      },\n+      {\n+        'widget-type': 'textarea',\n+        label: 'new new widget label',\n+        name: 'new new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          placeholder: 'Hello',\n+          rows: '20',\n+        },\n+      },\n+    ],\n+  },\n+];\n+\n+const MOCK_EXPLICIT_OUTPUT = {\n+  name: 'schema',\n+  'widget-type': 'schema',\n+  'widget-attributes': {\n+    'schema-default-type': 'string',\n+    'schema-types': ['boolean', 'int', 'long', 'float', 'double', 'bytes', 'string'],\n+  },\n+};\n+\n+const MOCK_IMPLICIT_OUTPUT = {\n+  'widget-type': 'non-editable-schema-editor',\n+  schema: {\n+    name: 'etlSchemaBody',\n+    type: 'record',\n+    fields: [\n+      {\n+        name: 'key',\n+        type: 'bytes',\n+      },\n+      {\n+        name: 'value',\n+        type: 'bytes',\n+      },\n+    ],\n+  },\n+};\n+\n+const MOCK_FILTERS: any[] = [\n+  {\n+    name: 'Proxy authentication',\n+    condition: {\n+      property: MOCK_CONFIGURATION_GROUPS[0].properties[0].name,\n+      operator: 'exists',\n+    },\n+    show: [\n+      {\n+        name: MOCK_CONFIGURATION_GROUPS[0].properties[1].name,\n+        type: 'property',\n+      },\n+    ],\n+  },\n+];\n+\n+function checkImportedConfigurationGroups(mockConfigurationGroups) {\n+  mockConfigurationGroups.forEach((group, groupIndex) => {\n+    const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+    cy.get(dataCy(`open-configuration-group-panel-${groupIndex}`)).click();\n+\n+    cy.get(`${groupSelector} ${dataCy('label')}`)\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(group.label);\n+      });\n+\n+    group.properties.forEach((widget, widgetIndex) => {\n+      const widgetSelector = `${groupSelector} ${dataCy(`widget-panel-${widgetIndex}`)}`;\n+\n+      cy.get(`${widgetSelector} ${dataCy('name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.name) {\n+            expect(val).equals(widget.name);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('label')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.label) {\n+            expect(val).equals(widget.label);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('category')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-category']) {\n+            expect(val).equals(widget['widget-category']);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('widget-type')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-type']) {\n+            expect(val).equals(widget['widget-type']);\n+          }\n+        });\n+    });\n+  });\n+}\n+\n+function checkImportedOutputs(mockOutput) {\n+  if (mockOutput['widget-type'] === 'schema') {\n+    cy.get(dataCy('output-name'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.name);\n+      });\n+    cy.get(dataCy('schema-types'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-types'].join(','));\n+      });\n+    cy.get(dataCy('schema-default-type'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-default-type']);\n+      });\n+  } else if (mockOutput['widget-type'] === 'non-editable-schema-editor') {\n+    cy.get(dataCy('schema'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.schema);\n+      });\n+  }\n+}\n+\n+function checkImportedFilters(mockFilters) {\n+  if (mockFilters) {\n+    mockFilters.forEach((filter, filterIndex) => {\n+      const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+\n+      cy.get(filterSelector).should('exist');\n+\n+      cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(filter.name);\n+        });\n+\n+      if (filter.condition) {\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+      }\n+\n+      if (filter.show) {\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      }\n+    });\n+  }\n+}\n+\n+describe('Plugin Information Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Editing data', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should edit PluginInfoPage', () => {\n+      // Fill out plugin name\n+      cy.get(dataCy('plugin-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.pluginName);\n+\n+      // Fill out plugin type\n+      cy.get(dataCy('select-plugin-type')).click();\n+      cy.get(dataCy(`option-${MOCK_PLUGIN_INFO.pluginType}`)).click();\n+\n+      // Fill out display name\n+      cy.get(dataCy('display-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.displayName);\n+\n+      // Validate whether input has been filled\n+      cy.get(dataCy('plugin-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.pluginName);\n+        });\n+      cy.get(dataCy('display-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.displayName);\n+        });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click();\n+      // Check whether live JSON output now includes displayName.\n+      cy.get(dataCy('live-json')).contains(`\"display-name\": \"${MOCK_PLUGIN_INFO.displayName}\",`);\n+      // Check whether JSON filename is now ${pluginName}-${pluginType}.json.\n+      cy.get(dataCy('plugin-json-filename')).contains(\n+        `${MOCK_PLUGIN_INFO.pluginName}-${MOCK_PLUGIN_INFO.pluginType}.json`\n+      );\n+\n+      // Button that moves to the next page is now enabled,\n+      // since all the required fields are filled.\n+      cy.get(dataCy('next-step-button')).should('not.be.disabled');\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit ConfigurationGroupsPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NTkyMw==", "bodyText": "I think force: true for collapse-live-view-btn is needed because it's inside a material ui drawer component!", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r455365923", "createdAt": "2020-07-15T21:32:36Z", "author": {"login": "jennac3"}, "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_PLUGIN_INFO = {\n+  pluginName: 'Database',\n+  displayName: 'Database',\n+  pluginType: 'batchsource',\n+};\n+\n+const MOCK_CONFIGURATION_GROUPS: any[] = [\n+  {\n+    label: 'new group label',\n+    properties: [\n+      {\n+        'widget-type': 'number',\n+        label: 'new widget label',\n+        name: 'new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          min: '0',\n+          max: '1',\n+          default: '1',\n+        },\n+      },\n+      {\n+        'widget-type': 'textarea',\n+        label: 'new new widget label',\n+        name: 'new new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          placeholder: 'Hello',\n+          rows: '20',\n+        },\n+      },\n+    ],\n+  },\n+];\n+\n+const MOCK_EXPLICIT_OUTPUT = {\n+  name: 'schema',\n+  'widget-type': 'schema',\n+  'widget-attributes': {\n+    'schema-default-type': 'string',\n+    'schema-types': ['boolean', 'int', 'long', 'float', 'double', 'bytes', 'string'],\n+  },\n+};\n+\n+const MOCK_IMPLICIT_OUTPUT = {\n+  'widget-type': 'non-editable-schema-editor',\n+  schema: {\n+    name: 'etlSchemaBody',\n+    type: 'record',\n+    fields: [\n+      {\n+        name: 'key',\n+        type: 'bytes',\n+      },\n+      {\n+        name: 'value',\n+        type: 'bytes',\n+      },\n+    ],\n+  },\n+};\n+\n+const MOCK_FILTERS: any[] = [\n+  {\n+    name: 'Proxy authentication',\n+    condition: {\n+      property: MOCK_CONFIGURATION_GROUPS[0].properties[0].name,\n+      operator: 'exists',\n+    },\n+    show: [\n+      {\n+        name: MOCK_CONFIGURATION_GROUPS[0].properties[1].name,\n+        type: 'property',\n+      },\n+    ],\n+  },\n+];\n+\n+function checkImportedConfigurationGroups(mockConfigurationGroups) {\n+  mockConfigurationGroups.forEach((group, groupIndex) => {\n+    const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+    cy.get(dataCy(`open-configuration-group-panel-${groupIndex}`)).click();\n+\n+    cy.get(`${groupSelector} ${dataCy('label')}`)\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(group.label);\n+      });\n+\n+    group.properties.forEach((widget, widgetIndex) => {\n+      const widgetSelector = `${groupSelector} ${dataCy(`widget-panel-${widgetIndex}`)}`;\n+\n+      cy.get(`${widgetSelector} ${dataCy('name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.name) {\n+            expect(val).equals(widget.name);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('label')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.label) {\n+            expect(val).equals(widget.label);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('category')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-category']) {\n+            expect(val).equals(widget['widget-category']);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('widget-type')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-type']) {\n+            expect(val).equals(widget['widget-type']);\n+          }\n+        });\n+    });\n+  });\n+}\n+\n+function checkImportedOutputs(mockOutput) {\n+  if (mockOutput['widget-type'] === 'schema') {\n+    cy.get(dataCy('output-name'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.name);\n+      });\n+    cy.get(dataCy('schema-types'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-types'].join(','));\n+      });\n+    cy.get(dataCy('schema-default-type'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-default-type']);\n+      });\n+  } else if (mockOutput['widget-type'] === 'non-editable-schema-editor') {\n+    cy.get(dataCy('schema'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.schema);\n+      });\n+  }\n+}\n+\n+function checkImportedFilters(mockFilters) {\n+  if (mockFilters) {\n+    mockFilters.forEach((filter, filterIndex) => {\n+      const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+\n+      cy.get(filterSelector).should('exist');\n+\n+      cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(filter.name);\n+        });\n+\n+      if (filter.condition) {\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+      }\n+\n+      if (filter.show) {\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      }\n+    });\n+  }\n+}\n+\n+describe('Plugin Information Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Editing data', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should edit PluginInfoPage', () => {\n+      // Fill out plugin name\n+      cy.get(dataCy('plugin-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.pluginName);\n+\n+      // Fill out plugin type\n+      cy.get(dataCy('select-plugin-type')).click();\n+      cy.get(dataCy(`option-${MOCK_PLUGIN_INFO.pluginType}`)).click();\n+\n+      // Fill out display name\n+      cy.get(dataCy('display-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.displayName);\n+\n+      // Validate whether input has been filled\n+      cy.get(dataCy('plugin-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.pluginName);\n+        });\n+      cy.get(dataCy('display-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.displayName);\n+        });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click();\n+      // Check whether live JSON output now includes displayName.\n+      cy.get(dataCy('live-json')).contains(`\"display-name\": \"${MOCK_PLUGIN_INFO.displayName}\",`);\n+      // Check whether JSON filename is now ${pluginName}-${pluginType}.json.\n+      cy.get(dataCy('plugin-json-filename')).contains(\n+        `${MOCK_PLUGIN_INFO.pluginName}-${MOCK_PLUGIN_INFO.pluginType}.json`\n+      );\n+\n+      // Button that moves to the next page is now enabled,\n+      // since all the required fields are filled.\n+      cy.get(dataCy('next-step-button')).should('not.be.disabled');\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit ConfigurationGroupsPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2NDA2MA=="}, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjA1OTQwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoxNzowMlrOGuvgAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0NzowOVrOGyPRlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2NTkyMQ==", "bodyText": "Instead of adding a wait here (though it is admittedly a short one), is it possibly to check for the existence of some element once the upload is complete?", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r451665921", "createdAt": "2020-07-08T16:17:02Z", "author": {"login": "yukiej"}, "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_PLUGIN_INFO = {\n+  pluginName: 'Database',\n+  displayName: 'Database',\n+  pluginType: 'batchsource',\n+};\n+\n+const MOCK_CONFIGURATION_GROUPS: any[] = [\n+  {\n+    label: 'new group label',\n+    properties: [\n+      {\n+        'widget-type': 'number',\n+        label: 'new widget label',\n+        name: 'new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          min: '0',\n+          max: '1',\n+          default: '1',\n+        },\n+      },\n+      {\n+        'widget-type': 'textarea',\n+        label: 'new new widget label',\n+        name: 'new new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          placeholder: 'Hello',\n+          rows: '20',\n+        },\n+      },\n+    ],\n+  },\n+];\n+\n+const MOCK_EXPLICIT_OUTPUT = {\n+  name: 'schema',\n+  'widget-type': 'schema',\n+  'widget-attributes': {\n+    'schema-default-type': 'string',\n+    'schema-types': ['boolean', 'int', 'long', 'float', 'double', 'bytes', 'string'],\n+  },\n+};\n+\n+const MOCK_IMPLICIT_OUTPUT = {\n+  'widget-type': 'non-editable-schema-editor',\n+  schema: {\n+    name: 'etlSchemaBody',\n+    type: 'record',\n+    fields: [\n+      {\n+        name: 'key',\n+        type: 'bytes',\n+      },\n+      {\n+        name: 'value',\n+        type: 'bytes',\n+      },\n+    ],\n+  },\n+};\n+\n+const MOCK_FILTERS: any[] = [\n+  {\n+    name: 'Proxy authentication',\n+    condition: {\n+      property: MOCK_CONFIGURATION_GROUPS[0].properties[0].name,\n+      operator: 'exists',\n+    },\n+    show: [\n+      {\n+        name: MOCK_CONFIGURATION_GROUPS[0].properties[1].name,\n+        type: 'property',\n+      },\n+    ],\n+  },\n+];\n+\n+function checkImportedConfigurationGroups(mockConfigurationGroups) {\n+  mockConfigurationGroups.forEach((group, groupIndex) => {\n+    const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+    cy.get(dataCy(`open-configuration-group-panel-${groupIndex}`)).click();\n+\n+    cy.get(`${groupSelector} ${dataCy('label')}`)\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(group.label);\n+      });\n+\n+    group.properties.forEach((widget, widgetIndex) => {\n+      const widgetSelector = `${groupSelector} ${dataCy(`widget-panel-${widgetIndex}`)}`;\n+\n+      cy.get(`${widgetSelector} ${dataCy('name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.name) {\n+            expect(val).equals(widget.name);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('label')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.label) {\n+            expect(val).equals(widget.label);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('category')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-category']) {\n+            expect(val).equals(widget['widget-category']);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('widget-type')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-type']) {\n+            expect(val).equals(widget['widget-type']);\n+          }\n+        });\n+    });\n+  });\n+}\n+\n+function checkImportedOutputs(mockOutput) {\n+  if (mockOutput['widget-type'] === 'schema') {\n+    cy.get(dataCy('output-name'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.name);\n+      });\n+    cy.get(dataCy('schema-types'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-types'].join(','));\n+      });\n+    cy.get(dataCy('schema-default-type'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-default-type']);\n+      });\n+  } else if (mockOutput['widget-type'] === 'non-editable-schema-editor') {\n+    cy.get(dataCy('schema'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.schema);\n+      });\n+  }\n+}\n+\n+function checkImportedFilters(mockFilters) {\n+  if (mockFilters) {\n+    mockFilters.forEach((filter, filterIndex) => {\n+      const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+\n+      cy.get(filterSelector).should('exist');\n+\n+      cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(filter.name);\n+        });\n+\n+      if (filter.condition) {\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+      }\n+\n+      if (filter.show) {\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      }\n+    });\n+  }\n+}\n+\n+describe('Plugin Information Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Editing data', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should edit PluginInfoPage', () => {\n+      // Fill out plugin name\n+      cy.get(dataCy('plugin-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.pluginName);\n+\n+      // Fill out plugin type\n+      cy.get(dataCy('select-plugin-type')).click();\n+      cy.get(dataCy(`option-${MOCK_PLUGIN_INFO.pluginType}`)).click();\n+\n+      // Fill out display name\n+      cy.get(dataCy('display-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.displayName);\n+\n+      // Validate whether input has been filled\n+      cy.get(dataCy('plugin-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.pluginName);\n+        });\n+      cy.get(dataCy('display-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.displayName);\n+        });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click();\n+      // Check whether live JSON output now includes displayName.\n+      cy.get(dataCy('live-json')).contains(`\"display-name\": \"${MOCK_PLUGIN_INFO.displayName}\",`);\n+      // Check whether JSON filename is now ${pluginName}-${pluginType}.json.\n+      cy.get(dataCy('plugin-json-filename')).contains(\n+        `${MOCK_PLUGIN_INFO.pluginName}-${MOCK_PLUGIN_INFO.pluginType}.json`\n+      );\n+\n+      // Button that moves to the next page is now enabled,\n+      // since all the required fields are filled.\n+      cy.get(dataCy('next-step-button')).should('not.be.disabled');\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit ConfigurationGroupsPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      MOCK_CONFIGURATION_GROUPS.forEach((group, groupIndex) => {\n+        const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+        // Add a new configuration group\n+        cy.get(dataCy('add-configuration-group')).click();\n+        cy.get(groupSelector).should('exist');\n+\n+        // Edit configuration group label\n+        const groupLabel = group.label;\n+        cy.get(`${groupSelector} ${dataCy('label')}`)\n+          .click()\n+          .type(groupLabel);\n+\n+        group.properties.forEach((widget, widgetIndex) => {\n+          // Add a new widget under the new configuration group\n+          const widgetSelector = dataCy(`widget-panel-${widgetIndex}`);\n+          if (widgetIndex === 0) {\n+            cy.get(dataCy('add-properties-button')).click(); // this adds the first widget\n+          } else {\n+            const previousWidgetSelector = dataCy(`widget-panel-${widgetIndex - 1}`);\n+            cy.get(`${previousWidgetSelector} ${dataCy('add-widget-icon')}`).click(); // this adds another widget\n+          }\n+\n+          // Edit a basic information of the existing widget\n+          cy.get(`${widgetSelector} ${dataCy('name')}`)\n+            .click()\n+            .type(widget.name);\n+          cy.get(`${widgetSelector} ${dataCy('label')}`)\n+            .click()\n+            .type(widget.label);\n+          cy.get(`${widgetSelector} ${dataCy('select-category')}`).click();\n+          cy.get(dataCy(`option-${widget['widget-category']}`)).click();\n+          cy.get(`${widgetSelector} ${dataCy('select-widget-type')}`).click();\n+          cy.get(dataCy(`option-${widget['widget-type']}`)).click();\n+\n+          // Open a widget-attributes dialog\n+          cy.get(`${widgetSelector} ${dataCy('open-widget-attributes')}`).click();\n+          cy.get(dataCy('widget-attributes-dialog')).should('exist');\n+\n+          // Check whether widget has been created\n+          cy.get(widgetSelector).should('exist');\n+\n+          // Check whether the dialog contains widget input with previously set values\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('name')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget.name);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('label')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget.label);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('category')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget['widget-category']);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('widget-type')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget['widget-type']);\n+            });\n+\n+          // Edits widget-attributes of the existing widget.\n+          Object.entries(widget['widget-attributes']).map(([key, value]) => {\n+            cy.get(\n+              `${dataCy('widget-attributes-dialog')} ${dataCy('widget-attributes-inputs')} ${dataCy(\n+                key\n+              )}`\n+            )\n+              .click()\n+              .type(value as string);\n+          });\n+\n+          // Save the widget attributes\n+          cy.get(\n+            `${dataCy('widget-attributes-dialog')} ${dataCy('save-widget-attributes')}`\n+          ).click();\n+        });\n+      });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const groups = obj['configuration-groups'];\n+\n+        expect(groups).to.deep.equal(MOCK_CONFIGURATION_GROUPS);\n+      });\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit OutputPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      // Switch to explicit output schema\n+      cy.get('[type=\"radio\"]')\n+        .eq(0)\n+        .check({ force: true });\n+      cy.get(dataCy('explicit-schema-definer')).should('exist');\n+      cy.get(dataCy('implicit-schema-definer')).should('not.exist');\n+\n+      // Fill out output name\n+      cy.get(dataCy('output-name'))\n+        .click()\n+        .type(MOCK_EXPLICIT_OUTPUT.name);\n+\n+      // Fill out schema types\n+      const newSchemaTypes = MOCK_EXPLICIT_OUTPUT['widget-attributes']['schema-types'];\n+      cy.get(dataCy('multiselect-schema-types')).click();\n+      newSchemaTypes.forEach((type) => {\n+        cy.get(dataCy(`multioption-${type}`)).click();\n+      });\n+      cy.get('body').type('{esc}', { release: true }); // close the multiselect\n+\n+      // Fill out schema default type\n+      const newSchemaDefaultType = MOCK_EXPLICIT_OUTPUT['widget-attributes']['schema-default-type'];\n+      cy.get(dataCy('select-schema-default-type')).click();\n+      cy.get(dataCy(`option-${newSchemaDefaultType}`)).click();\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const output = obj.outputs[0];\n+\n+        expect(output).to.deep.equal(MOCK_EXPLICIT_OUTPUT);\n+      });\n+\n+      // Switch to implicit output schema\n+      cy.get(`[type=\"radio\"]`)\n+        .eq(1)\n+        .check({ force: true });\n+      cy.get(dataCy('explicit-schema-definer')).should('not.exist');\n+      cy.get(dataCy('implicit-schema-definer')).should('exist');\n+\n+      // Fill out schema\n+      const newSchema = MOCK_IMPLICIT_OUTPUT.schema;\n+      cy.get(dataCy('implicit-schema')).clear({ force: true });\n+      cy.wait(100);\n+      cy.get(dataCy('implicit-schema')).type(JSON.stringify(newSchema), {\n+        force: true,\n+        parseSpecialCharSequences: false,\n+      });\n+\n+      // Save schema\n+      cy.get(dataCy('save-schema-button')).click();\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const output = obj.outputs[0];\n+\n+        expect(output).to.deep.equal(MOCK_IMPLICIT_OUTPUT);\n+      });\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit FilterPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      MOCK_FILTERS.forEach((filter, filterIndex) => {\n+        // Add a new filter\n+        const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+        if (filterIndex === 0) {\n+          cy.get(dataCy('add-filter')).click(); // this adds the first filter\n+        } else {\n+          const previousFilterSelector = dataCy(`filter-panel-${filterIndex - 1}`);\n+          cy.get(`${previousFilterSelector} ${dataCy('add-filter')}`).click(); // this adds another filter\n+        }\n+        cy.get(filterSelector).should('exist');\n+\n+        // Fill out filter name\n+        cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+          .click()\n+          .type(filter.name);\n+\n+        // Fill out filter condition\n+        cy.get(\n+          `${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('select-property')}`\n+        ).click();\n+        cy.get(dataCy(`option-${filter.condition.property}`)).click();\n+\n+        cy.get(\n+          `${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('select-operator')}`\n+        ).click();\n+        cy.get(dataCy(`option-${filter.condition.operator}`)).click();\n+\n+        // Fill out filter's show list\n+        filter.show.forEach((show, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('select-name')}`\n+          ).click();\n+          cy.get(dataCy(`option-${show.name}`)).click();\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('select-type')}`\n+          ).click();\n+          cy.get(dataCy(`option-${show.type}`)).click();\n+        });\n+\n+        // Validate whether input has been filled\n+        cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+          .invoke('val')\n+          .then((val) => {\n+            expect(val).equals(filter.name);\n+          });\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const filters = obj.filters;\n+\n+        expect(filters).to.deep.equal(MOCK_FILTERS);\n+      });\n+    });\n+  });\n+\n+  describe('Importing data', () => {\n+    beforeEach(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should populate the imported results for HTTP-batchsource.json', () => {\n+      const filename = 'HTTP-batchsource.json';\n+      const fileNameWithoutExtension = filename.substring(0, filename.lastIndexOf('.'));\n+      const [pluginName, pluginType] = fileNameWithoutExtension.split('-');\n+      cy.get(dataCy('plugin-json-import-button')).click();\n+      cy.upload_plugin_json(filename, 'plugin-json-uploader');\n+      cy.wait(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 610}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMzMjI0Nw==", "bodyText": "I tried deleting wait and it seems to work well!\nResolved.", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r455332247", "createdAt": "2020-07-15T20:47:09Z", "author": {"login": "jennac3"}, "path": "cdap-ui/cypress/integration/pluginjsoncreator.spec.ts", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_PLUGIN_INFO = {\n+  pluginName: 'Database',\n+  displayName: 'Database',\n+  pluginType: 'batchsource',\n+};\n+\n+const MOCK_CONFIGURATION_GROUPS: any[] = [\n+  {\n+    label: 'new group label',\n+    properties: [\n+      {\n+        'widget-type': 'number',\n+        label: 'new widget label',\n+        name: 'new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          min: '0',\n+          max: '1',\n+          default: '1',\n+        },\n+      },\n+      {\n+        'widget-type': 'textarea',\n+        label: 'new new widget label',\n+        name: 'new new widget name',\n+        'widget-category': 'plugin',\n+        'widget-attributes': {\n+          placeholder: 'Hello',\n+          rows: '20',\n+        },\n+      },\n+    ],\n+  },\n+];\n+\n+const MOCK_EXPLICIT_OUTPUT = {\n+  name: 'schema',\n+  'widget-type': 'schema',\n+  'widget-attributes': {\n+    'schema-default-type': 'string',\n+    'schema-types': ['boolean', 'int', 'long', 'float', 'double', 'bytes', 'string'],\n+  },\n+};\n+\n+const MOCK_IMPLICIT_OUTPUT = {\n+  'widget-type': 'non-editable-schema-editor',\n+  schema: {\n+    name: 'etlSchemaBody',\n+    type: 'record',\n+    fields: [\n+      {\n+        name: 'key',\n+        type: 'bytes',\n+      },\n+      {\n+        name: 'value',\n+        type: 'bytes',\n+      },\n+    ],\n+  },\n+};\n+\n+const MOCK_FILTERS: any[] = [\n+  {\n+    name: 'Proxy authentication',\n+    condition: {\n+      property: MOCK_CONFIGURATION_GROUPS[0].properties[0].name,\n+      operator: 'exists',\n+    },\n+    show: [\n+      {\n+        name: MOCK_CONFIGURATION_GROUPS[0].properties[1].name,\n+        type: 'property',\n+      },\n+    ],\n+  },\n+];\n+\n+function checkImportedConfigurationGroups(mockConfigurationGroups) {\n+  mockConfigurationGroups.forEach((group, groupIndex) => {\n+    const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+    cy.get(dataCy(`open-configuration-group-panel-${groupIndex}`)).click();\n+\n+    cy.get(`${groupSelector} ${dataCy('label')}`)\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(group.label);\n+      });\n+\n+    group.properties.forEach((widget, widgetIndex) => {\n+      const widgetSelector = `${groupSelector} ${dataCy(`widget-panel-${widgetIndex}`)}`;\n+\n+      cy.get(`${widgetSelector} ${dataCy('name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.name) {\n+            expect(val).equals(widget.name);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('label')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget.label) {\n+            expect(val).equals(widget.label);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('category')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-category']) {\n+            expect(val).equals(widget['widget-category']);\n+          }\n+        });\n+\n+      cy.get(`${widgetSelector} ${dataCy('widget-type')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          if (widget['widget-type']) {\n+            expect(val).equals(widget['widget-type']);\n+          }\n+        });\n+    });\n+  });\n+}\n+\n+function checkImportedOutputs(mockOutput) {\n+  if (mockOutput['widget-type'] === 'schema') {\n+    cy.get(dataCy('output-name'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.name);\n+      });\n+    cy.get(dataCy('schema-types'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-types'].join(','));\n+      });\n+    cy.get(dataCy('schema-default-type'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput['widget-attributes']['schema-default-type']);\n+      });\n+  } else if (mockOutput['widget-type'] === 'non-editable-schema-editor') {\n+    cy.get(dataCy('schema'))\n+      .invoke('val')\n+      .then((val) => {\n+        expect(val).equals(mockOutput.schema);\n+      });\n+  }\n+}\n+\n+function checkImportedFilters(mockFilters) {\n+  if (mockFilters) {\n+    mockFilters.forEach((filter, filterIndex) => {\n+      const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+\n+      cy.get(filterSelector).should('exist');\n+\n+      cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(filter.name);\n+        });\n+\n+      if (filter.condition) {\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+      }\n+\n+      if (filter.show) {\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      }\n+    });\n+  }\n+}\n+\n+describe('Plugin Information Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Editing data', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should edit PluginInfoPage', () => {\n+      // Fill out plugin name\n+      cy.get(dataCy('plugin-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.pluginName);\n+\n+      // Fill out plugin type\n+      cy.get(dataCy('select-plugin-type')).click();\n+      cy.get(dataCy(`option-${MOCK_PLUGIN_INFO.pluginType}`)).click();\n+\n+      // Fill out display name\n+      cy.get(dataCy('display-name'))\n+        .click()\n+        .type(MOCK_PLUGIN_INFO.displayName);\n+\n+      // Validate whether input has been filled\n+      cy.get(dataCy('plugin-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.pluginName);\n+        });\n+      cy.get(dataCy('display-name'))\n+        .invoke('val')\n+        .then((val) => {\n+          expect(val).equals(MOCK_PLUGIN_INFO.displayName);\n+        });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click();\n+      // Check whether live JSON output now includes displayName.\n+      cy.get(dataCy('live-json')).contains(`\"display-name\": \"${MOCK_PLUGIN_INFO.displayName}\",`);\n+      // Check whether JSON filename is now ${pluginName}-${pluginType}.json.\n+      cy.get(dataCy('plugin-json-filename')).contains(\n+        `${MOCK_PLUGIN_INFO.pluginName}-${MOCK_PLUGIN_INFO.pluginType}.json`\n+      );\n+\n+      // Button that moves to the next page is now enabled,\n+      // since all the required fields are filled.\n+      cy.get(dataCy('next-step-button')).should('not.be.disabled');\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit ConfigurationGroupsPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      MOCK_CONFIGURATION_GROUPS.forEach((group, groupIndex) => {\n+        const groupSelector = dataCy(`configuration-group-panel-${groupIndex}`);\n+\n+        // Add a new configuration group\n+        cy.get(dataCy('add-configuration-group')).click();\n+        cy.get(groupSelector).should('exist');\n+\n+        // Edit configuration group label\n+        const groupLabel = group.label;\n+        cy.get(`${groupSelector} ${dataCy('label')}`)\n+          .click()\n+          .type(groupLabel);\n+\n+        group.properties.forEach((widget, widgetIndex) => {\n+          // Add a new widget under the new configuration group\n+          const widgetSelector = dataCy(`widget-panel-${widgetIndex}`);\n+          if (widgetIndex === 0) {\n+            cy.get(dataCy('add-properties-button')).click(); // this adds the first widget\n+          } else {\n+            const previousWidgetSelector = dataCy(`widget-panel-${widgetIndex - 1}`);\n+            cy.get(`${previousWidgetSelector} ${dataCy('add-widget-icon')}`).click(); // this adds another widget\n+          }\n+\n+          // Edit a basic information of the existing widget\n+          cy.get(`${widgetSelector} ${dataCy('name')}`)\n+            .click()\n+            .type(widget.name);\n+          cy.get(`${widgetSelector} ${dataCy('label')}`)\n+            .click()\n+            .type(widget.label);\n+          cy.get(`${widgetSelector} ${dataCy('select-category')}`).click();\n+          cy.get(dataCy(`option-${widget['widget-category']}`)).click();\n+          cy.get(`${widgetSelector} ${dataCy('select-widget-type')}`).click();\n+          cy.get(dataCy(`option-${widget['widget-type']}`)).click();\n+\n+          // Open a widget-attributes dialog\n+          cy.get(`${widgetSelector} ${dataCy('open-widget-attributes')}`).click();\n+          cy.get(dataCy('widget-attributes-dialog')).should('exist');\n+\n+          // Check whether widget has been created\n+          cy.get(widgetSelector).should('exist');\n+\n+          // Check whether the dialog contains widget input with previously set values\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('name')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget.name);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('label')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget.label);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('category')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget['widget-category']);\n+            });\n+          cy.get(`${dataCy('widget-attributes-dialog')} ${dataCy('widget-type')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(widget['widget-type']);\n+            });\n+\n+          // Edits widget-attributes of the existing widget.\n+          Object.entries(widget['widget-attributes']).map(([key, value]) => {\n+            cy.get(\n+              `${dataCy('widget-attributes-dialog')} ${dataCy('widget-attributes-inputs')} ${dataCy(\n+                key\n+              )}`\n+            )\n+              .click()\n+              .type(value as string);\n+          });\n+\n+          // Save the widget attributes\n+          cy.get(\n+            `${dataCy('widget-attributes-dialog')} ${dataCy('save-widget-attributes')}`\n+          ).click();\n+        });\n+      });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const groups = obj['configuration-groups'];\n+\n+        expect(groups).to.deep.equal(MOCK_CONFIGURATION_GROUPS);\n+      });\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit OutputPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      // Switch to explicit output schema\n+      cy.get('[type=\"radio\"]')\n+        .eq(0)\n+        .check({ force: true });\n+      cy.get(dataCy('explicit-schema-definer')).should('exist');\n+      cy.get(dataCy('implicit-schema-definer')).should('not.exist');\n+\n+      // Fill out output name\n+      cy.get(dataCy('output-name'))\n+        .click()\n+        .type(MOCK_EXPLICIT_OUTPUT.name);\n+\n+      // Fill out schema types\n+      const newSchemaTypes = MOCK_EXPLICIT_OUTPUT['widget-attributes']['schema-types'];\n+      cy.get(dataCy('multiselect-schema-types')).click();\n+      newSchemaTypes.forEach((type) => {\n+        cy.get(dataCy(`multioption-${type}`)).click();\n+      });\n+      cy.get('body').type('{esc}', { release: true }); // close the multiselect\n+\n+      // Fill out schema default type\n+      const newSchemaDefaultType = MOCK_EXPLICIT_OUTPUT['widget-attributes']['schema-default-type'];\n+      cy.get(dataCy('select-schema-default-type')).click();\n+      cy.get(dataCy(`option-${newSchemaDefaultType}`)).click();\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const output = obj.outputs[0];\n+\n+        expect(output).to.deep.equal(MOCK_EXPLICIT_OUTPUT);\n+      });\n+\n+      // Switch to implicit output schema\n+      cy.get(`[type=\"radio\"]`)\n+        .eq(1)\n+        .check({ force: true });\n+      cy.get(dataCy('explicit-schema-definer')).should('not.exist');\n+      cy.get(dataCy('implicit-schema-definer')).should('exist');\n+\n+      // Fill out schema\n+      const newSchema = MOCK_IMPLICIT_OUTPUT.schema;\n+      cy.get(dataCy('implicit-schema')).clear({ force: true });\n+      cy.wait(100);\n+      cy.get(dataCy('implicit-schema')).type(JSON.stringify(newSchema), {\n+        force: true,\n+        parseSpecialCharSequences: false,\n+      });\n+\n+      // Save schema\n+      cy.get(dataCy('save-schema-button')).click();\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const output = obj.outputs[0];\n+\n+        expect(output).to.deep.equal(MOCK_IMPLICIT_OUTPUT);\n+      });\n+\n+      // Move to the next page\n+      cy.get(dataCy('next-step-button')).click();\n+    });\n+\n+    it('should edit FilterPage', () => {\n+      cy.get(dataCy('collapse-live-view-button')).click({ force: true });\n+\n+      MOCK_FILTERS.forEach((filter, filterIndex) => {\n+        // Add a new filter\n+        const filterSelector = dataCy(`filter-panel-${filterIndex}`);\n+        if (filterIndex === 0) {\n+          cy.get(dataCy('add-filter')).click(); // this adds the first filter\n+        } else {\n+          const previousFilterSelector = dataCy(`filter-panel-${filterIndex - 1}`);\n+          cy.get(`${previousFilterSelector} ${dataCy('add-filter')}`).click(); // this adds another filter\n+        }\n+        cy.get(filterSelector).should('exist');\n+\n+        // Fill out filter name\n+        cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+          .click()\n+          .type(filter.name);\n+\n+        // Fill out filter condition\n+        cy.get(\n+          `${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('select-property')}`\n+        ).click();\n+        cy.get(dataCy(`option-${filter.condition.property}`)).click();\n+\n+        cy.get(\n+          `${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('select-operator')}`\n+        ).click();\n+        cy.get(dataCy(`option-${filter.condition.operator}`)).click();\n+\n+        // Fill out filter's show list\n+        filter.show.forEach((show, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('select-name')}`\n+          ).click();\n+          cy.get(dataCy(`option-${show.name}`)).click();\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('select-type')}`\n+          ).click();\n+          cy.get(dataCy(`option-${show.type}`)).click();\n+        });\n+\n+        // Validate whether input has been filled\n+        cy.get(`${filterSelector} ${dataCy('filter-name')}`)\n+          .invoke('val')\n+          .then((val) => {\n+            expect(val).equals(filter.name);\n+          });\n+        if (filter.condition.expression) {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.expression);\n+            });\n+        } else {\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('property')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.property);\n+            });\n+          cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('operator')}`)\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(filter.condition.operator);\n+            });\n+          if (filter.value) {\n+            cy.get(`${filterSelector} ${dataCy('filter-condition-input')} ${dataCy('expression')}`)\n+              .invoke('val')\n+              .then((val) => {\n+                expect(val).equals(filter.condition.value);\n+              });\n+          }\n+        }\n+        filter.show.map((showVal, showIndex) => {\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('name')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.name);\n+            });\n+\n+          cy.get(\n+            `${filterSelector} ${dataCy('filter-showlist-input')} ${dataCy(\n+              `show-${showIndex}`\n+            )} ${dataCy('type')}`\n+          )\n+            .invoke('val')\n+            .then((val) => {\n+              expect(val).equals(showVal.type);\n+            });\n+        });\n+      });\n+\n+      // View live JSON output\n+      cy.get(dataCy('open-live-view-button')).click({ force: true });\n+\n+      // Compare the live JSON code with our mock data\n+      cy.get(dataCy('live-json')).should((jsonContent) => {\n+        const obj = JSON.parse(jsonContent.text());\n+        const filters = obj.filters;\n+\n+        expect(filters).to.deep.equal(MOCK_FILTERS);\n+      });\n+    });\n+  });\n+\n+  describe('Importing data', () => {\n+    beforeEach(() => {\n+      cy.visit('/cdap/ns/default/plugincreation');\n+    });\n+\n+    it('should populate the imported results for HTTP-batchsource.json', () => {\n+      const filename = 'HTTP-batchsource.json';\n+      const fileNameWithoutExtension = filename.substring(0, filename.lastIndexOf('.'));\n+      const [pluginName, pluginType] = fileNameWithoutExtension.split('-');\n+      cy.get(dataCy('plugin-json-import-button')).click();\n+      cy.upload_plugin_json(filename, 'plugin-json-uploader');\n+      cy.wait(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2NTkyMQ=="}, "originalCommit": {"oid": "b99ad01d395cf8f95708a3fa8739c3b4ce9d7a43"}, "originalPosition": 610}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTE0Nzc5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/PluginInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjo1OTo1MFrOGy_nyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowOTo1NFrOG0Zmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNDM2MA==", "bodyText": "I don't remember, but is this PluginInput component only used by other components to render the necessary input for the different forms?\nIf not, doing this replace is dangerous because the value being set by by ConfigurationGroup is based on this property name", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r456124360", "createdAt": "2020-07-16T22:59:50Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/PluginInput/index.tsx", "diffHunk": "@@ -68,7 +68,7 @@ const PluginInput = ({\n \n   const property = {\n     required,\n-    name: label,\n+    name: label.toLowerCase().replace(/\\s/g, '-'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420d89026c41da778c2c688fc28c13c3c2e200d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5ODYyNg==", "bodyText": "It's only being used to show the form fields that plugin json creator needs.", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r457598626", "createdAt": "2020-07-20T18:09:54Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/PluginInput/index.tsx", "diffHunk": "@@ -68,7 +68,7 @@ const PluginInput = ({\n \n   const property = {\n     required,\n-    name: label,\n+    name: label.toLowerCase().replace(/\\s/g, '-'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNDM2MA=="}, "originalCommit": {"oid": "420d89026c41da778c2c688fc28c13c3c2e200d5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTE1NzMzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/cypress/support/commands.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzowNDoyOFrOGy_tZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzowNDoyOFrOGy_tZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNTc5Ng==", "bodyText": "nit: why was these imports modified? This should be from the prettier", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r456125796", "createdAt": "2020-07-16T23:04:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/cypress/support/commands.ts", "diffHunk": "@@ -14,21 +14,12 @@\n  * the License.\n  */\n \n-import { ConnectionType } from '../../app/cdap/components/DataPrepConnections/ConnectionType';\n-import {\n-  DEFAULT_GCP_PROJECTID,\n-  DEFAULT_GCP_SERVICEACCOUNT_PATH,\n-  RUNTIME_ARGS_DEPLOYED_SELECTOR,\n-  RUNTIME_ARGS_KEY_SELECTOR,\n-  RUNTIME_ARGS_VALUE_SELECTOR,\n-} from '../support/constants';\n+import { DEFAULT_GCP_PROJECTID, DEFAULT_GCP_SERVICEACCOUNT_PATH, RUNTIME_ARGS_DEPLOYED_SELECTOR, RUNTIME_ARGS_KEY_SELECTOR, RUNTIME_ARGS_VALUE_SELECTOR } from '../support/constants';\n import { INodeIdentifier, INodeInfo, IgetNodeIDOptions } from '../typings';\n-import {\n-  getGenericEndpoint,\n-  getConditionNodeEndpoint,\n-  getNodeSelectorFromNodeIndentifier,\n-  dataCy,\n-} from '../helpers';\n+import { dataCy, getConditionNodeEndpoint, getGenericEndpoint, getNodeSelectorFromNodeIndentifier } from '../helpers';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420d89026c41da778c2c688fc28c13c3c2e200d5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTE1OTMyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/cypress/support/constants.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzowNDo1NlrOGy_uYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzowNDo1NlrOGy_uYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNjA0OA==", "bodyText": "nit: don't modify", "url": "https://github.com/cdapio/cdap/pull/12399#discussion_r456126048", "createdAt": "2020-07-16T23:04:56Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/cypress/support/constants.ts", "diffHunk": "@@ -38,20 +38,5 @@ const RUNTIME_ARGS_DEPLOYED_SELECTOR = 'runtimeargs-deployed';\n const RUNTIME_ARGS_KEY_SELECTOR = 'runtimeargs-key';\n const RUNTIME_ARGS_VALUE_SELECTOR = 'runtimeargs-value';\n \n-export {\n-  DEFAULT_BIGQUERY_CONNECTION_NAME,\n-  DEFAULT_BIGQUERY_DATASET,\n-  DEFAULT_BIGQUERY_TABLE,\n-  DEFAULT_GCP_SERVICEACCOUNT_PATH,\n-  DEFAULT_GCP_PROJECTID,\n-  DEFAULT_GCS_CONNECTION_NAME,\n-  DEFAULT_GCS_FOLDER,\n-  DEFAULT_GCS_FILE,\n-  DEFAULT_SPANNER_INSTANCE,\n-  DEFAULT_SPANNER_DATABASE,\n-  DEFAULT_SPANNER_TABLE,\n-  DEFAULT_SPANNER_CONNECTION_NAME,\n-  RUNTIME_ARGS_DEPLOYED_SELECTOR,\n-  RUNTIME_ARGS_KEY_SELECTOR,\n-  RUNTIME_ARGS_VALUE_SELECTOR,\n-};\n+export { DEFAULT_BIGQUERY_CONNECTION_NAME, DEFAULT_BIGQUERY_DATASET, DEFAULT_BIGQUERY_TABLE, DEFAULT_GCP_SERVICEACCOUNT_PATH, DEFAULT_GCP_PROJECTID, DEFAULT_GCS_CONNECTION_NAME, DEFAULT_GCS_FOLDER, DEFAULT_GCS_FILE, DEFAULT_SPANNER_INSTANCE, DEFAULT_SPANNER_DATABASE, DEFAULT_SPANNER_TABLE, DEFAULT_SPANNER_CONNECTION_NAME, RUNTIME_ARGS_DEPLOYED_SELECTOR, RUNTIME_ARGS_KEY_SELECTOR, RUNTIME_ARGS_VALUE_SELECTOR, };\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420d89026c41da778c2c688fc28c13c3c2e200d5"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3307, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}