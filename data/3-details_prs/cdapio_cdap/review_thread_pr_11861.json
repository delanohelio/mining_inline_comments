{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDgwMjU2", "number": 11861, "reviewThreads": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MDozMlrODesMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDoxOVrODfXYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA3OTc3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MDozMlrOFn95tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MDozMlrOFn95tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1Mjk4MQ==", "bodyText": "Debug", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377452981", "createdAt": "2020-02-11T05:40:32Z", "author": {"login": "nitinmotgi"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.info(\"Starting {}\", getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cce764fcaa94645fa6f4804b85d69123860be62"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA4MDk3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MTo0MFrOFn96cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MTo0MFrOFn96cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzE2OQ==", "bodyText": "Debug or trace", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377453169", "createdAt": "2020-02-11T05:41:40Z", "author": {"login": "nitinmotgi"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.info(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.info(\"Number of config files {} in system app config directory.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cce764fcaa94645fa6f4804b85d69123860be62"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA4MTIyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MTo1NVrOFn96kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MTo1NVrOFn96kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzIwMA==", "bodyText": "Debug or trace", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377453200", "createdAt": "2020-02-11T05:41:55Z", "author": {"login": "nitinmotgi"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.info(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.info(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cce764fcaa94645fa6f4804b85d69123860be62"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA4MTYyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MjoxOVrOFn961Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTo0MjoxOVrOFn961Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MzI2OQ==", "bodyText": "Debug or trace", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377453269", "createdAt": "2020-02-11T05:42:19Z", "author": {"login": "nitinmotgi"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.info(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.info(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.info(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      sysConfigExecutor(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void sysConfigExecutor(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.info(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cce764fcaa94645fa6f4804b85d69123860be62"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzk4OTY4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToyOToxMlrOFoZzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToyOToxMlrOFoZzIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDA0OA==", "bodyText": "style: indentation should match the rest of the project, where this variable is aligned with the variable from the previous line:\nXyz(String s1,\n    String s2", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377910048", "createdAt": "2020-02-11T21:29:12Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzk5MTc2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToyOTo1NFrOFoZ0dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMzoyN1rOFodApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDM5MQ==", "bodyText": "style: max line width is 120 characters. this looks like it could fit on the previous line.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377910391", "createdAt": "2020-02-11T21:29:54Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MjY2MQ==", "bodyText": "Seems like google plugin indentation for intellij is set at 80 char. But fixed applied according to your suggestion.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377962661", "createdAt": "2020-02-11T23:33:27Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDM5MQ=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAxNTA1OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNzoxOVrOFoaDBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozOTowMlrOFodHQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNDExOQ==", "bodyText": "style: when a line wraps (and it's not in the middle of a method call), the next line should be indented with 2 spaces instead of 4\nint x = 500 + \n  100;", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377914119", "createdAt": "2020-02-11T21:37:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NDM1Mw==", "bodyText": "Default Google setting for intellij indentation. Will change it.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377964353", "createdAt": "2020-02-11T23:39:02Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNDExOQ=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAyNDE3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0MDoxM1rOFoaI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0MDoxM1rOFoaI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNTYzOA==", "bodyText": "style: it's more readable to remove the new line here, can have x -> { } on previous line", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377915638", "createdAt": "2020-02-11T21:40:13Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null\n+            : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString =\n+        arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+          .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+              artifactSummary, configString, x -> {\n+              },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAzNDM4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0MzoyM1rOFoaPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozODozMVrOFodGjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzI5Nw==", "bodyText": "change the log message, as this isn't bootstrap.\nThis is also a normal situation, I don't think we need to log anything here.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377917297", "createdAt": "2020-02-11T21:43:23Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null\n+            : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString =\n+        arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+          .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+              artifactSummary, configString, x -> {\n+              },\n+              ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying\n+      // up to the default time limit\n+      throw e;\n+    } catch (DatasetManagementException e) {\n+      if (e.getCause() instanceof UnauthorizedException) {\n+        throw (UnauthorizedException) e.getCause();\n+      } else {\n+        throw new RetryableException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new RetryableException(e);\n+    }\n+  }\n+\n+  private void startProgram(ProgramId programId) throws Exception {\n+    Preconditions.checkArgument(programLifecycleService.getProgramSpecification(programId) != null,\n+        \"Cannot start %s because it does not exist.\", programId);\n+\n+    try {\n+      // do nothing if the program is already running\n+      ProgramStatus currentStatus = programLifecycleService.getProgramStatus(programId);\n+      if (currentStatus != ProgramStatus.STOPPED) {\n+        LOG.info(\"Program {} is in the {} state, skipping start program system bootstrap step.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NDE3Mw==", "bodyText": "Oh I changed it as system bootstrap  but makes sense to not have log.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377964173", "createdAt": "2020-02-11T23:38:31Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n+        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null\n+            : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString =\n+        arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+          .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+              artifactSummary, configString, x -> {\n+              },\n+              ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying\n+      // up to the default time limit\n+      throw e;\n+    } catch (DatasetManagementException e) {\n+      if (e.getCause() instanceof UnauthorizedException) {\n+        throw (UnauthorizedException) e.getCause();\n+      } else {\n+        throw new RetryableException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new RetryableException(e);\n+    }\n+  }\n+\n+  private void startProgram(ProgramId programId) throws Exception {\n+    Preconditions.checkArgument(programLifecycleService.getProgramSpecification(programId) != null,\n+        \"Cannot start %s because it does not exist.\", programId);\n+\n+    try {\n+      // do nothing if the program is already running\n+      ProgramStatus currentStatus = programLifecycleService.getProgramStatus(programId);\n+      if (currentStatus != ProgramStatus.STOPPED) {\n+        LOG.info(\"Program {} is in the {} state, skipping start program system bootstrap step.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzI5Nw=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAzNzQ2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NDoyMlrOFoaReQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0MTowNFrOFodJhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzgxNw==", "bodyText": "this is only temporary for a few days until you add the file watcher right?", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377917817", "createdAt": "2020-02-11T21:44:22Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NDkzMg==", "bodyText": "We will have both steps as filewatcher does not act on files which already exists.\n\n\"Init bootstrap\": Which will act on all config files that are already there.\nFile watcher: Which will act on new changes after watchservice starts.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377964932", "createdAt": "2020-02-11T23:41:04Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzgxNw=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA1MDg3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0ODo0NVrOFoaZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0Mjo0OFrOFodLnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTk2MQ==", "bodyText": "style: for the most part, method names should be verbs and not nouns, as they are performing some action.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377919961", "createdAt": "2020-02-11T21:48:45Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      sysConfigExecutor(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void sysConfigExecutor(File fileName) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NTQ2OQ==", "bodyText": "Agreed. Changed accordingly.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377965469", "createdAt": "2020-02-11T23:42:48Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      sysConfigExecutor(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void sysConfigExecutor(File fileName) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTk2MQ=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA3NDE2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/AppFabricTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1NjozN1rOFoaoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1NjozN1rOFoaoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMzc1NQ==", "bodyText": "undo these style changes", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377923755", "createdAt": "2020-02-11T21:56:37Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/AppFabricTestBase.java", "diffHunk": "@@ -151,39 +151,48 @@\n import javax.ws.rs.core.MediaType;\n \n /**\n- * AppFabric HttpHandler Test classes can extend this class, this will allow the HttpService be setup before\n- * running the handler tests, this also gives the ability to run individual test cases.\n+ * AppFabric HttpHandler Test classes can extend this class, this will allow the HttpService be\n+ * setup before running the handler tests, this also gives the ability to run individual test\n+ * cases.\n  */\n public abstract class AppFabricTestBase {\n+\n   protected static final Gson GSON = new GsonBuilder()\n-    .registerTypeAdapterFactory(new CaseInsensitiveEnumTypeAdapterFactory())\n-    .registerTypeAdapter(Trigger.class, new TriggerCodec())\n-    .registerTypeAdapter(SatisfiableTrigger.class, new TriggerCodec())\n-    .registerTypeAdapter(Constraint.class, new ProtoConstraintCodec())\n-    .create();\n+      .registerTypeAdapterFactory(new CaseInsensitiveEnumTypeAdapterFactory())\n+      .registerTypeAdapter(Trigger.class, new TriggerCodec())\n+      .registerTypeAdapter(SatisfiableTrigger.class, new TriggerCodec())\n+      .registerTypeAdapter(Constraint.class, new ProtoConstraintCodec())\n+      .create();\n   private static final String API_KEY = \"SampleTestApiKey\";\n \n-  private static final Type BATCH_PROGRAM_RUNS_TYPE = new TypeToken<List<BatchProgramHistory>>() { }.getType();\n-  private static final Type LIST_JSON_OBJECT_TYPE = new TypeToken<List<JsonObject>>() { }.getType();\n-  private static final Type LIST_RUNRECORD_TYPE = new TypeToken<List<RunRecord>>() { }.getType();\n-  private static final Type SET_TRING_TYPE = new TypeToken<Set<String>>() { }.getType();\n-  private static final Type LIST_PROFILE = new TypeToken<List<Profile>>() { }.getType();\n-\n-  protected static final Type LIST_MAP_STRING_STRING_TYPE = new TypeToken<List<Map<String, String>>>() { }.getType();\n-  protected static final Type MAP_STRING_STRING_TYPE = new TypeToken<Map<String, String>>() { }.getType();\n+  private static final Type BATCH_PROGRAM_RUNS_TYPE = new TypeToken<List<BatchProgramHistory>>() {\n+  }.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA3Nzg2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/AppFabricTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1Nzo0NFrOFoaq5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDozNDowM1rOFoeJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyNDMyNQ==", "bodyText": "there's a utility Tasks.waitFor() method that should be used instead of adding retrying versions of these methods.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377924325", "createdAt": "2020-02-11T21:57:44Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/AppFabricTestBase.java", "diffHunk": "@@ -364,7 +380,23 @@ protected static HttpResponse doGet(String resource) throws Exception {\n     return doGet(resource, null);\n   }\n \n-  protected static HttpResponse doGet(String resource, @Nullable Map<String, String> headers) throws Exception {\n+  protected static HttpResponse doRetryableGet(String resource, int count) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MTI5Nw==", "bodyText": "Changed existing waitState functions to avoid JSON parse error for 404 (bbecause of which I added this new utility but now it is not needed).", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377981297", "createdAt": "2020-02-12T00:34:03Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/AppFabricTestBase.java", "diffHunk": "@@ -364,7 +380,23 @@ protected static HttpResponse doGet(String resource) throws Exception {\n     return doGet(resource, null);\n   }\n \n-  protected static HttpResponse doGet(String resource, @Nullable Map<String, String> headers) throws Exception {\n+  protected static HttpResponse doRetryableGet(String resource, int count) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyNDMyNQ=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE4Nzg2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNzo1MFrOFobvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToxMToxOFrOFoewjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTgxMw==", "bodyText": "this doesn't make it clear what actually failed, since we get here if either the app could not be deployed or one of the programs couldn't be started. I think it's better to break apart the app deploy and program starting.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377941813", "createdAt": "2020-02-11T22:37:50Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTMxMA==", "bodyText": "Done. Changed logic accordingly.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377991310", "createdAt": "2020-02-12T01:11:18Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTgxMw=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE5MTMwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozODo1N1rOFobxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0OToyOFrOFo4fpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjMzMA==", "bodyText": "doesn't look like there are any retries if this fails", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377942330", "createdAt": "2020-02-11T22:38:57Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0Mzk4NQ==", "bodyText": "If the program is already running, this will be a no-op. However, this actually isn't the desired behavior if the app changed.\nFor example, if the artifact version is different, after we deploy the app, we need to restart the programs in order for them to pick up the new code. We need to restart the programs if the artifact or config for the app changed.\nOr is this what you were referring to with that idempotent TODO comment?", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377943985", "createdAt": "2020-02-11T22:42:58Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjMzMA=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODgwMg==", "bodyText": "doesn't look like there are any retries if this fails\n\nNot retrying here as ProgramStarter does not throw retryable exception. I am only retrying for DeployingSystemApp because it throws retryable exception (and we need to wait till metadata sergice is up and running). Following what we did for ProgramStarter Bootstrap step.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377988802", "createdAt": "2020-02-12T01:01:11Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjMzMA=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4OTIxMw==", "bodyText": "If the program is already running, this will be a no-op. However, this actually isn't the desired behavior if the app changed.\nFor example, if the artifact version is different, after we deploy the app, we need to restart the programs in order for them to pick up the new code. We need to restart the programs if the artifact or config for the app changed.\nOr is this what you were referring to with that idempotent TODO comment?\n\nYeah. I am planning to work on understanding how to handle those cases from you after this change is in and will start working on it after operator changes are also in.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377989213", "createdAt": "2020-02-12T01:02:46Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjMzMA=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxMjk2Ng==", "bodyText": "The caller decides what it wants to retry, not the ProgramLifecycleService. You can define whatever retry logic you want.\nYou should not compare this service to the BootstrapService. They have completely different contracts. The contract here is that CDAP will make system apps match the state declared in the configs. If program start fails for some transient reason, it should be retried in order to fulfill that contract. If it failed in a way that we know it will always fail, then it doesn't need to be retried.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378412966", "createdAt": "2020-02-12T17:49:28Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjMzMA=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE5MjkyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozOTozMVrOFobyKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozOTozMVrOFobyKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MjU3MQ==", "bodyText": "style: remove newline between javadoc and class", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377942571", "createdAt": "2020-02-11T22:39:31Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.annotations.SerializedName;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+\n+/**\n+ * Definition for a single step in a system app config. Defines what operation to perform for a\n+ * system app and any arguments required to perform the operation.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwNjg0OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NDo1M1rOFob62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToxODozNVrOFoe3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDc5Mg==", "bodyText": "It looks like nothing is logged if there are failures deploying the app. We need to log errors if they happen, though we also don't want to flood the logs with error messages if it is failing constantly.\nYou can use the Loggers utility class to create a logger that limits how often it actually logs.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377944792", "createdAt": "2020-02-11T22:44:53Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzE2Nw==", "bodyText": "Added logging such that it logs in debug mode if error is retryable exception else it will anyways log in catch below.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377993167", "createdAt": "2020-02-12T01:18:35Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+      ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    try {\n+      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+        startProgram(program.getProgramId());\n+      }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n+          arguments.getId(), ex);\n+\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n+    return Retries.callWithRetries(() -> deploySystemApp(arguments),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDc5Mg=="}, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIxNTAwOnYy", "diffSide": "RIGHT", "path": "cdap-common/src/main/resources/cdap-default.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0Nzo1N1rOFob_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0Nzo1N1rOFob_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjA0OQ==", "bodyText": "should also add this (without /opt/cdap/master/) to the cdap-site.xml in cdap-standalone module", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377946049", "createdAt": "2020-02-11T22:47:57Z", "author": {"login": "albertshau"}, "path": "cdap-common/src/main/resources/cdap-default.xml", "diffHunk": "@@ -321,6 +321,17 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>system.app.config.dir</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIyMTc0OnYy", "diffSide": "RIGHT", "path": "cdap-common/src/main/resources/cdap-default.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1MDoxM1rOFocDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1MDoxM1rOFocDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzA0OA==", "bodyText": "this isn't really running steps like the bootstrap service. It's not imperative, but declarative. The configs are defining what the desired state is, and CDAP is figuring out how to make that happen. It would be more accurate to say something like:\nDirectory that contains definitions for what system apps should be running. This directory is continuously monitored for new/modified config files and updating application state to match what is defined in those files.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r377947048", "createdAt": "2020-02-11T22:50:13Z", "author": {"login": "albertshau"}, "path": "cdap-common/src/main/resources/cdap-default.xml", "diffHunk": "@@ -321,6 +321,17 @@\n     </description>\n   </property>\n \n+  <property>\n+    <name>system.app.config.dir</name>\n+    <value>/opt/cdap/master/system-app-config</value>\n+    <description>\n+      Directory that contains system app config steps that should be executed on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d5cde6912612787c31820e6ef9612bf88d8c05"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDg4NzY0OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyNDo0MFrOFo1aWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NDoyMlrOFo6j3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MjQ1OQ==", "bodyText": "insert space after 'if'", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378362459", "createdAt": "2020-02-12T16:24:40Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NjgxMw==", "bodyText": "Don't do one line if. Always do:\nif (appDetail == null) {\n  return;\n}", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378446813", "createdAt": "2020-02-12T18:54:22Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MjQ1OQ=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDg4OTU0OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyNToxMVrOFo1bkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyNToxMVrOFo1bkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2Mjc3MQ==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378362771", "createdAt": "2020-02-12T16:25:11Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n         startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n-          arguments.getId(), ex);\n-\n     }\n   }\n \n-  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n-    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n-        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA1MDEzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzowNjowM1rOFo3BFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzowNjowM1rOFo3BFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4ODc1Ng==", "bodyText": "should not print stack trace like this, it's printed in the log above.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378388756", "createdAt": "2020-02-12T17:06:03Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n         startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n-          arguments.getId(), ex);\n-\n     }\n   }\n \n-  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n-    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n-        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA1NDk2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzowNzowMlrOFo3Dvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzowNzowMlrOFo3Dvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4OTQzOA==", "bodyText": "this behavior means it don't actually get retried. It will catch the exception then return. You should use the version that takes a Predicate, and log there.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378389438", "createdAt": "2020-02-12T17:07:02Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n         startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n-          arguments.getId(), ex);\n-\n     }\n   }\n \n-  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n-    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n-        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA2MDg2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzowODozOFrOFo3HWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NTozNlrOFo6mpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MDM2MA==", "bodyText": "it's better to let this exception propagate up and have the caller handler it, rather than log here and return null.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378390360", "createdAt": "2020-02-12T17:08:38Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n         startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n-          arguments.getId(), ex);\n-\n     }\n   }\n \n-  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n-    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n-        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzUyNw==", "bodyText": "Changed it to throwing the retryable exception.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378447527", "createdAt": "2020-02-12T18:55:36Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -57,48 +57,62 @@\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-      ProgramLifecycleService programLifecycleService) {\n+                          ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n   public void deployAppAndStartPrograms(Arguments arguments) {\n-    try {\n-      // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n-      ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-      for (ProgramDescriptor program : appDetail.getPrograms()) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n         startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Failed to deploy app {} and start its program with exception {}.\",\n-          arguments.getId(), ex);\n-\n     }\n   }\n \n-  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) throws Exception {\n-    return Retries.callWithRetries(() -> deploySystemApp(arguments),\n-        RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MDM2MA=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA2NjgzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxMDoyNVrOFo3LNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxMDoyNVrOFo3LNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MTM0OA==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378391348", "createdAt": "2020-02-12T17:10:25Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA3NzExOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxMzoxN1rOFo3RoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Nzo0N1rOFo6rUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Mjk5Mg==", "bodyText": "this is misleading, the caller doesn't set a time limit", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378392992", "createdAt": "2020-02-12T17:13:17Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+        .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+          artifactSummary, configString, x -> { }, ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0ODcyMQ==", "bodyText": "Oh ok.. took it from AppStarter Step. Removed the line as it seems pretty self explanatory.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378448721", "createdAt": "2020-02-12T18:57:47Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+        .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+          artifactSummary, configString, x -> { }, ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Mjk5Mg=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA4MjUzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxNDo0NVrOFo3U6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxNDo0NVrOFo3U6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MzgzNQ==", "bodyText": "don't need 'with exception {}'. Passing the last argument as an exception will tell the logger to log the stack trace, you don't need to include a placeholder for it in the message.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378393835", "createdAt": "2020-02-12T17:14:45Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA5MTMyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxNjo1OVrOFo3aOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxNjo1OVrOFo3aOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NTE5Mg==", "bodyText": "this shouldn't be a debug log, it's pretty important to know that there is some problem with the system apps. I think it's better as a warning, with some limit to how often it is logged (see Loggers.sampling).", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378395192", "createdAt": "2020-02-12T17:16:59Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTA5NjQ3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxODoyOFrOFo3dgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxODoyOFrOFo3dgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NjAzMg==", "bodyText": "this is an extra I/O and is not needed. It will always exist unless the user happens to delete it in the middle of this call. And even then, it would be handled below, through the NotFoundException.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378396032", "createdAt": "2020-02-12T17:18:28Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+        .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+          artifactSummary, configString, x -> { }, ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying\n+      // up to the default time limit\n+      throw e;\n+    } catch (DatasetManagementException e) {\n+      if (e.getCause() instanceof UnauthorizedException) {\n+        throw (UnauthorizedException) e.getCause();\n+      } else {\n+        throw new RetryableException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new RetryableException(e);\n+    }\n+  }\n+\n+  private void startProgram(ProgramId programId) throws Exception {\n+    Preconditions.checkArgument(programLifecycleService.getProgramSpecification(programId) != null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwMDgyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxOTo1MVrOFo3gVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMjoyN1rOFo603w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Njc1OA==", "bodyText": "please insert a TODO to make this restart the program if the application was changed.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378396758", "createdAt": "2020-02-12T17:19:51Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+        .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+          artifactSummary, configString, x -> { }, ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying\n+      // up to the default time limit\n+      throw e;\n+    } catch (DatasetManagementException e) {\n+      if (e.getCause() instanceof UnauthorizedException) {\n+        throw (UnauthorizedException) e.getCause();\n+      } else {\n+        throw new RetryableException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new RetryableException(e);\n+    }\n+  }\n+\n+  private void startProgram(ProgramId programId) throws Exception {\n+    Preconditions.checkArgument(programLifecycleService.getProgramSpecification(programId) != null,\n+        \"Cannot start %s because it does not exist.\", programId);\n+\n+    try {\n+      // do nothing if the program is already running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTE2Nw==", "bodyText": "Had added similar TODO above but also added here to keep track of it.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378451167", "createdAt": "2020-02-12T19:02:27Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+            try {\n+              return deploySystemApp(arguments);\n+            } catch (RetryableException ex) {\n+              LOG.debug(\"Failed to deploy app {} with exception {}. Will retry\", arguments.getId(), ex);\n+              ex.printStackTrace();\n+            }\n+            return null;\n+          },\n+          RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception {}\",\n+          arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+        arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return appLifecycleService\n+        .deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),\n+          artifactSummary, configString, x -> { }, ownerPrincipalId, arguments.canUpdateSchedules());\n+    } catch (NotFoundException | UnauthorizedException | InvalidArtifactException e) {\n+      // these exceptions are for sure not retry-able. It's hard to tell if the others are, so we just try retrying\n+      // up to the default time limit\n+      throw e;\n+    } catch (DatasetManagementException e) {\n+      if (e.getCause() instanceof UnauthorizedException) {\n+        throw (UnauthorizedException) e.getCause();\n+      } else {\n+        throw new RetryableException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new RetryableException(e);\n+    }\n+  }\n+\n+  private void startProgram(ProgramId programId) throws Exception {\n+    Preconditions.checkArgument(programLifecycleService.getProgramSpecification(programId) != null,\n+        \"Cannot start %s because it does not exist.\", programId);\n+\n+    try {\n+      // do nothing if the program is already running", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Njc1OA=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwMTk5OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDowOVrOFo3hFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDowOVrOFo3hFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Njk1MQ==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378396951", "createdAt": "2020-02-12T17:20:09Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwMjEwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDoxMVrOFo3hLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDoxMVrOFo3hLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Njk3Mg==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378396972", "createdAt": "2020-02-12T17:20:11Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwNTMwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo1OVrOFo3jGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo1OVrOFo3jGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzQ2Nw==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378397467", "createdAt": "2020-02-12T17:20:59Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwOTU1OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjowN1rOFo3lsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjowN1rOFo3lsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODEzMA==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398130", "createdAt": "2020-02-12T17:22:07Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwOTcyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxMFrOFo3lzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxMFrOFo3lzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODE1Nw==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398157", "createdAt": "2020-02-12T17:22:10Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwOTg3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxNFrOFo3l6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxNFrOFo3l6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODE4Nw==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398187", "createdAt": "2020-02-12T17:22:14Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTExMDEwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxN1rOFo3mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoxN1rOFo3mEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODIyNQ==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398225", "createdAt": "2020-02-12T17:22:17Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);\n+      return SystemAppConfig.EMPTY;\n+    } catch (JsonParseException e) {\n+      LOG.warn(\"Could not parse system app config file {}.\",\n+          fileName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTExMDQzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoyMlrOFo3mRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjoyMlrOFo3mRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODI3Nw==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398277", "createdAt": "2020-02-12T17:22:22Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);\n+      return SystemAppConfig.EMPTY;\n+    } catch (JsonParseException e) {\n+      LOG.warn(\"Could not parse system app config file {}.\",\n+          fileName, e);\n+      return SystemAppConfig.EMPTY;\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not system app config file {}.\",\n+          fileName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTExMTI4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMjozN1rOFo3mzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNDoyNlrOFo645w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODQxMg==", "bodyText": "Could not read system app config file", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378398412", "createdAt": "2020-02-12T17:22:37Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);\n+      return SystemAppConfig.EMPTY;\n+    } catch (JsonParseException e) {\n+      LOG.warn(\"Could not parse system app config file {}.\",\n+          fileName, e);\n+      return SystemAppConfig.EMPTY;\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not system app config file {}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MjE5OQ==", "bodyText": "You can combine the FileNotFoundException as the IOException. Just log with the exception would give enough information to debug.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378452199", "createdAt": "2020-02-12T19:04:26Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);\n+      return SystemAppConfig.EMPTY;\n+    } catch (JsonParseException e) {\n+      LOG.warn(\"Could not parse system app config file {}.\",\n+          fileName, e);\n+      return SystemAppConfig.EMPTY;\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not system app config file {}.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5ODQxMg=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTExODM0OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNDo0OFrOFo3rUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNDo0OFrOFo3rUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5OTU2OQ==", "bodyText": "this is not required, since it's a TemporaryFolder it will be cleaned up by junit.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378399569", "createdAt": "2020-02-12T17:24:48Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n+                                                                programLifecycleService);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+    systemAppManagementService.shutDown();\n+  }\n+\n+  @After\n+  public void cleanupTest() {\n+    FileUtils.deleteDirectoryContents(systemConfigDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEyMzIyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjowN1rOFo3uWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjowN1rOFo3uWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDM0NA==", "bodyText": "indentation (same for rest of the file)", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378400344", "createdAt": "2020-02-12T17:26:07Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n+                                                                programLifecycleService);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+    systemAppManagementService.shutDown();\n+  }\n+\n+  @After\n+  public void cleanupTest() {\n+    FileUtils.deleteDirectoryContents(systemConfigDir);\n+  }\n+\n+  private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(\n+        new ArtifactSummary(artifactId.getName(), artifactId.getVersion().getVersion()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEyNTc1OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjo0N1rOFo3v7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNjo0N1rOFo3v7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDc0OQ==", "bodyText": "should be in a try - finally to ensure it gets closed", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378400749", "createdAt": "2020-02-12T17:26:47Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n+                                                                programLifecycleService);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+    systemAppManagementService.shutDown();\n+  }\n+\n+  @After\n+  public void cleanupTest() {\n+    FileUtils.deleteDirectoryContents(systemConfigDir);\n+  }\n+\n+  private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(\n+        new ArtifactSummary(artifactId.getName(), artifactId.getVersion().getVersion()));\n+    SystemAppStep.Arguments step1Argument = new SystemAppStep.Arguments(\n+        appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n+    List<SystemAppStep> steps = new ArrayList<>();\n+    steps.add(\n+        new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP,\n+            step1Argument));\n+    SystemAppConfig config = new SystemAppConfig(steps);\n+    File tmpFile = new File(systemConfigDir, filename);\n+    BufferedWriter bw = new BufferedWriter(new FileWriter(tmpFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTE3NzU3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo0MjoyMVrOFo4Rbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxMzoxMFrOFo7KvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwOTMyNg==", "bodyText": "Since the service can't really be re-used across test cases because it reads things on start up, it's better to create it within the test case rather than here.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378409326", "createdAt": "2020-02-12T17:42:21Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1Njc2NQ==", "bodyText": "Makes sense. I was planning to use @BeforeTest and @AfterTest but this looks better for now. Changed it accordingly.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378456765", "createdAt": "2020-02-12T19:13:10Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwOTMyNg=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM5NzI5OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1MToxM1rOFo6dFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyMzoxMFrOFo7ftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NTA3Ng==", "bodyText": "Use annotation @VisibileForTesting", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378445076", "createdAt": "2020-02-12T18:51:13Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppConfig.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Specified operations to perform for system app in a CDAP instance.\n+ */\n+public class SystemAppConfig {\n+  public static final SystemAppConfig EMPTY = new SystemAppConfig(Collections.emptyList());\n+  private final List<SystemAppStep> steps;\n+\n+  public SystemAppConfig(List<SystemAppStep> steps) {\n+    this.steps = steps;\n+  }\n+\n+  public List<SystemAppStep> getSteps() {\n+    // can be null when deserialized through gson\n+    return steps == null ? Collections.emptyList() : Collections.unmodifiableList(steps);\n+  }\n+\n+  // Only used for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2MjEzMw==", "bodyText": "The method is not needed anymore. removed it.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378462133", "createdAt": "2020-02-12T19:23:10Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppConfig.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Specified operations to perform for system app in a CDAP instance.\n+ */\n+public class SystemAppConfig {\n+  public static final SystemAppConfig EMPTY = new SystemAppConfig(Collections.emptyList());\n+  private final List<SystemAppStep> steps;\n+\n+  public SystemAppConfig(List<SystemAppStep> steps) {\n+    this.steps = steps;\n+  }\n+\n+  public List<SystemAppStep> getSteps() {\n+    // can be null when deserialized through gson\n+    return steps == null ? Collections.emptyList() : Collections.unmodifiableList(steps);\n+  }\n+\n+  // Only used for testing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NTA3Ng=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQwMjA1OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1MjozOFrOFo6gFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1MjozOFrOFo6gFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NTg0NA==", "bodyText": "Can simply be steps.forEach(SystemAppStep::validate);", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378445844", "createdAt": "2020-02-12T18:52:38Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppConfig.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Specified operations to perform for system app in a CDAP instance.\n+ */\n+public class SystemAppConfig {\n+  public static final SystemAppConfig EMPTY = new SystemAppConfig(Collections.emptyList());\n+  private final List<SystemAppStep> steps;\n+\n+  public SystemAppConfig(List<SystemAppStep> steps) {\n+    this.steps = steps;\n+  }\n+\n+  public List<SystemAppStep> getSteps() {\n+    // can be null when deserialized through gson\n+    return steps == null ? Collections.emptyList() : Collections.unmodifiableList(steps);\n+  }\n+\n+  // Only used for testing.\n+  protected void addSteps(SystemAppStep step) {\n+    steps.add(step);\n+  }\n+\n+  /**\n+   * Check that this is a valid config, throwing an exception if not.\n+   *\n+   * @throws IllegalArgumentException if the config is invalid\n+   */\n+  public void validate() {\n+    for (SystemAppStep step : steps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQwNjcxOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Mzo1OFrOFo6i_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Mzo1OFrOFo6i_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NjU4OA==", "bodyText": "Remove extra empty lines.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378446588", "createdAt": "2020-02-12T18:53:58Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQxMDgwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NToxMFrOFo6lpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NToxMFrOFo6lpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzI2OA==", "bodyText": "Javadoc is needed for non-trivial public method.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378447268", "createdAt": "2020-02-12T18:55:10Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQxNDY3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NjoxN1rOFo6oQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MToyN1rOFo8FRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzkzNw==", "bodyText": "Why starting of the program doesn't take arguments? This means there is no way to alter the runtime arguments via the config?", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378447937", "createdAt": "2020-02-12T18:56:17Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NTAwOA==", "bodyText": "Currently we plan to only use one step for enable an app (which includes deploying app and starting its programs). The ProgramStarter step also only uses programId to start programs (https://github.com/cdapio/cdap/blob/1d62163faaecb5b888f4bccd0fcf4a8d27bbd549/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/bootstrap/executor/ProgramStarter.java). I can  follow up on this offline with you and Albert.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378465008", "createdAt": "2020-02-12T19:28:26Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzkzNw=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MTc0OA==", "bodyText": "Discussed with Terrence offline. We can think of adding more steps in system app config for starting specific programs with their arguments. For next step of changes.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378471748", "createdAt": "2020-02-12T19:41:27Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzkzNw=="}, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQxOTAwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Nzo0NlrOFo6rTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1Nzo0NlrOFo6rTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0ODcxNw==", "bodyText": "Is this method contract allows null to be returned? If that's the case, annotate it with @Nullable.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378448717", "createdAt": "2020-02-12T18:57:46Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+\n+\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if(appDetail == null) return;\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {} with exception {}\",\n+          program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQyODc4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMDo1MFrOFo6xsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMDo1MFrOFo6xsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MDM1Mw==", "bodyText": "listFiles can return null. Use DirUtils.listFiles instead.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378450353", "createdAt": "2020-02-12T19:00:50Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQzMzEzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMjoxOVrOFo60oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMjoxOVrOFo60oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTEwNA==", "bodyText": "Log with the exception, not just the e.getMessage. Otherwise the stacktrace will be lost and hard to find the root cause.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378451104", "createdAt": "2020-02-12T19:02:19Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQzNjIwOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMzoxNlrOFo62oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMzoxNlrOFo62oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTYxNg==", "bodyText": "I don't think you need a double try. Just normal try-catch would do it.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378451616", "createdAt": "2020-02-12T19:03:16Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ0MjY4OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNToyNFrOFo66yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNToyNFrOFo66yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MjY4Mg==", "bodyText": "These logs during shutdown seems a bit too much.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378452682", "createdAt": "2020-02-12T19:05:24Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService,\n+        programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService = Executors\n+        .newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));\n+    executorService.execute(() -> {\n+      try {\n+        // Execute all steps for each config file in system config directory.\n+        bootStrapSystemAppConfigDir();\n+      } catch (Exception ex) {\n+        LOG.error(\"Got exception in watch service for system app config dir\", ex);\n+      }\n+    });\n+  }\n+\n+  private void bootStrapSystemAppConfigDir() throws Exception {\n+    LOG.debug(\"Number of config files {} in system app config directory.\",\n+        systemAppConfigDirPath.listFiles().length);\n+\n+    for (File sysAppConfigFile : systemAppConfigDirPath.listFiles()) {\n+      LOG.debug(\"Running steps in config file {}\", sysAppConfigFile.getAbsoluteFile());\n+      executeSysConfig(sysAppConfigFile.getAbsoluteFile());\n+    }\n+  }\n+\n+  private void executeSysConfig(File fileName) throws Exception {\n+    SystemAppConfig config = parseConfig(fileName);\n+    for (SystemAppStep step : config.getSteps()) {\n+      try {\n+        step.validate();\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Config step {} failed because it is malformed: {}\", step.getLabel(),\n+            e.getMessage());\n+        return;\n+      }\n+      if (step.getType() == SystemAppStep.Type.ENABLE_SYSTEM_APP) {\n+        systemAppEnableExecutor.deployAppAndStartPrograms(step.getArguments());\n+        LOG.debug(\"Deployed and enabled system app with id {} and label {}. Config file: {}.\",\n+            step.getArguments().getId(), step.getLabel(), fileName);\n+      } else {\n+        LOG.warn(\"Unknown system app step type {} for step label {}. Config file: {}. Ignoring it.\",\n+            step.getLabel(), step.getType(), fileName);\n+      }\n+    }\n+  }\n+\n+  private SystemAppConfig parseConfig(File fileName) {\n+    try {\n+      try (Reader reader = new FileReader(fileName)) {\n+        return GSON.fromJson(reader, SystemAppConfig.class);\n+      }\n+    } catch (FileNotFoundException e) {\n+      LOG.info(\"System app config file {} does not exist.\",\n+          fileName);\n+      return SystemAppConfig.EMPTY;\n+    } catch (JsonParseException e) {\n+      LOG.warn(\"Could not parse system app config file {}.\",\n+          fileName, e);\n+      return SystemAppConfig.EMPTY;\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not system app config file {}.\",\n+          fileName, e);\n+      return SystemAppConfig.EMPTY;\n+    }\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    LOG.debug(\"Stopping {}\", getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ0NDA3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNTo1MFrOFo67ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNTo1MFrOFo67ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MjkyMg==", "bodyText": "Why the full name?", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378452922", "createdAt": "2020-02-12T19:05:50Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.annotations.SerializedName;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+\n+/**\n+ * Definition for a single step in a system app config. Defines what operation to perform for a\n+ * system app and any arguments required to perform the operation.\n+ */\n+public class SystemAppStep {\n+\n+  private final String label;\n+  private final Type type;\n+  private final Arguments arguments;\n+\n+  public SystemAppStep(String label, Type type, Arguments arguments) {\n+    this.label = label;\n+    this.type = type;\n+    this.arguments = arguments;\n+  }\n+\n+  public String getLabel() {\n+    return label;\n+  }\n+\n+  public io.cdap.cdap.internal.sysapp.SystemAppStep.Type getType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25979d7ef8470eef91a97f829682219eba1262d3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU0MTczOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjoxMlrOFo76cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjoxMlrOFo76cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODk3OA==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378468978", "createdAt": "2020-02-12T19:36:12Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -51,50 +54,55 @@\n public class SystemAppEnableExecutor {\n \n   private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Logger LIMITED_LOGGER = Loggers\n+      .sampling(LOG, LogSamplers.limitRate(TimeUnit.SECONDS.toMillis(100)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU0MTk0OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjoxNlrOFo76lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNzo1N1rOFo79-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTAxMg==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378469012", "createdAt": "2020-02-12T19:36:16Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -51,50 +54,55 @@\n public class SystemAppEnableExecutor {\n \n   private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Logger LIMITED_LOGGER = Loggers\n+      .sampling(LOG, LogSamplers.limitRate(TimeUnit.SECONDS.toMillis(100)));\n+\n   private static final Gson GSON = new Gson();\n   private final ApplicationLifecycleService appLifecycleService;\n   private final ProgramLifecycleService programLifecycleService;\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-                          ProgramLifecycleService programLifecycleService) {\n+      ProgramLifecycleService programLifecycleService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTg4MA==", "bodyText": "same comment for the rest of the changes, earlier fixes look like they were undone.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378469880", "createdAt": "2020-02-12T19:37:57Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -51,50 +54,55 @@\n public class SystemAppEnableExecutor {\n \n   private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Logger LIMITED_LOGGER = Loggers\n+      .sampling(LOG, LogSamplers.limitRate(TimeUnit.SECONDS.toMillis(100)));\n+\n   private static final Gson GSON = new Gson();\n   private final ApplicationLifecycleService appLifecycleService;\n   private final ProgramLifecycleService programLifecycleService;\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-                          ProgramLifecycleService programLifecycleService) {\n+      ProgramLifecycleService programLifecycleService) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTAxMg=="}, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU0MzQ1OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjo0MFrOFo77dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjo0MFrOFo77dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTIzNg==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378469236", "createdAt": "2020-02-12T19:36:40Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -51,50 +54,55 @@\n public class SystemAppEnableExecutor {\n \n   private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Logger LIMITED_LOGGER = Loggers\n+      .sampling(LOG, LogSamplers.limitRate(TimeUnit.SECONDS.toMillis(100)));\n+\n   private static final Gson GSON = new Gson();\n   private final ApplicationLifecycleService appLifecycleService;\n   private final ProgramLifecycleService programLifecycleService;\n \n   @Inject\n   SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n-                          ProgramLifecycleService programLifecycleService) {\n+      ProgramLifecycleService programLifecycleService) {\n     this.appLifecycleService = appLifecycleService;\n     this.programLifecycleService = programLifecycleService;\n   }\n \n+  /**\n+   * Deploys an application with given arguments and starts all its programs.\n+   */\n   public void deployAppAndStartPrograms(Arguments arguments) {\n-\n-\n     // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n     ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n-    if(appDetail == null) return;\n+    if (appDetail == null) {\n+      return;\n+    }\n \n     // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n     for (ProgramDescriptor program : appDetail.getPrograms()) {\n       try {\n         startProgram(program.getProgramId());\n       } catch (Exception ex) {\n         LOG.error(\"Failed to start program {} for app {} with exception {}\",\n-          program.getProgramId(), arguments.getId(), ex);\n+            program.getProgramId(), arguments.getId(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU1MjkzOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozOTozNVrOFo8BTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MDoyMlrOFo8DCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDczMg==", "bodyText": "you can leave out the finally if you do:\ntry (BufferedWriter bw = new BufferedWriter(...)) {\n  ...\n}", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378470732", "createdAt": "2020-02-12T19:39:35Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -76,36 +76,30 @@ public static void setup() throws IOException {\n     programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n     applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n     cConf = injector.getInstance(CConfiguration.class);\n-    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n-    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n-    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n-                                                                programLifecycleService);\n   }\n \n   @AfterClass\n   public static void tearDown() throws Exception {\n     systemAppManagementService.shutDown();\n   }\n \n-  @After\n-  public void cleanupTest() {\n-    FileUtils.deleteDirectoryContents(systemConfigDir);\n-  }\n-\n   private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n-    AppRequest<JsonObject> appRequest = new AppRequest<>(\n-        new ArtifactSummary(artifactId.getName(), artifactId.getVersion().getVersion()));\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(new ArtifactSummary(artifactId.getName(),\n+      artifactId.getVersion().getVersion()));\n     SystemAppStep.Arguments step1Argument = new SystemAppStep.Arguments(\n-        appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n+      appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n     List<SystemAppStep> steps = new ArrayList<>();\n     steps.add(\n-        new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP,\n-            step1Argument));\n+      new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP, step1Argument));\n     SystemAppConfig config = new SystemAppConfig(steps);\n     File tmpFile = new File(systemConfigDir, filename);\n     BufferedWriter bw = new BufferedWriter(new FileWriter(tmpFile));\n-    bw.write(GSON.toJson(config));\n-    bw.flush();\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MTE3OQ==", "bodyText": "I believe the flush is also done automatically on close, so it may not be needed", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378471179", "createdAt": "2020-02-12T19:40:22Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -76,36 +76,30 @@ public static void setup() throws IOException {\n     programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n     applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n     cConf = injector.getInstance(CConfiguration.class);\n-    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n-    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n-    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n-                                                                programLifecycleService);\n   }\n \n   @AfterClass\n   public static void tearDown() throws Exception {\n     systemAppManagementService.shutDown();\n   }\n \n-  @After\n-  public void cleanupTest() {\n-    FileUtils.deleteDirectoryContents(systemConfigDir);\n-  }\n-\n   private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n-    AppRequest<JsonObject> appRequest = new AppRequest<>(\n-        new ArtifactSummary(artifactId.getName(), artifactId.getVersion().getVersion()));\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(new ArtifactSummary(artifactId.getName(),\n+      artifactId.getVersion().getVersion()));\n     SystemAppStep.Arguments step1Argument = new SystemAppStep.Arguments(\n-        appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n+      appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n     List<SystemAppStep> steps = new ArrayList<>();\n     steps.add(\n-        new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP,\n-            step1Argument));\n+      new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP, step1Argument));\n     SystemAppConfig config = new SystemAppConfig(steps);\n     File tmpFile = new File(systemConfigDir, filename);\n     BufferedWriter bw = new BufferedWriter(new FileWriter(tmpFile));\n-    bw.write(GSON.toJson(config));\n-    bw.flush();\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDczMg=="}, "originalCommit": {"oid": "af755f0251c1dad6b841a29f5ca24d2f07761d31"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTY2OTYzOnYy", "diffSide": "LEFT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoxNzowN1rOFo9Kvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoxNzowN1rOFo9Kvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4OTUzNA==", "bodyText": "style: when there is a newline in the middle of a method call, arguments should line up with the previous line.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378489534", "createdAt": "2020-02-12T20:17:07Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -84,7 +84,7 @@ public void deployAppAndStartPrograms(Arguments arguments) {\n         startProgram(program.getProgramId());\n       } catch (Exception ex) {\n         LOG.error(\"Failed to start program {} for app {} with exception {}\",\n-            program.getProgramId(), arguments.getId(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09541e4912432876f03256f00a10978d58ca07e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTY3MDgyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoxNzozM1rOFo9Lfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo1Mjo1MFrOFpBdJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4OTcyNw==", "bodyText": "here it's correct to do 2 space indent since it's not in the middle of a method call", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378489727", "createdAt": "2020-02-12T20:17:33Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -112,17 +112,14 @@ private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exce\n     ArtifactSummary artifactSummary = arguments.getArtifact();\n \n     KerberosPrincipalId ownerPrincipalId =\n-        arguments.getOwnerPrincipal() == null ? null\n-            : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+      arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09541e4912432876f03256f00a10978d58ca07e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1OTc4MQ==", "bodyText": "Oh ok. In this case the whole line came into 1 single line <120 chars so just made a one line.", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378559781", "createdAt": "2020-02-12T22:52:50Z", "author": {"login": "pandyajay10"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -112,17 +112,14 @@ private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exce\n     ArtifactSummary artifactSummary = arguments.getArtifact();\n \n     KerberosPrincipalId ownerPrincipalId =\n-        arguments.getOwnerPrincipal() == null ? null\n-            : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+      arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4OTcyNw=="}, "originalCommit": {"oid": "c09541e4912432876f03256f00a10978d58ca07e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE1MDY5OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMjo0MFrOFpB5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMjo0MFrOFpB5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NzAyOA==", "bodyText": "extra space after return", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378567028", "createdAt": "2020-02-12T23:12:40Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppEnableExecutor.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.DatasetManagementException;\n+import io.cdap.cdap.api.retry.RetryableException;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.common.ApplicationNotFoundException;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.InvalidArtifactException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.logging.LogSamplers;\n+import io.cdap.cdap.common.logging.Loggers;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.internal.app.deploy.pipeline.ApplicationWithPrograms;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.sysapp.SystemAppStep.Arguments;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.KerberosPrincipalId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.security.spi.authorization.UnauthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Deploys an application with given arguments. Also runs all programs corresponding to the\n+ * application.\n+ */\n+public class SystemAppEnableExecutor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppEnableExecutor.class);\n+  private static final Logger LIMITED_LOGGER = Loggers\n+    .sampling(LOG, LogSamplers.limitRate(TimeUnit.SECONDS.toMillis(100)));\n+\n+  private static final Gson GSON = new Gson();\n+  private final ApplicationLifecycleService appLifecycleService;\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  SystemAppEnableExecutor(ApplicationLifecycleService appLifecycleService,\n+                          ProgramLifecycleService programLifecycleService) {\n+    this.appLifecycleService = appLifecycleService;\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  /**\n+   * Deploys an application with given arguments and starts all its programs.\n+   */\n+  public void deployAppAndStartPrograms(Arguments arguments) {\n+    // TODO(CDAP-16243): Make deploy app and start programs idempotent to not have transactional issues.\n+    ApplicationWithPrograms appDetail = retryableDeploySystemApp(arguments);\n+    if (appDetail == null) {\n+      return;\n+    }\n+\n+    // TODO(CDAP-16243): Fix logic to restart programs for app with difference version/config.\n+    for (ProgramDescriptor program : appDetail.getPrograms()) {\n+      try {\n+        startProgram(program.getProgramId());\n+      } catch (Exception ex) {\n+        LOG.error(\"Failed to start program {} for app {}.\", program.getProgramId(), arguments.getId(), ex);\n+      }\n+    }\n+  }\n+\n+  @Nullable\n+  private ApplicationWithPrograms retryableDeploySystemApp(Arguments arguments) {\n+    try {\n+      return Retries.callWithRetries(() -> {\n+        try {\n+          return deploySystemApp(arguments);\n+        } catch (RetryableException ex) {\n+          LIMITED_LOGGER.debug(\"Failed to deploy app {}. Will retry\", arguments.getId(), ex);\n+          throw ex;\n+        }\n+      },\n+      RetryStrategies.fixDelay(6, TimeUnit.SECONDS));\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to deploy app {} with exception\", arguments.getId(), ex);\n+      return null;\n+    }\n+  }\n+\n+  private ApplicationWithPrograms deploySystemApp(Arguments arguments) throws Exception {\n+    ApplicationId appId = arguments.getId();\n+    ArtifactSummary artifactSummary = arguments.getArtifact();\n+\n+    KerberosPrincipalId ownerPrincipalId =\n+      arguments.getOwnerPrincipal() == null ? null : new KerberosPrincipalId(arguments.getOwnerPrincipal());\n+\n+    // if we don't null check, it gets serialized to \"null\"\n+    String configString = arguments.getConfig() == null ? null : GSON.toJson(arguments.getConfig());\n+\n+    try {\n+      return  appLifecycleService.deployApp(appId.getParent(), appId.getApplication(), appId.getVersion(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d95192455b995c19f3779d2eea5ce5868ebe058"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE1Mjc3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMzoyOFrOFpB6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMzoyOFrOFpB6tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NzM0OA==", "bodyText": "indentation should be 2 spaces", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378567348", "createdAt": "2020-02-12T23:13:28Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppManagementService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.utils.DirUtils;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import org.apache.twill.common.Threads;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Enables system apps using system app config files located in SYSTEM_APP_CONFIG_DIR. Each config\n+ * describes steps to perform to start one (or more) system app. Currently\n+ * SystemAppManagementService runs during bootstrap phase.\n+ */\n+public class SystemAppManagementService extends AbstractIdleService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final File systemAppConfigDirPath;\n+  private final SystemAppEnableExecutor systemAppEnableExecutor;\n+  private ExecutorService executorService;\n+\n+  @Inject\n+  SystemAppManagementService(CConfiguration cConf, ApplicationLifecycleService appLifecycleService,\n+                             ProgramLifecycleService programLifecycleService) {\n+    this.systemAppConfigDirPath = new File(cConf.get(Constants.SYSTEM_APP_CONFIG_DIR));\n+    this.systemAppEnableExecutor = new SystemAppEnableExecutor(appLifecycleService, programLifecycleService);\n+  }\n+\n+  @Override\n+  protected void startUp() {\n+    LOG.debug(\"Starting {}\", getClass().getSimpleName());\n+    executorService =\n+        Executors.newSingleThreadExecutor(Threads.createDaemonThreadFactory(\"sys-app-management-service\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d95192455b995c19f3779d2eea5ce5868ebe058"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE1MzUyOnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMzo0OFrOFpB7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMzo0OFrOFpB7Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NzQ2Nw==", "bodyText": "indentation alignment", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378567467", "createdAt": "2020-02-12T23:13:48Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/sysapp/SystemAppStep.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.JsonObject;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+\n+/**\n+ * Definition for a single step in a system app config. Defines what operation to perform for a\n+ * system app and any arguments required to perform the operation.\n+ */\n+public class SystemAppStep {\n+\n+  private final String label;\n+  private final Type type;\n+  private final Arguments arguments;\n+\n+  public SystemAppStep(String label, Type type, Arguments arguments) {\n+    this.label = label;\n+    this.type = type;\n+    this.arguments = arguments;\n+  }\n+\n+  public String getLabel() {\n+    return label;\n+  }\n+\n+  public Type getType() {\n+    return type;\n+  }\n+\n+  public Arguments getArguments() {\n+    return arguments;\n+  }\n+\n+  /**\n+   * Validate that all required fields exist.\n+   *\n+   * @throws IllegalArgumentException if the step is invalid\n+   */\n+  public void validate() {\n+    if (label == null || label.isEmpty()) {\n+      throw new IllegalArgumentException(\"An accelerator step must contain a label.\");\n+    }\n+\n+    if (type == null) {\n+      throw new IllegalArgumentException(\"An accelerator step must contain a type.\");\n+    }\n+\n+    arguments.validate();\n+  }\n+\n+  /**\n+   * System app step type\n+   */\n+  public enum Type {\n+    ENABLE_SYSTEM_APP\n+  }\n+\n+  /**\n+   * Arguments required to create an application\n+   */\n+  static class Arguments extends AppRequest<JsonObject> {\n+\n+    private String namespace;\n+    private String name;\n+    private boolean overwrite;\n+\n+    Arguments(AppRequest<JsonObject> appRequest, String namespace, String name, boolean overwrite) {\n+      super(appRequest.getArtifact(), appRequest.getConfig(), appRequest.getPreview(),\n+          appRequest.getOwnerPrincipal(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d95192455b995c19f3779d2eea5ce5868ebe058"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE1Mzk2OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDowM1rOFpB7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDowM1rOFpB7bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NzUzNQ==", "bodyText": "indentation should be 2 spaces", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378567535", "createdAt": "2020-02-12T23:14:03Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+    systemAppManagementService.shutDown();\n+  }\n+\n+  private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(new ArtifactSummary(artifactId.getName(),\n+                                                         artifactId.getVersion().getVersion()));\n+    SystemAppStep.Arguments step1Argument =\n+        new SystemAppStep.Arguments(appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d95192455b995c19f3779d2eea5ce5868ebe058"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE1NDQ3OnYy", "diffSide": "RIGHT", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDoxOVrOFpB7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDoxOVrOFpB7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NzYxOQ==", "bodyText": "indentation alignment", "url": "https://github.com/cdapio/cdap/pull/11861#discussion_r378567619", "createdAt": "2020-02-12T23:14:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/sysapp/SystemAppManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.sysapp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.inject.Injector;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.artifact.AppRequest;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import org.iq80.leveldb.util.FileUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests for the {@link SystemAppManagementService}.\n+ */\n+public class SystemAppManagementServiceTest extends AppFabricTestBase {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SystemAppManagementServiceTest.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private static ProgramLifecycleService programLifecycleService;\n+  private static ApplicationLifecycleService applicationLifecycleService;\n+  private static CConfiguration cConf;\n+  private static SystemAppManagementService systemAppManagementService;\n+  private static File systemConfigDir;\n+\n+  private static final String RUNNING = \"RUNNING\";\n+\n+  @ClassRule\n+  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+\n+\n+  @BeforeClass\n+  public static void setup() throws IOException {\n+    Injector injector = getInjector();\n+    programLifecycleService = injector.getInstance(ProgramLifecycleService.class);\n+    applicationLifecycleService = injector.getInstance(ApplicationLifecycleService.class);\n+    cConf = injector.getInstance(CConfiguration.class);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+    systemAppManagementService.shutDown();\n+  }\n+\n+  private void createEnableSysAppConfigFile(Id.Artifact artifactId, String filename) throws IOException {\n+    AppRequest<JsonObject> appRequest = new AppRequest<>(new ArtifactSummary(artifactId.getName(),\n+                                                         artifactId.getVersion().getVersion()));\n+    SystemAppStep.Arguments step1Argument =\n+        new SystemAppStep.Arguments(appRequest, artifactId.getNamespace().getId(), artifactId.getName(), false);\n+    List<SystemAppStep> steps = new ArrayList<>();\n+    steps.add(\n+      new SystemAppStep(\"step for \" + artifactId.getName(), SystemAppStep.Type.ENABLE_SYSTEM_APP, step1Argument));\n+    SystemAppConfig config = new SystemAppConfig(steps);\n+    File tmpFile = new File(systemConfigDir, filename);\n+    try (BufferedWriter bw = new BufferedWriter(new FileWriter(tmpFile))) {\n+      bw.write(GSON.toJson(config));\n+    }\n+  }\n+\n+  /**\n+   * Tests SystemAppManagementService end to end by running below scenario:\n+   * 1. Creates a system app config for an application into corresponding directory.\n+   * 2. Successfully read and load the config.\n+   * 3. Runs all steps to enable a system app , tests SystemAppEnableExecutor.\n+   * 4. Deploys the app.\n+   * 5. Runs all programs corresponding to the app.\n+   * 6. Checks status of a continuously running program, i.e a service program.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testSystemAppManagementServiceE2E() throws Exception {\n+    systemConfigDir = TEMPORARY_FOLDER.newFolder(\"demo-sys-app-config-dir\");\n+    cConf.set(Constants.SYSTEM_APP_CONFIG_DIR, systemConfigDir.getAbsolutePath());\n+    systemAppManagementService = new SystemAppManagementService(cConf, applicationLifecycleService,\n+      programLifecycleService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d95192455b995c19f3779d2eea5ce5868ebe058"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2920, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}