{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDA1OTI4", "number": 12211, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo0OTowN1rOEB_7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1OTo1MVrOEExUcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMxNDg2OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo0OTowN1rOGeL6lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1Njo0M1rOGftZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNTY4Nw==", "bodyText": "Thats a little dangerous and takes away the essential use of css-in-js. This one component controls every single element rendered within itself. Will introduce issues when things change in unexpected places. Can we reconsider this?", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434305687", "createdAt": "2020-06-03T04:49:07Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMjc1OA==", "bodyText": "I assigned widgetInput to each child instead, so that it has the same styling without  using & > *'.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435902758", "createdAt": "2020-06-05T12:56:39Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNTY4Nw=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMjgwNg==", "bodyText": "changed!", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435902806", "createdAt": "2020-06-05T12:56:43Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNTY4Nw=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMxOTI1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1MTozNFrOGeL9Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1NzozNFrOGfta9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjM1NQ==", "bodyText": "nit: Is the category plugin? Can this be a dropdown with only one value. We really don't want the user to type this in.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434306355", "createdAt": "2020-06-03T04:51:34Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      '& > *': {\n+        width: '100%',\n+        marginTop: '10px',\n+        marginBottom: '10px',\n+      },\n+    },\n+  };\n+};\n+\n+interface IWidgetInputProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetID: number;\n+}\n+\n+const WidgetInputView: React.FC<IWidgetInputProps> = ({\n+  classes,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+}) => {\n+  function onNameChange(obj, id) {\n+    return (name) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, name } }));\n+    };\n+  }\n+\n+  function onLabelChange(obj, id) {\n+    return (label) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, label } }));\n+    };\n+  }\n+\n+  function onWidgetTypeChange(obj, id) {\n+    return (widgetType) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetType } }));\n+    };\n+  }\n+\n+  function onWidgetCategoryChange(obj, id) {\n+    return (widgetCategory) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetCategory } }));\n+    };\n+  }\n+\n+  const widgetInfo = widgetToInfo[widgetID];\n+\n+  return (\n+    <If condition={widgetInfo}>\n+      <div className={classes.widgetInput}>\n+        <PluginInput\n+          widgetType={'textbox'}\n+          value={widgetInfo.name}\n+          setValue={onNameChange(widgetInfo, widgetID)}\n+          label={'Name'}\n+          placeholder={'Name a Widget'}\n+          required={false}\n+        />\n+        <PluginInput\n+          widgetType={'textbox'}\n+          value={widgetInfo.label}\n+          setValue={onLabelChange(widgetInfo, widgetID)}\n+          label={'Label'}\n+          placeholder={'Label a Widget'}\n+          required={false}\n+        />\n+        <PluginInput\n+          widgetType={'textbox'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzIyMw==", "bodyText": "changed!\nNow it is a select widget with options=['plugin'].", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435903223", "createdAt": "2020-06-05T12:57:34Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      '& > *': {\n+        width: '100%',\n+        marginTop: '10px',\n+        marginBottom: '10px',\n+      },\n+    },\n+  };\n+};\n+\n+interface IWidgetInputProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetID: number;\n+}\n+\n+const WidgetInputView: React.FC<IWidgetInputProps> = ({\n+  classes,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+}) => {\n+  function onNameChange(obj, id) {\n+    return (name) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, name } }));\n+    };\n+  }\n+\n+  function onLabelChange(obj, id) {\n+    return (label) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, label } }));\n+    };\n+  }\n+\n+  function onWidgetTypeChange(obj, id) {\n+    return (widgetType) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetType } }));\n+    };\n+  }\n+\n+  function onWidgetCategoryChange(obj, id) {\n+    return (widgetCategory) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetCategory } }));\n+    };\n+  }\n+\n+  const widgetInfo = widgetToInfo[widgetID];\n+\n+  return (\n+    <If condition={widgetInfo}>\n+      <div className={classes.widgetInput}>\n+        <PluginInput\n+          widgetType={'textbox'}\n+          value={widgetInfo.name}\n+          setValue={onNameChange(widgetInfo, widgetID)}\n+          label={'Name'}\n+          placeholder={'Name a Widget'}\n+          required={false}\n+        />\n+        <PluginInput\n+          widgetType={'textbox'}\n+          value={widgetInfo.label}\n+          setValue={onLabelChange(widgetInfo, widgetID)}\n+          label={'Label'}\n+          placeholder={'Label a Widget'}\n+          required={false}\n+        />\n+        <PluginInput\n+          widgetType={'textbox'}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjM1NQ=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMxOTgxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1MTo1N1rOGeL9hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1ODoxOFrOGftcWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjQzNw==", "bodyText": "nit: relative to components path.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434306437", "createdAt": "2020-06-03T04:51:57Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzU3OQ==", "bodyText": "Changed!", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435903579", "createdAt": "2020-06-05T12:58:18Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjQzNw=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMyMDIyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1MjowOFrOGeL9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1ODo1OVrOGfteBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjQ5NA==", "bodyText": "Same here.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434306494", "createdAt": "2020-06-03T04:52:08Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';\n+import WidgetInput from './WidgetInput';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    widgetInputs: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNDAwNQ==", "bodyText": "Changed!", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435904005", "createdAt": "2020-06-05T12:58:59Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';\n+import WidgetInput from './WidgetInput';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    widgetInputs: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNjQ5NA=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMyMzQ3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1NDoxOFrOGeL_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1OTozMFrOGftfIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzAyNQ==", "bodyText": "Can we pull this style into this component and remove plain css or scss usage?", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434307025", "createdAt": "2020-06-03T04:54:18Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';\n+import WidgetInput from './WidgetInput';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    widgetInputs: {\n+      '& > *': {\n+        marginTop: '20px',\n+        marginBottom: '20px',\n+      },\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={`widget-wrapper-label ${classes.addWidgetLabel}`}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNDI5MQ==", "bodyText": "Changed!", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435904291", "createdAt": "2020-06-05T12:59:30Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+import WidgetActionButtons from './WidgetActionButtons';\n+import WidgetInput from './WidgetInput';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    widgetInputs: {\n+      '& > *': {\n+        marginTop: '20px',\n+        marginBottom: '20px',\n+      },\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={`widget-wrapper-label ${classes.addWidgetLabel}`}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzAyNQ=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMyNjQzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1NTo1OFrOGeMBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyNzozMlrOGesKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzQ2Mw==", "bodyText": "Is it possible to type this? Typing this partially atleast would be helpful. Using typescript and using any takes away the advantage of using typescript.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434307463", "createdAt": "2020-06-03T04:55:58Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/index.tsx", "diffHunk": "@@ -67,6 +67,14 @@ class CreateView extends React.PureComponent<ICreateContext & WithStyles<typeof\n     this.setState({ groupToInfo });\n   };\n \n+  public setGroupToWidgets = (groupToWidgets: any) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMzk2Mg==", "bodyText": "#12251 addresses this issue by defining types more specifically! For instance, groupToWidgets is going to be Map<string, List<string>>.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434833962", "createdAt": "2020-06-03T20:27:32Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/index.tsx", "diffHunk": "@@ -67,6 +67,14 @@ class CreateView extends React.PureComponent<ICreateContext & WithStyles<typeof\n     this.setState({ groupToInfo });\n   };\n \n+  public setGroupToWidgets = (groupToWidgets: any) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzQ2Mw=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMyNjc0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/steps.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNDo1NjoxNFrOGeMBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowMDoyNFrOGfthWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzUxMw==", "bodyText": "nit: components relative path.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r434307513", "createdAt": "2020-06-03T04:56:14Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/steps.tsx", "diffHunk": "@@ -14,8 +14,8 @@\n  * the License.\n  */\n \n-import BasicPluginInfo from 'components/PluginJSONCreator/Create/Content/BasicPluginInfo';\n import ConfigurationGroupsCollection from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection';\n+import BasicPluginInfo from './Content/BasicPluginInfo';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNDg1Nw==", "bodyText": "Changed!", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r435904857", "createdAt": "2020-06-05T13:00:24Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/steps.tsx", "diffHunk": "@@ -14,8 +14,8 @@\n  * the License.\n  */\n \n-import BasicPluginInfo from 'components/PluginJSONCreator/Create/Content/BasicPluginInfo';\n import ConfigurationGroupsCollection from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection';\n+import BasicPluginInfo from './Content/BasicPluginInfo';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzUxMw=="}, "originalCommit": {"oid": "f3cdee8cbf7384c9ca988cb6665bcc8fc6c2e812"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM0MTI3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0OToxMVrOGimFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDozOToyNFrOGjGfwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyODc1NQ==", "bodyText": "this should use forEach", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438928755", "createdAt": "2020-06-11T16:49:11Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "diffHunk": "@@ -57,54 +56,74 @@ const ConfigurationGroupsCollectionView: React.FC<ICreateContext & WithStyles<ty\n   setConfigurationGroups,\n   groupToInfo,\n   setGroupToInfo,\n+  groupToWidgets,\n+  setGroupToWidgets,\n+  widgetToInfo,\n+  setWidgetToInfo,\n }) => {\n+  const [activeGroupIndex, setActiveGroupIndex] = React.useState(null);\n   const [localConfigurationGroups, setLocalConfigurationGroups] = React.useState(\n     configurationGroups\n   );\n-  const [activeGroupIndex, setActiveGroupIndex] = React.useState(null);\n   const [localGroupToInfo, setLocalGroupToInfo] = React.useState(groupToInfo);\n+  const [localGroupToWidgets, setLocalGroupToWidgets] = React.useState(groupToWidgets);\n+  const [localWidgetToInfo, setLocalWidgetToInfo] = React.useState(widgetToInfo);\n \n   function addConfigurationGroup(index: number) {\n-    const newGroupID = 'ConfigGroup_' + uuidV4();\n-\n-    // add a new group's ID at the specified index\n-    const newGroups = [...localConfigurationGroups];\n-    if (newGroups.length === 0) {\n-      newGroups.splice(0, 0, newGroupID);\n-    } else {\n-      newGroups.splice(index + 1, 0, newGroupID);\n-    }\n-    setLocalConfigurationGroups(newGroups);\n-\n-    // set the activeGroupIndex to the new group's index\n-    if (newGroups.length <= 1) {\n-      setActiveGroupIndex(0);\n-    } else {\n-      setActiveGroupIndex(index + 1);\n-    }\n-\n-    // set the default label and description of the group\n-    setLocalGroupToInfo({\n-      ...localGroupToInfo,\n-      [newGroupID]: {\n-        label: '',\n-        description: '',\n-      } as IConfigurationGroupInfo,\n-    });\n+    return () => {\n+      const newGroupID = 'ConfigGroup_' + uuidV4();\n+\n+      // Add a new group's ID at the specified index\n+      const newGroups = [...localConfigurationGroups];\n+      if (newGroups.length === 0) {\n+        newGroups.splice(0, 0, newGroupID);\n+      } else {\n+        newGroups.splice(index + 1, 0, newGroupID);\n+      }\n+      setLocalConfigurationGroups(newGroups);\n+\n+      // Set the activeGroupIndex to the new group's index\n+      if (newGroups.length <= 1) {\n+        setActiveGroupIndex(0);\n+      } else {\n+        setActiveGroupIndex(index + 1);\n+      }\n+\n+      // Set the mappings for the newly added group\n+      setLocalGroupToInfo({\n+        ...localGroupToInfo,\n+        [newGroupID]: {\n+          label: '',\n+          description: '',\n+        } as IConfigurationGroupInfo,\n+      });\n+      setLocalGroupToWidgets({ ...localGroupToWidgets, [newGroupID]: [] });\n+    };\n   }\n \n   function deleteConfigurationGroup(index: number) {\n-    setActiveGroupIndex(null);\n-\n-    // delete a group at the specified index\n-    const newGroups = [...localConfigurationGroups];\n-    const groupToDelete = newGroups[index];\n-    newGroups.splice(index, 1);\n-    setLocalConfigurationGroups(newGroups);\n+    return () => {\n+      setActiveGroupIndex(null);\n \n-    // delete the corresponding information of the group\n-    const { [groupToDelete]: info, ...restGroupToInfo } = localGroupToInfo;\n-    setLocalGroupToInfo(restGroupToInfo);\n+      // Delete a group at the specified index\n+      const newGroups = [...localConfigurationGroups];\n+      const groupToDelete = newGroups[index];\n+      newGroups.splice(index, 1);\n+      setLocalConfigurationGroups(newGroups);\n+\n+      // Delete the corresponding data of the group\n+      const { [groupToDelete]: info, ...restGroupToInfo } = localGroupToInfo;\n+      const { [groupToDelete]: widgets, ...restGroupToWidgets } = localGroupToWidgets;\n+      setLocalGroupToInfo(restGroupToInfo);\n+      setLocalGroupToWidgets(restGroupToWidgets);\n+\n+      // Delete all the widget information that belong to the group\n+      const newWidgetToInfo = localWidgetToInfo;\n+      widgets.map((widget) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1OTc3Ng==", "bodyText": "Resolved", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439459776", "createdAt": "2020-06-12T14:39:24Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "diffHunk": "@@ -57,54 +56,74 @@ const ConfigurationGroupsCollectionView: React.FC<ICreateContext & WithStyles<ty\n   setConfigurationGroups,\n   groupToInfo,\n   setGroupToInfo,\n+  groupToWidgets,\n+  setGroupToWidgets,\n+  widgetToInfo,\n+  setWidgetToInfo,\n }) => {\n+  const [activeGroupIndex, setActiveGroupIndex] = React.useState(null);\n   const [localConfigurationGroups, setLocalConfigurationGroups] = React.useState(\n     configurationGroups\n   );\n-  const [activeGroupIndex, setActiveGroupIndex] = React.useState(null);\n   const [localGroupToInfo, setLocalGroupToInfo] = React.useState(groupToInfo);\n+  const [localGroupToWidgets, setLocalGroupToWidgets] = React.useState(groupToWidgets);\n+  const [localWidgetToInfo, setLocalWidgetToInfo] = React.useState(widgetToInfo);\n \n   function addConfigurationGroup(index: number) {\n-    const newGroupID = 'ConfigGroup_' + uuidV4();\n-\n-    // add a new group's ID at the specified index\n-    const newGroups = [...localConfigurationGroups];\n-    if (newGroups.length === 0) {\n-      newGroups.splice(0, 0, newGroupID);\n-    } else {\n-      newGroups.splice(index + 1, 0, newGroupID);\n-    }\n-    setLocalConfigurationGroups(newGroups);\n-\n-    // set the activeGroupIndex to the new group's index\n-    if (newGroups.length <= 1) {\n-      setActiveGroupIndex(0);\n-    } else {\n-      setActiveGroupIndex(index + 1);\n-    }\n-\n-    // set the default label and description of the group\n-    setLocalGroupToInfo({\n-      ...localGroupToInfo,\n-      [newGroupID]: {\n-        label: '',\n-        description: '',\n-      } as IConfigurationGroupInfo,\n-    });\n+    return () => {\n+      const newGroupID = 'ConfigGroup_' + uuidV4();\n+\n+      // Add a new group's ID at the specified index\n+      const newGroups = [...localConfigurationGroups];\n+      if (newGroups.length === 0) {\n+        newGroups.splice(0, 0, newGroupID);\n+      } else {\n+        newGroups.splice(index + 1, 0, newGroupID);\n+      }\n+      setLocalConfigurationGroups(newGroups);\n+\n+      // Set the activeGroupIndex to the new group's index\n+      if (newGroups.length <= 1) {\n+        setActiveGroupIndex(0);\n+      } else {\n+        setActiveGroupIndex(index + 1);\n+      }\n+\n+      // Set the mappings for the newly added group\n+      setLocalGroupToInfo({\n+        ...localGroupToInfo,\n+        [newGroupID]: {\n+          label: '',\n+          description: '',\n+        } as IConfigurationGroupInfo,\n+      });\n+      setLocalGroupToWidgets({ ...localGroupToWidgets, [newGroupID]: [] });\n+    };\n   }\n \n   function deleteConfigurationGroup(index: number) {\n-    setActiveGroupIndex(null);\n-\n-    // delete a group at the specified index\n-    const newGroups = [...localConfigurationGroups];\n-    const groupToDelete = newGroups[index];\n-    newGroups.splice(index, 1);\n-    setLocalConfigurationGroups(newGroups);\n+    return () => {\n+      setActiveGroupIndex(null);\n \n-    // delete the corresponding information of the group\n-    const { [groupToDelete]: info, ...restGroupToInfo } = localGroupToInfo;\n-    setLocalGroupToInfo(restGroupToInfo);\n+      // Delete a group at the specified index\n+      const newGroups = [...localConfigurationGroups];\n+      const groupToDelete = newGroups[index];\n+      newGroups.splice(index, 1);\n+      setLocalConfigurationGroups(newGroups);\n+\n+      // Delete the corresponding data of the group\n+      const { [groupToDelete]: info, ...restGroupToInfo } = localGroupToInfo;\n+      const { [groupToDelete]: widgets, ...restGroupToWidgets } = localGroupToWidgets;\n+      setLocalGroupToInfo(restGroupToInfo);\n+      setLocalGroupToWidgets(restGroupToWidgets);\n+\n+      // Delete all the widget information that belong to the group\n+      const newWidgetToInfo = localWidgetToInfo;\n+      widgets.map((widget) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyODc1NQ=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM1NTI3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1MzoxMlrOGimOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDozODoyMFrOGjGdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTEwOQ==", "bodyText": "the setWidgetToInfo function should only accept the id and the modified object for the argument. The handling of the prevObjs should happen in the implementation of this function for the context", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438931109", "createdAt": "2020-06-11T16:53:12Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_CATEGORY, WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      marginTop: '20px',\n+      marginBottom: '20px',\n+    },\n+    widgetField: {\n+      width: '100%',\n+      marginTop: '10px',\n+      marginBottom: '10px',\n+    },\n+  };\n+};\n+\n+interface IWidgetInputProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetID: number;\n+}\n+\n+const WidgetInputView: React.FC<IWidgetInputProps> = ({\n+  classes,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+}) => {\n+  function onNameChange(obj, id) {\n+    return (name) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, name } }));\n+    };\n+  }\n+\n+  function onLabelChange(obj, id) {\n+    return (label) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, label } }));\n+    };\n+  }\n+\n+  function onWidgetTypeChange(obj, id) {\n+    return (widgetType) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetType } }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1OTE2NA==", "bodyText": "This has been resolved in the PR #12310.\n\n  \n    \n      cdap/cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/WidgetCollection/WidgetPanel/WidgetInfoInput/index.tsx\n    \n    \n         Line 49\n      in\n      e8a2a5c\n    \n    \n    \n    \n\n        \n          \n           function onNameChange() {", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439459164", "createdAt": "2020-06-12T14:38:20Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput/index.tsx", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import { WIDGET_CATEGORY, WIDGET_TYPES } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    widgetInput: {\n+      marginTop: '20px',\n+      marginBottom: '20px',\n+    },\n+    widgetField: {\n+      width: '100%',\n+      marginTop: '10px',\n+      marginBottom: '10px',\n+    },\n+  };\n+};\n+\n+interface IWidgetInputProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetID: number;\n+}\n+\n+const WidgetInputView: React.FC<IWidgetInputProps> = ({\n+  classes,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+}) => {\n+  function onNameChange(obj, id) {\n+    return (name) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, name } }));\n+    };\n+  }\n+\n+  function onLabelChange(obj, id) {\n+    return (label) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, label } }));\n+    };\n+  }\n+\n+  function onWidgetTypeChange(obj, id) {\n+    return (widgetType) => {\n+      setWidgetToInfo((prevObjs) => ({ ...prevObjs, [id]: { ...obj, widgetType } }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTEwOQ=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM1ODM5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1NDowNlrOGimQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTowMDo0MFrOGjHTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTYyNA==", "bodyText": "this seemed dangerous if the screen size is small", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438931624", "createdAt": "2020-06-11T16:54:06Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MjkwNg==", "bodyText": "Resolved", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439472906", "createdAt": "2020-06-12T15:00:40Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTYyNA=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM3MjEyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1ODowMFrOGimZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDozOTowOFrOGjGfHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMzg5OA==", "bodyText": "this comment doesn't have to be done in this PR.\nThis useEffect is one source of performance bottleneck. Every time user makes an edit to a widget, the groupToWidgets will get updated, and this useEffect gets triggered everytime. There's probably a better way to set the the activeWidget to prevent rerendering.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438933898", "createdAt": "2020-06-11T16:58:00Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1OTYxMw==", "bodyText": "This has been resolved in the PR #12310.\n\n  \n    \n      cdap/cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/WidgetCollection/index.tsx\n    \n    \n         Line 72\n      in\n      e8a2a5c\n    \n    \n    \n    \n\n        \n          \n           const activeWidgets = groupID ? groupToWidgets.get(groupID) : fromJS([]);", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439459613", "createdAt": "2020-06-12T14:39:08Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMzg5OA=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM3NjI1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1OToxM1rOGimcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo1MDo0OFrOGjG6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNDU5OA==", "bodyText": "did you check javascript console for this? I think <If> expects only 1 children component", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438934598", "createdAt": "2020-06-11T16:59:13Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={classes.addWidgetLabel}>\n+        Add Widgets\n+        <span className={classes.required}>*</span>\n+      </div>\n+      <div className={classes.widgetContainer}>\n+        {activeWidgets.map((widgetID, widgetIndex) => {\n+          return (\n+            <If condition={widgetToInfo[widgetID]}>\n+              <div className={classes.eachWidget}>\n+                <WidgetInput\n+                  widgetToInfo={widgetToInfo}\n+                  widgetID={widgetID}\n+                  setWidgetToInfo={setWidgetToInfo}\n+                />\n+                <WidgetActionButtons\n+                  onAddWidgetToGroup={addWidgetToGroup(widgetIndex)}\n+                  onDeleteWidgetFromGroup={deleteWidgetFromGroup(widgetIndex)}\n+                />\n+              </div>\n+              <If condition={activeWidgets && widgetIndex < activeWidgets.length - 1}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2NjUwOQ==", "bodyText": "Because I have deleted <If condition={widgetToInfo[widgetID]}> in later PR (as noted in the comment above https://github.com/cdapio/cdap/pull/12211/files/aa90989dabe4b1cff0944141cabee82f55d5a46a#r439463982), we no longer have nested If component.", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439466509", "createdAt": "2020-06-12T14:50:48Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={classes.addWidgetLabel}>\n+        Add Widgets\n+        <span className={classes.required}>*</span>\n+      </div>\n+      <div className={classes.widgetContainer}>\n+        {activeWidgets.map((widgetID, widgetIndex) => {\n+          return (\n+            <If condition={widgetToInfo[widgetID]}>\n+              <div className={classes.eachWidget}>\n+                <WidgetInput\n+                  widgetToInfo={widgetToInfo}\n+                  widgetID={widgetID}\n+                  setWidgetToInfo={setWidgetToInfo}\n+                />\n+                <WidgetActionButtons\n+                  onAddWidgetToGroup={addWidgetToGroup(widgetIndex)}\n+                  onDeleteWidgetFromGroup={deleteWidgetFromGroup(widgetIndex)}\n+                />\n+              </div>\n+              <If condition={activeWidgets && widgetIndex < activeWidgets.length - 1}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNDU5OA=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM3ODA5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1OTo1MVrOGimdjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Njo0M1rOGjGwLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNDkyNg==", "bodyText": "can widgetToInfo[widgetID] ever not exist?", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r438934926", "createdAt": "2020-06-11T16:59:51Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={classes.addWidgetLabel}>\n+        Add Widgets\n+        <span className={classes.required}>*</span>\n+      </div>\n+      <div className={classes.widgetContainer}>\n+        {activeWidgets.map((widgetID, widgetIndex) => {\n+          return (\n+            <If condition={widgetToInfo[widgetID]}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2Mzk4Mg==", "bodyText": "This has been resolved in the PR #12310.\n\n  \n    \n      cdap/cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/WidgetCollection/index.tsx\n    \n    \n         Line 130\n      in\n      e8a2a5c\n    \n    \n    \n    \n\n        \n          \n           return (", "url": "https://github.com/cdapio/cdap/pull/12211#discussion_r439463982", "createdAt": "2020-06-12T14:46:43Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, Divider } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import If from 'components/If';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext, IWidgetInfo } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+import uuidV4 from 'uuid/v4';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+    nestedWidgets: {\n+      border: `1px solid`,\n+      borderColor: theme.palette.grey[300],\n+      borderRadius: '6px',\n+      position: 'relative',\n+      padding: '7px 10px 5px',\n+      margin: '25px',\n+    },\n+    addWidgetLabel: {\n+      fontSize: '12px',\n+      position: 'absolute',\n+      top: '-10px',\n+      left: '15px',\n+      padding: '0 5px',\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    required: {\n+      fontSize: '14px',\n+      marginLeft: '5px',\n+      lineHeight: '12px',\n+      verticalAlign: 'middle',\n+    },\n+    widgetContainer: {\n+      width: 'calc(100%-1000px)',\n+    },\n+    widgetDivider: {\n+      width: '100%',\n+    },\n+  };\n+};\n+\n+interface IWidgetCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  groupID: number;\n+}\n+\n+const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n+  classes,\n+  groupID,\n+  widgetToInfo,\n+  groupToWidgets,\n+  setWidgetToInfo,\n+  setGroupToWidgets,\n+}) => {\n+  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+\n+  React.useEffect(() => {\n+    if (groupID) {\n+      setActiveWidgets(groupToWidgets[groupID]);\n+    } else {\n+      setActiveWidgets([]);\n+    }\n+  }, [groupToWidgets]);\n+\n+  function addWidgetToGroup(index: number) {\n+    return () => {\n+      const newWidgetID = 'Widget_' + uuidV4();\n+\n+      // Add a new widget's ID at the specified index\n+      const newWidgets = [...activeWidgets];\n+      if (newWidgets.length === 0) {\n+        newWidgets.splice(0, 0, newWidgetID);\n+      } else {\n+        newWidgets.splice(index + 1, 0, newWidgetID);\n+      }\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      // Set the default empty properties of the widget\n+      setWidgetToInfo({\n+        ...widgetToInfo,\n+        [newWidgetID]: {\n+          widgetType: '',\n+          label: '',\n+          name: '',\n+        } as IWidgetInfo,\n+      });\n+    };\n+  }\n+\n+  function deleteWidgetFromGroup(widgetIndex) {\n+    return () => {\n+      // Grab the widget ID to delete\n+      const widgetToDelete = activeWidgets[widgetIndex];\n+\n+      const newWidgets = [...activeWidgets];\n+      newWidgets.splice(widgetIndex, 1);\n+      setGroupToWidgets({\n+        ...groupToWidgets,\n+        [groupID]: newWidgets,\n+      });\n+\n+      const { [widgetToDelete]: info, ...restWidgetToInfo } = widgetToInfo;\n+      setWidgetToInfo(restWidgetToInfo);\n+    };\n+  }\n+\n+  return (\n+    <div className={classes.nestedWidgets} data-cy=\"widget-wrapper-container\">\n+      <div className={classes.addWidgetLabel}>\n+        Add Widgets\n+        <span className={classes.required}>*</span>\n+      </div>\n+      <div className={classes.widgetContainer}>\n+        {activeWidgets.map((widgetID, widgetIndex) => {\n+          return (\n+            <If condition={widgetToInfo[widgetID]}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNDkyNg=="}, "originalCommit": {"oid": "aa90989dabe4b1cff0944141cabee82f55d5a46a"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2666, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}