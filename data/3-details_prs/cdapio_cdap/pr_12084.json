{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTg3MzAz", "number": 12084, "title": "(CDAP-16521) Turn program start completely async", "bodyText": "Have a separate executor in the ProgramRuntimeService for program launching\nHave the provisioner executor size configurable", "createdAt": "2020-04-19T01:28:02Z", "url": "https://github.com/cdapio/cdap/pull/12084", "merged": true, "mergeCommit": {"oid": "fb5cad837763645f37e1117fec841e3c66292a49"}, "closed": true, "closedAt": "2020-04-20T08:00:30Z", "author": {"login": "chtyim"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZAMHEgH2gAyNDA1NTg3MzAzOmYyYjRiZTg5MTE0OWQ5YTBjOTc5YzUzOGIyZWMwODlkNDc5ODgyYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZDTZ9AFqTM5NTk3NjQxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2b4be891149d9a0c979c538b2ec089d479882ad", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/f2b4be891149d9a0c979c538b2ec089d479882ad", "committedDate": "2020-04-19T01:27:25Z", "message": "(CDAP-16521) Turn program start completely async\n\n- Have a separate executor in the ProgramRuntimeService for program launching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e6b35f4c79d491f47cfb15469137d531fab048", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/a0e6b35f4c79d491f47cfb15469137d531fab048", "committedDate": "2020-04-19T01:30:23Z", "message": "(CDAP-16369) Make provisioner executor size configurable\n\n- This is a small bug fix\n- ScheduledExecutor size shouldn't be 0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTY2ODAx", "url": "https://github.com/cdapio/cdap/pull/12084#pullrequestreview-395966801", "createdAt": "2020-04-19T01:37:49Z", "commit": {"oid": "a0e6b35f4c79d491f47cfb15469137d531fab048"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTc2NDE2", "url": "https://github.com/cdapio/cdap/pull/12084#pullrequestreview-395976416", "createdAt": "2020-04-19T05:03:50Z", "commit": {"oid": "a0e6b35f4c79d491f47cfb15469137d531fab048"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTowMzo1MFrOGHyQ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTowMzo1MFrOGHyQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNjcyNQ==", "bodyText": "Am going on a limb here, an we be more descriptive in what error happened here and what user should or can do to fix it.", "url": "https://github.com/cdapio/cdap/pull/12084#discussion_r410816725", "createdAt": "2020-04-19T05:03:50Z", "author": {"login": "nitinmotgi"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/runtime/AbstractProgramRuntimeService.java", "diffHunk": "@@ -148,30 +157,34 @@ public final RuntimeInfo run(ProgramDescriptor programDescriptor, ProgramOptions\n \n \n     File tempDir = createTempDirectory(programId, runId);\n-    Runnable cleanUpTask = createCleanupTask(tempDir, runner);\n-    try {\n-      // Get the artifact details and save it into the program options.\n-      ArtifactId artifactId = programDescriptor.getArtifactId();\n-      ArtifactDetail artifactDetail = getArtifactDetail(artifactId);\n-      ProgramOptions runtimeProgramOptions = updateProgramOptions(artifactId, programId, options, runId);\n-\n-      // Take a snapshot of all the plugin artifacts used by the program\n-      ProgramOptions optionsWithPlugins = createPluginSnapshot(runtimeProgramOptions, programId, tempDir,\n-                                                               programDescriptor.getApplicationSpecification());\n-\n-      // Create and run the program\n-      Program executableProgram = createProgram(cConf, runner, programDescriptor, artifactDetail, tempDir);\n-      cleanUpTask = createCleanupTask(cleanUpTask, executableProgram);\n-\n-      RuntimeInfo runtimeInfo = createRuntimeInfo(runner.run(executableProgram, optionsWithPlugins), programId,\n-                                                  cleanUpTask);\n-      monitorProgram(runtimeInfo, cleanUpTask);\n-      return runtimeInfo;\n-    } catch (Exception e) {\n-      cleanUpTask.run();\n-      LOG.error(\"Exception while trying to run program\", e);\n-      throw Throwables.propagate(e);\n-    }\n+    AtomicReference<Runnable> cleanUpTaskRef = new AtomicReference<>(createCleanupTask(tempDir, runner));\n+    DelayedProgramController controller = new DelayedProgramController(programRunId);\n+    RuntimeInfo runtimeInfo = createRuntimeInfo(controller, programId, () -> cleanUpTaskRef.get().run());\n+    monitorProgram(runtimeInfo, () -> cleanUpTaskRef.get().run());\n+\n+    executor.execute(() -> {\n+      try {\n+        // Get the artifact details and save it into the program options.\n+        ArtifactId artifactId = programDescriptor.getArtifactId();\n+        ArtifactDetail artifactDetail = getArtifactDetail(artifactId);\n+        ProgramOptions runtimeProgramOptions = updateProgramOptions(artifactId, programId, options, runId);\n+\n+        // Take a snapshot of all the plugin artifacts used by the program\n+        ProgramOptions optionsWithPlugins = createPluginSnapshot(runtimeProgramOptions, programId, tempDir,\n+                                                                 programDescriptor.getApplicationSpecification());\n+\n+        // Create and run the program\n+        Program executableProgram = createProgram(cConf, runner, programDescriptor, artifactDetail, tempDir);\n+        cleanUpTaskRef.set(createCleanupTask(cleanUpTaskRef.get(), executableProgram));\n+\n+        controller.setProgramController(runner.run(executableProgram, optionsWithPlugins));\n+      } catch (Exception e) {\n+        controller.failed(e);\n+        programStateWriter.error(programRunId, e);\n+        LOG.error(\"Exception while trying to run program\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e6b35f4c79d491f47cfb15469137d531fab048"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}