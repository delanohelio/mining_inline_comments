{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjI3NzA3", "number": 12291, "title": "[CDAP-16920] Optimize performance for Plugin JSON Creator", "bodyText": "One of the current issues in the Plugin JSON creator was speed, as mentioned in previous PRs. This issue was present when we import large-sized file, such as HTTP-batchsource.json.\nThis PR splits the main global states into multiple contexts. Also, the memoization is added to prevent re-renderings. From this change, there were some improvements:\n\nSpeed issue is now resolved, since excessive rerendering of the UI is now prevented.\nLarge refactorings. states such as widgetInfo don't have to be passed manually to children and grandchildren components.\nMultiple contexts make it easier for someone to understand our codebase. Since we are dealing with a lot of different data (configuration-groups, widget-properties, filter, output), these can be separated into multiple contexts.\nWe don't need to make separate local states such as localWidgetInfo anymore. We can directly use the global states throughout every component. (Except for the widgetToAttributes, which we have decided to manage locally for the more intuitive UI pattern. setWidgetToAttributes will only be called if user clicks on the save button.)\nSplitted up some of the existing components to minimize re-rendering.\n\nBelow gifs compare how the UI process keyboard inputs at similar speed, when we import large files such as HTTP-batchsource.json and tries to modify the JSON data.\nBefore Optimization: keyboard input is slowly processed. If a user types something fast, it won't be able to update the UI in real-time, since it's re-rendering many different components.\n\nAfter Optimization: keyboard input is no longer slow", "createdAt": "2020-06-10T18:29:34Z", "url": "https://github.com/cdapio/cdap/pull/12291", "merged": true, "mergeCommit": {"oid": "68e6f98564520608e6a59718d879ab98a1b01c9c"}, "closed": true, "closedAt": "2020-06-24T01:57:22Z", "author": {"login": "jennac3"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqDKAogBqjM0MzE5NDE2NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuP-oVgBqjM0NzU0MjM1MzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e6062caa3ce253b3b788a57bf56691030abaf26", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/4e6062caa3ce253b3b788a57bf56691030abaf26", "committedDate": "2020-06-10T22:44:16Z", "message": "improvements"}, "afterCommit": {"oid": "d267043775683c27b323063851023c292cc21844", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/d267043775683c27b323063851023c292cc21844", "committedDate": "2020-06-11T00:31:18Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "859a575eb6c2f614c598b8fb814c076d100f8ce3", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/859a575eb6c2f614c598b8fb814c076d100f8ce3", "committedDate": "2020-06-11T00:44:39Z", "message": "fix mistake"}, "afterCommit": {"oid": "6ccb30d808777f68ca8f3adb7758bf205cf77349", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/6ccb30d808777f68ca8f3adb7758bf205cf77349", "committedDate": "2020-06-11T00:45:32Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ccb30d808777f68ca8f3adb7758bf205cf77349", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/6ccb30d808777f68ca8f3adb7758bf205cf77349", "committedDate": "2020-06-11T00:45:32Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}, "afterCommit": {"oid": "7f4a143256316a94773ee758e0a7bee10a3c56b2", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/7f4a143256316a94773ee758e0a7bee10a3c56b2", "committedDate": "2020-06-11T01:25:51Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f4a143256316a94773ee758e0a7bee10a3c56b2", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/7f4a143256316a94773ee758e0a7bee10a3c56b2", "committedDate": "2020-06-11T01:25:51Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}, "afterCommit": {"oid": "82dc0417e5ef6232eb8f06c00843fd0ce911fb28", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/82dc0417e5ef6232eb8f06c00843fd0ce911fb28", "committedDate": "2020-06-22T21:18:22Z", "message": "solve merge conflict"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "971c7416106fac1c3680078650ccce7e8e3f8ba8", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/971c7416106fac1c3680078650ccce7e8e3f8ba8", "committedDate": "2020-06-22T21:29:02Z", "message": "fix"}, "afterCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd", "committedDate": "2020-06-23T13:55:11Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDUzODE4", "url": "https://github.com/cdapio/cdap/pull/12291#pullrequestreview-436053818", "createdAt": "2020-06-23T18:37:25Z", "commit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozNzoyNVrOGn1yKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozNzoyNVrOGn1yKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyODg0MA==", "bodyText": "I think this can be abbreviated to just '0'", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444428840", "createdAt": "2020-06-23T18:37:25Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupPanel/index.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import ExpansionPanel from '@material-ui/core/ExpansionPanel';\n+import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n+import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Typography from '@material-ui/core/Typography';\n+import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n+import If from 'components/If';\n+import { useConfigurationGroupState } from 'components/PluginJSONCreator/Create';\n+import GroupActionButtons from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupActionButtons';\n+import GroupInfoInput from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupInfoInput';\n+import WidgetCollection from 'components/PluginJSONCreator/Create/Content/WidgetCollection';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    eachGroup: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+    },\n+    groupContent: {\n+      display: 'block',\n+      padding: '0px 0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDUxMDEw", "url": "https://github.com/cdapio/cdap/pull/12291#pullrequestreview-436051010", "createdAt": "2020-06-23T18:33:18Z", "commit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozMzoxOFrOGn1p1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0OTo0OFrOGn2OUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNjcwOQ==", "bodyText": "nit, we're not really using aria. Is this required by anything?", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444426709", "createdAt": "2020-06-23T18:33:18Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupPanel/index.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import ExpansionPanel from '@material-ui/core/ExpansionPanel';\n+import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n+import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Typography from '@material-ui/core/Typography';\n+import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n+import If from 'components/If';\n+import { useConfigurationGroupState } from 'components/PluginJSONCreator/Create';\n+import GroupActionButtons from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupActionButtons';\n+import GroupInfoInput from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupInfoInput';\n+import WidgetCollection from 'components/PluginJSONCreator/Create/Content/WidgetCollection';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    eachGroup: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+    },\n+    groupContent: {\n+      display: 'block',\n+      padding: '0px 0',\n+      width: 'calc(100%)',\n+    },\n+  };\n+};\n+\n+export const GroupPanelView = ({\n+  classes,\n+  groupID,\n+  configurationGroupExpanded,\n+  switchEditConfigurationGroup,\n+  addConfigurationGroup,\n+  deleteConfigurationGroup,\n+}) => {\n+  const { groupToInfo } = useConfigurationGroupState();\n+\n+  const group = groupToInfo.get(groupID);\n+  return (\n+    <div className={classes.eachGroup}>\n+      <ExpansionPanel expanded={configurationGroupExpanded} onChange={switchEditConfigurationGroup}>\n+        <ExpansionPanelSummary\n+          expandIcon={<ExpandMoreIcon />}\n+          aria-controls=\"panel1c-content\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNzg1Nw==", "bodyText": "I think this will trigger a warning, right?<If> can only have one child right now", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444427857", "createdAt": "2020-06-23T18:35:42Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupPanel/index.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import ExpansionPanel from '@material-ui/core/ExpansionPanel';\n+import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n+import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import Typography from '@material-ui/core/Typography';\n+import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n+import If from 'components/If';\n+import { useConfigurationGroupState } from 'components/PluginJSONCreator/Create';\n+import GroupActionButtons from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupActionButtons';\n+import GroupInfoInput from 'components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/GroupInfoInput';\n+import WidgetCollection from 'components/PluginJSONCreator/Create/Content/WidgetCollection';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    eachGroup: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+    },\n+    groupContent: {\n+      display: 'block',\n+      padding: '0px 0',\n+      width: 'calc(100%)',\n+    },\n+  };\n+};\n+\n+export const GroupPanelView = ({\n+  classes,\n+  groupID,\n+  configurationGroupExpanded,\n+  switchEditConfigurationGroup,\n+  addConfigurationGroup,\n+  deleteConfigurationGroup,\n+}) => {\n+  const { groupToInfo } = useConfigurationGroupState();\n+\n+  const group = groupToInfo.get(groupID);\n+  return (\n+    <div className={classes.eachGroup}>\n+      <ExpansionPanel expanded={configurationGroupExpanded} onChange={switchEditConfigurationGroup}>\n+        <ExpansionPanelSummary\n+          expandIcon={<ExpandMoreIcon />}\n+          aria-controls=\"panel1c-content\"\n+          id=\"panel1c-header\"\n+        >\n+          <If condition={!configurationGroupExpanded}>\n+            <Typography className={classes.heading}>{group.get('label')}</Typography>\n+          </If>\n+        </ExpansionPanelSummary>\n+        <ExpansionPanelActions className={classes.groupContent}>\n+          <If condition={configurationGroupExpanded}>\n+            <GroupInfoInput groupID={groupID} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTI0MQ==", "bodyText": "same here regarding <If>. Make sure you check the javascript console and there's no errors being thrown during runtime", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444431241", "createdAt": "2020-06-23T18:41:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/Filters/FilterCollection/FilterConditionInput/index.tsx", "diffHunk": "@@ -89,80 +90,86 @@ const FilterConditionInputview: React.FC<IFilterConditionInputProps> = ({\n           Map({\n             property: existingCondition.get('property') || '',\n             operator: existingCondition.get('operator') || '',\n-            value: existingCondition.get('value') || '',\n+            ...(valueRequired && { value: existingCondition.get('value') || '' }),\n           })\n         )\n       );\n     }\n-  }, [conditionMode]);\n+  }, [conditionMode, valueRequired]);\n \n   function setFilterCondition(conditionProperty: string) {\n     return (val) => {\n       setFilterToCondition(filterToCondition.setIn([filterID, conditionProperty], val));\n     };\n   }\n \n-  return (\n-    <If condition={!isNil(existingCondition)}>\n-      <Heading type={HeadingTypes.h6} label=\"Show these widgets by the following condition...\" />\n-      <div className={classes.filterConditionInput}>\n-        <PluginInput\n-          widgetType={'radio-group'}\n-          value={conditionMode}\n-          onChange={setConditionMode}\n-          label={'Condition Type'}\n-          options={Object.values(FilterConditionMode).map((mode) => ({ id: mode, label: mode }))}\n-          layout={'inline'}\n-        />\n-      </div>\n-      <If condition={conditionMode === FilterConditionMode.Expression}>\n-        <div className={classes.filterConditionInput}>\n-          <PluginInput\n-            widgetType={'textbox'}\n-            value={existingCondition.get(FilterConditionProperty.Expression)}\n-            onChange={setFilterCondition(FilterConditionProperty.Expression)}\n-            label={FilterConditionProperty.Expression}\n-            required={false}\n-          />\n-        </div>\n-      </If>\n-      <If condition={conditionMode === FilterConditionMode.Operator}>\n+  return React.useMemo(\n+    () => (\n+      <If condition={!isNil(existingCondition)}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMzIyNg==", "bodyText": "the setLoading true and false has to be within the debounce as well", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444433226", "createdAt": "2020-06-23T18:44:48Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/LiveConfigurationGroup/index.tsx", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import ConfigurationGroup from 'components/ConfigurationGroup';\n+import If from 'components/If';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import debounce from 'lodash/debounce';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    liveViewLoadBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n+  };\n+};\n+\n+interface ILiveConfigurationGroup extends WithStyles<typeof styles> {\n+  JSONOutput: any;\n+}\n+\n+const LiveConfigurationGroupView: React.FC<ILiveConfigurationGroup> = ({ classes, JSONOutput }) => {\n+  // Values needed for Configuration Groups live view\n+  const [pluginProperties, setPluginProperties] = React.useState(null);\n+  const [values, onChange] = React.useState<Record<string, string>>({});\n+\n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When JSON config changes, show loading view for 500ms\n+  // This is in order to force rerender ConfigurationGroup component\n+  const debouncedUpdate = debounce(() => {\n+    const newPluginProperties = getNewPluginProperties(JSONOutput);\n+    setPluginProperties(newPluginProperties);\n+  }, 500);\n+\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNDczOA==", "bodyText": "delete the hmm?", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444434738", "createdAt": "2020-06-23T18:47:30Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetPanel/index.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import withStyles, { StyleRules } from '@material-ui/core/styles/withStyles';\n+import { useWidgetState } from 'components/PluginJSONCreator/Create';\n+import WidgetActionButtons from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetActionButtons';\n+import WidgetAttributesCollection from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection';\n+import WidgetInfoInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInfoInput';\n+import * as React from 'react';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    eachWidget: {\n+      display: 'grid',\n+      gridTemplateColumns: '5fr 1fr',\n+      marginLeft: 'auto',\n+      marginRight: 'auto',\n+    },\n+  };\n+};\n+\n+export const WidgetPanelView = ({\n+  classes,\n+  widgetID,\n+  widgetIndex,\n+  openWidgetIndex,\n+  setOpenWidgetIndex,\n+  addWidgetToGroup,\n+  deleteWidgetFromGroup,\n+  onWidgetNameChange,\n+  onWidgetLabelChange,\n+  onWidgetTypeChange,\n+  onWidgetCategoryChange,\n+}) => {\n+  function openWidgetAttributes(index: number) {\n+    return () => {\n+      setOpenWidgetIndex(index);\n+    };\n+  }\n+\n+  function closeWidgetAttributes() {\n+    setOpenWidgetIndex(null);\n+  }\n+\n+  const { widgetInfo, widgetToAttributes } = useWidgetState();\n+\n+  return React.useMemo(\n+    () => (\n+      <div className={classes.eachWidget}>\n+        <WidgetInfoInput\n+          widgetID={widgetID}\n+          onWidgetNameChange={onWidgetNameChange}\n+          onWidgetLabelChange={onWidgetLabelChange}\n+          onWidgetTypeChange={onWidgetTypeChange}\n+          onWidgetCategoryChange={onWidgetCategoryChange}\n+        />\n+        <WidgetActionButtons\n+          onAddWidgetToGroup={addWidgetToGroup}\n+          onDeleteWidgetFromGroup={deleteWidgetFromGroup}\n+        />\n+        <WidgetAttributesCollection\n+          widgetID={widgetID}\n+          widgetAttributesOpen={openWidgetIndex === widgetIndex}\n+          closeWidgetAttributes={closeWidgetAttributes}\n+          onWidgetNameChange={onWidgetNameChange}\n+          onWidgetLabelChange={onWidgetLabelChange}\n+          onWidgetTypeChange={onWidgetTypeChange}\n+          onWidgetCategoryChange={onWidgetCategoryChange}\n+        />\n+        <Button\n+          variant=\"contained\"\n+          color=\"primary\"\n+          component=\"span\"\n+          onClick={openWidgetAttributes(widgetIndex)}\n+        >\n+          Attributes\n+        </Button>\n+        hmm {JSON.stringify(widgetInfo.get(widgetID))}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjA1MQ==", "bodyText": "can this nested structure be flatten out? for instance the OutputContext does not really relate to the ConfigurationGroupContext, right?", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444436051", "createdAt": "2020-06-23T18:49:48Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/index.tsx", "diffHunk": "@@ -45,158 +40,222 @@ const styles = (): StyleRules => {\n   };\n };\n \n-class CreateView extends React.PureComponent<ICreateContext & WithStyles<typeof styles>> {\n-  public setActiveStep = (activeStep: number) => {\n-    this.setState({ activeStep });\n-  };\n-\n-  public setBasicPluginInfo = (basicPluginInfo: IBasicPluginInfo) => {\n-    const { pluginName, pluginType, displayName, emitAlerts, emitErrors } = basicPluginInfo;\n-    this.setState({\n-      pluginName,\n-      pluginType,\n-      displayName,\n-      emitAlerts,\n-      emitErrors,\n-    });\n-  };\n+// Define initial values for states within Basic Plugin Information page\n+const pluginInfoInitialState = {\n+  pluginName: '',\n+  setPluginName: undefined,\n+  pluginType: '',\n+  setPluginType: undefined,\n+  displayName: '',\n+  setDisplayName: undefined,\n+  emitAlerts: false,\n+  setEmitAlerts: undefined,\n+  emitErrors: false,\n+  setEmitErrors: undefined,\n+};\n \n-  public setConfigurationGroups = (configurationGroups: List<string>) => {\n-    this.setState({ configurationGroups });\n-  };\n+// Define initial values for states within Configuraiton Groups page\n+const configurationGroupsInitialState = {\n+  configurationGroups: List<string>(),\n+  setConfigurationGroups: undefined,\n+  groupToInfo: Map<string, Map<string, string>>(),\n+  setGroupToInfo: undefined,\n+};\n \n-  public setGroupToInfo = (groupToInfo: Map<string, Map<string, string>>) => {\n-    this.setState({ groupToInfo });\n-  };\n+// Define initial values for 'widgets' states within Configuraiton Groups page\n+const widgetsInitialState = {\n+  groupToWidgets: Map<string, List<string>>(),\n+  setGroupToWidgets: undefined,\n+  widgetInfo: Map<string, Map<string, string>>(),\n+  setWidgetInfo: undefined,\n+  widgetToAttributes: Map<string, Map<string, any>>(),\n+  setWidgetToAttributes: undefined,\n+};\n \n-  public setGroupToWidgets = (groupToWidgets: Map<string, List<string>>) => {\n-    this.setState({ groupToWidgets });\n-  };\n+// Define initial values for states within Outputs page\n+const outputInitialState = {\n+  outputName: '',\n+  setOutputName: undefined,\n+};\n \n-  public setWidgetInfo = (widgetInfo: any) => {\n-    this.setState({ widgetInfo });\n-  };\n+// Define initial values for states within Filters page\n+const filtersInitialState = {\n+  filters: List<string>(),\n+  setFilters: undefined,\n+  filterToName: Map<string, string>(),\n+  setFilterToName: undefined,\n+  filterToCondition: Map<string, Map<string, string>>(),\n+  setFilterToCondition: undefined,\n+  filterToShowList: Map<string, List<string>>(),\n+  setFilterToShowList: undefined,\n+  showToInfo: Map<string, Map<string, string>>(),\n+  setShowToInfo: undefined,\n+};\n \n-  public setLiveView = (liveView: boolean) => {\n-    this.setState({ liveView });\n-  };\n+// Define initial values for internal states within the entire page\n+const appInternalInitialState = {\n+  activeStep: 0,\n+  setActiveStep: undefined,\n+  liveView: false,\n+  setLiveView: undefined,\n+  JSONStatus: JSONStatusMessage.Normal,\n+  setJSONStatus: undefined,\n+};\n \n-  public setWidgetToAttributes = (widgetToAttributes: any) => {\n-    this.setState({ widgetToAttributes });\n-  };\n+const PluginInfoContext = React.createContext(pluginInfoInitialState);\n+const ConfigurationGroupContext = React.createContext(configurationGroupsInitialState);\n+const WidgetContext = React.createContext(widgetsInitialState);\n+const OutputContext = React.createContext(outputInitialState);\n+const FilterContext = React.createContext(filtersInitialState);\n+const AppInternalContext = React.createContext(appInternalInitialState);\n \n-  public setOutputName = (outputName: string) => {\n-    this.setState({ outputName });\n-  };\n+// Components within pluginJSONCreator will be able to use only the contexts that they choose.\n+// This will prevent unnecessary re-renderings of the UI.\n+export const usePluginInfoState = () => React.useContext(PluginInfoContext);\n+export const useConfigurationGroupState = () => React.useContext(ConfigurationGroupContext);\n+export const useWidgetState = () => React.useContext(WidgetContext);\n+export const useOutputState = () => React.useContext(OutputContext);\n+export const useFilterState = () => React.useContext(FilterContext);\n+export const useAppInternalState = () => React.useContext(AppInternalContext);\n \n-  public setJSONStatus = (JSONStatus: string) => {\n-    this.setState({ JSONStatus });\n-  };\n+const GlobalStateProvider = ({ children }) => {\n+  // Define states related to Basic Plugin Information page\n+  const [pluginName, setPluginName] = React.useState(pluginInfoInitialState.pluginName);\n+  const [pluginType, setPluginType] = React.useState(pluginInfoInitialState.pluginType);\n+  const [displayName, setDisplayName] = React.useState(pluginInfoInitialState.displayName);\n+  const [emitAlerts, setEmitAlerts] = React.useState(pluginInfoInitialState.emitAlerts);\n+  const [emitErrors, setEmitErrors] = React.useState(pluginInfoInitialState.emitErrors);\n \n-  public setFilters = (filters: string[]) => {\n-    this.setState({ filters });\n-  };\n+  // Define states related to Configuration Groups page\n+  const [configurationGroups, setConfigurationGroups] = React.useState(\n+    configurationGroupsInitialState.configurationGroups\n+  );\n+  const [groupToInfo, setGroupToInfo] = React.useState(configurationGroupsInitialState.groupToInfo);\n \n-  public setFilterToName = (filterToName: Map<string, string>) => {\n-    this.setState({ filterToName });\n-  };\n+  // Define states related to widgets in Configuraiton Groups page\n+  const [groupToWidgets, setGroupToWidgets] = React.useState(widgetsInitialState.groupToWidgets);\n+  const [widgetInfo, setWidgetInfo] = React.useState(widgetsInitialState.widgetInfo);\n+  const [widgetToAttributes, setWidgetToAttributes] = React.useState(\n+    widgetsInitialState.widgetToAttributes\n+  );\n \n-  public setFilterToCondition = (filterToCondition: Map<string, Map<string, string>>) => {\n-    this.setState({ filterToCondition });\n-  };\n+  // Define states related to Output page\n+  const [outputName, setOutputName] = React.useState(outputInitialState.outputName);\n \n-  public setFilterToShowList = (filterToShowList: Map<string, List<string>>) => {\n-    this.setState({ filterToShowList });\n-  };\n+  // Define states related to Filters page\n+  const [filters, setFilters] = React.useState(filtersInitialState.filters);\n+  const [filterToName, setFilterToName] = React.useState(filtersInitialState.filterToName);\n+  const [filterToCondition, setFilterToCondition] = React.useState(\n+    filtersInitialState.filterToCondition\n+  );\n+  const [filterToShowList, setFilterToShowList] = React.useState(\n+    filtersInitialState.filterToShowList\n+  );\n+  const [showToInfo, setShowToInfo] = React.useState(filtersInitialState.showToInfo);\n \n-  public setShowToInfo = (showToInfo: Map<string, Map<string, string>>) => {\n-    this.setState({ showToInfo });\n-  };\n+  // Define internal application states to manage pluginJSONCreator\n+  const [activeStep, setActiveStep] = React.useState(appInternalInitialState.activeStep);\n+  const [liveView, setLiveView] = React.useState(appInternalInitialState.liveView);\n+  const [JSONStatus, setJSONStatus] = React.useState(appInternalInitialState.JSONStatus);\n \n-  public setPluginState = ({\n-    basicPluginInfo,\n-    configurationGroups,\n-    groupToInfo,\n-    groupToWidgets,\n-    widgetInfo,\n-    widgetToAttributes,\n-    outputName,\n-    filters,\n-    filterToName,\n-    filterToCondition,\n-    filterToShowList,\n-    showToInfo,\n-  }) => {\n-    const { pluginName, pluginType, displayName, emitAlerts, emitErrors } = basicPluginInfo;\n-    this.setState({\n+  const pluginInfoContextValue = React.useMemo(\n+    () => ({\n       pluginName,\n+      setPluginName,\n       pluginType,\n+      setPluginType,\n       displayName,\n+      setDisplayName,\n       emitAlerts,\n+      setEmitAlerts,\n       emitErrors,\n-      configurationGroups,\n-      groupToInfo,\n+      setEmitErrors,\n+    }),\n+    [pluginName, pluginType, displayName, emitAlerts, emitErrors]\n+  );\n+\n+  const configuratioGroupContextValue = React.useMemo(\n+    () => ({ configurationGroups, setConfigurationGroups, groupToInfo, setGroupToInfo }),\n+    [configurationGroups, groupToInfo]\n+  );\n+\n+  const widgetContextValue = React.useMemo(\n+    () => ({\n       groupToWidgets,\n+      setGroupToWidgets,\n       widgetInfo,\n+      setWidgetInfo,\n       widgetToAttributes,\n+      setWidgetToAttributes,\n+    }),\n+    [groupToWidgets, widgetInfo, widgetToAttributes]\n+  );\n+\n+  const outputContextValue = React.useMemo(\n+    () => ({\n       outputName,\n+      setOutputName,\n+    }),\n+    [outputName]\n+  );\n+\n+  const filterContextValue = React.useMemo(\n+    () => ({\n       filters,\n+      setFilters,\n       filterToName,\n+      setFilterToName,\n       filterToCondition,\n+      setFilterToCondition,\n       filterToShowList,\n+      setFilterToShowList,\n       showToInfo,\n-    });\n-  };\n+      setShowToInfo,\n+    }),\n+    [filters, filterToName, filterToCondition, filterToShowList, showToInfo]\n+  );\n+  const appInternalContextValue = React.useMemo(\n+    () => ({\n+      activeStep,\n+      setActiveStep,\n+      liveView,\n+      setLiveView,\n+      JSONStatus,\n+      setJSONStatus,\n+    }),\n+    [activeStep, setActiveStep, liveView, setLiveView, JSONStatus, setJSONStatus]\n+  );\n \n-  public state = {\n-    activeStep: 0,\n-    pluginName: '',\n-    pluginType: '',\n-    displayName: '',\n-    emitAlerts: false,\n-    emitErrors: false,\n-    configurationGroups: List<string>(),\n-    groupToInfo: Map<string, Map<string, string>>(),\n-    groupToWidgets: Map<string, List<string>>(),\n-    widgetInfo: Map<string, Map<string, string>>(),\n-    widgetToAttributes: Map<string, Map<string, any>>(),\n-    liveView: true,\n-    outputName: '',\n-    JSONStatus: JSONStatusMessage.Normal,\n-    filters: List(),\n-    filterToName: Map({}),\n-    filterToCondition: Map<string, Map<string, string>>(),\n-    filterToShowList: Map<string, List<string>>(),\n-    showToInfo: Map<string, Map<string, string>>(),\n-\n-    setActiveStep: this.setActiveStep,\n-    setBasicPluginInfo: this.setBasicPluginInfo,\n-    setConfigurationGroups: this.setConfigurationGroups,\n-    setGroupToInfo: this.setGroupToInfo,\n-    setGroupToWidgets: this.setGroupToWidgets,\n-    setWidgetInfo: this.setWidgetInfo,\n-    setWidgetToAttributes: this.setWidgetToAttributes,\n-    setLiveView: this.setLiveView,\n-    setOutputName: this.setOutputName,\n-    setPluginState: this.setPluginState,\n-    setJSONStatus: this.setJSONStatus,\n-    setFilters: this.setFilters,\n-    setFilterToName: this.setFilterToName,\n-    setFilterToCondition: this.setFilterToCondition,\n-    setFilterToShowList: this.setFilterToShowList,\n-    setShowToInfo: this.setShowToInfo,\n-  };\n+  return (\n+    // TODO: Separate providers\n+    <PluginInfoContext.Provider value={pluginInfoContextValue}>\n+      <ConfigurationGroupContext.Provider value={configuratioGroupContextValue}>\n+        <WidgetContext.Provider value={widgetContextValue}>\n+          <OutputContext.Provider value={outputContextValue}>\n+            <FilterContext.Provider value={filterContextValue}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 323}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDY2MDQ4", "url": "https://github.com/cdapio/cdap/pull/12291#pullrequestreview-436066048", "createdAt": "2020-06-23T18:54:41Z", "commit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1NDo0MVrOGn2YfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1NDo0MVrOGn2YfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzODY1Mw==", "bodyText": "It might be more succinct/readable to use existingCondition.has('expression') here", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444438653", "createdAt": "2020-06-23T18:54:41Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/Filters/FilterCollection/FilterConditionInput/index.tsx", "diffHunk": "@@ -46,21 +46,18 @@ enum FilterConditionProperty {\n   Value = 'value',\n }\n \n-interface IFilterConditionInputProps extends WithStyles<typeof styles>, ICreateContext {\n+interface IFilterConditionInputProps extends WithStyles<typeof styles> {\n   filterID: string;\n }\n \n-const FilterConditionInputview: React.FC<IFilterConditionInputProps> = ({\n-  classes,\n-  filterID,\n-  filterToCondition,\n-  setFilterToCondition,\n-  widgetInfo,\n-}) => {\n+const FilterConditionInputview: React.FC<IFilterConditionInputProps> = ({ classes, filterID }) => {\n+  const { widgetInfo } = useWidgetState();\n+  const { filterToCondition, setFilterToCondition } = useFilterState();\n+\n   const existingCondition = filterToCondition.get(filterID);\n \n   const [conditionMode, setConditionMode] = React.useState(\n-    existingCondition.get('expression')\n+    !isNil(existingCondition.get('expression'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f89b5954c0bebc90bd5cad7cbe1cabbdda0dcd"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjUwNjA3", "url": "https://github.com/cdapio/cdap/pull/12291#pullrequestreview-436250607", "createdAt": "2020-06-24T00:42:30Z", "commit": {"oid": "daf7bba4c4e684da357a176064066d857599a690"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDo0MjozMVrOGn_Ktg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDo0NDozN1rOGn_MsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MjU4Mg==", "bodyText": "you can do this from the STEPS definition instead of doing it here. I think this should remain generic", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444582582", "createdAt": "2020-06-24T00:42:31Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/index.tsx", "diffHunk": "@@ -73,23 +79,54 @@ const ContentView: React.FC<ICreateContext & WithStyles<typeof styles>> = ({\n     return null;\n   }\n \n-  const Comp = STEPS[activeStep].component;\n+  const renderContentPage = () => {\n+    const Comp = STEPS[activeStep].component;\n+    const CompLabel = STEPS[activeStep].label;\n+    switch (CompLabel) {\n+      case 'Basic Plugin Information':\n+        return (\n+          <PluginInfoContext.Provider value={pluginInfoContextValue}>\n+            <Comp />\n+          </PluginInfoContext.Provider>\n+        );\n+      case 'Configuration Groups':\n+        return (\n+          <ConfigurationGroupContext.Provider value={configuratioGroupContextValue}>\n+            <WidgetContext.Provider value={widgetContextValue}>\n+              <Comp />\n+            </WidgetContext.Provider>\n+          </ConfigurationGroupContext.Provider>\n+        );\n+      case 'Output':\n+        return (\n+          <OutputContext.Provider value={outputContextValue}>\n+            <Comp />\n+          </OutputContext.Provider>\n+        );\n+      case 'Filters':\n+        return (\n+          <FilterContext.Provider value={filterContextValue}>\n+            <Comp />\n+          </FilterContext.Provider>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf7bba4c4e684da357a176064066d857599a690"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4Mjk5Mw==", "bodyText": "if you put this to the STEPS definition, then you won't need the switch at all. But just in case you do, this default cannot just break;. While ideally it shouldn't ever reach there, this will throw an error. You should return null in this case.", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444582993", "createdAt": "2020-06-24T00:44:16Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/index.tsx", "diffHunk": "@@ -73,23 +79,54 @@ const ContentView: React.FC<ICreateContext & WithStyles<typeof styles>> = ({\n     return null;\n   }\n \n-  const Comp = STEPS[activeStep].component;\n+  const renderContentPage = () => {\n+    const Comp = STEPS[activeStep].component;\n+    const CompLabel = STEPS[activeStep].label;\n+    switch (CompLabel) {\n+      case 'Basic Plugin Information':\n+        return (\n+          <PluginInfoContext.Provider value={pluginInfoContextValue}>\n+            <Comp />\n+          </PluginInfoContext.Provider>\n+        );\n+      case 'Configuration Groups':\n+        return (\n+          <ConfigurationGroupContext.Provider value={configuratioGroupContextValue}>\n+            <WidgetContext.Provider value={widgetContextValue}>\n+              <Comp />\n+            </WidgetContext.Provider>\n+          </ConfigurationGroupContext.Provider>\n+        );\n+      case 'Output':\n+        return (\n+          <OutputContext.Provider value={outputContextValue}>\n+            <Comp />\n+          </OutputContext.Provider>\n+        );\n+      case 'Filters':\n+        return (\n+          <FilterContext.Provider value={filterContextValue}>\n+            <Comp />\n+          </FilterContext.Provider>\n+        );\n+      default:\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf7bba4c4e684da357a176064066d857599a690"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MzA4OQ==", "bodyText": "is this still needed?", "url": "https://github.com/cdapio/cdap/pull/12291#discussion_r444583089", "createdAt": "2020-06-24T00:44:37Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/index.tsx", "diffHunk": "@@ -45,161 +40,245 @@ const styles = (): StyleRules => {\n   };\n };\n \n-class CreateView extends React.PureComponent<ICreateContext & WithStyles<typeof styles>> {\n-  public setActiveStep = (activeStep: number) => {\n-    this.setState({ activeStep });\n-  };\n+// Define initial values for states within Basic Plugin Information page\n+const pluginInfoInitialState = {\n+  pluginName: '',\n+  setPluginName: undefined,\n+  pluginType: '',\n+  setPluginType: undefined,\n+  displayName: '',\n+  setDisplayName: undefined,\n+  emitAlerts: false,\n+  setEmitAlerts: undefined,\n+  emitErrors: false,\n+  setEmitErrors: undefined,\n+};\n \n-  public setBasicPluginInfo = (basicPluginInfo: IBasicPluginInfo) => {\n-    const { pluginName, pluginType, displayName, emitAlerts, emitErrors } = basicPluginInfo;\n-    this.setState({\n-      pluginName,\n-      pluginType,\n-      displayName,\n-      emitAlerts,\n-      emitErrors,\n-    });\n-  };\n+// Define initial values for states within Configuraiton Groups page\n+const configurationGroupsInitialState = {\n+  configurationGroups: List<string>(),\n+  setConfigurationGroups: undefined,\n+  groupToInfo: Map<string, Map<string, string>>(),\n+  setGroupToInfo: undefined,\n+};\n \n-  public setConfigurationGroups = (configurationGroups: List<string>) => {\n-    this.setState({ configurationGroups });\n-  };\n+// Define initial values for 'widgets' states within Configuraiton Groups page\n+const widgetsInitialState = {\n+  groupToWidgets: Map<string, List<string>>(),\n+  setGroupToWidgets: undefined,\n+  widgetInfo: Map<string, Map<string, string>>(),\n+  setWidgetInfo: undefined,\n+  widgetToAttributes: Map<string, Map<string, any>>(),\n+  setWidgetToAttributes: undefined,\n+};\n \n-  public setGroupToInfo = (groupToInfo: Map<string, Map<string, string>>) => {\n-    this.setState({ groupToInfo });\n-  };\n+// Define initial values for states within Outputs page\n+const outputInitialState = {\n+  outputName: '',\n+  setOutputName: undefined,\n+};\n \n-  public setGroupToWidgets = (groupToWidgets: Map<string, List<string>>) => {\n-    this.setState({ groupToWidgets });\n-  };\n+// Define initial values for states within Filters page\n+const filtersInitialState = {\n+  filters: List<string>(),\n+  setFilters: undefined,\n+  filterToName: Map<string, string>(),\n+  setFilterToName: undefined,\n+  filterToCondition: Map<string, Map<string, string>>(),\n+  setFilterToCondition: undefined,\n+  filterToShowList: Map<string, List<string>>(),\n+  setFilterToShowList: undefined,\n+  showToInfo: Map<string, Map<string, string>>(),\n+  setShowToInfo: undefined,\n+};\n \n-  public setWidgetInfo = (widgetInfo: any) => {\n-    this.setState({ widgetInfo });\n-  };\n+// Define initial values for internal states within the entire page\n+const appInternalInitialState = {\n+  activeStep: 0,\n+  setActiveStep: undefined,\n+  liveView: false,\n+  setLiveView: undefined,\n+  JSONStatus: JSONStatusMessage.Normal,\n+  setJSONStatus: undefined,\n+};\n \n-  public setLiveView = (liveView: boolean) => {\n-    this.setState({ liveView });\n-  };\n+export const PluginInfoContext = React.createContext(pluginInfoInitialState);\n+export const ConfigurationGroupContext = React.createContext(configurationGroupsInitialState);\n+export const WidgetContext = React.createContext(widgetsInitialState);\n+export const OutputContext = React.createContext(outputInitialState);\n+export const FilterContext = React.createContext(filtersInitialState);\n+export const AppInternalContext = React.createContext(appInternalInitialState);\n \n-  public setWidgetToAttributes = (widgetToAttributes: any) => {\n-    this.setState({ widgetToAttributes });\n-  };\n+// Components within pluginJSONCreator will be able to use only the contexts that they choose.\n+// This will prevent unnecessary re-renderings of the UI.\n+export const usePluginInfoState = () => React.useContext(PluginInfoContext);\n+export const useConfigurationGroupState = () => React.useContext(ConfigurationGroupContext);\n+export const useWidgetState = () => React.useContext(WidgetContext);\n+export const useOutputState = () => React.useContext(OutputContext);\n+export const useFilterState = () => React.useContext(FilterContext);\n+export const useAppInternalState = () => React.useContext(AppInternalContext);\n \n-  public setOutputName = (outputName: string) => {\n-    this.setState({ outputName });\n-  };\n+const GlobalStateProvider = ({\n+  children,\n+  pluginInfoContextValue,\n+  configuratioGroupContextValue,\n+  widgetContextValue,\n+  outputContextValue,\n+  filterContextValue,\n+  appInternalContextValue,\n+}) => {\n+  return (\n+    <PluginInfoContext.Provider value={pluginInfoContextValue}>\n+      <ConfigurationGroupContext.Provider value={configuratioGroupContextValue}>\n+        <WidgetContext.Provider value={widgetContextValue}>\n+          <OutputContext.Provider value={outputContextValue}>\n+            <FilterContext.Provider value={filterContextValue}>\n+              <AppInternalContext.Provider value={appInternalContextValue}>\n+                {children}\n+              </AppInternalContext.Provider>\n+            </FilterContext.Provider>\n+          </OutputContext.Provider>\n+        </WidgetContext.Provider>\n+      </ConfigurationGroupContext.Provider>\n+    </PluginInfoContext.Provider>\n+  );\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf7bba4c4e684da357a176064066d857599a690"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjY3MDY1", "url": "https://github.com/cdapio/cdap/pull/12291#pullrequestreview-436267065", "createdAt": "2020-06-24T01:39:10Z", "commit": {"oid": "23c777e610159ee41897e7f9b1eb9edf6dde13b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23c777e610159ee41897e7f9b1eb9edf6dde13b5", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/23c777e610159ee41897e7f9b1eb9edf6dde13b5", "committedDate": "2020-06-24T01:38:30Z", "message": "another address of comments"}, "afterCommit": {"oid": "27a9d90fa1dafc5eba8d0b169326a244ff2a8cbb", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/27a9d90fa1dafc5eba8d0b169326a244ff2a8cbb", "committedDate": "2020-06-24T01:40:19Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9139401b0e1d5f14faed186d1d27024caf9007d4", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/9139401b0e1d5f14faed186d1d27024caf9007d4", "committedDate": "2020-06-24T01:43:07Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27a9d90fa1dafc5eba8d0b169326a244ff2a8cbb", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/27a9d90fa1dafc5eba8d0b169326a244ff2a8cbb", "committedDate": "2020-06-24T01:40:19Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}, "afterCommit": {"oid": "9139401b0e1d5f14faed186d1d27024caf9007d4", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/9139401b0e1d5f14faed186d1d27024caf9007d4", "committedDate": "2020-06-24T01:43:07Z", "message": "[CDAP-16920] Optimize performance for Plugin JSON Creator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1994, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}