{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTQzOTQ5", "number": 11903, "title": "Add client to fetch Application/Schedule/Preferences details ", "bodyText": "Introduce AbstractFetcher interface and RemoteFetcher implementation that fetch Application, Schedule and Preferences detials.\nNext change will be switching ProfileMetadataMessageProcessor to use these clients instead of currently accessing levelDB directly", "createdAt": "2020-02-28T19:00:08Z", "url": "https://github.com/cdapio/cdap/pull/11903", "merged": true, "mergeCommit": {"oid": "80abebc1defcd599b642ec088e9080ff2c422ac9"}, "closed": true, "closedAt": "2020-03-05T18:09:29Z", "author": {"login": "wyzhang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI6BmVgFqTM2Njc1OTgzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKlDslgBqjMwOTk3NjUxNDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzU5ODMx", "url": "https://github.com/cdapio/cdap/pull/11903#pullrequestreview-366759831", "createdAt": "2020-02-29T00:49:26Z", "commit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0OToyN1rOFwGi2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToxMzoyNlrOFwGvEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzE5Mg==", "bodyText": "I think we can remove the 'Abstract' and just have ApplicationDetailFetcher.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983192", "createdAt": "2020-02-29T00:49:27Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzMzNA==", "bodyText": "is the plan to have ApplicationLifecycleService implement this interface?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983334", "createdAt": "2020-02-29T00:50:26Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzE5Mg=="}, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzQ2Nw==", "bodyText": "javadoc should include information about when the different exceptions are thrown", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983467", "createdAt": "2020-02-29T00:51:20Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzgzNA==", "bodyText": "should this throw ApplicationNotFoundException instead of NotFoundException? Or will it be throwing other types of NotFoundException as well?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983834", "createdAt": "2020-02-29T00:53:52Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mzg5OQ==", "bodyText": "similar comments here. When does it throw NotFoundException? when the namespace doesn't exist? Then shouldn't it throw NamespaceNotFoundException?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983899", "createdAt": "2020-02-29T00:54:24Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException;\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDc2NQ==", "bodyText": "the request could have failed with a 404 if the namespace doesn't exist as well so this isn't always going to be accurate. Unfortunately I don't think there is a way to differentiate the two without larger changes, so I think it's better to just throw a NotFoundException where the exception message is the response body.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984765", "createdAt": "2020-02-29T01:01:06Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDgyNw==", "bodyText": "should use the response body instead of 'Not found', as it should be more descriptive", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984827", "createdAt": "2020-02-29T01:01:38Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {\n+      }.getType(), GSON);\n+    return objectResponse.getResponseObject();\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg==", "bodyText": "this Type can be a private static final constant instead of created in each call", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984872", "createdAt": "2020-02-29T01:02:02Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDkyNA==", "bodyText": "should throw a NamespaceNotFoundException", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984924", "createdAt": "2020-02-29T01:02:31Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg==", "bodyText": "just use the response body by itself without the 'Request failed', otherwise the message can end up looking weird.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985032", "createdAt": "2020-02-29T01:03:24Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {\n+      }.getType(), GSON);\n+    return objectResponse.getResponseObject();\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");\n+    }\n+    if (httpResponse.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+      throw new IOException(String.format(\"Request failed %s\", httpResponse.getResponseBodyAsString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTA4MQ==", "bodyText": "doesn't need to be final", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985081", "createdAt": "2020-02-29T01:03:42Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTExNQ==", "bodyText": "doesn't need to be final", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985115", "createdAt": "2020-02-29T01:03:52Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTQ4NA==", "bodyText": "type can be a private static final constant", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985484", "createdAt": "2020-02-29T01:06:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), new TypeToken<PreferencesDetail>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTU2Nw==", "bodyText": "similar comment, this is misleading because it's not always the entity that doesn't exist", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985567", "createdAt": "2020-02-29T01:06:54Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjIxNA==", "bodyText": "there is code duplication in these classes, it would be better to consolidate the common code, either in a common abstract class or by enhancing RemoteClient in some way.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385986214", "createdAt": "2020-02-29T01:12:28Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), new TypeToken<PreferencesDetail>() {\n+    }.getType());\n+  }\n+\n+  /**\n+   * Construct URI to fetch preferences depending on the type of supplied entity\n+   */\n+  private String getPreferencesURI(EntityId entityId, boolean resolved) {\n+    String uri;\n+    switch (entityId.getEntityType()) {\n+      case INSTANCE:\n+        uri = String.format(\"preferences\");\n+        break;\n+      case NAMESPACE:\n+        NamespaceId namespaceId = (NamespaceId) entityId;\n+        uri = String.format(\"namespaces/%s/preferences\", namespaceId.getNamespace());\n+        break;\n+      case APPLICATION:\n+        ApplicationId appId = (ApplicationId) entityId;\n+        uri = String.format(\"namespaces/%s/apps/%s/preferences\",\n+                            appId.getNamespace(), appId.getApplication());\n+        break;\n+      case PROGRAM:\n+        ProgramId programId = (ProgramId) entityId;\n+        uri = String.format(\"namespaces/%s/apps/%s/%s/%s/preferences\",\n+                            programId.getNamespace(), programId.getApplication(), programId.getType().getCategoryName(),\n+                            programId.getProgram());\n+        break;\n+      default:\n+        throw new UnsupportedOperationException(\n+          String.format(\"Preferences cannot be used on this entity type: %s\", entityId.getEntityType()));\n+    }\n+    if (resolved) {\n+      uri += \"?resolved=true\";\n+    }\n+    return uri;\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");\n+    }\n+    if (httpResponse.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+      throw new IOException(String.format(\"Request failed %s\", httpResponse.getResponseBodyAsString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjMyMQ==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385986321", "createdAt": "2020-02-29T01:13:26Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternalTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.InstanceId;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link RemotePreferencesFetcherInternal}\n+ */\n+public class RemotePreferencesFetcherInternalTest extends AppFabricTestBase {\n+  private static AbstractPreferencesFetcher fetcher = null;\n+\n+  @BeforeClass\n+  public static void init() {\n+    fetcher = getInjector().getInstance(RemotePreferencesFetcherInternal.class);\n+  }\n+\n+  public void testGetPreferences() throws Exception {\n+    PreferencesDetail preferences = null;\n+    EntityId entityId = null;\n+\n+    // Get preferences on instance, but none was set.\n+    entityId = new InstanceId(\"\");\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(Collections.emptyMap(), preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    // SeqId should be 0 when preferences never get set on the entity.\n+    Assert.assertEquals(0, preferences.getSeqId());\n+\n+    // Set preferences on instance and fetch again.\n+    Map<String, String> instanceProperties = ImmutableMap.of(\"instance-key1\", \"instance-val1\");\n+    setPreferences(getPreferenceURI(), instanceProperties, 200);\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(instanceProperties, preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Deploy the application.\n+    String namespace = TEST_NAMESPACE1;\n+    String appName = AllProgramsApp.NAME;\n+    deploy(AllProgramsApp.class, 200, Constants.Gateway.API_VERSION_3_TOKEN, namespace);\n+\n+    // Get preferences on the application, but none was set.\n+    entityId = new ApplicationId(namespace, appName);\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(Collections.emptyMap(), preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    Assert.assertEquals(0, preferences.getSeqId());\n+\n+    // Get resolved preferences on the application, preferences on instance should be returned.\n+    entityId = new ApplicationId(namespace, appName);\n+    preferences = fetcher.get(entityId, true);\n+    Assert.assertEquals(instanceProperties, preferences.getProperties());\n+    Assert.assertTrue(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Set preferences on application and fetch again, resolved preferences should be returned.\n+    Map<String, String> appProperties = ImmutableMap.of(\"app-key1\", \"app-val1\");\n+    setPreferences(getPreferenceURI(namespace, appName), instanceProperties, 200);\n+    preferences = fetcher.get(entityId, true);\n+    Map<String, String> resolvedProperites = new HashMap<>();\n+    resolvedProperites.putAll(appProperties);\n+    resolvedProperites.putAll(instanceProperties);\n+    Assert.assertEquals(resolvedProperites, preferences.getProperties());\n+    Assert.assertTrue(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Delete the app\n+    Assert.assertEquals(\n+        200,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTYwNTAw", "url": "https://github.com/cdapio/cdap/pull/11903#pullrequestreview-367560500", "createdAt": "2020-03-02T22:00:34Z", "commit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjowMDozNFrOFww4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjowNDozMlrOFww_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjgzMg==", "bodyText": "why do we need this endpoint? Isn't it the same as apps/app-d?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386676832", "createdAt": "2020-03-02T22:00:34Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}\")\n+  public void getAppDetail(HttpRequest request, HttpResponder responder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3Njk0MQ==", "bodyText": "similar question, why is this needed?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386676941", "createdAt": "2020-03-02T22:00:46Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}\")\n+  public void getAppDetail(HttpRequest request, HttpResponder responder,\n+                           @PathParam(\"namespace-id\") String namespace,\n+                           @PathParam(\"app-id\") String application) throws Exception {\n+    NamespaceId namespaceId = validateNamespace(namespace);\n+    ApplicationId appId = validateApplicationId(namespaceId, application);\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(applicationLifecycleService.getAppDetail(appId)));\n+  }\n+\n+  /**\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}/versions/{version-id}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzczMA==", "bodyText": "style: our javadocs usually aren't aligned and just use a single space between param and description", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386677730", "createdAt": "2020-03-02T22:02:26Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -215,15 +216,21 @@ public BodyConsumer createAppVersion(HttpRequest request, HttpResponder responde\n   }\n \n   /**\n-   * Returns a list of applications associated with a namespace.\n+   * Returns a list of {@link ApplicationRecord} for all applications in the given namespace\n+   *\n+   * @param request         {@link HttpRequest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzkxMA==", "bodyText": "extra '*' at the end of the line. Same comment in other places in this file", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386677910", "createdAt": "2020-03-02T22:02:49Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3ODc0NA==", "bodyText": "what's the reason the other app list endpoint was changed? Are we causing issues by adding back the old functionality?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386678744", "createdAt": "2020-03-02T22:04:32Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -378,6 +382,23 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n     }\n   }\n \n+  /**\n+   * Get a list of {@link ApplicationDetail} for all applications in the given namespace\n+   *\n+   * @param request   {@link HttpRequest}\n+   * @param responder {@link HttpResponse}\n+   * @param namespace the namespace to get all application details\n+   * @throws Exception if namespace doesn't exists or failed to get all application details\n+   */\n+  @GET\n+  @Path(\"/appdetail\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd26dac0bfb04eb8a337f02854aa033dc479471d"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDUxMzcz", "url": "https://github.com/cdapio/cdap/pull/11903#pullrequestreview-368451373", "createdAt": "2020-03-04T01:41:29Z", "commit": {"oid": "36410d7f63074bf342769d5329004bb8ba69c1d3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0MToyOVrOFxdQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0NDowN1rOFxdS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMzg4OA==", "bodyText": "nit: collections should be plural -> 'appdetails'. Though I think it's better to just have it as 'apps'", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387403888", "createdAt": "2020-03-04T01:41:29Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+  private final NamespacePathLocator namespacePathLocator;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final File tmpDir;\n+\n+  @Inject\n+  AppLifecycleHttpHandlerInternal(CConfiguration configuration,\n+                                  ProgramRuntimeService runtimeService,\n+                                  NamespaceQueryAdmin namespaceQueryAdmin,\n+                                  NamespacePathLocator namespacePathLocator,\n+                                  ApplicationLifecycleService applicationLifecycleService) {\n+    this.configuration = configuration;\n+    this.namespaceQueryAdmin = namespaceQueryAdmin;\n+    this.runtimeService = runtimeService;\n+    this.namespacePathLocator = namespacePathLocator;\n+    this.applicationLifecycleService = applicationLifecycleService;\n+    this.tmpDir = new File(new File(configuration.get(Constants.CFG_LOCAL_DATA_DIR)),\n+                           configuration.get(Constants.AppFabric.TEMP_DIR)).getAbsoluteFile();\n+  }\n+\n+  /**\n+   * Get a list of {@link ApplicationDetail} for all applications in the given namespace\n+   *\n+   * @param request   {@link HttpRequest}\n+   * @param responder {@link HttpResponse}\n+   * @param namespace the namespace to get all application details\n+   * @throws Exception if namespace doesn't exists or failed to get all application details\n+   */\n+  @GET\n+  @Path(\"/appdetail\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36410d7f63074bf342769d5329004bb8ba69c1d3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDA3Ng==", "bodyText": "this is not fixed yet", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404076", "createdAt": "2020-03-04T01:42:17Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg=="}, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDIyOQ==", "bodyText": "This isn't fixed either, is there a missing commit?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404229", "createdAt": "2020-03-04T01:42:57Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {\n+      }.getType(), GSON);\n+    return objectResponse.getResponseObject();\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");\n+    }\n+    if (httpResponse.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+      throw new IOException(String.format(\"Request failed %s\", httpResponse.getResponseBodyAsString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg=="}, "originalCommit": {"oid": "06f1d7c335b78cee28eb241899995da6c534dc7e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDUzNA==", "bodyText": "remove 'ru'", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404534", "createdAt": "2020-03-04T01:44:07Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcherTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ru * Copyright \u00a9 2020 Cask Data, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36410d7f63074bf342769d5329004bb8ba69c1d3"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDE5ODkw", "url": "https://github.com/cdapio/cdap/pull/11903#pullrequestreview-369019890", "createdAt": "2020-03-04T18:31:15Z", "commit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozMToxNVrOFx4t5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozMzowM1rOFx4xrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Mzc5OQ==", "bodyText": "Seems like an unused field? Try to use the IDE warning to get rid of unused fields.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387853799", "createdAt": "2020-03-04T18:31:15Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+  private final NamespacePathLocator namespacePathLocator;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final File tmpDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Mzk3Mw==", "bodyText": "Unused field?", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387853973", "createdAt": "2020-03-04T18:31:31Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDc2NA==", "bodyText": "Remove empty comment block.", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387854764", "createdAt": "2020-03-04T18:33:03Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/ScheduleFetcher.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.ProgramNotFoundException;\n+import io.cdap.cdap.internal.app.runtime.schedule.ScheduleNotFoundException;\n+import io.cdap.cdap.proto.ScheduleDetail;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ScheduleId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching schedule(s)\n+ */\n+public interface ScheduleFetcher {\n+  /**\n+   * Get schedule details for the given {@code scheduleId}\n+   * @param scheduleId the id of the schedule to fetch {@code ScheduleDetail} for\n+   * @return the schedule detail\n+   * @throws IOException if failed to get the detail of the given schedule\n+   * @throws ScheduleNotFoundException if the given schedule doesn't exist.\n+   */\n+  ScheduleDetail get(ScheduleId scheduleId) throws IOException, ScheduleNotFoundException;\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDI0NDkz", "url": "https://github.com/cdapio/cdap/pull/11903#pullrequestreview-369024493", "createdAt": "2020-03-04T18:38:08Z", "commit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozODowOFrOFx48eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozODo0MlrOFx49fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NzUzMA==", "bodyText": "this should also be apps, not app", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387857530", "createdAt": "2020-03-04T18:38:08Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -106,7 +106,7 @@ public void getAllAppDetails(HttpRequest request, HttpResponder responder,\n    * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n    */\n   @GET\n-  @Path(\"/appdetail/{app-id}\")\n+  @Path(\"/app/{app-id}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Nzc4OQ==", "bodyText": "fix", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387857789", "createdAt": "2020-03-04T18:38:42Z", "author": {"login": "albertshau"}, "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/handlers/AppLifecycleHttpHandlerTest.java", "diffHunk": "@@ -120,7 +120,7 @@ public void testDeployUsingNonexistantArtifact404() throws Exception {\n     Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"badapp\");\n     AppRequest<Config> appRequest =\n       new AppRequest<>(new ArtifactSummary(\"something\", \"1.0.0\"), null);\n-    HttpResponse response = deploy(appId, appRequest);\n+    HttpResponse response = deploy(appId, appRequest;)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631603477e8ab993a11419d2e1ca734ac2630144", "author": {"user": {"login": "wyzhang", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/631603477e8ab993a11419d2e1ca734ac2630144", "committedDate": "2020-03-05T05:55:18Z", "message": "(CDAP-16353) Add clients for fetching ApplicationDetail, PreferencesDetail, ScheduleDetail"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "author": {"user": {"login": "wyzhang", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "committedDate": "2020-03-04T18:26:14Z", "message": "Addressing remaining comments"}, "afterCommit": {"oid": "631603477e8ab993a11419d2e1ca734ac2630144", "author": {"user": {"login": "wyzhang", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/631603477e8ab993a11419d2e1ca734ac2630144", "committedDate": "2020-03-05T05:55:18Z", "message": "(CDAP-16353) Add clients for fetching ApplicationDetail, PreferencesDetail, ScheduleDetail"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1312, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}