{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzA1MjI3", "number": 12465, "title": "[CDAP-16682] System services delay notification", "bodyText": "If requests take too long to respond, we now show a snackbar indicating that there is a delay. This is added as an experiment that is enabled by default but users can choose to disable it if they want.\nAt regular intervals, we check if any of the requests are currently delayed and if we find that they are, we show the snackbar. The delayed requests need to be healthy for 2 other intervals along with no new delays for the snackbar to disappear.\nJIRA: https://issues.cask.co/browse/CDAP-16682", "createdAt": "2020-07-16T15:53:52Z", "url": "https://github.com/cdapio/cdap/pull/12465", "merged": true, "mergeCommit": {"oid": "f5d2dbdd300dff67f2ad0e915d71cc340bfb29a6"}, "closed": true, "closedAt": "2020-07-30T00:48:18Z", "author": {"login": "itsanudeep"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc135oqAFqTQ1MDg2MjUyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc50eM4gBqjM2MDE0MzEzNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODYyNTIz", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-450862523", "createdAt": "2020-07-17T18:11:48Z", "commit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxMTo0OFrOGzclKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxMTo0OFrOGzclKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODgyNg==", "bodyText": "nit: We don't need the ternary operator here (the equality should do the same thing).", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r456598826", "createdAt": "2020-07-17T18:11:48Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/Lab/index.tsx", "diffHunk": "@@ -58,34 +60,48 @@ const styles = (): StyleRules => {\n interface ILabProps extends WithStyles<typeof styles> {}\n interface IExperiment {\n   id: string;\n-  value: boolean;\n+  enabled: boolean;\n   screenshot: string | null;\n   name: string;\n   description: string;\n+  showValue?: boolean;\n+  valueLabel?: string;\n+  valueType?: string;\n }\n interface ILabState {\n   experiments: IExperiment[];\n }\n \n class Lab extends React.Component<ILabProps, ILabState> {\n-  public componentWillMount() {\n-    experimentsList.forEach((experiment) => {\n-      experiment.value = window.localStorage.getItem(experiment.id) === 'true' ? true : false;\n+  public componentDidMount() {\n+    experimentsList.forEach((experiment: IExperiment) => {\n+      // If experiment preference is present in storage, use it.\n+      // If not, use the default value and set it in storage and use it.\n+      const experimentStatusFromStorage = window.localStorage.getItem(experiment.id);\n+      if (experimentStatusFromStorage === null) {\n+        window.localStorage.setItem(experiment.id, experiment.enabled.toString());\n+      } else {\n+        experiment.enabled = experimentStatusFromStorage === 'true' ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODY0MDE5", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-450864019", "createdAt": "2020-07-17T18:14:22Z", "commit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxNDoyMlrOGzcpyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxNDoyMlrOGzcpyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDAxMA==", "bodyText": "Why do we need to start the health check here as well as when the window is focused?", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r456600010", "createdAt": "2020-07-17T18:14:22Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/SystemServicesDelay/index.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import { connect, Provider } from 'react-redux';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import Snackbar from '@material-ui/core/Snackbar';\n+import Button from '@material-ui/core/Button';\n+import ee from 'event-emitter';\n+import { WINDOW_ON_FOCUS, WINDOW_ON_BLUR } from 'services/WindowManager';\n+import { getExperimentValue, isExperimentEnabled } from 'services/helpers';\n+import DataSource from 'services/datasource';\n+import cloneDeep from 'lodash/cloneDeep';\n+import flatten from 'lodash/flatten';\n+\n+interface IBinding {\n+  resource: {\n+    id: string;\n+    requestTime: number;\n+  };\n+  type: string;\n+  checkAgainsLeft?: number;\n+}\n+\n+interface ISystemDelayProps {\n+  showDelay: boolean;\n+  activeDataSources: DataSource[];\n+}\n+\n+const EXPERIMENT_ID = 'system-delay-notification';\n+const HEALTH_CHECK_INTERVAL = 12000;\n+const DEFAULT_DELAY_TIME = 5000;\n+\n+class SystemServicesDelayView extends React.Component<ISystemDelayProps> {\n+  public state = { delayedBindings: [] };\n+  private healthCheckInterval: NodeJS.Timeout;\n+  private eventEmitter = ee(ee);\n+\n+  public componentDidMount() {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.checkForDelayedBindings();\n+    }\n+    this.startHealthCheck();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODY1NzYw", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-450865760", "createdAt": "2020-07-17T18:17:22Z", "commit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxNzoyM1rOGzcvYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxNzoyM1rOGzcvYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMTQ0MQ==", "bodyText": "It looks like delayedBindings should be an object? Relatedly (if that is a word), it might be helpful to define an interface for bindings.", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r456601441", "createdAt": "2020-07-17T18:17:23Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/SystemServicesDelay/index.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import { connect, Provider } from 'react-redux';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import Snackbar from '@material-ui/core/Snackbar';\n+import Button from '@material-ui/core/Button';\n+import ee from 'event-emitter';\n+import { WINDOW_ON_FOCUS, WINDOW_ON_BLUR } from 'services/WindowManager';\n+import { getExperimentValue, isExperimentEnabled } from 'services/helpers';\n+import DataSource from 'services/datasource';\n+import cloneDeep from 'lodash/cloneDeep';\n+import flatten from 'lodash/flatten';\n+\n+interface IBinding {\n+  resource: {\n+    id: string;\n+    requestTime: number;\n+  };\n+  type: string;\n+  checkAgainsLeft?: number;\n+}\n+\n+interface ISystemDelayProps {\n+  showDelay: boolean;\n+  activeDataSources: DataSource[];\n+}\n+\n+const EXPERIMENT_ID = 'system-delay-notification';\n+const HEALTH_CHECK_INTERVAL = 12000;\n+const DEFAULT_DELAY_TIME = 5000;\n+\n+class SystemServicesDelayView extends React.Component<ISystemDelayProps> {\n+  public state = { delayedBindings: [] };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODcxMjI2", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-450871226", "createdAt": "2020-07-17T18:26:53Z", "commit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjo1M1rOGzdBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjo1M1rOGzdBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTk2NA==", "bodyText": "nit: don't need ternary operator here", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r456605964", "createdAt": "2020-07-17T18:26:53Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/services/helpers.js", "diffHunk": "@@ -490,6 +490,14 @@ function connectWithStore(store, WrappedComponent, ...args) {\n   };\n }\n \n+function getExperimentValue(experimentID) {\n+  return window.localStorage.getItem(`${experimentID}-value`);\n+}\n+\n+function isExperimentEnabled(experimentID) {\n+  return window.localStorage.getItem(`${experimentID}`) === 'true' ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzYxNTM2", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-451761536", "createdAt": "2020-07-20T16:19:25Z", "commit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxOToyNVrOG0Vpmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0MDo1NlrOG0WeIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMzg1MQ==", "bodyText": "it's better to rename this to be something more explicit like experimentId. id is ambiguous with html id attribute", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457533851", "createdAt": "2020-07-20T16:19:25Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/AppHeader/AppDrawer/AppDrawer.tsx", "diffHunk": "@@ -140,7 +140,7 @@ class AppDrawer extends React.PureComponent<IAppDrawerProps> {\n             id=\"navbar-home\"\n             isActive={location.pathname === `/cdap/${nsurl}`}\n           />\n-          <ExperimentalFeature name={'data-ingestion'}>\n+          <ExperimentalFeature id=\"data-ingestion\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MDkzMw==", "bodyText": "why do you need to filter? It's getting flatten, so empty array will just get ignored, right?", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457540933", "createdAt": "2020-07-20T16:30:34Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/SystemServicesDelay/index.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import { connect, Provider } from 'react-redux';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import Snackbar from '@material-ui/core/Snackbar';\n+import Button from '@material-ui/core/Button';\n+import ee from 'event-emitter';\n+import { WINDOW_ON_FOCUS, WINDOW_ON_BLUR } from 'services/WindowManager';\n+import { getExperimentValue, isExperimentEnabled } from 'services/helpers';\n+import DataSource from 'services/datasource';\n+import cloneDeep from 'lodash/cloneDeep';\n+import flatten from 'lodash/flatten';\n+\n+interface IBinding {\n+  resource: {\n+    id: string;\n+    requestTime: number;\n+  };\n+  type: string;\n+  checkAgainsLeft?: number;\n+}\n+\n+interface ISystemDelayProps {\n+  showDelay: boolean;\n+  activeDataSources: DataSource[];\n+}\n+\n+const EXPERIMENT_ID = 'system-delay-notification';\n+const HEALTH_CHECK_INTERVAL = 12000;\n+const DEFAULT_DELAY_TIME = 5000;\n+\n+class SystemServicesDelayView extends React.Component<ISystemDelayProps> {\n+  public state = { delayedBindings: [] };\n+  private healthCheckInterval: NodeJS.Timeout;\n+  private eventEmitter = ee(ee);\n+\n+  public componentDidMount() {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.checkForDelayedBindings();\n+    }\n+    this.startHealthCheck();\n+    this.eventEmitter.on(WINDOW_ON_FOCUS, () => {\n+      this.startHealthCheck();\n+    });\n+    this.eventEmitter.on(WINDOW_ON_BLUR, () => {\n+      this.stopHealthCheck();\n+    });\n+  }\n+\n+  private startHealthCheck = () => {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.healthCheckInterval = setInterval(this.checkForDelayedBindings, HEALTH_CHECK_INTERVAL);\n+    }\n+  };\n+\n+  private checkForDelayedBindings = () => {\n+    const delayedTimeFromExperiment = getExperimentValue(EXPERIMENT_ID);\n+    const SERVICES_DELAYED_TIME = delayedTimeFromExperiment\n+      ? parseInt(delayedTimeFromExperiment, 10) * 1000\n+      : DEFAULT_DELAY_TIME;\n+    const activeBindings = flatten(\n+      this.props.activeDataSources\n+        .map((dataSource: DataSource) => dataSource.getBindings())\n+        .filter((bindings) => bindings.length > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MzgxNA==", "bodyText": "do you need to clone? All you need to store for the list of delayed bindings is the binding id and how many occurence, right?\nwe should avoid using cloneDeep as much as possible, especially for a recurring operations like this. It's inherently slow.", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457543814", "createdAt": "2020-07-20T16:35:15Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/SystemServicesDelay/index.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import { connect, Provider } from 'react-redux';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import Snackbar from '@material-ui/core/Snackbar';\n+import Button from '@material-ui/core/Button';\n+import ee from 'event-emitter';\n+import { WINDOW_ON_FOCUS, WINDOW_ON_BLUR } from 'services/WindowManager';\n+import { getExperimentValue, isExperimentEnabled } from 'services/helpers';\n+import DataSource from 'services/datasource';\n+import cloneDeep from 'lodash/cloneDeep';\n+import flatten from 'lodash/flatten';\n+\n+interface IBinding {\n+  resource: {\n+    id: string;\n+    requestTime: number;\n+  };\n+  type: string;\n+  checkAgainsLeft?: number;\n+}\n+\n+interface ISystemDelayProps {\n+  showDelay: boolean;\n+  activeDataSources: DataSource[];\n+}\n+\n+const EXPERIMENT_ID = 'system-delay-notification';\n+const HEALTH_CHECK_INTERVAL = 12000;\n+const DEFAULT_DELAY_TIME = 5000;\n+\n+class SystemServicesDelayView extends React.Component<ISystemDelayProps> {\n+  public state = { delayedBindings: [] };\n+  private healthCheckInterval: NodeJS.Timeout;\n+  private eventEmitter = ee(ee);\n+\n+  public componentDidMount() {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.checkForDelayedBindings();\n+    }\n+    this.startHealthCheck();\n+    this.eventEmitter.on(WINDOW_ON_FOCUS, () => {\n+      this.startHealthCheck();\n+    });\n+    this.eventEmitter.on(WINDOW_ON_BLUR, () => {\n+      this.stopHealthCheck();\n+    });\n+  }\n+\n+  private startHealthCheck = () => {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.healthCheckInterval = setInterval(this.checkForDelayedBindings, HEALTH_CHECK_INTERVAL);\n+    }\n+  };\n+\n+  private checkForDelayedBindings = () => {\n+    const delayedTimeFromExperiment = getExperimentValue(EXPERIMENT_ID);\n+    const SERVICES_DELAYED_TIME = delayedTimeFromExperiment\n+      ? parseInt(delayedTimeFromExperiment, 10) * 1000\n+      : DEFAULT_DELAY_TIME;\n+    const activeBindings = flatten(\n+      this.props.activeDataSources\n+        .map((dataSource: DataSource) => dataSource.getBindings())\n+        .filter((bindings) => bindings.length > 0)\n+    );\n+    let newlyDelayedBindings = {};\n+    const delayedBindingsFromLastTime = cloneDeep(this.state.delayedBindings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDI3OA==", "bodyText": "nit: space after comma", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457544278", "createdAt": "2020-07-20T16:36:00Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -35,17 +35,20 @@ import 'rxjs/add/operator/debounceTime';\n import WindowManager, { WINDOW_ON_BLUR, WINDOW_ON_FOCUS } from 'services/WindowManager';\n import { objectQuery } from 'services/helpers';\n import ifvisible from 'ifvisible.js';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import cloneDeep from 'lodash/cloneDeep';\n \n const CDAP_API_VERSION = 'v3';\n // FIXME (CDAP-14836): Right now this is scattered across node and client. Need to consolidate this.\n const REQUEST_ORIGIN_ROUTER = 'ROUTER';\n \n export default class Datasource {\n-  constructor(genericResponseHandlers = [() => true]) {\n-    this.eventEmitter = ee(ee);\n+  constructor(genericResponseHandlers = [() => true],options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NTkyMg==", "bodyText": "this should probably have a better function signature. Bindings is a map, but the return value here is an array.\nalso nit: space after ().", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457545922", "createdAt": "2020-07-20T16:38:43Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -115,9 +123,20 @@ export default class Datasource {\n     });\n     this.eventEmitter.on(WINDOW_ON_FOCUS, this.resumePoll.bind(this));\n     this.eventEmitter.on(WINDOW_ON_BLUR, this.pausePoll.bind(this));\n+    if (!this.excludeFromHealthCheck) {\n+      SystemDelayStore.dispatch({\n+        type: SystemDelayActions.registerDataSource,\n+        payload: this,\n+      });\n+    }\n+  }\n+\n+  getBindings(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjA5Mg==", "bodyText": "is cloneDeep required here? should avoid using cloneDeep", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457546092", "createdAt": "2020-07-20T16:38:59Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -115,9 +123,20 @@ export default class Datasource {\n     });\n     this.eventEmitter.on(WINDOW_ON_FOCUS, this.resumePoll.bind(this));\n     this.eventEmitter.on(WINDOW_ON_BLUR, this.pausePoll.bind(this));\n+    if (!this.excludeFromHealthCheck) {\n+      SystemDelayStore.dispatch({\n+        type: SystemDelayActions.registerDataSource,\n+        payload: this,\n+      });\n+    }\n+  }\n+\n+  getBindings(){\n+    return cloneDeep(Object.values(this.bindings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NzI5OQ==", "bodyText": "this seems a little weird. Why is the toggle for excluding from health check happening for a datasource instance? We want to be able to exclude a single API call from the healthCheck, so this toggle needs to come from individual bindings, not for the entire instance of datasource", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r457547299", "createdAt": "2020-07-20T16:40:56Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -35,17 +35,20 @@ import 'rxjs/add/operator/debounceTime';\n import WindowManager, { WINDOW_ON_BLUR, WINDOW_ON_FOCUS } from 'services/WindowManager';\n import { objectQuery } from 'services/helpers';\n import ifvisible from 'ifvisible.js';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import cloneDeep from 'lodash/cloneDeep';\n \n const CDAP_API_VERSION = 'v3';\n // FIXME (CDAP-14836): Right now this is scattered across node and client. Need to consolidate this.\n const REQUEST_ORIGIN_ROUTER = 'ROUTER';\n \n export default class Datasource {\n-  constructor(genericResponseHandlers = [() => true]) {\n-    this.eventEmitter = ee(ee);\n+  constructor(genericResponseHandlers = [() => true],options) {\n+  this.eventEmitter = ee(ee);\n     let socketData = Socket.getObservable();\n     this.bindings = {};\n-\n+    this.excludeFromHealthCheck = options ? !!options.excludeFromHealthCheck : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4990f00996d1bfb555638780de4323b9eeda98ca"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTIyNjQy", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-452122642", "createdAt": "2020-07-21T04:45:38Z", "commit": {"oid": "f7a5d7c90c0da2ce881d5191da1cf22b171beb07"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTU4Mjg5", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-453558289", "createdAt": "2020-07-22T18:01:29Z", "commit": {"oid": "59c088554b808d23dfa599ea5a8032b937d277e3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowMToyOVrOG1uBYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowMzozMFrOG1uF6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MTczMQ==", "bodyText": "you can combine this with the forEach at line 85. You shouldn't need to create another map, you can simply check whether the binding is delayed there and set a boolean flag whether something is delayed or not.", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r458981731", "createdAt": "2020-07-22T18:01:29Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/SystemServicesDelay/index.tsx", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import { connect, Provider } from 'react-redux';\n+import SystemDelayStore from 'services/SystemDelayStore';\n+import SystemDelayActions from 'services/SystemDelayStore/SystemDelayActions';\n+import Snackbar from '@material-ui/core/Snackbar';\n+import Button from '@material-ui/core/Button';\n+import ee from 'event-emitter';\n+import { WINDOW_ON_FOCUS, WINDOW_ON_BLUR } from 'services/WindowManager';\n+import { getExperimentValue, isExperimentEnabled } from 'services/helpers';\n+import DataSource from 'services/datasource';\n+import flatten from 'lodash/flatten';\n+\n+interface IBindingsMap {\n+  [key: string]: number;\n+}\n+\n+interface ISystemDelayProps {\n+  showDelay: boolean;\n+  activeDataSources: DataSource[];\n+}\n+\n+interface ISystemDelayState {\n+  cleanChecksNeeded: number;\n+}\n+\n+const EXPERIMENT_ID = 'system-delay-notification';\n+const HEALTH_CHECK_INTERVAL = 12000;\n+const DEFAULT_DELAY_TIME = 5000;\n+const CLEAN_CHECK_COUNT = 3;\n+\n+class SystemServicesDelayView extends React.Component<ISystemDelayProps> {\n+  public state: ISystemDelayState = {\n+    cleanChecksNeeded: 0,\n+  };\n+  private healthCheckInterval: NodeJS.Timeout;\n+  private eventEmitter = ee(ee);\n+\n+  public componentDidMount() {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.checkForDelayedBindings();\n+    }\n+    this.startHealthCheck();\n+    this.eventEmitter.on(WINDOW_ON_FOCUS, () => {\n+      this.startHealthCheck();\n+    });\n+    this.eventEmitter.on(WINDOW_ON_BLUR, () => {\n+      this.stopHealthCheck();\n+    });\n+  }\n+\n+  public componentWillUnmount() {\n+    this.stopHealthCheck();\n+  }\n+\n+  private startHealthCheck = () => {\n+    if (isExperimentEnabled(EXPERIMENT_ID)) {\n+      this.healthCheckInterval = setInterval(this.checkForDelayedBindings, HEALTH_CHECK_INTERVAL);\n+    }\n+  };\n+\n+  private checkForDelayedBindings = () => {\n+    const delayedTimeFromExperiment = getExperimentValue(EXPERIMENT_ID);\n+    const SERVICES_DELAYED_TIME = delayedTimeFromExperiment\n+      ? parseInt(delayedTimeFromExperiment, 10) * 1000\n+      : DEFAULT_DELAY_TIME;\n+    const bindingsMap = {};\n+    this.props.activeDataSources.forEach((dataSource: DataSource) => {\n+      const bindings = dataSource.getBindingsForHealthCheck();\n+      Object.keys(bindings).forEach((id) => {\n+        bindingsMap[id] = bindings[id];\n+      });\n+    });\n+    const currentTime = Date.now();\n+    const isBindingDelayed = (id: string, bindingsMap: IBindingsMap) => {\n+      const bindingStartTime = bindingsMap[id];\n+      return bindingStartTime && currentTime - bindingStartTime > SERVICES_DELAYED_TIME;\n+    };\n+    const hasDelayedBinding = Object.keys(bindingsMap).some((id: string) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c088554b808d23dfa599ea5a8032b937d277e3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MjI0OQ==", "bodyText": "nit: indentation", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r458982249", "createdAt": "2020-07-22T18:02:24Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -115,16 +122,34 @@ export default class Datasource {\n     });\n     this.eventEmitter.on(WINDOW_ON_FOCUS, this.resumePoll.bind(this));\n     this.eventEmitter.on(WINDOW_ON_BLUR, this.pausePoll.bind(this));\n+      SystemDelayStore.dispatch({\n+        type: SystemDelayActions.registerDataSource,\n+        payload: this,\n+      });\n+  }\n+\n+  getBindingsForHealthCheck() {\n+    const bindingsWithTime={};\n+     Object.values(this.bindings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c088554b808d23dfa599ea5a8032b937d277e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MjI4Ng==", "bodyText": "nit: space", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r458982286", "createdAt": "2020-07-22T18:02:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -115,16 +122,34 @@ export default class Datasource {\n     });\n     this.eventEmitter.on(WINDOW_ON_FOCUS, this.resumePoll.bind(this));\n     this.eventEmitter.on(WINDOW_ON_BLUR, this.pausePoll.bind(this));\n+      SystemDelayStore.dispatch({\n+        type: SystemDelayActions.registerDataSource,\n+        payload: this,\n+      });\n+  }\n+\n+  getBindingsForHealthCheck() {\n+    const bindingsWithTime={};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c088554b808d23dfa599ea5a8032b937d277e3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4Mjg5MQ==", "bodyText": "you can filter this as you are computing whether a binding is delayed or not, don't need to pre filter it", "url": "https://github.com/cdapio/cdap/pull/12465#discussion_r458982891", "createdAt": "2020-07-22T18:03:30Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/services/datasource/index.js", "diffHunk": "@@ -115,16 +122,34 @@ export default class Datasource {\n     });\n     this.eventEmitter.on(WINDOW_ON_FOCUS, this.resumePoll.bind(this));\n     this.eventEmitter.on(WINDOW_ON_BLUR, this.pausePoll.bind(this));\n+      SystemDelayStore.dispatch({\n+        type: SystemDelayActions.registerDataSource,\n+        payload: this,\n+      });\n+  }\n+\n+  getBindingsForHealthCheck() {\n+    const bindingsWithTime={};\n+     Object.values(this.bindings)\n+        .filter(binding => !binding.excludeFromHealthCheck)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c088554b808d23dfa599ea5a8032b937d277e3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTY1NzA4", "url": "https://github.com/cdapio/cdap/pull/12465#pullrequestreview-457965708", "createdAt": "2020-07-29T23:28:24Z", "commit": {"oid": "940e197129a7dab8acab9b201ea395ad98190302"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "940e197129a7dab8acab9b201ea395ad98190302", "author": {"user": {"login": "itsanudeep", "name": "Anudeep Katragadda"}}, "url": "https://github.com/cdapio/cdap/commit/940e197129a7dab8acab9b201ea395ad98190302", "committedDate": "2020-07-23T16:34:14Z", "message": "fewer loops"}, "afterCommit": {"oid": "a4707191370b2d3ea5a9bfc62faa25057883b906", "author": {"user": {"login": "itsanudeep", "name": "Anudeep Katragadda"}}, "url": "https://github.com/cdapio/cdap/commit/a4707191370b2d3ea5a9bfc62faa25057883b906", "committedDate": "2020-07-30T00:07:59Z", "message": "system delay notification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aed08971e84183d380d02266ead43948480d5005", "author": {"user": {"login": "itsanudeep", "name": "Anudeep Katragadda"}}, "url": "https://github.com/cdapio/cdap/commit/aed08971e84183d380d02266ead43948480d5005", "committedDate": "2020-07-30T00:24:30Z", "message": "system delay notification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4707191370b2d3ea5a9bfc62faa25057883b906", "author": {"user": {"login": "itsanudeep", "name": "Anudeep Katragadda"}}, "url": "https://github.com/cdapio/cdap/commit/a4707191370b2d3ea5a9bfc62faa25057883b906", "committedDate": "2020-07-30T00:07:59Z", "message": "system delay notification"}, "afterCommit": {"oid": "aed08971e84183d380d02266ead43948480d5005", "author": {"user": {"login": "itsanudeep", "name": "Anudeep Katragadda"}}, "url": "https://github.com/cdapio/cdap/commit/aed08971e84183d380d02266ead43948480d5005", "committedDate": "2020-07-30T00:24:30Z", "message": "system delay notification"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1826, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}