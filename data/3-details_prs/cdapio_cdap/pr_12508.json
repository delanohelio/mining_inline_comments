{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDA3Mjcz", "number": 12508, "title": "[CDAP-17128] Add provisioning time metric", "bodyText": "", "createdAt": "2020-07-27T21:17:24Z", "url": "https://github.com/cdapio/cdap/pull/12508", "merged": true, "mergeCommit": {"oid": "2799531b78180e4afde13156eabdff5aba1ef597"}, "closed": true, "closedAt": "2020-07-30T01:59:05Z", "author": {"login": "rmstar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5IhB6gH2gAyNDU3NDA3MjczOjU2NTkxYjI5Yzk3MjJmMmUyMWVkZDZiMmIyMmM2MWJmNzY5M2NiNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc51tYRAFqTQ1ODAxOTE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43", "author": {"user": {"login": "rmstar", "name": "Prashant Jaikumar"}}, "url": "https://github.com/cdapio/cdap/commit/56591b29c9722f2e21edd6b2b22c61bf7693cb43", "committedDate": "2020-07-27T21:15:05Z", "message": "[CDAP-17128] Add provisioning time metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDQ3NzI3", "url": "https://github.com/cdapio/cdap/pull/12508#pullrequestreview-456447727", "createdAt": "2020-07-28T09:10:44Z", "commit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOToxMDo0NFrOG4Dyng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOToxMzoyOFrOG4D6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNTU1MA==", "bodyText": "The recordProgramProvisioned method call already returns the latest RunRecordMeta being recorded. You shouldn't need to read it again.", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461435550", "createdAt": "2020-07-28T09:10:44Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjU0NQ==", "bodyText": "In fact, the profileId, should already be in the systemArgs variable. You don't need the run record at all", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461436545", "createdAt": "2020-07-28T09:11:46Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNjgyMg==", "bodyText": "move this to a private function to have better separation of concern", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461436822", "createdAt": "2020-07-28T09:12:04Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments\n+            .getProfileIdFromArgs(programRunId.getNamespaceId(),\n+              runRecordMeta.getSystemArgs()).orElse(null);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to get run record\", e);\n+        }\n+\n+        if (profileId != null) {\n+          Map<String, String> args = programOptions.getArguments().asMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNzY0NA==", "bodyText": "Misalign. Line break in argument should be aligned to the beginning of the method call:\nmetricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n                                                provisioningTime);", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r461437644", "createdAt": "2020-07-28T09:13:28Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -536,6 +536,37 @@ private void writeToHeartBeatTable(@Nullable RunRecordDetail recordedRunRecord,\n         // Publish the program STARTING state before starting the program\n         programStateWriter.start(programRunId, newProgramOptions, null, programDescriptor);\n \n+        long provisioningTime = System.currentTimeMillis() / 1000 -\n+          RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+        // emit provisioning time metric\n+        ProfileId profileId = null;\n+        try {\n+          RunRecordDetail runRecordMeta = appMetadataStore.getRun(programRunId);\n+          profileId = SystemArguments\n+            .getProfileIdFromArgs(programRunId.getNamespaceId(),\n+              runRecordMeta.getSystemArgs()).orElse(null);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to get run record\", e);\n+        }\n+\n+        if (profileId != null) {\n+          Map<String, String> args = programOptions.getArguments().asMap();\n+          String provisioner = SystemArguments.getProfileProvisioner(args);\n+\n+          Map<String, String> tags = ImmutableMap.<String, String>builder()\n+            .put(Constants.Metrics.Tag.PROFILE_SCOPE, profileId.getScope().name())\n+            .put(Constants.Metrics.Tag.PROFILE, profileId.getProfile())\n+            .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n+            .put(Constants.Metrics.Tag.PROGRAM_TYPE, programRunId.getType().getPrettyName())\n+            .put(Constants.Metrics.Tag.APP, programRunId.getApplication())\n+            .put(Constants.Metrics.Tag.PROGRAM, programRunId.getProgram())\n+            .put(Constants.Metrics.Tag.PROVISIONER, provisioner)\n+            .put(Constants.Metrics.Tag.RUN_ID, programRunId.getRun())\n+            .build();\n+          metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_PROVISIONING_DELAY_SECONDS,\n+            provisioningTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56591b29c9722f2e21edd6b2b22c61bf7693cb43"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10af495686353b1ab4a76811e37bcd5d7109f87", "author": {"user": {"login": "rmstar", "name": "Prashant Jaikumar"}}, "url": "https://github.com/cdapio/cdap/commit/b10af495686353b1ab4a76811e37bcd5d7109f87", "committedDate": "2020-07-29T06:41:57Z", "message": "addressed reviewer comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTkzNDM5", "url": "https://github.com/cdapio/cdap/pull/12508#pullrequestreview-457993439", "createdAt": "2020-07-30T00:56:01Z", "commit": {"oid": "b10af495686353b1ab4a76811e37bcd5d7109f87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo1NjowMVrOG5PQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDo1NjowMVrOG5PQmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MjAyNQ==", "bodyText": "Is this only for unit test? If it is, define it in the test class", "url": "https://github.com/cdapio/cdap/pull/12508#discussion_r462672025", "createdAt": "2020-07-30T00:56:01Z", "author": {"login": "chtyim"}, "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -775,6 +776,7 @@\n       public static final String PROGRAM_KILLED_RUNS = \"program.killed.runs\";\n       public static final String PROGRAM_REJECTED_RUNS = \"program.rejected.runs\";\n       public static final String PROGRAM_NODE_MINUTES = \"program.node.minutes\";\n+      public static final String PROGRAM_PROVISIONING_DELAY_SECONDS = \"program.provisioning.delay.seconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10af495686353b1ab4a76811e37bcd5d7109f87"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDE5MTgw", "url": "https://github.com/cdapio/cdap/pull/12508#pullrequestreview-458019180", "createdAt": "2020-07-30T01:54:18Z", "commit": {"oid": "b10af495686353b1ab4a76811e37bcd5d7109f87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}