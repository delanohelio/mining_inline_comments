{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjQyNDQy", "number": 12304, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1Njo1NVrOEEyqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTo0MTo1OFrOEE58HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDU5ODQ4OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-streams/src/main/java/io/cdap/cdap/datastreams/DataStreamsSparkLauncher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1Njo1NVrOGiosZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMjoyMFrOGipN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTQ5NA==", "bodyText": "Seems unnecessary?", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438971494", "createdAt": "2020-06-11T17:56:55Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-streams/src/main/java/io/cdap/cdap/datastreams/DataStreamsSparkLauncher.java", "diffHunk": "@@ -98,6 +98,7 @@ public void initialize() throws Exception {\n \n     SparkConf sparkConf = new SparkConf();\n     sparkConf.set(\"spark.streaming.backpressure.enabled\", \"true\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDA3Mw==", "bodyText": "removed", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980073", "createdAt": "2020-06-11T18:12:20Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-streams/src/main/java/io/cdap/cdap/datastreams/DataStreamsSparkLauncher.java", "diffHunk": "@@ -98,6 +98,7 @@ public void initialize() throws Exception {\n \n     SparkConf sparkConf = new SparkConf();\n     sparkConf.set(\"spark.streaming.backpressure.enabled\", \"true\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTQ5NA=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDU5OTM4OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/batch/ETLSpark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1NzowNFrOGios9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMjoyN1rOGipOMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTYzNg==", "bodyText": "Unused import?", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438971636", "createdAt": "2020-06-11T17:57:04Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/batch/ETLSpark.java", "diffHunk": "@@ -39,6 +39,7 @@\n import io.cdap.cdap.etl.common.submit.Finisher;\n import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n import org.apache.spark.SparkConf;\n+import org.apache.spark.storage.StorageLevel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE0Ng==", "bodyText": "removed", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980146", "createdAt": "2020-06-11T18:12:27Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/batch/ETLSpark.java", "diffHunk": "@@ -39,6 +39,7 @@\n import io.cdap.cdap.etl.common.submit.Finisher;\n import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n import org.apache.spark.SparkConf;\n+import org.apache.spark.storage.StorageLevel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTYzNg=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwMjA0OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1Nzo0NFrOGioukA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMzoxMlrOGipPyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA0OA==", "bodyText": "Add this after all the Type constant. Make it easier for eyes", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972048", "createdAt": "2020-06-11T17:57:44Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -104,6 +112,8 @@\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/SchemaSerializer\");\n   private static final Type STRUCTURED_RECORD_SERIALIZER_TYPE =\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/StructuredRecordSerializer\");\n+  private static final String UNMODIFIABLE_SERIALIZERS_TYPE_FORMAT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDU1NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980555", "createdAt": "2020-06-11T18:13:12Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -104,6 +112,8 @@\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/SchemaSerializer\");\n   private static final Type STRUCTURED_RECORD_SERIALIZER_TYPE =\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/StructuredRecordSerializer\");\n+  private static final String UNMODIFIABLE_SERIALIZERS_TYPE_FORMAT =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA0OA=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwMzUzOnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1ODowN1rOGiovew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMzozMFrOGipQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjI4Mw==", "bodyText": "Unnecessary new line", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972283", "createdAt": "2020-06-11T17:58:07Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -351,11 +361,12 @@ void onMethodExit(String name, String desc, GeneratorAdapter generatorAdapter) {\n     // Map from getResource* methods to the method signature\n     // (can be null, since only method that has generic has signature)\n     final Map<Method, String> resourceMethods = new HashMap<>();\n-    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[]{Type.getType(String.class)});\n+    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[] { Type.getType(String.class) });\n     resourceMethods.put(method, null);\n \n     method = new Method(\"getResources\", Type.getType(Enumeration.class), new Type[] { Type.getType(String.class) });\n-    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() { },\n+    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() {\n+                                                              },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDY5Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980692", "createdAt": "2020-06-11T18:13:30Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -351,11 +361,12 @@ void onMethodExit(String name, String desc, GeneratorAdapter generatorAdapter) {\n     // Map from getResource* methods to the method signature\n     // (can be null, since only method that has generic has signature)\n     final Map<Method, String> resourceMethods = new HashMap<>();\n-    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[]{Type.getType(String.class)});\n+    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[] { Type.getType(String.class) });\n     resourceMethods.put(method, null);\n \n     method = new Method(\"getResources\", Type.getType(Enumeration.class), new Type[] { Type.getType(String.class) });\n-    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() { },\n+    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() {\n+                                                              },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjI4Mw=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwNTAxOnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1ODozNlrOGiowdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxNToyMFrOGipUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjUzMw==", "bodyText": "Pull this out as a private static class.", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972533", "createdAt": "2020-06-11T17:58:36Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -450,6 +461,24 @@ public void visitEnd() {\n    */\n   private byte[] rewriteKryo(InputStream byteCodeStream) throws IOException {\n     return rewriteConstructor(KRYO_TYPE, byteCodeStream, new ConstructorRewriter() {\n+      class UnmodifiableData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MTYzMg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438981632", "createdAt": "2020-06-11T18:15:20Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -450,6 +461,24 @@ public void visitEnd() {\n    */\n   private byte[] rewriteKryo(InputStream byteCodeStream) throws IOException {\n     return rewriteConstructor(KRYO_TYPE, byteCodeStream, new ConstructorRewriter() {\n+      class UnmodifiableData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjUzMw=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwODc4OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1OTo1NFrOGiozJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxNjo0MVrOGipW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzIyMg==", "bodyText": "Suggest to use LinkedHashMap to maintain order", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438973222", "createdAt": "2020-06-11T17:59:54Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();\n+        unmodifableTypesData.add(new UnmodifiableData(\"Collection\", Collection.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"List\", List.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Set\", Set.class, LinkedHashSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"SortedSet\", SortedSet.class, TreeSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Map\", Map.class, HashMap.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MjM4Nw==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438982387", "createdAt": "2020-06-11T18:16:41Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();\n+        unmodifableTypesData.add(new UnmodifiableData(\"Collection\", Collection.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"List\", List.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Set\", Set.class, LinkedHashSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"SortedSet\", SortedSet.class, TreeSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Map\", Map.class, HashMap.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzIyMg=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYxMDk2OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDozM1rOGio0nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxOTowOFrOGipb1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw==", "bodyText": "Unnecessary indentation.", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438973597", "createdAt": "2020-06-11T18:00:33Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -507,9 +565,9 @@ public MethodVisitor visitMethod(int access, final String name,\n           public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n             // See if in this constructor it is calling other constructor (this(..)).\n             calledThis = calledThis || (opcode == Opcodes.INVOKESPECIAL\n-              && Type.getObjectType(owner).equals(classType)\n-              && name.equals(\"<init>\")\n-              && Type.getReturnType(desc).equals(Type.VOID_TYPE));\n+                                        && Type.getObjectType(owner).equals(classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzU1OQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438983559", "createdAt": "2020-06-11T18:18:58Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -507,9 +565,9 @@ public MethodVisitor visitMethod(int access, final String name,\n           public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n             // See if in this constructor it is calling other constructor (this(..)).\n             calledThis = calledThis || (opcode == Opcodes.INVOKESPECIAL\n-              && Type.getObjectType(owner).equals(classType)\n-              && name.equals(\"<init>\")\n-              && Type.getReturnType(desc).equals(Type.VOID_TYPE));\n+                                        && Type.getObjectType(owner).equals(classType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzYzNg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438983636", "createdAt": "2020-06-11T18:19:08Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -507,9 +565,9 @@ public MethodVisitor visitMethod(int access, final String name,\n           public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n             // See if in this constructor it is calling other constructor (this(..)).\n             calledThis = calledThis || (opcode == Opcodes.INVOKESPECIAL\n-              && Type.getObjectType(owner).equals(classType)\n-              && name.equals(\"<init>\")\n-              && Type.getReturnType(desc).equals(Type.VOID_TYPE));\n+                                        && Type.getObjectType(owner).equals(classType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw=="}, "originalCommit": {"oid": "4436d764009ec37a459e3f75e774798f789fd237"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc4NTE3OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTozODoyOVrOGi0VBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1NTowNVrOGjLHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjExOQ==", "bodyText": "Move private class to the end of the file. Not to interrupt the code flow. Also, add a javadoc for the class.", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162119", "createdAt": "2020-06-12T01:38:29Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNTQ0MA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439535440", "createdAt": "2020-06-12T16:55:05Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjExOQ=="}, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc4NTU1OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTozODo0MVrOGi0VPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1NTozN1rOGjLIVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjE3Mg==", "bodyText": "final all fields", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162172", "createdAt": "2020-06-12T01:38:41Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {\n+    Class<?> unmodifiableClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNTcwMw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439535703", "createdAt": "2020-06-12T16:55:37Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {\n+    Class<?> unmodifiableClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjE3Mg=="}, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc5MDM3OnYy", "diffSide": "RIGHT", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTo0MTo1OFrOGi0YKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1NzozOVrOGjLMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjkyMw==", "bodyText": "Use Arrays.asList to make the code simpler\nList<UnmodifiableData> unmodiableTypes = Arrays.asList(\n  new UnmodifiableData(\"Collection\", Collection.class, LinkedList.class),\n  new UnmodifiableData(\"List\", List.class, LinkedList.class),\n  ...\n);", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162923", "createdAt": "2020-06-12T01:41:58Z", "author": {"login": "chtyim"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNjc0Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439536742", "createdAt": "2020-06-12T16:57:39Z", "author": {"login": "MEseifan"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjkyMw=="}, "originalCommit": {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3388, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}