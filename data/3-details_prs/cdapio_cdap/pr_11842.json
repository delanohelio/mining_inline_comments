{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjExNzAx", "number": 11842, "title": "[CDAP-16228][CDAP-16229] replicator table selector", "bodyText": "JIRAs:\n\nhttps://issues.cask.co/browse/CDAP-16228\nhttps://issues.cask.co/browse/CDAP-16229\n\nBuild: https://builds.cask.co/browse/CDAP-UDUT499", "createdAt": "2020-02-04T02:11:33Z", "url": "https://github.com/cdapio/cdap/pull/11842", "merged": true, "mergeCommit": {"oid": "ba975a7ce9661da2a7a286f1f0ba497a3747c69b"}, "closed": true, "closedAt": "2020-03-02T18:29:33Z", "author": {"login": "elfenheart"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAzXSygH2gAyMzcwNjExNzAxOjM3Zjg0N2EzY2NmMWZkNWUwNTc0MzY2YmVjNGRmYjdkMDQzNmYzZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJqfzWgFqTM2NzA2MDg1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "37f847a3ccf1fd5e0574366bec4dfb7d0436f3f6", "author": {"user": {"login": "elfenheart", "name": "Edwin Elia"}}, "url": "https://github.com/cdapio/cdap/commit/37f847a3ccf1fd5e0574366bec4dfb7d0436f3f6", "committedDate": "2020-02-03T20:56:41Z", "message": "[CDAP-16228] Replicator add list of tables selector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69872d2ab33201a33f88b89ac71b0a19690123b5", "author": {"user": {"login": "elfenheart", "name": "Edwin Elia"}}, "url": "https://github.com/cdapio/cdap/commit/69872d2ab33201a33f88b89ac71b0a19690123b5", "committedDate": "2020-02-04T02:09:22Z", "message": "add select columns"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjA0Mjk4", "url": "https://github.com/cdapio/cdap/pull/11842#pullrequestreview-365204298", "createdAt": "2020-02-26T20:05:41Z", "commit": {"oid": "69872d2ab33201a33f88b89ac71b0a19690123b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNTo0MlrOFu6XtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNTo0MlrOFu6XtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNTE1Ng==", "bodyText": "Does this mean that if they already have some columns selected, they can't select all?", "url": "https://github.com/cdapio/cdap/pull/11842#discussion_r384735156", "createdAt": "2020-02-26T20:05:42Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/Replicator/Create/Content/SelectColumns/index.tsx", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { createContextConnect } from 'components/Replicator/Create';\n+import { List, Map } from 'immutable';\n+import Button from '@material-ui/core/Button';\n+import CloseIcon from '@material-ui/icons/Close';\n+import IconButton from '@material-ui/core/IconButton';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { MyReplicatorApi } from 'api/replicator';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import { generateTableKey } from 'components/Replicator/Create/Content/SelectTables';\n+import LoadingSVG from 'components/LoadingSVG';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      position: 'absolute',\n+      top: '100px',\n+      right: 0,\n+      height: 'calc(100vh - 100px - 70px)',\n+      width: '750px',\n+      padding: '15px 30px',\n+      backgroundColor: theme.palette.white[50],\n+      border: `1px solid ${theme.palette.grey[200]}`,\n+      boxShadow: `0 3px 10px 1px ${theme.palette.grey[200]}`,\n+    },\n+    header: {\n+      display: 'grid',\n+      gridTemplateColumns: '75% 25%',\n+    },\n+    actionButtons: {\n+      textAlign: 'right',\n+      '& > button:not(:last-child)': {\n+        marginRight: '10px',\n+      },\n+    },\n+    gridWrapper: {\n+      maxHeight: 'calc(100% - 75px - 30px)',\n+      '& .grid.grid-container.grid-compact': {\n+        height: '100%',\n+\n+        '& .grid-row': {\n+          gridTemplateColumns: '55px 40px 1fr 200px 55px 100px',\n+          alignItems: 'center',\n+        },\n+\n+        '& > div[class^=\"grid-\"] .grid-row > div': {\n+          paddingTop: 0,\n+          paddingBottom: 0,\n+        },\n+      },\n+    },\n+    nullableCheckbox: {\n+      paddingLeft: 0,\n+    },\n+    loadingContainer: {\n+      textAlign: 'center',\n+      marginTop: '100px',\n+    },\n+  };\n+};\n+\n+interface ISelectColumnsProps extends WithStyles<typeof styles> {\n+  tableInfo?: {\n+    table: string;\n+    database: string;\n+  };\n+  onSave: (tableKey, columns) => void;\n+  initialSelected: List<Map<string, string>>;\n+  toggle: () => void;\n+  draftId: string;\n+}\n+\n+interface IColumn {\n+  name: string;\n+  type: string;\n+  nullable: boolean;\n+}\n+\n+interface ISelectColumnsState {\n+  columns: IColumn[];\n+  primaryKeys: string[];\n+  selectedColumns: Map<string, Map<string, string>>;\n+  loading: boolean;\n+  error: any;\n+}\n+\n+class SelectColumnsView extends React.PureComponent<ISelectColumnsProps, ISelectColumnsState> {\n+  public state = {\n+    columns: [],\n+    primaryKeys: [],\n+    selectedColumns: Map<string, Map<string, string>>(),\n+    loading: true,\n+    error: null,\n+  };\n+\n+  public componentDidMount() {\n+    this.fetchColumns();\n+  }\n+\n+  private fetchColumns = () => {\n+    this.setState({\n+      loading: true,\n+    });\n+\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+      draftId: this.props.draftId,\n+    };\n+\n+    const body = {\n+      table: this.props.tableInfo.table,\n+      database: this.props.tableInfo.database,\n+    };\n+\n+    MyReplicatorApi.getTableInfo(params, body).subscribe(\n+      (res) => {\n+        const selectedColumns = {};\n+        if (this.props.initialSelected && this.props.initialSelected.size > 0) {\n+          this.props.initialSelected.forEach((row) => {\n+            selectedColumns[row.get('name')] = row;\n+          });\n+        }\n+\n+        this.setState({\n+          columns: res.columns,\n+          primaryKeys: res.primaryKey,\n+          selectedColumns: Map(selectedColumns),\n+        });\n+      },\n+      (err) => {\n+        this.setState({ error: err });\n+      },\n+      () => {\n+        this.setState({\n+          loading: false,\n+        });\n+      }\n+    );\n+  };\n+\n+  private handleSave = () => {\n+    const selectedList = this.state.selectedColumns.toList();\n+    const tableKey = generateTableKey(this.props.tableInfo);\n+\n+    this.props.onSave(tableKey, selectedList);\n+    this.props.toggle();\n+  };\n+\n+  private toggleSelected = (row) => {\n+    const key = row.name;\n+    if (this.state.selectedColumns.get(key)) {\n+      this.setState({\n+        selectedColumns: this.state.selectedColumns.delete(key),\n+      });\n+      return;\n+    }\n+\n+    this.setState({\n+      selectedColumns: this.state.selectedColumns.set(key, Map({ name: row.name, type: row.type })),\n+    });\n+  };\n+\n+  private toggleSelectAll = () => {\n+    if (this.state.selectedColumns.size > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69872d2ab33201a33f88b89ac71b0a19690123b5"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDYwODUw", "url": "https://github.com/cdapio/cdap/pull/11842#pullrequestreview-367060850", "createdAt": "2020-03-02T09:42:09Z", "commit": {"oid": "69872d2ab33201a33f88b89ac71b0a19690123b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1223, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}