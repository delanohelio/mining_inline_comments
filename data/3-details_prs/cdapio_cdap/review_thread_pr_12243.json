{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjczNzI2", "number": 12243, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0Mzo0NVrOECAgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1ODowMFrOEGJbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQxMDAxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0Mzo0NVrOGeM0dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDo1MToyMVrOGfxwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDUwMw==", "bodyText": "Probably better to use the LoadingSVGIconCentered since it will be consistent with other parts of the UI.", "url": "https://github.com/cdapio/cdap/pull/12243#discussion_r434320503", "createdAt": "2020-06-03T05:43:45Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2018 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import CircularProgress from '@material-ui/core/CircularProgress';\n+import Drawer from '@material-ui/core/Drawer';\n+import List from '@material-ui/core/List';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import JsonEditorWidget from 'components/AbstractWidget/CodeEditorWidget/JsonEditorWidget';\n+import ConfigurationGroup from 'components/ConfigurationGroup';\n+import If from 'components/If';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import JsonActionButtons from 'components/PluginJSONCreator/Create/Content/JsonMenu/JsonActionButtons';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+export enum LiveViewMode {\n+  JSONView = 'JSON_VIEW',\n+  ConfigurationGroupsView = 'CONFIGURATION_GROUPS',\n+}\n+\n+const LIVE_VIEWER_WIDTH = '600px';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    liveViewer: {\n+      zIndex: theme.zIndex.drawer,\n+      width: LIVE_VIEWER_WIDTH,\n+    },\n+    liveViewerPaper: {\n+      width: LIVE_VIEWER_WIDTH,\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    toolbar: {\n+      minHeight: '48px',\n+    },\n+    mainMenu: {\n+      width: '100%',\n+      height: '100%',\n+      borderTop: `1px solid ${theme.palette.grey['500']}`,\n+      paddingTop: theme.Spacing(1),\n+      paddingBottom: theme.Spacing(1),\n+    },\n+    currentFilename: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      left: '25px',\n+      fontFamily: 'Courier New',\n+    },\n+    jsonFailStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.red[50],\n+      fontFamily: 'Courier New',\n+    },\n+    jsonSuccessStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.blue[50],\n+      fontFamily: 'Courier New',\n+    },\n+    liveViewLoadBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n+    liveViewLoad: {\n+      maxWidth: '50%',\n+    },\n+  };\n+};\n+\n+interface ILiveViewerProps extends WithStyles<typeof styles>, ICreateContext {\n+  JSONConfig: any;\n+  collapseLiveView: () => void;\n+  onDownloadClick: () => void;\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONFilename: string;\n+  JSONStatus: JSONStatusMessage;\n+  downloadDisabled: boolean;\n+  JSONErrorMessage: string;\n+}\n+\n+const LiveViewerView: React.FC<ILiveViewerProps> = ({\n+  classes,\n+  JSONConfig,\n+  collapseLiveView,\n+  onDownloadClick,\n+  populateImportResults,\n+  JSONFilename,\n+  JSONStatus,\n+  downloadDisabled,\n+  JSONErrorMessage,\n+}) => {\n+  const [liveViewMode, setLiveViewMode] = React.useState(LiveViewMode.ConfigurationGroupsView);\n+\n+  // Values needed for Configuration Groups live view\n+  const [pluginProperties, setPluginProperties] = React.useState(null);\n+  const [values, setValues] = React.useState<Record<string, string>>({});\n+\n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When JSON config changes, show loading view for 500ms\n+  // This is in order to force rerender ConfigurationGroup component\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);\n+\n+    // for rerendering ConfigurationGroup\n+    const newPluginProperties = getNewPluginProperties(JSONConfig);\n+    setPluginProperties(newPluginProperties);\n+\n+    const timer = setTimeout(() => {\n+      setLoading(false);\n+    }, 500);\n+\n+    return () => {\n+      clearTimeout(timer);\n+    };\n+  }, [JSONConfig]);\n+\n+  function getNewPluginProperties(config) {\n+    if (!config['configuration-groups']) {\n+      return;\n+    }\n+    const newPluginProperties = {};\n+    config['configuration-groups'].forEach((group) => {\n+      return group.properties.forEach((widget) => {\n+        const widgetName = widget.name;\n+        newPluginProperties[widgetName] = { name: widgetName };\n+      });\n+    });\n+    return newPluginProperties;\n+  }\n+\n+  return (\n+    <div>\n+      <Drawer\n+        open={true}\n+        variant=\"persistent\"\n+        className={classes.liveViewer}\n+        anchor=\"right\"\n+        disableEnforceFocus={true}\n+        ModalProps={{\n+          keepMounted: true,\n+        }}\n+        classes={{\n+          paper: classes.liveViewerPaper,\n+        }}\n+        data-cy=\"navbar-drawer\"\n+      >\n+        <div className={classes.toolbar} />\n+        <JsonActionButtons\n+          populateImportResults={populateImportResults}\n+          JSONStatus={JSONStatus}\n+          downloadDisabled={downloadDisabled}\n+          onDownloadClick={onDownloadClick}\n+          JSONFilename={JSONFilename}\n+          JSONErrorMessage={JSONErrorMessage}\n+          liveViewMode={liveViewMode}\n+          setLiveViewMode={setLiveViewMode}\n+          collapseLiveView={collapseLiveView}\n+        />\n+        <List component=\"nav\" dense={true} className={classes.mainMenu}>\n+          <If condition={liveViewMode === LiveViewMode.JSONView}>\n+            <JsonEditorWidget rows={50} value={JSON.stringify(JSONConfig, undefined, 4)} />\n+          </If>\n+          <If condition={liveViewMode === LiveViewMode.ConfigurationGroupsView}>\n+            <If condition={loading}>\n+              <div className={classes.liveViewLoadBox}>\n+                <CircularProgress className={classes.liveViewLoad} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441dd90a50b18c13afedd88ded8b9016e19320c6"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NDIzNQ==", "bodyText": "Resolved.", "url": "https://github.com/cdapio/cdap/pull/12243#discussion_r435974235", "createdAt": "2020-06-05T14:51:21Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2018 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import CircularProgress from '@material-ui/core/CircularProgress';\n+import Drawer from '@material-ui/core/Drawer';\n+import List from '@material-ui/core/List';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import JsonEditorWidget from 'components/AbstractWidget/CodeEditorWidget/JsonEditorWidget';\n+import ConfigurationGroup from 'components/ConfigurationGroup';\n+import If from 'components/If';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import JsonActionButtons from 'components/PluginJSONCreator/Create/Content/JsonMenu/JsonActionButtons';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+export enum LiveViewMode {\n+  JSONView = 'JSON_VIEW',\n+  ConfigurationGroupsView = 'CONFIGURATION_GROUPS',\n+}\n+\n+const LIVE_VIEWER_WIDTH = '600px';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    liveViewer: {\n+      zIndex: theme.zIndex.drawer,\n+      width: LIVE_VIEWER_WIDTH,\n+    },\n+    liveViewerPaper: {\n+      width: LIVE_VIEWER_WIDTH,\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    toolbar: {\n+      minHeight: '48px',\n+    },\n+    mainMenu: {\n+      width: '100%',\n+      height: '100%',\n+      borderTop: `1px solid ${theme.palette.grey['500']}`,\n+      paddingTop: theme.Spacing(1),\n+      paddingBottom: theme.Spacing(1),\n+    },\n+    currentFilename: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      left: '25px',\n+      fontFamily: 'Courier New',\n+    },\n+    jsonFailStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.red[50],\n+      fontFamily: 'Courier New',\n+    },\n+    jsonSuccessStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.blue[50],\n+      fontFamily: 'Courier New',\n+    },\n+    liveViewLoadBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n+    liveViewLoad: {\n+      maxWidth: '50%',\n+    },\n+  };\n+};\n+\n+interface ILiveViewerProps extends WithStyles<typeof styles>, ICreateContext {\n+  JSONConfig: any;\n+  collapseLiveView: () => void;\n+  onDownloadClick: () => void;\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONFilename: string;\n+  JSONStatus: JSONStatusMessage;\n+  downloadDisabled: boolean;\n+  JSONErrorMessage: string;\n+}\n+\n+const LiveViewerView: React.FC<ILiveViewerProps> = ({\n+  classes,\n+  JSONConfig,\n+  collapseLiveView,\n+  onDownloadClick,\n+  populateImportResults,\n+  JSONFilename,\n+  JSONStatus,\n+  downloadDisabled,\n+  JSONErrorMessage,\n+}) => {\n+  const [liveViewMode, setLiveViewMode] = React.useState(LiveViewMode.ConfigurationGroupsView);\n+\n+  // Values needed for Configuration Groups live view\n+  const [pluginProperties, setPluginProperties] = React.useState(null);\n+  const [values, setValues] = React.useState<Record<string, string>>({});\n+\n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When JSON config changes, show loading view for 500ms\n+  // This is in order to force rerender ConfigurationGroup component\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);\n+\n+    // for rerendering ConfigurationGroup\n+    const newPluginProperties = getNewPluginProperties(JSONConfig);\n+    setPluginProperties(newPluginProperties);\n+\n+    const timer = setTimeout(() => {\n+      setLoading(false);\n+    }, 500);\n+\n+    return () => {\n+      clearTimeout(timer);\n+    };\n+  }, [JSONConfig]);\n+\n+  function getNewPluginProperties(config) {\n+    if (!config['configuration-groups']) {\n+      return;\n+    }\n+    const newPluginProperties = {};\n+    config['configuration-groups'].forEach((group) => {\n+      return group.properties.forEach((widget) => {\n+        const widgetName = widget.name;\n+        newPluginProperties[widgetName] = { name: widgetName };\n+      });\n+    });\n+    return newPluginProperties;\n+  }\n+\n+  return (\n+    <div>\n+      <Drawer\n+        open={true}\n+        variant=\"persistent\"\n+        className={classes.liveViewer}\n+        anchor=\"right\"\n+        disableEnforceFocus={true}\n+        ModalProps={{\n+          keepMounted: true,\n+        }}\n+        classes={{\n+          paper: classes.liveViewerPaper,\n+        }}\n+        data-cy=\"navbar-drawer\"\n+      >\n+        <div className={classes.toolbar} />\n+        <JsonActionButtons\n+          populateImportResults={populateImportResults}\n+          JSONStatus={JSONStatus}\n+          downloadDisabled={downloadDisabled}\n+          onDownloadClick={onDownloadClick}\n+          JSONFilename={JSONFilename}\n+          JSONErrorMessage={JSONErrorMessage}\n+          liveViewMode={liveViewMode}\n+          setLiveViewMode={setLiveViewMode}\n+          collapseLiveView={collapseLiveView}\n+        />\n+        <List component=\"nav\" dense={true} className={classes.mainMenu}>\n+          <If condition={liveViewMode === LiveViewMode.JSONView}>\n+            <JsonEditorWidget rows={50} value={JSON.stringify(JSONConfig, undefined, 4)} />\n+          </If>\n+          <If condition={liveViewMode === LiveViewMode.ConfigurationGroupsView}>\n+            <If condition={loading}>\n+              <div className={classes.liveViewLoadBox}>\n+                <CircularProgress className={classes.liveViewLoad} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDUwMw=="}, "originalCommit": {"oid": "441dd90a50b18c13afedd88ded8b9016e19320c6"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODgxNDc3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/index.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1ODowMFrOGkxDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1ODowMFrOGkxDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNTYzOQ==", "bodyText": "debounce is added at refactor PR #12310 https://github.com/cdapio/cdap/blob/882eb810d3291ed6b39efaf6394a932584abb867/cdap-ui/app/cdap/components/PluginJSONCreator/Create/PluginJSONMenu/LiveViewMenu/LiveConfigurationGroup/index.tsx", "url": "https://github.com/cdapio/cdap/pull/12243#discussion_r441205639", "createdAt": "2020-06-16T23:58:00Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/LiveViewer/index.tsx", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Drawer from '@material-ui/core/Drawer';\n+import List from '@material-ui/core/List';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import ConfigurationGroup from 'components/ConfigurationGroup';\n+import If from 'components/If';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import JsonActionButtons from 'components/PluginJSONCreator/Create/Content/JsonMenu/JsonActionButtons';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+export enum LiveViewMode {\n+  JSONView = 'JSON_VIEW',\n+  ConfigurationGroupsView = 'CONFIGURATION_GROUPS',\n+}\n+\n+const LIVE_VIEWER_WIDTH = '600px';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    liveViewer: {\n+      zIndex: theme.zIndex.drawer,\n+      width: LIVE_VIEWER_WIDTH,\n+    },\n+    liveViewerPaper: {\n+      width: LIVE_VIEWER_WIDTH,\n+      backgroundColor: theme.palette.white[50],\n+    },\n+    toolbar: {\n+      minHeight: '48px',\n+    },\n+    mainMenu: {\n+      width: '100%',\n+      height: '100%',\n+      borderTop: `1px solid ${theme.palette.grey['500']}`,\n+      paddingTop: theme.Spacing(1),\n+      paddingBottom: theme.Spacing(1),\n+    },\n+    jsonFailStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.red[50],\n+      fontFamily: 'Courier New',\n+    },\n+    jsonSuccessStatus: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      color: theme.palette.blue[50],\n+      fontFamily: 'Courier New',\n+    },\n+    liveViewLoadBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n+    jsonLiveCode: {\n+      padding: '14px',\n+    },\n+  };\n+};\n+\n+interface ILiveViewerProps extends WithStyles<typeof styles>, ICreateContext {\n+  JSONConfig: any;\n+  collapseLiveView: () => void;\n+  onDownloadClick: () => void;\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONFilename: string;\n+  JSONStatus: JSONStatusMessage;\n+  downloadDisabled: boolean;\n+  JSONErrorMessage: string;\n+}\n+\n+const LiveViewerView: React.FC<ILiveViewerProps> = ({\n+  classes,\n+  JSONConfig,\n+  collapseLiveView,\n+  onDownloadClick,\n+  populateImportResults,\n+  JSONFilename,\n+  JSONStatus,\n+  downloadDisabled,\n+  JSONErrorMessage,\n+}) => {\n+  const [liveViewMode, setLiveViewMode] = React.useState(LiveViewMode.ConfigurationGroupsView);\n+\n+  // Values needed for Configuration Groups live view\n+  const [pluginProperties, setPluginProperties] = React.useState(null);\n+  const [values, setValues] = React.useState<Record<string, string>>({});\n+\n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When JSON config changes, show loading view for 500ms\n+  // This is in order to force rerender ConfigurationGroup component\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);\n+\n+    // for rerendering ConfigurationGroup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3717fac7a999a63a1de5d7160da02c5453603ad"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3348, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}