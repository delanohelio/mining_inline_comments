{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA4MjE1", "number": 12108, "title": "[CDAP-16649] Support authentication and TLS to Elastic metadata storage", "bodyText": "Adds following support for Elastic metadata storage:\n\nConnect to Elastic over TLS\n\nThis is done by allowing the metadata.elasticsearch.cluster.hosts config to contain a scheme (http or https). If no scheme is specified, it defaults to http (the legacy behavior)\n\nAllow TLS verification to be disabled\n\nAdds the metadata.elasticsearch.tls.verify config, allowing TLS to be used without the certificate being verified. Useful in development/testing scenarios when self signed certificates are in use.\n\nAllow configuration of username/password for Elastic in cdap-security.xml\n\nAdds metadata.elasticsearch.credentials.username and metadata.elasticsearch.credentials.password in the cdap-security.xml file. Allows for HTTP basic authentication to Elastic cluster (with or without TLS).", "createdAt": "2020-04-22T19:52:51Z", "url": "https://github.com/cdapio/cdap/pull/12108", "merged": true, "mergeCommit": {"oid": "21e5d36b57987554376db98e74aa703ef700d3fb"}, "closed": true, "closedAt": "2020-06-08T21:21:01Z", "author": {"login": "ioben"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaaKSggFqTM5ODk1NTU0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgo1_ZABqjMzMjg4NDY1Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTU1NTQz", "url": "https://github.com/cdapio/cdap/pull/12108#pullrequestreview-398955543", "createdAt": "2020-04-23T10:12:32Z", "commit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjozM1rOGKhp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNTozMVrOGKhxTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDMzMw==", "bodyText": "Include the original exception cause.", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690333", "createdAt": "2020-04-23T10:12:33Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDQ1Mg==", "bodyText": "misalignment", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690452", "createdAt": "2020-04-23T10:12:44Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTI5MQ==", "bodyText": "Log as debug level", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691291", "createdAt": "2020-04-23T10:14:00Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTQyOA==", "bodyText": "No need to have this. when using field.", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691428", "createdAt": "2020-04-23T10:14:17Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MjIzOQ==", "bodyText": "Misalignment. We align the code as:\ncredentialsProvider.setCredentials(AuthScope.ANY,\n                                   new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));\nor\n```java\ncredentialsProvider.setCredentials(\n  AuthScope.ANY, new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413692239", "createdAt": "2020-04-23T10:15:31Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);\n+          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+          credentialsProvider.setCredentials(AuthScope.ANY,\n+              new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 103}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/5adf6a91c4545c79b47f49feede024d4b859d8e1", "committedDate": "2020-04-22T19:46:07Z", "message": "Add basic authentication for elastic metadata storage"}, "afterCommit": {"oid": "21f3a9f157b744385a4894b87ddb229f2ee605df", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/21f3a9f157b744385a4894b87ddb229f2ee605df", "committedDate": "2020-04-23T16:53:04Z", "message": "Add basic authentication for elastic metadata storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzA4MjA2", "url": "https://github.com/cdapio/cdap/pull/12108#pullrequestreview-399308206", "createdAt": "2020-04-23T17:12:13Z", "commit": {"oid": "21f3a9f157b744385a4894b87ddb229f2ee605df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTk0NTky", "url": "https://github.com/cdapio/cdap/pull/12108#pullrequestreview-399594592", "createdAt": "2020-04-24T02:12:11Z", "commit": {"oid": "21f3a9f157b744385a4894b87ddb229f2ee605df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885822a5640468aa378034ce2d24d55b754aa6af", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/885822a5640468aa378034ce2d24d55b754aa6af", "committedDate": "2020-05-12T18:46:32Z", "message": "Support connecting to Elastic metadata over TLS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d1a4112f8fffcc71b959a0e5e9c48a94b16b4a7", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/4d1a4112f8fffcc71b959a0e5e9c48a94b16b4a7", "committedDate": "2020-05-12T18:46:32Z", "message": "Allow disabling of TLS verification for elastic metadata storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "committedDate": "2020-05-12T18:46:32Z", "message": "Add basic authentication for elastic metadata storage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21f3a9f157b744385a4894b87ddb229f2ee605df", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/21f3a9f157b744385a4894b87ddb229f2ee605df", "committedDate": "2020-04-23T16:53:04Z", "message": "Add basic authentication for elastic metadata storage"}, "afterCommit": {"oid": "9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "author": {"user": {"login": "ioben", "name": "Ben"}}, "url": "https://github.com/cdapio/cdap/commit/9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "committedDate": "2020-05-12T18:46:32Z", "message": "Add basic authentication for elastic metadata storage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2181, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}