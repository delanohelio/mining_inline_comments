{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTkxNTk4", "number": 12217, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowNzoyNlrOECAG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxOToyNFrOECAPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM0Mzk1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowNzoyNlrOGeMMZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNzowNVrOGftvTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDI0Nw==", "bodyText": "These two imports can be combined.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434310247", "createdAt": "2020-06-03T05:07:26Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwODQyOQ==", "bodyText": "Resolved", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435908429", "createdAt": "2020-06-05T13:07:05Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDI0Nw=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM0ODQ1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowOTo1M1rOGeMO_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowOToyNlrOGftz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDkxMQ==", "bodyText": "Can we break this if..else condition blocks to single level? Too many levels makes it hard to read and grasp the logic right away.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434310911", "createdAt": "2020-06-03T05:09:53Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;\n+    }\n+  });\n+  return allTypes;\n+};\n+\n+const AttributeMultipleValuesInputView = ({\n+  classes,\n+  supportedTypes,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const cleanSupportedTypes = Array.from(processSupportedTypes(supportedTypes).values());\n+  const [selectedType, setSelectedType] = React.useState(null);\n+  const [currentInput, setCurrentInput] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    const initialType = getInitialType();\n+    setSelectedType(initialType);\n+    setCurrentInput(getUpdatedCurrentInput(initialType));\n+  }, []);\n+\n+  function getInitialType() {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    let newType;\n+    if (!widgetAttributes || widgetAttributes.length === 0) {\n+      newType = cleanSupportedTypes[0];\n+    } else if (widgetAttributes[0].value) {\n+      newType = SupportedType.ValueLabelPair;\n+    } else if (widgetAttributes[0].id) {\n+      newType = SupportedType.IDLabelPair;\n+    } else {\n+      newType = SupportedType.String;\n+    }\n+    return newType;\n+  }\n+\n+  function getUpdatedCurrentInput(newType) {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    if (!newType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwOTU5OQ==", "bodyText": "I broke them down to functions and added some comments.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435909599", "createdAt": "2020-06-05T13:09:26Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;\n+    }\n+  });\n+  return allTypes;\n+};\n+\n+const AttributeMultipleValuesInputView = ({\n+  classes,\n+  supportedTypes,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const cleanSupportedTypes = Array.from(processSupportedTypes(supportedTypes).values());\n+  const [selectedType, setSelectedType] = React.useState(null);\n+  const [currentInput, setCurrentInput] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    const initialType = getInitialType();\n+    setSelectedType(initialType);\n+    setCurrentInput(getUpdatedCurrentInput(initialType));\n+  }, []);\n+\n+  function getInitialType() {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    let newType;\n+    if (!widgetAttributes || widgetAttributes.length === 0) {\n+      newType = cleanSupportedTypes[0];\n+    } else if (widgetAttributes[0].value) {\n+      newType = SupportedType.ValueLabelPair;\n+    } else if (widgetAttributes[0].id) {\n+      newType = SupportedType.IDLabelPair;\n+    } else {\n+      newType = SupportedType.String;\n+    }\n+    return newType;\n+  }\n+\n+  function getUpdatedCurrentInput(newType) {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    if (!newType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDkxMQ=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1MTQwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxMTozNFrOGeMQvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMDo1NVrOGft3AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTM1OA==", "bodyText": "I am not sure what this type is intended for? Can you add some comments about it. I am trying to understand how this is related to multiple-values input and what Value-Label pair and ID-Label pair mean here.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434311358", "createdAt": "2020-06-03T05:11:34Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDQwMA==", "bodyText": "I have added comments at the top of this file. I hope that this is helpful.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435910400", "createdAt": "2020-06-05T13:10:55Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTM1OA=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1Mjk5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxMjozMlrOGeMRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMzo0NFrOGft8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTU5OA==", "bodyText": "Can this be a switch?", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434311598", "createdAt": "2020-06-03T05:12:32Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;\n+    }\n+  });\n+  return allTypes;\n+};\n+\n+const AttributeMultipleValuesInputView = ({\n+  classes,\n+  supportedTypes,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const cleanSupportedTypes = Array.from(processSupportedTypes(supportedTypes).values());\n+  const [selectedType, setSelectedType] = React.useState(null);\n+  const [currentInput, setCurrentInput] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    const initialType = getInitialType();\n+    setSelectedType(initialType);\n+    setCurrentInput(getUpdatedCurrentInput(initialType));\n+  }, []);\n+\n+  function getInitialType() {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    let newType;\n+    if (!widgetAttributes || widgetAttributes.length === 0) {\n+      newType = cleanSupportedTypes[0];\n+    } else if (widgetAttributes[0].value) {\n+      newType = SupportedType.ValueLabelPair;\n+    } else if (widgetAttributes[0].id) {\n+      newType = SupportedType.IDLabelPair;\n+    } else {\n+      newType = SupportedType.String;\n+    }\n+    return newType;\n+  }\n+\n+  function getUpdatedCurrentInput(newType) {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    if (!newType) {\n+      return '';\n+    } else if (newType === SupportedType.Number || newType === SupportedType.String) {\n+      return widgetAttributes ? widgetAttributes.join(COMMON_DELIMITER) : '';\n+    } else {\n+      if (widgetAttributes && widgetAttributes.length > 0) {\n+        return {\n+          pairs: widgetAttributes.map((keyvalue) => {\n+            if (keyvalue.id) {\n+              return {\n+                key: keyvalue.id,\n+                value: keyvalue.label,\n+              };\n+            } else {\n+              return {\n+                key: keyvalue.value,\n+                value: keyvalue.label,\n+              };\n+            }\n+          }),\n+        };\n+      } else {\n+        return { pairs: [{ key: '', value: '' }] };\n+      }\n+    }\n+  }\n+\n+  const switchInputType = (newType) => {\n+    setSelectedType(newType);\n+    setCurrentInput(getUpdatedCurrentInput(newType));\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: [] },\n+    }));\n+  };\n+\n+  const onAttributeChange = (newVal) => {\n+    setCurrentInput(newVal);\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal.split(COMMON_DELIMITER) },\n+    }));\n+  };\n+\n+  const onKeyValueAttributeChange = (keyvalue, type: SupportedType) => {\n+    if (type === SupportedType.ValueLabelPair) {\n+      const keyvaluePairs = keyvalue.pairs.map((pair) => {\n+        return { value: pair.key, label: pair.value };\n+      });\n+      setWidgetToAttributes((prevObjs) => ({\n+        ...prevObjs,\n+        [widgetID]: { ...prevObjs[widgetID], [field]: keyvaluePairs },\n+      }));\n+    } else {\n+      const keyvaluePairs = keyvalue.pairs.map((pair) => {\n+        return { id: pair.key, label: pair.value };\n+      });\n+      setWidgetToAttributes((prevObjs) => ({\n+        ...prevObjs,\n+        [widgetID]: { ...prevObjs[widgetID], [field]: keyvaluePairs },\n+      }));\n+    }\n+  };\n+\n+  const renderAttributeMultipleValuesInput = () => {\n+    if (selectedType === SupportedType.ValueLabelPair) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMTg4NQ==", "bodyText": "resolved", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435911885", "createdAt": "2020-06-05T13:13:44Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { withStyles } from '@material-ui/core';\n+import { StyleRules } from '@material-ui/core/styles';\n+import If from 'components/If';\n+import KeyValuePairs from 'components/KeyValuePairs';\n+import { COMMON_DELIMITER } from 'components/PluginJSONCreator/constants';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import * as React from 'react';\n+\n+export enum SupportedType {\n+  String = 'string',\n+  Number = 'number',\n+  ValueLabelPair = 'Value-Label pair',\n+  IDLabelPair = 'ID-Label pair',\n+}\n+\n+const styles = (): StyleRules => {\n+  return {\n+    typeSelectInput: {\n+      marginTop: '5px',\n+      marginBottom: '5px',\n+      width: '20%',\n+    },\n+  };\n+};\n+\n+export const processSupportedTypes = (types: string[]) => {\n+  const allTypes = new Set();\n+  types.forEach((type) => {\n+    switch (type) {\n+      case 'string[]':\n+        allTypes.add(SupportedType.String);\n+        break;\n+      case 'number[]':\n+        allTypes.add(SupportedType.Number);\n+        break;\n+      case 'IOption[]':\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      case 'IDropdownOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.Number);\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'ISelectOptions[]':\n+        allTypes.add(SupportedType.ValueLabelPair);\n+        break;\n+      case 'FilterOption[]':\n+        allTypes.add(SupportedType.String);\n+        allTypes.add(SupportedType.IDLabelPair);\n+        break;\n+      default:\n+        break;\n+    }\n+  });\n+  return allTypes;\n+};\n+\n+const AttributeMultipleValuesInputView = ({\n+  classes,\n+  supportedTypes,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  field,\n+}) => {\n+  const cleanSupportedTypes = Array.from(processSupportedTypes(supportedTypes).values());\n+  const [selectedType, setSelectedType] = React.useState(null);\n+  const [currentInput, setCurrentInput] = React.useState(null);\n+\n+  React.useEffect(() => {\n+    const initialType = getInitialType();\n+    setSelectedType(initialType);\n+    setCurrentInput(getUpdatedCurrentInput(initialType));\n+  }, []);\n+\n+  function getInitialType() {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    let newType;\n+    if (!widgetAttributes || widgetAttributes.length === 0) {\n+      newType = cleanSupportedTypes[0];\n+    } else if (widgetAttributes[0].value) {\n+      newType = SupportedType.ValueLabelPair;\n+    } else if (widgetAttributes[0].id) {\n+      newType = SupportedType.IDLabelPair;\n+    } else {\n+      newType = SupportedType.String;\n+    }\n+    return newType;\n+  }\n+\n+  function getUpdatedCurrentInput(newType) {\n+    const widgetAttributes = widgetToAttributes[widgetID][field];\n+    if (!newType) {\n+      return '';\n+    } else if (newType === SupportedType.Number || newType === SupportedType.String) {\n+      return widgetAttributes ? widgetAttributes.join(COMMON_DELIMITER) : '';\n+    } else {\n+      if (widgetAttributes && widgetAttributes.length > 0) {\n+        return {\n+          pairs: widgetAttributes.map((keyvalue) => {\n+            if (keyvalue.id) {\n+              return {\n+                key: keyvalue.id,\n+                value: keyvalue.label,\n+              };\n+            } else {\n+              return {\n+                key: keyvalue.value,\n+                value: keyvalue.label,\n+              };\n+            }\n+          }),\n+        };\n+      } else {\n+        return { pairs: [{ key: '', value: '' }] };\n+      }\n+    }\n+  }\n+\n+  const switchInputType = (newType) => {\n+    setSelectedType(newType);\n+    setCurrentInput(getUpdatedCurrentInput(newType));\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: [] },\n+    }));\n+  };\n+\n+  const onAttributeChange = (newVal) => {\n+    setCurrentInput(newVal);\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal.split(COMMON_DELIMITER) },\n+    }));\n+  };\n+\n+  const onKeyValueAttributeChange = (keyvalue, type: SupportedType) => {\n+    if (type === SupportedType.ValueLabelPair) {\n+      const keyvaluePairs = keyvalue.pairs.map((pair) => {\n+        return { value: pair.key, label: pair.value };\n+      });\n+      setWidgetToAttributes((prevObjs) => ({\n+        ...prevObjs,\n+        [widgetID]: { ...prevObjs[widgetID], [field]: keyvaluePairs },\n+      }));\n+    } else {\n+      const keyvaluePairs = keyvalue.pairs.map((pair) => {\n+        return { id: pair.key, label: pair.value };\n+      });\n+      setWidgetToAttributes((prevObjs) => ({\n+        ...prevObjs,\n+        [widgetID]: { ...prevObjs[widgetID], [field]: keyvaluePairs },\n+      }));\n+    }\n+  };\n+\n+  const renderAttributeMultipleValuesInput = () => {\n+    if (selectedType === SupportedType.ValueLabelPair) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTU5OA=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1Nzk5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNToxM1rOGeMUrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMzo1M1rOGft9HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjM2NQ==", "bodyText": "Can we inverse the logic and have the switch outside of the if...else condition block?\nif (isMultipleInput) {\n  return (\n    <AttributeMultipleValuesInput\n      supportedTypes={supportedTypes}\n      widgetToAttributes={widgetToAttributes}\n      setWidgetToAttributes={setWidgetToAttributes}\n      widgetID={widgetID}\n      field={field}\n    />\n  );\n}\n\nswitch (fieldInfo.type) {\n  ...\n}", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434312365", "createdAt": "2020-06-03T05:15:13Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import AttributeKeyValueInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput';\n+import AttributeMultipleValuesInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput';\n+import * as React from 'react';\n+\n+const WidgetAttributeInput = ({\n+  field,\n+  fieldInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  widgetType,\n+}) => {\n+  const onAttributeChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal },\n+    }));\n+  };\n+\n+  const renderAttributeInput = () => {\n+    if (!fieldInfo) {\n+      return;\n+    }\n+    const codeEditors = [\n+      'javascript-editor',\n+      'json-editor',\n+      'python-editor',\n+      'scala-editor',\n+      'sql-editor',\n+    ];\n+    if (field === 'default' && codeEditors.includes(widgetType)) {\n+      return (\n+        <WidgetWrapper\n+          widgetProperty={{\n+            field,\n+            name: field,\n+            'widget-type': widgetType,\n+            'widget-attributes': {},\n+          }}\n+          pluginProperty={{\n+            required: fieldInfo.required,\n+            name: 'code-editor',\n+          }}\n+          value={widgetToAttributes[widgetID][field]}\n+          onChange={onAttributeChange}\n+        />\n+      );\n+    }\n+\n+    const isMultipleInput = fieldInfo.type.includes('[]');\n+    const supportedTypes = fieldInfo.type.split('|');\n+    if (!isMultipleInput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMTk2NQ==", "bodyText": "Resolved", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435911965", "createdAt": "2020-06-05T13:13:53Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import AttributeKeyValueInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput';\n+import AttributeMultipleValuesInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput';\n+import * as React from 'react';\n+\n+const WidgetAttributeInput = ({\n+  field,\n+  fieldInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  widgetType,\n+}) => {\n+  const onAttributeChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal },\n+    }));\n+  };\n+\n+  const renderAttributeInput = () => {\n+    if (!fieldInfo) {\n+      return;\n+    }\n+    const codeEditors = [\n+      'javascript-editor',\n+      'json-editor',\n+      'python-editor',\n+      'scala-editor',\n+      'sql-editor',\n+    ];\n+    if (field === 'default' && codeEditors.includes(widgetType)) {\n+      return (\n+        <WidgetWrapper\n+          widgetProperty={{\n+            field,\n+            name: field,\n+            'widget-type': widgetType,\n+            'widget-attributes': {},\n+          }}\n+          pluginProperty={{\n+            required: fieldInfo.required,\n+            name: 'code-editor',\n+          }}\n+          value={widgetToAttributes[widgetID][field]}\n+          onChange={onAttributeChange}\n+        />\n+      );\n+    }\n+\n+    const isMultipleInput = fieldInfo.type.includes('[]');\n+    const supportedTypes = fieldInfo.type.split('|');\n+    if (!isMultipleInput) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjM2NQ=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2MDI4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNjoxNVrOGeMV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNTowMFrOGft_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjY3Ng==", "bodyText": "All the cases seem to use the same component and same props. Can we have a helper function that will generate these props based on the field type and remove this switch entirely?", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434312676", "createdAt": "2020-06-03T05:16:15Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import AttributeKeyValueInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput';\n+import AttributeMultipleValuesInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput';\n+import * as React from 'react';\n+\n+const WidgetAttributeInput = ({\n+  field,\n+  fieldInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  widgetType,\n+}) => {\n+  const onAttributeChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal },\n+    }));\n+  };\n+\n+  const renderAttributeInput = () => {\n+    if (!fieldInfo) {\n+      return;\n+    }\n+    const codeEditors = [\n+      'javascript-editor',\n+      'json-editor',\n+      'python-editor',\n+      'scala-editor',\n+      'sql-editor',\n+    ];\n+    if (field === 'default' && codeEditors.includes(widgetType)) {\n+      return (\n+        <WidgetWrapper\n+          widgetProperty={{\n+            field,\n+            name: field,\n+            'widget-type': widgetType,\n+            'widget-attributes': {},\n+          }}\n+          pluginProperty={{\n+            required: fieldInfo.required,\n+            name: 'code-editor',\n+          }}\n+          value={widgetToAttributes[widgetID][field]}\n+          onChange={onAttributeChange}\n+        />\n+      );\n+    }\n+\n+    const isMultipleInput = fieldInfo.type.includes('[]');\n+    const supportedTypes = fieldInfo.type.split('|');\n+    if (!isMultipleInput) {\n+      switch (fieldInfo.type) {\n+        case 'string':\n+          return (\n+            <PluginInput\n+              widgetType={'textbox'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMjU2OA==", "bodyText": "I made a helper function named generateAttributeInput to generate these props based on the field type.\nResolved.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435912568", "createdAt": "2020-06-05T13:15:00Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import PluginInput from 'components/PluginJSONCreator/Create/Content/PluginInput';\n+import AttributeKeyValueInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeKeyValueInput';\n+import AttributeMultipleValuesInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput';\n+import * as React from 'react';\n+\n+const WidgetAttributeInput = ({\n+  field,\n+  fieldInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+  widgetID,\n+  widgetType,\n+}) => {\n+  const onAttributeChange = (newVal) => {\n+    setWidgetToAttributes((prevObjs) => ({\n+      ...prevObjs,\n+      [widgetID]: { ...prevObjs[widgetID], [field]: newVal },\n+    }));\n+  };\n+\n+  const renderAttributeInput = () => {\n+    if (!fieldInfo) {\n+      return;\n+    }\n+    const codeEditors = [\n+      'javascript-editor',\n+      'json-editor',\n+      'python-editor',\n+      'scala-editor',\n+      'sql-editor',\n+    ];\n+    if (field === 'default' && codeEditors.includes(widgetType)) {\n+      return (\n+        <WidgetWrapper\n+          widgetProperty={{\n+            field,\n+            name: field,\n+            'widget-type': widgetType,\n+            'widget-attributes': {},\n+          }}\n+          pluginProperty={{\n+            required: fieldInfo.required,\n+            name: 'code-editor',\n+          }}\n+          value={widgetToAttributes[widgetID][field]}\n+          onChange={onAttributeChange}\n+        />\n+      );\n+    }\n+\n+    const isMultipleInput = fieldInfo.type.includes('[]');\n+    const supportedTypes = fieldInfo.type.split('|');\n+    if (!isMultipleInput) {\n+      switch (fieldInfo.type) {\n+        case 'string':\n+          return (\n+            <PluginInput\n+              widgetType={'textbox'}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjY3Ng=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2MDgyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNjozNlrOGeMWNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNToyOVrOGfuAeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjc1OQ==", "bodyText": "nit: import from specific submodules.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434312759", "createdAt": "2020-06-03T05:16:36Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMjgyNA==", "bodyText": "Resolved.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435912824", "createdAt": "2020-06-05T13:15:29Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjc1OQ=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2MTU4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNzowOVrOGeMWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNTo0MlrOGfuA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjg3Mw==", "bodyText": "As mentioned in other PRs, please avoid this. It will lead to regressions in unintended places tomorrow if we change anything here.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434312873", "createdAt": "2020-06-03T05:17:09Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import CloseIcon from '@material-ui/icons/Close';\n+import If from 'components/If';\n+import { h2Styles } from 'components/Markdown/MarkdownHeading';\n+import { WIDGET_TYPE_TO_ATTRIBUTES } from 'components/PluginJSONCreator/constants';\n+import WidgetAttributeInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    widgetAttributeInput: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMjk0Ng==", "bodyText": "Resolved.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435912946", "createdAt": "2020-06-05T13:15:42Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import CloseIcon from '@material-ui/icons/Close';\n+import If from 'components/If';\n+import { h2Styles } from 'components/Markdown/MarkdownHeading';\n+import { WIDGET_TYPE_TO_ATTRIBUTES } from 'components/PluginJSONCreator/constants';\n+import WidgetAttributeInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    widgetAttributeInput: {\n+      '& > *': {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjg3Mw=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2NTMzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxOToyNFrOGeMY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMzowOVrOGft7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzQ2Ng==", "bodyText": "We should use the standard modal we have within cdap. I don't believe we have this modal ported to css-in-js yet but it should be easy to add that. IT is a simple modal with dark blue backeground and white text for heading. Like this,", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r434313466", "createdAt": "2020-06-03T05:19:24Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import CloseIcon from '@material-ui/icons/Close';\n+import If from 'components/If';\n+import { h2Styles } from 'components/Markdown/MarkdownHeading';\n+import { WIDGET_TYPE_TO_ATTRIBUTES } from 'components/PluginJSONCreator/constants';\n+import WidgetAttributeInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    widgetAttributeInput: {\n+      '& > *': {\n+        width: '100%',\n+        marginTop: '10px',\n+        marginBottom: '10px',\n+      },\n+    },\n+    widgetAttributesTitle: {\n+      marginTop: '15px',\n+      marginBottom: '15px',\n+    },\n+    h2Title: {\n+      ...h2Styles(theme).root,\n+      marginBottom: '5px',\n+    },\n+  };\n+};\n+\n+interface IWidgetAttributesCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetAttributesOpen: boolean;\n+  onWidgetAttributesClose: () => void;\n+  widgetID: number;\n+}\n+\n+const WidgetAttributesCollectionView: React.FC<IWidgetAttributesCollectionProps> = ({\n+  classes,\n+  widgetAttributesOpen,\n+  onWidgetAttributesClose,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+}) => {\n+  const widget = widgetToInfo[widgetID];\n+  const widgetType = widget ? widget.widgetType : null;\n+  const attributeFields =\n+    widgetToAttributes && widgetToAttributes[widgetID]\n+      ? Object.keys(widgetToAttributes[widgetID])\n+      : [];\n+  return (\n+    <div>\n+      <Dialog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMTYxMw==", "bodyText": "Sounds good. I'll be adding a separate PR to add this modal, since this will involve changing code outside of the current project.", "url": "https://github.com/cdapio/cdap/pull/12217#discussion_r435911613", "createdAt": "2020-06-05T13:13:09Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/index.tsx", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import CloseIcon from '@material-ui/icons/Close';\n+import If from 'components/If';\n+import { h2Styles } from 'components/Markdown/MarkdownHeading';\n+import { WIDGET_TYPE_TO_ATTRIBUTES } from 'components/PluginJSONCreator/constants';\n+import WidgetAttributeInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput';\n+import WidgetInput from 'components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetInput';\n+import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n+import * as React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    widgetAttributeInput: {\n+      '& > *': {\n+        width: '100%',\n+        marginTop: '10px',\n+        marginBottom: '10px',\n+      },\n+    },\n+    widgetAttributesTitle: {\n+      marginTop: '15px',\n+      marginBottom: '15px',\n+    },\n+    h2Title: {\n+      ...h2Styles(theme).root,\n+      marginBottom: '5px',\n+    },\n+  };\n+};\n+\n+interface IWidgetAttributesCollectionProps extends WithStyles<typeof styles>, ICreateContext {\n+  widgetAttributesOpen: boolean;\n+  onWidgetAttributesClose: () => void;\n+  widgetID: number;\n+}\n+\n+const WidgetAttributesCollectionView: React.FC<IWidgetAttributesCollectionProps> = ({\n+  classes,\n+  widgetAttributesOpen,\n+  onWidgetAttributesClose,\n+  widgetID,\n+  widgetToInfo,\n+  setWidgetToInfo,\n+  widgetToAttributes,\n+  setWidgetToAttributes,\n+}) => {\n+  const widget = widgetToInfo[widgetID];\n+  const widgetType = widget ? widget.widgetType : null;\n+  const attributeFields =\n+    widgetToAttributes && widgetToAttributes[widgetID]\n+      ? Object.keys(widgetToAttributes[widgetID])\n+      : [];\n+  return (\n+    <div>\n+      <Dialog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzQ2Ng=="}, "originalCommit": {"oid": "f1bba4bdece934742d490362160433532e4ba361"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2680, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}