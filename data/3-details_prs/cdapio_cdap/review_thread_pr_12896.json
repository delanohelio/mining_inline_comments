{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NTE3NDQy", "number": 12896, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNzoyOFrOFFZzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToyMjoyMVrOFFw-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA5OTI0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/ContentHeading/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNzoyOFrOIF5kQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNzoyOFrOIF5kQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1Njk2Mw==", "bodyText": "nit: Are we introducing a different heading size?", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543056963", "createdAt": "2020-12-15T05:27:28Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ContentHeading/index.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { objectQuery } from 'services/helpers';\n+import ConfigDisplay from 'components/Replicator/ConfigDisplay';\n+import If from 'components/If';\n+import RunInfo from 'components/Replicator/Detail/ContentHeading/RunInfo';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      '& > hr': {\n+        borderWidth: '4px',\n+        borderColor: theme.palette.grey[500],\n+        marginLeft: '-40px',\n+        marginRight: '-40px',\n+      },\n+    },\n+    contentHeading: {\n+      display: 'grid',\n+      gridTemplateColumns: '1fr 550px',\n+      marginTop: '15px',\n+      alignItems: 'center',\n+    },\n+    text: {\n+      fontSize: '18px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjEwMTQyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/DetailContent/index.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyODoyNlrOIF5ldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToyNDo1MVrOIGcLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzI3MQ==", "bodyText": "Same here. We should use standardized headings. @leacd Is there any specific need to resize the headings here?", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543057271", "createdAt": "2020-12-15T05:28:26Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/DetailContent/index.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { Route, Switch, NavLink } from 'react-router-dom';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { basepath } from 'components/Replicator';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import Overview from 'components/Replicator/Detail/Overview';\n+import Monitoring from 'components/Replicator/Detail/Monitoring';\n+import { humanReadableDate } from 'services/helpers';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      display: 'grid',\n+      gridTemplateColumns: '300px 1fr',\n+      alignItems: 'end',\n+    },\n+    link: {\n+      color: theme.palette.grey[50],\n+      fontSize: '25px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxOTMzMg==", "bodyText": "the NavLink cannot apply the activeClass stylings if we use heading component here", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543619332", "createdAt": "2020-12-15T19:17:29Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/DetailContent/index.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { Route, Switch, NavLink } from 'react-router-dom';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { basepath } from 'components/Replicator';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import Overview from 'components/Replicator/Detail/Overview';\n+import Monitoring from 'components/Replicator/Detail/Monitoring';\n+import { humanReadableDate } from 'services/helpers';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      display: 'grid',\n+      gridTemplateColumns: '300px 1fr',\n+      alignItems: 'end',\n+    },\n+    link: {\n+      color: theme.palette.grey[50],\n+      fontSize: '25px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzI3MQ=="}, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNDA4Nw==", "bodyText": "Wouldn't the Heading component be nested inside the NavLink? The activeClassStyles will still get applied to the H tags nested under the anchor tag right? Am I missing something.", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543624087", "createdAt": "2020-12-15T19:24:51Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/DetailContent/index.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { Route, Switch, NavLink } from 'react-router-dom';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { basepath } from 'components/Replicator';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import Overview from 'components/Replicator/Detail/Overview';\n+import Monitoring from 'components/Replicator/Detail/Monitoring';\n+import { humanReadableDate } from 'services/helpers';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      display: 'grid',\n+      gridTemplateColumns: '300px 1fr',\n+      alignItems: 'end',\n+    },\n+    link: {\n+      color: theme.palette.grey[50],\n+      fontSize: '25px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NzI3MQ=="}, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjExOTk4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/Monitoring/Metrics/parser.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTozNTo0MVrOIF5vTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTozNTo0MVrOIF5vTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1OTc5MQ==", "bodyText": "nit: This is already exported from helpers.", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543059791", "createdAt": "2020-12-15T05:35:41Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Monitoring/Metrics/parser.tsx", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { IRawMetricData } from 'components/Replicator/types';\n+import { truncateNumber } from 'services/helpers';\n+import { convertBytesToHumanReadable } from 'services/helpers';\n+\n+interface IAggregateMetrics {\n+  dataReplicated: number;\n+  eventsPerMin: number;\n+  latency: number;\n+  errors: number;\n+  totalEvents: number;\n+  inserts: number;\n+  updates: number;\n+  deletes: number;\n+}\n+\n+const METRIC_NAME_MAP = {\n+  'user.dml.inserts': 'inserts',\n+  'user.dml.updates': 'updates',\n+  'user.dml.deletes': 'deletes',\n+  'user.dml.errors': 'errors',\n+  'user.dml.latency.seconds': 'latency',\n+  'user.dml.data.processed.bytes': 'dataReplicated',\n+};\n+\n+const PRECISION = 2;\n+\n+const ONE_MIN_SECONDS = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjEzNTA4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/Monitoring/ThroughputLatencyGraphs/parser.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo0MTozN1rOIF53Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowNTowNFrOIGYyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2MTg0Ng==", "bodyText": "nit: Seems like all the parsers have most of the metrics in common. Can we extract out the common metrics into one parser and reuse it. Would be useful if at some point in we change any of the metrics.", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543061846", "createdAt": "2020-12-15T05:41:37Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Monitoring/ThroughputLatencyGraphs/parser.ts", "diffHunk": "@@ -44,10 +44,10 @@ interface IRawMetricData {\n }\n \n const METRIC_NAME_MAP = {\n-  'user.dml.insert': 'inserts',\n-  'user.dml.update': 'updates',\n-  'user.dml.delete': 'deletes',\n-  'user.dml.error': 'errors',\n+  'user.dml.inserts': 'inserts',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2ODQ2MQ==", "bodyText": "the parsers are different, the grouping of the metrics are different. There is some clean up and consolidation that can happen, will do that in subsequent PR", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543568461", "createdAt": "2020-12-15T18:05:04Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Monitoring/ThroughputLatencyGraphs/parser.ts", "diffHunk": "@@ -44,10 +44,10 @@ interface IRawMetricData {\n }\n \n const METRIC_NAME_MAP = {\n-  'user.dml.insert': 'inserts',\n-  'user.dml.update': 'updates',\n-  'user.dml.delete': 'deletes',\n-  'user.dml.error': 'errors',\n+  'user.dml.inserts': 'inserts',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2MTg0Ng=="}, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjE0NDUyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo0NToxNFrOIF58mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo0NToxNFrOIF58mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2MzE5Mw==", "bodyText": "nit: Will this be removed in a subsequent PR?", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543063193", "createdAt": "2020-12-15T05:45:14Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/index.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useContext, useEffect, useState } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { generateTableKey } from 'components/Replicator/utilities';\n+import { Map } from 'immutable';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import TextField from '@material-ui/core/TextField';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import Search from '@material-ui/icons/Search';\n+import debounce from 'lodash/debounce';\n+import Table from 'components/Table';\n+import TableHeader from 'components/Table/TableHeader';\n+import TableRow from 'components/Table/TableRow';\n+import TableCell from 'components/Table/TableCell';\n+import TableBody from 'components/Table/TableBody';\n+import IconSVG from 'components/IconSVG';\n+import MetricsQueryHelper from 'services/MetricsQueryHelper';\n+import { PROGRAM_INFO } from 'components/Replicator/constants';\n+import { MyMetricApi } from 'api/metric';\n+import { parseOverviewMetrics } from 'components/Replicator/Detail/Overview/TablesList/metricsParser';\n+import { compare } from 'natural-orderby';\n+import TableColumnGroup from 'components/Table/TableColumnGroup';\n+import ColumnGroup from 'components/Table/ColumnGroup';\n+import TimePeriodDropdown from 'components/Replicator/Detail/TimePeriodDropdown';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    grid: {\n+      height: '500px',\n+    },\n+\n+    subtitle: {\n+      marginTop: '10px',\n+      marginBottom: '10px',\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      alignItems: 'center',\n+\n+      '& > div:last-child': {\n+        textAlign: 'right',\n+      },\n+    },\n+    search: {\n+      width: '250px',\n+\n+      '& input': {\n+        paddingTop: '10px',\n+        paddingBottom: '10px',\n+      },\n+    },\n+    SNAPSHOTTING: {\n+      color: theme.palette.blue[100],\n+    },\n+    REPLICATING: {\n+      color: theme.palette.blue[100],\n+    },\n+    FAILING: {\n+      color: theme.palette.red[100],\n+    },\n+    IDLE: {\n+      color: theme.palette.grey[200],\n+    },\n+  };\n+};\n+\n+const TablesListView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n+  const { name, tables, columns, offsetBasePath, timeRange } = useContext(DetailContext);\n+\n+  const [statusMap, setStatusMap] = useState(Map<string, string>());\n+  const [filteredTables, setFilteredTables] = useState(sortTable(tables.toList()));\n+  const [search, setSearch] = useState('');\n+  const [tableMetricsMap, setTableMetricsMap] = useState({});\n+\n+  function handleSearch(e) {\n+    setSearch(e.target.value);\n+  }\n+\n+  function sortTable(unorderedTable) {\n+    return unorderedTable\n+      .sort((a, b) => {\n+        return compare()(a.get('table'), b.get('table'));\n+      })\n+      .toList();\n+  }\n+\n+  const filterTableBySearch = debounce(() => {\n+    if (!search || search.length === 0) {\n+      setFilteredTables(sortTable(tables.toList()));\n+      return;\n+    }\n+\n+    const filteredList = tables\n+      .filter((row) => {\n+        const normalizedTable = row.get('table').toLowerCase();\n+        const normalizedSearch = search.toLowerCase();\n+\n+        return normalizedTable.indexOf(normalizedSearch) !== -1;\n+      })\n+      .toList();\n+\n+    setFilteredTables(sortTable(filteredList));\n+  }, 300);\n+\n+  // handle search query change\n+  useEffect(filterTableBySearch, [search, tables]);\n+\n+  useEffect(() => {\n+    if (!offsetBasePath || offsetBasePath.length === 0) {\n+      return;\n+    }\n+\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+    };\n+\n+    const body = {\n+      name,\n+      offsetBasePath,\n+    };\n+\n+    // TODO: optimize polling\n+    // Don't poll when status is not running\n+    const statusPoll$ = MyReplicatorApi.pollTableStatus(params, body).subscribe((res) => {\n+      const tableStatus = res.tables;\n+\n+      let status = Map<string, string>();\n+      tableStatus.forEach((tableInfo) => {\n+        const tableKey = generateTableKey(tableInfo);\n+        status = status.set(tableKey, tableInfo.state);\n+      });\n+\n+      setStatusMap(status);\n+    });\n+\n+    return () => {\n+      statusPoll$.unsubscribe();\n+    };\n+  }, [offsetBasePath]);\n+\n+  useEffect(() => {\n+    if (tables.size === 0) {\n+      return;\n+    }\n+\n+    const tags = {\n+      namespace: getCurrentNamespace(),\n+      app: name,\n+      worker: PROGRAM_INFO.programId,\n+      run: '*',\n+      instance: '*',\n+    };\n+\n+    const tagsParams = MetricsQueryHelper.tagsToParams(tags);\n+\n+    const metrics = ['inserts', 'updates', 'deletes', 'errors', 'latency.seconds']\n+      .map((metric) => {\n+        return `metric=user.dml.${metric}`;\n+      })\n+      .join('&');\n+\n+    const start = `start=now-${timeRange}`;\n+    const end = 'end=now';\n+    const aggregate = 'aggregate=false';\n+    const groupBy = 'groupBy=ent';\n+\n+    const params = [start, end, aggregate, groupBy, tagsParams, metrics].join('&');\n+\n+    MyMetricApi.queryTags({ params }).subscribe(\n+      (res) => {\n+        setTableMetricsMap(\n+          parseOverviewMetrics(\n+            res,\n+            tables\n+              .toList()\n+              .map((tableInfo) => tableInfo.get('table'))\n+              .toJS()\n+          )\n+        );\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);\n+      }\n+    );\n+  }, [timeRange, tables]);\n+  return (\n+    <div className={classes.root}>\n+      <div className={classes.subtitle}>\n+        <div>\n+          <strong>{tables.size}</strong> tables to be replicated\n+        </div>\n+        <div>\n+          <TextField\n+            className={classes.search}\n+            value={search}\n+            onChange={handleSearch}\n+            variant=\"outlined\"\n+            placeholder=\"Search by table name\"\n+            InputProps={{\n+              startAdornment: (\n+                <InputAdornment position=\"start\">\n+                  <Search />\n+                </InputAdornment>\n+              ),\n+            }}\n+          />\n+        </div>\n+      </div>\n+\n+      <Table\n+        columnTemplate=\"30px 2fr 100px 1fr 1fr 1fr 150px 1fr 1fr 1fr\"\n+        classes={{ grid: classes.grid }}\n+      >\n+        <TableHeader>\n+          <TableColumnGroup>\n+            <ColumnGroup gridColumn=\"4 / span 7\">\n+              Activities in the <TimePeriodDropdown />\n+            </ColumnGroup>\n+          </TableColumnGroup>\n+          <TableRow>\n+            <TableCell>\n+              <IconSVG name=\"icon-circle\" className={classes.IDLE} />\n+            </TableCell>\n+            <TableCell>Table name</TableCell>\n+            <TableCell textAlign=\"right\">\n+              <div>Selected</div>\n+              <div>columns</div>\n+            </TableCell>\n+            <TableCell textAlign=\"right\">\n+              <div>No. events</div>\n+              <div>replicated</div>\n+            </TableCell>\n+            <TableCell textAlign=\"right\">\n+              <div>Throughput</div>\n+              <div>(events/min)</div>\n+            </TableCell>\n+            <TableCell textAlign=\"right\">\n+              <div>Latency</div>\n+              <div>(min)</div>\n+            </TableCell>\n+            <TableCell />\n+            <TableCell textAlign=\"right\">Inserts</TableCell>\n+            <TableCell textAlign=\"right\">Updates</TableCell>\n+            <TableCell textAlign=\"right\">Deletes</TableCell>\n+          </TableRow>\n+        </TableHeader>\n+\n+        <TableBody>\n+          {filteredTables.toList().map((row) => {\n+            const tableKey = generateTableKey(row);\n+\n+            const tableColumns = columns.get(tableKey);\n+            const numColumns = tableColumns ? tableColumns.size : 0;\n+            const tableStatus = statusMap.get(tableKey) || 'IDLE';\n+            const icon = tableStatus === 'SNAPSHOTTING' ? 'icon-circle-o' : 'icon-circle';\n+            const tableName = row.get('table');\n+            const tableMetrics = tableMetricsMap[tableName] || {};\n+\n+            return (\n+              <TableRow key={tableKey.toString()}>\n+                <TableCell>\n+                  <IconSVG name={icon} className={classes[tableStatus]} />\n+                </TableCell>\n+                <TableCell>{tableName}</TableCell>\n+                <TableCell textAlign=\"right\">{numColumns === 0 ? 'All' : numColumns}</TableCell>\n+                <TableCell textAlign=\"right\">{tableMetrics.totalEvents}</TableCell>\n+                <TableCell textAlign=\"right\">{tableMetrics.eventsPerMin}</TableCell>\n+                <TableCell textAlign=\"right\">{tableMetrics.latency}</TableCell>\n+                <TableCell />\n+                <TableCell textAlign=\"right\">{tableMetrics.inserts}</TableCell>\n+                <TableCell textAlign=\"right\">{tableMetrics.updates}</TableCell>\n+                <TableCell textAlign=\"right\">{tableMetrics.deletes}</TableCell>\n+              </TableRow>\n+            );\n+          })}\n+        </TableBody>\n+      </Table>\n+\n+      {/* <div className=\"grid-wrapper\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjE2MDk2OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/index.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1MTo0OFrOIF6Fwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1MTo0OFrOIF6Fwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2NTUzOA==", "bodyText": "This is a nice start!", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543065538", "createdAt": "2020-12-15T05:51:48Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/index.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useContext, useEffect, useState } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { generateTableKey } from 'components/Replicator/utilities';\n+import { Map } from 'immutable';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import TextField from '@material-ui/core/TextField';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import Search from '@material-ui/icons/Search';\n+import debounce from 'lodash/debounce';\n+import Table from 'components/Table';\n+import TableHeader from 'components/Table/TableHeader';\n+import TableRow from 'components/Table/TableRow';\n+import TableCell from 'components/Table/TableCell';\n+import TableBody from 'components/Table/TableBody';\n+import IconSVG from 'components/IconSVG';\n+import MetricsQueryHelper from 'services/MetricsQueryHelper';\n+import { PROGRAM_INFO } from 'components/Replicator/constants';\n+import { MyMetricApi } from 'api/metric';\n+import { parseOverviewMetrics } from 'components/Replicator/Detail/Overview/TablesList/metricsParser';\n+import { compare } from 'natural-orderby';\n+import TableColumnGroup from 'components/Table/TableColumnGroup';\n+import ColumnGroup from 'components/Table/ColumnGroup';\n+import TimePeriodDropdown from 'components/Replicator/Detail/TimePeriodDropdown';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    grid: {\n+      height: '500px',\n+    },\n+\n+    subtitle: {\n+      marginTop: '10px',\n+      marginBottom: '10px',\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      alignItems: 'center',\n+\n+      '& > div:last-child': {\n+        textAlign: 'right',\n+      },\n+    },\n+    search: {\n+      width: '250px',\n+\n+      '& input': {\n+        paddingTop: '10px',\n+        paddingBottom: '10px',\n+      },\n+    },\n+    SNAPSHOTTING: {\n+      color: theme.palette.blue[100],\n+    },\n+    REPLICATING: {\n+      color: theme.palette.blue[100],\n+    },\n+    FAILING: {\n+      color: theme.palette.red[100],\n+    },\n+    IDLE: {\n+      color: theme.palette.grey[200],\n+    },\n+  };\n+};\n+\n+const TablesListView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n+  const { name, tables, columns, offsetBasePath, timeRange } = useContext(DetailContext);\n+\n+  const [statusMap, setStatusMap] = useState(Map<string, string>());\n+  const [filteredTables, setFilteredTables] = useState(sortTable(tables.toList()));\n+  const [search, setSearch] = useState('');\n+  const [tableMetricsMap, setTableMetricsMap] = useState({});\n+\n+  function handleSearch(e) {\n+    setSearch(e.target.value);\n+  }\n+\n+  function sortTable(unorderedTable) {\n+    return unorderedTable\n+      .sort((a, b) => {\n+        return compare()(a.get('table'), b.get('table'));\n+      })\n+      .toList();\n+  }\n+\n+  const filterTableBySearch = debounce(() => {\n+    if (!search || search.length === 0) {\n+      setFilteredTables(sortTable(tables.toList()));\n+      return;\n+    }\n+\n+    const filteredList = tables\n+      .filter((row) => {\n+        const normalizedTable = row.get('table').toLowerCase();\n+        const normalizedSearch = search.toLowerCase();\n+\n+        return normalizedTable.indexOf(normalizedSearch) !== -1;\n+      })\n+      .toList();\n+\n+    setFilteredTables(sortTable(filteredList));\n+  }, 300);\n+\n+  // handle search query change\n+  useEffect(filterTableBySearch, [search, tables]);\n+\n+  useEffect(() => {\n+    if (!offsetBasePath || offsetBasePath.length === 0) {\n+      return;\n+    }\n+\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+    };\n+\n+    const body = {\n+      name,\n+      offsetBasePath,\n+    };\n+\n+    // TODO: optimize polling\n+    // Don't poll when status is not running\n+    const statusPoll$ = MyReplicatorApi.pollTableStatus(params, body).subscribe((res) => {\n+      const tableStatus = res.tables;\n+\n+      let status = Map<string, string>();\n+      tableStatus.forEach((tableInfo) => {\n+        const tableKey = generateTableKey(tableInfo);\n+        status = status.set(tableKey, tableInfo.state);\n+      });\n+\n+      setStatusMap(status);\n+    });\n+\n+    return () => {\n+      statusPoll$.unsubscribe();\n+    };\n+  }, [offsetBasePath]);\n+\n+  useEffect(() => {\n+    if (tables.size === 0) {\n+      return;\n+    }\n+\n+    const tags = {\n+      namespace: getCurrentNamespace(),\n+      app: name,\n+      worker: PROGRAM_INFO.programId,\n+      run: '*',\n+      instance: '*',\n+    };\n+\n+    const tagsParams = MetricsQueryHelper.tagsToParams(tags);\n+\n+    const metrics = ['inserts', 'updates', 'deletes', 'errors', 'latency.seconds']\n+      .map((metric) => {\n+        return `metric=user.dml.${metric}`;\n+      })\n+      .join('&');\n+\n+    const start = `start=now-${timeRange}`;\n+    const end = 'end=now';\n+    const aggregate = 'aggregate=false';\n+    const groupBy = 'groupBy=ent';\n+\n+    const params = [start, end, aggregate, groupBy, tagsParams, metrics].join('&');\n+\n+    MyMetricApi.queryTags({ params }).subscribe(\n+      (res) => {\n+        setTableMetricsMap(\n+          parseOverviewMetrics(\n+            res,\n+            tables\n+              .toList()\n+              .map((tableInfo) => tableInfo.get('table'))\n+              .toJS()\n+          )\n+        );\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);\n+      }\n+    );\n+  }, [timeRange, tables]);\n+  return (\n+    <div className={classes.root}>\n+      <div className={classes.subtitle}>\n+        <div>\n+          <strong>{tables.size}</strong> tables to be replicated\n+        </div>\n+        <div>\n+          <TextField\n+            className={classes.search}\n+            value={search}\n+            onChange={handleSearch}\n+            variant=\"outlined\"\n+            placeholder=\"Search by table name\"\n+            InputProps={{\n+              startAdornment: (\n+                <InputAdornment position=\"start\">\n+                  <Search />\n+                </InputAdornment>\n+              ),\n+            }}\n+          />\n+        </div>\n+      </div>\n+\n+      <Table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c39938aa0782d85c4239d05318577e5c6424d60"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTg5Njg3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/metricsParser.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToyMjoyMVrOIGcEqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToyMjoyMVrOIGcEqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMjMxNA==", "bodyText": "nit: This needs to be changed as well.", "url": "https://github.com/cdapio/cdap/pull/12896#discussion_r543622314", "createdAt": "2020-12-15T19:22:21Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/Overview/TablesList/metricsParser.ts", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { IRawMetricData } from 'components/Replicator/types';\n+import { truncateNumber } from 'services/helpers';\n+\n+interface IOverviewMetricsData {\n+  tableName: string;\n+  inserts: number;\n+  updates: number;\n+  deletes: number;\n+  errors: number;\n+  latency: number;\n+  eventsPerMin: number;\n+  totalEvents: number;\n+}\n+\n+const INITIAL_DATA = {\n+  inserts: 0,\n+  updates: 0,\n+  deletes: 0,\n+  errors: 0,\n+  latency: 0,\n+  eventsPerMin: 0,\n+  totalEvents: 0,\n+};\n+\n+const METRIC_MAP = {\n+  'user.dml.inserts': 'inserts',\n+  'user.dml.updates': 'updates',\n+  'user.dml.deletes': 'deletes',\n+  'user.dml.errors': 'errors',\n+  'user.dml.latency.seconds': 'latency',\n+};\n+\n+const ONE_MIN_SECONDS = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb069f97ac68cca9a163dd5f075e6155e558880f"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2558, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}