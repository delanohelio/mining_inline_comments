{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTI2NTE3", "number": 12455, "title": "[CDAP-16850] Adds unit tests to Schema Manager used by Schema Editor", "bodyText": "Note:\nThe large number of changes is because of the schema files and not actual code.", "createdAt": "2020-07-15T14:38:43Z", "url": "https://github.com/cdapio/cdap/pull/12455", "merged": true, "mergeCommit": {"oid": "a9a86f73dc9d8881b63b865f69c674e7bb741d3a"}, "closed": true, "closedAt": "2020-10-28T15:45:44Z", "author": {"login": "ajainarayanan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2LcG7gBqjM1NjEzNTUyNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW2VlSgBqjM5MjkzNjQxODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27c8ac64a7547227c18dfc0296f237c1bdbd9674", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/27c8ac64a7547227c18dfc0296f237c1bdbd9674", "committedDate": "2020-07-15T14:36:55Z", "message": "Adds basic unit tests for SchemaManager"}, "afterCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/fc24b2165faffa9a1bb1375e6d18e365c5379ac4", "committedDate": "2020-07-18T05:52:56Z", "message": "Adds basic unit tests for SchemaManager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjQ5NDMz", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-453649433", "createdAt": "2020-07-22T20:12:38Z", "commit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxMjozOFrOG1ygMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxMjozOFrOG1ygMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NTE1Mw==", "bodyText": "Better description here? e.g. Should handle empty schema", "url": "https://github.com/cdapio/cdap/pull/12455#discussion_r459055153", "createdAt": "2020-07-22T20:12:38Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/SchemaEditor/Context/__tests__/SchemaManager.tests.ts", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  SchemaManager,\n+  ISchemaManager,\n+  INode,\n+} from 'components/AbstractWidget/SchemaEditor/Context/SchemaManager';\n+import {\n+  OperationTypesEnum,\n+  getDefaultEmptyAvroSchema,\n+} from 'components/AbstractWidget/SchemaEditor/SchemaConstants';\n+import {\n+  schemaWithMap,\n+  schemaWithName,\n+  schemaWithModifiedType,\n+  simpleSchema,\n+  simpleSchema2,\n+  largeSchema,\n+  largeSchema2,\n+} from './schemas';\n+import { ISchemaType } from 'components/AbstractWidget/SchemaEditor/SchemaTypes';\n+\n+const childCountInTree = (tree) => {\n+  if (!tree || (tree && !tree.children)) {\n+    return 0;\n+  }\n+  return Object.keys(tree.children).filter((child) => child !== 'order').length;\n+};\n+\n+const getNthFieldIdInFlatSchema = (schemaManagerInstance: ISchemaManager, n) => {\n+  const list = schemaManagerInstance.getFlatSchema();\n+  const { id, ancestors } = list[n];\n+  const fieldId = { id, ancestors };\n+  return { fieldId, field: list[n] };\n+};\n+\n+describe('Unit tests for Schema Manager', () => {\n+  describe('Basic operations should work', () => {\n+    let schema;\n+    beforeEach(() => {\n+      schema = SchemaManager().getInstance();\n+    });\n+\n+    it('Should work', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjUxMjY5", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-453651269", "createdAt": "2020-07-22T20:15:28Z", "commit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNToyOVrOG1yl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNToyOVrOG1yl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NjYzMw==", "bodyText": "Question, potentially for future work: Would it make sense for onChange to accept an array of change structures? Would batching changes lead to performance improvements down the line?", "url": "https://github.com/cdapio/cdap/pull/12455#discussion_r459056633", "createdAt": "2020-07-22T20:15:29Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/SchemaEditor/Context/__tests__/SchemaManager.tests.ts", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  SchemaManager,\n+  ISchemaManager,\n+  INode,\n+} from 'components/AbstractWidget/SchemaEditor/Context/SchemaManager';\n+import {\n+  OperationTypesEnum,\n+  getDefaultEmptyAvroSchema,\n+} from 'components/AbstractWidget/SchemaEditor/SchemaConstants';\n+import {\n+  schemaWithMap,\n+  schemaWithName,\n+  schemaWithModifiedType,\n+  simpleSchema,\n+  simpleSchema2,\n+  largeSchema,\n+  largeSchema2,\n+} from './schemas';\n+import { ISchemaType } from 'components/AbstractWidget/SchemaEditor/SchemaTypes';\n+\n+const childCountInTree = (tree) => {\n+  if (!tree || (tree && !tree.children)) {\n+    return 0;\n+  }\n+  return Object.keys(tree.children).filter((child) => child !== 'order').length;\n+};\n+\n+const getNthFieldIdInFlatSchema = (schemaManagerInstance: ISchemaManager, n) => {\n+  const list = schemaManagerInstance.getFlatSchema();\n+  const { id, ancestors } = list[n];\n+  const fieldId = { id, ancestors };\n+  return { fieldId, field: list[n] };\n+};\n+\n+describe('Unit tests for Schema Manager', () => {\n+  describe('Basic operations should work', () => {\n+    let schema;\n+    beforeEach(() => {\n+      schema = SchemaManager().getInstance();\n+    });\n+\n+    it('Should work', () => {\n+      expect(schema).not.toBeNull();\n+      const tree = schema.getSchemaTree();\n+      const list = schema.getFlatSchema();\n+      expect(childCountInTree(tree)).toBe(1);\n+      expect(list.length).toBe(2); // top level schema + first empty record field.\n+      expect(list[1].name).toBe('');\n+    });\n+\n+    it('Should change \"name\" of a record field', () => {\n+      const list = schema.getFlatSchema();\n+      const { id, ancestors } = list[1];\n+      const fieldId = { id, ancestors };\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: 'update',\n+      });\n+      expect(schema.getFlatSchema().length).toBe(2);\n+      expect(list[1].name).toBe('new_field');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithName);\n+    });\n+\n+    it('Should change the \"type\" of a record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      schema.onChange(fieldId, {\n+        property: 'type',\n+        value: 'boolean',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      expect(schema.getFlatSchema()[1].type).toBe('boolean');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithModifiedType);\n+    });\n+\n+    it('Should add a new record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, { type: OperationTypesEnum.ADD });\n+      expect(schema.getFlatSchema().length).toBe(3);\n+    });\n+\n+    it('Should remove a record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, { type: OperationTypesEnum.ADD });\n+      schema.onChange(fieldId, { type: OperationTypesEnum.REMOVE });\n+      expect(schema.getFlatSchema().length).toBe(2);\n+    });\n+\n+    it('Should change simple type to complex type', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjUxNDc0", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-453651474", "createdAt": "2020-07-22T20:15:47Z", "commit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNTo0OFrOG1ymdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNTo0OFrOG1ymdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1Njc1OA==", "bodyText": "This should verify the new field is correct", "url": "https://github.com/cdapio/cdap/pull/12455#discussion_r459056758", "createdAt": "2020-07-22T20:15:48Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/SchemaEditor/Context/__tests__/SchemaManager.tests.ts", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  SchemaManager,\n+  ISchemaManager,\n+  INode,\n+} from 'components/AbstractWidget/SchemaEditor/Context/SchemaManager';\n+import {\n+  OperationTypesEnum,\n+  getDefaultEmptyAvroSchema,\n+} from 'components/AbstractWidget/SchemaEditor/SchemaConstants';\n+import {\n+  schemaWithMap,\n+  schemaWithName,\n+  schemaWithModifiedType,\n+  simpleSchema,\n+  simpleSchema2,\n+  largeSchema,\n+  largeSchema2,\n+} from './schemas';\n+import { ISchemaType } from 'components/AbstractWidget/SchemaEditor/SchemaTypes';\n+\n+const childCountInTree = (tree) => {\n+  if (!tree || (tree && !tree.children)) {\n+    return 0;\n+  }\n+  return Object.keys(tree.children).filter((child) => child !== 'order').length;\n+};\n+\n+const getNthFieldIdInFlatSchema = (schemaManagerInstance: ISchemaManager, n) => {\n+  const list = schemaManagerInstance.getFlatSchema();\n+  const { id, ancestors } = list[n];\n+  const fieldId = { id, ancestors };\n+  return { fieldId, field: list[n] };\n+};\n+\n+describe('Unit tests for Schema Manager', () => {\n+  describe('Basic operations should work', () => {\n+    let schema;\n+    beforeEach(() => {\n+      schema = SchemaManager().getInstance();\n+    });\n+\n+    it('Should work', () => {\n+      expect(schema).not.toBeNull();\n+      const tree = schema.getSchemaTree();\n+      const list = schema.getFlatSchema();\n+      expect(childCountInTree(tree)).toBe(1);\n+      expect(list.length).toBe(2); // top level schema + first empty record field.\n+      expect(list[1].name).toBe('');\n+    });\n+\n+    it('Should change \"name\" of a record field', () => {\n+      const list = schema.getFlatSchema();\n+      const { id, ancestors } = list[1];\n+      const fieldId = { id, ancestors };\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: 'update',\n+      });\n+      expect(schema.getFlatSchema().length).toBe(2);\n+      expect(list[1].name).toBe('new_field');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithName);\n+    });\n+\n+    it('Should change the \"type\" of a record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      schema.onChange(fieldId, {\n+        property: 'type',\n+        value: 'boolean',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      expect(schema.getFlatSchema()[1].type).toBe('boolean');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithModifiedType);\n+    });\n+\n+    it('Should add a new record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, { type: OperationTypesEnum.ADD });\n+      expect(schema.getFlatSchema().length).toBe(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjUxNjU5", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-453651659", "createdAt": "2020-07-22T20:16:04Z", "commit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNjowNFrOG1ym6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNjowNFrOG1ym6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1Njg3Mw==", "bodyText": "This should verify the correct field was removed", "url": "https://github.com/cdapio/cdap/pull/12455#discussion_r459056873", "createdAt": "2020-07-22T20:16:04Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/SchemaEditor/Context/__tests__/SchemaManager.tests.ts", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  SchemaManager,\n+  ISchemaManager,\n+  INode,\n+} from 'components/AbstractWidget/SchemaEditor/Context/SchemaManager';\n+import {\n+  OperationTypesEnum,\n+  getDefaultEmptyAvroSchema,\n+} from 'components/AbstractWidget/SchemaEditor/SchemaConstants';\n+import {\n+  schemaWithMap,\n+  schemaWithName,\n+  schemaWithModifiedType,\n+  simpleSchema,\n+  simpleSchema2,\n+  largeSchema,\n+  largeSchema2,\n+} from './schemas';\n+import { ISchemaType } from 'components/AbstractWidget/SchemaEditor/SchemaTypes';\n+\n+const childCountInTree = (tree) => {\n+  if (!tree || (tree && !tree.children)) {\n+    return 0;\n+  }\n+  return Object.keys(tree.children).filter((child) => child !== 'order').length;\n+};\n+\n+const getNthFieldIdInFlatSchema = (schemaManagerInstance: ISchemaManager, n) => {\n+  const list = schemaManagerInstance.getFlatSchema();\n+  const { id, ancestors } = list[n];\n+  const fieldId = { id, ancestors };\n+  return { fieldId, field: list[n] };\n+};\n+\n+describe('Unit tests for Schema Manager', () => {\n+  describe('Basic operations should work', () => {\n+    let schema;\n+    beforeEach(() => {\n+      schema = SchemaManager().getInstance();\n+    });\n+\n+    it('Should work', () => {\n+      expect(schema).not.toBeNull();\n+      const tree = schema.getSchemaTree();\n+      const list = schema.getFlatSchema();\n+      expect(childCountInTree(tree)).toBe(1);\n+      expect(list.length).toBe(2); // top level schema + first empty record field.\n+      expect(list[1].name).toBe('');\n+    });\n+\n+    it('Should change \"name\" of a record field', () => {\n+      const list = schema.getFlatSchema();\n+      const { id, ancestors } = list[1];\n+      const fieldId = { id, ancestors };\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: 'update',\n+      });\n+      expect(schema.getFlatSchema().length).toBe(2);\n+      expect(list[1].name).toBe('new_field');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithName);\n+    });\n+\n+    it('Should change the \"type\" of a record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, {\n+        property: 'name',\n+        value: 'new_field',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      schema.onChange(fieldId, {\n+        property: 'type',\n+        value: 'boolean',\n+        type: OperationTypesEnum.UPDATE,\n+      });\n+      expect(schema.getFlatSchema()[1].type).toBe('boolean');\n+      expect(schema.getAvroSchema()).toEqual(schemaWithModifiedType);\n+    });\n+\n+    it('Should add a new record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, { type: OperationTypesEnum.ADD });\n+      expect(schema.getFlatSchema().length).toBe(3);\n+    });\n+\n+    it('Should remove a record field', () => {\n+      const { fieldId } = getNthFieldIdInFlatSchema(schema, 1);\n+      schema.onChange(fieldId, { type: OperationTypesEnum.ADD });\n+      schema.onChange(fieldId, { type: OperationTypesEnum.REMOVE });\n+      expect(schema.getFlatSchema().length).toBe(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjU3NDAx", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-453657401", "createdAt": "2020-07-22T20:24:47Z", "commit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc24b2165faffa9a1bb1375e6d18e365c5379ac4", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/fc24b2165faffa9a1bb1375e6d18e365c5379ac4", "committedDate": "2020-07-18T05:52:56Z", "message": "Adds basic unit tests for SchemaManager"}, "afterCommit": {"oid": "ff4f104311c14fb4ba56046410f964b861a5231e", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/ff4f104311c14fb4ba56046410f964b861a5231e", "committedDate": "2020-09-21T17:51:41Z", "message": "Adds basic unit tests for SchemaManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff4f104311c14fb4ba56046410f964b861a5231e", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/ff4f104311c14fb4ba56046410f964b861a5231e", "committedDate": "2020-09-21T17:51:41Z", "message": "Adds basic unit tests for SchemaManager"}, "afterCommit": {"oid": "80b5bf4ec15c6456cf363d079f8a42794c01ed9f", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/80b5bf4ec15c6456cf363d079f8a42794c01ed9f", "committedDate": "2020-09-23T18:03:13Z", "message": "Fixes PluginJSONCreator unit test to mock right modules (since automock is now set to false)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDAwMjAz", "url": "https://github.com/cdapio/cdap/pull/12455#pullrequestreview-506000203", "createdAt": "2020-10-09T21:30:45Z", "commit": {"oid": "98b3f420de6467acb9d07873f949d3ac150d9338"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98b3f420de6467acb9d07873f949d3ac150d9338", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/98b3f420de6467acb9d07873f949d3ac150d9338", "committedDate": "2020-09-23T18:23:57Z", "message": "Addresses review comments"}, "afterCommit": {"oid": "410cf2175e1695f125ef9175acc786aec4d2559e", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/410cf2175e1695f125ef9175acc786aec4d2559e", "committedDate": "2020-10-27T22:47:47Z", "message": "Adds unit tests for SchemaManager in SchemaEditor used in pipelines\n\n - Adds jest css transform module while running unit tests\n - Adds minor safety check for accessing proxyBaseUrl in WindowManager\n - Fixes jest config to remove automock to be false. This prevents from jest mocking all possible modules which causes other side effects\n - Fixes PluginJSONCreator unit test to mock right modules (since automock is now set to false)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b22ac1f47c6bbeb5e9efaa66433efe5045d5272c", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/b22ac1f47c6bbeb5e9efaa66433efe5045d5272c", "committedDate": "2020-10-28T05:01:41Z", "message": "Adds unit tests for SchemaManager in SchemaEditor used in pipelines\n\n - Adds jest css transform module while running unit tests\n - Adds minor safety check for accessing proxyBaseUrl in WindowManager\n - Fixes jest config to remove automock to be false. This prevents from jest mocking all possible modules which causes other side effects\n - Fixes PluginJSONCreator unit test to mock right modules (since automock is now set to false)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "410cf2175e1695f125ef9175acc786aec4d2559e", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/410cf2175e1695f125ef9175acc786aec4d2559e", "committedDate": "2020-10-27T22:47:47Z", "message": "Adds unit tests for SchemaManager in SchemaEditor used in pipelines\n\n - Adds jest css transform module while running unit tests\n - Adds minor safety check for accessing proxyBaseUrl in WindowManager\n - Fixes jest config to remove automock to be false. This prevents from jest mocking all possible modules which causes other side effects\n - Fixes PluginJSONCreator unit test to mock right modules (since automock is now set to false)"}, "afterCommit": {"oid": "b22ac1f47c6bbeb5e9efaa66433efe5045d5272c", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/b22ac1f47c6bbeb5e9efaa66433efe5045d5272c", "committedDate": "2020-10-28T05:01:41Z", "message": "Adds unit tests for SchemaManager in SchemaEditor used in pipelines\n\n - Adds jest css transform module while running unit tests\n - Adds minor safety check for accessing proxyBaseUrl in WindowManager\n - Fixes jest config to remove automock to be false. This prevents from jest mocking all possible modules which causes other side effects\n - Fixes PluginJSONCreator unit test to mock right modules (since automock is now set to false)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1819, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}