{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjAwOTU2", "number": 11805, "title": "[CDAP-14284] Adds base implementation to handle different types of nodes in React", "bodyText": "Things done\n\nAdds an AbstractNode to handle all the common actions required for rendering a node\nAdds Source, Transform, Sink, Alert, Error node types.\nStyling changes to resemble endpoints in existing implenentation\n\nThings to do\n\nAdd splitter, condition and action node types\nStreamline styling for nodes.\nSeperate out jsplumb settings and styles required for nodes. Right now it is not ideal\nBuild:\nhttps://builds.cask.co/browse/CDAP-UDUT477", "createdAt": "2020-01-02T09:42:22Z", "url": "https://github.com/cdapio/cdap/pull/11805", "merged": true, "mergeCommit": {"oid": "97c760b0621cacbc799e01e79a3f006b88e680cc"}, "closed": true, "closedAt": "2020-01-24T00:07:43Z", "author": {"login": "ajainarayanan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4HDoBgFqTMzOTQ4MzAwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9QxNAABqjI5NzUyNDk3NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDgzMDAw", "url": "https://github.com/cdapio/cdap/pull/11805#pullrequestreview-339483000", "createdAt": "2020-01-07T20:18:58Z", "commit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoxODo1OVrOFbEsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDo0NzoyOFrOFbFWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMjc0Mg==", "bodyText": "i'm not sure i understand this condition, why are we checking the target?", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363932742", "createdAt": "2020-01-07T20:18:59Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/AlertPublisherNode/index.tsx", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+\n+const styles = genericNodeStyles({\n+  border: `1px solid #ffba01`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(255, 186, 1, 0.1)',\n+  },\n+});\n+interface IAlertPublisherProps extends IAbstractNodeProps<typeof styles> {}\n+class AlertPublisherComponent extends AbstractNode<IAlertPublisherProps> {\n+  public type = 'alertpublisher';\n+\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'alertpublisher') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzUwMQ==", "bodyText": "should there be an abstract component for these endpoints as well?", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363943501", "createdAt": "2020-01-07T20:47:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/TransformNode/index.tsx", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import * as React from 'react';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+import If from 'components/If';\n+import ButtonBase from '@material-ui/core/ButtonBase';\n+const styles = genericNodeStyles({\n+  border: `1px solid #4586f3`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(69, 134, 243, 0.1)',\n+  },\n+});\n+interface ITransformNodeProps extends IAbstractNodeProps<typeof styles> {}\n+class TransformNodeComponent extends AbstractNode<ITransformNodeProps> {\n+  public type = 'transform';\n+  public alertEndpointRef: HTMLElement | null;\n+  public errorEndpointRef: HTMLElement | null;\n+  public getEndpointParams = () => {\n+    const endPointConfigs = this.getEndpointConfig();\n+    const alertEndpointConfigs = this.getAlertEndpointConfig();\n+    const errorEndpointConfigs = this.getErrorEndpointConfig();\n+    return [\n+      {\n+        element: this.regularEndpointRef,\n+        params: endPointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.alertEndpointRef,\n+        params: alertEndpointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.errorEndpointRef,\n+        params: errorEndpointConfigs,\n+        referenceParams: {},\n+      },\n+    ];\n+  };\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'transform') {\n+      return true;\n+    }\n+    return (\n+      ['alertpublisher', 'sink'].indexOf(\n+        connObj.connection.source.getAttribute('data-node-type')\n+      ) === -1\n+    );\n+  };\n+\n+  public render() {\n+    const {\n+      classes,\n+      config: { showAlert = false, showError = false },\n+    } = this.props;\n+    const RegularEndpoint = () => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzc2ODIx", "url": "https://github.com/cdapio/cdap/pull/11805#pullrequestreview-343376821", "createdAt": "2020-01-15T17:03:44Z", "commit": {"oid": "f17043a5d7702de1d4d308a35541e67aeeb261af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921e4d03c6129d6dff74109a632158cbfac47620", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/921e4d03c6129d6dff74109a632158cbfac47620", "committedDate": "2020-01-23T20:55:11Z", "message": "[CDAP-14284] Adds base implementation to handle different types of nodes in React\n\n  - Modifies Default Node to resemble SourceNode\n  - Avoids DAGRenderer to repaint everything on each node manipulation\n  - Modifies raw styles to css-in-js to start with\n  - Extracts generic node functionalities to utilitites module\n  - Adds Source, Transform, Sink Error, Sink & Alertpublisher nodes\n  - Modifies AbstractNode to handle nodes with alert and error endpoints\n  - Modifies Source & Transform nodes based on modifications to AbstractNode\n  - Modifies DAGRenderer to delegate incoming connection validation function to individual nodes\n  - Adds boolean options to show/hide alert and error endpoints in transform nodes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f17043a5d7702de1d4d308a35541e67aeeb261af", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/f17043a5d7702de1d4d308a35541e67aeeb261af", "committedDate": "2020-01-15T07:55:23Z", "message": "Fixes AbstractNode to register connection validation event handler along with node type"}, "afterCommit": {"oid": "921e4d03c6129d6dff74109a632158cbfac47620", "author": {"user": {"login": "ajainarayanan", "name": "Ajai"}}, "url": "https://github.com/cdapio/cdap/commit/921e4d03c6129d6dff74109a632158cbfac47620", "committedDate": "2020-01-23T20:55:11Z", "message": "[CDAP-14284] Adds base implementation to handle different types of nodes in React\n\n  - Modifies Default Node to resemble SourceNode\n  - Avoids DAGRenderer to repaint everything on each node manipulation\n  - Modifies raw styles to css-in-js to start with\n  - Extracts generic node functionalities to utilitites module\n  - Adds Source, Transform, Sink Error, Sink & Alertpublisher nodes\n  - Modifies AbstractNode to handle nodes with alert and error endpoints\n  - Modifies Source & Transform nodes based on modifications to AbstractNode\n  - Modifies DAGRenderer to delegate incoming connection validation function to individual nodes\n  - Adds boolean options to show/hide alert and error endpoints in transform nodes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1349, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}