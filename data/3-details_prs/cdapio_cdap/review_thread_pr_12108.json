{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA4MjE1", "number": 12108, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjozM1rOD1NNyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNTozMVrOD1NSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTE3NjQwOnYy", "diffSide": "RIGHT", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjozM1rOGKhp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjozM1rOGKhp3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDMzMw==", "bodyText": "Include the original exception cause.", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690333", "createdAt": "2020-04-23T10:12:33Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTE3NzA5OnYy", "diffSide": "RIGHT", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjo0NFrOGKhqVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxMjo0NFrOGKhqVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDQ1Mg==", "bodyText": "misalignment", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690452", "createdAt": "2020-04-23T10:12:44Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTE4MjQ2OnYy", "diffSide": "RIGHT", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNDowMFrOGKhtmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNDowMFrOGKhtmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTI5MQ==", "bodyText": "Log as debug level", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691291", "createdAt": "2020-04-23T10:14:00Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTE4MzI4OnYy", "diffSide": "RIGHT", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNDoxN1rOGKhuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNDoxN1rOGKhuJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTQyOA==", "bodyText": "No need to have this. when using field.", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691428", "createdAt": "2020-04-23T10:14:17Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTE4ODQ2OnYy", "diffSide": "RIGHT", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNTozMVrOGKhxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoxNTozMVrOGKhxTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MjIzOQ==", "bodyText": "Misalignment. We align the code as:\ncredentialsProvider.setCredentials(AuthScope.ANY,\n                                   new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));\nor\n```java\ncredentialsProvider.setCredentials(\n  AuthScope.ANY, new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413692239", "createdAt": "2020-04-23T10:15:31Z", "author": {"login": "chtyim"}, "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);\n+          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+          credentialsProvider.setCredentials(AuthScope.ANY,\n+              new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5adf6a91c4545c79b47f49feede024d4b859d8e1"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2770, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}