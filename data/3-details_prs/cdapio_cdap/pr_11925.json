{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTk3Njgz", "number": 11925, "title": "CDAP-16386 fix merged operations fll", "bodyText": "JIRA: https://issues.cask.co/browse/CDAP-16386\nbuild: https://builds.cask.co/browse/CDAP-DUT7127-1\nThe merged operation should not emit from all input fields to all output fields. If it does, the lineage graph will always be from all fields in a dataset to other, which defeats the purpose of fll. Split it up into small field operations which just contains the information about one specific field", "createdAt": "2020-03-06T02:09:28Z", "url": "https://github.com/cdapio/cdap/pull/11925", "merged": true, "mergeCommit": {"oid": "524f0eb2f6938c5a8d84c466c8949e0cc8676a07"}, "closed": true, "closedAt": "2020-03-10T00:03:02Z", "author": {"login": "yaojiefeng"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLHZQJABqjMxMDcwMDM3NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMGuFAABqjMxMTI3NjAzODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "465b2205fb46a00ad4ce1cd006f33e4897aabb9c", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/465b2205fb46a00ad4ce1cd006f33e4897aabb9c", "committedDate": "2020-03-06T02:08:43Z", "message": "CDAP-16386 fix merged operations fll"}, "afterCommit": {"oid": "58454c2a30286f45e5df85cb0a5746005a7f8219", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/58454c2a30286f45e5df85cb0a5746005a7f8219", "committedDate": "2020-03-06T21:55:50Z", "message": "CDAP-16386 fix merged operations fll"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjkwOTAx", "url": "https://github.com/cdapio/cdap/pull/11925#pullrequestreview-370690901", "createdAt": "2020-03-06T23:48:18Z", "commit": {"oid": "58454c2a30286f45e5df85cb0a5746005a7f8219"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0ODoxOFrOFzKrBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo1NTo1MFrOFzKxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjU0OA==", "bodyText": "extra space after =", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389196548", "createdAt": "2020-03-06T23:48:18Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -86,15 +87,17 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n \n   private Map<String, Operation> computeProcessedOperations() {\n     Map<String, Operation> processedOperations = new HashMap<>();\n+    // this stores information about all the outputs on a merge stage, the key is the prefix of the merge\n+    Map<String, List<String>> mergedOutputs = new HashMap<>();\n     for (String stageName : topologicalOrder) {\n       Set<String> stageInputs = stageDag.getNodeInputs(stageName);\n       if (stageInputs.size() > 1 && !noMergeRequiredStages.contains(stageName)) {\n-        addMergeOperation(stageInputs, processedOperations);\n+        addMergeOperation(stageInputs, processedOperations, mergedOutputs);\n       }\n       List<FieldOperation> fieldOperations = stageOperations.get(stageName);\n       for (FieldOperation fieldOperation : fieldOperations) {\n         Operation newOperation = null;\n-        String newOperationName =  prefixedOperationName(stageName, fieldOperation.getName());\n+        String newOperationName =  prefixedName(stageName, fieldOperation.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58454c2a30286f45e5df85cb0a5746005a7f8219"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5ODE0NQ==", "bodyText": "I don't understand what this represents. What is a merge stage? What is a prefix of a merge?", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389198145", "createdAt": "2020-03-06T23:55:50Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -86,15 +87,17 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n \n   private Map<String, Operation> computeProcessedOperations() {\n     Map<String, Operation> processedOperations = new HashMap<>();\n+    // this stores information about all the outputs on a merge stage, the key is the prefix of the merge\n+    Map<String, List<String>> mergedOutputs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58454c2a30286f45e5df85cb0a5746005a7f8219"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34436d557c76de7fa1b8fb57a16649ef635d568d", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/34436d557c76de7fa1b8fb57a16649ef635d568d", "committedDate": "2020-03-09T09:56:44Z", "message": "add comments and remove the unnessary map"}, "afterCommit": {"oid": "81b89f5ac567ec2cb887295d3fa3cb108fff239d", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/81b89f5ac567ec2cb887295d3fa3cb108fff239d", "committedDate": "2020-03-09T10:06:06Z", "message": "add comments and remove the unnessary map"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81b89f5ac567ec2cb887295d3fa3cb108fff239d", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/81b89f5ac567ec2cb887295d3fa3cb108fff239d", "committedDate": "2020-03-09T10:06:06Z", "message": "add comments and remove the unnessary map"}, "afterCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/c8e29358a07aee38221b6ab3de01fcd72931d5ad", "committedDate": "2020-03-09T11:33:53Z", "message": "add comments and remove duplicate origins in parenet stages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTI1Nzg4", "url": "https://github.com/cdapio/cdap/pull/11925#pullrequestreview-371525788", "createdAt": "2020-03-09T21:00:51Z", "commit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowMDo1MVrOFz5NeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyNToxMFrOFz56aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAzMg==", "bodyText": "we should get rid of them. Multiple inputs going into a non-joiner is a no-op since nothing changes in the data. It should not generate a new operation.", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389959032", "createdAt": "2020-03-09T21:00:51Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -47,8 +48,16 @@\n  * converting it into the form the platform expects. This includes prefixing operation names\n  * to make sure they are unique across all the plugins, adding implicit merge operations when\n  * stage has more than one input etc.\n+ * The platform operation requires each operation to specify the previous operation name and the operation name has\n+ * to be unique. Therefore this class will prefix each operation name with the stage name, i.e,\n+ * {stage-name}.{original-name}. When a stage has multiple input stages except Joiner, implicit merge operations are\n+ * generated in order for future stages to look up the previous operations.\n+ *\n+ * TODO: CDAP-16395 revisit this class to see if we can get rid of the merge operations since user will be confused\n+ * about it. If we cannot, should just make this class more understandable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTI4OQ==", "bodyText": "transform3 -> t3 (to match the diagram)", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389959289", "createdAt": "2020-03-09T21:01:20Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -129,34 +150,70 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n     return processedOperations;\n   }\n \n-  private void addMergeOperation(Set<String> stageInputs,\n-                                 Map<String, Operation> processedOperations) {\n+  /**\n+   * Create the implicit merge operations. Each merge operation will have a prefix with\n+   * {stage1-name},(stage2-name),{other-stage-name}.merge, appended with the field name.\n+   * Each merge operation can be seen as an identity transform for all the fields appeared in the outputs in the\n+   * parent stages.\n+   * For example, if a pipeline looks like this:\n+   * src1 -> t1(a,b,c) --|\n+   *                     |-> t3(not joiner) -> sink\n+   * src2 -> t2(a,b,c) --|\n+   * At stage transform3, 3 merge operations are generated for each field a,b,c:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MTE5MQ==", "bodyText": "with this example, stageInputs = <t1, t2> and processedOperations contains operations for src1, src2, t1, and t2?", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389961191", "createdAt": "2020-03-09T21:05:26Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -129,34 +150,70 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n     return processedOperations;\n   }\n \n-  private void addMergeOperation(Set<String> stageInputs,\n-                                 Map<String, Operation> processedOperations) {\n+  /**\n+   * Create the implicit merge operations. Each merge operation will have a prefix with\n+   * {stage1-name},(stage2-name),{other-stage-name}.merge, appended with the field name.\n+   * Each merge operation can be seen as an identity transform for all the fields appeared in the outputs in the\n+   * parent stages.\n+   * For example, if a pipeline looks like this:\n+   * src1 -> t1(a,b,c) --|\n+   *                     |-> t3(not joiner) -> sink\n+   * src2 -> t2(a,b,c) --|\n+   * At stage transform3, 3 merge operations are generated for each field a,b,c:\n+   * 1. name: t1,t2.merge.a, input fields: t1.a, t2.a, output fields: a\n+   * 2. name: t1,t2.merge.b, input fields: t1.b, t2.b, output fields: b\n+   * 3. name: t1,t2.merge.c, input fields: t1.c, t2.c, output fields: c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTg3Ng==", "bodyText": "can you add some comments describing what the key and values are. An example would help as well.", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389969876", "createdAt": "2020-03-09T21:23:42Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -129,34 +150,70 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n     return processedOperations;\n   }\n \n-  private void addMergeOperation(Set<String> stageInputs,\n-                                 Map<String, Operation> processedOperations) {\n+  /**\n+   * Create the implicit merge operations. Each merge operation will have a prefix with\n+   * {stage1-name},(stage2-name),{other-stage-name}.merge, appended with the field name.\n+   * Each merge operation can be seen as an identity transform for all the fields appeared in the outputs in the\n+   * parent stages.\n+   * For example, if a pipeline looks like this:\n+   * src1 -> t1(a,b,c) --|\n+   *                     |-> t3(not joiner) -> sink\n+   * src2 -> t2(a,b,c) --|\n+   * At stage transform3, 3 merge operations are generated for each field a,b,c:\n+   * 1. name: t1,t2.merge.a, input fields: t1.a, t2.a, output fields: a\n+   * 2. name: t1,t2.merge.b, input fields: t1.b, t2.b, output fields: b\n+   * 3. name: t1,t2.merge.c, input fields: t1.c, t2.c, output fields: c\n+   *\n+   * @param stageInputs the stage inputs, the size of this set be greater than 1\n+   * @param processedOperations the processed operations that collect all the result\n+   */\n+  private void addMergeOperation(Set<String> stageInputs, Map<String, Operation> processedOperations) {\n     Set<String> sortedInputs = new TreeSet<>(stageInputs);\n-    String mergeOperationName = prefixedOperationName(Joiner.on(SEPARATOR).join(sortedInputs), \"merge\");\n+    String mergeOperationNamePrefix = getMergeOperationNamePrefix(sortedInputs);\n     String mergeDescription = \"Merged stages: \" + Joiner.on(\",\").join(sortedInputs);\n-    if (processedOperations.containsKey(mergeOperationName)) {\n-      // it is possible that same stages act as an input to multiple stages.\n-      // we should still only add single merge operation for them\n-      return;\n-    }\n-    List<InputField> inputFields = new ArrayList<>();\n+\n+    Map<String, List<InputField>> fieldNameMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MDM3Ng==", "bodyText": "this makes it look like it's still a many to many operation. Would be better to change the Map<String, List<InputField>> into a Map<String, Set>` so that it is clear there is only ever one output, which is the fieldName.", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389970376", "createdAt": "2020-03-09T21:24:48Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -129,34 +150,70 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n     return processedOperations;\n   }\n \n-  private void addMergeOperation(Set<String> stageInputs,\n-                                 Map<String, Operation> processedOperations) {\n+  /**\n+   * Create the implicit merge operations. Each merge operation will have a prefix with\n+   * {stage1-name},(stage2-name),{other-stage-name}.merge, appended with the field name.\n+   * Each merge operation can be seen as an identity transform for all the fields appeared in the outputs in the\n+   * parent stages.\n+   * For example, if a pipeline looks like this:\n+   * src1 -> t1(a,b,c) --|\n+   *                     |-> t3(not joiner) -> sink\n+   * src2 -> t2(a,b,c) --|\n+   * At stage transform3, 3 merge operations are generated for each field a,b,c:\n+   * 1. name: t1,t2.merge.a, input fields: t1.a, t2.a, output fields: a\n+   * 2. name: t1,t2.merge.b, input fields: t1.b, t2.b, output fields: b\n+   * 3. name: t1,t2.merge.c, input fields: t1.c, t2.c, output fields: c\n+   *\n+   * @param stageInputs the stage inputs, the size of this set be greater than 1\n+   * @param processedOperations the processed operations that collect all the result\n+   */\n+  private void addMergeOperation(Set<String> stageInputs, Map<String, Operation> processedOperations) {\n     Set<String> sortedInputs = new TreeSet<>(stageInputs);\n-    String mergeOperationName = prefixedOperationName(Joiner.on(SEPARATOR).join(sortedInputs), \"merge\");\n+    String mergeOperationNamePrefix = getMergeOperationNamePrefix(sortedInputs);\n     String mergeDescription = \"Merged stages: \" + Joiner.on(\",\").join(sortedInputs);\n-    if (processedOperations.containsKey(mergeOperationName)) {\n-      // it is possible that same stages act as an input to multiple stages.\n-      // we should still only add single merge operation for them\n-      return;\n-    }\n-    List<InputField> inputFields = new ArrayList<>();\n+\n+    Map<String, List<InputField>> fieldNameMap = new LinkedHashMap<>();\n+    // create the map that contains the field name of the current stages and the parent stages to the origins\n     for (String inputStage : sortedInputs) {\n       List<String> parentStages = findParentStages(inputStage);\n+      // traverse in a reverse order of parent stages since the parent stages will contain the closest parent\n+      // at the end of the list\n+      Collections.reverse(parentStages);\n+      // this stores the visited field, if we already know the field from the previous parent, do not\n+      // add other origin of this field\n+      Set<String> visitedField = new HashSet<>();\n       for (String parentStage : parentStages) {\n+        // get the map of all the outputs to the origin map from a stage\n         Map<String, String> fieldOrigins = stageOutputsWithOrigins.get(parentStage);\n         for (Map.Entry<String, String> fieldOrigin : fieldOrigins.entrySet()) {\n-          inputFields.add(InputField.of(fieldOrigin.getValue(), fieldOrigin.getKey()));\n+          String fieldName = fieldOrigin.getKey();\n+          if (visitedField.contains(fieldName)) {\n+            continue;\n+          }\n+          List<InputField> inputFields = fieldNameMap.computeIfAbsent(fieldName, k -> new ArrayList<>());\n+          inputFields.add(InputField.of(fieldOrigin.getValue(), fieldName));\n+          visitedField.add(fieldName);\n         }\n       }\n     }\n \n-    Set<String> outputs = new LinkedHashSet<>();\n-    for (InputField inputField : inputFields) {\n-      outputs.add(inputField.getName());\n-    }\n-    TransformOperation merge = new TransformOperation(mergeOperationName, mergeDescription, inputFields,\n-                                                      new ArrayList<>(outputs));\n-    processedOperations.put(merge.getName(), merge);\n+    fieldNameMap.forEach((fieldName, inputFields) -> {\n+      String mergeName = prefixedName(mergeOperationNamePrefix, fieldName);\n+      if (processedOperations.containsKey(mergeName)) {\n+        // it is possible that same stages act as an input to multiple stages.\n+        // we should still only add single merge operation for them\n+        return;\n+      }\n+\n+      Set<String> outputs = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MDUzNg==", "bodyText": "I think it's more understandable for this to be Collections.singletonList(fieldName)", "url": "https://github.com/cdapio/cdap/pull/11925#discussion_r389970536", "createdAt": "2020-03-09T21:25:10Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/lineage/LineageOperationsProcessor.java", "diffHunk": "@@ -129,34 +150,70 @@ public LineageOperationsProcessor(Set<Connection> stageConnections,\n     return processedOperations;\n   }\n \n-  private void addMergeOperation(Set<String> stageInputs,\n-                                 Map<String, Operation> processedOperations) {\n+  /**\n+   * Create the implicit merge operations. Each merge operation will have a prefix with\n+   * {stage1-name},(stage2-name),{other-stage-name}.merge, appended with the field name.\n+   * Each merge operation can be seen as an identity transform for all the fields appeared in the outputs in the\n+   * parent stages.\n+   * For example, if a pipeline looks like this:\n+   * src1 -> t1(a,b,c) --|\n+   *                     |-> t3(not joiner) -> sink\n+   * src2 -> t2(a,b,c) --|\n+   * At stage transform3, 3 merge operations are generated for each field a,b,c:\n+   * 1. name: t1,t2.merge.a, input fields: t1.a, t2.a, output fields: a\n+   * 2. name: t1,t2.merge.b, input fields: t1.b, t2.b, output fields: b\n+   * 3. name: t1,t2.merge.c, input fields: t1.c, t2.c, output fields: c\n+   *\n+   * @param stageInputs the stage inputs, the size of this set be greater than 1\n+   * @param processedOperations the processed operations that collect all the result\n+   */\n+  private void addMergeOperation(Set<String> stageInputs, Map<String, Operation> processedOperations) {\n     Set<String> sortedInputs = new TreeSet<>(stageInputs);\n-    String mergeOperationName = prefixedOperationName(Joiner.on(SEPARATOR).join(sortedInputs), \"merge\");\n+    String mergeOperationNamePrefix = getMergeOperationNamePrefix(sortedInputs);\n     String mergeDescription = \"Merged stages: \" + Joiner.on(\",\").join(sortedInputs);\n-    if (processedOperations.containsKey(mergeOperationName)) {\n-      // it is possible that same stages act as an input to multiple stages.\n-      // we should still only add single merge operation for them\n-      return;\n-    }\n-    List<InputField> inputFields = new ArrayList<>();\n+\n+    Map<String, List<InputField>> fieldNameMap = new LinkedHashMap<>();\n+    // create the map that contains the field name of the current stages and the parent stages to the origins\n     for (String inputStage : sortedInputs) {\n       List<String> parentStages = findParentStages(inputStage);\n+      // traverse in a reverse order of parent stages since the parent stages will contain the closest parent\n+      // at the end of the list\n+      Collections.reverse(parentStages);\n+      // this stores the visited field, if we already know the field from the previous parent, do not\n+      // add other origin of this field\n+      Set<String> visitedField = new HashSet<>();\n       for (String parentStage : parentStages) {\n+        // get the map of all the outputs to the origin map from a stage\n         Map<String, String> fieldOrigins = stageOutputsWithOrigins.get(parentStage);\n         for (Map.Entry<String, String> fieldOrigin : fieldOrigins.entrySet()) {\n-          inputFields.add(InputField.of(fieldOrigin.getValue(), fieldOrigin.getKey()));\n+          String fieldName = fieldOrigin.getKey();\n+          if (visitedField.contains(fieldName)) {\n+            continue;\n+          }\n+          List<InputField> inputFields = fieldNameMap.computeIfAbsent(fieldName, k -> new ArrayList<>());\n+          inputFields.add(InputField.of(fieldOrigin.getValue(), fieldName));\n+          visitedField.add(fieldName);\n         }\n       }\n     }\n \n-    Set<String> outputs = new LinkedHashSet<>();\n-    for (InputField inputField : inputFields) {\n-      outputs.add(inputField.getName());\n-    }\n-    TransformOperation merge = new TransformOperation(mergeOperationName, mergeDescription, inputFields,\n-                                                      new ArrayList<>(outputs));\n-    processedOperations.put(merge.getName(), merge);\n+    fieldNameMap.forEach((fieldName, inputFields) -> {\n+      String mergeName = prefixedName(mergeOperationNamePrefix, fieldName);\n+      if (processedOperations.containsKey(mergeName)) {\n+        // it is possible that same stages act as an input to multiple stages.\n+        // we should still only add single merge operation for them\n+        return;\n+      }\n+\n+      Set<String> outputs = new LinkedHashSet<>();\n+      for (InputField inputField : inputFields) {\n+        outputs.add(inputField.getName());\n+      }\n+\n+      TransformOperation merge = new TransformOperation(mergeName, mergeDescription, inputFields,\n+                                                        new ArrayList<>(outputs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e29358a07aee38221b6ab3de01fcd72931d5ad"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a6c3cc302ab872ba58712032c9b8db8346a661", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/64a6c3cc302ab872ba58712032c9b8db8346a661", "committedDate": "2020-03-09T23:42:39Z", "message": "CDAP-16386 CDAP-16392 fix merged operations fll and joiner fll"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0bc657d16710424adb7a5814181b70e9067e346", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/a0bc657d16710424adb7a5814181b70e9067e346", "committedDate": "2020-03-09T21:44:13Z", "message": "address comments"}, "afterCommit": {"oid": "64a6c3cc302ab872ba58712032c9b8db8346a661", "author": {"user": {"login": "yaojiefeng", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/64a6c3cc302ab872ba58712032c9b8db8346a661", "committedDate": "2020-03-09T23:42:39Z", "message": "CDAP-16386 CDAP-16392 fix merged operations fll and joiner fll"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1333, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}