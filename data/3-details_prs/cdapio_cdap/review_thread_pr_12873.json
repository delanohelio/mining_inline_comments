{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODQyNzMy", "number": 12873, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1OTowOVrOE-57Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToxOTozMVrOE-6NLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk2MjQyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/index.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1OTowOVrOH8T7sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowMzoyMlrOH9BlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMzE4Ng==", "bodyText": "Do you think we'll use this pattern for rendering D3 graphs? Should we make some kind of higher-order component to handle the common features like resizing?", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533003186", "createdAt": "2020-12-01T00:59:09Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect, useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { MyMetricApi } from 'api/metric';\n+import {\n+  COLOR_MAP,\n+  IThroughputData,\n+  renderThroughputGraph,\n+} from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import MetricsQueryHelper from 'services/MetricsQueryHelper';\n+import { PROGRAM_INFO } from 'components/Replicator/constants';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { throughputParser } from 'components/Replicator/Detail/ThroughputGraph/parser';\n+import { Observable } from 'rxjs/Observable';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    root: {\n+      position: 'relative',\n+    },\n+    heading: {\n+      textAlign: 'center',\n+    },\n+    square: {\n+      display: 'inline-block',\n+      height: '15px',\n+      width: '15px',\n+      marginRight: '7px',\n+    },\n+    inserts: {\n+      backgroundColor: COLOR_MAP.inserts,\n+    },\n+    updates: {\n+      backgroundColor: COLOR_MAP.updates,\n+    },\n+    deletes: {\n+      backgroundColor: COLOR_MAP.deletes,\n+    },\n+    bottomLegend: {\n+      marginTop: '25px',\n+      padding: '0 15px',\n+      display: 'flex',\n+\n+      '& > div': {\n+        marginRight: '15px',\n+      },\n+    },\n+  };\n+};\n+\n+const CONTAINER_ID = 'replication-throughput-graph';\n+\n+const ThroughputGraphView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMjY1NA==", "bodyText": "Maybe HOC is the wrong idea... it could be injectable like\n<ChartContainer\n  data={thoughputData}\n  chartRenderFunc={throughputChart}\n  width={w}\n  height={h}\n  ...\n/>\n\nor even\n<BarChart\n  data={throughputData}\n  traces=['inserts', 'updates', 'deletes', 'errors']\n  ...\n/>", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533612654", "createdAt": "2020-12-01T17:59:35Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect, useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { MyMetricApi } from 'api/metric';\n+import {\n+  COLOR_MAP,\n+  IThroughputData,\n+  renderThroughputGraph,\n+} from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import MetricsQueryHelper from 'services/MetricsQueryHelper';\n+import { PROGRAM_INFO } from 'components/Replicator/constants';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { throughputParser } from 'components/Replicator/Detail/ThroughputGraph/parser';\n+import { Observable } from 'rxjs/Observable';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    root: {\n+      position: 'relative',\n+    },\n+    heading: {\n+      textAlign: 'center',\n+    },\n+    square: {\n+      display: 'inline-block',\n+      height: '15px',\n+      width: '15px',\n+      marginRight: '7px',\n+    },\n+    inserts: {\n+      backgroundColor: COLOR_MAP.inserts,\n+    },\n+    updates: {\n+      backgroundColor: COLOR_MAP.updates,\n+    },\n+    deletes: {\n+      backgroundColor: COLOR_MAP.deletes,\n+    },\n+    bottomLegend: {\n+      marginTop: '25px',\n+      padding: '0 15px',\n+      display: 'flex',\n+\n+      '& > div': {\n+        marginRight: '15px',\n+      },\n+    },\n+  };\n+};\n+\n+const CONTAINER_ID = 'replication-throughput-graph';\n+\n+const ThroughputGraphView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMzE4Ng=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MTA2Mg==", "bodyText": "I like the idea of ChartContainer that will handle the window resizing. For specific BarCharts, so far our graphs had been too customized that I would be weary about abstracting it out. I think I will start with the ChartContainer, then moving forward if we observe another pattern for specific graph, we can add another layer of abstraction", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533751062", "createdAt": "2020-12-01T22:03:22Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/index.tsx", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect, useContext } from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { MyMetricApi } from 'api/metric';\n+import {\n+  COLOR_MAP,\n+  IThroughputData,\n+  renderThroughputGraph,\n+} from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import MetricsQueryHelper from 'services/MetricsQueryHelper';\n+import { PROGRAM_INFO } from 'components/Replicator/constants';\n+import { DetailContext } from 'components/Replicator/Detail';\n+import { throughputParser } from 'components/Replicator/Detail/ThroughputGraph/parser';\n+import { Observable } from 'rxjs/Observable';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    root: {\n+      position: 'relative',\n+    },\n+    heading: {\n+      textAlign: 'center',\n+    },\n+    square: {\n+      display: 'inline-block',\n+      height: '15px',\n+      width: '15px',\n+      marginRight: '7px',\n+    },\n+    inserts: {\n+      backgroundColor: COLOR_MAP.inserts,\n+    },\n+    updates: {\n+      backgroundColor: COLOR_MAP.updates,\n+    },\n+    deletes: {\n+      backgroundColor: COLOR_MAP.deletes,\n+    },\n+    bottomLegend: {\n+      marginTop: '25px',\n+      padding: '0 15px',\n+      display: 'flex',\n+\n+      '& > div': {\n+        marginRight: '15px',\n+      },\n+    },\n+  };\n+};\n+\n+const CONTAINER_ID = 'replication-throughput-graph';\n+\n+const ThroughputGraphView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMzE4Ng=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk5MjgwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/parser.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToxMjoxM1rOH8UM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNDo0N1rOH_dEFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwNzYwNQ==", "bodyText": "Would it be better to show this as 0 or as a break in the graph?", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533007605", "createdAt": "2020-12-01T01:12:13Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/parser.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { IThroughputData } from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+\n+interface IMetricData {\n+  time: number;\n+  value: number;\n+}\n+\n+interface IMetricSeries {\n+  metricName: string;\n+  data: IMetricData[];\n+}\n+\n+interface IRawMetricData {\n+  startTime: number;\n+  endTime: number;\n+  resolution: string;\n+  series: IMetricSeries[];\n+}\n+\n+const METRIC_NAME_MAP = {\n+  'user.dml.insert': 'inserts',\n+  'user.dml.update': 'updates',\n+  'user.dml.delete': 'deletes',\n+  'user.dml.error': 'errors',\n+};\n+\n+const INITIAL_DATA = {\n+  inserts: 0,\n+  updates: 0,\n+  deletes: 0,\n+  errors: 0,\n+};\n+\n+export function throughputParser(rawData: IRawMetricData): IThroughputData[] {\n+  /**\n+   * <time>: {\n+   *    time: <value>,\n+   *    inserts: <value>,\n+   *    updates: <value>,\n+   *    deletes: <value>,\n+   *    errors: <value>\n+   * }\n+   */\n+  const timeMap: Record<string, IThroughputData> = {};\n+\n+  rawData.series.forEach((metricSeries) => {\n+    const metricType = METRIC_NAME_MAP[metricSeries.metricName];\n+\n+    metricSeries.data.forEach((metricData) => {\n+      const time = metricData.time;\n+      if (!timeMap[time]) {\n+        timeMap[time] = {\n+          time,\n+          ...INITIAL_DATA,\n+        };\n+      }\n+\n+      timeMap[time][metricType] = metricData.value;\n+    });\n+  });\n+\n+  // Interpolate data with missing times\n+  const resolution = parseInt(rawData.resolution, 10);\n+  const startTime = rawData.startTime - (rawData.startTime % resolution);\n+  let currentTime = startTime;\n+  while (currentTime < rawData.endTime) {\n+    if (!timeMap[currentTime]) {\n+      timeMap[currentTime] = {\n+        time: currentTime,\n+        ...INITIAL_DATA,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MTYzMA==", "bodyText": "Can you elaborate what you meant by showing as 0? Currently if there's no data, there is no bar on the graph for that time period", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533751630", "createdAt": "2020-12-01T22:04:25Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/parser.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { IThroughputData } from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+\n+interface IMetricData {\n+  time: number;\n+  value: number;\n+}\n+\n+interface IMetricSeries {\n+  metricName: string;\n+  data: IMetricData[];\n+}\n+\n+interface IRawMetricData {\n+  startTime: number;\n+  endTime: number;\n+  resolution: string;\n+  series: IMetricSeries[];\n+}\n+\n+const METRIC_NAME_MAP = {\n+  'user.dml.insert': 'inserts',\n+  'user.dml.update': 'updates',\n+  'user.dml.delete': 'deletes',\n+  'user.dml.error': 'errors',\n+};\n+\n+const INITIAL_DATA = {\n+  inserts: 0,\n+  updates: 0,\n+  deletes: 0,\n+  errors: 0,\n+};\n+\n+export function throughputParser(rawData: IRawMetricData): IThroughputData[] {\n+  /**\n+   * <time>: {\n+   *    time: <value>,\n+   *    inserts: <value>,\n+   *    updates: <value>,\n+   *    deletes: <value>,\n+   *    errors: <value>\n+   * }\n+   */\n+  const timeMap: Record<string, IThroughputData> = {};\n+\n+  rawData.series.forEach((metricSeries) => {\n+    const metricType = METRIC_NAME_MAP[metricSeries.metricName];\n+\n+    metricSeries.data.forEach((metricData) => {\n+      const time = metricData.time;\n+      if (!timeMap[time]) {\n+        timeMap[time] = {\n+          time,\n+          ...INITIAL_DATA,\n+        };\n+      }\n+\n+      timeMap[time][metricType] = metricData.value;\n+    });\n+  });\n+\n+  // Interpolate data with missing times\n+  const resolution = parseInt(rawData.resolution, 10);\n+  const startTime = rawData.startTime - (rawData.startTime % resolution);\n+  let currentTime = startTime;\n+  while (currentTime < rawData.endTime) {\n+    if (!timeMap[currentTime]) {\n+      timeMap[currentTime] = {\n+        time: currentTime,\n+        ...INITIAL_DATA,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwNzYwNQ=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5ODUxOA==", "bodyText": "When I originally read this part of the code, I assumed it was a line chart, not a bar chart. So leaving this aside, the only issue I can think of would be if there's a tooltip over 0 values and if that should be handled differently for missing data..", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r536298518", "createdAt": "2020-12-04T18:34:47Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/parser.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { IThroughputData } from 'components/Replicator/Detail/ThroughputGraph/throughput';\n+\n+interface IMetricData {\n+  time: number;\n+  value: number;\n+}\n+\n+interface IMetricSeries {\n+  metricName: string;\n+  data: IMetricData[];\n+}\n+\n+interface IRawMetricData {\n+  startTime: number;\n+  endTime: number;\n+  resolution: string;\n+  series: IMetricSeries[];\n+}\n+\n+const METRIC_NAME_MAP = {\n+  'user.dml.insert': 'inserts',\n+  'user.dml.update': 'updates',\n+  'user.dml.delete': 'deletes',\n+  'user.dml.error': 'errors',\n+};\n+\n+const INITIAL_DATA = {\n+  inserts: 0,\n+  updates: 0,\n+  deletes: 0,\n+  errors: 0,\n+};\n+\n+export function throughputParser(rawData: IRawMetricData): IThroughputData[] {\n+  /**\n+   * <time>: {\n+   *    time: <value>,\n+   *    inserts: <value>,\n+   *    updates: <value>,\n+   *    deletes: <value>,\n+   *    errors: <value>\n+   * }\n+   */\n+  const timeMap: Record<string, IThroughputData> = {};\n+\n+  rawData.series.forEach((metricSeries) => {\n+    const metricType = METRIC_NAME_MAP[metricSeries.metricName];\n+\n+    metricSeries.data.forEach((metricData) => {\n+      const time = metricData.time;\n+      if (!timeMap[time]) {\n+        timeMap[time] = {\n+          time,\n+          ...INITIAL_DATA,\n+        };\n+      }\n+\n+      timeMap[time][metricType] = metricData.value;\n+    });\n+  });\n+\n+  // Interpolate data with missing times\n+  const resolution = parseInt(rawData.resolution, 10);\n+  const startTime = rawData.startTime - (rawData.startTime % resolution);\n+  let currentTime = startTime;\n+  while (currentTime < rawData.endTime) {\n+    if (!timeMap[currentTime]) {\n+      timeMap[currentTime] = {\n+        time: currentTime,\n+        ...INITIAL_DATA,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwNzYwNQ=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzk5NzIyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToxNDoyMVrOH8UPmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo0NTo0MFrOH90REg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwODI4Mw==", "bodyText": "Where are these colors from?", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533008283", "createdAt": "2020-12-01T01:14:21Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+import { objectQuery } from 'services/helpers';\n+\n+export const COLOR_MAP = {\n+  inserts: '#185ABC',\n+  updates: '#669DF6',\n+  deletes: '#AECBFA',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MjAxNA==", "bodyText": "These colors are coming from the design. These does not come from our themes color palette", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533752014", "createdAt": "2020-12-01T22:05:08Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+import { objectQuery } from 'services/helpers';\n+\n+export const COLOR_MAP = {\n+  inserts: '#185ABC',\n+  updates: '#669DF6',\n+  deletes: '#AECBFA',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwODI4Mw=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4MTUyMg==", "bodyText": "If we are adding colors we might as well add it to the palette.", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r534581522", "createdAt": "2020-12-03T00:45:40Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+import { objectQuery } from 'services/helpers';\n+\n+export const COLOR_MAP = {\n+  inserts: '#185ABC',\n+  updates: '#669DF6',\n+  deletes: '#AECBFA',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwODI4Mw=="}, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDAwODEzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToxOTozMVrOH8UV6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToxOTozMVrOH8UV6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwOTg5OQ==", "bodyText": "We should move our formatting functions to a shared implementation.", "url": "https://github.com/cdapio/cdap/pull/12873#discussion_r533009899", "createdAt": "2020-12-01T01:19:31Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/ThroughputGraph/throughput.ts", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+import { objectQuery } from 'services/helpers';\n+\n+export const COLOR_MAP = {\n+  inserts: '#185ABC',\n+  updates: '#669DF6',\n+  deletes: '#AECBFA',\n+  horizontalLine: '#DDDDDD',\n+  verticalLine: '#979797',\n+  legend: '#999999',\n+  tick: '#333333',\n+};\n+\n+export interface IThroughputData {\n+  time: number;\n+  inserts: number;\n+  updates: number;\n+  deletes: number;\n+  errors: number;\n+}\n+\n+const timeFormat = d3.timeFormat('%m/%d %I:%M %p');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f757c2f84dbc8504b9adda8f28f7248af5307965"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2614, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}