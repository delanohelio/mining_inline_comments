{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODE5NTQ0", "number": 12803, "title": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark", "bodyText": "Sends values written to MR Counter for bytes read/written to Spark metrics\nRewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten", "createdAt": "2020-10-12T21:07:44Z", "url": "https://github.com/cdapio/cdap/pull/12803", "merged": true, "mergeCommit": {"oid": "c23920c9c4d9a4cdafd0c2d4e947edb61d5ab108"}, "closed": true, "closedAt": "2020-10-15T08:02:04Z", "author": {"login": "chtyim"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR6o8nABqjM4NjgzMzA1NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSl5bOgBqjM4Nzg5Mjc1OTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6117bca925cabc3aa2803e652ea7c37378fde9d5", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/6117bca925cabc3aa2803e652ea7c37378fde9d5", "committedDate": "2020-10-12T21:04:38Z", "message": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark\n\n- Sends values written to MR Counter for bytes read/written to Spark metrics\n- Rewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten"}, "afterCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/b142e8d0cb0fdc95f0a97e37395982e207886db3", "committedDate": "2020-10-12T21:12:41Z", "message": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark\n\n- Sends values written to MR Counter for bytes read/written to Spark metrics\n- Rewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODMwNzY5", "url": "https://github.com/cdapio/cdap/pull/12803#pullrequestreview-508830769", "createdAt": "2020-10-14T23:05:00Z", "commit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzowNTowMFrOHhpwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyMDoxM1rOHhqaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0OTIzMA==", "bodyText": "why is this needed? Is it getting serialized/deserialized somewhere?", "url": "https://github.com/cdapio/cdap/pull/12803#discussion_r505049230", "createdAt": "2020-10-14T23:05:00Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/batch/BasicInputFormatProvider.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.batch;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.cdap.cdap.api.data.batch.InputFormatProvider;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An {@link InputFormatProvider} that simply take a class name and a set of configurations.\n+ */\n+public class BasicInputFormatProvider implements InputFormatProvider {\n+\n+  private final String inputFormatClassName;\n+  private final Map<String, String> configuration;\n+\n+  public BasicInputFormatProvider(String inputFormatClassName, Map<String, String> configuration) {\n+    this.inputFormatClassName = inputFormatClassName;\n+    this.configuration = ImmutableMap.copyOf(configuration);\n+  }\n+\n+  public BasicInputFormatProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1MDE2OA==", "bodyText": "should we return an unmodifiable map?", "url": "https://github.com/cdapio/cdap/pull/12803#discussion_r505050168", "createdAt": "2020-10-14T23:06:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/batch/BasicOutputFormatProvider.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.batch;\n+\n+import io.cdap.cdap.api.data.batch.OutputFormatProvider;\n+\n+import java.util.Map;\n+\n+/**\n+ * An {@link OutputFormatProvider} that simply take a class name and a set of configurations.\n+ */\n+public class BasicOutputFormatProvider implements OutputFormatProvider {\n+\n+  private final String outputFormatClassName;\n+  private final Map<String, String> outputFormatConfiguration;\n+\n+  public BasicOutputFormatProvider(String outputFormatClassName, Map<String, String> outputFormatConfiguration) {\n+    this.outputFormatClassName = outputFormatClassName;\n+    this.outputFormatConfiguration = outputFormatConfiguration;\n+  }\n+\n+  @Override\n+  public String getOutputFormatClassName() {\n+    return outputFormatClassName;\n+  }\n+\n+  @Override\n+  public Map<String, String> getOutputFormatConfiguration() {\n+    return outputFormatConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1NjQzMg==", "bodyText": "would be good to add comments here too on why it's not needed for files", "url": "https://github.com/cdapio/cdap/pull/12803#discussion_r505056432", "createdAt": "2020-10-14T23:15:18Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/io/TrackingOutputFormat.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.spark.io;\n+\n+import io.cdap.cdap.etl.batch.DelegatingOutputFormat;\n+import org.apache.hadoop.mapreduce.OutputCommitter;\n+import org.apache.hadoop.mapreduce.OutputFormat;\n+import org.apache.hadoop.mapreduce.RecordWriter;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n+\n+import java.io.IOException;\n+\n+/**\n+ * An {@link OutputFormat} that enables metrics tracking through {@link TaskAttemptContext} counters to Spark metrics.\n+ *\n+ * @param <K> type of key to write\n+ * @param <V> type of value to write\n+ */\n+public class TrackingOutputFormat<K, V> extends DelegatingOutputFormat<K, V> {\n+\n+  @Override\n+  public RecordWriter<K, V> getRecordWriter(TaskAttemptContext context) throws IOException, InterruptedException {\n+    OutputFormat<K, V> delegate = getDelegate(context.getConfiguration());\n+\n+    if (delegate instanceof FileOutputFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1ODM1NA==", "bodyText": "It may also be useful to track how many splits an input format generates.", "url": "https://github.com/cdapio/cdap/pull/12803#discussion_r505058354", "createdAt": "2020-10-14T23:18:13Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/io/TrackingInputFormat.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.spark.io;\n+\n+import io.cdap.cdap.etl.batch.DelegatingInputFormat;\n+import org.apache.hadoop.mapreduce.InputFormat;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit;\n+\n+import java.io.IOException;\n+\n+/**\n+ * An {@link InputFormat} that enables metrics tracking through {@link TaskAttemptContext} counters to Spark metrics.\n+ *\n+ * @param <K> type of key to read\n+ * @param <V> type of value to read\n+ */\n+public class TrackingInputFormat<K, V> extends DelegatingInputFormat<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1OTg3NQ==", "bodyText": "nit: overwritting -> overwriting\nAlso curious, when does something call setBytesWritten(0) after setting it to a non-zero value? Is this just a Spark bug?", "url": "https://github.com/cdapio/cdap/pull/12803#discussion_r505059875", "createdAt": "2020-10-14T23:20:13Z", "author": {"login": "albertshau"}, "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -224,10 +225,57 @@ public SparkClassRewriter(Function<String, InputStream> resourceLookup, boolean\n       // Rewrite Spark DiskStore class and classes in the network package for Netty 4.1 compatibility\n       return rewriteSparkNetworkClass(input);\n     }\n+    if (className.equals(SPARK_OUTPUT_METRICS.getClassName())) {\n+      // Rewrite the Spark OutputMetrics to skip overwriting bytes written metrics with 0.\n+      return rewriteOutputMetrics(SPARK_OUTPUT_METRICS, input);\n+    }\n \n     return null;\n   }\n \n+  /**\n+   * Rewrites the OutputMetrics#setBytesWritten method to skip recording zero (0) value to avoid overwritting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODM2OTM2", "url": "https://github.com/cdapio/cdap/pull/12803#pullrequestreview-508836936", "createdAt": "2020-10-14T23:21:34Z", "commit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31c2f8cc276d721f773213507acc0188a3037169", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/31c2f8cc276d721f773213507acc0188a3037169", "committedDate": "2020-10-14T23:36:55Z", "message": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark\n\n- Sends values written to MR Counter for bytes read/written to Spark metrics\n- Rewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b142e8d0cb0fdc95f0a97e37395982e207886db3", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/b142e8d0cb0fdc95f0a97e37395982e207886db3", "committedDate": "2020-10-12T21:12:41Z", "message": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark\n\n- Sends values written to MR Counter for bytes read/written to Spark metrics\n- Rewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten"}, "afterCommit": {"oid": "31c2f8cc276d721f773213507acc0188a3037169", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/31c2f8cc276d721f773213507acc0188a3037169", "committedDate": "2020-10-14T23:36:55Z", "message": "(CDAP-17332) Enabling writing bytes read/written metrics in Spark\n\n- Sends values written to MR Counter for bytes read/written to Spark metrics\n- Rewrite the OutputMetrics in Spark to ignore setting bytes written to 0\n-- This is to prevent task metrics being overwritten"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1684, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}