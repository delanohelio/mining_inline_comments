{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzA5Nzcz", "number": 12044, "title": "(CDAP-16369) Introduce new runtime service", "bodyText": "Introduced a new RuntimeService to prepare for taking runtime monitoring calls from the remote runtime. It contains two main components, namely the server and client.\nServer\n\nRuns in the CDAP side\nDesigned to be executed as an isolated process\nThis code change doesn't include running the server in standalone mode (TBD)\nIt validates requests from client by checking it is a valid running program based on the request validator.\nIt listen to program status events to maintain a replicated view of program status for request validation\n\nClient\n\nRuns in the remote runtime. Should be run in DefaultRuntimeJob (not part of this PR)\nPeriodically poll local TMS and replicates them to the Runtime Server", "createdAt": "2020-04-09T09:20:36Z", "url": "https://github.com/cdapio/cdap/pull/12044", "merged": true, "mergeCommit": {"oid": "97dfbdd421a4bed4516dc85904cd12a96cf3a239"}, "closed": true, "closedAt": "2020-04-10T00:59:39Z", "author": {"login": "chtyim"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV4KmMgH2gAyNDAxMzA5NzczOjZlNmQwMWVhZTFhYjU4NTYwNTU5ZTliMjY3MDhiODJmOTMyYTg1YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWCyqnABqjMyMTk5MTQyMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e6d01eae1ab58560559e9b26708b82f932a85ac", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/6e6d01eae1ab58560559e9b26708b82f932a85ac", "committedDate": "2020-04-09T08:24:45Z", "message": "(CDAP-16369) Simplifies Guice bindings for k8s services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2426fe8aceefcdf26b92fca42928cbe19c9cda7", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/f2426fe8aceefcdf26b92fca42928cbe19c9cda7", "committedDate": "2020-04-09T08:24:45Z", "message": "(CDAP-16369) Use RemoteExecutionLogProcessor to process logs from remote runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb6564cf986497945be117f09bbfc2e6b9b09236", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/fb6564cf986497945be117f09bbfc2e6b9b09236", "committedDate": "2020-04-09T08:24:45Z", "message": "Refactor methods from RuntimeMonitor into util class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96659c516b2098ba8385c5a541407cd3e1503f45", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/96659c516b2098ba8385c5a541407cd3e1503f45", "committedDate": "2020-04-09T08:24:45Z", "message": "(CDAP-16369) Adds DirectRuntimeRequestValidator\n\n- An implementation that reads from underlying store directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d51add93b010e434eada65b8b0fb9fcd28fd6e1a", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/d51add93b010e434eada65b8b0fb9fcd28fd6e1a", "committedDate": "2020-04-09T08:24:46Z", "message": "(CDAP-16369) Added RuntimeClientService\n\nFor periodically sending data to runtime server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abec131568f2ff15cd1c3c6e3a8b8991567e6a36", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/abec131568f2ff15cd1c3c6e3a8b8991567e6a36", "committedDate": "2020-04-09T08:24:46Z", "message": "(CDAP-16369) Added RuntimeServiceMain and tests\n\n- This is for running RuntimeServer in a separate process"}, "afterCommit": {"oid": "5c285cec5afdd78ba8b75c2fafa16438a774b82f", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/5c285cec5afdd78ba8b75c2fafa16438a774b82f", "committedDate": "2020-04-09T18:11:12Z", "message": "(CDAP-16369) Added RuntimeServiceMain and tests\n\n- This is for running RuntimeServer in a separate process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDAwOTg5", "url": "https://github.com/cdapio/cdap/pull/12044#pullrequestreview-391000989", "createdAt": "2020-04-09T17:43:07Z", "commit": {"oid": "abec131568f2ff15cd1c3c6e3a8b8991567e6a36"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NToxNlrOGDi8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NjowMVrOGDlDHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MTQ4MA==", "bodyText": "I think we should refactor this method and separate this part out. isValid method is doing more than validation - such as mutating state in local store.", "url": "https://github.com/cdapio/cdap/pull/12044#discussion_r406371480", "createdAt": "2020-04-09T17:45:16Z", "author": {"login": "CuriousVini"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/monitor/DirectRuntimeRequestValidator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.monitor;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.BadRequestException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.ServiceUnavailableException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.AppMetadataStore;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.logging.gateway.handlers.ProgramRunRecordFetcher;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link RuntimeRequestValidator} implementation that reads from the runtime table directly.\n+ */\n+public final class DirectRuntimeRequestValidator implements RuntimeRequestValidator {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DirectRuntimeRequestValidator.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final TransactionRunner txRunner;\n+  private final ProgramRunRecordFetcher runRecordFetcher;\n+  private final LoadingCache<ProgramRunId, Boolean> programRunsCache;\n+\n+  @Inject\n+  DirectRuntimeRequestValidator(CConfiguration cConf, TransactionRunner txRunner,\n+                                ProgramRunRecordFetcher runRecordFetcher) {\n+    this.txRunner = txRunner;\n+    this.runRecordFetcher = runRecordFetcher;\n+\n+    // Configure the cache with expiry the poll time.\n+    // This helps reducing the actual lookup for a burst of requests within one poll interval,\n+    // but not to keep it too long so that data becomes stale.\n+    long pollTimeMillis = cConf.getLong(Constants.RuntimeMonitor.POLL_TIME_MS);\n+    this.programRunsCache = CacheBuilder.newBuilder()\n+      .expireAfterWrite(pollTimeMillis, TimeUnit.MILLISECONDS)\n+      .build(new CacheLoader<ProgramRunId, Boolean>() {\n+        @Override\n+        public Boolean load(ProgramRunId programRunId) throws IOException {\n+          return isValid(programRunId);\n+        }\n+      });\n+  }\n+\n+  @Override\n+  public void validate(ProgramRunId programRunId, HttpRequest request) throws BadRequestException {\n+    boolean exists;\n+    try {\n+      exists = programRunsCache.get(programRunId);\n+    } catch (Exception e) {\n+      throw new ServiceUnavailableException(Constants.Service.RUNTIME, e);\n+    }\n+    if (!exists) {\n+      throw new BadRequestException(\"Program run \" + programRunId + \" is not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Checks if the given {@link ProgramRunId} is valid.\n+   */\n+  private boolean isValid(ProgramRunId programRunId) throws IOException {\n+    RunRecordDetail runRecord = TransactionRunners.run(txRunner, context -> {\n+      return AppMetadataStore.create(context).getRun(programRunId);\n+    }, IOException.class);\n+\n+    if (runRecord != null) {\n+      return !runRecord.getStatus().isEndState();\n+    }\n+    // If it is not found in the local store, which should be very rare, try to fetch the run record remotely.\n+    try {\n+      LOG.info(\"Fetching program run details for {} remotely\", programRunId);\n+      runRecord = runRecordFetcher.getRunRecordMeta(programRunId);\n+      // Try to update the local store\n+      insertRunRecord(programRunId, runRecord);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abec131568f2ff15cd1c3c6e3a8b8991567e6a36"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDY4MA==", "bodyText": "Remotely fetching program run details for {}", "url": "https://github.com/cdapio/cdap/pull/12044#discussion_r406380680", "createdAt": "2020-04-09T18:01:18Z", "author": {"login": "CuriousVini"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/monitor/DirectRuntimeRequestValidator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.monitor;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.BadRequestException;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.ServiceUnavailableException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.store.AppMetadataStore;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n+import io.cdap.cdap.logging.gateway.handlers.ProgramRunRecordFetcher;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link RuntimeRequestValidator} implementation that reads from the runtime table directly.\n+ */\n+public final class DirectRuntimeRequestValidator implements RuntimeRequestValidator {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DirectRuntimeRequestValidator.class);\n+  private static final Gson GSON = new Gson();\n+\n+  private final TransactionRunner txRunner;\n+  private final ProgramRunRecordFetcher runRecordFetcher;\n+  private final LoadingCache<ProgramRunId, Boolean> programRunsCache;\n+\n+  @Inject\n+  DirectRuntimeRequestValidator(CConfiguration cConf, TransactionRunner txRunner,\n+                                ProgramRunRecordFetcher runRecordFetcher) {\n+    this.txRunner = txRunner;\n+    this.runRecordFetcher = runRecordFetcher;\n+\n+    // Configure the cache with expiry the poll time.\n+    // This helps reducing the actual lookup for a burst of requests within one poll interval,\n+    // but not to keep it too long so that data becomes stale.\n+    long pollTimeMillis = cConf.getLong(Constants.RuntimeMonitor.POLL_TIME_MS);\n+    this.programRunsCache = CacheBuilder.newBuilder()\n+      .expireAfterWrite(pollTimeMillis, TimeUnit.MILLISECONDS)\n+      .build(new CacheLoader<ProgramRunId, Boolean>() {\n+        @Override\n+        public Boolean load(ProgramRunId programRunId) throws IOException {\n+          return isValid(programRunId);\n+        }\n+      });\n+  }\n+\n+  @Override\n+  public void validate(ProgramRunId programRunId, HttpRequest request) throws BadRequestException {\n+    boolean exists;\n+    try {\n+      exists = programRunsCache.get(programRunId);\n+    } catch (Exception e) {\n+      throw new ServiceUnavailableException(Constants.Service.RUNTIME, e);\n+    }\n+    if (!exists) {\n+      throw new BadRequestException(\"Program run \" + programRunId + \" is not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Checks if the given {@link ProgramRunId} is valid.\n+   */\n+  private boolean isValid(ProgramRunId programRunId) throws IOException {\n+    RunRecordDetail runRecord = TransactionRunners.run(txRunner, context -> {\n+      return AppMetadataStore.create(context).getRun(programRunId);\n+    }, IOException.class);\n+\n+    if (runRecord != null) {\n+      return !runRecord.getStatus().isEndState();\n+    }\n+    // If it is not found in the local store, which should be very rare, try to fetch the run record remotely.\n+    try {\n+      LOG.info(\"Fetching program run details for {} remotely\", programRunId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abec131568f2ff15cd1c3c6e3a8b8991567e6a36"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMzk2NA==", "bodyText": "what exception will be caught by this outer catch?", "url": "https://github.com/cdapio/cdap/pull/12044#discussion_r406403964", "createdAt": "2020-04-09T18:42:30Z", "author": {"login": "CuriousVini"}, "path": "cdap-common/src/main/java/io/cdap/cdap/common/service/AbstractRetryableScheduledService.java", "diffHunk": "@@ -149,28 +152,35 @@ protected long handleRetriesExhausted(Exception e) throws Exception {\n   @Override\n   protected final void runOneIteration() throws Exception {\n     try {\n-      if (nonFailureStartTime == 0L) {\n-        nonFailureStartTime = System.currentTimeMillis();\n-      }\n+      try {\n+        if (nonFailureStartTime == 0L) {\n+          nonFailureStartTime = System.currentTimeMillis();\n+        }\n \n-      delayMillis = runTask();\n-      nonFailureStartTime = 0L;\n-      failureCount = 0;\n-    } catch (Exception e) {\n-      if (!shouldRetry(e)) {\n-        throw e;\n-      }\n-\n-      long delayMillis = retryStrategy.nextRetry(++failureCount, nonFailureStartTime);\n-      if (delayMillis < 0) {\n-        e.addSuppressed(new RetriesExhaustedException(String.format(\"Retries exhausted after %d failures and %d ms.\",\n-                                                                    failureCount,\n-                                                                    System.currentTimeMillis() - nonFailureStartTime)));\n-        delayMillis = Math.max(0L, handleRetriesExhausted(e));\n+        delayMillis = runTask();\n         nonFailureStartTime = 0L;\n         failureCount = 0;\n+      } catch (Exception e) {\n+        OUTAGE_LOG.warn(\"Failed to execute task for scheduled service {}\", getServiceName(), e);\n+        if (!shouldRetry(e)) {\n+          throw e;\n+        }\n+\n+        long delayMillis = retryStrategy.nextRetry(++failureCount, nonFailureStartTime);\n+        if (delayMillis < 0) {\n+          e.addSuppressed(\n+            new RetriesExhaustedException(String.format(\"Retries exhausted after %d failures and %d ms.\",\n+                                                        failureCount,\n+                                                        System.currentTimeMillis() - nonFailureStartTime)));\n+          delayMillis = Math.max(0L, handleRetriesExhausted(e));\n+          nonFailureStartTime = 0L;\n+          failureCount = 0;\n+        }\n+        this.delayMillis = delayMillis;\n       }\n-      this.delayMillis = delayMillis;\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c285cec5afdd78ba8b75c2fafa16438a774b82f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTg2NA==", "bodyText": "unused?", "url": "https://github.com/cdapio/cdap/pull/12044#discussion_r406405864", "createdAt": "2020-04-09T18:45:55Z", "author": {"login": "CuriousVini"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/monitor/RuntimeProgramStatusSubscriberService.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.monitor;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.metrics.MetricsCollectionService;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.utils.ImmutablePair;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.services.AbstractNotificationSubscriberService;\n+import io.cdap.cdap.internal.app.store.AppMetadataStore;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.proto.Notification;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import io.cdap.cdap.spi.data.StructuredTableAdmin;\n+import io.cdap.cdap.spi.data.StructuredTableContext;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A TMS subscriber service to replicate program status from the\n+ * {@link Constants.AppFabric#PROGRAM_STATUS_RECORD_EVENT_TOPIC} to a local storage.\n+ * It is for the {@link DirectRuntimeRequestValidator} to validate incoming requests that it is coming from\n+ * a running program.\n+ */\n+public class RuntimeProgramStatusSubscriberService extends AbstractNotificationSubscriberService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RuntimeProgramStatusSubscriberService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  @Inject\n+  RuntimeProgramStatusSubscriberService(CConfiguration cConf, MessagingService messagingService,\n+                                        DiscoveryServiceClient discoveryServiceClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c285cec5afdd78ba8b75c2fafa16438a774b82f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTkxOQ==", "bodyText": "unused?", "url": "https://github.com/cdapio/cdap/pull/12044#discussion_r406405919", "createdAt": "2020-04-09T18:46:01Z", "author": {"login": "CuriousVini"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/monitor/RuntimeProgramStatusSubscriberService.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.monitor;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.metrics.MetricsCollectionService;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.utils.ImmutablePair;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.services.AbstractNotificationSubscriberService;\n+import io.cdap.cdap.internal.app.store.AppMetadataStore;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.proto.Notification;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.id.ProgramRunId;\n+import io.cdap.cdap.spi.data.StructuredTableAdmin;\n+import io.cdap.cdap.spi.data.StructuredTableContext;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A TMS subscriber service to replicate program status from the\n+ * {@link Constants.AppFabric#PROGRAM_STATUS_RECORD_EVENT_TOPIC} to a local storage.\n+ * It is for the {@link DirectRuntimeRequestValidator} to validate incoming requests that it is coming from\n+ * a running program.\n+ */\n+public class RuntimeProgramStatusSubscriberService extends AbstractNotificationSubscriberService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RuntimeProgramStatusSubscriberService.class);\n+  private static final Gson GSON = new Gson();\n+\n+  @Inject\n+  RuntimeProgramStatusSubscriberService(CConfiguration cConf, MessagingService messagingService,\n+                                        DiscoveryServiceClient discoveryServiceClient,\n+                                        MetricsCollectionService metricsCollectionService,\n+                                        TransactionRunner transactionRunner,\n+                                        StructuredTableAdmin structuredTableAdmin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c285cec5afdd78ba8b75c2fafa16438a774b82f"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTE1OTQy", "url": "https://github.com/cdapio/cdap/pull/12044#pullrequestreview-391115942", "createdAt": "2020-04-09T20:39:39Z", "commit": {"oid": "6404c2a14833b1ab445166ddbfe1a99b03875592"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8f9b0da111d464ca41c5b1650ad81dc9182372", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/bf8f9b0da111d464ca41c5b1650ad81dc9182372", "committedDate": "2020-04-09T20:47:11Z", "message": "(CDAP-16369) Added RuntimeServiceMain and tests\n\n- This is for running RuntimeServer in a separate process"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7eff54db0d8386545e5bab5779551c9baca21684", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/7eff54db0d8386545e5bab5779551c9baca21684", "committedDate": "2020-04-09T20:39:33Z", "message": "Add delay to avoid flicky test"}, "afterCommit": {"oid": "bf8f9b0da111d464ca41c5b1650ad81dc9182372", "author": {"user": {"login": "chtyim", "name": "Terence Yim"}}, "url": "https://github.com/cdapio/cdap/commit/bf8f9b0da111d464ca41c5b1650ad81dc9182372", "committedDate": "2020-04-09T20:47:11Z", "message": "(CDAP-16369) Added RuntimeServiceMain and tests\n\n- This is for running RuntimeServer in a separate process"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2128, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}