{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODE2MjI5", "number": 12222, "title": "[CDAP-16835] Add new API in application interface for upgrading application config", "bodyText": "Adding a new API for allowing Application to allow config update operations like upgrade artifacts. Added helper classes for the same. Next PR will include using this new API in DataPipelineApp to upgrade ETLBatchConfig.\nIt is up to Application to define how it wants to update a given application. In future, we can add more helper methods in ApplicationUpdateContext  as needed.", "createdAt": "2020-05-29T00:10:50Z", "url": "https://github.com/cdapio/cdap/pull/12222", "merged": true, "mergeCommit": {"oid": "3b74885e81d1505e5e2eff7cf9eeb381e611357d"}, "closed": true, "closedAt": "2020-05-30T01:18:43Z", "author": {"login": "pandyajay10"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl3V8xAFqTQyMDU3NzM5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmManOABqjMzODkyNTkwMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTc3Mzk2", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-420577396", "createdAt": "2020-05-29T00:24:10Z", "commit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyNDoxMFrOGcLAHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyOToyMVrOGcLFNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng==", "bodyText": "How come this is needed? Because we want to return this info eventually in the REST API?\nIt's more future proof to return an object here, like a  List<UpgradedArtifact>, as we can add fields to UpgradedArtifact in the future without breaking backward compatibility.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432193566", "createdAt": "2020-05-29T00:24:10Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  private T newConfig;\n+  private Map<ArtifactId, ArtifactId> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, Map<ArtifactId, ArtifactId> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public Map<ArtifactId, ArtifactId> getUpgradedArtifacts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQyMA==", "bodyText": "is this needed? I'm wondering whether we can just rely on a default implementation for upgradeConfig()", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194420", "createdAt": "2020-05-29T00:27:32Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,17 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean allowConfigUpgrade();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQ1NQ==", "bodyText": "should have a default implementation here so that existing apps don't need to be updated.\nThe default can just return whatever it got as input, and return empty results for upgraded artifacts.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194455", "createdAt": "2020-05-29T00:27:40Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,17 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean allowConfigUpgrade();\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpgradeContext Used to access methods helpful for upgrading a config such as get latest plugin versions.\n+   */\n+  ConfigUpgradeResult<T> upgradeConfig(T config, ApplicationUpgradeContext applicationUpgradeContext) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDg3MA==", "bodyText": "Also, it seems like this could be error-prone, in that the application might have buggy logic that makes it return an incorrect list of upgraded artifacts. It would be more accurate for the platform to keep track of the artifacts from the ApplicationSpecification before and after the upgrade.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194870", "createdAt": "2020-05-29T00:29:21Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  private T newConfig;\n+  private Map<ArtifactId, ArtifactId> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, Map<ArtifactId, ArtifactId> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public Map<ArtifactId, ArtifactId> getUpgradedArtifacts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, "originalCommit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjMyMDIz", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-420632023", "createdAt": "2020-05-29T03:39:45Z", "commit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzozOTo0NlrOGcNweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzo0Nzo0OFrOGcN3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzODcxMw==", "bodyText": "thinking about this a little more, this API means the config class before and after the upgrade has to be the same. This means the app can't change the class at all, which seems overly restrictive. I'm also not sure how the classloading will work, since the config passed in comes from the old artifact while the config returned comes from the new artifact.\nI wonder if it would be better to just pass in the config string?", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432238713", "createdAt": "2020-05-29T03:39:46Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,18 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean isUpgradeAllowed();\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpgradeContext Used to access methods helpful for upgrading a config such as get latest plugin\n+   * versions.\n+   */\n+  ConfigUpgradeResult<T> upgradeConfig(T config, ApplicationUpgradeContext applicationUpgradeContext) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTMwOQ==", "bodyText": "don't we have use cases where we want to ignore the scope when getting the 'latest' artifact? This API looks like it won't be enough for all use cases.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432239309", "createdAt": "2020-05-29T03:42:40Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpgradeContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for upgrading Application configs. Provides helper methods for application to supporting config upgrade.\n+ */\n+public interface ApplicationUpgradeContext {\n+\n+  /**\n+   * Gets latest available artifact information for a given plugin type and name.\n+   *\n+   * @param pluginType the plugin type\n+   * @param pluginName the plugin name\n+   * @return artifact information for the plugin type and name.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  ArtifactId getLatestPluginArtifact(String pluginType, String pluginName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTg0OA==", "bodyText": "nit: Artifact is a little redundant since it's already in UpgradedArtifact. We can't call it 'old' and 'new' because 'new' is a reserved java keyword. what about 'from' and 'to'?", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432239848", "createdAt": "2020-05-29T03:45:04Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/artifact/UpgradedArtifact.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.artifact;\n+\n+import io.cdap.cdap.api.annotation.Beta;\n+\n+/**\n+ * Describes an artifact which is upgraded for an application.\n+ */\n+@Beta\n+public class UpgradedArtifact {\n+\n+  private final ArtifactId oldArtifact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MDQzNw==", "bodyText": "another problem is that the app doesn't always know what version of a plugin it's currently using just from the config. For example, the pipeline config allows setting a version range for the plugin version. From just the config, the app can't tell which version in the range was actually chosen during deployment.\nI'm also not sure this returns back meaningful information. What if after upgrade, one plugin is still using the old artifact but another plugin is using a newer version? For example, the old app uses plugin X and plugin Y from artifact my-plugin-1.0.0. After upgrade, it decides that plugin X will still come from my-plugin-1.0.0, but plugin Y will use my-plugin-2.0.0.\nDo we have a concrete use case for this? I feel like it would be better to just focus on the config to start with and leave this part out.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432240437", "createdAt": "2020-05-29T03:47:48Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  private T newConfig;\n+  private Map<ArtifactId, ArtifactId> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, Map<ArtifactId, ArtifactId> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public Map<ArtifactId, ArtifactId> getUpgradedArtifacts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, "originalCommit": {"oid": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODIwNzkx", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-420820791", "createdAt": "2020-05-29T10:06:10Z", "commit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNjoxMFrOGcWvSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNjoxMFrOGcWvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA==", "bodyText": "Can we call all \"upgrade\" as \"update\" in programmatic API? It is more flexible.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432385864", "createdAt": "2020-05-29T10:06:10Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/AbstractApplication.java", "diffHunk": "@@ -59,6 +59,23 @@ public final void configure(ApplicationConfigurer configurer, ApplicationContext\n     configure();\n   }\n \n+  /*\n+   * By default, applications do not support config upgrade. Applications supporting config upgrade should\n+   * override this method.\n+   */\n+  @Override\n+  public boolean isUpgradeAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODIxMTE5", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-420821119", "createdAt": "2020-05-29T10:06:40Z", "commit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNjo0MVrOGcWwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDoxNDo0MlrOGcW_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjA5MA==", "bodyText": "Also, this method should be called isUpdateSupported", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432386090", "createdAt": "2020-05-29T10:06:41Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/AbstractApplication.java", "diffHunk": "@@ -59,6 +59,23 @@ public final void configure(ApplicationConfigurer configurer, ApplicationContext\n     configure();\n   }\n \n+  /*\n+   * By default, applications do not support config upgrade. Applications supporting config upgrade should\n+   * override this method.\n+   */\n+  @Override\n+  public boolean isUpgradeAllowed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA=="}, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjkyMA==", "bodyText": "Also, move the default implementation to the Application interface to make it backward compatible.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432386920", "createdAt": "2020-05-29T10:08:21Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/AbstractApplication.java", "diffHunk": "@@ -59,6 +59,23 @@ public final void configure(ApplicationConfigurer configurer, ApplicationContext\n     configure();\n   }\n \n+  /*\n+   * By default, applications do not support config upgrade. Applications supporting config upgrade should\n+   * override this method.\n+   */\n+  @Override\n+  public boolean isUpgradeAllowed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA=="}, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTE3OA==", "bodyText": "The signature better be:\nApplicationUpdateResult<T> update(ApplicationUpdateContext context);\n\nAlso, better to throw more specific exception instead of Exception.\nRegarding to Albert question, The ApplicationUpdateContext should have at least two methods:\n// Get the old config as an object. The platform would perform the json deserialization based on the provided type.\n// This is for the case where the new app has the same / compatible / old config class.\n<C extends Config> C getConfig(Type configType);\n\n// Get the config as a json string.\nString getConfigAsString();", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389178", "createdAt": "2020-05-29T10:13:07Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,18 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean isUpgradeAllowed();\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpgradeContext Used to access methods helpful for upgrading a config such as get latest plugin\n+   * versions.\n+   */\n+  ConfigUpgradeResult<T> upgradeConfig(T config, ApplicationUpgradeContext applicationUpgradeContext) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzODcxMw=="}, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTUzNg==", "bodyText": "Shouldn't have this method.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389536", "createdAt": "2020-05-29T10:13:52Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public List<UpgradedArtifact> getUpgradedArtifacts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTU4MQ==", "bodyText": "final", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389581", "createdAt": "2020-05-29T10:13:57Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTczOA==", "bodyText": "Remove empty line.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389738", "createdAt": "2020-05-29T10:14:17Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTkwNw==", "bodyText": "We don't need a builder for this simple class.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389907", "createdAt": "2020-05-29T10:14:42Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public List<UpgradedArtifact> getUpgradedArtifacts() {\n+    return upgradedArtifacts;\n+  }\n+\n+  /**\n+   * Builder for creating config upgrade result.\n+   *\n+   * @param <T> {@link Config} config class that represents the configuration type of an\n+   * Application.\n+   */\n+  public static class Builder<T extends Config> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjkxODUw", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-421291850", "createdAt": "2020-05-29T21:15:08Z", "commit": {"oid": "512d891b0bd79caab23825e1945e2ab1df6fab70"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxNTowOFrOGcsSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToyNDowM1rOGcsesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODg2NQ==", "bodyText": "call is isUpdateSupported", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432738865", "createdAt": "2020-05-29T21:15:08Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512d891b0bd79caab23825e1945e2ab1df6fab70"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTA0OQ==", "bodyText": "Call it updateConfig. Also, don't pass in T config. Always access it from the update context.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432739049", "createdAt": "2020-05-29T21:15:36Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {\n+    return false;\n+  }\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpdateContext Used to access methods helpful for operation like upgrade on a config such as get\n+   * latest plugin versions.\n+   */\n+  default ApplicationUpdateResult<T> upgradeConfig(T config, ApplicationUpdateContext applicationUpdateContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512d891b0bd79caab23825e1945e2ab1df6fab70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTc3Nw==", "bodyText": "Shouldn't declare this as a throws. If you allow exception being thrown from this method, create a more specific exception that is suitable for the update purpose. E.g. UpdateConfigException. Alternatively, it is totally ok not to have any declared exception to throw.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432739777", "createdAt": "2020-05-29T21:17:32Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {\n+    return false;\n+  }\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpdateContext Used to access methods helpful for operation like upgrade on a config such as get\n+   * latest plugin versions.\n+   */\n+  default ApplicationUpdateResult<T> upgradeConfig(T config, ApplicationUpdateContext applicationUpdateContext)\n+      throws UnsupportedOperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512d891b0bd79caab23825e1945e2ab1df6fab70"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MjA2Ng==", "bodyText": "Hum... I don't think it is always latest for the update purpose.\nAlso, since the update is done through a similar cycle as deployment, meaning the PluginConfigurer.usePlugin will be called at some point during that process, in which it will determine the actual artifact to use. So what does the updateConfig need to do to make sure the usePlugin is selecting the right version during the actual deployment?", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432742066", "createdAt": "2020-05-29T21:24:03Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import java.lang.reflect.Type;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to supporting operation on\n+ * configs like upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets latest available artifact information for a given plugin type and name.\n+   *\n+   * @param pluginType the plugin type\n+   * @param pluginName the plugin name\n+   * @return artifact information for the plugin type and name.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  ArtifactId getLatestPluginArtifact(String pluginType, String pluginName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512d891b0bd79caab23825e1945e2ab1df6fab70"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzQwMDM3", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-421340037", "createdAt": "2020-05-29T22:59:36Z", "commit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjo1OTozNlrOGcufFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzowODowOFrOGcumlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NDkzMw==", "bodyText": "nit: isConfigUpdate -> isUpdate", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432774933", "createdAt": "2020-05-29T22:59:36Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,21 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config update or not.\n+   */\n+  default boolean isConfigUpdateSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTc2NQ==", "bodyText": "Don't think something like this is needed right now, can leave it up to the app what it wants to do.\nWould prefer not to add anything until we have concrete use cases. It's much harder to remove something from the API than to add something.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432775765", "createdAt": "2020-05-29T23:03:18Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA==", "bodyText": "should not throw a gson exception, we want to keep the api module as clean as possible. Should throw some common java exception, like IllegalArgumentException.\nIn general, don't need to put runtime exceptions in the method signature. Can just document in the javadoc with @throws what type of runtime exceptions can be thrown.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776168", "createdAt": "2020-05-29T23:05:17Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3Njg1NQ==", "bodyText": "Think it makes sense to add a getOldArtifact() method that returns the app artifact that we are upgrading from.\nOtherwise, the app may not know what class to deserialize this into. Taking data pipeline as an example, it would deserialize configs from 3.x differently than 4.x, etc.\nNot saying we need to support pipeline upgrade from those old versions, but we may have similar situations in the future for newer apps like CDC.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776855", "createdAt": "2020-05-29T23:08:08Z", "author": {"login": "albertshau"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA=="}, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzQwMTY2", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-421340166", "createdAt": "2020-05-29T23:00:06Z", "commit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzowMDowNlrOGcufbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzoxNjo0NVrOGcutvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTAyMg==", "bodyText": "Call it isUpdateConfigSupported to match with the updateConfig name.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432775022", "createdAt": "2020-05-29T23:00:06Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,21 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config update or not.\n+   */\n+  default boolean isConfigUpdateSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjQzMA==", "bodyText": "Should be UPGRADE_ARTIFACT?", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776430", "createdAt": "2020-05-29T23:06:24Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationConfigUpdateAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+/**\n+ * Possible update actions for application config.\n+ */\n+public enum ApplicationConfigUpdateAction {\n+  // Upgrade plugins to latest available versions.\n+  UPGRADE_PLUGINS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NzM2OQ==", "bodyText": "Just call the method getUpdateActions.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432777369", "createdAt": "2020-05-29T23:10:15Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODIwOA==", "bodyText": "Shouldn't be nullable. If there nothing found, should return an empty list.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778208", "createdAt": "2020-05-29T23:14:27Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODQzOQ==", "bodyText": "You can't pass in null for int. It is better to have a overloaded method, one takes limit, one doesn't. The one that doesn't has a default implementation that call the one that does with Integer.MAX_VALUE.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778439", "createdAt": "2020-05-29T23:15:32Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+                                      @Nullable ArtifactVersionRange pluginRange, @Nullable int limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODY4NA==", "bodyText": "Remove extra empty line.", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778684", "createdAt": "2020-05-29T23:16:45Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+                                      @Nullable ArtifactVersionRange pluginRange, @Nullable int limit);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fcf278fdc3031ee2512eac9236002e050375a8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzUyOTQ0", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-421352944", "createdAt": "2020-05-29T23:53:24Z", "commit": {"oid": "f99909bb06cfd6b0838f4693a1b1aa2c708c4aec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo1MzoyNFrOGcvJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo1MzoyNFrOGcvJ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NTkxOQ==", "bodyText": "unused import?", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432785919", "createdAt": "2020-05-29T23:53:24Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f99909bb06cfd6b0838f4693a1b1aa2c708c4aec"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzU3Mjc1", "url": "https://github.com/cdapio/cdap/pull/12222#pullrequestreview-421357275", "createdAt": "2020-05-30T00:17:26Z", "commit": {"oid": "8a062ca4550b4300d8cf0a5773485c87a5f8ce5f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDoxNzoyN1rOGcvYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDoxNzozOVrOGcvYSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4OTU2NA==", "bodyText": "Misalignment", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432789564", "createdAt": "2020-05-30T00:17:27Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType);\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         Returns empty list if no artifact for the plugin found.\n+   */\n+  default List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+      @Nullable ArtifactVersionRange pluginRange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a062ca4550b4300d8cf0a5773485c87a5f8ce5f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4OTU3Nw==", "bodyText": "No need to have the limit comment", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432789577", "createdAt": "2020-05-30T00:17:39Z", "author": {"login": "chtyim"}, "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType);\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         Returns empty list if no artifact for the plugin found.\n+   */\n+  default List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+      @Nullable ArtifactVersionRange pluginRange) {\n+    return getPluginArtifacts(pluginType, pluginName, pluginScope, pluginRange, /*limit=*/Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a062ca4550b4300d8cf0a5773485c87a5f8ce5f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51bd9dfaee61b407968873f783fe0a611b712c99", "author": {"user": null}, "url": "https://github.com/cdapio/cdap/commit/51bd9dfaee61b407968873f783fe0a611b712c99", "committedDate": "2020-05-30T01:01:09Z", "message": "Add new API in application interface for upgrading application config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "757c095328958ba19865b193ccbd5a80ebaa483d", "author": {"user": null}, "url": "https://github.com/cdapio/cdap/commit/757c095328958ba19865b193ccbd5a80ebaa483d", "committedDate": "2020-05-30T00:52:31Z", "message": "Resolving comments"}, "afterCommit": {"oid": "51bd9dfaee61b407968873f783fe0a611b712c99", "author": {"user": null}, "url": "https://github.com/cdapio/cdap/commit/51bd9dfaee61b407968873f783fe0a611b712c99", "committedDate": "2020-05-30T01:01:09Z", "message": "Add new API in application interface for upgrading application config"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2098, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}