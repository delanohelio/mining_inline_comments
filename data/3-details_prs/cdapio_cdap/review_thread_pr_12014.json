{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Nzk4MzEx", "number": 12014, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowMTo1MVrODsz9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowMTo1MVrODsz9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzE1MTU1OnYy", "diffSide": "RIGHT", "path": "cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowMTo1MVrOF939Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOToxMzoyMlrOF94WbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNDIxOQ==", "bodyText": "nit: plural (orderedKeys) is easier to read/understand", "url": "https://github.com/cdapio/cdap/pull/12014#discussion_r400424219", "createdAt": "2020-03-30T19:01:51Z", "author": {"login": "albertshau"}, "path": "cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.data.format;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * A basic implementation of LRU cache. It uses a map to store cache values and a priority queue for tracking\n+ * last used time. The implementation only use pure Java class. Due to the limitation of the Java\n+ * priority queue of not having support for updating priority without removing/adding element, the implementation\n+ * is O(n) to the number of entries in the cache, hence it is more small cache (n < 100).\n+ *\n+ * This class is thread safe.\n+ *\n+ * @param <K> type of the key\n+ * @param <V> type of the value\n+ */\n+@ThreadSafe\n+final class LRUCache<K, V> {\n+\n+  private final Map<K, V> entries;\n+  private final PriorityQueue<TimedKey<K>> orderedKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3ee778ce74142812df83b6ac2f577c729437d4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMDcwMQ==", "bodyText": "Fixed", "url": "https://github.com/cdapio/cdap/pull/12014#discussion_r400430701", "createdAt": "2020-03-30T19:13:22Z", "author": {"login": "chtyim"}, "path": "cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.data.format;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * A basic implementation of LRU cache. It uses a map to store cache values and a priority queue for tracking\n+ * last used time. The implementation only use pure Java class. Due to the limitation of the Java\n+ * priority queue of not having support for updating priority without removing/adding element, the implementation\n+ * is O(n) to the number of entries in the cache, hence it is more small cache (n < 100).\n+ *\n+ * This class is thread safe.\n+ *\n+ * @param <K> type of the key\n+ * @param <V> type of the value\n+ */\n+@ThreadSafe\n+final class LRUCache<K, V> {\n+\n+  private final Map<K, V> entries;\n+  private final PriorityQueue<TimedKey<K>> orderedKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNDIxOQ=="}, "originalCommit": {"oid": "ef3ee778ce74142812df83b6ac2f577c729437d4"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}