{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Nzk5NDM0", "number": 12481, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo0ODo1OVrOEQ1jfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozMjozOVrOESlNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkwMTA5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo0ODo1OVrOG1NvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowNTozMFrOG1uLnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1Mjc2NA==", "bodyText": "Integer -> int, since we don't want it to ever be null", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458452764", "createdAt": "2020-07-21T23:48:59Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -121,11 +129,25 @@ public Builder setOutputSchemaName(@Nullable String name) {\n       return this;\n     }\n \n+    /**\n+     * Set the distribution factor and stage name of the skewed stage. This should be set if the join being performed\n+     * is skewed (ie. joining a large dataset with a small dataset) and the \"small\" dataset is too large to broadcast.\n+     *\n+     * @param size      The number of distributions to split each key into. Note that the smaller dataset will grow by\n+     *                  this factor, values greater than 20 are not recommended\n+     * @param stageName The name of the input stage that contains the skewed data\n+     * @return\n+     */\n+    public Builder setDistributionFactor(Integer size, String stageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NDM0OQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458984349", "createdAt": "2020-07-22T18:05:30Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -121,11 +129,25 @@ public Builder setOutputSchemaName(@Nullable String name) {\n       return this;\n     }\n \n+    /**\n+     * Set the distribution factor and stage name of the skewed stage. This should be set if the join being performed\n+     * is skewed (ie. joining a large dataset with a small dataset) and the \"small\" dataset is too large to broadcast.\n+     *\n+     * @param size      The number of distributions to split each key into. Note that the smaller dataset will grow by\n+     *                  this factor, values greater than 20 are not recommended\n+     * @param stageName The name of the input stage that contains the skewed data\n+     * @return\n+     */\n+    public Builder setDistributionFactor(Integer size, String stageName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1Mjc2NA=="}, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkwMjc3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo0OTo0MlrOG1NwDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowNTo1NlrOG1uMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzAwNQ==", "bodyText": "Integer -> int", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458453005", "createdAt": "2020-07-21T23:49:42Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NDYyOA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458984628", "createdAt": "2020-07-22T18:05:56Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzAwNQ=="}, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkwMzM3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo0OTo1N1rOG1NwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMjozNlrOG110DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzA4Ng==", "bodyText": "add space after )", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458453086", "createdAt": "2020-07-21T23:49:57Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor!= null && distributionFactor < 1){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTM4OA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459109388", "createdAt": "2020-07-22T22:02:36Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor!= null && distributionFactor < 1){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzA4Ng=="}, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkwNzIwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1MTozOVrOG1Nyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMjozMFrOG11z4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzYzOA==", "bodyText": "this doesn't look like it belongs here, as these strings are a spark implementation detail.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458453638", "createdAt": "2020-07-21T23:51:39Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor!= null && distributionFactor < 1){\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;\n+  }\n+\n+  public static List<String> getSupportedJoinTypes(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTM0NA==", "bodyText": "removed.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459109344", "createdAt": "2020-07-22T22:02:30Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor!= null && distributionFactor < 1){\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;\n+  }\n+\n+  public static List<String> getSupportedJoinTypes(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzYzOA=="}, "originalCommit": {"oid": "ff1af39d142a30dca205c996568d0b53e77fd23e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkxMzI2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1NDoyOVrOG1N2Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowNjoyNVrOG1uODw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDUzNA==", "bodyText": "nit: can be specified -> can be joined", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458454534", "createdAt": "2020-07-21T23:54:29Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NDk3NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458984975", "createdAt": "2020-07-22T18:06:25Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDUzNA=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkxNDg5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1NToxMlrOG1N28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNDowMlrOG1vLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDc3MQ==", "bodyText": "should also check that this is an inner or left outer join, which just means checking that the skewed stage is required. Should also check that neither stage is being broadcast, as there is no point salting if a broadcast is done. You'll have to change the input to be the JoinStages instead of just the names.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458454771", "createdAt": "2020-07-21T23:55:12Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor != null && distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMDY0MA==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459000640", "createdAt": "2020-07-22T18:34:02Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor != null && distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDc3MQ=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkxODk3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1NzowMVrOG1N5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNTo0OFrOG1vPgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTM2NQ==", "bodyText": "this fits better in the spark code, as \"inner\" and \"leftouter\" are the string values used by spark and not used anywhere by this class.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458455365", "createdAt": "2020-07-21T23:57:01Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor != null && distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;\n+  }\n+\n+  public static List<String> getSupportedJoinTypes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTcyOA==", "bodyText": "I removed this and updated it to check if the left is required instead of doing a string comparison", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459001728", "createdAt": "2020-07-22T18:35:48Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final Integer distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public Integer getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(Collection<String> stageNames) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stageNames.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be specified if a distribution factor is specified\"));\n+    }\n+\n+    if (distributionFactor == null || skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution factor requires both size and skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor != null && distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+    return errors;\n+  }\n+\n+  public static List<String> getSupportedJoinTypes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTM2NQ=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkxOTc2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1NzozMFrOG1N5yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNjoxMVrOG1vQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTQ5Ng==", "bodyText": "annotate as nullable", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458455496", "createdAt": "2020-07-21T23:57:30Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "diffHunk": "@@ -36,10 +37,11 @@\n   private final Schema outputSchema;\n   private final List<JoinCollection> toJoin;\n   private final Integer numPartitions;\n+  private final JoinDistribution distribution;\n \n   public JoinRequest(String stageName, String leftStage, List<String> leftKey, Schema leftSchema, boolean leftRequired,\n                      boolean nullSafe, List<JoinField> fields, Schema outputSchema, List<JoinCollection> toJoin,\n-                     @Nullable Integer numPartitions) {\n+                     @Nullable Integer numPartitions, JoinDistribution distribution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTk0NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459001945", "createdAt": "2020-07-22T18:36:11Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "diffHunk": "@@ -36,10 +37,11 @@\n   private final Schema outputSchema;\n   private final List<JoinCollection> toJoin;\n   private final Integer numPartitions;\n+  private final JoinDistribution distribution;\n \n   public JoinRequest(String stageName, String leftStage, List<String> leftKey, Schema leftSchema, boolean leftRequired,\n                      boolean nullSafe, List<JoinField> fields, Schema outputSchema, List<JoinCollection> toJoin,\n-                     @Nullable Integer numPartitions) {\n+                     @Nullable Integer numPartitions, JoinDistribution distribution) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTQ5Ng=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkxOTg2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1NzozM1rOG1N52g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNjoyM1rOG1vQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTUxNA==", "bodyText": "annotate as nullable", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458455514", "createdAt": "2020-07-21T23:57:33Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "diffHunk": "@@ -50,6 +52,11 @@ public JoinRequest(String stageName, String leftStage, List<String> leftKey, Sch\n     this.outputSchema = outputSchema;\n     this.toJoin = toJoin;\n     this.numPartitions = numPartitions;\n+    this.distribution = distribution;\n+  }\n+\n+  public JoinDistribution getDistribution() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMjA3NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459002075", "createdAt": "2020-07-22T18:36:23Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/join/JoinRequest.java", "diffHunk": "@@ -50,6 +52,11 @@ public JoinRequest(String stageName, String leftStage, List<String> leftKey, Sch\n     this.outputSchema = outputSchema;\n     this.toJoin = toJoin;\n     this.numPartitions = numPartitions;\n+    this.distribution = distribution;\n+  }\n+\n+  public JoinDistribution getDistribution() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTUxNA=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkyMjgyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo1OToxM1rOG1N7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMzoxNFrOG1104w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTk3OQ==", "bodyText": "does the hardcoded udf name cause an issue if there are multiple salted joins that use different distribution factors?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458455979", "createdAt": "2020-07-21T23:59:13Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String SALT_UDF = \"salt\";\n+        final String PREPARE_EXPLODE_UDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(PREPARE_EXPLODE_UDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzAyOA==", "bodyText": "it may be more straightforward to map the RDDs before changing them to DataFrames instead of using UDFs.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458457028", "createdAt": "2020-07-22T00:02:38Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String SALT_UDF = \"salt\";\n+        final String PREPARE_EXPLODE_UDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(PREPARE_EXPLODE_UDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTk3OQ=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTYwMw==", "bodyText": "Removed the UDFs", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459109603", "createdAt": "2020-07-22T22:03:14Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String SALT_UDF = \"salt\";\n+        final String PREPARE_EXPLODE_UDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(PREPARE_EXPLODE_UDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NTk3OQ=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkyNjQyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowMTowMFrOG1N9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMzo0OVrOG111tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjUxMA==", "bodyText": "capitalized variables should be static (I thought checkstyle would complain about this?)", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458456510", "createdAt": "2020-07-22T00:01:00Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String SALT_UDF = \"salt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTgxNA==", "bodyText": "It did...I fixed it in the following commit", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459109814", "createdAt": "2020-07-22T22:03:49Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String SALT_UDF = \"salt\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjUxMA=="}, "originalCommit": {"oid": "98597b426c327030b458967e156a33c67c4856a6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkzMTQ5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowMzozNVrOG1OAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNzowM1rOG1vSVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzI5MQ==", "bodyText": "don't need to be final", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458457291", "createdAt": "2020-07-22T00:03:35Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMjQ1NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459002455", "createdAt": "2020-07-22T18:37:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzI5MQ=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDkzMjc3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowNDoxMFrOG1OBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMjowN1rOG11zTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzQ3OA==", "bodyText": "is the name supposed to be unique? Seems like there would be issues if multiple salted joins are in the same pipeline, but they both use different distribution factors.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458457478", "createdAt": "2020-07-22T00:04:10Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTQwNA==", "bodyText": "could this be done without a UDF? If there's a way to give a constant value followed by an explode?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458459404", "createdAt": "2020-07-22T00:10:47Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzQ3OA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTE5OA==", "bodyText": "Yes that is possible, I chose a UDF because that will probably be needed if we want to implement the option to filter which rows get exploded. But like we discussed offline, UDFs have some unknowns so I've updated this to use a constant value.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459109198", "createdAt": "2020-07-22T22:02:07Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzQ3OA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk0MDUxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowODowNVrOG1OGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MTowMlrOG1vbWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODYyNQ==", "bodyText": "shouldn't ignore case, stage names are case sensitive.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458458625", "createdAt": "2020-07-22T00:08:05Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),\n+                                  DataTypes.createArrayType(DataTypes.IntegerType));\n+        sqlContext.udf().register(saltUDF, saltUDF(joinRequest.getDistribution().getDistributionFactor()),\n+                                  DataTypes.IntegerType);\n+\n+        // Assign the correct UFD to each side depending on the skew\n+        boolean isLeftStageSkewed =\n+          joinRequest.getLeftStage().equalsIgnoreCase(joinRequest.getDistribution().getSkewedStageName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDc2Mw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459004763", "createdAt": "2020-07-22T18:41:02Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),\n+                                  DataTypes.createArrayType(DataTypes.IntegerType));\n+        sqlContext.udf().register(saltUDF, saltUDF(joinRequest.getDistribution().getDistributionFactor()),\n+                                  DataTypes.IntegerType);\n+\n+        // Assign the correct UFD to each side depending on the skew\n+        boolean isLeftStageSkewed =\n+          joinRequest.getLeftStage().equalsIgnoreCase(joinRequest.getDistribution().getSkewedStageName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODYyNQ=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk0MTYyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDowODo0OFrOG1OGqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1ODoxMVrOG1wDKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODc5NA==", "bodyText": "could this be done without a UDF? maybe using a combination of rand, multiplication, and floor?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458458794", "createdAt": "2020-07-22T00:08:48Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),\n+                                  DataTypes.createArrayType(DataTypes.IntegerType));\n+        sqlContext.udf().register(saltUDF, saltUDF(joinRequest.getDistribution().getDistributionFactor()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDU2Ng==", "bodyText": "Yes that is an option, I was unsure if three built-in functions would be faster than one UDF. I will test it and update this thread", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459004566", "createdAt": "2020-07-22T18:40:42Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),\n+                                  DataTypes.createArrayType(DataTypes.IntegerType));\n+        sqlContext.udf().register(saltUDF, saltUDF(joinRequest.getDistribution().getDistributionFactor()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODc5NA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNDk1NQ==", "bodyText": "Discussed with Albert offline, we agreed that there is likely no performance difference between the two approaches but there are some unknowns around UDF registration/usage if there are multiple salted joins in the same pipeline. So for now, we will use the built-in functions", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459014955", "createdAt": "2020-07-22T18:58:11Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -123,6 +126,54 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       }\n       seenRequired = seenRequired || toJoin.isRequired();\n \n+      // UUID for salt column name to avoid name collisions\n+      String saltColumn = UUID.randomUUID().toString();\n+      if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {\n+\n+        final String saltUDF = \"salt\";\n+        final String prepareExplodeUDF = \"prepare_explode\";\n+\n+        //Array of [0,distributionFactor) to be used in the PrepareExplode step\n+        Integer[] numbers =\n+          IntStream.range(0, joinRequest.getDistribution().getDistributionFactor()).boxed().toArray(Integer[]::new);\n+\n+        // Register UserDefinedFunctions for use later\n+        sqlContext.udf().register(prepareExplodeUDF, prepareExplodeUDF(numbers),\n+                                  DataTypes.createArrayType(DataTypes.IntegerType));\n+        sqlContext.udf().register(saltUDF, saltUDF(joinRequest.getDistribution().getDistributionFactor()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODc5NA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk0ODQ3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoxMjoxOFrOG1OKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MjowNVrOG1vdqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTgzMA==", "bodyText": "JoinDistribution should validate the join type earlier, which will let you remove the type check.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458459830", "createdAt": "2020-07-22T00:12:18Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -131,11 +182,20 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       // which allows us to use a different number of partitions per joiner instead of using the global\n       // spark.sql.shuffle.partitions setting in the spark conf\n       if (joinPartitions != null && !toJoin.isBroadcast()) {\n-        right = partitionOnKey(right, toJoin.getKey(), joinRequest.isNullSafe(), sparkSchema, joinPartitions);\n+        List<String> rightKeys = new ArrayList<>(toJoin.getKey());\n+        List<String> leftKeys = new ArrayList<>(joinRequest.getLeftKey());\n+\n+        // If distribution is enabled we need to add it to the partition keys to ensure we end up with the desired\n+        // number of partitions\n+        if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTM1Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459005352", "createdAt": "2020-07-22T18:42:05Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -131,11 +182,20 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n       // which allows us to use a different number of partitions per joiner instead of using the global\n       // spark.sql.shuffle.partitions setting in the spark conf\n       if (joinPartitions != null && !toJoin.isBroadcast()) {\n-        right = partitionOnKey(right, toJoin.getKey(), joinRequest.isNullSafe(), sparkSchema, joinPartitions);\n+        List<String> rightKeys = new ArrayList<>(toJoin.getKey());\n+        List<String> leftKeys = new ArrayList<>(joinRequest.getLeftKey());\n+\n+        // If distribution is enabled we need to add it to the partition keys to ensure we end up with the desired\n+        // number of partitions\n+        if (joinRequest.isDistributionEnabled() && JoinDistribution.getSupportedJoinTypes().contains(joinType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTgzMA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk0OTQ5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoxMzowMFrOG1OLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MjozM1rOG1vezA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTk4OQ==", "bodyText": "unintended newline?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458459989", "createdAt": "2020-07-22T00:13:00Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -171,14 +231,16 @@ followed by (TMP1 inner join C on TMP1.B.id = C.id) as OUT\n \n     // select and alias fields in the expected order\n     List<Column> outputColumns = new ArrayList<>(joinRequest.getFields().size());\n-    for (JoinField field : joinRequest.getFields()) {\n+    for (\n+      JoinField field : joinRequest.getFields()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTY0NA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459005644", "createdAt": "2020-07-22T18:42:33Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -171,14 +231,16 @@ followed by (TMP1 inner join C on TMP1.B.id = C.id) as OUT\n \n     // select and alias fields in the expected order\n     List<Column> outputColumns = new ArrayList<>(joinRequest.getFields().size());\n-    for (JoinField field : joinRequest.getFields()) {\n+    for (\n+      JoinField field : joinRequest.getFields()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTk4OQ=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk0OTc3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-test/src/main/java/io/cdap/cdap/etl/mock/batch/joiner/MockAutoJoiner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoxMzoxMlrOG1OLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MzowM1rOG1vgCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MDAzOA==", "bodyText": "unintended new space?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r458460038", "createdAt": "2020-07-22T00:13:12Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-test/src/main/java/io/cdap/cdap/etl/mock/batch/joiner/MockAutoJoiner.java", "diffHunk": "@@ -59,7 +60,7 @@\n   public static final PluginClass PLUGIN_CLASS = getPluginClass();\n   private static final Gson GSON = new Gson();\n   private static final Type LIST = new TypeToken<List<String>>() { }.getType();\n-  private static final Type SELECT_TYPE = new TypeToken<List<JoinField>>() { }.getType();\n+  private static final Type SELECT_TYPE = new TypeToken<List<JoinField>>() {  }.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTk2Mw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459005963", "createdAt": "2020-07-22T18:43:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-test/src/main/java/io/cdap/cdap/etl/mock/batch/joiner/MockAutoJoiner.java", "diffHunk": "@@ -59,7 +60,7 @@\n   public static final PluginClass PLUGIN_CLASS = getPluginClass();\n   private static final Gson GSON = new Gson();\n   private static final Type LIST = new TypeToken<List<String>>() { }.getType();\n-  private static final Type SELECT_TYPE = new TypeToken<List<JoinField>>() { }.getType();\n+  private static final Type SELECT_TYPE = new TypeToken<List<JoinField>>() {  }.getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MDAzOA=="}, "originalCommit": {"oid": "81e9240e907c036f15eaaaf0c7529d4bf1498a18"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTExMTg3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxNzoyNFrOG12KRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzo1OToxMlrOG14N3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTA3Nw==", "bodyText": "This check can be combined with previous one:\nJoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst().orElse(null);\n\nif (leftStage == null) {\n  errors.add(new JoinError(\n        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n        )));\n} else if (!leftStage.isRequired()) {\n  ...\n}", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459115077", "createdAt": "2020-07-22T22:17:24Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    List<String> stageNames = stages.stream().map(JoinStage::getStageName).collect(Collectors.toList());\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d118de2437020318d2b504356837765a3fbe0457"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0ODc2Nw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459148767", "createdAt": "2020-07-22T23:59:12Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    List<String> stageNames = stages.stream().map(JoinStage::getStageName).collect(Collectors.toList());\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTA3Nw=="}, "originalCommit": {"oid": "d118de2437020318d2b504356837765a3fbe0457"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTExNTI1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxODo0NFrOG12MXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDowMToyN1rOG14QXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTYxNA==", "bodyText": "Use if (stages.stream().anyMatch(JoinStage::isBroadcast))", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459115614", "createdAt": "2020-07-22T22:18:44Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    List<String> stageNames = stages.stream().map(JoinStage::getStageName).collect(Collectors.toList());\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst().get();\n+    if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +\n+                                 \"must be required\"));\n+    }\n+\n+    if (stages.get(0).isBroadcast() || stages.get(1).isBroadcast()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d118de2437020318d2b504356837765a3fbe0457"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTQwNQ==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r459149405", "createdAt": "2020-07-23T00:01:27Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    List<String> stageNames = stages.stream().map(JoinStage::getStageName).collect(Collectors.toList());\n+    if (skewedStageName != null && !stageNames.contains(skewedStageName)) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    }\n+\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst().get();\n+    if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +\n+                                 \"must be required\"));\n+    }\n+\n+    if (stages.get(0).isBroadcast() || stages.get(1).isBroadcast()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTYxNA=="}, "originalCommit": {"oid": "d118de2437020318d2b504356837765a3fbe0457"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI2MjExOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0Njo1M1rOG3tBfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozNDowNFrOG3wnXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MjUyNw==", "bodyText": "can you add a line about how the given stage must be a required stage, and no stage should be broadcast.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461062527", "createdAt": "2020-07-27T17:46:53Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -121,11 +129,25 @@ public Builder setOutputSchemaName(@Nullable String name) {\n       return this;\n     }\n \n+    /**\n+     * Set the distribution factor and stage name of the skewed stage. This should be set if the join being performed\n+     * is skewed (ie. joining a large dataset with a small dataset) and the \"small\" dataset is too large to broadcast.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMTM3NQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461121375", "createdAt": "2020-07-27T19:34:04Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -121,11 +129,25 @@ public Builder setOutputSchemaName(@Nullable String name) {\n       return this;\n     }\n \n+    /**\n+     * Set the distribution factor and stage name of the skewed stage. This should be set if the join being performed\n+     * is skewed (ie. joining a large dataset with a small dataset) and the \"small\" dataset is too large to broadcast.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MjUyNw=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI2NDk3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NzozOVrOG3tDQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozNjo0NVrOG3wsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Mjk3Nw==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461062977", "createdAt": "2020-07-27T17:47:39Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMjc1MA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461122750", "createdAt": "2020-07-27T19:36:45Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Mjk3Nw=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI2ODM2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0ODozOVrOG3tFUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozODowNFrOG3wvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzUwNg==", "bodyText": "include the stage name in the message, similar to what you have above.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461063506", "createdAt": "2020-07-27T17:48:39Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NzA4Nw==", "bodyText": "we may want to use more specific errors than JoinError. The idea being that the plugin should be able to examine the error and figure out what property it needs to highlight as a problem during validation. It's ok to revisit this later, after seeing what the plugin would need.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461067087", "createdAt": "2020-07-27T17:54:41Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzUwNg=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMzM4Ng==", "bodyText": "Changed the message and agree on the second point. I wasnt sure which property this should highlight exactly since the error ties into two properties, we should definitely revisit later", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461123386", "createdAt": "2020-07-27T19:38:04Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzUwNg=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI3NzcwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1MToxMFrOG3tLPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozNjo0OVrOG3ws6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTAyMQ==", "bodyText": "nit: stage name -> stage", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461065021", "createdAt": "2020-07-27T17:51:10Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMjc5Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461122792", "createdAt": "2020-07-27T19:36:49Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTAyMQ=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI4MTY2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1MjoxOVrOG3tN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozODoyNFrOG3wv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTY4Mw==", "bodyText": "nit: is not needed -> cannot be used\n\"is not needed\" sounds like a warning that can be ignored, whereas here we are failing.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461065683", "createdAt": "2020-07-27T17:52:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +\n+                                 \"must be required\"));\n+    }\n+\n+    if (stages.stream().anyMatch(JoinStage::isBroadcast)) {\n+      errors.add(new JoinError(\"Distribution is not needed if either stage will be broadcast\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMzU3MQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461123571", "createdAt": "2020-07-27T19:38:24Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new JoinError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new JoinError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+                                .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new JoinError(\n+        String.format(\"Skewed stage name '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(\"Distribution only supports inner or left outer joins, the skewed side of the join \" +\n+                                 \"must be required\"));\n+    }\n+\n+    if (stages.stream().anyMatch(JoinStage::isBroadcast)) {\n+      errors.add(new JoinError(\"Distribution is not needed if either stage will be broadcast\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTY4Mw=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI5NTA2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1NTo0OVrOG3tV9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMDo0M1rOG31Jcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Nzc2NQ==", "bodyText": "style: IDE settings seem to be off, method calls should be indented, not aligned to the previous line", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461067765", "createdAt": "2020-07-27T17:55:49Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -72,8 +80,8 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n     collections.put(joinRequest.getLeftStage(), left);\n \n     List<Column> leftJoinColumns = joinRequest.getLeftKey().stream()\n-      .map(left::col)\n-      .collect(Collectors.toList());\n+                                              .map(left::col)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyNDAwNQ==", "bodyText": "Yes..I've fixed them now but I have a feeling that some of our other repos have them aligned not indented. I find myself repeatedly toggling this setting", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461124005", "createdAt": "2020-07-27T19:39:20Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -72,8 +80,8 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n     collections.put(joinRequest.getLeftStage(), left);\n \n     List<Column> leftJoinColumns = joinRequest.getLeftKey().stream()\n-      .map(left::col)\n-      .collect(Collectors.toList());\n+                                              .map(left::col)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Nzc2NQ=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzY4NA==", "bodyText": "method calls should be indented, but if you're in a middle of a method call, the arguments should be aligned.\n  x.stream()\n    .map()\n\nvs\n  x.call(a,\n         b);", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461183684", "createdAt": "2020-07-27T21:34:23Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -72,8 +80,8 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n     collections.put(joinRequest.getLeftStage(), left);\n \n     List<Column> leftJoinColumns = joinRequest.getLeftKey().stream()\n-      .map(left::col)\n-      .collect(Collectors.toList());\n+                                              .map(left::col)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Nzc2NQ=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTYzNQ==", "bodyText": "Ah gotcha, that might be where the confusion came from. Thanks!", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461195635", "createdAt": "2020-07-27T22:00:43Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/hydrator-spark-core/src/main/java/io/cdap/cdap/etl/spark/batch/RDDCollection.java", "diffHunk": "@@ -72,8 +80,8 @@ public RDDCollection(JavaSparkExecutionContext sec, JavaSparkContext jsc, SQLCon\n     collections.put(joinRequest.getLeftStage(), left);\n \n     List<Column> leftJoinColumns = joinRequest.getLeftKey().stream()\n-      .map(left::col)\n-      .collect(Collectors.toList());\n+                                              .map(left::col)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2Nzc2NQ=="}, "originalCommit": {"oid": "ea98bed5d7cb76fa7ceb0558aeba4022acf296e8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTAzODYxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozNTowOVrOG30cXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0ODo0M1rOG300jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NDA5NQ==", "bodyText": "indentation", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461184095", "createdAt": "2020-07-27T21:35:09Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -161,20 +186,24 @@ public JoinDefinition build() {\n         validateSchemaCompatibility(generatedOutputSchema, outputSchema, errors);\n       }\n \n+      if (distribution != null) {\n+        errors.addAll(distribution.validate(stages));\n+      }\n+\n       if (!errors.isEmpty()) {\n         throw new InvalidJoinException(errors);\n       }\n \n       return new JoinDefinition(selectedFields, stages, condition,\n-                                outputSchema == null ? generatedOutputSchema : outputSchema);\n+                                outputSchema == null ? generatedOutputSchema : outputSchema, distribution);\n     }\n \n     @Nullable\n     private Schema getOutputSchema(List<JoinError> errors) {\n       Set<String> outputFieldNames = new HashSet<>();\n       List<Schema.Field> outputFields = new ArrayList<>(selectedFields.size());\n       Map<String, JoinStage> stageMap = stages.stream()\n-        .collect(Collectors.toMap(JoinStage::getStageName, s -> s));\n+                                              .collect(Collectors.toMap(JoinStage::getStageName, s -> s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MDI4Ng==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461190286", "createdAt": "2020-07-27T21:48:43Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDefinition.java", "diffHunk": "@@ -161,20 +186,24 @@ public JoinDefinition build() {\n         validateSchemaCompatibility(generatedOutputSchema, outputSchema, errors);\n       }\n \n+      if (distribution != null) {\n+        errors.addAll(distribution.validate(stages));\n+      }\n+\n       if (!errors.isEmpty()) {\n         throw new InvalidJoinException(errors);\n       }\n \n       return new JoinDefinition(selectedFields, stages, condition,\n-                                outputSchema == null ? generatedOutputSchema : outputSchema);\n+                                outputSchema == null ? generatedOutputSchema : outputSchema, distribution);\n     }\n \n     @Nullable\n     private Schema getOutputSchema(List<JoinError> errors) {\n       Set<String> outputFieldNames = new HashSet<>();\n       List<Schema.Field> outputFields = new ArrayList<>(selectedFields.size());\n       Map<String, JoinStage> stageMap = stages.stream()\n-        .collect(Collectors.toMap(JoinStage::getStageName, s -> s));\n+                                              .collect(Collectors.toMap(JoinStage::getStageName, s -> s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NDA5NQ=="}, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA1NDkwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0MDoyOFrOG30mMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MDozN1rOG304Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NjYxMA==", "bodyText": "should this also be a DistributionStageError?", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461186610", "createdAt": "2020-07-27T21:40:28Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(String.format(\"Distribution only supports inner or left outer joins, the skewed \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTIwNg==", "bodyText": "Hmm I guess it could be, I didnt mark it as a distribution error because it also relates to the join type parameter", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461191206", "createdAt": "2020-07-27T21:50:37Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(String.format(\"Distribution only supports inner or left outer joins, the skewed \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NjYxMA=="}, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA1ODQzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0MTozN1rOG30oNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1NjoyMlrOG31B9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NzEyNg==", "bodyText": "this one seems like it should have its own type, as the plugin would want to highlight the broadcast property in this situation.", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461187126", "createdAt": "2020-07-27T21:41:37Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(String.format(\"Distribution only supports inner or left outer joins, the skewed \" +\n+        \"stage '%s' must be required\", skewedStageName)));\n+    }\n+\n+    if (stages.stream().anyMatch(JoinStage::isBroadcast)) {\n+      errors.add(new JoinError(\"Distribution cannot be used if either stage will be broadcast\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MzcxNw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461193717", "createdAt": "2020-07-27T21:56:22Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));\n+    } else if (!leftStage.isRequired()) {\n+      errors.add(new JoinError(String.format(\"Distribution only supports inner or left outer joins, the skewed \" +\n+        \"stage '%s' must be required\", skewedStageName)));\n+    }\n+\n+    if (stages.stream().anyMatch(JoinStage::isBroadcast)) {\n+      errors.add(new JoinError(\"Distribution cannot be used if either stage will be broadcast\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NzEyNg=="}, "originalCommit": {"oid": "1c7e90218275bf8d7f9aafa6672c8604a710e230"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE5NDU5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozMjozOVrOG3156Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMzozNVrOG32zTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwODA0MQ==", "bodyText": "nit: move to previous line to have consistent style", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461208041", "createdAt": "2020-07-27T22:32:39Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.BroadcastError;\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46e148197e68884a669dad26dcb06f111759bd4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTUwMw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461219503", "createdAt": "2020-07-27T23:03:55Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.BroadcastError;\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwODA0MQ=="}, "originalCommit": {"oid": "d46e148197e68884a669dad26dcb06f111759bd4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjczMg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12481#discussion_r461222732", "createdAt": "2020-07-27T23:13:35Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-api/src/main/java/io/cdap/cdap/etl/api/join/JoinDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.etl.api.join;\n+\n+import io.cdap.cdap.etl.api.join.error.BroadcastError;\n+import io.cdap.cdap.etl.api.join.error.DistributionSizeError;\n+import io.cdap.cdap.etl.api.join.error.DistributionStageError;\n+import io.cdap.cdap.etl.api.join.error.JoinError;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Join distribution settings for salting/exploding datasets to resolve skew\n+ */\n+public class JoinDistribution {\n+\n+  private final int distributionFactor;\n+  private final String skewedStageName;\n+\n+  public JoinDistribution(Integer distributionFactor, String skewedStageName) {\n+    this.distributionFactor = distributionFactor;\n+    this.skewedStageName = skewedStageName;\n+  }\n+\n+  public int getDistributionFactor() {\n+    return distributionFactor;\n+  }\n+\n+  public String getSkewedStageName() {\n+    return skewedStageName;\n+  }\n+\n+  public Collection<JoinError> validate(List<JoinStage> stages) {\n+    List<JoinError> errors = new ArrayList<>();\n+\n+    if (stages.size() > 2) {\n+      errors.add(new JoinError(\"Only two stages can be joined if a distribution factor is specified\"));\n+    }\n+\n+    if (skewedStageName == null) {\n+      errors.add(new DistributionStageError(\"Distribution requires skewed stage name to be defined\"));\n+    }\n+\n+    if (distributionFactor < 1) {\n+      errors.add(new DistributionSizeError(\"Distribution size must be greater than 0\"));\n+    }\n+\n+    //If skewedStageName does not match any of the names in stages\n+    JoinStage leftStage = stages.stream().filter(s -> s.getStageName().equals(skewedStageName)).findFirst()\n+      .orElse(null);\n+\n+    if (leftStage == null) {\n+      errors.add(new DistributionStageError(\n+        String.format(\"Skewed stage '%s' does not match any of the specified stages\", skewedStageName\n+        )));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwODA0MQ=="}, "originalCommit": {"oid": "d46e148197e68884a669dad26dcb06f111759bd4"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3234, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}