{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTg0MzAx", "number": 11972, "title": "Completed \"Map to Target\" directive", "bodyText": "Completed implementation of the Map to Target directive related to the wrangler-data-model UI feature.", "createdAt": "2020-03-18T02:54:44Z", "url": "https://github.com/cdapio/cdap/pull/11972", "merged": true, "mergeCommit": {"oid": "e697747a3224ea1672c12385df76a55b81b15603"}, "closed": true, "closedAt": "2020-05-19T20:47:37Z", "author": {"login": "mukhlin"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM3_AHAH2gAyMzkwMTg0MzAxOjEyMmI3NWJhN2E0ZGZhOGZiNDY5ZjA5NmUwZmE5NjY1NzhlMzEwZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci6utMgFqTQxNDgwODk5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "122b75ba7a4dfa8fb469f096e0fa966578e310fa", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/122b75ba7a4dfa8fb469f096e0fa966578e310fa", "committedDate": "2020-03-12T09:06:46Z", "message": "Implemented Map to Target directive."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6897300d90457db8a90788d5acb1c9fa318111ff", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/6897300d90457db8a90788d5acb1c9fa318111ff", "committedDate": "2020-03-17T15:30:04Z", "message": "Fixed code review remarks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459a47da9e04fb03bc33f1aacce5c9174b0e02c3", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/459a47da9e04fb03bc33f1aacce5c9174b0e02c3", "committedDate": "2020-03-17T18:43:21Z", "message": "Fixed bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09618c1c00720b89ca8d09c4dc4aff7c9b644557", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/09618c1c00720b89ca8d09c4dc4aff7c9b644557", "committedDate": "2020-03-18T02:50:06Z", "message": "Fixed bug: UncontrolledTooltip was not able to find target option item when user entered some filter and then cleared it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a641c404b8ab35c082a43eb1531aab95686c80af", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/a641c404b8ab35c082a43eb1531aab95686c80af", "committedDate": "2020-03-18T10:17:31Z", "message": "Refactored loading bar, details extracted to separate functions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96166421cefc88eae28408830cb7f45db850cbd2", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/96166421cefc88eae28408830cb7f45db850cbd2", "committedDate": "2020-03-18T11:16:29Z", "message": "Fixed bug: UncontrolledTooltip was not able to find target option item when user entered some filter and then cleared it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/0e1943822df992b434cf9247afcc3647221f0a5a", "committedDate": "2020-03-18T15:04:06Z", "message": "Fixed bug: Use UUID as DOM element ID to avoid special character used in CSS selectors. Minor UI improvements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDMwNjUw", "url": "https://github.com/cdapio/cdap/pull/11972#pullrequestreview-377030650", "createdAt": "2020-03-18T16:24:49Z", "commit": {"oid": "96166421cefc88eae28408830cb7f45db850cbd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNDo0OVrOF4M-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNDo0OVrOF4M-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NzI4Nw==", "bodyText": "You can probably use id to override the rule. ie\nroot: {\n'& #map-to-target-second-level-popover': {\nwidth: '300px',\n}\n}", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r394477287", "createdAt": "2020-03-18T16:24:49Z", "author": {"login": "Biao"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,365 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96166421cefc88eae28408830cb7f45db850cbd2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94e3d66f88d13389369a33c1323002d0d218047", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/f94e3d66f88d13389369a33c1323002d0d218047", "committedDate": "2020-03-26T04:59:39Z", "message": "Merge branch 'develop' of https://github.com/cdapio/cdap into feature/wrangler-data-model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTE2OTUz", "url": "https://github.com/cdapio/cdap/pull/11972#pullrequestreview-386116953", "createdAt": "2020-04-02T05:31:13Z", "commit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTozMToxNFrOF_b0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDozOFrOF_cwBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MDMwMg==", "bodyText": "We have a component called <Heading type=\"h5\" />. Please use that.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402060302", "createdAt": "2020-04-02T05:31:14Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MDUyMQ==", "bodyText": "There is a <If condition={}>...</If>component. Please use that for consistency.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402060521", "createdAt": "2020-04-02T05:32:06Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MTUxNA==", "bodyText": "For consistency please use css-in-js styles alone. Mixing one with the other makes it hard for maintanence.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402061514", "createdAt": "2020-04-02T05:35:40Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading\n+              ? <span className={classnames('fa fa-times', classes.unselectIcon)} onClick={item.unselectFn} />\n+              : null}\n+            <UncontrolledTooltip\n+              target={`map-to-target-selected-${item.key}`}\n+              placement='right-end'\n+              delay={{ show: 750, hide: 0 }}\n+            >\n+              {item.description || item.name}\n+            </UncontrolledTooltip>\n+          </div>\n+        ))}\n       </div>\n     );\n-  }\n+  };\n+\n+  const renderLoading = () => {\n+    if (!loading) {\n+      return <hr />;\n+    }\n+    return (\n+      <div>\n+        <LinearProgress />\n+        <div>{T.translate(loading)}</div>\n+      </div>\n+    );\n+  };\n+\n+  const renderFilter = (placeholder) => {\n+    if (loading || !targetDataModel) {\n+      return null;\n+    }\n+    return (\n+      <Input\n+        autoFocus={true}\n+        type='text'\n+        className={classes.optionSearch}\n+        value={searchText}\n+        placeholder={placeholder}\n+        onChange={(event) => setSearchText(event.target.value)}\n+      />\n+    );\n+  };\n+\n+  const renderOptions = (options, selectFn) => {\n+    if (loading) {\n+      return null;\n+    }\n+    return (\n+      <List dense={true} disablePadding={true} className={classes.targetOptionList} hidden={loading}>\n+        {options.map(option => (\n+          <ListItem\n+            button={true}\n+            key={option.id}\n+            id={`map-to-target-option-${option.uuid}`}\n+            onClick={() => selectFn(option)}\n+          >\n+            <ListItemText\n+              className={classes.targetOption}\n+              primary={highlightText(option.name)}\n+            />\n+            <UncontrolledTooltip\n+              target={`map-to-target-option-${option.uuid}`}\n+              modifiers={{\n+                preventOverflow: {\n+                  boundariesElement: 'window'\n+                }\n+              }}\n+              placement='right'\n+              delay={{ show: 500, hide: 0 }}\n+            >\n+              {option.description || option.name}\n+            </UncontrolledTooltip>\n+          </ListItem>\n+        ))}\n+      </List>\n+    );\n+  };\n+\n+  const renderDetail = () => {\n+    if (!isOpen || isDisabled) {\n+      return null;\n+    }\n+\n+    let options, selectFn;\n+    let filterPlaceholder;\n+    const selection = [];\n+\n+    if (targetDataModel) {\n+      selection.push(\n+        {\n+          key: 'datamodel',\n+          label: T.translate(`${PREFIX}.dataModelLabel`),\n+          unselectFn: () => (async() => await selectTargetDataModel(null))(),\n+          ...targetDataModel,\n+        }\n+      );\n+      if (targetModel) {\n+        selection.push(\n+          {\n+            key: 'model',\n+            label: T.translate(`${PREFIX}.modelLabel`),\n+            unselectFn: () => selectTargetModel(null),\n+            ...targetModel,\n+          }\n+        );\n+        filterPlaceholder = T.translate(`${PREFIX}.fieldFilterPlaceholder`);\n+        options = applySearch(targetModel.fields || []);\n+        selectFn = (field) => (async () => await applyDirective(field))();\n+      } else {\n+        filterPlaceholder = T.translate(`${PREFIX}.modelFilterPlaceholder`);\n+        options = applySearch(targetDataModel.models || []);\n+        selectFn = (model) => selectTargetModel(model);\n+      }\n+    } else {\n+      options = dataModelList || [];\n+      selectFn = (dataModel) => (async () => await selectTargetDataModel(dataModel))();\n+    }\n+\n+    return (\n+      <div className={classnames('second-level-popover', classes.secondLevelPopover)} onClick={preventPropagation}>\n+        {renderHeader(selection)}\n+        {renderLoading()}\n+        {renderFilter(filterPlaceholder)}\n+        {renderOptions(options, selectFn)}\n+      </div>\n+    );\n+  };\n+\n+  return (\n+    <div\n+      id='map-to-target-directive'\n+      className={classnames('map-to-target-directive clearfix action-item', {\n+        active: isOpen && !isDisabled,\n+        disabled: isDisabled,\n+      })}\n+    >\n+      <span>{T.translate(`${PREFIX}.title`)}</span>\n+      <span className='float-right'>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 359}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MjAxMw==", "bodyText": "This component can definitely be broken down into individual components. There are far too many render functions.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402062013", "createdAt": "2020-04-02T05:37:26Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MjYwNA==", "bodyText": "Please convert this file to ts and provide types for these inputs. We are moving towards typescript and it would help having types for maintainability.  If this requires changing dataprep store to typescript please do so and only add type annotations to the newly added properties.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402062604", "createdAt": "2020-04-02T05:39:19Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzM2OQ==", "bodyText": "Please extract this out as a separate if condition.\nconst renderHeader = (selection) => {\n  if (!selection.length) {\n    return <Heading type={HeadingTypes.H5}> ...</HeadingType>;\n  }\n  return (\n     ...\n  );\n}", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402063369", "createdAt": "2020-04-02T05:42:11Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzcwOQ==", "bodyText": "Please use LoadingSVG component.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402063709", "createdAt": "2020-04-02T05:43:26Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading\n+              ? <span className={classnames('fa fa-times', classes.unselectIcon)} onClick={item.unselectFn} />\n+              : null}\n+            <UncontrolledTooltip\n+              target={`map-to-target-selected-${item.key}`}\n+              placement='right-end'\n+              delay={{ show: 750, hide: 0 }}\n+            >\n+              {item.description || item.name}\n+            </UncontrolledTooltip>\n+          </div>\n+        ))}\n       </div>\n     );\n-  }\n+  };\n+\n+  const renderLoading = () => {\n+    if (!loading) {\n+      return <hr />;\n+    }\n+    return (\n+      <div>\n+        <LinearProgress />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTE0MA==", "bodyText": "What is the reason this is changed to 300px? Can we be consistent with other second level popovers in dataprep?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402065140", "createdAt": "2020-04-02T05:48:26Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,365 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NzI4Nw=="}, "originalCommit": {"oid": "96166421cefc88eae28408830cb7f45db850cbd2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2OTQyOQ==", "bodyText": "Is it possible to add some comment on the logic of it? Seems very nested. A sample structure of the message.\nIs it possible to negate the conditions and return from the forEach? That would make it flatter.. ehh..\n data.fields.forEach((entry) => {\n  if (!Array.isArray(entry.type)) {\n    return;\n   }\n  const model = entry.type.find(..)\n  ...\n });\n\nSomething along that.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402069429", "createdAt": "2020-04-02T06:02:25Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/store/DataPrepActionCreator.js", "diffHunk": "@@ -296,3 +298,216 @@ export function setVisualizationState(state) {\n     },\n   });\n }\n+\n+export function setError(error, prefix) {\n+  const status = error.statusCode;\n+  const detail = error.message || error.response.message || 'Unknown error';\n+  const message = `${prefix || 'Error'}: ${status ? `${status}: ${detail}` : detail}`;\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setError,\n+    payload: {\n+      message,\n+    },\n+  });\n+}\n+\n+export async function loadTargetDataModelStates() {\n+  // These properties were populated by MyDataPrepApi.getWorkspace API\n+  const {\n+    dataModel,\n+    dataModelRevision,\n+    dataModelModel,\n+  } = DataPrepStore.getState().dataprep.properties;\n+\n+  let { dataModelList } = DataPrepStore.getState().dataprep;\n+  if (!Array.isArray(dataModelList)) {\n+    dataModelList = await fetchDataModelList(Theme.wranglerDataModelUrl);\n+  }\n+\n+  const rev = Number(dataModelRevision);\n+  const targetDataModel = dataModelList.find((dm) => dm.id === dataModel && dm.revision === rev);\n+  await setTargetDataModel(targetDataModel);\n+  if (targetDataModel) {\n+    await setTargetModel(targetDataModel.models.find((m) => m.id === dataModelModel));\n+  } else {\n+    await setTargetModel(null);\n+  }\n+}\n+\n+export async function saveTargetDataModelStates() {\n+  const params = {\n+    context: NamespaceStore.getState().selectedNamespace,\n+    workspaceId: DataPrepStore.getState().dataprep.workspaceId,\n+  };\n+\n+  const { targetDataModel, targetModel } = DataPrepStore.getState().dataprep;\n+  const newDataModelId = targetDataModel ? targetDataModel.id : null;\n+  const newDataModelRevision = targetDataModel ? targetDataModel.revision : null;\n+  const newModelId = targetModel ? targetModel.id : null;\n+\n+  // These properties were populated by MyDataPrepApi.getWorkspace API\n+  const {\n+    dataModel,\n+    dataModelRevision,\n+    dataModelModel,\n+  } = DataPrepStore.getState().dataprep.properties;\n+  const oldDataModelId = dataModel || null;\n+  const oldDataModelRevision = isFinite(dataModelRevision) ? Number(dataModelRevision) : null;\n+  const oldModelId = dataModelModel || null;\n+\n+  if (oldDataModelId !== newDataModelId || oldDataModelRevision !== newDataModelRevision) {\n+    if (oldDataModelId !== null) {\n+      await MyDataPrepApi.detachDataModel(params).toPromise();\n+    }\n+    if (newDataModelId !== null) {\n+      await MyDataPrepApi.attachDataModel(params, {\n+        id: newDataModelId,\n+        revision: newDataModelRevision,\n+      }).toPromise();\n+    }\n+  }\n+\n+  if (oldModelId !== newModelId) {\n+    if (oldModelId !== null) {\n+      await MyDataPrepApi.detachModel(\n+        Object.assign(\n+          {\n+            modelId: oldModelId,\n+          },\n+          params\n+        )\n+      ).toPromise();\n+    }\n+    if (newModelId !== null) {\n+      await MyDataPrepApi.attachModel(params, {\n+        id: newModelId,\n+      }).toPromise();\n+    }\n+  }\n+\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setProperties,\n+    payload: {\n+      properties: {\n+        dataModel: newDataModelId,\n+        dataModelRevision: newDataModelRevision,\n+        dataModelModel: newModelId,\n+      },\n+    },\n+  });\n+}\n+\n+export async function fetchDataModelList(url) {\n+  const namespace = NamespaceStore.getState().selectedNamespace;\n+  const params = {\n+    context: namespace,\n+  };\n+\n+  await MyDataPrepApi.addDataModels(params, { url }).toPromise();\n+  const response = await MyDataPrepApi.getDataModels(params).toPromise();\n+  const dataModelList = response.values.map((dataModel) => ({\n+    uuid: uuidV4(),\n+    id: dataModel['namespacedId'].id,\n+    revision: dataModel.revision,\n+    name: dataModel.displayName,\n+    description: dataModel.description,\n+    url,\n+  }));\n+  dataModelList.sort((a, b) => a.name.localeCompare(b.name));\n+\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setDataModelList,\n+    payload: {\n+      dataModelList,\n+    },\n+  });\n+\n+  return dataModelList;\n+}\n+\n+export async function fetchModelList(dataModel) {\n+  const params = {\n+    context: NamespaceStore.getState().selectedNamespace,\n+    dataModelId: dataModel.id,\n+    dataModelRevision: dataModel.revision,\n+  };\n+\n+  const response = await MyDataPrepApi.getDataModel(params).toPromise();\n+\n+  try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MTAxOQ==", "bodyText": "I understand selectTargetDataModel returns a promise but do we have to await here for the promise to resolve? This is invoked from a click handler I believe. Is there a specific reason for wrapping it and making it a async function?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402071019", "createdAt": "2020-04-02T06:07:23Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading\n+              ? <span className={classnames('fa fa-times', classes.unselectIcon)} onClick={item.unselectFn} />\n+              : null}\n+            <UncontrolledTooltip\n+              target={`map-to-target-selected-${item.key}`}\n+              placement='right-end'\n+              delay={{ show: 750, hide: 0 }}\n+            >\n+              {item.description || item.name}\n+            </UncontrolledTooltip>\n+          </div>\n+        ))}\n       </div>\n     );\n-  }\n+  };\n+\n+  const renderLoading = () => {\n+    if (!loading) {\n+      return <hr />;\n+    }\n+    return (\n+      <div>\n+        <LinearProgress />\n+        <div>{T.translate(loading)}</div>\n+      </div>\n+    );\n+  };\n+\n+  const renderFilter = (placeholder) => {\n+    if (loading || !targetDataModel) {\n+      return null;\n+    }\n+    return (\n+      <Input\n+        autoFocus={true}\n+        type='text'\n+        className={classes.optionSearch}\n+        value={searchText}\n+        placeholder={placeholder}\n+        onChange={(event) => setSearchText(event.target.value)}\n+      />\n+    );\n+  };\n+\n+  const renderOptions = (options, selectFn) => {\n+    if (loading) {\n+      return null;\n+    }\n+    return (\n+      <List dense={true} disablePadding={true} className={classes.targetOptionList} hidden={loading}>\n+        {options.map(option => (\n+          <ListItem\n+            button={true}\n+            key={option.id}\n+            id={`map-to-target-option-${option.uuid}`}\n+            onClick={() => selectFn(option)}\n+          >\n+            <ListItemText\n+              className={classes.targetOption}\n+              primary={highlightText(option.name)}\n+            />\n+            <UncontrolledTooltip\n+              target={`map-to-target-option-${option.uuid}`}\n+              modifiers={{\n+                preventOverflow: {\n+                  boundariesElement: 'window'\n+                }\n+              }}\n+              placement='right'\n+              delay={{ show: 500, hide: 0 }}\n+            >\n+              {option.description || option.name}\n+            </UncontrolledTooltip>\n+          </ListItem>\n+        ))}\n+      </List>\n+    );\n+  };\n+\n+  const renderDetail = () => {\n+    if (!isOpen || isDisabled) {\n+      return null;\n+    }\n+\n+    let options, selectFn;\n+    let filterPlaceholder;\n+    const selection = [];\n+\n+    if (targetDataModel) {\n+      selection.push(\n+        {\n+          key: 'datamodel',\n+          label: T.translate(`${PREFIX}.dataModelLabel`),\n+          unselectFn: () => (async() => await selectTargetDataModel(null))(),\n+          ...targetDataModel,\n+        }\n+      );\n+      if (targetModel) {\n+        selection.push(\n+          {\n+            key: 'model',\n+            label: T.translate(`${PREFIX}.modelLabel`),\n+            unselectFn: () => selectTargetModel(null),\n+            ...targetModel,\n+          }\n+        );\n+        filterPlaceholder = T.translate(`${PREFIX}.fieldFilterPlaceholder`);\n+        options = applySearch(targetModel.fields || []);\n+        selectFn = (field) => (async () => await applyDirective(field))();\n+      } else {\n+        filterPlaceholder = T.translate(`${PREFIX}.modelFilterPlaceholder`);\n+        options = applySearch(targetDataModel.models || []);\n+        selectFn = (model) => selectTargetModel(model);\n+      }\n+    } else {\n+      options = dataModelList || [];\n+      selectFn = (dataModel) => (async () => await selectTargetDataModel(dataModel))();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MTQyNw==", "bodyText": "Also what happens if the setTargetDataModel fails? Would a rejection here break the application because react unmounts the component if there is an error thrown in the render method.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402071427", "createdAt": "2020-04-02T06:08:36Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading\n+              ? <span className={classnames('fa fa-times', classes.unselectIcon)} onClick={item.unselectFn} />\n+              : null}\n+            <UncontrolledTooltip\n+              target={`map-to-target-selected-${item.key}`}\n+              placement='right-end'\n+              delay={{ show: 750, hide: 0 }}\n+            >\n+              {item.description || item.name}\n+            </UncontrolledTooltip>\n+          </div>\n+        ))}\n       </div>\n     );\n-  }\n+  };\n+\n+  const renderLoading = () => {\n+    if (!loading) {\n+      return <hr />;\n+    }\n+    return (\n+      <div>\n+        <LinearProgress />\n+        <div>{T.translate(loading)}</div>\n+      </div>\n+    );\n+  };\n+\n+  const renderFilter = (placeholder) => {\n+    if (loading || !targetDataModel) {\n+      return null;\n+    }\n+    return (\n+      <Input\n+        autoFocus={true}\n+        type='text'\n+        className={classes.optionSearch}\n+        value={searchText}\n+        placeholder={placeholder}\n+        onChange={(event) => setSearchText(event.target.value)}\n+      />\n+    );\n+  };\n+\n+  const renderOptions = (options, selectFn) => {\n+    if (loading) {\n+      return null;\n+    }\n+    return (\n+      <List dense={true} disablePadding={true} className={classes.targetOptionList} hidden={loading}>\n+        {options.map(option => (\n+          <ListItem\n+            button={true}\n+            key={option.id}\n+            id={`map-to-target-option-${option.uuid}`}\n+            onClick={() => selectFn(option)}\n+          >\n+            <ListItemText\n+              className={classes.targetOption}\n+              primary={highlightText(option.name)}\n+            />\n+            <UncontrolledTooltip\n+              target={`map-to-target-option-${option.uuid}`}\n+              modifiers={{\n+                preventOverflow: {\n+                  boundariesElement: 'window'\n+                }\n+              }}\n+              placement='right'\n+              delay={{ show: 500, hide: 0 }}\n+            >\n+              {option.description || option.name}\n+            </UncontrolledTooltip>\n+          </ListItem>\n+        ))}\n+      </List>\n+    );\n+  };\n+\n+  const renderDetail = () => {\n+    if (!isOpen || isDisabled) {\n+      return null;\n+    }\n+\n+    let options, selectFn;\n+    let filterPlaceholder;\n+    const selection = [];\n+\n+    if (targetDataModel) {\n+      selection.push(\n+        {\n+          key: 'datamodel',\n+          label: T.translate(`${PREFIX}.dataModelLabel`),\n+          unselectFn: () => (async() => await selectTargetDataModel(null))(),\n+          ...targetDataModel,\n+        }\n+      );\n+      if (targetModel) {\n+        selection.push(\n+          {\n+            key: 'model',\n+            label: T.translate(`${PREFIX}.modelLabel`),\n+            unselectFn: () => selectTargetModel(null),\n+            ...targetModel,\n+          }\n+        );\n+        filterPlaceholder = T.translate(`${PREFIX}.fieldFilterPlaceholder`);\n+        options = applySearch(targetModel.fields || []);\n+        selectFn = (field) => (async () => await applyDirective(field))();\n+      } else {\n+        filterPlaceholder = T.translate(`${PREFIX}.modelFilterPlaceholder`);\n+        options = applySearch(targetDataModel.models || []);\n+        selectFn = (model) => selectTargetModel(model);\n+      }\n+    } else {\n+      options = dataModelList || [];\n+      selectFn = (dataModel) => (async () => await selectTargetDataModel(dataModel))();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MTAxOQ=="}, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDE0Mg==", "bodyText": "Please use a named function here.\nuseEffect(() => {\n  ...\n  async function loadTargetModel() {\n    try {\n        await loadTargetDataModelStates();\n    } catch (error) {\n        setError(error);\n    } finally {\n        if (pending) {\n          setLoading('');\n        }\n    }\n  }\n  loadTargetModel();\n});\n\nMakes it slightly better for readability. Better yet if you could extract function outside of useEffect.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402074142", "createdAt": "2020-04-02T06:16:23Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTQxMw==", "bodyText": "Any specific reason to not use existing styles? Why the override?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402075413", "createdAt": "2020-04-02T06:19:57Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTY1Mg==", "bodyText": "Here as well. Please use <IconSVG /> component to render icons.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r402075652", "createdAt": "2020-04-02T06:20:38Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.js", "diffHunk": "@@ -14,36 +14,367 @@\n  * the License.\n  */\n \n-import React, { Component } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import Input from '@material-ui/core/Input';\n+import LinearProgress from '@material-ui/core/LinearProgress';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import { UncontrolledTooltip } from 'reactstrap';\n import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import DataPrepStore from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const useStyles = makeStyles(theme => ({\n+  secondLevelPopover: {\n+    width: '300px !important',\n+  },\n+  selectedItem: {\n+    display: 'flex',\n+    flexDirection: 'row',\n+  },\n+  selectedItemLabel: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+    fontWeight: 'bold',\n+  },\n+  selectedItemName: {\n+    flex: 1,\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  unselectIcon: {\n+    cursor: 'pointer',\n+    padding: theme.spacing(0.75),\n+    margin: '0 !important',\n+    '&:hover': {\n+      fontWeight: 'bold',\n+    },\n+  },\n+  optionSearch: {\n+    width: '100%',\n+    marginBottom: theme.spacing(0.5),\n+  },\n+  targetOptionList: {\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    maxHeight: '400px',\n+  },\n+  targetOption: {\n+    whiteSpace: 'nowrap',\n+    textOverflow: 'ellipsis',\n+    overflow: 'hidden',\n+  },\n+  highlight: {\n+    color: theme.palette.primary.contrastText,\n+    backgroundColor: theme.palette.primary.dark,\n+  },\n+}));\n \n const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n \n-export default class MapToTarget extends Component {\n-  static propTypes = {\n-    isOpen: PropTypes.bool,\n-    isDisabled: PropTypes.bool,\n-    column: PropTypes.string,\n-    onComplete: PropTypes.func,\n+const MapToTarget = (props) => {\n+  const classes = useStyles(undefined);\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+  const [loading, setLoading] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoading(`${PREFIX}.initializingText`);\n+    (async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);\n+      } finally {\n+        if (pending) {\n+          setLoading('');\n+        }\n+      }\n+    })();\n+    return () => {\n+      pending = false;\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const applySearch = (options) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (searchTextUpper) {\n+      return options.filter((option) => option.name.toUpperCase().indexOf(searchTextUpper) >= 0);\n+    }\n+    return options;\n   };\n \n-  render() {\n+  const highlightText = (text) => {\n+    const searchTextUpper = searchText.trim().toUpperCase();\n+    if (!searchTextUpper) {\n+      return text;\n+    }\n+    const index = text.toUpperCase().indexOf(searchTextUpper);\n+    if (index < 0) {\n+      return text;\n+    }\n+    const leadingText = text.substring(0, index);\n+    const highlightedText = text.substring(index, index + searchTextUpper.length);\n+    const trailingText = text.substring(index + searchTextUpper.length);\n     return (\n-      <div\n-        id='map-to-target-directive'\n-        className={classnames('clearfix action-item', {\n-          active: this.props.isOpen && !this.props.isDisabled,\n-          disabled: this.props.isDisabled,\n-        })}\n-      >\n-        <span>{T.translate(`${PREFIX}.title`)}</span>\n-        <span className='float-right'>\n-          <span className='fa fa-caret-right' />\n-        </span>\n+      <span>\n+        {leadingText}\n+        <span className={classes.highlight}>{highlightedText}</span>\n+        {trailingText}\n+      </span>\n+    );\n+  };\n+\n+  const resetTargetOptionsScroll = () => {\n+    const element = document.querySelector('.' + classes.targetOptionList);\n+    if (element) {\n+      element.scrollTop = 0;\n+    }\n+  };\n+\n+  const selectTargetDataModel = async (dataModel) => {\n+    setLoading(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+      resetTargetOptionsScroll();\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+    resetTargetOptionsScroll();\n+  };\n+\n+  const applyDirective = async (field) => {\n+    setLoading(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+\n+      const directive = 'data-model-map-column ' +\n+        `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+        `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+      await execute([directive], false, true).toPromise();\n+\n+      close();\n+      onComplete();\n+    } catch (error) {\n+      setError(error, 'Error executing Map to Target directive');\n+    } finally {\n+      setLoading('');\n+    }\n+  };\n+\n+  const renderHeader = (selection) => {\n+    return (\n+      <div>\n+        {selection.length === 0 ? <h5>{T.translate(`${PREFIX}.dataModelPlaceholder`)}</h5> : null}\n+        {selection.map(item => (\n+          <div id={`map-to-target-selected-${item.key}`} key={item.key} className={classes.selectedItem}>\n+            <span className={classes.selectedItemLabel}>{item.label}:&nbsp;</span>\n+            <span className={classes.selectedItemName}>{item.name}</span>\n+            {!loading // Hide [X] when loading\n+              ? <span className={classnames('fa fa-times', classes.unselectIcon)} onClick={item.unselectFn} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1943822df992b434cf9247afcc3647221f0a5a"}, "originalPosition": 221}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10f4bfb07a2297e4391d6f2a453eae0b5c4238e6", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/10f4bfb07a2297e4391d6f2a453eae0b5c4238e6", "committedDate": "2020-04-06T03:27:38Z", "message": "Merge branch 'develop' of https://github.com/cdapio/cdap into feature/wrangler-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/2b395ba5bf262d55df2a6e5ed167fda51dc73cfe", "committedDate": "2020-04-08T04:07:40Z", "message": "Fixed code review remarks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDczMDU1", "url": "https://github.com/cdapio/cdap/pull/11972#pullrequestreview-410473055", "createdAt": "2020-05-12T22:41:30Z", "commit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0MTozMVrOGUbdxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NTo0OFrOGUbxow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NDY5NA==", "bodyText": "This would make a POST request to add data model when the popover is opened right? Do we need this everytime the directives popover is opened?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r424074694", "createdAt": "2020-05-12T22:41:31Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.tsx", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import { CurrentSelection } from 'components/DataPrep/Directives/MapToTarget/CurrentSelection';\n+import { LoadingBar } from 'components/DataPrep/Directives/MapToTarget/LoadingBar';\n+import { OptionFilter } from 'components/DataPrep/Directives/MapToTarget/OptionFilter';\n+import { OptionList } from 'components/DataPrep/Directives/MapToTarget/OptionList';\n+import IconSVG from 'components/IconSVG';\n+import DataPrepStore, { IDataModel, IModel, IModelField } from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel,\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n+\n+const useStyles = makeStyles({\n+  clearfix: {\n+    '&::after': {\n+      display: 'block',\n+      clear: 'both',\n+      content: 'none',\n+    },\n+  },\n+  floatRight: {\n+    float: 'right',\n+  },\n+});\n+\n+interface IMapToTargetProps {\n+  isOpen: boolean;\n+  isDisabled: boolean;\n+  column: string;\n+  onComplete: () => void;\n+  close: () => void;\n+  dataModelList?: IDataModel[];\n+  targetDataModel?: IDataModel;\n+  targetModel?: IModel;\n+}\n+\n+const MapToTarget = (props: IMapToTargetProps) => {\n+  const classes = useStyles(undefined);\n+\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+\n+  const [loadingText, setLoadingText] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoadingText(`${PREFIX}.initializingText`);\n+\n+    const initialize = async () => {\n+      try {\n+        await loadTargetDataModelStates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NDk1NA==", "bodyText": "This seems to be not useful. This is what I am seeing if the wrangler app is not configured properly to serve this request.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r424074954", "createdAt": "2020-05-12T22:42:17Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.tsx", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import { CurrentSelection } from 'components/DataPrep/Directives/MapToTarget/CurrentSelection';\n+import { LoadingBar } from 'components/DataPrep/Directives/MapToTarget/LoadingBar';\n+import { OptionFilter } from 'components/DataPrep/Directives/MapToTarget/OptionFilter';\n+import { OptionList } from 'components/DataPrep/Directives/MapToTarget/OptionList';\n+import IconSVG from 'components/IconSVG';\n+import DataPrepStore, { IDataModel, IModel, IModelField } from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel,\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n+\n+const useStyles = makeStyles({\n+  clearfix: {\n+    '&::after': {\n+      display: 'block',\n+      clear: 'both',\n+      content: 'none',\n+    },\n+  },\n+  floatRight: {\n+    float: 'right',\n+  },\n+});\n+\n+interface IMapToTargetProps {\n+  isOpen: boolean;\n+  isDisabled: boolean;\n+  column: string;\n+  onComplete: () => void;\n+  close: () => void;\n+  dataModelList?: IDataModel[];\n+  targetDataModel?: IDataModel;\n+  targetModel?: IModel;\n+}\n+\n+const MapToTarget = (props: IMapToTargetProps) => {\n+  const classes = useStyles(undefined);\n+\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+\n+  const [loadingText, setLoadingText] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoadingText(`${PREFIX}.initializingText`);\n+\n+    const initialize = async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NzQ4Nw==", "bodyText": "Seems like this interface is having too many any types. Do we know the structure of the response? Using this many anys just takes away the point of using typescript though.", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r424077487", "createdAt": "2020-05-12T22:49:14Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/store/index.ts", "diffHunk": "@@ -18,12 +18,65 @@ import { combineReducers, createStore } from 'redux';\n import DataPrepActions from 'components/DataPrep/store/DataPrepActions';\n import { composeEnhancers } from 'services/helpers';\n \n-const defaultAction = {\n+export interface IDataPrepAction {\n+  type: string;\n+  action?: string;\n+  payload?: any;\n+}\n+\n+const defaultAction: IDataPrepAction = {\n+  type: '',\n   action: '',\n   payload: {},\n };\n \n-const defaultInitialState = {\n+export interface IDataModel {\n+  uuid: string;\n+  id: string;\n+  revision: number;\n+  name: string;\n+  description?: string;\n+  url?: string;\n+  models?: IModel[];\n+}\n+\n+export interface IModel {\n+  uuid: string;\n+  id: string;\n+  name: string;\n+  description?: string;\n+  fields?: IModelField[];\n+}\n+\n+export interface IModelField {\n+  uuid: string;\n+  id: string;\n+  name: string;\n+  description?: string;\n+}\n+\n+export interface IDataPrepState {\n+  initialized?: boolean;\n+  workspaceId?: string;\n+  workspaceUri?: string;\n+  data?: any;\n+  headers?: any;\n+  types?: any; // pure column types from backend. Used for display\n+  typesCheck?: any; // case sensitive column types, Should be used when checking types of column\n+  selectedHeaders?: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODAxNA==", "bodyText": "nit: Please make this multiline comment.\n/**\n * example response\n */", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r424078014", "createdAt": "2020-05-12T22:50:43Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/store/DataPrepActionCreator.js", "diffHunk": "@@ -296,3 +298,271 @@ export function setVisualizationState(state) {\n     },\n   });\n }\n+\n+export function setError(error, prefix) {\n+  const status = error.statusCode;\n+  const detail = error.message || error.response.message || 'Unknown error';\n+  const message = `${prefix || 'Error'}: ${status ? `${status}: ${detail}` : detail}`;\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setError,\n+    payload: {\n+      message,\n+    },\n+  });\n+}\n+\n+export async function loadTargetDataModelStates() {\n+  // These properties were populated by MyDataPrepApi.getWorkspace API\n+  const {\n+    dataModel,\n+    dataModelRevision,\n+    dataModelModel,\n+  } = DataPrepStore.getState().dataprep.properties;\n+\n+  let { dataModelList } = DataPrepStore.getState().dataprep;\n+  if (!Array.isArray(dataModelList)) {\n+    dataModelList = await fetchDataModelList(Theme.wranglerDataModelUrl);\n+  }\n+\n+  const rev = Number(dataModelRevision);\n+  const targetDataModel = dataModelList.find((dm) => dm.id === dataModel && dm.revision === rev);\n+  await setTargetDataModel(targetDataModel);\n+  if (targetDataModel) {\n+    await setTargetModel(targetDataModel.models.find((m) => m.id === dataModelModel));\n+  } else {\n+    await setTargetModel(null);\n+  }\n+}\n+\n+export async function saveTargetDataModelStates() {\n+  const params = {\n+    context: NamespaceStore.getState().selectedNamespace,\n+    workspaceId: DataPrepStore.getState().dataprep.workspaceId,\n+  };\n+\n+  const { targetDataModel, targetModel } = DataPrepStore.getState().dataprep;\n+  const newDataModelId = targetDataModel ? targetDataModel.id : null;\n+  const newDataModelRevision = targetDataModel ? targetDataModel.revision : null;\n+  const newModelId = targetModel ? targetModel.id : null;\n+\n+  // These properties were populated by MyDataPrepApi.getWorkspace API\n+  const {\n+    dataModel,\n+    dataModelRevision,\n+    dataModelModel,\n+  } = DataPrepStore.getState().dataprep.properties;\n+  const oldDataModelId = dataModel || null;\n+  const oldDataModelRevision = isFinite(dataModelRevision) ? Number(dataModelRevision) : null;\n+  const oldModelId = dataModelModel || null;\n+\n+  if (oldDataModelId !== newDataModelId || oldDataModelRevision !== newDataModelRevision) {\n+    if (oldDataModelId !== null) {\n+      await MyDataPrepApi.detachDataModel(params).toPromise();\n+    }\n+    if (newDataModelId !== null) {\n+      await MyDataPrepApi.attachDataModel(params, {\n+        id: newDataModelId,\n+        revision: newDataModelRevision,\n+      }).toPromise();\n+    }\n+  }\n+\n+  if (oldModelId !== newModelId) {\n+    if (oldModelId !== null) {\n+      await MyDataPrepApi.detachModel(\n+        Object.assign(\n+          {\n+            modelId: oldModelId,\n+          },\n+          params\n+        )\n+      ).toPromise();\n+    }\n+    if (newModelId !== null) {\n+      await MyDataPrepApi.attachModel(params, {\n+        id: newModelId,\n+      }).toPromise();\n+    }\n+  }\n+\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setProperties,\n+    payload: {\n+      properties: {\n+        dataModel: newDataModelId,\n+        dataModelRevision: newDataModelRevision,\n+        dataModelModel: newModelId,\n+      },\n+    },\n+  });\n+}\n+\n+export async function fetchDataModelList(url) {\n+  const namespace = NamespaceStore.getState().selectedNamespace;\n+  const params = {\n+    context: namespace,\n+  };\n+\n+  await MyDataPrepApi.addDataModels(params, { url }).toPromise();\n+  const response = await MyDataPrepApi.getDataModels(params).toPromise();\n+  const dataModelList = response.values.map((dataModel) => ({\n+    uuid: uuidV4(),\n+    id: dataModel['namespacedId'].id,\n+    revision: dataModel.revision,\n+    name: dataModel.displayName,\n+    description: dataModel.description,\n+    url,\n+  }));\n+  dataModelList.sort((a, b) => a.name.localeCompare(b.name));\n+\n+  DataPrepStore.dispatch({\n+    type: DataPrepActions.setDataModelList,\n+    payload: {\n+      dataModelList,\n+    },\n+  });\n+\n+  return dataModelList;\n+}\n+\n+export async function fetchModelList(dataModel) {\n+  const params = {\n+    context: NamespaceStore.getState().selectedNamespace,\n+    dataModelId: dataModel.id,\n+    dataModelRevision: dataModel.revision,\n+  };\n+\n+  // Response message example:\n+  // {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTc3OQ==", "bodyText": "This could also be a 404 in which case the message will be in error.response. I understand this is not formalized yet but can we add a check for error.response to be a string and if so use that?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r424079779", "createdAt": "2020-05-12T22:55:48Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/store/DataPrepActionCreator.js", "diffHunk": "@@ -296,3 +298,271 @@ export function setVisualizationState(state) {\n     },\n   });\n }\n+\n+export function setError(error, prefix) {\n+  const status = error.statusCode;\n+  const detail = error.message || error.response.message || 'Unknown error';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b395ba5bf262d55df2a6e5ed167fda51dc73cfe"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ce70fd10a591d475f550a5f2341b0e23b95e6d", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/e9ce70fd10a591d475f550a5f2341b0e23b95e6d", "committedDate": "2020-05-13T01:56:33Z", "message": "Merge branch 'develop' of https://github.com/cdapio/cdap into feature/wrangler-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aca362e895162bb4aa4da2563c740fb02e6aee95", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/aca362e895162bb4aa4da2563c740fb02e6aee95", "committedDate": "2020-05-13T02:48:04Z", "message": "Fixed code review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63f63db1964e502528caf8ec9eba83c3988e7019", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/63f63db1964e502528caf8ec9eba83c3988e7019", "committedDate": "2020-05-14T01:55:56Z", "message": "Fixed code review remarks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa835488fe5de34c3df1abb3d8fb8b1b0354a1b1", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/aa835488fe5de34c3df1abb3d8fb8b1b0354a1b1", "committedDate": "2020-05-15T09:42:53Z", "message": "Adjusted font and size of menu items to be inline with menus of other directives."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzAxOTQ2", "url": "https://github.com/cdapio/cdap/pull/11972#pullrequestreview-412701946", "createdAt": "2020-05-15T14:32:09Z", "commit": {"oid": "aa835488fe5de34c3df1abb3d8fb8b1b0354a1b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozMjoxMFrOGWHX-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozMjoxMFrOGWHX-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MjY4Mg==", "bodyText": "Can we please avoid inline styles. Can we see if we can increase the specificity of this styling?", "url": "https://github.com/cdapio/cdap/pull/11972#discussion_r425842682", "createdAt": "2020-05-15T14:32:10Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DataPrep/Directives/MapToTarget/index.tsx", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import T from 'i18n-react';\n+import { makeStyles } from '@material-ui/core';\n+import classnames from 'classnames';\n+import { preventPropagation, connectWithStore } from 'services/helpers';\n+import { setPopoverOffset } from 'components/DataPrep/helper';\n+import { CurrentSelection } from 'components/DataPrep/Directives/MapToTarget/CurrentSelection';\n+import { LoadingBar } from 'components/DataPrep/Directives/MapToTarget/LoadingBar';\n+import { OptionFilter } from 'components/DataPrep/Directives/MapToTarget/OptionFilter';\n+import { OptionList } from 'components/DataPrep/Directives/MapToTarget/OptionList';\n+import IconSVG from 'components/IconSVG';\n+import DataPrepStore, { IDataModel, IModel, IModelField } from 'components/DataPrep/store';\n+import {\n+  execute,\n+  setError,\n+  loadTargetDataModelStates,\n+  saveTargetDataModelStates,\n+  setTargetDataModel,\n+  setTargetModel,\n+} from 'components/DataPrep/store/DataPrepActionCreator';\n+\n+const PREFIX = 'features.DataPrep.Directives.MapToTarget';\n+\n+const useStyles = makeStyles({\n+  clearfix: {\n+    '&::after': {\n+      display: 'block',\n+      clear: 'both',\n+      content: 'none',\n+    },\n+  },\n+  floatRight: {\n+    float: 'right',\n+  },\n+});\n+\n+interface IMapToTargetProps {\n+  isOpen: boolean;\n+  isDisabled: boolean;\n+  column: string;\n+  onComplete: () => void;\n+  close: () => void;\n+  dataModelList?: IDataModel[];\n+  targetDataModel?: IDataModel;\n+  targetModel?: IModel;\n+}\n+\n+const MapToTarget = (props: IMapToTargetProps) => {\n+  const classes = useStyles(undefined);\n+\n+  const {\n+    isOpen,\n+    isDisabled,\n+    column,\n+    onComplete,\n+    close,\n+    dataModelList,\n+    targetDataModel,\n+    targetModel,\n+  } = props;\n+\n+  const [loadingText, setLoadingText] = useState('');\n+  const [searchText, setSearchText] = useState('');\n+\n+  useEffect(() => {\n+    let pending = true;\n+    setLoadingText(`${PREFIX}.initializingText`);\n+\n+    const initialize = async () => {\n+      try {\n+        await loadTargetDataModelStates();\n+      } catch (error) {\n+        setError(error, 'Map to Target directive initialization failed');\n+      } finally {\n+        if (pending) {\n+          setLoadingText('');\n+        }\n+      }\n+    };\n+\n+    initialize();\n+\n+    return () => {\n+      pending = false;\n+    };\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isOpen && !isDisabled) {\n+      setPopoverOffset(document.getElementById('map-to-target-directive'));\n+    }\n+  });\n+\n+  const selectTargetDataModel = async (dataModel: IDataModel) => {\n+    setLoadingText(`${PREFIX}.loadingText`);\n+    try {\n+      setTargetModel(null);\n+      await setTargetDataModel(dataModel);\n+      setSearchText('');\n+    } catch (error) {\n+      setError(error, 'Could not set target data model');\n+    } finally {\n+      setLoadingText('');\n+    }\n+  };\n+\n+  const selectTargetModel = (model: IModel) => {\n+    setTargetModel(model);\n+    setSearchText('');\n+  };\n+\n+  const applyDirective = async (field: IModelField) => {\n+    setLoadingText(`${PREFIX}.executingDirectiveText`);\n+    try {\n+      await saveTargetDataModelStates();\n+    } catch (error) {\n+      setError(error, 'Could not save target data model states');\n+      setLoadingText('');\n+      return;\n+    }\n+\n+    executeDirective(field);\n+  };\n+\n+  const executeDirective = (field: IModelField) => {\n+    const directive =\n+      'data-model-map-column ' +\n+      `'${targetDataModel.url}' '${targetDataModel.id}' ${targetDataModel.revision} ` +\n+      `'${targetModel.id}' '${field.id}' :${column}`;\n+\n+    execute([directive], false, true).subscribe(\n+      () => {\n+        close();\n+        onComplete();\n+      },\n+      (error) => {\n+        setError(error, 'Error executing Map to Target directive');\n+      }\n+    );\n+  };\n+\n+  const renderDetail = () => {\n+    if (!isOpen || isDisabled) {\n+      return null;\n+    }\n+\n+    return (\n+      <div className=\"second-level-popover\" style={{ padding: 0 }} onClick={preventPropagation}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa835488fe5de34c3df1abb3d8fb8b1b0354a1b1"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc67c2bee57d67916e5645063aee032a1000b1a", "author": {"user": {"login": "mukhlin", "name": null}}, "url": "https://github.com/cdapio/cdap/commit/5bc67c2bee57d67916e5645063aee032a1000b1a", "committedDate": "2020-05-19T09:39:29Z", "message": "Refactored styles."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODA4OTk0", "url": "https://github.com/cdapio/cdap/pull/11972#pullrequestreview-414808994", "createdAt": "2020-05-19T20:45:01Z", "commit": {"oid": "5bc67c2bee57d67916e5645063aee032a1000b1a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2261, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}