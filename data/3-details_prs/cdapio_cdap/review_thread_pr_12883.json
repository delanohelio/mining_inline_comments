{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzcwMzUy", "number": 12883, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowMzoyOFrOFDD_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxNDowM1rOFGeRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU1NTI2OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowMzoyOFrOICiNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowMzoyOFrOICiNpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyODYxNA==", "bodyText": "nit: We can remove commented out code.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539528614", "createdAt": "2020-12-09T18:03:28Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU1NzgyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDowNFrOICiPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDowNFrOICiPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyODk5OQ==", "bodyText": "Same here.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539528999", "createdAt": "2020-12-09T18:04:04Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];\n+  dropdownOptions: any;\n+  extraConfig?: any;\n+}\n+\n+interface IKeyValueState {\n+  value: string;\n+  key: string;\n+}\n+\n+type StateKeys = keyof IKeyValueState;\n+\n+class InputKeyValueDropdown extends AbstractRow<IInputKeyValueDropdownProps, IKeyValueState> {\n+  public static defaultProps = {\n+    keyPlaceholder: 'Test',\n+    kvDelimiter: '=',\n+    dropdownOptions: [],\n+    delimiter: ',',\n+  };\n+\n+  public state = {\n+    key: '',\n+    value: '',\n+  };\n+\n+  public componentDidMount() {\n+    const [key = '', value = ''] = this.props.value.split(this.props.kvDelimiter);\n+\n+    this.setState({\n+      key,\n+      value,\n+    });\n+  }\n+\n+  private handleChange = (type: StateKeys, e) => {\n+    this.setState(\n+      {\n+        [type]: e.target.value,\n+      } as Pick<IKeyValueState, StateKeys>,\n+      () => {\n+        const key = this.state.key;\n+        const value = this.state.value;\n+\n+        const updatedValue = key.length > 0 ? [key, value].join(this.props.kvDelimiter) : '';\n+        this.onChange(updatedValue);\n+      }\n+    );\n+  };\n+\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  // Function that checks if types contains a type that is in allowedTypes\n+  // This is meant to handle nullable fields since a nullable string type is\n+  // presented as ['string','null'].\n+  public containsType(types: string[], allowedTypes: string[]) {\n+    if (allowedTypes.length === 0) {\n+      return true;\n+    }\n+\n+    return allowedTypes.includes(this.extractType(types));\n+  }\n+\n+  public extractType(types) {\n+    let value = types;\n+    if (types instanceof Array) {\n+      if (types.length === 1) {\n+        value = types[0];\n+      } else if (types.length === 2 && types.includes('null')) {\n+        value = types.indexOf('null') === 0 ? types[1] : types[0];\n+      }\n+    }\n+\n+    if (typeof value === 'object') {\n+      value = value.logicalType || value;\n+    }\n+    return value;\n+  }\n+\n+  public renderInput = () => {\n+    // const inputSchema = objectQuery(this.props.extraConfig, 'inputSchema');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU1ODk3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDoxOFrOICiP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDoxOFrOICiP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyOTE2OA==", "bodyText": "This file needs license header.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539529168", "createdAt": "2020-12-09T18:04:18Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU1OTU1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDoyN1rOICiQNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNDoyN1rOICiQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyOTI2OA==", "bodyText": "nit: 2020", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539529268", "createdAt": "2020-12-09T18:04:27Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright \u00a9 2019 Cask Data, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU3NDUyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/server/config/development/cdap.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzo0NVrOICiY2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMzo0OVrOIDkpyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTQ4MA==", "bodyText": "This is not needed.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539531480", "createdAt": "2020-12-09T18:07:45Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/server/config/development/cdap.json", "diffHunk": "@@ -7,7 +7,7 @@\n   \"dashboard.ssl.disable.cert.check\": \"false\",\n   \"ssl.external.enabled\": \"false\",\n   \"router.server.address\": \"127.0.0.1\",\n-  \"dashboard.bind.port\": \"11011\",\n+  \"dashboard.bind.port\": \"11012\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNzE2Mw==", "bodyText": "Bump^", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540617163", "createdAt": "2020-12-11T01:13:49Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/server/config/development/cdap.json", "diffHunk": "@@ -7,7 +7,7 @@\n   \"dashboard.ssl.disable.cert.check\": \"false\",\n   \"ssl.external.enabled\": \"false\",\n   \"router.server.address\": \"127.0.0.1\",\n-  \"dashboard.bind.port\": \"11011\",\n+  \"dashboard.bind.port\": \"11012\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTQ4MA=="}, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU3NTI1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/package.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzo1NlrOICiZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzo1NlrOICiZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTU5Ng==", "bodyText": "This change is not related to this widget right?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539531596", "createdAt": "2020-12-09T18:07:56Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/package.json", "diffHunk": "@@ -125,7 +125,7 @@\n     \"main-bower-files\": \"2.13.3\",\n     \"merge-stream\": \"2.0.0\",\n     \"node-dir\": \"0.1.17\",\n-    \"node-sass\": \"4.13.0\",\n+    \"node-sass\": \"4.14.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYwMTIwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNDoxOFrOICipPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMzozN1rOIDkplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNTY3OA==", "bodyText": "We seem to be calling allowedTypes always with []. Is this really necessary?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539535678", "createdAt": "2020-12-09T18:14:18Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];\n+  dropdownOptions: any;\n+  extraConfig?: any;\n+}\n+\n+interface IKeyValueState {\n+  value: string;\n+  key: string;\n+}\n+\n+type StateKeys = keyof IKeyValueState;\n+\n+class InputKeyValueDropdown extends AbstractRow<IInputKeyValueDropdownProps, IKeyValueState> {\n+  public static defaultProps = {\n+    keyPlaceholder: 'Test',\n+    kvDelimiter: '=',\n+    dropdownOptions: [],\n+    delimiter: ',',\n+  };\n+\n+  public state = {\n+    key: '',\n+    value: '',\n+  };\n+\n+  public componentDidMount() {\n+    const [key = '', value = ''] = this.props.value.split(this.props.kvDelimiter);\n+\n+    this.setState({\n+      key,\n+      value,\n+    });\n+  }\n+\n+  private handleChange = (type: StateKeys, e) => {\n+    this.setState(\n+      {\n+        [type]: e.target.value,\n+      } as Pick<IKeyValueState, StateKeys>,\n+      () => {\n+        const key = this.state.key;\n+        const value = this.state.value;\n+\n+        const updatedValue = key.length > 0 ? [key, value].join(this.props.kvDelimiter) : '';\n+        this.onChange(updatedValue);\n+      }\n+    );\n+  };\n+\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNzExMQ==", "bodyText": "bump^", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540617111", "createdAt": "2020-12-11T01:13:37Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];\n+  dropdownOptions: any;\n+  extraConfig?: any;\n+}\n+\n+interface IKeyValueState {\n+  value: string;\n+  key: string;\n+}\n+\n+type StateKeys = keyof IKeyValueState;\n+\n+class InputKeyValueDropdown extends AbstractRow<IInputKeyValueDropdownProps, IKeyValueState> {\n+  public static defaultProps = {\n+    keyPlaceholder: 'Test',\n+    kvDelimiter: '=',\n+    dropdownOptions: [],\n+    delimiter: ',',\n+  };\n+\n+  public state = {\n+    key: '',\n+    value: '',\n+  };\n+\n+  public componentDidMount() {\n+    const [key = '', value = ''] = this.props.value.split(this.props.kvDelimiter);\n+\n+    this.setState({\n+      key,\n+      value,\n+    });\n+  }\n+\n+  private handleChange = (type: StateKeys, e) => {\n+    this.setState(\n+      {\n+        [type]: e.target.value,\n+      } as Pick<IKeyValueState, StateKeys>,\n+      () => {\n+        const key = this.state.key;\n+        const value = this.state.value;\n+\n+        const updatedValue = key.length > 0 ? [key, value].join(this.props.kvDelimiter) : '';\n+        this.onChange(updatedValue);\n+      }\n+    );\n+  };\n+\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNTY3OA=="}, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYxMTMyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNjo0MFrOICivNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNjo0MFrOICivNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNzIwNA==", "bodyText": "This doesn't look right. The dropdownOptions comes from widgetProps which means its a static one from the widget json (like placeholder or default value).\nBased on my understanding shouldn't this be list of fields from the input schema? If so then the commented out code seems right as this widget needs to show fields from current input schema. Did I understand that right?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539537204", "createdAt": "2020-12-09T18:16:40Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];\n+  dropdownOptions: any;\n+  extraConfig?: any;\n+}\n+\n+interface IKeyValueState {\n+  value: string;\n+  key: string;\n+}\n+\n+type StateKeys = keyof IKeyValueState;\n+\n+class InputKeyValueDropdown extends AbstractRow<IInputKeyValueDropdownProps, IKeyValueState> {\n+  public static defaultProps = {\n+    keyPlaceholder: 'Test',\n+    kvDelimiter: '=',\n+    dropdownOptions: [],\n+    delimiter: ',',\n+  };\n+\n+  public state = {\n+    key: '',\n+    value: '',\n+  };\n+\n+  public componentDidMount() {\n+    const [key = '', value = ''] = this.props.value.split(this.props.kvDelimiter);\n+\n+    this.setState({\n+      key,\n+      value,\n+    });\n+  }\n+\n+  private handleChange = (type: StateKeys, e) => {\n+    this.setState(\n+      {\n+        [type]: e.target.value,\n+      } as Pick<IKeyValueState, StateKeys>,\n+      () => {\n+        const key = this.state.key;\n+        const value = this.state.value;\n+\n+        const updatedValue = key.length > 0 ? [key, value].join(this.props.kvDelimiter) : '';\n+        this.onChange(updatedValue);\n+      }\n+    );\n+  };\n+\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  // Function that checks if types contains a type that is in allowedTypes\n+  // This is meant to handle nullable fields since a nullable string type is\n+  // presented as ['string','null'].\n+  public containsType(types: string[], allowedTypes: string[]) {\n+    if (allowedTypes.length === 0) {\n+      return true;\n+    }\n+\n+    return allowedTypes.includes(this.extractType(types));\n+  }\n+\n+  public extractType(types) {\n+    let value = types;\n+    if (types instanceof Array) {\n+      if (types.length === 1) {\n+        value = types[0];\n+      } else if (types.length === 2 && types.includes('null')) {\n+        value = types.indexOf('null') === 0 ? types[1] : types[0];\n+      }\n+    }\n+\n+    if (typeof value === 'object') {\n+      value = value.logicalType || value;\n+    }\n+    return value;\n+  }\n+\n+  public renderInput = () => {\n+    // const inputSchema = objectQuery(this.props.extraConfig, 'inputSchema');\n+    const fieldValues = this.getFields(this.props.dropdownOptions, []);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYxNjMwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNzo0MVrOICiyEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNzo0MVrOICiyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNzkzOQ==", "bodyText": "Based on the usage of allowedTypes seems like both this and the extractType function is unnecessary?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r539537939", "createdAt": "2020-12-09T18:17:41Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/InputKeyValueDropdown.tsx", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as React from 'react';\n+\n+import AbstractRow, {\n+  AbstractRowStyles,\n+  IAbstractRowProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget/AbstractRow';\n+import { IStageSchema, IWidgetProps } from 'components/AbstractWidget';\n+import { objectQuery } from 'services/helpers';\n+import Input from '@material-ui/core/Input';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import Select from '@material-ui/core/Select';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+\n+const styles = (theme) => {\n+  return {\n+    ...AbstractRowStyles(theme),\n+    inputContainer: {\n+      display: 'grid',\n+      gridTemplateColumns: '50% 50%',\n+      gridGap: '10px',\n+    },\n+    disabled: {\n+      color: `${theme.palette.grey['50']}`,\n+    },\n+  };\n+};\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+interface IComplexDropdown {\n+  value: string | number;\n+  label: string;\n+}\n+\n+export type IDropdownOption = string | number | IComplexDropdown;\n+\n+interface IInputKeyValueDropdownProps extends IAbstractRowProps<typeof styles> {\n+  keyPlaceholder?: string;\n+  kvDelimiter?: string;\n+  // dropdownOptions: IDropdownOption[];\n+  dropdownOptions: any;\n+  extraConfig?: any;\n+}\n+\n+interface IKeyValueState {\n+  value: string;\n+  key: string;\n+}\n+\n+type StateKeys = keyof IKeyValueState;\n+\n+class InputKeyValueDropdown extends AbstractRow<IInputKeyValueDropdownProps, IKeyValueState> {\n+  public static defaultProps = {\n+    keyPlaceholder: 'Test',\n+    kvDelimiter: '=',\n+    dropdownOptions: [],\n+    delimiter: ',',\n+  };\n+\n+  public state = {\n+    key: '',\n+    value: '',\n+  };\n+\n+  public componentDidMount() {\n+    const [key = '', value = ''] = this.props.value.split(this.props.kvDelimiter);\n+\n+    this.setState({\n+      key,\n+      value,\n+    });\n+  }\n+\n+  private handleChange = (type: StateKeys, e) => {\n+    this.setState(\n+      {\n+        [type]: e.target.value,\n+      } as Pick<IKeyValueState, StateKeys>,\n+      () => {\n+        const key = this.state.key;\n+        const value = this.state.value;\n+\n+        const updatedValue = key.length > 0 ? [key, value].join(this.props.kvDelimiter) : '';\n+        this.onChange(updatedValue);\n+      }\n+    );\n+  };\n+\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  // Function that checks if types contains a type that is in allowedTypes\n+  // This is meant to handle nullable fields since a nullable string type is\n+  // presented as ['string','null'].\n+  public containsType(types: string[], allowedTypes: string[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6271a53c096128253bbd769f746f9536d3c94332"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg2MjgxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1OToxOFrOIDkVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1OToxOFrOIDkVpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMjAwNg==", "bodyText": "This shouldn't be changed. The option can either be string or it can be an object with value and label. The InputKeyValueDropdown component should pass in this options in the standard way.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540612006", "createdAt": "2020-12-11T00:59:18Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -131,14 +143,34 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n           disabled={this.props.disabled}\n           data-cy=\"value\"\n         >\n-          {dropdownOptions.map((option) => {\n-            return (\n+          {data.map((option, index) =>\n+            this.props.ordering !== OrderingEnum.VALUESFIRST ? (\n               <MenuItem value={option.value} key={option.value} data-cy={`value-${option.value}`}>\n                 {option.label}\n               </MenuItem>\n-            );\n-          })}\n+            ) : (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg2NjI4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowMDoyNVrOIDkXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowMDoyNVrOIDkXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMjQ3NA==", "bodyText": "nit: IMO we shouldn't do this rename. The dropdownOptions shows that it is a list of options (array). It is hard to infer the type from the name data.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540612474", "createdAt": "2020-12-11T01:00:25Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -131,14 +143,34 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n           disabled={this.props.disabled}\n           data-cy=\"value\"\n         >\n-          {dropdownOptions.map((option) => {\n-            return (\n+          {data.map((option, index) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg3OTU4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowNTo1OFrOIDke1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowNTo1OFrOIDke1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNDM1Ng==", "bodyText": "Can we rename this as InputFieldDropdownKeyValue? We already have InputFieldDropdown and KeyValueDropdown. This is basically a merge between them.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540614356", "createdAt": "2020-12-11T01:05:58Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputKeyValueDropdownWidgetView extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg4Mjc5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowNzowMlrOIDkggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowNzowMlrOIDkggQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNDc4NQ==", "bodyText": "nit: Can you make this multiline comment?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540614785", "createdAt": "2020-12-11T01:07:02Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputKeyValueDropdownWidgetView extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  // Function that checks if types contains a type that is in allowedTypes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg5MDMyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowOTo1OFrOIDkkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowOTo1OFrOIDkkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNTgyNA==", "bodyText": "Since we flip the ordering of the widget, the component ultimately returns 'key:value' as string. To give an example,\n\nUser configures the widget. Selects 'column1' from the input schema\nIn the pivot textbox enters v1, v2, v3\nOn change the component sets the value as v1,v2,v3:column1.\n\nIf we are flipping the ordering of the component we should handle the onchange as well if we expect the value to be in the same ordering, in this case column1:v1, v2, v3", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540615824", "createdAt": "2020-12-11T01:09:58Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputKeyValueDropdownWidgetView extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  // Function that checks if types contains a type that is in allowedTypes\n+  // This is meant to handle nullable fields since a nullable string type is\n+  // presented as ['string','null'].\n+  public containsType(types: string[], allowedTypes: string[]) {\n+    if (allowedTypes.length === 0) {\n+      return true;\n+    }\n+\n+    return allowedTypes.includes(this.extractType(types));\n+  }\n+\n+  public extractType(types) {\n+    let value = types;\n+    if (types instanceof Array) {\n+      if (types.length === 1) {\n+        value = types[0];\n+      } else if (types.length === 2 && types.includes('null')) {\n+        value = types.indexOf('null') === 0 ? types[1] : types[0];\n+      }\n+    }\n+\n+    if (typeof value === 'object') {\n+      value = value.logicalType || value;\n+    }\n+    return value;\n+  }\n+\n+  public renderRow = (id, index) => {\n+    const keyPlaceholder = objectQuery(this.props, 'widgetProps', 'key-placeholder');\n+    const kvDelimiter = objectQuery(this.props, 'widgetProps', 'kv-delimiter');\n+    const dropdownOptions = objectQuery(this.props.extraConfig, 'inputSchema');\n+    const fieldValues = this.getFields(dropdownOptions, []);\n+\n+    return (\n+      <KeyValueDropdownRow\n+        key={id}\n+        value={this.values[id].value}\n+        id={id}\n+        index={index}\n+        onChange={this.editRow}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg5MjkzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTowNFrOIDkl4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTowNFrOIDkl4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjE2Mw==", "bodyText": "This should be removed.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540616163", "createdAt": "2020-12-11T01:11:04Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -45,12 +45,19 @@ interface IComplexDropdown {\n   label: string;\n }\n \n+export enum OrderingEnum {\n+  KEYSFIRST,\n+  VALUESFIRST,\n+}\n+\n export type IDropdownOption = string | number | IComplexDropdown;\n \n interface IKeyValueDropdownRowProps extends IAbstractRowProps<typeof styles> {\n   keyPlaceholder?: string;\n   kvDelimiter?: string;\n-  dropdownOptions: IDropdownOption[];\n+  dropdownOptions?: IDropdownOption[];\n+  inputSchemaFieldValues?: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg5NDA1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTozMVrOIDkmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTozMVrOIDkmiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjMyOA==", "bodyText": "This should be OrderingEnum.KEYSFIRST | OrderingEnum.VALUESFIRST", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540616328", "createdAt": "2020-12-11T01:11:31Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -45,12 +45,19 @@ interface IComplexDropdown {\n   label: string;\n }\n \n+export enum OrderingEnum {\n+  KEYSFIRST,\n+  VALUESFIRST,\n+}\n+\n export type IDropdownOption = string | number | IComplexDropdown;\n \n interface IKeyValueDropdownRowProps extends IAbstractRowProps<typeof styles> {\n   keyPlaceholder?: string;\n   kvDelimiter?: string;\n-  dropdownOptions: IDropdownOption[];\n+  dropdownOptions?: IDropdownOption[];\n+  inputSchemaFieldValues?: any;\n+  ordering?: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg5NTI0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTo1MFrOIDknGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxMTo1MFrOIDknGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxNjQ3Mw==", "bodyText": "We need to have a default value for ordering which should be OrderingEnum.KEYSFIRST", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r540616473", "createdAt": "2020-12-11T01:11:50Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -64,6 +71,7 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n   public static defaultProps = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3e555206d27ce6286fd0e64318019bfb951e0d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzE4NDg0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/AbstractWidgetFactory.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyNDozMVrOIHfCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyNDozMVrOIHfCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxOTQ0Nw==", "bodyText": "nit: This should be input-field-keyvalue-dropdown. We already have a input-field-selector indicating a selection of input schema fields. We should be consistent in the naming as this is what the plugin developers will use.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544719447", "createdAt": "2020-12-17T00:24:31Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/AbstractWidgetFactory.tsx", "diffHunk": "@@ -136,6 +137,7 @@ export const WIDGET_FACTORY = {\n   dlp: DLPCustomWidget,\n   'get-schema': GetSchemaWidget,\n   'input-field-selector': InputFieldDropdown,\n+  'input-keyvalue-dropdown': InputKeyValueDropdown,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzE5NTQ5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyODoxMFrOIHfH_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyODoxMFrOIHfH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMDg5Mg==", "bodyText": "This is no longer being used right? The dropdown values are fields from input schema.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544720892", "createdAt": "2020-12-17T00:28:10Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzE5NzMyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyODo1NFrOIHfJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyODo1NFrOIHfJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMTE1Mg==", "bodyText": "This is not needed as well as we don't show the delimiter in the widget right?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544721152", "createdAt": "2020-12-17T00:28:54Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzIwNDQ4OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDozMTozM1rOIHfM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDozMTozM1rOIHfM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMjE0Nw==", "bodyText": "Same here. Not needed.", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544722147", "createdAt": "2020-12-17T00:31:33Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputFieldDropdownKeyValue extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  /*   Function that checks if types contains a type that is in allowedTypes\n+  This is meant to handle nullable fields since a nullable string type is\n+  presented as ['string','null']. */\n+  public containsType(types: string[], allowedTypes: string[]) {\n+    if (allowedTypes.length === 0) {\n+      return true;\n+    }\n+\n+    return allowedTypes.includes(this.extractType(types));\n+  }\n+\n+  public extractType(types) {\n+    let value = types;\n+    if (types instanceof Array) {\n+      if (types.length === 1) {\n+        value = types[0];\n+      } else if (types.length === 2 && types.includes('null')) {\n+        value = types.indexOf('null') === 0 ? types[1] : types[0];\n+      }\n+    }\n+\n+    if (typeof value === 'object') {\n+      value = value.logicalType || value;\n+    }\n+    return value;\n+  }\n+\n+  public renderRow = (id, index) => {\n+    const keyPlaceholder = objectQuery(this.props, 'widgetProps', 'key-placeholder');\n+    const kvDelimiter = objectQuery(this.props, 'widgetProps', 'kv-delimiter');\n+    const dropdownOptions = objectQuery(this.props.extraConfig, 'inputSchema');\n+    const fieldValues = this.getFields(dropdownOptions, []);\n+\n+    return (\n+      <KeyValueDropdownRow\n+        key={id}\n+        value={this.values[id].value}\n+        id={id}\n+        index={index}\n+        onChange={this.editRow}\n+        addRow={this.addRow.bind(this, index)}\n+        removeRow={this.removeRow.bind(this, index)}\n+        autofocus={this.state.autofocus === id}\n+        changeFocus={this.changeFocus}\n+        disabled={this.props.disabled}\n+        keyPlaceholder={keyPlaceholder}\n+        kvDelimiter={kvDelimiter}\n+        forwardedRef={this.values[id].ref}\n+        errors={this.props.errors}\n+        dropdownOptions={fieldValues}\n+        ordering={OrderingEnum.VALUESFIRST}\n+      />\n+    );\n+  };\n+}\n+\n+export default function KeyValueDropdownWidget(props) {\n+  return (\n+    <ThemeWrapper>\n+      <InputFieldDropdownKeyValue {...props} />\n+    </ThemeWrapper>\n+  );\n+}\n+\n+(KeyValueDropdownWidget as any).propTypes = WIDGET_PROPTYPES;\n+(KeyValueDropdownWidget as any).getWidgetAttributes = () => {\n+  return {\n+    'key-placeholder': { type: 'string', required: false },\n+    'kv-delimiter': { type: 'string', required: false },\n+    delimiter: { type: 'string', required: false },\n+    dropdownOptions: { type: 'IDropdownOption[]', required: true },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzMwNzk0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxMDowM1rOIHgFRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxMToyOVrOIHgHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjU4MQ==", "bodyText": "This won't work. When we define this as another component and pass in props we React will re-render this on each change as the props are different. That will make the focus lost from the current textbox.\nWas this change tested before being pushed?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544736581", "createdAt": "2020-12-17T01:10:03Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -108,37 +116,59 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n       };\n     });\n \n-    return (\n-      <div className={this.props.classes.inputContainer}>\n+    const InputField = (props) => {\n+      return (\n         <Input\n           classes={{ disabled: this.props.classes.disabled }}\n           placeholder={this.props.keyPlaceholder}\n-          onChange={this.handleChange.bind(this, 'key')}\n-          value={this.state.key}\n+          onChange={this.handleChange.bind(this, props.type)}\n+          value={props.value}\n           autoFocus={this.props.autofocus}\n           onKeyPress={this.handleKeyPress}\n           onKeyDown={this.handleKeyDown}\n           disabled={this.props.disabled}\n           inputRef={this.props.forwardedRef}\n-          data-cy=\"key\"\n+          data-cy={props.type}\n         />\n+      );\n+    };\n \n+    const SelectField = (props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjk1OA==", "bodyText": "Please replace this change with just variables. We should not define this as another stateless react components. Also We shouldn't be mixing components (props and this.props)?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544736958", "createdAt": "2020-12-17T01:11:13Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -108,37 +116,59 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n       };\n     });\n \n-    return (\n-      <div className={this.props.classes.inputContainer}>\n+    const InputField = (props) => {\n+      return (\n         <Input\n           classes={{ disabled: this.props.classes.disabled }}\n           placeholder={this.props.keyPlaceholder}\n-          onChange={this.handleChange.bind(this, 'key')}\n-          value={this.state.key}\n+          onChange={this.handleChange.bind(this, props.type)}\n+          value={props.value}\n           autoFocus={this.props.autofocus}\n           onKeyPress={this.handleKeyPress}\n           onKeyDown={this.handleKeyDown}\n           disabled={this.props.disabled}\n           inputRef={this.props.forwardedRef}\n-          data-cy=\"key\"\n+          data-cy={props.type}\n         />\n+      );\n+    };\n \n+    const SelectField = (props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjU4MQ=="}, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNzA3NQ==", "bodyText": "Replace the snippet with\nconst inputType = this.props.ordering === OrderingEnum.KEYSFIRST ? 'key' : 'value';\n    const InputField = (\n      <Input\n        classes={{ disabled: this.props.classes.disabled }}\n        placeholder={this.props.keyPlaceholder}\n        onChange={this.handleChange.bind(this, inputType)}\n        value={this.props.ordering === OrderingEnum.KEYSFIRST ? this.state.key : this.state.value}\n        autoFocus={this.props.autofocus}\n        onKeyPress={this.handleKeyPress}\n        onKeyDown={this.handleKeyDown}\n        disabled={this.props.disabled}\n        inputRef={this.props.forwardedRef}\n        data-cy={inputType}\n      />\n    );\n\n    const selectType = this.props.ordering === OrderingEnum.VALUESFIRST ? 'key' : 'value';\n    const SelectField = (\n      <Select\n        classes={{ disabled: this.props.classes.disabled }}\n        value={this.props.ordering === OrderingEnum.VALUESFIRST ? this.state.key : this.state.value}\n        onChange={this.handleChange.bind(this, selectType)}\n        displayEmpty={true}\n        disabled={this.props.disabled}\n        data-cy={selectType}\n      >\n        {dropdownOptions.map((option) => (\n          <MenuItem\n            value={option.value}\n            key={option.value}\n            data-cy={`${selectType}-${option.value}`}\n          >\n            {option.label}\n          </MenuItem>\n        ))}\n      </Select>\n    );```", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544737075", "createdAt": "2020-12-17T01:11:29Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow.tsx", "diffHunk": "@@ -108,37 +116,59 @@ class KeyValueDropdownRow extends AbstractRow<IKeyValueDropdownRowProps, IKeyVal\n       };\n     });\n \n-    return (\n-      <div className={this.props.classes.inputContainer}>\n+    const InputField = (props) => {\n+      return (\n         <Input\n           classes={{ disabled: this.props.classes.disabled }}\n           placeholder={this.props.keyPlaceholder}\n-          onChange={this.handleChange.bind(this, 'key')}\n-          value={this.state.key}\n+          onChange={this.handleChange.bind(this, props.type)}\n+          value={props.value}\n           autoFocus={this.props.autofocus}\n           onKeyPress={this.handleKeyPress}\n           onKeyDown={this.handleKeyDown}\n           disabled={this.props.disabled}\n           inputRef={this.props.forwardedRef}\n-          data-cy=\"key\"\n+          data-cy={props.type}\n         />\n+      );\n+    };\n \n+    const SelectField = (props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjU4MQ=="}, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzMxNTc0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxMjo1N1rOIHgJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxMjo1N1rOIHgJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNzY2Mg==", "bodyText": "Can we remove these functions? These functions are not going to be called right (line 103)?", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544737662", "createdAt": "2020-12-17T01:12:57Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputFieldDropdownKeyValue extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  /*   Function that checks if types contains a type that is in allowedTypes\n+  This is meant to handle nullable fields since a nullable string type is\n+  presented as ['string','null']. */\n+  public containsType(types: string[], allowedTypes: string[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzMxODE5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxNDowM1rOIHgK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMToxNDowM1rOIHgK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczODAzNA==", "bodyText": "If we need this function please format the multiline comment as,\n/**\n *  Function that checks if types contains a type that is in allowedTypes\n * This is meant to handle nullable fields since a nullable string type is\n * presented as ['string','null'].\n */", "url": "https://github.com/cdapio/cdap/pull/12883#discussion_r544738034", "createdAt": "2020-12-17T01:14:03Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/AbstractWidget/InputKeyValueDropdown/index.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import AbstractMultiRowWidget, {\n+  IMultiRowProps,\n+  IMultiRowWidgetProps,\n+} from 'components/AbstractWidget/AbstractMultiRowWidget';\n+import { IStageSchema } from 'components/AbstractWidget';\n+import KeyValueDropdownRow, {\n+  IDropdownOption,\n+  OrderingEnum,\n+} from 'components/AbstractWidget/KeyValueDropdownWidget/KeyValueDropdownRow';\n+\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import { WIDGET_PROPTYPES } from 'components/AbstractWidget/constants';\n+import { objectQuery } from 'services/helpers';\n+\n+interface IInputKeyValueDropdownWidgetProps extends IMultiRowWidgetProps {\n+  'key-placeholder'?: string;\n+  'kv-delimiter'?: string;\n+  dropdownOptions: IDropdownOption[];\n+  delimiter?: string;\n+  showDelimiter?: boolean;\n+  extraConfig?: any;\n+}\n+\n+interface IInputKeyValueDropdownProps extends IMultiRowProps<IInputKeyValueDropdownWidgetProps> {}\n+\n+interface IField {\n+  name: string;\n+  type: string[];\n+}\n+\n+class InputFieldDropdownKeyValue extends AbstractMultiRowWidget<IInputKeyValueDropdownProps> {\n+  public getFields(schemas: IStageSchema[], allowedTypes: string[]) {\n+    let fields = [];\n+    if (!schemas || schemas.length === 0) {\n+      return fields;\n+    }\n+    const stage = schemas[0];\n+\n+    try {\n+      const unparsedFields = JSON.parse(stage.schema).fields;\n+\n+      if (unparsedFields.length > 0) {\n+        fields = unparsedFields\n+          .filter((field: IField) => this.containsType(field.type, allowedTypes))\n+          .map((field: IField) => field.name);\n+      }\n+    } catch {\n+      // tslint:disable-next-line: no-console\n+      console.log('Error: Invalid JSON schema');\n+    }\n+    return fields;\n+  }\n+\n+  /*   Function that checks if types contains a type that is in allowedTypes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bffd6988acb3954a74ea841a1168faa6df381bd"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2530, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}