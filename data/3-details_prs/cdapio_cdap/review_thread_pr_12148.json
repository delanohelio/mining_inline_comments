{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjcxMzY0", "number": 12148, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoyMDoxNlrOD7VRMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoyMDoxNlrOD7VRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTQxMDQwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Create/Content/Summary/ActionButtons/index.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoyMDoxNlrOGTl3uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoyMDoxNlrOGTl3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NjYwMA==", "bodyText": "nit: We might be good if we just display the message from backend. Is there a possibility for us to show stack trace or a JSON here?", "url": "https://github.com/cdapio/cdap/pull/12148#discussion_r423196600", "createdAt": "2020-05-11T17:20:16Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Create/Content/Summary/ActionButtons/index.tsx", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { createContextConnect, ICreateContext } from 'components/Replicator/Create';\n+import Button from '@material-ui/core/Button';\n+import LoadingSVG from 'components/LoadingSVG';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { MyAppApi } from 'api/app';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { Redirect } from 'react-router-dom';\n+import If from 'components/If';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      marginTop: '50px',\n+      borderTop: `1px solid ${theme.palette.grey[300]}`,\n+      paddingTop: '25px',\n+      '& button': {\n+        marginRight: '50px',\n+      },\n+    },\n+    error: {\n+      marginTop: '50px',\n+      color: theme.palette.red[100],\n+    },\n+  };\n+};\n+\n+enum REDIRECT_TARGET {\n+  detail = 'detail',\n+  list = 'list',\n+}\n+\n+const ActionButtonsView: React.FC<ICreateContext & WithStyles<typeof styles>> = ({\n+  classes,\n+  getReplicatorConfig,\n+  parentArtifact,\n+  draftId,\n+  saveDraft,\n+  name,\n+}) => {\n+  const [deployLoading, setDeployLoading] = React.useState(false);\n+  const [error, setError] = React.useState(null);\n+  const [redirect, setRedirect] = React.useState(null);\n+\n+  function constructJson() {\n+    const config = getReplicatorConfig();\n+\n+    return {\n+      name,\n+      artifact: {\n+        ...parentArtifact,\n+      },\n+      config,\n+    };\n+  }\n+\n+  function deployReplicator() {\n+    setDeployLoading(true);\n+    const spec = constructJson();\n+\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+      appName: spec.name,\n+    };\n+\n+    MyAppApi.list({ namespace: getCurrentNamespace() }).subscribe(\n+      (apps) => {\n+        const existingAppName = apps.filter((app) => app.name === name);\n+\n+        if (existingAppName.length > 0) {\n+          setError(`There is already an existing application \"${name}\"`);\n+          setDeployLoading(false);\n+          return;\n+        }\n+\n+        MyReplicatorApi.publish(params, spec).subscribe(\n+          () => {\n+            MyReplicatorApi.deleteDraft({\n+              namespace: getCurrentNamespace(),\n+              draftId,\n+            }).subscribe(null, null, () => {\n+              setRedirect(REDIRECT_TARGET.detail);\n+            });\n+          },\n+          (err) => {\n+            setError(err);\n+            setDeployLoading(false);\n+          }\n+        );\n+      },\n+      (err) => {\n+        setError(err);\n+        setDeployLoading(false);\n+      }\n+    );\n+  }\n+\n+  function saveAndClose() {\n+    saveDraft().subscribe(\n+      () => {\n+        setRedirect(REDIRECT_TARGET.list);\n+      },\n+      (err) => {\n+        setError(err);\n+      }\n+    );\n+  }\n+\n+  if (redirect) {\n+    let redirectLink = `/ns/${getCurrentNamespace()}/replicator`;\n+    if (redirect === REDIRECT_TARGET.detail) {\n+      redirectLink = `${redirectLink}/detail/${name}`;\n+    }\n+\n+    return <Redirect to={redirectLink} />;\n+  }\n+\n+  return (\n+    <React.Fragment>\n+      <If condition={error}>\n+        <div className={classes.error}>{JSON.stringify(error, null, 2)}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d329c4d2d846bd58d2c9726d2a36d9eab29a1aba"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2627, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}