{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTc1NDAy", "number": 12524, "title": "[CDAP-16712] Separate out preview manager and preview runners so that they can be run independently in their own containers.", "bodyText": "JIRA: https://issues.cask.co/browse/CDAP-16712\nThis PR has following changes:\n\nImplementation of remote preview request feature.\nPreview logs via TMS.\nGuice module adjustments required for the separation of preview manager and preview runners.", "createdAt": "2020-07-29T17:19:38Z", "url": "https://github.com/cdapio/cdap/pull/12524", "merged": true, "mergeCommit": {"oid": "3b90e4091934ebdcb8353dd87c10a47d7855a51d"}, "closed": true, "closedAt": "2020-08-05T20:47:53Z", "author": {"login": "sagarkapare"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc57abjAFqTQ1Nzk1MTI1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7-_hvgBqjM2MjU4MDA2Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTUxMjU3", "url": "https://github.com/cdapio/cdap/pull/12524#pullrequestreview-457951257", "createdAt": "2020-07-29T22:50:06Z", "commit": {"oid": "1a63825d8bc332bbf047f1c6c542969ec76a6787"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo1NDowNlrOG5NDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODozMjo1OFrOG5ZZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNTkwNA==", "bodyText": "What is the PreviewRunnerSystemTerminator supposed to do? Is it the component running in the preview manger for deleting the StatefulSet?", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462635904", "createdAt": "2020-07-29T22:54:06Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java", "diffHunk": "@@ -16,44 +16,103 @@\n \n package io.cdap.cdap.app.preview;\n \n+import com.google.inject.Exposed;\n+import com.google.inject.Module;\n import com.google.inject.PrivateModule;\n import com.google.inject.Provides;\n import com.google.inject.Scopes;\n import com.google.inject.Singleton;\n import com.google.inject.name.Names;\n+import io.cdap.cdap.common.runtime.RuntimeModule;\n import io.cdap.cdap.data.runtime.DataSetsModules;\n import io.cdap.cdap.data2.datafabric.dataset.RemoteDatasetFramework;\n import io.cdap.cdap.data2.dataset2.DatasetDefinitionRegistryFactory;\n import io.cdap.cdap.data2.dataset2.DatasetFramework;\n import io.cdap.cdap.data2.dataset2.DefaultDatasetDefinitionRegistryFactory;\n import io.cdap.cdap.internal.app.preview.DirectPreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.LocalPreviewRequestPollerInfoProvider;\n import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestPollerInfoProvider;\n import io.cdap.cdap.internal.app.preview.PreviewRunnerServiceStopper;\n+import io.cdap.cdap.internal.app.preview.RemotePreviewRequestFetcherFactory;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n \n /**\n  * Guice module to provide bindings for {@link PreviewRunnerManager} service.\n  */\n-public class PreviewRunnerManagerModule extends PrivateModule {\n+public class PreviewRunnerManagerModule extends RuntimeModule {\n+\n   @Override\n-  protected void configure() {\n-    bind(DatasetDefinitionRegistryFactory.class)\n-      .to(DefaultDatasetDefinitionRegistryFactory.class).in(Scopes.SINGLETON);\n-\n-    bind(DatasetFramework.class)\n-      .annotatedWith(Names.named(DataSetsModules.BASE_DATASET_FRAMEWORK))\n-      .to(RemoteDatasetFramework.class);\n-    bind(PreviewRunnerModule.class).to(DefaultPreviewRunnerModule.class);\n-\n-    bind(DefaultPreviewRunnerManager.class).in(Scopes.SINGLETON);\n-    bind(PreviewRunnerServiceStopper.class).to(DefaultPreviewRunnerManager.class);\n-    expose(PreviewRunnerServiceStopper.class);\n-    bind(PreviewRunnerManager.class).to(DefaultPreviewRunnerManager.class);\n-    expose(PreviewRunnerManager.class);\n+  public Module getInMemoryModules() {\n+    return getStandaloneModules();\n   }\n \n-  @Provides\n-  @Singleton\n-  PreviewRequestFetcherFactory getPreviewRequestQueueFetcher(PreviewRequestQueue previewRequestQueue) {\n-    return new DirectPreviewRequestFetcherFactory(previewRequestQueue);\n+  @Override\n+  public Module getStandaloneModules() {\n+\n+    return new PrivateModule() {\n+      @Override\n+      protected void configure() {\n+        bind(PreviewRunnerSystemTerminator.class).toInstance(() -> {\n+          // no-op\n+        });\n+        expose(PreviewRunnerSystemTerminator.class);\n+        bind(PreviewRequestPollerInfoProvider.class).to(LocalPreviewRequestPollerInfoProvider.class);\n+        expose(PreviewRequestPollerInfoProvider.class);\n+        \n+        bind(DatasetDefinitionRegistryFactory.class)\n+          .to(DefaultDatasetDefinitionRegistryFactory.class).in(Scopes.SINGLETON);\n+\n+        bind(DatasetFramework.class)\n+          .annotatedWith(Names.named(DataSetsModules.BASE_DATASET_FRAMEWORK))\n+          .to(RemoteDatasetFramework.class);\n+        bind(PreviewRunnerModule.class).to(DefaultPreviewRunnerModule.class);\n+\n+        bind(DefaultPreviewRunnerManager.class).in(Scopes.SINGLETON);\n+        bind(PreviewRunnerServiceStopper.class).to(DefaultPreviewRunnerManager.class);\n+        expose(PreviewRunnerServiceStopper.class);\n+        bind(PreviewRunnerManager.class).to(DefaultPreviewRunnerManager.class);\n+        expose(PreviewRunnerManager.class);\n+      }\n+\n+      @Provides\n+      @Singleton\n+      @Exposed\n+      PreviewRequestFetcherFactory getPreviewRequestQueueFetcher(PreviewRequestQueue previewRequestQueue) {\n+        return new DirectPreviewRequestFetcherFactory(previewRequestQueue);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Module getDistributedModules() {\n+    return new PrivateModule() {\n+      @Override\n+      protected void configure() {\n+        bind(PreviewRunnerSystemTerminator.class).toInstance(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a63825d8bc332bbf047f1c6c542969ec76a6787"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMDk0MQ==", "bodyText": "Is this the API for the queue polling? If it is, the path is better be /previews/requests/pull.", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462830941", "createdAt": "2020-07-30T08:20:53Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMjc1MA==", "bodyText": "You can just do a byte[] pollerInfo = Bytes.toBytes(request.content().nioBuffer());", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462832750", "createdAt": "2020-07-30T08:24:10Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")\n+  public void poll(FullHttpRequest request, HttpResponder responder) throws Exception {\n+    try (InputStream is = new ByteBufInputStream(request.content())) {\n+      byte[] pollerInfo = ByteStreams.toByteArray(is);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNDY0Mg==", "bodyText": "It is better to return 200 with an empty body if there is no pending request in the queue, since that is expected. Not found is used for unexpected case (e.g. the endpoint does not exist).", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462834642", "createdAt": "2020-07-30T08:27:21Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")\n+  public void poll(FullHttpRequest request, HttpResponder responder) throws Exception {\n+    try (InputStream is = new ByteBufInputStream(request.content())) {\n+      byte[] pollerInfo = ByteStreams.toByteArray(is);\n+      Optional<PreviewRequest> previewRequestOptional = previewManager.poll(pollerInfo);\n+      if (previewRequestOptional.isPresent()) {\n+        LOG.info(\"Received poller info is {}\", Bytes.toString(pollerInfo));\n+        responder.sendString(HttpResponseStatus.OK, GSON.toJson(previewRequestOptional.get()));\n+      } else {\n+        responder.sendStatus(HttpResponseStatus.NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNTYwMg==", "bodyText": "What is this for?? Since this class is a Service, if the caller is interested in the completion of this Service, it should just add a Service Listener to this instance.", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462835602", "createdAt": "2020-07-30T08:28:55Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java", "diffHunk": "@@ -117,6 +126,9 @@ protected void run() {\n   @Override\n   protected void shutDown() throws Exception {\n     LOG.debug(\"Preview runner service completed\");\n+    if (completionNotifier != null) {\n+      completionNotifier.call();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzODA2MA==", "bodyText": "Is this copy from TMSLogAppender? What are the differences? If the only different is in the guice injector annotation, there is way to work around it by making the TMSLogAppender non-final and have this as a sub-class with a different constructor.", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462838060", "createdAt": "2020-07-30T08:32:58Z", "author": {"login": "chtyim"}, "path": "cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.logging.appender.tms;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.hash.Hashing;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.cdap.cdap.api.messaging.MessagePublisher;\n+import io.cdap.cdap.api.messaging.MessagingContext;\n+import io.cdap.cdap.api.messaging.TopicNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.logging.appender.AbstractLogPublisher;\n+import io.cdap.cdap.logging.appender.LogAppender;\n+import io.cdap.cdap.logging.appender.LogMessage;\n+import io.cdap.cdap.logging.appender.kafka.LogPartitionType;\n+import io.cdap.cdap.logging.serialize.LoggingEventSerializer;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.context.MultiThreadMessagingContext;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * TMS Log Appender used for Preview.\n+ */\n+public class PreviewTMSLogAppender extends LogAppender  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22d26eb72f92b5a2c436d86dea6ddacbbd087558", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/22d26eb72f92b5a2c436d86dea6ddacbbd087558", "committedDate": "2020-08-01T00:47:00Z", "message": "Added Test annotation back"}, "afterCommit": {"oid": "f509c653cf00005d9f04c74f84038368194c7280", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/f509c653cf00005d9f04c74f84038368194c7280", "committedDate": "2020-08-01T00:48:55Z", "message": "Added Test annotation back"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f509c653cf00005d9f04c74f84038368194c7280", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/f509c653cf00005d9f04c74f84038368194c7280", "committedDate": "2020-08-01T00:48:55Z", "message": "Added Test annotation back"}, "afterCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/5b14508c45d8a11eb7910e86a23cd98d77cfd597", "committedDate": "2020-08-05T06:26:18Z", "message": "Fixed the abstraction leaking by removing the dependency of DefaultPreviewRunnerManager on the PreviewRequestFetchers."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzg2OTkx", "url": "https://github.com/cdapio/cdap/pull/12524#pullrequestreview-461386991", "createdAt": "2020-08-05T06:54:22Z", "commit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1NDoyMlrOG78mdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowMTo1MVrOG78zzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjA1Mg==", "bodyText": "Is PreviewRunner a singleton? If it is, you can just get it from normal injection without the use of factory. In the PreviewRunnerManager, you can inject a Provider<PreviewRunnerService> for creating multiple instances.", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465512052", "createdAt": "2020-08-05T06:54:22Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java", "diffHunk": "@@ -52,9 +56,11 @@\n   private final RetryStrategy retryStrategy;\n   private final CountDownLatch stopLatch;\n   private final AtomicReference<Cancellable> cancelPreview;\n+  private ApplicationId previewApp;\n \n-  public PreviewRunnerService(CConfiguration cConf, PreviewRunner previewRunner,\n-                              PreviewRequestFetcher previewRequestFetcher) {\n+  @Inject\n+  PreviewRunnerService(CConfiguration cConf, PreviewRequestFetcher previewRequestFetcher,\n+                       @Assisted PreviewRunner previewRunner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjcxMA==", "bodyText": "Should call stop() instead of shutDown(), otherwise the service state won't be correct", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465512710", "createdAt": "2020-08-05T06:55:54Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -124,21 +125,32 @@ protected void startUp() throws Exception {\n \n     // Create and start the preview poller services.\n     for (int i = 0; i < maxConcurrentPreviews; i++) {\n-      String pollerInfo = UUID.randomUUID().toString();\n+      PreviewRunnerService pollerService = previewRunnerServiceFactory.create(runner);\n \n-      PreviewRunnerService pollerService = new PreviewRunnerService(\n-        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n-        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+      pollerService.addListener(new ServiceListenerAdapter() {\n+        @Override\n+        public void terminated(State from) {\n+          previewPollers.remove(pollerService);\n+          if (previewPollers.isEmpty()) {\n+            try {\n+              shutDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDEwMw==", "bodyText": "Be consistent with naming. Since the type is PreviewRunnerService, you should have the field as previewRunnerServices", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465514103", "createdAt": "2020-08-05T06:59:00Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -83,9 +85,9 @@\n   private final SecureStore secureStore;\n   private final TransactionSystemClient transactionSystemClient;\n   private final PreviewRunnerModule previewRunnerModule;\n-  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final Set<PreviewRunnerService> previewPollers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTMxMA==", "bodyText": "Unused import?", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465515310", "createdAt": "2020-08-05T07:01:33Z", "author": {"login": "chtyim"}, "path": "cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java", "diffHunk": "@@ -69,6 +69,8 @@\n import io.cdap.cdap.explore.service.ExploreServiceUtils;\n import io.cdap.cdap.gateway.router.NettyRouter;\n import io.cdap.cdap.gateway.router.RouterModules;\n+import io.cdap.cdap.internal.app.preview.LocalPreviewRequestPollerInfoProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTQ2OQ==", "bodyText": "Is this class still needeD?", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465515469", "createdAt": "2020-08-05T07:01:51Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/LocalPreviewRequestPollerInfoProvider.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import io.cdap.cdap.api.common.Bytes;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Provides unique poller info based on UID in standalone mode.\n+ */\n+public class LocalPreviewRequestPollerInfoProvider implements PreviewRequestPollerInfoProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODY3MDA2", "url": "https://github.com/cdapio/cdap/pull/12524#pullrequestreview-461867006", "createdAt": "2020-08-05T17:15:57Z", "commit": {"oid": "949fbec9d84f383a1f9b091a99d62af5a3b2bba4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNTo1OFrOG8TH2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNTo1OFrOG8TH2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTA1MQ==", "bodyText": "I don't think you need to wait. Just call stop() would be ok.", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465881051", "createdAt": "2020-08-05T17:15:58Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -124,21 +125,32 @@ protected void startUp() throws Exception {\n \n     // Create and start the preview poller services.\n     for (int i = 0; i < maxConcurrentPreviews; i++) {\n-      String pollerInfo = UUID.randomUUID().toString();\n+      PreviewRunnerService pollerService = previewRunnerServiceFactory.create(runner);\n \n-      PreviewRunnerService pollerService = new PreviewRunnerService(\n-        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n-        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+      pollerService.addListener(new ServiceListenerAdapter() {\n+        @Override\n+        public void terminated(State from) {\n+          previewRunnerServices.remove(pollerService);\n+          if (previewRunnerServices.isEmpty()) {\n+            try {\n+              stopAndWait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "949fbec9d84f383a1f9b091a99d62af5a3b2bba4"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69fc4b0eb0691156e515343e0fa87e72e409471", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/d69fc4b0eb0691156e515343e0fa87e72e409471", "committedDate": "2020-08-05T17:46:57Z", "message": "[CDAP-16712] Implementation of RemotePreviewRequestFetcher.\nSeparating preview manager and preview runner to be run in different pods."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "949fbec9d84f383a1f9b091a99d62af5a3b2bba4", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/949fbec9d84f383a1f9b091a99d62af5a3b2bba4", "committedDate": "2020-08-05T16:51:53Z", "message": "Addressed comments."}, "afterCommit": {"oid": "d69fc4b0eb0691156e515343e0fa87e72e409471", "author": {"user": {"login": "sagarkapare", "name": "sagarkapare"}}, "url": "https://github.com/cdapio/cdap/commit/d69fc4b0eb0691156e515343e0fa87e72e409471", "committedDate": "2020-08-05T17:46:57Z", "message": "[CDAP-16712] Implementation of RemotePreviewRequestFetcher.\nSeparating preview manager and preview runner to be run in different pods."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}