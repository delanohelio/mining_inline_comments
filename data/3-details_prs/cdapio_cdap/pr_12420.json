{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzE1NTEz", "number": 12420, "title": "[CDAP-16754] Adding support for representing logical types as string \u2026", "bodyText": "\u2026in preview\nTested for logical types - date, time, timestamp, decimal", "createdAt": "2020-06-30T00:31:34Z", "url": "https://github.com/cdapio/cdap/pull/12420", "merged": true, "mergeCommit": {"oid": "2211232b1b35bb76decf670c821554a2583059af"}, "closed": true, "closedAt": "2020-07-17T04:27:43Z", "author": {"login": "CuriousVini"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwLAl7gFqTQzOTU5NTkyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc09vCkAFqTQ0ODUwODUxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTk1OTI4", "url": "https://github.com/cdapio/cdap/pull/12420#pullrequestreview-439595928", "createdAt": "2020-06-30T00:52:11Z", "commit": {"oid": "99c232ecbac48efa66813053755f697b23f8d30a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1MjoxMlrOGqnp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowMDo0NVrOGqn0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzA3MQ==", "bodyText": "Could u please add java joc here?", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447343071", "createdAt": "2020-06-30T00:52:12Z", "author": {"login": "shifuxu0301"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c232ecbac48efa66813053755f697b23f8d30a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDcyNA==", "bodyText": "change the log body to \"Error while serializing structure record {}\" to align with method name.", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447344724", "createdAt": "2020-06-30T00:57:32Z", "author": {"login": "shifuxu0301"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ *\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Schema schemaToRead = gson.fromJson(schema, Schema.class);\n+    try (JsonReader reader = new JsonReader(new StringReader(fields.getAsString()))) {\n+      return JSON_DATUM_READER.read(new JsonDecoder(reader), schemaToRead);\n+    } catch (IOException e) {\n+      LOG.error(\"Error while reading structured record {}\", e.getMessage(), e);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public JsonElement serialize(StructuredRecord src, Type typeOfSrc, JsonSerializationContext context) {\n+    StringWriter strWriter = new StringWriter();\n+    try (JsonWriter writer = new JsonWriter(strWriter)) {\n+      JSON_DATUM_WRITER.encode(src, new JsonEncoder(writer));\n+      return new JsonParser().parse(strWriter.toString()).getAsJsonObject();\n+    } catch (IOException e) {\n+      LOG.error(\"Error while reading structured record {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c232ecbac48efa66813053755f697b23f8d30a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTY4OA==", "bodyText": "quick question, will precision loose if we handle MILLIS the same with MICROS? Or it does not matter when we convert them to String?", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447345688", "createdAt": "2020-06-30T01:00:45Z", "author": {"login": "shifuxu0301"}, "path": "cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java", "diffHunk": "@@ -155,6 +172,27 @@ protected Object decodeUnion(Decoder decoder, Schema unionSchema) throws IOExcep\n                                         token));\n   }\n \n+  @Override\n+  protected Object decode(Decoder decoder, Schema schema) throws IOException {\n+    Schema nonNullableSchema = schema.isNullable() ? schema.getNonNullable() : schema;\n+    Schema.LogicalType logicalType = nonNullableSchema.getLogicalType();\n+    if (logicalTypeAsString && logicalType != null) {\n+      switch (logicalType) {\n+        case DATE:\n+          return LocalDate.parse(decoder.readString(), DateTimeFormatter.ISO_DATE);\n+        case TIME_MILLIS:\n+        case TIME_MICROS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c232ecbac48efa66813053755f697b23f8d30a"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99c232ecbac48efa66813053755f697b23f8d30a", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/99c232ecbac48efa66813053755f697b23f8d30a", "committedDate": "2020-06-30T00:30:33Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/afc67c3e81e1cde087e7bea14aa70f960a23de63", "committedDate": "2020-06-30T19:32:25Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/afc67c3e81e1cde087e7bea14aa70f960a23de63", "committedDate": "2020-06-30T19:32:25Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "d7aa499735435b7f7e5113eb8df5b97719327f5d", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/d7aa499735435b7f7e5113eb8df5b97719327f5d", "committedDate": "2020-06-30T19:35:07Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7aa499735435b7f7e5113eb8df5b97719327f5d", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/d7aa499735435b7f7e5113eb8df5b97719327f5d", "committedDate": "2020-06-30T19:35:07Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "08ee6feef07b475be7806b03ae9c017139b35fb0", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/08ee6feef07b475be7806b03ae9c017139b35fb0", "committedDate": "2020-06-30T20:18:38Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08ee6feef07b475be7806b03ae9c017139b35fb0", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/08ee6feef07b475be7806b03ae9c017139b35fb0", "committedDate": "2020-06-30T20:18:38Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "committedDate": "2020-06-30T20:19:59Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwODU5NDM0", "url": "https://github.com/cdapio/cdap/pull/12420#pullrequestreview-440859434", "createdAt": "2020-07-01T13:17:25Z", "commit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDQ5NzQ5", "url": "https://github.com/cdapio/cdap/pull/12420#pullrequestreview-441049749", "createdAt": "2020-07-01T17:04:15Z", "commit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowNDoxNVrOGruSjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowNzo0M1rOGruZbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMDM2NA==", "bodyText": "Since the put and get needs to have the Gson configured exactly the same, it is better to refactor it out to a private method createGson()", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448500364", "createdAt": "2020-07-01T17:04:15Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java", "diffHunk": "@@ -76,7 +77,8 @@\n   @Override\n   public void put(ApplicationId applicationId, String tracerName, String propertyName, Object value) {\n     // PreviewStore is a singleton and we have to create gson for each operation since gson is not thread safe.\n-    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMTQ0Mg==", "bodyText": "This can be a static constant.", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448501442", "createdAt": "2020-07-01T17:06:15Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Preview structured record serializer/deserializer.\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjEyNA==", "bodyText": "Why the serialize and deserialize are not symmetric?", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448502124", "createdAt": "2020-07-01T17:07:43Z", "author": {"login": "chtyim"}, "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Preview structured record serializer/deserializer.\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Schema schemaToRead = gson.fromJson(schema, Schema.class);\n+    try (JsonReader reader = new JsonReader(new StringReader(fields.getAsString()))) {\n+      return JSON_DATUM_READER.read(new JsonDecoder(reader), schemaToRead);\n+    } catch (IOException e) {\n+      LOG.error(\"Error while deserializing structured record {}\", e.getMessage(), e);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public JsonElement serialize(StructuredRecord src, Type typeOfSrc, JsonSerializationContext context) {\n+    StringWriter strWriter = new StringWriter();\n+    try (JsonWriter writer = new JsonWriter(strWriter)) {\n+      JSON_DATUM_WRITER.encode(src, new JsonEncoder(writer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e"}, "originalPosition": 78}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dd14ed07c46ccdab399c73093856a1b6727b578", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/1dd14ed07c46ccdab399c73093856a1b6727b578", "committedDate": "2020-07-06T17:51:58Z", "message": "address comment"}, "afterCommit": {"oid": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "committedDate": "2020-07-06T19:51:05Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "committedDate": "2020-07-06T19:51:05Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "6522910e47ab18828cc5c1850808148bf43a208a", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/6522910e47ab18828cc5c1850808148bf43a208a", "committedDate": "2020-07-09T00:36:16Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6522910e47ab18828cc5c1850808148bf43a208a", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/6522910e47ab18828cc5c1850808148bf43a208a", "committedDate": "2020-07-09T00:36:16Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "committedDate": "2020-07-09T00:42:41Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "committedDate": "2020-07-09T00:42:41Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "committedDate": "2020-07-09T00:45:23Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1839a32669de2ecb6d357ed6bbd621227084aee3", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/1839a32669de2ecb6d357ed6bbd621227084aee3", "committedDate": "2020-07-09T00:46:27Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "committedDate": "2020-07-09T00:45:23Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}, "afterCommit": {"oid": "1839a32669de2ecb6d357ed6bbd621227084aee3", "author": {"user": {"login": "CuriousVini", "name": "Vinisha Shah"}}, "url": "https://github.com/cdapio/cdap/commit/1839a32669de2ecb6d357ed6bbd621227084aee3", "committedDate": "2020-07-09T00:46:27Z", "message": "[CDAP-16754] Adding support for representing logical types as string in preview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTA4NTEw", "url": "https://github.com/cdapio/cdap/pull/12420#pullrequestreview-448508510", "createdAt": "2020-07-14T22:25:44Z", "commit": {"oid": "1839a32669de2ecb6d357ed6bbd621227084aee3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1935, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}