{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDkwNDg4", "number": 12889, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTo1OFrOFFOjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTo1OFrOFFOjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDI1Njg1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/Replicator/Detail/TableScatterPlotGraph/ScatterPlotTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTo1OFrOIFowxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo1Njo1MlrOIFwIFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MTYzOQ==", "bodyText": "Should we just move this to the helper function (humanReadableNumber). Right now we have a specific function for bytes, may be we could introduce one for decimal with units?", "url": "https://github.com/cdapio/cdap/pull/12889#discussion_r542781639", "createdAt": "2020-12-14T21:01:58Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/TableScatterPlotGraph/ScatterPlotTable.tsx", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { ITableMetricsData } from 'components/Replicator/Detail/TableScatterPlotGraph/parser';\n+import numeral from 'numeral';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    grid: {\n+      '&.grid-wrapper': {\n+        height: '100%',\n+\n+        '& .grid.grid-container.grid-compact': {\n+          maxHeight: '415px',\n+\n+          '& .grid-header > .grid-row': {\n+            alignItems: 'end',\n+          },\n+\n+          '& .grid-row': {\n+            gridTemplateColumns: '3fr 2fr 2fr 2fr 2fr',\n+\n+            '& > div:not(:first-child)': {\n+              textAlign: 'right',\n+            },\n+          },\n+        },\n+      },\n+    },\n+  };\n+};\n+\n+interface IScatterPlotTableProps extends WithStyles<typeof styles> {\n+  data: ITableMetricsData[];\n+}\n+\n+const ScatterPlotTableView: React.FC<IScatterPlotTableProps> = ({ classes, data }) => {\n+  return (\n+    <div className={`grid-wrapper ${classes.grid}`}>\n+      <div className=\"grid grid-container grid-compact\">\n+        <div className=\"grid-header\">\n+          <div className=\"grid-row\">\n+            <div>Table name</div>\n+            <div>\n+              <div>Throughput</div>\n+              <div>(events/min)</div>\n+            </div>\n+            <div>\n+              <div>Avg. latency</div>\n+              <div>min</div>\n+            </div>\n+            <div>\n+              <div>Events</div>\n+              <div>processed</div>\n+            </div>\n+            <div>Errors</div>\n+          </div>\n+        </div>\n+\n+        <div className=\"grid-body\">\n+          {data.map((table) => {\n+            const eventsPerMin = numberFormat(table.eventsPerMin);\n+            const latency = numberFormat(table.latency);\n+\n+            return (\n+              <div className=\"grid-row\" key={table.tableName}>\n+                <div>{table.tableName}</div>\n+                <div>{eventsPerMin}</div>\n+                <div>{latency}</div>\n+                <div>{table.totalEvents}</div>\n+                <div>{table.errors}</div>\n+              </div>\n+            );\n+          })}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+function numberFormat(d) {\n+  return numeral(d).format('0.00a');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f49d8bcac64d0e5d3ecb1b5d34973e9305df2d9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMjI5Mw==", "bodyText": "moved to a helper function", "url": "https://github.com/cdapio/cdap/pull/12889#discussion_r542902293", "createdAt": "2020-12-14T22:56:52Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/Replicator/Detail/TableScatterPlotGraph/ScatterPlotTable.tsx", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { ITableMetricsData } from 'components/Replicator/Detail/TableScatterPlotGraph/parser';\n+import numeral from 'numeral';\n+\n+const styles = (): StyleRules => {\n+  return {\n+    grid: {\n+      '&.grid-wrapper': {\n+        height: '100%',\n+\n+        '& .grid.grid-container.grid-compact': {\n+          maxHeight: '415px',\n+\n+          '& .grid-header > .grid-row': {\n+            alignItems: 'end',\n+          },\n+\n+          '& .grid-row': {\n+            gridTemplateColumns: '3fr 2fr 2fr 2fr 2fr',\n+\n+            '& > div:not(:first-child)': {\n+              textAlign: 'right',\n+            },\n+          },\n+        },\n+      },\n+    },\n+  };\n+};\n+\n+interface IScatterPlotTableProps extends WithStyles<typeof styles> {\n+  data: ITableMetricsData[];\n+}\n+\n+const ScatterPlotTableView: React.FC<IScatterPlotTableProps> = ({ classes, data }) => {\n+  return (\n+    <div className={`grid-wrapper ${classes.grid}`}>\n+      <div className=\"grid grid-container grid-compact\">\n+        <div className=\"grid-header\">\n+          <div className=\"grid-row\">\n+            <div>Table name</div>\n+            <div>\n+              <div>Throughput</div>\n+              <div>(events/min)</div>\n+            </div>\n+            <div>\n+              <div>Avg. latency</div>\n+              <div>min</div>\n+            </div>\n+            <div>\n+              <div>Events</div>\n+              <div>processed</div>\n+            </div>\n+            <div>Errors</div>\n+          </div>\n+        </div>\n+\n+        <div className=\"grid-body\">\n+          {data.map((table) => {\n+            const eventsPerMin = numberFormat(table.eventsPerMin);\n+            const latency = numberFormat(table.latency);\n+\n+            return (\n+              <div className=\"grid-row\" key={table.tableName}>\n+                <div>{table.tableName}</div>\n+                <div>{eventsPerMin}</div>\n+                <div>{latency}</div>\n+                <div>{table.totalEvents}</div>\n+                <div>{table.errors}</div>\n+              </div>\n+            );\n+          })}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+function numberFormat(d) {\n+  return numeral(d).format('0.00a');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MTYzOQ=="}, "originalCommit": {"oid": "3f49d8bcac64d0e5d3ecb1b5d34973e9305df2d9"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2548, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}